struct <lambda_0185f2fcaf29182e01e5e20f55c595fb>
{
	~<lambda_0185f2fcaf29182e01e5e20f55c595fb>();
};

struct <lambda_057488ec2a114cea6fb77af5c8c7453a>
{
	void operator()(char const *,unsigned short &,unsigned short);
};

class <lambda_06f5e94c872aa149ebfb08f8c984f403>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_07addfc01b5a15b9e6a299ea3205aeb7>
{
	long operator()(unsigned long,unsigned long,unsigned long *);
	~<lambda_07addfc01b5a15b9e6a299ea3205aeb7>();
};

class <lambda_0975fe2f1555e85eda3261a2a36018a8>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_0a4c5659e8368aeb314f53434332ab54>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_0ae89f7ca77040da3af7dd229dfecfb4>
{
	static long <lambda_invoker_cdecl>(__WIL__WNF_STATE_NAME,unsigned long,__WIL__WNF_TYPE_ID *,void *,void const *,unsigned long);
};

struct <lambda_0b0ea29adb38baec39914485464e8775>
{
	<lambda_0b0ea29adb38baec39914485464e8775>(<lambda_0b0ea29adb38baec39914485464e8775> const &);
	void operator()();
	~<lambda_0b0ea29adb38baec39914485464e8775>();
};

struct <lambda_0b131e519c905aff681ecf29b084c983>
{
	long operator()(bool &);
};

class <lambda_119a121fb38785c27806b92be2d82d86>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_120d0c6b51dc644cb63ed5c7fc62f6c3>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_147e36a80022279d49a89264b6535513>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_152aa9d2a3a0648fa2fa7fcef514b376>
{
	static void <lambda_invoker_cdecl>(void *);
};

class <lambda_15efdcdc02dcce07b3179f5b4d1fe0a3>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_16286fe9edebb121e83a2911c5464574>
{
	~<lambda_16286fe9edebb121e83a2911c5464574>();
};

class <lambda_1807517bb2a601749b2ae4fbbb57858f>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_1901c9f891705b2d33e723e5fa102f44>
{
	winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Internal::UI::Shell::WindowTabDataModel> operator()<winrt::Windows::Internal::UI::Shell::IWindowTabDataModelStatics const &>(winrt::Windows::Internal::UI::Shell::IWindowTabDataModelStatics const &);
};

class <lambda_1ad7ecfab602a777ecf020873216a663>
{
	static void <lambda_invoker_cdecl>(void *);
};

class <lambda_2284ad0f412f2bfddc83d7ef9652d66f>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

class <lambda_23ce349ad8b1303b9752fca832f8f7b0>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_24753d83db9805a1b3cb729875e7abb0>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_2520381e1860fe6008a618d103f3de1f>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_280d05e5955ef1ef6fea1bffa32e8a2c>
{
	void operator()(wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const &);
};

class <lambda_2a778f8121aa305892535f3550c397a2>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_2ca303a503a9bc4bb017c32a5a335e85>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_3e26dcec44775d43d9dfc79dea49f939>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_43b277c613f9e9ea449b850c5995e33f>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_44e945012bab8f6b706c51efd447e7a2>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_45b855c6f4f34031929308e7b0cc9e24>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

class <lambda_4d19eb78d2d318fd81ccffb962d1d1a6>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_4e92a466514511a8168cfdbd3e7cc271>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_4fd86d7f339d52492de09ef910ca4095>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

class <lambda_50d5f5935f73d6e1cfa7918addf0e10e>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_51d33002daa63bfc4d65f85f7f956340>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_54b66c8acde6d03bc095a0ebbc80a1f1>
{
	static int <lambda_invoker_cdecl>(winrt::impl::com_callback_args *);
};

struct <lambda_54c83054385b952be3ab173b3a76abf0>
{
	int operator()(HWND__ *);
};

struct <lambda_5e3471c756f87189046196c55c94088a>
{
	void operator()();
	~<lambda_5e3471c756f87189046196c55c94088a>();
};

class <lambda_5f1dd388c03885d19ee806198d2ac5ef>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

class <lambda_6268ba93b0f4a787e13bfdfc1db8eb78>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_6341f906d56bba57ec18edd8305f3a60>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_63f7170bce12b7e543c3c21ebfae390d>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_67a4077a10b7c017ab26ed22531248f2>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_692b62e119e69287558415adb7754127>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_6c8b5f6772d3e01ba2a5e8ade53ff1ef>
{
	<lambda_6c8b5f6772d3e01ba2a5e8ade53ff1ef>(<lambda_6c8b5f6772d3e01ba2a5e8ade53ff1ef> const &);
	void operator()();
	~<lambda_6c8b5f6772d3e01ba2a5e8ade53ff1ef>();
};

struct <lambda_6db4ebbdf38e00e5e14b8dc39eeb8db6>
{
	~<lambda_6db4ebbdf38e00e5e14b8dc39eeb8db6>();
};

class <lambda_70bc263229c7881e4aa0a680059fb776>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_713ee8bbd6b08550d59c52695cab5ce3>
{
	void operator()();
};

class <lambda_750a1ab3be31a0fa85906147a224df52>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_75f51455afdd6deeb34ec28b1e80a524>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_7ab9639d2235ac39484be6f8e25fe51c>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_7be3e90a96589580164e7896806c54b3>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_7c6f95392d1fa211f578d6d8eb47d107>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_7d544a6ebe9fabad27cf83ed972508d6>
{
	<lambda_7d544a6ebe9fabad27cf83ed972508d6>(<lambda_7d544a6ebe9fabad27cf83ed972508d6> const &);
	~<lambda_7d544a6ebe9fabad27cf83ed972508d6>();
};

class <lambda_7ddd513c8c70d581733925d1e8d989fc>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_7fa9ec76c559735b12dbf01bbe3e3c50>
{
	~<lambda_7fa9ec76c559735b12dbf01bbe3e3c50>();
};

class <lambda_8127ed7c5a5c4820bb697a3afc89f3a5>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_830a858705f438bc5eb56dc5316ebd68>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_843a4523c4ce898f7fb4bb4d9e96aac5>
{
	~<lambda_843a4523c4ce898f7fb4bb4d9e96aac5>();
};

class <lambda_85ce8dc69fb31a5df73cef2b402bbb84>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_8642547911a9ee42fdc61caf8f8cd99f>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_868f7fa048835520b2023eeceda2fa98>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_87ebf9cdbe9512ecf246e0e20380c4a1>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_8d5ca15cf69e69dee1fdb0dcddeb1e66>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_8df8cf0ede0f3243deb195ce006da952>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

class <lambda_8eb819313bdb989481ce252a7c52d7b8>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_8fbe65ba72b2d61923eb3411a963ff67>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_975e4d64c8b5daac57efc1784b54d4a5>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_9783efd0cf9a4011a5fefd366cc6ea27>
{
	~<lambda_9783efd0cf9a4011a5fefd366cc6ea27>();
};

class <lambda_98d309e3731f67b600e39960160efe32>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_9a0e71fa5596e2c383ee2a905b77935f>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_9a1fc197f7014196997da6a0b90f1490>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

class <lambda_9b32b78e7e2034d5f12543caa71580fb>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

struct <lambda_9c267cdafd8e064f323ec4e1c7ae30d4>
{
	void operator()(Windows::Foundation::IAsyncOperation<bool> ^,Windows::Foundation::AsyncStatus);
	~<lambda_9c267cdafd8e064f323ec4e1c7ae30d4>();
};

class <lambda_a0f0a9d1239e0e44ba8fde8210173a46>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

class <lambda_a3088610fb5396f8b42a9a023b177495>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_a3f24a602583fd453278e99ea20aab72>
{
	static int <lambda_invoker_cdecl>(winrt::impl::com_callback_args *);
};

class <lambda_a7f0a761e664b789011006ea52c1fb72>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_aa194dc0bf891154933407eb98fb868a>
{
	static void <lambda_invoker_cdecl>(void *);
};

class <lambda_b070bc67e2c9c03cf4cc93f221b7b97d>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_b2cc13a1030bf75285c22b578959c011>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_b3732bec005be52ff747cf12f24aa814>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_b55becccc8b67eee49088d4c1be9735f>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_b596592e3ff57c102c32409cde6b4c14>
{
	~<lambda_b596592e3ff57c102c32409cde6b4c14>();
};

struct <lambda_b70241e9b5ebaad244db3e52d52cab17>
{
	void operator()(unsigned short * const,unsigned short const * const,unsigned __int64,unsigned __int64,unsigned short);
};

struct <lambda_ba34a585c1760404579405f4d163a371>
{
	long operator()();
};

struct <lambda_ba612c6bfe63a6e8fafaf220a28082f2>
{
	long operator()();
};

class <lambda_baf814ee9ae89b980ad734f70dac785d>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

struct <lambda_bb8fbd677a66ce2f78cf5c6141b3460b>
{
	~<lambda_bb8fbd677a66ce2f78cf5c6141b3460b>();
};

struct <lambda_be3e5d9dce35d2c8dbfa8485373731d5>
{
	void operator()();
	~<lambda_be3e5d9dce35d2c8dbfa8485373731d5>();
};

struct <lambda_bf0c31f178687dd5d0af47a31b5c5700>
{
	void operator()();
};

struct <lambda_bff3641bf26a86aeb082b5bf5ec0081b>
{
	~<lambda_bff3641bf26a86aeb082b5bf5ec0081b>();
};

class <lambda_c2de52b76b02464b55ca8bf6e2d5d141>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_c8b199a0feb076873244f725fed1af37>
{
	void operator()();
};

class <lambda_c916e9e9cdf81665e4682fd57ca742e1>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_cadbad287469a7d6ee344248b165db13>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_cbb8aaa49d81df274072e54fa35a7719>
{
	<lambda_cbb8aaa49d81df274072e54fa35a7719>(wil::details::MakeSafelyCopyableResult<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem>,Windows::Internal::Shell::Holographic::Win32BackedViewHostItem *> const &,wil::details::MakeSafelyCopyableResult<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs>,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> const &);
	~<lambda_cbb8aaa49d81df274072e54fa35a7719>();
};

class <lambda_d2dfcefe90c696f2f984ba2092e12d6b>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_d3eb828bd1a14f7fd2ad7ce4e25a01fd>
{
	<lambda_d3eb828bd1a14f7fd2ad7ce4e25a01fd>(wil::details::MakeSafelyCopyableResult<Microsoft::WRL::ComPtr<ApplicationViewBackedViewHostItem>,ApplicationViewBackedViewHostItem *> const &, ?? :: ?? ::Z::$T const &, ?? );
	~<lambda_d3eb828bd1a14f7fd2ad7ce4e25a01fd>();
};

class <lambda_d71f6d60408a6de3c75f9a9c93a2d5fc>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_dd8f4aabae2ca26411facba6a281aa4a>
{
	void operator()();
};

struct <lambda_ded30c34a5b946bc18cf9caf8a4ec53d>
{
	~<lambda_ded30c34a5b946bc18cf9caf8a4ec53d>();
};

struct <lambda_dfd4c4fe7dd339db13c17a1e4e5cfd6e>
{
	void operator()(Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Windows::Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^);
	~<lambda_dfd4c4fe7dd339db13c17a1e4e5cfd6e>();
};

class <lambda_e1ff718f598a6a7bf79a481d174755c1>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_e21be6ce7c3ebc8b73b7211c05c7ecf4>
{
	long operator()();
};

class <lambda_e47dc56054974f6441f4df3a6c4c9af5>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_e53bbca54556f26c08250baf48169049>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_ec1d4b054d630c017dce9880fb168525>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_ed1a0a1124bc0bd6e2829c576bea0b94>
{
	winrt::Windows::Internal::UI::Shell::WindowTabsChangedEventArgs operator()<winrt::Windows::Internal::UI::Shell::IWindowTabsChangedEventArgsFactory const &>(winrt::Windows::Internal::UI::Shell::IWindowTabsChangedEventArgsFactory const &);
};

struct <lambda_ed53dc686cf6ff589a02cff9f21397f4>
{
	int operator()(HWND__ *);
};

class <lambda_f050a8947b8d1270f7eda0e498aa88e8>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_f4c52185d8a4a8e42bb1421645a7adf9>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_f514b7d7a4bf1295c9808fb12a890baa>
{
	long operator()(unsigned short const *,unsigned short * *);
};

class <lambda_f79d5b8d2c405e687024ad1f66b4c06d>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_fa30a613036bcec23797998bf71b5136>
{
	~<lambda_fa30a613036bcec23797998bf71b5136>();
};

class <lambda_fac79a549a8b210f59d21e9b666a8346>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_fb11ae61ca52cbbca3d237d126ab4bed>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_fbde14a9405218e607ae167596a7999b>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

class <lambda_fcbe7e8e9d69bc7433d8ee1b3dc43461>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_fee8cea507d2413a58be13acfb66740a>
{
	static void <lambda_invoker_cdecl>(void *);
};

class <lambda_ff1cb61a894a675aef28afa9d97db49a>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_ff60f04862d54e2e6c39b6ea8d81c79e>
{
	static void <lambda_invoker_cdecl>();
};

namespace ARI
{
	namespace ProcessToken
	{
		struct AutoSysAppId
		{
			long Close();
		};

		namespace SysAppId
		{
			long GetAppUserModelId(_TOKEN_SECURITY_ATTRIBUTE_V1 const *,unsigned int,unsigned int *,unsigned short *);
			long IsStronglyNamed(void *,bool *);
			long OpenTokenForProcess(void *,void * *);
		};

	};

	_TOKEN_SECURITY_ATTRIBUTES_INFORMATION * Allocate<_TOKEN_SECURITY_ATTRIBUTES_INFORMATION>(unsigned __int64);
	void Free(void *);
};

class AccessibilityExperienceManager
{
	bool ExcludeWindowFromCapture();
	bool IsEnabled();
	long EnsureInputDeviceWatcher();
	long RelaunchWithDelay();
	long _ChangeExperiencePropertiesForView(AccessibilityViewInfo *);
	long _CreateModalExperienceAsync();
	long _DismissView(AccessibilityViewInfo *);
	long _OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long _OnViewCreated(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,EventRegistrationToken);
	long _OnViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long _SetWindowTitle(IApplicationFrameWrapper *,unsigned short const *);
	static long _GetMonitorScaleForWindow(HWND__ *,DEVICE_SCALE_FACTOR *);
	virtual ~AccessibilityExperienceManager();
public:
	AccessibilityExperienceManager();
	long RuntimeClassInitialize();
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long OnChromeOffsetsChanged(IApplicationFrame *);
	virtual long OnCommand(IApplicationFrame *,_GUID const *,unsigned long);
	virtual long OnPositionChanged(IApplicationFrame *);
	virtual long OnRequestShowKeyboard();
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
	virtual void FocusEyeControl();
	virtual void NotifyWorkspaceRect();
	virtual void OnDeviceArrival(DeviceInfo const *);
	virtual void OnDeviceEnumerationCompleted();
	virtual void OnDeviceRemoval(DeviceInfo const *);
	virtual void OnDeviceUpdate(DeviceInfo const *);
	virtual void OnNotificationEvent(void const *,unsigned long);
	virtual void OnServerDisconnect();
	virtual void SetNoActivate(bool);
	virtual void SetTransparent(bool);
	virtual void SetWindowPosition(unsigned int,unsigned int,unsigned int,unsigned int);
	virtual void Show(bool);
};

struct AccessibilityExperienceManagerCF
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

namespace AccessibilityHelpers
{
	long GetBSTRSafeArray(unsigned short const *,tagSAFEARRAY * *);
	long GetBoundingRectangle(tagRECT const *,tagVARIANT *);
	long GetSafeArray(IRawElementProviderSimple *,tagSAFEARRAY * *);
};

struct AccessibilityViewInfo
{
	long GetFrameRect(tagRECT *);
};

struct AccessibleElement
{
	AccessibleElement();
};

class AccessibleElementBase
{
protected:
	long _GetElement(_GUID const &,void * *);
	long _GetGridItemCoordinates(int *,int *);
	long _GetParentGrid(ISwitchItemGrid * *);
	long _GetParentScrollViewer(IScrollViewer * *);
	long _GetRuntimeIdArray(unsigned __int64,tagSAFEARRAY * *);
public:
	virtual long AddToSelection();
	virtual long ElementProviderFromPoint(double,double,IRawElementProviderFragment * *);
	virtual long GetEmbeddedFragmentRoots(tagSAFEARRAY * *);
	virtual long GetFocus(IRawElementProviderFragment * *);
	virtual long GetItem(int,int,IRawElementProviderSimple * *);
	virtual long GetPatternProvider(int,IUnknown * *);
	virtual long GetPropertyValue(int,tagVARIANT *);
	virtual long GetRuntimeId(tagSAFEARRAY * *);
	virtual long GetSelection(tagSAFEARRAY * *);
	virtual long Invoke();
	virtual long Navigate(NavigateDirection,IRawElementProviderFragment * *);
	virtual long RemoveFromSelection();
	virtual long Scroll(ScrollAmount,ScrollAmount);
	virtual long ScrollIntoView();
	virtual long Select();
	virtual long SetFocus();
	virtual long SetScrollPercent(double,double);
	virtual long ShowContextMenu();
	virtual long get_BoundingRectangle(UiaRect *);
	virtual long get_CanSelectMultiple(int *);
	virtual long get_Column(int *);
	virtual long get_ColumnCount(int *);
	virtual long get_ColumnSpan(int *);
	virtual long get_ContainingGrid(IRawElementProviderSimple * *);
	virtual long get_FragmentRoot(IRawElementProviderFragmentRoot * *);
	virtual long get_HorizontalScrollPercent(double *);
	virtual long get_HorizontalViewSize(double *);
	virtual long get_HorizontallyScrollable(int *);
	virtual long get_HostRawElementProvider(IRawElementProviderSimple * *);
	virtual long get_IsSelected(int *);
	virtual long get_IsSelectionRequired(int *);
	virtual long get_ProviderOptions(ProviderOptions *);
	virtual long get_Row(int *);
	virtual long get_RowCount(int *);
	virtual long get_RowSpan(int *);
	virtual long get_SelectionContainer(IRawElementProviderSimple * *);
	virtual long get_VerticalScrollPercent(double *);
	virtual long get_VerticalViewSize(double *);
	virtual long get_VerticallyScrollable(int *);
};

class AcrylicPolicyManager
{
	long RegisterForEnergySaverStateChange();
	long RegisterForTransparencyChange();
	long UpdateAcrylicState(bool);
	static bool _IsDeviceCapableOfAcrylic();
	static bool _IsHighContrast();
	static bool _IsTransparencyEnabled();
public:
	AcrylicPolicyManager();
	virtual long OnBatterySaverStateChanged(bool);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

struct ActionCenterExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

class ActivationHints
{
	struct Hint
	{
		~Hint();
	};

	void DeleteExpiredHints();
public:
	ActivationHints();
	virtual long AddHint(AppIdInfo,IUnknown *);
	virtual long Clear();
	virtual long GetAndDeleteFirstHint(AppIdInfo,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long GetKeyAt(unsigned int,AppIdInfo *);
	virtual long GetValueAt(unsigned int,_GUID const &,void * *);
};

struct AgileApplicationViewChangeListenerConverter
{
	long RuntimeClassInitialize(IApplicationViewChangeListener *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
};

struct AgileGitPtr
{
	long Revoke();
	~AgileGitPtr();
};

struct AgileRegistrationList
{
	struct AgileCallbackArray
	{
		AgileCallbackArray(std::vector<Item,std::allocator<Item> > &);
		virtual long GetAt(unsigned int,_GUID const &,void * *);
		virtual long GetCount(unsigned int *);
	};

	struct Item
	{
		~Item();
	};

	long GetCallbackArray(IObjectArray * *);
	long Register(IUnknown *,unsigned long *);
	long Unregister(unsigned long);
};

class AllUpViewUriHandler
{
	long ParseFlagsFromUriPath(unsigned short const *,ALL_UP_VIEW_FLAGS *);
	long ShowAllUpView(ALL_UP_VIEW_FLAGS);
public:
	AllUpViewUriHandler();
	virtual long Execute();
	virtual long GetSelection(_GUID const &,void * *);
	virtual long SetDirectory(unsigned short const *);
	virtual long SetKeyState(unsigned long);
	virtual long SetNoShowUI(int);
	virtual long SetParameters(unsigned short const *);
	virtual long SetPosition(tagPOINT);
	virtual long SetSelection(IShellItemArray *);
	virtual long SetShowWindow(int);
};

class AltEscHotkeyHandler
{
protected:
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~AltEscHotkeyHandler();
public:
	AltEscHotkeyHandler();
	long RuntimeClassInitialize(WeakReference::IWeakReference *);
};

class AltTabWindowHook
{
	static __int64 AltTabHookProc(int,unsigned __int64,__int64);
	static std::vector<std::shared_ptr<AltTabWindowHookData>,std::allocator<std::shared_ptr<AltTabWindowHookData> > > s_altTabHooks;
	static wil::srwlock s_altTabHookLock;
public:
	AltTabWindowHook(XamlAltTabViewController ^);
	~AltTabWindowHook();
};

struct AltTabWindowHookData
{
	XamlAltTabViewController ^ GetController();
};

namespace AppActivationPropertySetHelpers
{
	long ConditionallyNotifyUAOfLaunch(unsigned short const *,Windows::Foundation::Collections::IPropertySet *);
	unsigned short const * const c_ShouldNotifyUAOfLaunch;
};

struct AppCloseTelemetry
{
	class ShellAppManagerCloseRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long);
		~ShellAppManagerCloseRequested();
	};

	static bool IsEnabled(unsigned char,unsigned __int64);
};

struct AppInventoryData
{
	~AppInventoryData();
};

struct AppLayoutCache
{
	virtual long GetCachedLayout(IAppLayout * *);
	virtual long SetCachedLayout(IAppLayout *);
	virtual long v_QueryService(_GUID const &,_GUID const &,void * *);
};

namespace AppLayoutFinders
{
	struct CAppLayoutItemFinderByApplication
	{
		int Compare(Microsoft::WRL::ComPtr<IAppLayoutItem> const &,Microsoft::WRL::ComPtr<IAppLayoutItem> const &);
	};

};

namespace AppLayoutHelpers
{
	long BuildSingleViewLayout(IApplicationView *,IAppLayout * *);
	long GetSingleViewFromLayout(IAppLayout *,IApplicationView * *);
	unsigned int GetPlaceModeGutterIndex(IAppLayout *);
	void GetDragVisualScaledSize(Geometry::CRect const &,DEVICE_SCALE_FACTOR,DEVICE_SCALE_FACTOR,tagSIZE const &,tagSIZE *);
};

struct AppRequestOperation
{
	AppRequestOperation();
	virtual long GetResults(Windows::Internal::Shell::ViewManagerInterop::AppRequestHandledResult *);
	virtual long OnStart();
	virtual long get_Completed(Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Shell::ViewManagerInterop::AppRequestHandledResult> * *);
	virtual long put_Completed(Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Shell::ViewManagerInterop::AppRequestHandledResult> *);
	virtual void OnCancel();
	virtual void OnClose();
};

class AppResizeAcc
{
	long AddPendingNotification(int,tagVARIANT const &);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~AppResizeAcc();
	void ProcessPendingNotifications(bool);
	void RaisePropertyChangeNotification(int);
public:
	AppResizeAcc();
	long RuntimeClassInitialize();
	virtual long GetGrabbedItems(tagSAFEARRAY * *);
	virtual long GetPatternProvider(int,IUnknown * *);
	virtual long GetPropertyValue(int,tagVARIANT *);
	virtual long get_DropEffect(unsigned short * *);
	virtual long get_DropEffects(tagSAFEARRAY * *);
	virtual long get_HostRawElementProvider(IRawElementProviderSimple * *);
	virtual long get_IsGrabbed(int *);
	virtual long get_ProviderOptions(ProviderOptions *);
	virtual void Disconnect();
	virtual void EndDrag(bool);
	virtual void GetHashTable(CSimpleHashTable<IApplicationView *,unsigned short const *,CDefaultHashPolicy<IApplicationView *>,CDefaultKeyCompare<IApplicationView *>,CDefaultResizePolicy,CDefaultRehashPolicy> * *);
	virtual void SetDropEffect(unsigned short const *);
	virtual void ShowFocus();
	virtual void StartDrag();
	virtual void UpdateItem(IUnknown *);
};

class AppResizeData
{
	long AddDropTarget(ResizeDropLocation,Geometry::CRect const &);
	long ComputeDropTargets();
	long ComputeLeftMinWidthMagnetRect(Geometry::CRect *);
	long ComputeRightMinWidthMagnetRect(Geometry::CRect *);
	void ComputeMiddleMagnetRect(Geometry::CRect *);
public:
	AppResizeData();
	virtual ResizeDropTarget GetDropTarget();
	virtual int GetMiddleMagnetWidth();
	virtual int GetMinWidthMagnetWidth();
	virtual long RecomputeDropTargets();
	virtual void ResetState();
	virtual void UpdateDropTarget(Geometry::CPoint const &,ResizeDropTarget *);
};

class AppResizeOperation
{
	long QueryResizeApps(ResizeAction,tagPOINT const &);
public:
	AppResizeOperation();
	virtual long ResizeApps(ResizeAction,tagPOINT const &);
	virtual void SetOldAppLayout(IAppLayout *);
	virtual void SetTempAppVisuals(ITemporaryAppVisualArray *);
};

class AppResizeView
{
	long CommitResize(Geometry::CPoint const &);
	long InitAppLayout();
	long InitAppResizeData(Geometry::CPoint const &);
	long InitDropFeedback(Geometry::CPoint const &);
	long MapResizeDropLocationToResizeAction(ResizeDropLocation,ResizeAction *);
	long QueryResizeApps(ResizeDropLocation,Geometry::CPoint const &,IAppLayoutOperation * *);
	long UpdateAppResizeData(Geometry::CPoint const &,UpdateAppResizeDataFlags);
	long UpdateDropFeedback(ResizeDropLocation,ResizeDropLocation,Geometry::CPoint const &,UpdateDropFeedbackFlags);
	long UpdateUIADropEffect(IAppLayoutOperation *,ResizeAction);
	void CancelResize();
	void Cleanup();
	void MakeDragGutterRect(int,tagRECT *);
public:
	AppResizeView();
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnCaptureChanged();
	virtual long OnKeyDown(unsigned long);
	virtual long OnKeyUp(unsigned long);
	virtual long OnPointerCancel();
	virtual long OnPointerDown(unsigned int,tagPOINT *);
	virtual long OnPointerUp(unsigned int,tagPOINT *);
	virtual long OnPointerUpdate(unsigned int,tagPOINT *);
	virtual long SetSite(IUnknown *);
	virtual long Show(tagPOINT const &);
	virtual void Hide(bool);
};

class AppSizeConstraintsCache
{
	static Geometry::CSize const s_defaultMaxSize;
	static Geometry::CSize const s_defaultMinSize;
	virtual APP_SIZE_CONSTRAINTS GetSizeConstraintsForDpi(unsigned int);
	virtual long SetSizeConstraintsForDpi(unsigned int,APP_SIZE_CONSTRAINTS const &);
};

class AppSwitchOperation
{
	long QueryAppToAppSwitch(IApplicationView *,APPLICATION_VIEW_SIZE_PREFERENCE,IApplicationView *,APPLICATION_VIEW_SIZE_PREFERENCE,FinalizeLayoutFlags *);
	long QueryEvictApp(IApplicationView *,EVICT_APP_FLAGS);
	long QuerySwitchToApp(IApplicationView *,SWITCH_TO_APP_FLAGS);
public:
	AppSwitchOperation();
	virtual long AppToAppSwitch(IApplicationView *,APPLICATION_VIEW_SIZE_PREFERENCE,IApplicationView *,APPLICATION_VIEW_SIZE_PREFERENCE,APP_TO_APP_SWITCH_FLAGS);
	virtual long EvictApp(IApplicationView *,EVICT_APP_FLAGS);
	virtual long ReverseAppToAppSwitch(IApplicationView *,REVERSE_APP_SWITCH_FLAGS);
	virtual long SwitchToApp(IApplicationView *,SWITCH_TO_APP_FLAGS);
	virtual void SetOldAppLayout(IAppLayout *);
	virtual void SetTempAppVisuals(ITemporaryAppVisualArray *);
};

struct AppUsageTelemetry
{
	class UpdateAppView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		void Stop(unsigned short const *,bool,bool);
		~UpdateAppView();
	};

	static _tlgProvider_t const * Provider();
	static void DebugInfo<unsigned short const (&)[36]>(unsigned short const (&)[36]);
	static void FamilyAppUsageManagerStarted();
	static void StartUsageTracking();
	static void StopUsageTracking();
};

class AppUsageTracker
{
	void UpdateViewState(IApplicationView *,Windows::Internal::FamilySafety::AppLimits::ViewState);
public:
	AppUsageTracker(IServiceProvider *,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification *,Windows::Internal::FamilySafety::AppLimits::ViewTrackingOption);
	virtual bool IsAppActive(unsigned short const *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetDisplayName(unsigned short const *);
	virtual std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > GetActiveApps();
	virtual void CancelTerminateApp(unsigned short const *);
	virtual void EnumerateAppStateData(Windows::Internal::FamilySafety::AppLimits::IAppStateDataReporter *);
	virtual void EnumerateExistingViews();
	virtual void StartTracking();
	virtual void StopTracking();
	virtual void TerminateApp(unsigned short const *,Windows::Internal::FamilySafety::AppLimits::TerminationType);
};

class AppViewDataSourceAdapter
{
	virtual ~AppViewDataSourceAdapter();
	void InitializeItems();
	void OnTabAdded(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	void OnTabHostedAppChanged(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	void OnTabPropertyChanged(Windows::Internal::ComposableShell::Tabs::IShellTab *,Microsoft::WRL::Wrappers::HString const &);
	void OnTabRemoved(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	void RegisterTabWatcher();
	void RemoveItemForTab(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	void UpdateTabActivationTimestamp(Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	void UpdateTabAppId(Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	void UpdateTabDisplayName(Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	void UpdateTabIcon(Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	void UpdateTabThumbnail(Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IIconFactory,wil::err_exception_policy> TryMakeIconFactoryForTab(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> AddItemForTab(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> FindItemForTab(Windows::Internal::ComposableShell::Tabs::IShellTab *);
protected:
	virtual bool ShouldIncludeView(IApplicationView *);
	virtual void UpdateItemData(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
public:
	AppViewDataSourceAdapter();
	long RuntimeClassInitialize(AppViewDataSourceScope,IApplicationViewCollection *,IApplicationViewIconLoader *,IImmersiveShellHookService *,Windows::Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice *,IInspectable *,IInspectable *,ITabViewManager *);
	virtual long GetDataSource(_GUID const &,void * *);
	virtual long GetSwitchItemForApplicationView(IApplicationView *,_GUID const &,void * *);
	virtual long GetSwitchItemForTab(IInspectable *,_GUID const &,void * *);
};

class AppViewDataSourceAdapterBase
{
	long OnTabSelectionChanged(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	long UpdateTabItemForView(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
protected:
	bool IsViewTabbed(IApplicationView *);
	virtual bool ShouldIncludeView(IApplicationView *);
	virtual void OnApplicationViewAdded(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void OnApplicationViewAppIdChanged(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void OnApplicationViewFocusChanged(APPLICATION_VIEW_CHANGE,IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void OnApplicationViewRemoved(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void OnApplicationViewThumbnailWindowChanged(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void OnApplicationViewVisibilityChanged(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void UpdateActivationTimestamp(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void UpdateAppId(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void UpdateDisplayName(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void UpdateIcon(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void UpdateIsVisible(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	virtual void UpdateThumbnail(IApplicationView *,Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem *);
	void InitializeDataSource(IApplicationViewCollection *,IApplicationViewIconLoader *,IImmersiveShellHookService *,Windows::Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice *,IInspectable *,IInspectable *,ITabViewManager *);
	void RemoveItemForView(IApplicationView *);
	wil::com_ptr_t<IApplicationView,wil::err_exception_policy> FindViewForWindow(HWND__ *);
	wil::com_ptr_t<IApplicationView,wil::err_exception_policy> GetViewForTab(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> AddItemForView(IApplicationView *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> FindItemForView(IApplicationView *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> TryGetSelectedTabForView(IApplicationView *);
	~AppViewDataSourceAdapterBase();
public:
	AppViewDataSourceAdapterBase();
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
};

namespace AppViewDataSourceHelpers
{
	Microsoft::WRL::ComPtr<IApplicationView> GetApplicationViewForItem(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^);
	long GetApplicationViewForItemData(IInspectable *,_GUID const &,void * *);
};

namespace AppViewEventHelpers
{
	struct ApplicationViewEventListener
	{
		~ApplicationViewEventListener();
	};

	struct EventListener<IApplicationViewCollection,IApplicationViewChangeListener,details::ApplicationViewEventRegistration>
	{
		long Register(IApplicationViewCollection *);
		void Unregister();
	};

	struct EventListener<IImmersiveShellHookService,IImmersiveShellHookNotification,details::ShellHookRegistration>
	{
		long Register(IImmersiveShellHookService *);
		void Unregister();
	};

	struct ShellHookEventListener
	{
		~ShellHookEventListener();
	};

	namespace details
	{
		struct ApplicationViewEventRegistration
		{
			virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
			virtual long Register(IApplicationViewCollection *);
		};

		struct EventRegistration<IApplicationViewCollection,IApplicationViewChangeListener>
		{
			long RuntimeClassInitialize(IApplicationViewChangeListener *);
			virtual ~EventRegistration<IApplicationViewCollection,IApplicationViewChangeListener>();
			void Unregister();
		};

		struct EventRegistration<IImmersiveShellHookService,IImmersiveShellHookNotification>
		{
			long RuntimeClassInitialize(IImmersiveShellHookNotification *);
			virtual ~EventRegistration<IImmersiveShellHookService,IImmersiveShellHookNotification>();
			void Unregister();
		};

		struct ShellHookRegistration
		{
			ShellHookRegistration();
			virtual long OnShellHookMessage(unsigned __int64,__int64);
			virtual long Register(IImmersiveShellHookService *);
		};

	};

};

struct AppViewIconFactory
{
	AppViewIconFactory();
	static long CreateInstance(IApplicationView *,IApplicationViewIconLoader *,_GUID const &,void * *);
	virtual long CreateImageSource(Windows::Internal::ComposableShell::Multitasking::IconProperties,Windows::UI::Xaml::Media::IImageSource * *);
};

class AppViewIconLoader
{
	long IconLoadedInternal(HBITMAP__ *);
	static tagSIZE ConvertSize(int,Windows::Foundation::Size);
public:
	AppViewIconLoader();
	long RuntimeClassInitialize(Windows::Internal::ComposableShell::Multitasking::IconProperties,IApplicationView *,Windows::UI::Xaml::Media::Imaging::IWriteableBitmap *,IApplicationViewIconLoader *);
	virtual void IconLoaded(HBITMAP__ *);
};

namespace AppViewManagerTabTelemetry
{
	class DragCancel
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(_GUID const &);
	};

	class DragComplete
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void DragViewComplete(IApplicationView *);
		void StartActivity(_GUID const &,tagPOINT const &);
		~DragComplete();
	};

	class DragEnterForView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,_GUID const &,tagPOINT const &);
		~DragEnterForView();
	};

	class DragLeave
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(_GUID const &,tagPOINT const &);
	};

};

struct AppViewSwitchItemZOrderSort
{
	AppViewSwitchItemZOrderSort();
	virtual long SortItems(Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> *,Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> * *);
};

class ApplicationViewBackedViewHostItem
{
	long _FirePresentationReadinessEvent(bool);
public:
	ApplicationViewBackedViewHostItem(wil::AsyncEventSerialInvocationContextToken &);
	long RuntimeClassInitialize(IApplicationView *);
	virtual long Activate();
	virtual long BindSizeToRectangle(Windows::Foundation::Rect);
	virtual long ChangeBounds(Windows::Internal::Shell::ViewManagerInterop::ViewBounds);
	virtual long DisconnectFromPresentationLayer();
	virtual long EnterFullScreen();
	virtual long ExitFullScreen();
	virtual long GetActivationPropertySet(Windows::Foundation::Collections::IPropertySet * *);
	virtual long IsEqualByApplicationView(IApplicationView *,int *);
	virtual long NotifySplashScreenDismissed();
	virtual long OnImmersiveApplicationPresentationChange(IImmersiveApplication *,IMMERSIVE_APPLICATION_PRESENTATION_CHANGE);
	virtual long RaiseFrameworkViewTypeSet();
	virtual long RaisePresentationNotReady();
	virtual long RaiseSizePreferencesChanged(Windows::Foundation::Size);
	virtual long SetActivationPropertySet(Windows::Foundation::Collections::IPropertySet *);
	virtual long TakeForeground(Windows::Internal::ComposableShell::ForegroundPolicyResult *);
	virtual long TryBack();
	virtual long TryClose(unsigned char);
	virtual long add_BackButtonVisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_FrameworkViewTypeSet(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *> *,EventRegistrationToken *);
	virtual long add_PresentationReadyChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> *,EventRegistrationToken *);
	virtual long add_SizePreferencesChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *,EventRegistrationToken *);
	virtual long add_TitleBarChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewModeChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *,EventRegistrationToken *);
	virtual long get_AppUserModelId(HSTRING__ * *);
	virtual long get_CompositionId(unsigned int *);
	virtual long get_CoreWindowId(unsigned int *);
	virtual long get_FrameworkViewType(int *);
	virtual long get_IsBackButtonVisible(unsigned char *);
	virtual long get_ProcessId(unsigned int *);
	virtual long get_ReadyToPresent(unsigned char *);
	virtual long get_Size(Windows::Foundation::Size *);
	virtual long get_UniqueId(unsigned int *);
	virtual long get_ViewMode(Windows::Internal::Shell::Holographic::ViewMode *);
	virtual long get_Visibility(unsigned char *);
	virtual long put_Visibility(unsigned char);
	virtual long remove_BackButtonVisibilityChanged(EventRegistrationToken);
	virtual long remove_FrameworkViewTypeSet(EventRegistrationToken);
	virtual long remove_PresentationReadyChanged(EventRegistrationToken);
	virtual long remove_SizePreferencesChanged(EventRegistrationToken);
	virtual long remove_TitleBarChanged(EventRegistrationToken);
	virtual long remove_ViewModeChangeRequested(EventRegistrationToken);
	virtual ~ApplicationViewBackedViewHostItem();
};

class ApplicationViewCollection
{
	std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > FindView(IApplicationView *);
public:
	bool RemoveView(IApplicationView *);
};

struct ApplicationViewCollectionWrapper
{
	wil::com_ptr_t<IApplicationView,wil::err_exception_policy> TryGetViewForPresentedHwnd(HWND__ *);
	~ApplicationViewCollectionWrapper();
};

namespace ApplicationViewHelpers
{
	HWND__ * GetCoreWindowForView(IApplicationView *);
	HWND__ * GetFrameWindowForView(IApplicationView *);
	HWND__ * GetWindowForView(IApplicationView *);
	IImmersiveApplication * GetApplicationFromView(IApplicationView *);
	bool CanMaximizeView(IApplicationView *);
	bool CanMaximizeWindow(HWND__ *);
	bool CanResizeWindow(HWND__ *);
	bool HasRootSwitchableOwner(IApplicationView *);
	bool IsViewOnMonitor(IApplicationView *,IImmersiveMonitor *);
	bool IsViewShownInSwitchers(IApplicationView *);
	bool IsWindowInHighZOrderBand(HWND__ *);
	long CloseView(IApplicationView *,IImmersiveAppCrusher *,APPCRUSHER_INPUT,APPCRUSHER_SOURCE,APPCRUSHER_CLOSE_OPTIONS);
	long GetApplicationFromView(IApplicationView *,IImmersiveApplication * *);
	long GetViewForApplication(IUnknown *,IImmersiveApplication *,IApplicationView * *);
	long GetViewTitle(IApplicationView *,unsigned short * *);
	void GetRootSwitchableOwnerOrSelf(IApplicationView *,IApplicationView * *);
};

namespace ApplicationViewManagement
{
	class ApplicationViewTelemetry
	{
	protected:
		void Create();
	public:
		static void AppSizeConstraintsSet<unsigned int &,Geometry::CSize const &,Geometry::CSize const &>(unsigned int &,Geometry::CSize const &,Geometry::CSize const &);
		static void ApplicationViewManagerInitializationFailed<unsigned short const (&)[11],long &>(unsigned short const (&)[11],long &);
		static void ApplicationViewManagerInitializationFailed<unsigned short const (&)[7],long &>(unsigned short const (&)[7],long &);
		void AppSizeConstraintsSet_(unsigned int,tagSIZE,tagSIZE);
	};

	namespace ApplicationViewTraceLogging
	{
		class RaiseApplicationViewChange
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
			~RaiseApplicationViewChange();
		};

	};

	struct AssociatedWindowWin32Calls
	{
		static int EnumThreadWindows(unsigned long,int (*)(HWND__ *,__int64),__int64);
	};

	struct CGlobals
	{
		CGlobals();
		virtual ~CGlobals();
	};

	class CPersistence
	{
		long _PersistData(unsigned short const *,unsigned short const *,unsigned char const *,unsigned long);
		long _ReadPersistedData(unsigned short const *,unsigned short const *,void *,unsigned long);
	public:
		long Initialize();
	};

	class ToolWindowGathererTemplated<AssociatedWindowWin32Calls>
	{
		struct ChromeWindowGatherer
		{
			long Finalize(CCoSimpleArray<HWND__ *,4294967294,CSimpleArrayStandardCompareHelper<HWND__ *> > &);
		};

		class QuadShadowWindowGatherer
		{
			bool ProcessWindowBool(HWND__ *);
		public:
			long Finalize(CCoSimpleArray<HWND__ *,4294967294,CSimpleArrayStandardCompareHelper<HWND__ *> > &);
		};

		struct SingleShadowWindowGatherer
		{
			long Finalize(CCoSimpleArray<HWND__ *,4294967294,CSimpleArrayStandardCompareHelper<HWND__ *> > &);
		};

		static int IsEligibleToolWindow(HWND__ *);
		static long CheckBorderWindowAlignment(tagRECT,HWND__ *,ToolWindowGathererTemplated<AssociatedWindowWin32Calls>::BorderWindowAlignment,Alignment *);
		static long CheckBorderWindowAttributes(tagRECT,HWND__ *,ToolWindowGathererTemplated<AssociatedWindowWin32Calls>::BorderWindowAlignment,Alignment *);
	public:
		long GatherWindows(HWND__ *);
		long ValidateGatheredWindows(HWND__ *);
		static long GetExternalWindowAlignmentWithRect(tagRECT const &,HWND__ *,Alignment *);
		static long GetInternalWindowAlignmentWithRect(tagRECT const &,HWND__ *,Alignment *);
	};

};

class ApplicationViewManagerVisibilityDebouncer
{
	struct ApplicationViewManagerNotification
	{
		ApplicationViewManagerNotification(ApplicationViewManagerNotification const &);
		~ApplicationViewManagerNotification();
	};

	long ProcessPendingNotifications();
	void ClearCachedAppView(IApplicationView *);
public:
	ApplicationViewManagerVisibilityDebouncer();
	long RuntimeClassInitialize(IApplicationViewCollection *);
	virtual long FlushChangeNotifications();
	virtual long GetOwnerAppView(IApplicationView *,IApplicationView * *);
	virtual long GetSwitchWindow(IWin32ApplicationView *,HWND__ * *);
	virtual long GetViewForAppUserModelId(unsigned short const *,IApplicationView * *);
	virtual long GetViewForApplication(IImmersiveApplication *,IApplicationView * *);
	virtual long GetViewForHwnd(HWND__ *,IApplicationView * *);
	virtual long GetViewInFocus(IApplicationView * *);
	virtual long GetViews(IObjectArray * *);
	virtual long GetViewsByAppUserModelId(unsigned short const *,IObjectArray * *);
	virtual long GetViewsByZOrder(IObjectArray * *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long RefreshCollection();
	virtual long RegisterForApplicationViewChanges(IApplicationViewChangeListener *,unsigned long *);
	virtual long Shutdown();
	virtual long TryGetLastActiveVisibleView(IApplicationView * *);
	virtual long UnregisterForApplicationViewChanges(unsigned long);
	virtual long VerifyCollection(unsigned long *);
	virtual void HandleApplicationViewChangeSync(IApplicationView *,APPLICATION_VIEW_CHANGE);
	virtual ~ApplicationViewManagerVisibilityDebouncer();
};

struct ApplicationViewOperation
{
	ApplicationViewOperation();
	virtual long GetAppChromePolicy(APP_CHROME_CONFIGURATION_POLICY *);
	virtual long GetChromeOptions(APPLICATION_FRAME_CHROME_OPTIONS *,APPLICATION_FRAME_CHROME_OPTIONS *);
	virtual long GetPosition(IApplicationViewPosition * *);
	virtual long GetPreferredAspectRatioHint(tagSIZE *);
	virtual long GetSizeConstraintOverridesLogical(tagSIZE *,tagSIZE *);
	virtual long GetSizeConstraintOverridesPhysical(tagSIZE *,tagSIZE *);
	virtual long GetTitlebarConfiguration(IApplicationViewTitlebarConfiguration * *);
	virtual long GetTouchBehavior(APPLICATION_FRAME_TOUCH_BEHAVIOR *);
	virtual long GetViewStateData(APPLICATION_VIEW_DATA_UPDATE *);
	virtual long GetVisibility(int *);
	virtual long GetWindowingEnvironmentConfig(IWindowingEnvironmentConfig * *);
	virtual long GetZOrderBand(unsigned long *);
	virtual long SetAppChromePolicy(APP_CHROME_CONFIGURATION_POLICY);
	virtual long SetArrangeOptions(ARRANGEMENT_BASED_VIEW_STATE_OPTIONS);
	virtual long SetArrangeState(ARRANGEMENT_BASED_VIEW_STATE);
	virtual long SetChromeOptions(APPLICATION_FRAME_CHROME_OPTIONS,APPLICATION_FRAME_CHROME_OPTIONS);
	virtual long SetPosition(IApplicationViewPosition *);
	virtual long SetPreferredAspectRatioHint(tagSIZE *);
	virtual long SetRestoreRect(tagRECT);
	virtual long SetSizeConstraintOverridesLogical(tagSIZE *,tagSIZE *);
	virtual long SetSizeConstraintOverridesPhysical(tagSIZE *,tagSIZE *);
	virtual long SetSnapOptions(unsigned long);
	virtual long SetTitlebarConfiguration(IApplicationViewTitlebarConfiguration *);
	virtual long SetTouchBehavior(APPLICATION_FRAME_TOUCH_BEHAVIOR);
	virtual long SetViewStateData(APPLICATION_VIEW_DATA_UPDATE const *);
	virtual long SetVisibility(int);
	virtual long SetWindowingEnvironmentConfig(IWindowingEnvironmentConfig *);
	virtual long SetZOrderBand(unsigned long);
	virtual long get_ShouldReconnectTitleBar(unsigned char *);
	virtual long get_ShouldRecreateTitleBar(unsigned char *);
	virtual long get_TabGroupId(Windows::Internal::ComposableShell::Tabs::ShellTabGroupId *);
	virtual long put_ShouldReconnectTitleBar(unsigned char);
	virtual long put_ShouldRecreateTitleBar(unsigned char);
	virtual long put_TabGroupId(Windows::Internal::ComposableShell::Tabs::ShellTabGroupId);
};

struct ApplicationViewTabInsertionContext
{
	ApplicationViewTabInsertionContext();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct ApplicationViewTitlebarConfiguration
{
	ApplicationViewTitlebarConfiguration();
	virtual long GetDragOptions(TITLE_BAR_DRAG_OPTIONS *);
	virtual long GetEnabledSystemMenuItems(TITLE_BAR_SYSTEM_MENU_ITEMS *);
	virtual long GetHideOptions(TITLE_BAR_HIDE_OPTIONS *);
	virtual long GetShowOptions(TITLE_BAR_SHOW_OPTIONS *,TITLE_BAR_SHOW_OPTIONS *);
	virtual long GetSuppressedButtons(TITLE_BAR_SUPPRESSIBLE_BUTTONS *,TITLE_BAR_SUPPRESSIBLE_BUTTONS *);
	virtual long GetVisibility(int *);
	virtual long GetVisibleButtons(TITLE_BAR_BUTTONS *,TITLE_BAR_BUTTONS *);
	virtual long SetDragOptions(TITLE_BAR_DRAG_OPTIONS);
	virtual long SetEnabledSystemMenuItems(TITLE_BAR_SYSTEM_MENU_ITEMS);
	virtual long SetHideOptions(TITLE_BAR_HIDE_OPTIONS);
	virtual long SetShowOptions(TITLE_BAR_SHOW_OPTIONS,TITLE_BAR_SHOW_OPTIONS);
	virtual long SetSuppressedButtons(TITLE_BAR_SUPPRESSIBLE_BUTTONS,TITLE_BAR_SUPPRESSIBLE_BUTTONS);
	virtual long SetVisibility(int);
	virtual long SetVisibleButtons(TITLE_BAR_BUTTONS,TITLE_BAR_BUTTONS);
};

namespace ApplicationViewTraceLoggingHelpers
{
	long GetViewName(IApplicationView *,unsigned short * *);
};

struct ApplicationViewWrapper
{
	ApplicationViewWrapper(IApplicationView *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
};

namespace AsyncControllerHelpers
{
	Windows::Internal::TaskApartment GetControllerApartment(IUnknown *);
	void CallControllerAsync<ISwitchItemController,ISwitchItem,IVirtualDesktopItem>(Microsoft::WRL::ComPtr<ISwitchItemController> &,void ( ISwitchItemController::*)(ISwitchItem *,IVirtualDesktopItem *),Microsoft::WRL::ComPtr<ISwitchItem>,Microsoft::WRL::ComPtr<IVirtualDesktopItem>);
	void CallControllerAsync<ISwitchItemController,ISwitchItem>(Microsoft::WRL::ComPtr<ISwitchItemController> &,void ( ISwitchItemController::*)(ISwitchItem *),Microsoft::WRL::ComPtr<ISwitchItem>);
};

struct AutoProviderRegistrar
{
	AutoProviderRegistrar(void (*)(),void (*)());
	~AutoProviderRegistrar();
};

struct AutoStubBias<IUnknown,Windows::Internal::INilDelegate>
{
	AutoStubBias<IUnknown,Windows::Internal::INilDelegate>(IRpcOptions *,IUnknown *,Windows::Internal::INilDelegate *);
	~AutoStubBias<IUnknown,Windows::Internal::INilDelegate>();
};

struct AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> >
{
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> >(IRpcOptions *,Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> *,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> *);
	~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> >();
};

struct AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >
{
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >(IRpcOptions *,Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *);
	~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >();
};

struct BUCKET
{
	BUCKET();
	~BUCKET();
};

struct BackOperation
{
	BackOperation();
	virtual long SwitchBack(IApplicationView *,BackOperationFlags);
	virtual void SetOldAppLayout(IAppLayout *);
	virtual void SetTempAppVisuals(ITemporaryAppVisualArray *);
};

struct BrokeredViewTabConverterImpl
{
	BrokeredViewTabConverterImpl();
	virtual long AddAndInsertTabAtDefaultPositionForWindowId(Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::UI::Internal::ViewManagement::IApplicationViewTabInsertionContext *,Windows::Internal::ApplicationModel::WindowManagement::WindowId,Windows::Internal::ComposableShell::Tabs::IShellTab * *);
	virtual long AddVirtualTabForWindow(Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Internal::ApplicationModel::WindowManagement::WindowId,Windows::Internal::ComposableShell::Tabs::IShellTab * *);
	virtual long CancelTabTransfer(Windows::Internal::ComposableShell::Tabs::ShellTabId);
	virtual long GetDisplayNameForShellTab(Windows::Internal::ComposableShell::Tabs::IShellTab *,HSTRING__ * *);
	virtual long GetTabForWindowId(Windows::Internal::ApplicationModel::WindowManagement::WindowId,Windows::Internal::ComposableShell::Tabs::IShellTab * *);
	virtual long NewViewForTab(unsigned int,Windows::Internal::ComposableShell::Tabs::ShellTabId);
	virtual long RemoveVirtualTab(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	virtual long TabTransferReceived(Windows::Internal::ComposableShell::Tabs::ShellTabId);
	virtual long TryGetTabGroupForWindowId(Windows::Internal::ApplicationModel::WindowManagement::WindowId,Windows::Internal::ComposableShell::Tabs::IShellTabGroup * *);
	virtual long add_TabDeselectedViewActive(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewTabAssociated(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewTabClosed(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewTabDeassociated(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewTabLostFocus(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
	virtual long get_TabTransferEventBroker(Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker * *);
	virtual long remove_TabDeselectedViewActive(EventRegistrationToken);
	virtual long remove_ViewTabAssociated(EventRegistrationToken);
	virtual long remove_ViewTabClosed(EventRegistrationToken);
	virtual long remove_ViewTabDeassociated(EventRegistrationToken);
	virtual long remove_ViewTabLostFocus(EventRegistrationToken);
};

struct BrokeredViewTabConverterStatics
{
	static TrustLevel InternalGetTrustLevelStatic();
	static unsigned short const * InternalGetRuntimeClassNameStatic();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Current(Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

namespace BrowserChannels
{
	namespace Private
	{
		bool ReadExePath(HKEY__ *,unsigned short *,unsigned long);
		bool ReadRegStringValue(HKEY__ *,unsigned short const *,unsigned short *,unsigned long);
	};

};

namespace BrowserReplacementVariant
{
	namespace Private
	{
		bool IsBrowserReplacementActivated();
	};

};

class CActionCenterExperienceManager
{
	long GetViewPosition(tagRECT &);
	long Hide();
	long OnDpiOrHighContrastChanged();
	long OnTargetedMessage(CActionCenterExperienceManager::TargetedMessageKind,unsigned short);
	long PositionView();
	long RaisePropertyChangedEvent(unsigned short const *,bool);
	long RegisterWithLightDismiss();
	long ReturnFocus();
	long SetZBand();
	long Show();
	long SubscribeToShellReadyWnf();
	static long PostTargetedMessage(void *,CActionCenterExperienceManager::TargetedMessageKind,unsigned short);
	void OnVisibilityChanged();
protected:
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShowing(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual long OnVisibilityRevokedChanged(CSingleViewShellExperience *);
public:
	CActionCenterExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual int IsHintSupported();
	virtual int IsSystemUiVisible();
	virtual long CancelSwipe();
	virtual long Close();
	virtual long CommitSwipe(unsigned int,tagPOINT);
	virtual long ContinueSwipe(unsigned int,tagPOINT);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HotKeyInvoked(Windows::Internal::Shell::Experience::HotKeyKind);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnDismiss();
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetVisibilityWithoutAnimations(unsigned char);
	virtual long StartExtendedSwipe(tagPOINT,unsigned int,tagPOINT);
	virtual long StartSwipe(unsigned int,tagPOINT);
	virtual long add_VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *> *,EventRegistrationToken *);
	virtual long get_IsVisible(unsigned char *);
	virtual long put_IsVisible(unsigned char);
	virtual long remove_VisibilityChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CActionCenterExperienceManager();
};

class CActivatedEventArgsBase
{
	virtual long v_GetActivationKind(HSTRING__ *,Windows::ApplicationModel::Activation::ActivationKind *);
protected:
	virtual ~CActivatedEventArgsBase();
public:
	CActivatedEventArgsBase();
	long MarshalObjectToPropertySet(Windows::Foundation::Collections::IPropertySet *);
	virtual long Initialize(unsigned __int64,HSTRING__ *,Windows::ApplicationModel::Activation::ApplicationExecutionState,unsigned char,unsigned char);
	virtual long InitializeViewDependent(Windows::ApplicationModel::Activation::ApplicationExecutionState,int,Windows::ApplicationModel::Activation::ISplashScreen *,unsigned char);
	virtual long get_ActivationValueSetReference(IInspectable * *);
	virtual long get_IsForegroundActivation(unsigned char *);
	virtual long get_IsHolographic(unsigned char *);
	virtual long get_Kind(Windows::ApplicationModel::Activation::ActivationKind *);
	virtual long get_PreviousExecutionState(Windows::ApplicationModel::Activation::ApplicationExecutionState *);
	virtual long get_SplashScreen(Windows::ApplicationModel::Activation::ISplashScreen * *);
	virtual long get_User(Windows::System::IUser * *);
	virtual long get_UserContext(unsigned __int64 *);
	virtual long put_ActivationValueSetReference(IInspectable *);
	virtual long put_UserContext(unsigned __int64);
};

class CActivatedEventArgsWithPrelaunchAndViewIdBase
{
protected:
	virtual ~CActivatedEventArgsWithPrelaunchAndViewIdBase();
public:
	CActivatedEventArgsWithPrelaunchAndViewIdBase();
	long MarshalObjectToPropertySet(Windows::Foundation::Collections::IPropertySet *);
	virtual long get_PrelaunchActivated(unsigned char *);
};

class CActivatedEventArgsWithViewIdBase
{
protected:
	virtual ~CActivatedEventArgsWithViewIdBase();
public:
	CActivatedEventArgsWithViewIdBase();
	long MarshalObjectToPropertySet(Windows::Foundation::Collections::IPropertySet *);
	virtual long get_ActivationViewSwitcher(Windows::UI::ViewManagement::IActivationViewSwitcher * *);
	virtual long get_CurrentlyShownApplicationViewId(int *);
	virtual long get_Properties(Windows::ApplicationModel::Activation::MultiviewActivationProperties *);
	virtual long get_ViewSwitcher(Windows::UI::ViewManagement::IActivationViewSwitcher * *);
	virtual long put_ActivationViewSwitcher(Windows::UI::ViewManagement::IActivationViewSwitcher *);
	virtual long put_Properties(Windows::ApplicationModel::Activation::MultiviewActivationProperties);
};

class CActivationBasedAppAndGlomCollection
{
	struct CGlomCollection
	{
		~CGlomCollection();
	};

	long _GetGlomCollection(IImmersiveApplicationInternal *,CActivationBasedAppAndGlomCollection::CGlomCollection * *,unsigned __int64 *);
	long _GetGlomCollection(unsigned short const *,CActivationBasedAppAndGlomCollection::CGlomCollection * *,unsigned __int64 *);
public:
	long GetNextMostRecentlyActivatedGlom(IImmersiveApplicationInternal *,IImmersiveApplicationInternal * *);
	long PositionNewCreatedApp(Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> const &,Windows::Foundation::Collections::IPropertySet *);
	unsigned long GetNextGlomId(unsigned short const *);
	virtual void RemoveApplication(unsigned __int64);
	virtual ~CActivationBasedAppAndGlomCollection();
};

struct CActivationBasedCollection<Microsoft::WRL::ComPtr<IClassicWindow> >
{
	long GetAppPosition<CClassicWindowFinderByHWND>(CClassicWindowFinderByHWND const &,unsigned __int64,unsigned __int64 *);
	long PositionNewActiveApp(Microsoft::WRL::ComPtr<IClassicWindow> const &,unsigned __int64);
	virtual long PositionNewCreatedApp(Microsoft::WRL::ComPtr<IClassicWindow> const &);
	virtual void RemoveApplication(unsigned __int64);
};

struct CActivationBasedCollection<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> >
{
	long GetAppPosition<CImmersiveAppFinderByApplication>(CImmersiveAppFinderByApplication const &,unsigned __int64,unsigned __int64 *);
	long GetAppPosition<CImmersiveAppFinderByHostId>(CImmersiveAppFinderByHostId const &,unsigned __int64,unsigned __int64 *);
	long GetAppPosition<CImmersiveAppFinderByTaskWindow>(CImmersiveAppFinderByTaskWindow const &,unsigned __int64,unsigned __int64 *);
	long PositionAppAtEnd(Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> const &,unsigned __int64);
	virtual long PositionNewCreatedApp(Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> const &);
	virtual void RemoveApplication(unsigned __int64);
};

struct CActivationBasedCollection<Microsoft::WRL::ComPtr<ITaskWindow> >
{
	long GetAppPosition<CTaskWindowFinder>(CTaskWindowFinder const &,unsigned __int64,unsigned __int64 *);
	long PositionNewActiveApp(Microsoft::WRL::ComPtr<ITaskWindow> const &,unsigned __int64);
	virtual long PositionNewCreatedApp(Microsoft::WRL::ComPtr<ITaskWindow> const &);
	virtual void RemoveApplication(unsigned __int64);
};

struct CAllUpViewService
{
	CAllUpViewService();
	virtual long CancelSwipe();
	virtual long CommitSwipe(unsigned int,tagPOINT);
	virtual long ContinueSwipe(unsigned int,tagPOINT);
	virtual long StartExtendedSwipe(tagPOINT,unsigned int,tagPOINT);
	virtual long StartSwipe(unsigned int,tagPOINT);
	virtual long ToggleAllUpView(HMONITOR__ *,ALL_UP_VIEW_FLAGS);
	virtual void SetMonitorManager(IImmersiveMonitorManager *);
};

struct CAltTabViewController
{
	CAltTabViewController();
	long RuntimeClassInitialize(WeakReference::IWeakReference *,IMultitaskingViewManagerInternal *,IApplicationViewSwitcher *,IImmersiveAppCrusher *,IApplicationViewCollection *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITabViewManager *);
	virtual void InvokeSwitchItem(ISwitchItem *);
	virtual void OnDisplayChange(IMultitaskingViewFrame *);
	virtual void OnKeyUp(IMultitaskingViewFrame *,unsigned int,ModifierKeys);
};

class CAltTabViewHost
{
protected:
	virtual void v_DismissView();
public:
	CAltTabViewHost();
	long RuntimeClassInitialize(IMultitaskingData *,IMultitaskingViewManagerInternal *,IApplicationViewSwitcher *,IImmersiveAppCrusher *,IMultitaskingViewVisibilityServiceInternal *,IMultitaskingViewGestureState *,IApplicationViewCollection *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITabViewManager *);
	virtual bool IsSticky();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MoveVirtualCursor(tagPOINT *);
	virtual long Navigate(unsigned int);
	virtual long Show(IImmersiveMonitor *,ALT_TAB_VIEW_FLAGS,IApplicationView *);
	virtual long SwitchToSelectedItemAndDismiss();
	virtual void AltEscPressed();
	virtual ~CAltTabViewHost();
};

class CAppArrangementSingleTransitionTarget
{
	bool _IsDragVisual();
	virtual bool v_ShouldUseGhostWindow(IAppLayoutOperationItem *);
	virtual bool v_ShouldUseTempAppVisual();
	virtual void v_PrepareAppRects(IAppLayoutOperationItem *,ITemporaryAppVisual *,IImmersiveApplicationManagerSafeForSyncCallouts *);
	void _PrepareTaggingForDelayedStoryboard(IAppLayoutOperationItem *,ITemporaryAppVisual *);
	void _PrepareTaggingForImmediateStoryboard(IAppLayoutOperationItem *,ITemporaryAppVisual *);
public:
	virtual AppTransitionTargetType GetTargetType();
	virtual long ExecuteTag();
	virtual long PrepareTaggingInfoForApp(IAppLayoutOperationItem *,ITemporaryAppVisual *,IImmersiveApplicationManagerSafeForSyncCallouts *);
};

class CAppLayout
{
	int _AreAdjacentItemsCurated(IAppLayoutItem *);
	int _AreAllItemsCurated();
	long _AddItem(IAppLayoutItem *,APP_LAYOUT_INSERT_LOCATION,IApplicationView *);
	long _AddItemHelper(IAppLayoutItem *,APP_LAYOUT_INSERT_LOCATION,IAppLayoutItem *);
	long _CommitGutters();
	long _CommitLayoutItems();
	long _FindBufferItem(IAppLayoutItem * *,unsigned int *);
	long _GetAdjacentItem(IAppLayoutItem *,ABSOLUTE_DIRECTION,APP_LAYOUT_ITEM_TYPE,_GUID const &,void * *);
	long _RemoveView(IApplicationView *);
	long _ReplaceView(IApplicationView *,IApplicationView *,APP_LAYOUT_ITEM_BEHAVIOR_FLAGS);
	unsigned int _GetItemCountOfType(APP_LAYOUT_ITEM_TYPE);
	unsigned int _GetItemCountWithFlags(APP_LAYOUT_ITEM_BEHAVIOR_FLAGS);
	void _RemoveItemsByType(APP_LAYOUT_ITEM_TYPE);
public:
	CAppLayout();
	virtual int ContainsApp(IImmersiveApplication *);
	virtual int ContainsView(IApplicationView *);
	virtual int IsCurated(IAppLayoutItem *);
	virtual int IsEmpty();
	virtual int IsEqual(IAppLayout *,APP_LAYOUT_COMPARE_FLAGS);
	virtual int IsFullScreen();
	virtual int ShouldLockAutoRotation();
	virtual long AddBuffer(APP_LAYOUT_INSERT_LOCATION,IAppLayoutItem *,IAppLayoutItem * *);
	virtual long AddItem(IAppLayoutItem *,APP_LAYOUT_INSERT_LOCATION,IApplicationView *);
	virtual long AddView(IApplicationView *,APP_LAYOUT_INSERT_LOCATION,APP_LAYOUT_ITEM_BEHAVIOR_FLAGS,IApplicationView *);
	virtual long Clone(_GUID const &,void * *);
	virtual long Commit();
	virtual long FindAppItem(IImmersiveApplication *,IAppLayoutItem * *,unsigned int *);
	virtual long FindBufferItem(IAppLayoutItem * *,unsigned int *);
	virtual long FindLayoutItem(IAppLayoutItem *,unsigned int *);
	virtual long FindLayoutItemInternal(IAppLayoutItem *,unsigned int *);
	virtual long FindViewItem(IApplicationView *,IAppLayoutItem * *,unsigned int *);
	virtual long GetAdjacentItem(IAppLayoutItem *,ABSOLUTE_DIRECTION,APP_LAYOUT_ITEM_TYPE,_GUID const &,void * *);
	virtual long GetItem(unsigned int,_GUID const &,void * *);
	virtual long GetItemEnum(IAppLayoutItemEnum * *);
	virtual long GetItemEnumEx(IAppLayoutItem *,ABSOLUTE_DIRECTION,APP_LAYOUT_ENUM_FLAGS,IAppLayoutItemEnum * *);
	virtual long GetItemInternal(unsigned int,_GUID const &,void * *);
	virtual long GetItemOfType(unsigned int,APP_LAYOUT_ITEM_TYPE,_GUID const &,void * *);
	virtual long GetItemWithFlags(unsigned int,APP_LAYOUT_ITEM_BEHAVIOR_FLAGS,_GUID const &,void * *);
	virtual long RemoveApp(IImmersiveApplication *);
	virtual long RemoveItem(IAppLayoutItem *);
	virtual long RemoveItemByIndex(unsigned int);
	virtual long RemoveView(IApplicationView *);
	virtual long ReplaceView(IApplicationView *,IApplicationView *,APP_LAYOUT_ITEM_BEHAVIOR_FLAGS);
	virtual long VerifyLayout();
	virtual unsigned int GetItemCount();
	virtual unsigned int GetItemCountInternal();
	virtual unsigned int GetItemCountOfType(APP_LAYOUT_ITEM_TYPE);
	virtual unsigned int GetItemCountWithFlags(APP_LAYOUT_ITEM_BEHAVIOR_FLAGS);
	virtual unsigned int GetMaxAppCount();
	virtual void GetLayoutEnv(LAYOUT_ENVIRONMENT_DETAILS *);
	virtual void GetLayoutEnvInternal(LAYOUT_ENVIRONMENT_DETAILS *);
	virtual void RemoveItemsByType(APP_LAYOUT_ITEM_TYPE);
	virtual void SetLayoutEnv(LAYOUT_ENVIRONMENT_DETAILS const *);
	virtual wil::srwlock * GetLock();
};

struct CAppLayoutAnimationData
{
	CAppLayoutAnimationData(IApplicationView *,APP_LAYOUT_ANIMATION_TYPE);
	virtual APP_LAYOUT_ANIMATION_TYPE GetAnimationType();
	virtual long GetView(IApplicationView * *);
};

class CAppLayoutItem
{
	int _GetMinWidth(LAYOUT_ENVIRONMENT_DETAILS const *,int);
	int _GetMinWidthSafe(LAYOUT_ENVIRONMENT_DETAILS const *,int);
public:
	CAppLayoutItem(APP_LAYOUT_ITEM_TYPE,APP_LAYOUT_ITEM_BEHAVIOR_FLAGS,IApplicationView *,APPLICATION_VIEW_DATA *,tagRECT *,tagRECT *);
	CAppLayoutItem(APP_LAYOUT_ITEM_TYPE,tagRECT *,tagRECT *);
	CAppLayoutItem(IApplicationView *,APP_LAYOUT_ITEM_BEHAVIOR_FLAGS);
	static long s_CreateInstance_Buffer(_GUID const &,void * *);
	static long s_CreateInstance_Clone(APP_LAYOUT_ITEM_TYPE,APP_LAYOUT_ITEM_BEHAVIOR_FLAGS,IApplicationView *,APPLICATION_VIEW_DATA *,tagRECT *,tagRECT *,_GUID const &,void * *);
	static long s_CreateInstance_Gutter(tagRECT *,tagRECT *,_GUID const &,void * *);
	static long s_CreateInstance_View(IApplicationView *,APP_LAYOUT_ITEM_BEHAVIOR_FLAGS,_GUID const &,void * *);
	virtual APP_LAYOUT_ITEM_BEHAVIOR_FLAGS GetBehaviorFlags();
	virtual APP_LAYOUT_ITEM_TYPE GetType();
	virtual APP_LAYOUT_ITEM_TYPE GetTypeInternal();
	virtual int GetMinWidth(LAYOUT_ENVIRONMENT_DETAILS const *,int);
	virtual int GetMinWidthSafe(LAYOUT_ENVIRONMENT_DETAILS const *,int);
	virtual int IsEqual(IAppLayoutItem *);
	virtual long Clone(IAppLayoutItem * *);
	virtual long GetApp(IImmersiveApplication * *);
	virtual long GetView(_GUID const &,void * *);
	virtual long GetViewInternal(_GUID const &,void * *);
	virtual void GetRect(APP_LAYOUT_RECT_TYPE,tagRECT *);
	virtual void GetRectInternal(APP_LAYOUT_RECT_TYPE,tagRECT *);
	virtual void GetViewData(APPLICATION_VIEW_DATA *);
	virtual void GetViewDataInternal(APPLICATION_VIEW_DATA *);
	virtual void GrowLayoutRect(ABSOLUTE_DIRECTION,int);
	virtual void SetRect(APP_LAYOUT_RECT_TYPE,tagRECT const *);
	virtual void SetViewData(APPLICATION_VIEW_DATA const *);
	virtual wil::srwlock * GetLock();
};

struct CAppLayoutItemEnum
{
	CAppLayoutItemEnum(IAppLayout *,IAppLayoutItem *,ABSOLUTE_DIRECTION,APP_LAYOUT_ENUM_FLAGS);
	virtual long GetNextItem(APP_LAYOUT_ITEM_TYPE,APP_LAYOUT_ENUM_ITEM *);
};

class CAppLayoutOperation
{
	long _ReflowItems(bool);
protected:
	long _AddAnimationData(IApplicationView *,APP_LAYOUT_ANIMATION_TYPE);
	long _AddAnimationOnlyOperationItem(IApplicationView *,APP_LAYOUT_ANIMATION_TYPE);
	long _AddOperationItem(IApplicationView *,IAppLayoutItem *,IAppLayoutItem *);
	long _ConsolidateBuffers(IAppLayoutItem *);
	long _EnsureDockedViewSizing();
	long _EnsureViewSizeConstraints();
	long _EvictAllItems(IApplicationView *,APP_LAYOUT_ANIMATION_TYPE,bool *);
	long _EvictItem(unsigned int,APP_LAYOUT_ANIMATION_TYPE);
	long _EvictView(IApplicationView *,APP_LAYOUT_ANIMATION_TYPE);
	long _FinalizeLayout(FinalizeLayoutFlags);
	long _GenerateOperationItemList();
	long _HandleNormalLayoutEnvChange(LAYOUT_ENVIRONMENT_DETAILS const *);
	long _MakeViewFullScreen(IApplicationView *,APP_LAYOUT_ANIMATION_TYPE);
	long _VerifyAndPrepareLayout(IAppLayout *,bool);
public:
	CAppLayoutOperation();
	virtual APP_LAYOUT_OPERATION_ACTIONS GetOperationActions();
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetClosedView(IApplicationView * *);
	virtual long GetCount(unsigned int *);
	virtual long GetEvictedView(IApplicationView * *);
	virtual long GetNewAppLayout(IAppLayout * *);
	virtual long GetOldAppLayout(IAppLayout * *);
	virtual long GetOperationItem(IImmersiveApplication *,IAppLayoutOperationItem * *);
	virtual long GetTargetApp(IImmersiveApplication * *);
	virtual long GetTargetView(IApplicationView * *);
	virtual long GetTempAppVisuals(ITemporaryAppVisualArray * *);
	virtual long VerifyOperation();
	virtual unsigned int GetEvictedCountOfType(APP_LAYOUT_ITEM_TYPE);
	virtual void SetOldAppLayout(IAppLayout *);
	virtual void SetTempAppVisuals(ITemporaryAppVisualArray *);
	~CAppLayoutOperation();
};

struct CAppLayoutOperationItem
{
	CAppLayoutOperationItem(IApplicationView *,APPLICATION_VIEW_DATA *,APPLICATION_VIEW_DATA *,CAppLayoutOperationItem::CAppLayoutOperationItemConstructorRects const &,int,int,APP_LAYOUT_ANIMATION_TYPE);
	virtual APP_LAYOUT_ANIMATION_TYPE GetAnimationType();
	virtual int GetMinWidth(LAYOUT_ENVIRONMENT_DETAILS const *);
	virtual int GetPresentedNew();
	virtual int GetPresentedOld();
	virtual long GetApp(IImmersiveApplication * *);
	virtual long GetView(_GUID const &,void * *);
	virtual void GetAppRectNew(APP_LAYOUT_RECT_TYPE,tagRECT *);
	virtual void GetAppRectOld(APP_LAYOUT_RECT_TYPE,tagRECT *);
	virtual void GetViewDataNew(APPLICATION_VIEW_DATA *);
	virtual void GetViewDataOld(APPLICATION_VIEW_DATA *);
	virtual void SetAppRectOld(APP_LAYOUT_RECT_TYPE,tagRECT const *);
};

class CAppManagerTelemetry
{
	class AddWindowToGlom
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~AddWindowToGlom();
	};

	class AltF4CloseRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~AltF4CloseRequested();
	};

	class AppFrameHostStartup
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~AppFrameHostStartup();
	};

	class CloseHungApp
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CloseHungApp();
	};

	class HandleApplicationRequestActivation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~HandleApplicationRequestActivation();
	};

	class LoadQuirksForPackage
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
	};

	class TitleBarButtonCloseRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TitleBarButtonCloseRequested();
	};

protected:
	void Create();
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static void FrameManagerCrashed();
	static void RotationManagerSuppressionTimeout();
	void HandleViewCreationFailure_(unsigned short const *,unsigned __int64,long,long);
};

class CAppTransitionManager
{
	bool IsLayoutOperationCrossFadeOnly(IAppLayoutOperationItem *);
	bool _IsImmersiveShellIdle();
	long PrepareAppLayoutOperationForTransition(IAppLayoutOperationItem *,IAppLayout *,IAppLayout *);
	long _BeginAnimationStage(AnimationPassStage,IAppLayoutOperation *,IImmersiveMonitor *,IImmersiveApplicationManagerSafeForSyncCallouts *);
	long _BeginDWMTransitionRequest(unsigned long,_GUID const *);
	long _EndDWMTransitionRequest(bool);
	long _EnsureWindowForBufferTag();
	long _ExcludeAllPresentedApps(IAppLayoutOperation *);
	long _FindPlaceModeVisual(ITemporaryAppVisual * *);
	long _PaintDividerForDWM(HDC__ *,HBITMAP__ *,tagBITMAPINFO *,DEVICE_SCALE_FACTOR);
	long _PrepareTaggingInfoForApp(IAppLayoutOperationItem *);
	long _SwitchToMonitor(IImmersiveMonitor *);
	long _TagApps(IAppLayoutOperation *);
	long _TagBuffer(IAppLayoutOperation *);
	long _TagDividerBitmap(IAppLayoutOperation *);
	long _TagPlaceVisual();
	static AppArrangementSpecialTransitionType s_GetSpecialAppArrangementTransitionType(IAppLayoutOperation *);
	static Geometry::CRect s_GetLayoutBufferRect(IAppLayout *);
	static unsigned long s_GetImmediateStoryboardIDForAppArrangementAnimation(IAppLayoutOperation *);
	static void s_GetScenarioGUIDForAppArrangementAnimation(IAppLayoutOperation *,_GUID *,_GUID *);
	void _ClearAnimationPassState();
	void _ExcludeVisualType(TEMPORARY_APP_VISUAL_TYPE);
	void _InitAnimationPassState(IAppLayoutOperation *,IImmersiveApplicationManagerSafeForSyncCallouts *);
	void _RegisterBufferTagWindowClass();
public:
	CAppTransitionManager();
	long RuntimeClassInitialize();
	virtual long BeginAppTransitionAnimationRequest(IUnknown *,IImmersiveMonitor *,IImmersiveApplicationManagerSafeForSyncCallouts *);
	virtual long EndAppTransitionAnimationRequest();
	virtual long GetLastActivatedApp(IApplicationView * *);
	virtual long GetSpecialAppTransitionInfo(IApplicationView *,AppTransitionTargetSpecialFlags *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long PrepareForAppTransitionAnimationRequest(IUnknown *,IImmersiveMonitor *,IImmersiveApplicationManagerSafeForSyncCallouts *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CAppTransitionManager();
};

struct CAppTransitionTagger
{
	~CAppTransitionTagger();
};

class CAppTransitionTargetBase
{
protected:
	AppTransitionTargetSpecialFlags _GetSpecialTransitionInfo(IApplicationView *);
	long _AdjustWindowForGhost(IAppLayoutOperationItem *,IImmersiveApplicationManagerSafeForSyncCallouts *,bool *);
	unsigned long _GetDwmTargetFlag(HWND__ * const,bool,unsigned long);
	virtual bool v_ShouldUseGhostWindow(IAppLayoutOperationItem *);
	virtual bool v_ShouldUseTempAppVisual();
	virtual void v_PrepareAppRects(IAppLayoutOperationItem *,ITemporaryAppVisual *,IImmersiveApplicationManagerSafeForSyncCallouts *);
public:
	CAppTransitionTargetBase();
	virtual AppTransitionTargetType GetTargetType();
	virtual long ExecuteTag();
	virtual long PrepareTaggingInfoForApp(IAppLayoutOperationItem *,ITemporaryAppVisual *,IImmersiveApplicationManagerSafeForSyncCallouts *);
	virtual unsigned int GetTaggableTargetCount();
};

struct CAppTransitionTargetManager
{
	CAppTransitionTargetManager();
	virtual AppTransitionTargetType GetTargetType();
	virtual long ExecuteTag();
	virtual long InitializeForTagging(AnimationPassState const *,unsigned long);
	virtual long PrepareTaggingInfoForApp(IAppLayoutOperationItem *,ITemporaryAppVisual *,IImmersiveApplicationManagerSafeForSyncCallouts *);
	virtual unsigned int GetTaggableTargetCount();
	virtual void Reset();
};

class CAppViewManager
{
	HWND__ * _GetAppMainWindow(IImmersiveApplicationInternal *);
	bool _IsMultiViewOperationAllowed(IImmersiveApplicationInternal *);
	long DragCompleteWorker(_GUID const &,tagPOINT);
	long EnsureApplication(unsigned short const *,IImmersiveApplicationInternal * *);
	long UnensureApplication(HWND__ *,IImmersiveApplicationInternal *);
	long _AddDelayedOperation(IAsyncCallback *);
	long _AddPresentedWindowCallbackTrigger(CAppViewManager::PresentedWindowWaitType,IImmersiveApplicationInternal *,HWND__ *,IAsyncCallback *,unsigned long *);
	long _CheckTabletMode();
	long _ContinueSwitchAsyncWorker(HWND__ *,HWND__ *,VIEW_SWITCH_PREFERENCES,CAppViewManagerTelemetry::SwitchAsyncWorker,IAsyncCallback *);
	long _EvaluateFrameworkViewTypeForSwitchHelper(HWND__ *,HWND__ *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,bool *);
	long _FindAnotherGlom(IImmersiveApplicationInternal *,CAppViewManager::FindGlomOption,IImmersiveApplicationInternal * *);
	long _GetGlomForWindow(HWND__ *,IImmersiveApplicationInternal * *,bool *);
	long _GetMostRecentlyUsedViewForApp(unsigned short const *,IImmersiveMonitor *,IImmersiveApplicationInternal * *);
	long _GetMostRecentlyUsedViewForAppInstance(unsigned __int64,IImmersiveMonitor *,IImmersiveApplicationInternal * *);
	long _GetViewForSwitchInternal(GET_VIEW_FOR_SWITCH_TYPE,unsigned short const *,IImmersiveMonitor *,IImmersiveApplicationInternal * *);
	long _GetViewForSwitchInternalByHostId(GET_VIEW_FOR_SWITCH_TYPE,unsigned __int64,IImmersiveMonitor *,IImmersiveApplicationInternal * *);
	long _GetVirtualDesktopForPendingActivation(unsigned __int64,IVirtualDesktop * *);
	long _ObliterateOperation(_GUID const &);
	long _PrepareToSwitchAsyncWorker(HWND__ *,HWND__ *,VIEW_SWITCH_PREFERENCES,IAsyncCallback *);
	long _PrepareToSwitchHelper(HWND__ *,HWND__ *,VIEW_SWITCH_PREFERENCES,TransferWindowOptions const *,IImmersiveApplicationInternal * *,bool *,bool *);
	long _ProcessNextOperation();
	long _QueueOperation(IAsyncCallback *);
	long _ShowAsViewModeWorker(Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsViewMode *,IPresentationRequestedArgs *);
	long _ShowViewAsyncWorker(HWND__ *,HWND__ *,CAppViewManager::ShowViewAsyncOptions const &,Windows::Foundation::Collections::IPropertySet *,IAsyncCallback *,IPresentationRequestedArgs *);
	long _SwitchAsyncWorker(HWND__ *,HWND__ *,VIEW_SWITCH_PREFERENCES,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,IAsyncCallback *);
	long _TransferAllWindowsToNextGlom(IImmersiveApplication *,IImmersiveApplication *,ApplicationDisappearReason);
	long _TransferAllWindowsToNextGlomWorker(IImmersiveApplicationInternal *,IImmersiveApplication *,ApplicationDisappearReason);
	long _TrySwitchToApplication(IImmersiveApplicationInternal *,Windows::Foundation::Collections::IPropertySet *);
	long _WindowProvidedWorker(_GUID const &,HWND__ *);
	static void _s_QueueCallback(IImmersiveApplicationInternal *,CMarshaledInterface &,long);
	static void _s_QueueCallback(IImmersiveApplicationInternal *,IAsyncCallback *,long);
	void _InvokePresentedWindowCallbackTriggers(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
public:
	CAppViewManager();
	virtual long AcquireForegroundRightForApp(IImmersiveApplication *);
	virtual long AddUnghostWindowCallbackTrigger(IImmersiveApplication *,HWND__ *,IAsyncCallback *);
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long CollapseAllViewsForApp(IImmersiveApplication *);
	virtual long CompleteInitialization();
	virtual long ConsolidateView(IImmersiveApplication *,IImmersiveApplication *);
	virtual long DelayedInitialization();
	virtual long DragCancel(_GUID const &);
	virtual long DragComplete(_GUID const &,tagPOINT);
	virtual long DragEnterForTab(_GUID const &,_GUID const &,tagPOINT);
	virtual long DragEnterForView(_GUID const &,unsigned short const *,tagPOINT);
	virtual long DragLeave(_GUID const &,tagPOINT);
	virtual long DragOver(_GUID const &,tagPOINT);
	virtual long GetAppMainWindow(IImmersiveApplication *,HWND__ * *);
	virtual long GetViewForSwitch(GET_VIEW_FOR_SWITCH_TYPE,unsigned short const *,IImmersiveMonitor *,IImmersiveApplication * *);
	virtual long GetViewForSwitchByHostId(GET_VIEW_FOR_SWITCH_TYPE,unsigned __int64,IImmersiveMonitor *,IImmersiveApplication * *);
	virtual long IsViewPresentedOnActivationVirtualDesktop(HWND__ *,unsigned __int64,unsigned char *);
	virtual long OnAppAddedToSwitchers(IImmersiveApplication *,APP_SWITCHER_FLAGS);
	virtual long OnAppRemovedFromSwitchers(IImmersiveApplication *,SWITCHER_REMOVAL_REASON);
	virtual long OnTitleUpdated(HWND__ *);
	virtual long PrepareToSwitch(HWND__ *,HWND__ *,VIEW_SWITCH_PREFERENCES,IAsyncCallback *);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long ShowAsStandalone(Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsStandalone *,IPresentationRequestedArgs *);
	virtual long ShowView(HWND__ *,HWND__ *,APPLICATION_VIEW_SIZE_PREFERENCE,APPLICATION_VIEW_SIZE_PREFERENCE,IAsyncCallback *);
	virtual long SplitView(HWND__ *,IImmersiveApplication *,IImmersiveApplication * *);
	virtual long StealForegroundActivateGlom(IImmersiveApplication *);
	virtual long SwitchViews(HWND__ *,HWND__ *,VIEW_SWITCH_PREFERENCES,IAsyncCallback *);
	virtual long WindowProvided(_GUID const &,HWND__ *,int);
	virtual void ShowAsViewMode(Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsViewMode *,IPresentationRequestedArgs *);
	virtual void Switch(Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSwitch *);
	virtual void Uninitialize();
	virtual ~CAppViewManager();
};

namespace CAppViewManagerTelemetry
{
	class ConsolidateView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ConsolidateView();
	};

	class EnterCompactOverlayModeForView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		EnterCompactOverlayModeForView();
		void StartActivity(unsigned short const *,CompactOverlayEnterStyle);
		~EnterCompactOverlayModeForView();
	};

	class PrepareToSwitchAsyncWorker
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~PrepareToSwitchAsyncWorker();
	};

	class PrepareToSwitchHelper
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~PrepareToSwitchHelper();
	};

	class ShowViewAsyncWorker
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ShowViewAsyncWorker();
	};

	class SplitView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SplitView();
	};

	class SwitchAsyncWorker
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		SwitchAsyncWorker Split();
		SwitchAsyncWorker TransferToCurrentThread();
		void StartActivity();
		~SwitchAsyncWorker();
	};

	class WindowProvided
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(_GUID const &,HWND__ *);
		~WindowProvided();
	};

};

class CApplicationFrameService
{
	long _CreateFrameManager(CApplicationFrameService::CallContext);
	long _EnsureFrameManager(CApplicationFrameService::CallContext,IApplicationFrameManager * *);
	long _SnapApplicationToLocation(IImmersiveApplication *,SNAP_LOCATION);
	long _TransferFromPoolToActive(unsigned __int64);
	void _HandleFrameManagerCrash();
public:
	CApplicationFrameService();
	virtual long BeginFrameRecovery();
	virtual long CompleteInitialization(IServiceProvider *);
	virtual long DestroyFrame(IApplicationFrameProxy *);
	virtual long EnsureFramePool();
	virtual long GetFrame(unsigned short const *,unsigned long,IApplicationFrameProxy * *);
	virtual long GetFrameByWindow(HWND__ *,IApplicationFrameProxy * *);
	virtual long OnChromeOffsetsChanged(IApplicationFrame *);
	virtual long OnCommand(IApplicationFrame *,_GUID const *,unsigned long);
	virtual long OnPositionChanged(IApplicationFrame *);
	virtual long SynchronizeFrameInformation(IApplicationFrameProxy *);
	virtual long UnensureFramePool();
	virtual long Uninitialize();
	virtual void EndFrameRecovery();
	virtual void SimulateFrameManagerCrash();
};

struct CApplicationFrameWrapper
{
	CApplicationFrameWrapper();
	bool IsManagedBy(IApplicationFrameManager *);
	long Initialize(unsigned short const *,unsigned long);
	long RuntimeClassInitialize(IApplicationFrameService *,IApplicationFrameManager *,IApplicationFrame *);
	virtual bool IsEqualByProxy(IApplicationFrameProxy *);
	virtual bool IsEqualByWindow(HWND__ *);
	virtual long Destroy();
	virtual long EnsureSizeConstraints();
	virtual long FitToWorkArea();
	virtual long GetBackgroundColor(unsigned long *);
	virtual long GetChromeOffsets(tagRECT *);
	virtual long GetChromeOptions(APPLICATION_FRAME_CHROME_OPTIONS *);
	virtual long GetFrameWindow(HWND__ * *);
	virtual long GetPresentedWindow(HWND__ * *);
	virtual long GetSystemVisual(FRAME_SYSTEM_VISUAL *);
	virtual long GetSystemVisualFadeTime(unsigned long *);
	virtual long GetTitleBar(IApplicationFrameTitleBar * *);
	virtual long GetTitleBarDrawnByApp(int *);
	virtual long InvokeActionsMenu();
	virtual long SetApplicationId(unsigned short const *,int);
	virtual long SetBackgroundColor(unsigned long);
	virtual long SetChromeOptions(APPLICATION_FRAME_CHROME_OPTIONS,APPLICATION_FRAME_CHROME_OPTIONS);
	virtual long SetMaximumSize(tagSIZE const *);
	virtual long SetMinimumSize(tagSIZE const *);
	virtual long SetOperatingMode(FRAME_OPERATING_MODE);
	virtual long SetPosition(IApplicationViewPosition *);
	virtual long SetPreferredAspectRatioHint(tagSIZE *);
	virtual long SetPresentedWindow(HWND__ *);
	virtual long SetSizeConstraintOverridesLogical(tagSIZE *,tagSIZE *);
	virtual long SetSizeConstraintOverridesPhysical(tagSIZE *,tagSIZE *);
	virtual long SetSystemVisual(FRAME_SYSTEM_VISUAL);
	virtual long SetSystemVisualAnimation(FRAME_SYSTEM_VISUAL_ANIMATION);
	virtual long SetTouchBehavior(APPLICATION_FRAME_TOUCH_BEHAVIOR);
};

class CApplicationManager
{
	struct HSHELL_DATA
	{
		~HSHELL_DATA();
	};

	struct TRUSTED_COMPONENT_REGISTRATION
	{
		~TRUSTED_COMPONENT_REGISTRATION();
	};

	bool HasPLMControl();
	bool TryClosePopupForWindow(HWND__ * const);
	bool _AnalyzeShellNotification(CApplicationManager::HSHELL_DATA *);
	bool _HandleUncloakableWindow(CApplicationManager::HSHELL_DATA const * const);
	bool _IsActiveDesktopApp(HWND__ *);
	bool _IsMultimon();
	bool _RemoveWindowFromGlom(CTaskWindowFinder const &,IImmersiveApplicationInternal *,CApplicationManager::RemoveWindowReason,ITaskWindow * *);
	bool _ShouldKeepImmersiveRealmStatusQuo(HWND__ *);
	long TransferWindowBetweenGlomsWorker(CTaskWindowFinder const &,IImmersiveApplicationInternal *,IImmersiveApplicationInternal *,TransferWindowOptions const *);
	long _ActivateIamSpecialWindow();
	long _AddApplicationData(unsigned short const *,unsigned __int64 const &,Microsoft::WRL::ComPtr<CRefCountedObject<PER_APPLICATION_DATA> > &);
	long _AddViewToGlom(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,IImmersiveApplicationInternal *,IWM_ACTION_TYPE,ITaskWindow *,Windows::Foundation::Collections::IPropertySet *);
	long _CreateImmersiveApp(unsigned short const *,unsigned __int64,unsigned long,IImmersiveMonitor *,_GUID const &,void * *);
	long _CreatePerMonitorComponents(IServiceProvider *,IImmersiveMonitor *);
	long _CreatePresentationRequestedArgs(Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *,IPresentationRequestedArgs * *);
	long _DeleteApplicationData(unsigned short const *);
	long _DeleteApplicationData(unsigned short const *,unsigned __int64 const &);
	long _FindFirstApplication<CImmersiveAppFinderByAppId>(CImmersiveAppFinderByAppId const &,IImmersiveApplicationInternal * *,unsigned __int64 *);
	long _FindFirstApplication<CImmersiveAppFinderByApplication>(CImmersiveAppFinderByApplication const &,IImmersiveApplicationInternal * *,unsigned __int64 *);
	long _FindFirstApplication<CImmersiveAppFinderByHostId>(CImmersiveAppFinderByHostId const &,IImmersiveApplicationInternal * *,unsigned __int64 *);
	long _FindFirstApplication<CImmersiveAppFinderByHostIdAndGlomId>(CImmersiveAppFinderByHostIdAndGlomId const &,IImmersiveApplicationInternal * *,unsigned __int64 *);
	long _FindFirstApplication<CImmersiveAppFinderByHwnd>(CImmersiveAppFinderByHwnd const &,IImmersiveApplicationInternal * *,unsigned __int64 *);
	long _FindFirstApplication<CImmersiveAppFinderByTaskWindow>(CImmersiveAppFinderByTaskWindow const &,IImmersiveApplicationInternal * *,unsigned __int64 *);
	long _GetApplicationData(unsigned short const *,Microsoft::WRL::ComPtr<CRefCountedObject<PER_APPLICATION_DATA> > &);
	long _GetForegroundApplicationNoLock(IImmersiveApplication * *);
	long _GetFrameByHwnd(HWND__ *,IApplicationFrameProxy * *);
	long _GetGlobalSyncEventHandler(ISyncIAMEventHandler * *);
	long _GetLastActiveModernApp(IImmersiveApplicationInternal * *);
	long _GetLastActiveModernTimestamp(_FILETIME *);
	long _GetLastActiveModernWindowForActivation(HWND__ * *);
	long _GetMonitorForNotifyApp(IImmersiveApplicationInternal *,IImmersiveMonitor * *);
	long _GetMonitorObjectArray(CCoSimpleArray<Microsoft::WRL::ComPtr<IImmersiveMonitor>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > *,IObjectArray * *,bool *);
	long _GetSingleMonitorObjectArray(IImmersiveMonitor *,IObjectArray * *);
	long _HandleApplicationRequestActivation(CApplicationManager::HSHELL_DATA const * const);
	long _HandleCreation_EnsureApplicationView(IImmersiveApplicationInternal *,HWND__ *,IApplicationView * *);
	long _HandleUniversalFrameChangeRequest(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _HandleUniversalTitleBarVisibilityChangeRequest(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _HandleViewCreation_SynchronizeInitialPosition(IImmersiveApplicationInternal *);
	long _HandleViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long _HandleWindowingEnvironmentSettingsRequest(Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettingsArgs *);
	long _InitializeIAMSubcomponents();
	long _MonitorFromWindow(HWND__ *,IImmersiveMonitor * *);
	long _SetApplicationPos(IImmersiveApplication *,APPLICATION_VIEW_DATA_UPDATE const *,SET_IMM_APP_POS,void * *,APPLICATION_VIEW_CLOAK_TYPE);
	long _SetViewPositionHelper(IApplicationViewPosition *,APPLICATION_VIEW_DATA_UPDATE const *,IApplicationViewTitlebarConfiguration *,SET_IMM_APP_POS,SESSION_IDLE_STATE,void * *,APPLICATION_FRAME_CHROME_CHANGE_DATA *,APPLICATION_VIEW_CLOAK_TYPE,ZBID,IImmersiveApplication *,IImmersiveApplicationInternal *);
	long _ValidateCallerUiContextForDesktopSwitch();
	static CApplicationManager::TRUSTED_COMPONENT_REGISTRATION * s_rgTrustedComponentRegMap;
	static bool AreWindowsFromSameProcess(HWND__ *,HWND__ *);
	static unsigned int _uMsgWindowServiceRegister;
	static unsigned int _uMsgWindowServiceUnregister;
	static void s_LoadQuirksForApp(unsigned short const *,PER_APPLICATION_DATA *);
	void UpdateMonitorForAppAsync(IImmersiveApplicationInternal *);
	void _AttemptPendingActivationTracking(HWND__ *,IImmersiveApplication *);
	void _FinalizeApplicationRecovery();
	void _ForgetApplicationNoLock(IImmersiveApplicationInternal *,ForgetReason);
	void _HandleActivation(CApplicationManager::HSHELL_DATA const * const);
	void _HandleActivation2(CApplicationManager::HSHELL_DATA const * const,MODE_CHANGE_REASON);
	void _HandleCloseRequested(CApplicationManager::HSHELL_DATA const &,IImmersiveApplication *);
	void _HandleImmersiveOwnedWindowVisibilityChange(CApplicationManager::HSHELL_DATA const * const,HWND__ *);
	void _HandleMonitorChanged(CApplicationManager::HSHELL_DATA const * const);
	void _HandleMonitorRelatedNotificationForDesktopWindow(HWND__ *,HWND__ *,bool,ZBID);
	void _HandleSelectTargetViewForNavigationRequest(unsigned __int64,Windows::Foundation::Collections::IPropertySet *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSelectTargetView *);
	void _HandleTaskWindowDestruction(CTaskWindowFinder const &);
	void _HandleViewCreation(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::IPropertySet *);
	void _HandleViewNavigationRequested(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::IPropertySet *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForNavigationRequest *);
	void _HandleViewPropertyChanged(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewPropertyChangedArgs *);
	void _HandleWindowBecameOwned(HWND__ *,CApplicationManager::HSHELL_DATA const * const);
	void _HandleWindowBecameUnowned(CApplicationManager::HSHELL_DATA const * const);
	void _HandleWindowChangedOwner(CApplicationManager::HSHELL_DATA const * const,HWND__ *);
	void _HandleWindowCreation(CApplicationManager::HSHELL_DATA const * const);
	void _PerformDesktopActivationCallouts(IImmersiveMonitor *,IAM_DESKTOP_SWITCH_OPTION);
	void _RecoverApplicationViews(IViewEventDispatcherCrashRecovery *);
	void _RemoveApplication(IImmersiveApplicationInternal *);
	void _SendServiceAvailabilityChangedNotification(IImmersiveApplication *,unsigned int,_GUID const * const,IMM_APP_SERVICE_NOTIFY_FLAGS);
	void _ShutdownServiceProviders();
	void _TryPresentDesktopExperience(HWND__ *,MODE_CHANGE_REASON,IImmersiveMonitor *);
	void _UpdatePerApplicationDataIfNeeded(IImmersiveApplicationInternal *,HWND__ *,CApplicationManager::UpdateAppDataReason);
	void _UpdatePerApplicationDataIfNeeded(IImmersiveApplicationInternal *,ITaskWindow *,CApplicationManager::UpdateAppDataReason);
protected:
	virtual long v_ShutdownServices(IProfferService *);
	virtual ~CApplicationManager();
public:
	CApplicationManager();
	long RuntimeClassInitialize();
	virtual __int64 OnMessage(unsigned int,unsigned __int64,__int64,bool *);
	virtual int RemoveApplicationWithPendingTermination(IImmersiveApplication *);
	virtual long ActivateApplication(IImmersiveApplication *,IAM_ACTIVATE_APPLICATION_OPTION);
	virtual long ActivateApplicationInternal(IAM_ACTIVATE_APPLICATION_OPTION,IImmersiveApplication *);
	virtual long AddDelayedOperation(IAsyncCallback *);
	virtual long AddDelayedOperationInternal(IAsyncCallback *,DELAY_OPERATION_TYPE);
	virtual long ApplyOperation(IImmersiveApplication *,IApplicationViewOperation *);
	virtual long AsyncInvokeWithApplicationViewSerialization(IAsyncCallback *);
	virtual long ClearCachedForegroundWindow();
	virtual long ClearMonitorOverride(IImmersiveMonitor *);
	virtual long CreateEnsuredApplication(unsigned short const *,unsigned __int64,IImmersiveApplicationInternal * *);
	virtual long CreateNewGlom(HWND__ *,IImmersiveApplicationInternal *,Windows::Foundation::Collections::IPropertySet *,IImmersiveApplicationInternal * *);
	virtual long DecrementGlobalOverride();
	virtual long DisableApplicationVisibilityOverride(IImmersiveApplication *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long ForgetApplication(unsigned short const *);
	virtual long ForgetApplicationByHostId(unsigned short const *,unsigned __int64);
	virtual long ForgetApplicationsInPackage(unsigned short const *);
	virtual long GetAllApplicationsByAppID(unsigned short const *,IObjectArray * *);
	virtual long GetAllApplicationsByAppIDSafe(unsigned short const *,IObjectArray * *);
	virtual long GetAllApplicationsByHostIDSafe(unsigned __int64,IObjectArray * *);
	virtual long GetAllApplicationsByHostId(unsigned __int64,IObjectArray * *);
	virtual long GetApplication(unsigned short const *,IImmersiveApplication * *);
	virtual long GetApplicationByFrameProxyInternal(IApplicationFrameProxy *,_GUID const &,void * *);
	virtual long GetApplicationByWindow(HWND__ *,IImmersiveApplication * *);
	virtual long GetApplicationByWindowInternal(HWND__ *,_GUID const &,void * *);
	virtual long GetApplicationMonitorSafe(IImmersiveApplication *,IImmersiveMonitor * *);
	virtual long GetApplicationWindowForTransitionSafe(IImmersiveApplication *,HWND__ * *);
	virtual long GetAssociatedGlomCount(unsigned short const *,unsigned __int64 *);
	virtual long GetForegroundApplication(IImmersiveApplication * *);
	virtual long GetImmersiveApplicationArray(IImmersiveApplicationArray * *);
	virtual long GetImmersiveApplicationArraySafe(IImmersiveApplicationArray * *);
	virtual long GetListeners(IObjectArray * *);
	virtual long GetNextGlomForApp(IImmersiveApplicationInternal *,IImmersiveApplicationInternal * *);
	virtual long GetPerApplicationData(unsigned short const *,CRefCountedObject<PER_APPLICATION_DATA> * *);
	virtual long GetPerHostIdApplicationData(unsigned __int64,CRefCountedObject<PER_APPLICATION_DATA> * *);
	virtual long GetRunningApplicationsFromPackageId(unsigned short const *,IImmersiveApplicationArray * *);
	virtual long GetSizeConstraintOverrides(IImmersiveApplication *,tagSIZE *,tagSIZE *,tagSIZE *,tagSIZE *);
	virtual long GetTitleSafe(IImmersiveApplication *,unsigned short * *);
	virtual long GetWindowsSafe(IImmersiveApplication *,IMMERSIVE_APPLICATION_GET_WINDOWS_FILTER,_GUID const &,void * *);
	virtual long HandleInitialPosition(IImmersiveApplicationInternal *,IUnknown *,IPresentationRequestedArgs *,IImmersiveApplicationInternal *);
	virtual long IncrementGhostAnimationWaitCountSafe(IImmersiveApplication *,unsigned int);
	virtual long IncrementGlobalOverride();
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long InitializeTrustedComponentForegroundControl(_GUID const &);
	virtual long IsApplicationInteractiveSafe(IImmersiveApplication *,int *);
	virtual long IsApplicationRunningSafe(IImmersiveApplication *,int *);
	virtual long IsApplicationVisibleSafe(IImmersiveApplication *,int *);
	virtual long IsApplicationWindowStronglyNamedSafe(IImmersiveApplication *,int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long NotifyListenersForSimulatedAppActivation(IImmersiveApplicationInternal *);
	virtual long OnApplicationStateChanged(unsigned short const *,PLM_STATE_CHANGE);
	virtual long OnDesiredTitlebarOverlayStateUpdated(HWND__ *);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long OnShowWindowPolicy(HWND__ *,unsigned int,unsigned long *,tagRECT *);
	virtual long OnTitleBarColorUpdated(HWND__ *);
	virtual long OnTitleBarDrawnByAppUpdated(HWND__ *);
	virtual long OnTitleBarHitTestVisualUpdated(HWND__ *);
	virtual long OnTitleBarIconUpdated(HWND__ *,void *,unsigned long);
	virtual long OpenApplicationPropertyStoreSafe(IImmersiveApplication *,IMMAPPPROPERTYSTOREFLAGS,_GUID const &,void * *);
	virtual long PerformDelayedInitialization();
	virtual long PrivateQueryService(_GUID const &,_GUID const &,void * *);
	virtual long QueryObjectForWindow(unsigned int,IInspectable * *);
	virtual long RefreshMonitorMappings();
	virtual long Register(IImmersiveApplicationNotification *,unsigned long *);
	virtual long RestoreApplicationVisibilityOverride(IImmersiveApplication *);
	virtual long SetActiveApp(IAM_APPLICATION_REALM,HWND__ *);
	virtual long SetApplicationMonitorSafe(IImmersiveApplication *,IImmersiveMonitor *,__MIDL___MIDL_itf_shpriv_core_0000_0321_0002);
	virtual long SetApplicationPos(IImmersiveApplication *,APPLICATION_VIEW_DATA_UPDATE const *,SET_IMM_APP_POS,void * *);
	virtual long SetApplicationPosSafe(IImmersiveApplication *,APPLICATION_VIEW_DATA_UPDATE const *,SET_IMM_APP_POS,void * *);
	virtual long SetApplicationViewPosition(IImmersiveApplication *,IApplicationViewPosition *,SET_IMM_APP_POS);
	virtual long SetApplicationWindow(HWND__ *,SET_APPLICATION_WINDOW_OPTION);
	virtual long SetApplicationWindowSafe(HWND__ *,SET_APPLICATION_WINDOW_OPTION);
	virtual long SetCloak(IImmersiveApplication *,int,APPLICATION_VIEW_CLOAK_TYPE);
	virtual long SetGhostVisualStyleSafe(IImmersiveApplication *,__MIDL___MIDL_itf_shpriv_core_0000_0321_0001);
	virtual long SetMonitorOverride(IImmersiveMonitor *);
	virtual long SetRootXamlIslandWindow(HWND__ *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long SwitchToDesktop(tagPOINT const *,IAM_DESKTOP_SWITCH_OPTION);
	virtual long SwitchToDesktopOnMonitor(IImmersiveMonitor *,IAM_DESKTOP_SWITCH_OPTION);
	virtual long SwitchToImmersiveMode();
	virtual long SwitchToShellWindow();
	virtual long TerminateApplication(IImmersiveApplication *,PLM_TERMINATE_FLAGS,PLM_TASKCOMPLETION_CATEGORY_FLAGS *);
	virtual long TransferAllWindowsBetweenGloms(IImmersiveApplicationInternal *,IImmersiveApplicationInternal *,TransferWindowOptions const *);
	virtual long TransferWindowBetweenGloms(HWND__ *,IImmersiveApplicationInternal *,IImmersiveApplicationInternal *,TransferWindowOptions const *);
	virtual long UncloakWindow(HWND__ *);
	virtual long UnensureApplication(IImmersiveApplicationInternal *);
	virtual long Unregister(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WaitForReconstitution();
	virtual void FixDialogOwnershipForWindow(HWND__ *);
	virtual void ForgetAllApplications();
	virtual void GetSupplementalDataForMonitorUpdate(UPDATE_MONITOR_SUPPLEMENTAL_DATA *);
	virtual void HandleFrameWindowGhosted(HWND__ *);
	virtual void HandleNewApplicationProcess(unsigned short const *,void *);
	virtual void OnCuratedWindowHidden(HWND__ *);
	virtual void OnMoveSizeAttempted(IApplicationView *,unsigned long);
	virtual void OnShellTrackedWindowPosChanged(HWND__ *,IApplicationView *,int,unsigned long,tagRECT);
	virtual void PerformModeBasedCallouts(MODE_TRANSITION_INFORMATION const * const);
	virtual void SetForegroundWindowSafe(HWND__ *);
};

namespace CApplicationManagerUtility
{
	CIAMGlobals * g_pIAMGlobals;
	HWND__ * GetLastActiveVisiblePopupOrSelf(HWND__ *);
	HWND__ * GetVisibleRootOwner(HWND__ *,CApplicationManagerUtility::RootOwnerType);
	bool IsClassicApplication(HWND__ *,ZBID);
	bool IsForcedAppWindow(HWND__ *);
	bool IsGhostWindow(HWND__ *);
	bool IsOwnedWindow(HWND__ *);
	bool IsTrayWindowStyleCheck(HWND__ *);
	bool IsValidAndVisibleWindow(HWND__ *);
	bool IsValidWindow(HWND__ *);
	bool ValidateWindowProcess(HWND__ *,CApplicationManagerUtility::WINDOW_BELONGS_TO_PROCESSTYPE);
	long NotifyWindow(HWND__ *,unsigned int,unsigned __int64,__int64,CApplicationManagerUtility::DELIVERY_METHOD);
	long SetForegroundWindow(HWND__ *);
};

class CApplicationViewBase
{
protected:
	long SetCanTab(int,Microsoft::WRL::Wrappers::Details::SyncLockExclusive const &);
	long _GetExtendedFramePosition(HWND__ *,tagRECT *);
	long _RefreshEnterpriseId(bool);
public:
	CApplicationViewBase();
	long RuntimeClassInitialize();
	virtual HWND__ * GetWindow();
	virtual long Flash();
	virtual long GetCanTab(int *);
	virtual long GetCompatibilityPolicyType(APPLICATION_VIEW_COMPATIBILITY_POLICY *);
	virtual long GetEnterpriseChromePreference(int *);
	virtual long GetEnterpriseId(unsigned short * *);
	virtual long GetIsTabbed(int *);
	virtual long GetNeediness(int *);
	virtual long GetPositionerPriority(IShellPositionerPriority * *);
	virtual long GetSizeConstraints(IImmersiveMonitor *,tagSIZE *,tagSIZE *);
	virtual long GetVirtualDesktopId(_GUID *);
	virtual long InsertAfterWindow(HWND__ *);
	virtual long RefreshCanTab();
	virtual long RefreshEnterpriseId(bool);
	virtual long ResetEnterpriseIdOnProcessIdMatch(unsigned long);
	virtual long SetCanTab(int);
	virtual long SetCloak(APPLICATION_VIEW_CLOAK_TYPE,int);
	virtual long SetCompatibilityPolicyType(APPLICATION_VIEW_COMPATIBILITY_POLICY);
	virtual long SetEnterpriseId(unsigned short const *);
	virtual long SetIsTabbed(int);
	virtual long SetPositionerPriority(IShellPositionerPriority *);
	virtual long SetVirtualDesktopId(_GUID const &);
	virtual void HandleNeedinessChange(bool);
	virtual void InvalidateEnterpriseId();
};

class CApplicationViewBroker
{
	long _GetAppViewDataByWindow(HWND__ *,APPLICATION_VIEW_DATA *);
	long _GetAppViewDataForCallingProcess(APPLICATION_VIEW_DATA *);
public:
	virtual long GetApplicationViewData(HWND__ *,APPLICATION_VIEW_DATA *);
	virtual long GetApplicationViewState(APPLICATION_VIEW_STATE *);
	virtual long SetServiceProvider(IServiceProvider *);
	virtual long TryUnsnap(int *);
};

class CApplicationViewManager
{
	long GetApplicationViewsById(unsigned short const *,unsigned __int64,bool,IObjectArray * *);
	long SetAppStateForViews(IObjectArray *,APPLICATION_DESIRED_STATE);
	long SetViewInFocusHelper(IApplicationView *,CApplicationViewManager::FocusType);
	long _AddApplicationView(IApplicationView *,IUnknown *);
	virtual ~CApplicationViewManager();
public:
	CApplicationViewManager();
	long RuntimeClassInitialize();
	virtual long AddApplicationView(IApplicationView *);
	virtual long AddWin32ApplicationView(IClassicWindowExternal *,IApplicationView * *);
	virtual long AddWinRTApplicationView(IImmersiveApplication *,IUnknown *);
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long FlushChangeNotifications();
	virtual long GetOwnerAppView(IApplicationView *,IApplicationView * *);
	virtual long GetSwitchWindow(IWin32ApplicationView *,HWND__ * *);
	virtual long GetViewForAppUserModelId(unsigned short const *,IApplicationView * *);
	virtual long GetViewForApplication(IImmersiveApplication *,IApplicationView * *);
	virtual long GetViewForHwnd(HWND__ *,IApplicationView * *);
	virtual long GetViewInFocus(IApplicationView * *);
	virtual long GetViews(IObjectArray * *);
	virtual long GetViewsByAppUserModelId(unsigned short const *,IObjectArray * *);
	virtual long GetViewsByZOrder(IObjectArray * *);
	virtual long HandleWindowReplaced(HWND__ *,HWND__ *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long ProcessEntepriseIdChanged(unsigned long);
	virtual long RaiseApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long RefreshCollection();
	virtual long RegisterForApplicationViewChanges(IApplicationViewChangeListener *,unsigned long *);
	virtual long RemoveApplicationView(IApplicationView *,REMOVE_APPLICATION_VIEW_OPTIONS);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long SetViewInFocus(IApplicationView *);
	virtual long SetViewPendingFocus(IApplicationView *);
	virtual long SetViewStateForDesiredAppState(unsigned short const *,APPLICATION_DESIRED_STATE);
	virtual long SetViewStateForDesiredAppStateByHostId(unsigned __int64,APPLICATION_DESIRED_STATE);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long SwitchTo(IApplicationView *);
	virtual long TryGetLastActiveVisibleView(IApplicationView * *);
	virtual long UnregisterForApplicationViewChanges(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long VerifyCollection(unsigned long *);
	virtual long WindowEnterpriseIdChanged(HWND__ *);
	virtual long WindowOccludedChanged(HWND__ *,unsigned char);
	virtual long WindowShowEnterpriseIndicatorChanged(HWND__ *);
	virtual long v_PublishServices(IServiceProvider *,IProfferService *);
	virtual long v_ShutdownServices(IProfferService *);
	virtual void HandleFlashingChangeForApplication(IImmersiveApplication *,int);
	virtual void HandleFlashingChangeForWindow(HWND__ *,int);
	virtual void OnSizeConstraintsQueried(IApplicationView *,tagSIZE,tagSIZE,unsigned short);
};

struct CAsyncCallbackWithLambda<<lambda_70db04ee97ce611edc9e35899f670330> >
{
	virtual long Invoke(long);
};

struct CAsyncSwitchItemController
{
	virtual DragEffects IsDraggable(ISwitchItem *);
	virtual bool CanItemMoveDesktops(ISwitchItem *);
	virtual bool IsContextMenuEnabled(ISwitchItem *);
	virtual long GetContextMenu(ISwitchItem *,HMENU__ * *);
	virtual void CloseSwitchItem(ISwitchItem *);
	virtual void ContextMenuInvoked(ISwitchItem *,unsigned int);
	virtual void DragSwitchItem(ISwitchItem *,IExternalDragCallback *);
	virtual void InvokeSwitchItem(ISwitchItem *);
	virtual void MoveItemToDesktop(ISwitchItem *,IVirtualDesktopItem *);
	virtual void MoveItemToNewDesktop(ISwitchItem *);
	virtual void SwitchItemDragEnded();
	virtual void SwitchItemDragStarted(ISwitchItem *);
};

struct CAutoAppTransitionRequest
{
	CAutoAppTransitionRequest(IAppTransitionManager *);
	long TriggerAppTransitionAnimation(IAppLayoutOperation *,IImmersiveMonitor *,IImmersiveApplicationManagerSafeForSyncCallouts *);
	virtual ~CAutoAppTransitionRequest();
};

struct CAutoApplicationCreationResourceGuarantee
{
	CAutoApplicationCreationResourceGuarantee(IIAMServiceProvider *);
	~CAutoApplicationCreationResourceGuarantee();
};

struct CAutoHandle<HBITMAP__ *>
{
	~CAutoHandle<HBITMAP__ *>();
};

struct CAutoHandle<HDC__ *>
{
	~CAutoHandle<HDC__ *>();
};

struct CAutoHandle<void *>
{
	~CAutoHandle<void *>();
};

struct CAutoMemPtr<CImmersiveMode::CDesktopVisibilityChangeSource>
{
	~CAutoMemPtr<CImmersiveMode::CDesktopVisibilityChangeSource>();
};

struct CAutoMemPtr<CImmersiveMode::DesktopVisibilityChangeListener>
{
	~CAutoMemPtr<CImmersiveMode::DesktopVisibilityChangeListener>();
};

struct CAutoMemPtr<CLinkedNode<ViewEventDispatcher::PendingActivationData> >
{
	~CAutoMemPtr<CLinkedNode<ViewEventDispatcher::PendingActivationData> >();
};

struct CAutoSRWExclusiveLock
{
	~CAutoSRWExclusiveLock();
};

struct CAutoSRWSharedLock
{
	~CAutoSRWSharedLock();
};

class CBaseRPCTimeout
{
	static void s_Callback(void *,unsigned char);
public:
	void Disarm();
};

class CBaseTrayFlyoutExperienceManager
{
	struct DebounceDetection
	{
		struct Notification
		{
			long RuntimeClassInitialize(DebounceDetection *);
			virtual long ObservedMouseButtonDown(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
			virtual long ObservedMouseButtonUp(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
			virtual long ObservedMouseMove(tagPOINT,unsigned short,tagPOINT);
			void Disconnect();
		};

		bool CanShow();
		void BlockImmediateReshow();
	};

	long Initialize(IServiceProvider *,unsigned short const *,unsigned short const *);
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long UpdateFocusOnDismiss();
	void NotifyTrayFlyoutIsVisible(bool);
protected:
	long CalculateFlyoutPosition(tagRECT &,tagRECT *);
	long HandleInputHostVisibilityChanged(tagRECT &,IHM_DISPLAY_MODE);
	long PositionFlyoutCore();
	long RecalculateClipRect(tagRECT &,IHM_DISPLAY_MODE);
	long SetBorderAccent(int);
	long SetTrayItemRect(Windows::Foundation::Rect const &);
	virtual long GetAppBarPositionForMonitor(HMONITOR__ * const,tagRECT *,EDGEUI_TRAYSTUCKPLACE *);
public:
	CBaseTrayFlyoutExperienceManager(int,int);
	CSingleViewShellExperience::Border GetBorderFlagFromStuckEdge(EDGEUI_TRAYSTUCKPLACE);
	long GetViewWindow(HWND__ * *);
	long HideFlyout();
	long ShowFlyout(Windows::Foundation::Rect const &,HWND__ *);
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long OnDismiss();
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnIdleStateChanged(CSingleViewShellExperience *,bool);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewDestroying(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual long PositionFlyout(Windows::Foundation::Rect const &,Windows::Foundation::Size const &);
	virtual long RuntimeClassInitialize(IServiceProvider *,unsigned short const *);
	virtual long RuntimeClassInitialize(IServiceProvider *,unsigned short const *,LIGHT_DISMISS_FLAGS,unsigned short const *);
	virtual long RuntimeClassInitialize(IServiceProvider *,unsigned short const *,unsigned short const *);
	virtual ~CBaseTrayFlyoutExperienceManager();
};

struct CBucketComparator
{
	int Compare(BUCKET *,BUCKET *);
};

struct CCLambdaAdapter<int (*)(HDC__ *,unsigned short *,int,tagRECT *,unsigned int,__int64),6>
{
	static int Adapt<<lambda_2ae8870d6bc816a04ba0e39f1c502364> >(HDC__ *,unsigned short *,int,tagRECT *,unsigned int,__int64);
};

struct CCLambdaAdapter<int (*)(HMONITOR__ *,HDC__ *,tagRECT *,__int64),4>
{
	static int Adapt<<lambda_e1d8dfd296a10e855a8b37200bc3f556> >(HMONITOR__ *,HDC__ *,tagRECT *,__int64);
};

struct CCLambdaAdapter<int (*)(HWND__ *,__int64),2>
{
	static int Adapt<<lambda_63ca7660cb234c8b240bf7ee4218e0e9> >(HWND__ *,__int64);
};

class CCharmsWindowManager
{
	static CHARM_WINDOW_VISIBILITY_BEHAVIOR s_GetBehaviorCharm(HWND__ *);
protected:
	virtual ~CCharmsWindowManager();
public:
	CCharmsWindowManager();
	virtual HWND__ * GetCurrentCharm();
	virtual bool HandleDestruction(HWND__ *);
	virtual long HideCharm(HWND__ *);
	virtual void HandleActivation(HWND__ *);
	virtual void HandleCreation(HWND__ *);
	virtual void HandleDeactivation();
};

class CClassicWindow
{
	static bool s_ShouldHaveAppView(CLASSIC_WINDOW_STATE);
	static bool s_ShouldShowInSwitchers(CLASSIC_WINDOW_STATE);
public:
	CClassicWindow(HWND__ *,IClassicWindow *,IImmersiveMonitor *,CLASSIC_WINDOW_STATE);
	static long s_CreateInstance(HWND__ *,IClassicWindow *,IImmersiveMonitor *,CLASSIC_WINDOW_STATE,IClassicWindow * *);
	virtual HWND__ * GetWindow();
	virtual Microsoft::WRL::ComPtr<IApplicationView> const & GetApplicationView();
	virtual Microsoft::WRL::ComPtr<IClassicWindow> const & GetOwner();
	virtual WindowChangeFlags ChangeWindowType(WindowChangeFlags);
	virtual bool IsEqualByAppId(unsigned short const * const);
	virtual bool IsEqualByHWND(HWND__ *);
	virtual bool IsInHighZOrderBand();
	virtual bool IsOrphanedOwned();
	virtual bool IsOwned();
	virtual bool IsPseudoTrayWindow();
	virtual bool IsTrayWindow();
	virtual bool IsUnownedNonTrayWindow();
	virtual bool ShouldHaveAppView();
	virtual bool ShouldShowInSwitchers();
	virtual long GetActivationTime(_FILETIME *);
	virtual long GetApplicationId(unsigned short * *);
	virtual long GetMonitor(IImmersiveMonitor * *);
	virtual long GetWindowForActivation(HWND__ * *,int *);
	virtual long Reinitialize(IClassicWindow *,IImmersiveMonitor *,CLASSIC_WINDOW_STATE);
	virtual void AttachApplicationId(unsigned short *);
	virtual void SetActivationTime();
	virtual void SetApplicationView(IApplicationView *);
	virtual void SetMonitor(IImmersiveMonitor *);
	virtual void SetOwner(IClassicWindow *);
};

struct CClassicWindowActivationBasedCollection
{
	virtual long PositionNewCreatedApp(Microsoft::WRL::ComPtr<IClassicWindow> const &);
};

struct CClassicWindowExternal
{
	CClassicWindowExternal(IClassicWindow *);
	virtual HWND__ * GetWindow();
	virtual Microsoft::WRL::ComPtr<IClassicWindow> const & GetClassicWindow();
	virtual int IsInHighZOrderBand();
	virtual int IsTray();
	virtual int ShouldShowInSwitchers();
	virtual long GetAppUserModelId(unsigned short * *);
	virtual long GetLastActivationTimestamp(_FILETIME *);
	virtual long GetOwnerWindow(HWND__ * *);
};

class CClassicWindowManager
{
	Microsoft::WRL::ComPtr<IClassicWindow> GetClassicWindowOwner(HWND__ *);
	Microsoft::WRL::ComPtr<IClassicWindow> GetRootOwner(IClassicWindow *);
	WindowChangeFlags _ChangeWindowType(IClassicWindow *,WindowChangeFlags);
	WindowChangeFlags _CheckPseudoTrayAndChangeWindowType(IClassicWindow *,WindowChangeFlags);
	bool IsWindowOwnedBy(IClassicWindow *,IClassicWindow *);
	bool IsWindowPseudoTrayAfterChange(IClassicWindow *,WindowChangeFlags);
	bool _HandleDestructionOrHide(HWND__ *,CClassicWindowManager::HandleDestructionOrHideOptions);
	long _EnsureMonitorManager();
	long _FindClassicWindow(HWND__ *,IClassicWindow * *,unsigned __int64 *);
	long _GetLastActiveClassicWindow(IImmersiveMonitor *,IClassicWindow * *);
	long _GetLastActiveClassicWindowWithValidation(IImmersiveMonitor *,IClassicWindow * *);
	long _HandleActivation(HWND__ *);
	static Microsoft::WRL::ComPtr<IClassicWindow> s_ClassicWindowFromClassicWindowExternal(IClassicWindowExternal *);
	void AddApplicationView(IClassicWindow *);
	void RecomputeOwner(IClassicWindow *);
	void RemoveApplicationView(IClassicWindow *,REMOVE_APPLICATION_VIEW_OPTIONS);
protected:
	virtual ~CClassicWindowManager();
public:
	CClassicWindowManager();
	long RuntimeClassInitialize(IImmersiveSystemModeInternal *);
	virtual HWND__ * GetApplicationViewWindow(HWND__ *);
	virtual OWNER_SWITCH_RESULT HandleOwnerSwitch(OWNERSHIP_CHANGE_INFO *);
	virtual bool HandleCreation(HWND__ *,ZBID,ClassicWindowCreationType,IImmersiveMonitor *);
	virtual bool HandleDestruction(HWND__ *);
	virtual bool HandleHide(HWND__ *);
	virtual bool HandleMonitorMove(HWND__ *,IImmersiveMonitor *);
	virtual bool IsActiveApp(HWND__ *);
	virtual long EnumerateOwnershipTree(IClassicWindowExternal *,unsigned long *,HWND__ * * *);
	virtual long GetIntersectingMonitors(HWND__ *,CCoSimpleArray<Microsoft::WRL::ComPtr<IImmersiveMonitor>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > *);
	virtual long GetLastActiveClassicTimestamp(_FILETIME *);
	virtual long GetLastActiveClassicWindowForActivation(IImmersiveMonitor *,HWND__ * *);
	virtual long GetLastActiveDesktopWindow(IImmersiveMonitor *,HWND__ * *);
	virtual long GetRootSwitchableOwner(IClassicWindowExternal *,HWND__ * *);
	virtual long GetWindowList(_CLASSIC_WINDOWS * *);
	virtual long HandleActivation(HWND__ *,bool);
	virtual long RefreshCollection();
	virtual long SetCloak(HWND__ *,int,_SET_CLOAK_OPTIONS);
	virtual long SwitchToLastActiveApp(IImmersiveMonitor *);
	virtual long SwitchToThisApp(unsigned short const *);
	virtual long UpdateLastActivatedTime(HWND__ *);
	virtual void AttachApplicationId(HWND__ *,unsigned short *);
	virtual void HandleTaskListDeletedChange(HWND__ *);
	virtual void HandleWindowReplaced(HWND__ *,HWND__ *);
	virtual void RefreshWindowToMonitorMapping(IImmersiveShellHookService *);
};

struct CCoSimpleArray<ENUMERATED_WINDOW,4294967294,CSimpleArrayStandardCompareHelper<ENUMERATED_WINDOW> >
{
	~CCoSimpleArray<ENUMERATED_WINDOW,4294967294,CSimpleArrayStandardCompareHelper<ENUMERATED_WINDOW> >();
};

struct CCoSimpleArray<HWND__ *,4294967294,CSimpleArrayStandardCompareHelper<HWND__ *> >
{
	~CCoSimpleArray<HWND__ *,4294967294,CSimpleArrayStandardCompareHelper<HWND__ *> >();
};

struct CCoSimpleArray<Microsoft::WRL::ComPtr<CApplicationFrameWrapper>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CApplicationFrameWrapper> > >
{
	~CCoSimpleArray<Microsoft::WRL::ComPtr<CApplicationFrameWrapper>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CApplicationFrameWrapper> > >();
};

struct CCoSimpleArray<Microsoft::WRL::ComPtr<IAsyncCallback>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAsyncCallback> > >
{
	~CCoSimpleArray<Microsoft::WRL::ComPtr<IAsyncCallback>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAsyncCallback> > >();
};

struct CCoSimpleArray<Microsoft::WRL::ComPtr<IDCompThumbnail>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IDCompThumbnail> > >
{
	~CCoSimpleArray<Microsoft::WRL::ComPtr<IDCompThumbnail>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IDCompThumbnail> > >();
};

struct CCoSimpleArray<Microsoft::WRL::ComPtr<IImmersiveMonitor>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >
{
	~CCoSimpleArray<Microsoft::WRL::ComPtr<IImmersiveMonitor>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >();
};

struct CCoSimpleArray<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> > >
{
	~CCoSimpleArray<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> > >();
};

struct CCoSimpleArray<Microsoft::WRL::ComPtr<ITaskbarLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> > >
{
	~CCoSimpleArray<Microsoft::WRL::ComPtr<ITaskbarLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> > >();
};

struct CCoSimpleArray<RecoveredViewInfo,4294967294,CSimpleArrayStandardCompareHelper<RecoveredViewInfo> >
{
	~CCoSimpleArray<RecoveredViewInfo,4294967294,CSimpleArrayStandardCompareHelper<RecoveredViewInfo> >();
};

struct CCoSimpleArray<RecoveredWindowForViewWrapper,4294967294,CSimpleArrayStandardCompareHelper<RecoveredWindowForViewWrapper> >
{
	~CCoSimpleArray<RecoveredWindowForViewWrapper,4294967294,CSimpleArrayStandardCompareHelper<RecoveredWindowForViewWrapper> >();
};

struct CCoSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > >
{
	~CCoSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > >();
};

struct CCoSimpleArray<_GUID,4294967294,CSimpleArrayStandardCompareHelper<_GUID> >
{
	~CCoSimpleArray<_GUID,4294967294,CSimpleArrayStandardCompareHelper<_GUID> >();
};

struct CCoSimpleArray<unsigned long,4294967294,CSimpleArrayStandardCompareHelper<unsigned long> >
{
	~CCoSimpleArray<unsigned long,4294967294,CSimpleArrayStandardCompareHelper<unsigned long> >();
};

struct CCoTaskMemPtr<_GUID>
{
	~CCoTaskMemPtr<_GUID>();
};

struct CCoTaskMemPtr<unsigned char>
{
	~CCoTaskMemPtr<unsigned char>();
};

struct CCoTaskMemPtr<unsigned short>
{
	~CCoTaskMemPtr<unsigned short>();
};

struct CCommonApplicationViewArrangePositionImpl
{
	virtual long GetArrangedState(ARRANGEMENT_BASED_VIEW_STATE *);
	virtual long GetArrangementBasedViewStateOptions(ARRANGEMENT_BASED_VIEW_STATE_OPTIONS *);
	virtual long GetRect(tagRECT *);
	virtual long GetSnapOptions(unsigned long *);
};

struct CCommonApplicationViewArrangePositionSnapshot
{
	long RuntimeClassInitialize(HWND__ *);
};

struct CCommonApplicationViewOcclusionPosition
{
	CCommonApplicationViewOcclusionPosition();
	long RuntimeClassInitialize(tagWINDOWPLACEMENT);
};

class CCommonApplicationViewOcclusionPositionImpl
{
protected:
	static ARRANGEMENT_BASED_VIEW_STATE s_GetStateFromShowCommand(unsigned int);
	static unsigned int s_GetShowCommandFromState(ARRANGEMENT_BASED_VIEW_STATE);
public:
	virtual long GetArrangedState(ARRANGEMENT_BASED_VIEW_STATE *);
	virtual long GetArrangementBasedViewStateOptions(ARRANGEMENT_BASED_VIEW_STATE_OPTIONS *);
	virtual long GetOcclusionBasedViewStateOptions(OCCLUSION_BASED_VIEW_STATE_OPTIONS *);
	virtual long GetRect(tagRECT *);
	virtual long GetRestoreRect(tagRECT *);
	virtual long GetSnapOptions(unsigned long *);
	virtual long GetWindowPlacement(_OCCLUSION_WINDOW_INFORMATION *);
};

struct CCommonApplicationViewOcclusionPositionSnapshot
{
	long RuntimeClassInitialize(HWND__ *);
};

struct CCommonApplicationViewPosition
{
	CCommonApplicationViewPosition();
};

struct CCommonApplicationViewPositionImpl
{
	virtual long GetRect(tagRECT *);
};

struct CCompareRecoveredWindows
{
	int Compare(ENUMERATED_WINDOW const &,ENUMERATED_WINDOW const &);
};

class CControlCenterExperienceManager
{
	long Hide();
	long OnTargetedMessage(CControlCenterExperienceManager::TargetedMessageKind,unsigned short);
	long PositionView();
	long RaisePropertyChangedEvent(unsigned short const *,bool);
	long RegisterWithLightDismiss();
	long Show();
	long SubscribeToShellReadyWnf();
	static long PostTargetedMessage(void *,CControlCenterExperienceManager::TargetedMessageKind,unsigned short);
	void OnVisibilityChanged();
protected:
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShowing(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual long OnVisibilityRevokedChanged(CSingleViewShellExperience *);
public:
	CControlCenterExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HotKeyInvoked(Windows::Internal::Shell::Experience::HotKeyKind);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnDismiss();
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetVisibilityWithoutAnimations(unsigned char);
	virtual long add_VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *> *,EventRegistrationToken *);
	virtual long get_IsVisible(unsigned char *);
	virtual long put_IsVisible(unsigned char);
	virtual long remove_VisibilityChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CControlCenterExperienceManager();
};

class CCortanaExperienceManagerClassFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

class CCrashDetector
{
	long _StartMonitoringThreadOfWindow(HWND__ *,CCrashDetector::CHandler *);
	long _TakeOwnershipOfHandleAndStartMonitoring(void *,CCrashDetector::CHandler *);
	static void s_ObjectSignaledHandler(_TP_CALLBACK_INSTANCE *,void *,_TP_WAIT *,long);
public:
	void StopMonitoring();
	~CCrashDetector();
};

class CCriticalFailureHandler
{
	bool _MatchesPreviousFailure(long,unsigned short const *,unsigned int,unsigned __int64 *,unsigned __int64 *);
	void _RaiseFailFastException(long,unsigned __int64 *,unsigned __int64 *);
	void _RaiseFailFastExceptionInvalidOXID(_EXCEPTION_RECORD *,_CONTEXT *,unsigned long);
	void _RaiseFailFastExceptionRPCFailedDNE(_EXCEPTION_RECORD *,_CONTEXT *,unsigned long);
	void _RecordFailure(long,unsigned short const *,unsigned int,unsigned __int64 *,unsigned __int64 *);
public:
	void GetFakeFailure(long *);
	void HandleFailure(long *,unsigned short const *,unsigned int,unsigned __int64 *,unsigned __int64 *);
};

struct CCriticalFailureTelemetry
{
	void ReportFailure_(long,unsigned short const *,unsigned int,unsigned __int64 *,unsigned __int64 *,bool);
};

class CDPA_Base<tagRGBQUAD,CTContainer_PolicyUnOwned<tagRGBQUAD> >
{
	static int _StandardDestroyCB(tagRGBQUAD *,void *);
public:
	int Destroy();
};

struct CDelayIAMOperations
{
	CDelayIAMOperations::COperation * RemoveOperation(unsigned long);
};

struct CDelayedTileActivation
{
	CDelayedTileActivation();
	long RuntimeClassInitialize(IImmersiveApplication *,IUnknown *,ACTIVATEOPTIONSINTERNAL);
	long RuntimeClassInitialize(unsigned short const *,unsigned short const *,unsigned short const *,IUnknown *,ACTIVATEOPTIONSINTERNAL);
	virtual long ActivateApp(IImmersiveMonitor *,ISplashScreen *);
	virtual void UpdateActivateOptions(unsigned long,unsigned long);
};

class CDesktopPositioner
{
	HWND__ * GetInsertAfterWindowFromForegroundWindow();
	bool HasWindowingEnvironmentManager();
	bool IsBackgroundActivation(IApplicationView *,PositionerPropertySetHelpers::ActivationPropertyFlags);
	bool _IsViewTabbed(IApplicationView *);
	bool _UsePreferredSizeForStandaloneWindows(IApplicationView *);
	long CreateAppViewOperationWithTitleBarAndChromeConfigured(IApplicationView *,IApplicationViewOperation * *);
	long EnsureViewIsInViewGroupForTabGroup(IApplicationView *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &,IViewGroup * *,IApplicationView * *);
	long InitializePositionHelper(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,unsigned long *);
	long IsWindowMinimizing(IUnknown *,unsigned char *);
	long OnSelectedViewChangedForGroup(IInspectable *,IInspectable *);
	long PositionViewForPositionerHandoff(IApplicationView *,IApplicationViewOperation *,SHELL_POSITIONER_TYPE,IAppLayout *,IUnknown *);
	long PositionViewWithOptions(IApplicationView *,tagRECT,TRY_POSITION_VIEW_FLAGS,IApplicationViewOperation *,PositionScenario,IImmersiveMonitor *,int,Windows::UI::WindowManagement::BoundsPreference,int);
	long PositionViewWithOptions(IApplicationView *,tagRECT,TRY_POSITION_VIEW_FLAGS,IImmersiveMonitor *,int,Windows::UI::WindowManagement::BoundsPreference,int);
	long SetActiveTabsOnTabletModeExit(IAppLayout *);
	long TryGetTabGroupForView(IApplicationView *,CDesktopPositioner::TryGetTabGroupForViewOption,IUnknown *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId *);
	long _AdjustSizeForMonitorChange(IImmersiveMonitor *,IImmersiveMonitor *,tagSIZE *,TRY_POSITION_VIEW_FLAGS *);
	long _CalculateTaskbarFlyoutPosition(tagRECT,tagSIZE,tagRECT *);
	long _CloseView(IApplicationView *);
	long _ConvertScreenRectToWorkAreaRect(tagRECT const &,tagRECT *);
	long _ConvertWorkAreaRectToScreenRect(tagRECT const &,tagRECT *);
	long _CreateTitlebarConfiguration(IApplicationView *,IApplicationViewTitlebarConfiguration * *);
	long _FixPosition(PositionScenario,IApplicationViewPosition *,IApplicationViewPosition * *);
	long _FixPositionForLayout(IApplicationView *,IAppLayout *,IApplicationViewPosition *,IApplicationViewPosition * *);
	long _FixRectForWorkArea(PositionScenario,tagRECT const &,IImmersiveMonitor *,tagRECT *);
	long _GetDefaultRect(tagRECT const *,DefaultSizeOptions,tagRECT *);
	long _GetDefaultSizeForRect(DefaultSizeOptions,tagRECT const *,tagSIZE *);
	long _GetEdgeUIPositionForMonitor(HMONITOR__ * const,tagRECT *,EDGEUI_TRAYSTUCKPLACE *);
	long _GetFullPositionSnapshot(IApplicationView *,IOcclusionBasedApplicationViewPosition * *);
	long _GetLaunchPosition(IApplicationView *,IApplicationViewPosition * *);
	long _GetLaunchPositionForPeoplePane(IApplicationView *,IApplicationViewPosition * *);
	long _GetMonitorFromPoint(tagPOINT const *,IImmersiveMonitor * *);
	long _GetMonitorFromRect(tagRECT const *,IImmersiveMonitor * *);
	long _GetOffsetPosition(tagRECT const *,IApplicationViewPosition * *);
	long _GetOffsetRectFromSize(tagRECT const *,tagRECT const *,tagSIZE,tagRECT *);
	long _GetPreferredPosition(IApplicationView *,tagRECT const *,IApplicationViewPosition * *);
	long _GetRectAndFlagsFromPresentationArgs(IPresentationRequestedArgs *,tagRECT,tagRECT *,TRY_POSITION_VIEW_FLAGS *,IImmersiveMonitor * *);
	long _GetRestorePosition(IApplicationView *,PositionerPropertySetHelpers::ViewSizePreferences *,IApplicationViewPosition * *);
	long _GetWorkAreaFromRect(tagRECT const *,tagRECT *);
	long _IsViewManaged(IApplicationView *,bool *);
	long _MinimizeView(IApplicationView *);
	long _MoveRectToMonitor(IImmersiveMonitor *,tagRECT,tagRECT *);
	long _OnSizeConstraintsChanged(IApplicationView *);
	long _OnViewGainedForeground(IApplicationView *);
	long _PersistPosition(IApplicationView *);
	long _RestoreView(IApplicationView *);
	long _UpdateViewTabState(IApplicationView *);
public:
	CDesktopPositioner();
	long RuntimeClassInitialize();
	virtual int ShouldBlockActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleFrameworkViewTypeChange(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual int ShouldHandlePresentationRequest(IApplicationView *,IInspectable *);
	virtual long ControlGainedForActivation(IApplicationView *,SHELL_POSITIONER_TYPE,IUnknown *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long DragCompleted(IApplicationView *,tagPOINT);
	virtual long FrameworkViewTypeChangedForView(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual long GetChromeConfigurationForView(IApplicationView *,int *,IApplicationViewTitlebarConfiguration * *);
	virtual long GetPosition(HWND__ *,_GUID const &,void * *);
	virtual long HandleRecoveryForView(IApplicationView *);
	virtual long HandleSwitchToView(IApplicationView *);
	virtual long InitializePosition(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,IApplicationView *);
	virtual long InitializePositionWithShowCommand(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,unsigned long *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnViewClosing(IApplicationView *,int);
	virtual long PerformDelayedInitialization();
	virtual long PositionView(IApplicationView *,tagRECT,TRY_POSITION_VIEW_FLAGS);
	virtual long PresentationChangedForView(IApplicationView *,IInspectable *);
	virtual long ResizeView(IApplicationView *,tagSIZE,tagSIZE);
	virtual long SetViewStateForDesiredAppState(IApplicationView *,APPLICATION_DESIRED_STATE);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TabSwitchRequested(_GUID const &,IApplicationView *,IApplicationView *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long ViewChangedTabGroup(IApplicationView *,_GUID const &,VIEW_CHANGED_TAB_GROUP_FLAGS);
	virtual void ControlGained(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown *,IPresentationRequestedArgs *);
	virtual void ControlLost(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown * *);
	virtual ~CDesktopPositioner();
};

struct CDesktopVisibilityChangeHelper
{
	CDesktopVisibilityChangeHelper(IDesktopVisibilityChangesNotification *);
	virtual long OnDesktopVisibilityChanged(IImmersiveMonitor *,int);
};

class CDragVisual
{
	__int64 _WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	bool _ShouldHandleInput(unsigned int);
	bool _UpdateThumbnailRect(DragVisualMode);
	bool _UpdateThumbnailRect(Geometry::CRect const &);
	long _CreateTempAppVisuals(ITemporaryAppVisualArray * *);
	long _Initialize(DragVisualMode);
	long _OnContinueDrag(unsigned int,tagPOINT);
	long _OnFinishDrag(unsigned int,tagPOINT);
	long _OnMouseHover(tagPOINT);
	long _OnPressDown(tagPOINT);
	long _OnStartDrag(unsigned int,tagPOINT);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static bool s_IsPointerIdTouch(unsigned int);
	tagPOINT _GetScaledPoint(CDragVisual::ScaledPointType);
	void _CancelPlacement();
	void _CheckDragStartBounds();
	void _ClearVisualFeedback();
	void _CommitPlacement();
	void _OnAppWindowSizeChanged(void *);
	void _OnCancelDrag();
	void _OnCaptureChanged();
	void _OnClick(tagPOINT);
	void _OnKeyDown(unsigned __int64);
	void _OnLButtonDown(tagPOINT);
	void _OnLButtonUp(tagPOINT);
	void _OnMouseMove(tagPOINT);
	void _OnPointerCaptureChanged(unsigned int);
	void _OnPointerDown(unsigned int,tagPOINT);
	void _OnPointerUpdate(unsigned int,tagPOINT);
	void _RegisterWindowClass();
	void _SetText(unsigned short const *);
	void _SetWindowRgn();
	void _Show();
	void _TrackMouseLeave(bool);
	void _UpdateThumbnail(DCompThumbnailAnimation,DirtyBitFlags,UpdateThumbnailOptions,IDCompBatchAnimationCallback *);
protected:
	virtual ~CDragVisual();
public:
	CDragVisual(IDragVisualHost *);
	static long CreateInstance(DragVisualMode,IDragVisualHost *,_GUID const &,void * *);
	virtual DragVisualMode GetInitialMode();
	virtual DragVisualMode GetMode();
	virtual Geometry::CRect GetRect();
	virtual HWND__ * GetTargetHWND();
	virtual HWND__ * GetVisualHWND();
	virtual HWND__ * GetWindow();
	virtual TEMPORARY_APP_VISUAL_TYPE GetVisualType();
	virtual bool HasMoved();
	virtual int GetDragOffsetAmount();
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long GetAccessibleObject(_GUID const &,void * *);
	virtual long GetAppId(unsigned short * *);
	virtual long GetApplication(IImmersiveApplication * *);
	virtual long GetSimpleTempAppVisualArray(ITemporaryAppVisualArray * *);
	virtual long GetView(_GUID const &,void * *);
	virtual long InitThumbnailFactory();
	virtual long PrepareForExitAnimation(ITemporaryAppVisualArray * *);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long SetApp(IImmersiveApplication *);
	virtual long SetAppLayout(IAppLayout *,tagRECT *);
	virtual long SetSite(IUnknown *);
	virtual void BringToFront();
	virtual void Freeze();
	virtual void GetVisualRect(APP_LAYOUT_RECT_TYPE,tagRECT *);
	virtual void Hide(DragVisualHideFlags,HWND__ *);
	virtual void SetDragStartPosition(tagPOINT);
	virtual void SetDragStartRect(tagRECT);
	virtual void SetGrowFeedback(DragVisualSizeFeedback,GrowFeedbackFlags,IDCompBatchAnimationCallback *);
	virtual void SetIsAccessible();
	virtual void SetMode(DragVisualMode);
	virtual void SetPosition(tagPOINT,bool);
	virtual void Show();
	virtual void ShowFocus();
	virtual void ShowPlaceModeEntryAnimation();
	virtual void TargetMonitorChanged(IImmersiveMonitor *);
};

class CDragVisualAcc
{
	virtual ~CDragVisualAcc();
	void _DismissPlaceModeButtons();
	void _RaiseDropEffectChangeEvent();
public:
	CDragVisualAcc(IDragVisual *);
	virtual long ElementProviderFromPoint(double,double,IRawElementProviderFragment * *);
	virtual long GetEmbeddedFragmentRoots(tagSAFEARRAY * *);
	virtual long GetFocus(IRawElementProviderFragment * *);
	virtual long GetGrabbedItems(tagSAFEARRAY * *);
	virtual long GetPatternProvider(int,IUnknown * *);
	virtual long GetPropertyValue(int,tagVARIANT *);
	virtual long GetRuntimeId(tagSAFEARRAY * *);
	virtual long Navigate(NavigateDirection,IRawElementProviderFragment * *);
	virtual long SetFocus();
	virtual long get_BoundingRectangle(UiaRect *);
	virtual long get_DropEffect(unsigned short * *);
	virtual long get_DropEffects(tagSAFEARRAY * *);
	virtual long get_FragmentRoot(IRawElementProviderFragmentRoot * *);
	virtual long get_HostRawElementProvider(IRawElementProviderSimple * *);
	virtual long get_IsGrabbed(int *);
	virtual long get_ProviderOptions(ProviderOptions *);
	virtual void Disconnect();
	virtual void DismissPlaceMode();
	virtual void EndDrag(bool);
	virtual void GetHashTable(CSimpleHashTable<IApplicationView *,unsigned short const *,CDefaultHashPolicy<IApplicationView *>,CDefaultKeyCompare<IApplicationView *>,CDefaultResizePolicy,CDefaultRehashPolicy> * *);
	virtual void GetPlaceModeButton(unsigned int,IRawElementProviderFragment * *);
	virtual void InitPlaceMode(IApplicationView *,IAppLayout *);
	virtual void OnInvoke(tagPOINT);
	virtual void OnPlaceModeMoveToInitialPosition();
	virtual void PlaceModeMouseOver(tagPOINT);
	virtual void SetDropEffect(unsigned short const *);
	virtual void ShowFocus();
	virtual void StartDrag();
	virtual void UpdateBoundingRect();
	virtual void UpdateItem(IUnknown *);
};

class CDropFeedback
{
	__int64 _WndProc(unsigned int,unsigned __int64,__int64);
	long _FindItem(unsigned long,IDropFeedbackItem * *);
	long _RegisterItem(IDropFeedbackItem *,IDCompBatchAnimationCallback *);
	long _UpdateItem(IDropFeedbackItem *,IDCompBatchAnimationCallback *);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _RegisterWindowClass();
	void _SetThreadPriority(bool);
	void _UpdateAutoGutters();
public:
	CDropFeedback();
	long RuntimeClassInitialize(IUnknown *,LAYOUT_ENVIRONMENT_DETAILS const &,DROP_FEEDBACK_INIT_FLAGS);
	virtual HWND__ * GetTargetHWND();
	virtual HWND__ * GetVisualHWND();
	virtual HWND__ * GetWindow();
	virtual TEMPORARY_APP_VISUAL_TYPE GetVisualType();
	virtual bool ContainsApp(IImmersiveApplication *);
	virtual bool IsFinalized();
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long Freeze(unsigned long);
	virtual long GetApplication(IImmersiveApplication * *);
	virtual long GetSimpleTempAppVisualArray(ITemporaryAppVisualArray * *);
	virtual long GetView(_GUID const &,void * *);
	virtual long PrepareForExitAnimation(IDropFeedbackArray * *);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long SetOverallZoom(bool);
	virtual long SetSite(IUnknown *);
	virtual long SetZOrder(unsigned long,unsigned long *,bool);
	virtual long Show();
	virtual long UpdateDropFeedback(IDropFeedbackArray *,IDCompBatchAnimationCallback *);
	virtual void FreezeAll();
	virtual void GetVisualRect(APP_LAYOUT_RECT_TYPE,tagRECT *);
	virtual void SetAccessibleObject(IRawElementProviderSimple *);
	virtual void SetInputHandler(IDropFeedbackInputHandler *);
	virtual ~CDropFeedback();
};

class CDropFeedbackItem
{
	DCompThumbnailAnimation _GetAnimationType();
	long _RegisterAutoGutter(AutoGutterSide,Geometry::CRect const &);
	long _Update(DCompThumbnailAnimation,IDCompBatchAnimationCallback *);
	void _PaintAutoGutter(IDCompThumbnail *,AutoGutterSide);
	void _UpdateAutoGutter(unsigned long,Geometry::CRect const &,DCompThumbnailAnimation);
	void _UpdateAutoGutters(tagRECT const *,DCompThumbnailAnimation);
	void _ZoomRect(CDropFeedbackItem::ZoomRectType,tagRECT *);
public:
	CDropFeedbackItem();
	long RuntimeClassInitialize(unsigned long,DROP_FEEDBACK_ACTION,IApplicationView *,DROP_FEEDBACK_TYPE,tagRECT const *,tagRECT const *,double,DROP_FEEDBACK_FLAGS);
	virtual DROP_FEEDBACK_ACTION GetAction();
	virtual DROP_FEEDBACK_FLAGS GetFlags();
	virtual DROP_FEEDBACK_TYPE GetType();
	virtual HWND__ * GetTargetHWND();
	virtual HWND__ * GetVisualHWND();
	virtual TEMPORARY_APP_VISUAL_TYPE GetVisualType();
	virtual double GetOpacity();
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long Freeze();
	virtual long GetApplication(IImmersiveApplication * *);
	virtual long GetThumbnail(IDCompThumbnail * *);
	virtual long GetView(_GUID const &,void * *);
	virtual long RegisterThumbnail(IUnknown *,IUnknown *,HWND__ *,LAYOUT_ENVIRONMENT_DETAILS const *);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long SetZOrder(IDropFeedbackItem *,bool);
	virtual long Update(IDCompBatchAnimationCallback *);
	virtual long UpdateGutters();
	virtual unsigned long GetID();
	virtual void GetRect(tagRECT *);
	virtual void GetVisualRect(APP_LAYOUT_RECT_TYPE,tagRECT *);
	virtual void SetDropfeedbackZoom(float);
	virtual void SetFlags(DROP_FEEDBACK_FLAGS);
	virtual void SetOpacity(double);
	virtual void SetRect(tagRECT const *);
	virtual void Show();
};

struct CDropFeedbackItemComparator
{
	int Compare(Microsoft::WRL::ComPtr<IDropFeedbackItem>,Microsoft::WRL::ComPtr<IDropFeedbackItem>);
};

class CDropFeedbackList
{
	long _AddUpdate(IDropFeedbackItem *);
public:
	virtual long AddItem(IDropFeedbackItem *);
	virtual long Cleanup();
	virtual long Close(unsigned long);
	virtual long DragFadeIn(unsigned long,tagRECT const *,DROP_FEEDBACK_FLAGS);
	virtual long DragFadeOut(unsigned long,DROP_FEEDBACK_FLAGS);
	virtual long Fade(unsigned long,float,DROP_FEEDBACK_FLAGS);
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long Register(unsigned long,DROP_FEEDBACK_TYPE,tagRECT const *);
	virtual long RegisterApp(unsigned long,IImmersiveApplication *,tagRECT const *,tagRECT const *);
	virtual long RegisterView(unsigned long,IApplicationView *,tagRECT const *);
	virtual long RemoveAt(unsigned int);
	virtual long Slide(unsigned long,DROP_FEEDBACK_TYPE,tagRECT const *,DROP_FEEDBACK_FLAGS);
	virtual long Sort();
	virtual long Zoom(unsigned long,tagRECT const *,DROP_FEEDBACK_FLAGS);
};

struct CDuiRefThread
{
	virtual long KeepDuiInitializedForThread(unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEnumerableObjectCollection
{
protected:
	long Clone(_GUID const &,void * *);
	long InitializeClone(CEnumerableObjectCollection *);
public:
	static long CreateInstance(int,_GUID const &,void * *);
	virtual long AddFromArray(IObjectArray *);
	virtual long AddObject(IUnknown *);
	virtual long Clear();
	virtual long Clone(IEnumObjects * *);
	virtual long Clone(IEnumUnknown * *);
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long Next(unsigned long,IUnknown * *,unsigned long *);
	virtual long Next(unsigned long,_GUID const &,void * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveObjectAt(unsigned int);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CExperienceManagerAnimationHelper
{
	class DummyWindow
	{
		virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	public:
		DummyWindow();
		long RuntimeClassInitialize(IDWMStoryboardListener *);
		virtual long ContextSensitiveHelp(int);
		virtual long GetWindow(HWND__ * *);
	};

	long BeginWindowAnimation(HWND__ *,DWMTRANSITION_TARGET,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *);
public:
	long Begin(IApplicationFrameWrapper *,DWMTRANSITION_TARGET,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *);
	long Begin(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,DWMTRANSITION_TARGET);
	long Begin(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,DWMTRANSITION_TARGET,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *);
	long End();
	long RegisterForStoryboardEvents(IDWMStoryboardListener *);
	~CExperienceManagerAnimationHelper();
};

class CFallbackWindow
{
	long _GetVisibleApp(IImmersiveApplication * *);
	void _SizeWindow(IImmersiveMonitor *);
protected:
	virtual __int64 v_OnMessage(unsigned int,unsigned __int64,__int64,bool *);
public:
	CFallbackWindow();
	long RuntimeClassInitialize();
	virtual bool IsFallbackWindow(HWND__ *);
	virtual long Activate();
	virtual long CompleteInitialization(IImmersiveMonitorManager *,IImmersiveShellHookService *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetPatternProvider(int,IUnknown * *);
	virtual long GetPropertyValue(int,tagVARIANT *);
	virtual long Invoke();
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long MoveToMonitor(IImmersiveMonitor *);
	virtual long SetFallbackForeground(FALLBACK_FOREGROUND_USAGE);
	virtual long get_HostRawElementProvider(IRawElementProviderSimple * *);
	virtual long get_ProviderOptions(ProviderOptions *);
	virtual void Uninitialize(IImmersiveMonitorManager *);
};

class CFrameApplicationPresentation
{
	struct FrameSystemVisual
	{
		void ShowSplashScreen(SplashScreenUnsuppressionReason);
	};

	struct PresentedWindow
	{
		void SetPresentingWindow(CFrameApplicationPresentation *,ITaskWindow *,HWND__ *);
	};

	struct PresentedWindowChangeHandler
	{
		PresentedWindowChangeHandler(CFrameApplicationPresentation *);
		~PresentedWindowChangeHandler();
	};

	bool _ShouldUpdateForHwnd(HWND__ *);
	long _ComputeApplicationViewData(tagRECT const &,APPLICATION_VIEW_DATA *);
	long _ComputeDesiredApplicationRect(tagRECT *);
	long _QueueUnsuppressSplashScreenAfterTimeout();
	long _UpdateMinSizePreferences(HWND__ *);
	tagRECT _ComputePillarBoxedApplicationRect(tagRECT);
	void _DestroyFrameIfPossible();
	void _SetFrameCloakSerialized(__MIDL___MIDL_itf_privilegedoperations_0000_0002_0001);
	void _SuppressSplashScreenIfAppropriate();
public:
	CFrameApplicationPresentation();
	long RuntimeClassInitialize(unsigned short const *,unsigned long,bool,IIAMServiceProvider *,IImmersiveApplicationInternal *);
	virtual FRAME_SYSTEM_VISUAL GetSystemVisual();
	virtual Microsoft::WRL::ComPtr<ITaskWindow> GetPresentedWindow();
	virtual bool IsPresentationLayerWindow(HWND__ *);
	virtual bool IsPresentationMinimized();
	virtual bool IsTitleBarDrawnByApp();
	virtual bool IsVisible();
	virtual long Destroy();
	virtual long EnsureSizeConstraints();
	virtual long GetDesiredApplicationRect(tagRECT *);
	virtual long GetFrame(IApplicationFrameProxy * *);
	virtual long Hide();
	virtual long InvokeActionsMenu();
	virtual long IsPillarBoxed(bool *);
	virtual long OnMinSizePreferencesUpdated(HWND__ *);
	virtual long PresentWindow(ITaskWindow *);
	virtual long QueueAsyncCallback(IAsyncCallback *);
	virtual long ReconcileApplicationViewState(APPLICATION_VIEW_DATA_UPDATE *);
	virtual long SetAppChromeOptions(APPLICATION_FRAME_CHROME_CHANGE_DATA);
	virtual long SetAppChromePolicy(APP_CHROME_CONFIGURATION_POLICY);
	virtual long SetAppTitlebarConfiguration(AppTitlebarConfiguration const &);
	virtual long SetBackgroundColor(unsigned long);
	virtual long SetBand(ZBID);
	virtual long SetChromeOptions(APPLICATION_FRAME_CHROME_CHANGE_DATA);
	virtual long SetDefaultMinimumSize(tagSIZE const *);
	virtual long SetForceActiveWindowAppearance(bool);
	virtual long SetMinimumSize(tagSIZE const *);
	virtual long SetPosition(IApplicationViewPosition *);
	virtual long SetPreferredAspectRatioHint(tagSIZE);
	virtual long SetSizeConstraintOverridesLogical(tagSIZE,tagSIZE);
	virtual long SetSizeConstraintOverridesPhysical(tagSIZE,tagSIZE);
	virtual long SetSystemVisual(FRAME_SYSTEM_VISUAL);
	virtual long SetSystemVisualAnimation(FRAME_SYSTEM_VISUAL_ANIMATION);
	virtual long SetTitlebarConfiguration(IApplicationViewTitlebarConfiguration *);
	virtual long Show();
	virtual long SynchronizeWindowTitleAndButtons(IImmersiveApplication *);
	virtual long UnpresentWindow();
	virtual long UpdateSizeConstraints();
	virtual long WaitForPendingOperations();
	virtual void DropForeground(DropForegroundOptions);
	virtual void SetAppRequestsSplashScreenSuppression(bool);
};

namespace CFramePresentationTelemetry
{
	class Initialization
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~Initialization();
	};

	class PresentWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~PresentWindow();
	};

	class ReconcileApplicationViewState
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		static ReconcileApplicationViewState Start<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &>(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
		void StartActivity(unsigned short const *);
		~ReconcileApplicationViewState();
	};

	class SetSystemVisual
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~SetSystemVisual();
	};

	class SplashScreenSuppressed
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		SplashScreenSuppressed TransferToCurrentThread();
		void StartActivity(unsigned short const *,HWND__ *,unsigned long,unsigned long);
		void Stop(unsigned long);
		~SplashScreenSuppressed();
	};

	class UnpresentWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,HWND__ *);
		~UnpresentWindow();
	};

};

class CFullScreenManager
{
	long _EvictAppsOnMonitor(IImmersiveMonitor *);
	void _FireFullScreenModeChangedEvent(int);
public:
	CFullScreenManager();
	long RuntimeClassInitialize();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long EnterFullScreen(IImmersiveApplication *,FULL_SCREEN_MODE,FULL_SCREEN_ENTER_REASON);
	virtual long EnterFullScreenForView(IApplicationView *,FULL_SCREEN_MODE,FULL_SCREEN_ENTER_REASON);
	virtual long ExitFullScreen(IImmersiveApplication *,FULL_SCREEN_EXIT_REASON);
	virtual long ExitFullScreenForView(IApplicationView *,FULL_SCREEN_EXIT_REASON);
	virtual long FullScreenVisibilityChanged(int);
	virtual long HasFullScreenApp(IImmersiveMonitor *,int *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long IsFullScreen(IImmersiveApplication *,int *);
	virtual long IsViewFullScreen(IApplicationView *,int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long Register(IFullScreenNotification *,unsigned long *);
	virtual long RequestPrivilegedPresentationOperations(IPrivilegedOperationsConsumer *);
	virtual long SetIsLightweightFullScreenModeAllowed(IImmersiveApplication *,int);
	virtual long SetSystemOverlaysMode(IImmersiveApplication *,FULL_SCREEN_OVERLAYS);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long Unregister(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CFullScreenManager();
};

class CGITCallbackArray
{
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
public:
	long RuntimeClassInitialize(CCoSimpleArray<Microsoft::WRL::ComPtr<IGITCookieObject>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IGITCookieObject> > > const &);
};

struct CGITCookieObject
{
	CGITCookieObject();
	long RuntimeClassInitialize(IGlobalInterfaceTable *,IUnknown *);
	virtual long GetInterface(_GUID const &,void * *);
	virtual unsigned long GetCookie();
	virtual ~CGITCookieObject();
};

struct CGITRegistrationList
{
	CGITRegistrationList();
	long GetCallbackArray(IObjectArray * *);
	long Register(IUnknown *,unsigned long *);
	long Unregister(unsigned long);
	~CGITRegistrationList();
};

class CGlyphButtonElement
{
	long _CreateBackground(Geometry::CSize const &);
	void _RenderBackground();
protected:
	virtual bool v_InvokeElement();
	virtual long v_InitAccessibleObject(WeakReference::IWeakReference *,_GUID const &,void * *);
	virtual long v_SetRenderMode(CMultitaskingViewButtonElement::ButtonRenderMode);
	virtual void v_LayoutChildren();
public:
	CGlyphButtonElement();
	long RuntimeClassInitialize(unsigned short,GlyphButtonFlags,GlyphButtonMetrics const &,unsigned int,WeakReference::IWeakReference *,IDWriteTextFormat *,ISwitchThumbnailFactory *);
	virtual bool IsEnabled();
	virtual long GetAccessibleName(unsigned short * *);
	virtual void Repaint();
	virtual void SetEnabled(bool);
};

class CGridTelemetryController
{
	long _GetIndexOfItem(ISwitchItem *,unsigned __int64 *);
public:
	virtual DragEffects IsDraggable(ISwitchItem *);
	virtual bool CanItemMoveDesktops(ISwitchItem *);
	virtual bool IsContextMenuEnabled(ISwitchItem *);
	virtual long GetContextMenu(ISwitchItem *,HMENU__ * *);
	virtual void CloseSwitchItem(ISwitchItem *);
	virtual void ContextMenuInvoked(ISwitchItem *,unsigned int);
	virtual void DragSwitchItem(ISwitchItem *,IExternalDragCallback *);
	virtual void InvokeSwitchItem(ISwitchItem *);
	virtual void MoveItemToDesktop(ISwitchItem *,IVirtualDesktopItem *);
	virtual void MoveItemToNewDesktop(ISwitchItem *);
	virtual void SwitchItemDragEnded();
	virtual void SwitchItemDragStarted(ISwitchItem *);
};

struct CIAMGlobals
{
	CIAMGlobals();
	bool IsCalledOnIAMThread();
	~CIAMGlobals();
};

class CIAMSpecialWindowBase
{
	static __int64 s_SpecialMsgWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
protected:
	long InitializeSpecialWindow(SPECIAL_WINDOW_INIT_DATA const *);
	virtual __int64 v_OnMessage(unsigned int,unsigned __int64,__int64,bool *);
public:
	virtual HWND__ * GetWindow();
	virtual void StartProcessingActivation(IImmersiveShellHookService *);
	virtual ~CIAMSpecialWindowBase();
};

struct CIconLoader
{
	virtual long LoadIconW(IApplicationView *,tagSIZE,tagSIZE,unsigned int,IApplicationViewIconLoaderNotifications *);
};

struct CIconLoaderInternal
{
	CIconLoaderInternal();
	long RuntimeClassInitialize(IApplicationViewIconLoader *);
	virtual long LoadIconW(IApplicationView *,tagSIZE const &,tagSIZE const &,unsigned int,ISwitchItem *);
};

struct CIconLoadingFunctions
{
	virtual HICON__ * LoadIconW(HINSTANCE__ *,unsigned short const *);
	virtual int SendMessageCallbackW(HWND__ *,unsigned int,unsigned __int64,__int64,void (*)(HWND__ *,unsigned int,unsigned __int64,__int64),unsigned __int64);
	virtual long ConvertIconToBitmap(HICON__ *,tagSIZE const &,HBITMAP__ * *);
	virtual unsigned __int64 GetClassLongPtrW(HWND__ *,int);
};

class CImmersiveApp
{
	class CImmersiveWindowCollection
	{
		struct CAppLocalCache
		{
			bool HasNewPositionInfo();
		};

		long _FindTaskWindow(CTaskWindowFinder const &,unsigned __int64 *);
		long _FindWindow(HWND__ *,unsigned __int64 *);
		long _GetWindow(CTaskWindowFinder const &,ITaskWindow * *,unsigned __int64 *);
		long _InsertWindow(ITaskWindow *,unsigned __int64);
		long _SetApplicationWindow(unsigned __int64);
		long _UpdateZOrderActivation(unsigned __int64,bool);
		void _AddGhostStatus(GHOST_STATUS);
		void _CleanupPendingPresentedWindow();
		void _HandleGhostStatusChange(GHOST_STATUS,GHOST_STATUS);
		void _OnDeferredGhostBitsClear();
		void _RemoveGhostStatus(GHOST_STATUS);
		void _RemoveWindow(unsigned __int64);
		void _SetGhostStatus(GHOST_STATUS);
		void _SetWindowVisibilityOptions(unsigned long);
	public:
		CImmersiveWindowCollection(CImmersiveApp *);
		CImmersiveWindowCollection::SEND_DEFERRED_INFO_RESULTS SendDeferredInfoToAllWindows();
		HWND__ * GetApplicationWindow();
		HWND__ * GetApplicationWindowForActivation();
		UPDATE_APP_RESULT UpdateWindowsWithNewInfo(APPLICATION_VIEW_DATA_UPDATE const * const,POSITION_APP_WINDOWS);
		ZBID GetApplicationBand();
		bool CanRemoveGhost();
		bool CanShowPendingApplicationWindow();
		bool IsApplicationWindowGhost();
		bool IsApplicationWindowVisible();
		bool IsPresentationInProgress();
		long AddConsecutiveView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,WindowAdditionReason,ITaskWindow *);
		long AddFirstView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,ITaskWindow *);
		long AddOrphanedWindow(HWND__ *);
		long ClearVisibilityOverride(VisibilityOverrideSource);
		long DeleteWindow(CTaskWindowFinder const &,bool *,ITaskWindow * *);
		long GetIsOccluded(bool *);
		long GetTitle(unsigned short * *);
		long HideFrame();
		long Initialize(IIAMServiceProvider *);
		long OnFramePositionChanged();
		long PresentWindowInFrame(ITaskWindow *);
		long ProcessActivation(HWND__ *,bool,bool *);
		long ReconcileApplicationViewState(APPLICATION_VIEW_DATA_UPDATE *);
		long ReconcileVisibility();
		long SetApplicationWindow(HWND__ *);
		long SetDisplayRegionId(unsigned int);
		long SetPendingApplicationWindow(HWND__ *,APP_TRANSITION_TYPE);
		long SetVisibilityOverride(ViewVisibilityState,VisibilityOverrideSource);
		void EnsurePositionOffsetAsync();
		void GhostAnimationWaitCompleted();
		void HideVisibleAppWindow(PROCESS_HIDE_OPTION_HOW);
		void OnActivationRequested();
		void PrepareApplicationForLaunch(ITaskWindow *);
		void QueueAyncPositionReconciliation();
		void QueueAyncVisibilityReconciliation();
		void RemoveSystemVisual(bool);
		void SchedulePresentedWindowChanged();
		void SendVisibilityChanged(__int64);
		void ShowSystemVisual(__MIDL___MIDL_itf_shpriv_core_0000_0321_0001,GHOST_STATUS);
		~CImmersiveWindowCollection();
	};

	class CloakType
	{
		void _PersistFlagsToPresentationLayer(IApplicationPresentationLayer *);
	public:
		void RecoverFromPresentationLayer(IApplicationPresentationLayer *);
	};

	CImmersiveApp::HIDE_WINDOW_RESULT _HideApplication(CImmersiveApp::PROCESS_HIDE_OPTION_HOW);
	CImmersiveApp::UPDATE_APP_RESULT _UpdateApplication(IApplicationViewPosition *,APPLICATION_VIEW_DATA_UPDATE const * const,POSITION_APP_WINDOWS);
	long _ProcessNewView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,bool,WindowAdditionReason,ITaskWindow *,bool *);
	long _SetApplicationWindowSynch(HWND__ *,CImmersiveApp::SET_APP_WINDOW_SYNC_OPTION,APP_TRANSITION_TYPE);
	long _ValidateApplicationState(CImmersiveApp::ValidateApplicationStateOption);
	void _ClearForegroundBoostHintedProcess();
	void _QueuePresentationChangeNotification(IMMERSIVE_APPLICATION_PRESENTATION_CHANGE);
	void _RemoveFromChain();
	void _ScheduleApplicationNotifications(APP_CHANGE_INFO const * const,unsigned __int64);
	void _SetApplicationForegroundPriority(CImmersiveApp::APP_FOREGROUND_PRIORITY);
	void _SetPos_HideApplication(IApplicationViewPosition *,APPLICATION_VIEW_DATA_UPDATE const * const,POSITION_APP_WINDOWS,CImmersiveApp::PROCESS_HIDE_OPTION_HOW);
	void _SetPos_ShowApplication(IApplicationViewPosition *,APPLICATION_VIEW_DATA_UPDATE const * const,POSITION_APP_WINDOWS,bool);
	void _SetProcessForegroundPriority(CImmersiveApp::APP_FOREGROUND_PRIORITY,void *,unsigned long,HWND__ *);
	void _UpdateAppStateAndSendNotifications();
	void _UpdatePresentedWindow();
	void _UpdateWindowTitleAndButtons();
protected:
	virtual char const * v_GetClassName();
	virtual ~CImmersiveApp();
public:
	CImmersiveApp();
	long RuntimeClassInitialize(unsigned short const *,unsigned short const *,unsigned long,IImmersiveMonitor *,PER_APPLICATION_DATA *,IIAMServiceProvider *,unsigned __int64);
	static bool s_IsVisibilityOverrideOn(CImmersiveApp *);
	virtual FRAMEWORK_VIEW_TYPE GetFrameworkViewTypeInternal();
	virtual HWND__ * GetNativeWindow();
	virtual IMM_APP_STATE GetApplicationState();
	virtual SPLASHSCREEN_ORIENTATION_PREFERENCE GetManifestedOrientationPreference();
	virtual WINDOW_DESTROYED_RESULT HandleDestruction(CTaskWindowFinder const &,ITaskWindow * *);
	virtual ZBID GetZbid();
	virtual _FILETIME GetActivationTime();
	virtual bool BelongsToPackageInternal(unsigned short const *,bool);
	virtual bool CheckPendingTermination();
	virtual bool ContainsTaskWindow();
	virtual bool GetShouldShowTitleBarBackButton();
	virtual bool IsApplicationEnsured();
	virtual bool IsApplicationForeground();
	virtual bool IsApplicationInteractive();
	virtual bool IsApplicationOrphaned();
	virtual bool IsApplicationRunning();
	virtual bool IsApplicationVisible();
	virtual bool IsApplicationWindowStronglyNamedInternal();
	virtual bool IsSeparateGlomForSameApp(IImmersiveApplicationInternal *);
	virtual bool IsViewGhosted();
	virtual bool MatchByWindow(CTaskWindowFinder const &,MatchByWindowFlags);
	virtual bool ReportVisibilityOverride(WINDOW_PRESENTED_OVERRIDE,SESSION_IDLE_STATE,OVERRIDE_IMMUNITY_CHANGE,ReportVisibilityOverrideOptions);
	virtual int IsApplicationWindowPresented();
	virtual int IsQuirkEnabled(__MIDL___MIDL_itf_shpriv_core_0000_0321_0005);
	virtual int ShouldShowBackButton();
	virtual long AddBehaviorFlags(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003);
	virtual long AddGhostStatusFlag(__MIDL___MIDL_itf_shpriv_core_0000_0321_0004);
	virtual long AppendChainLink(Windows::Internal::Shell::Chaining::IChainLink *);
	virtual long BelongsToPackage(unsigned short const *,int *);
	virtual long ContainsStronglyNamedWindow(int *);
	virtual long DropForeground(DropForegroundOptions);
	virtual long EnableSystemVisualAnimation(int);
	virtual long GetApplicationId(unsigned short * *);
	virtual long GetBehaviorFlags(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003 *);
	virtual long GetBehaviorFlagsInternal(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003 *);
	virtual long GetCanHandleCloseRequest(int *);
	virtual long GetDestinationInformation(IImmersiveApplicationWindow * *,tagRECT *);
	virtual long GetDestinationInformationInternal(HWND__ * *,tagRECT *);
	virtual long GetDisplayName(unsigned short * *);
	virtual long GetFrameInternal(IApplicationFrameProxy * *);
	virtual long GetFrameworkViewType(FRAMEWORK_VIEW_TYPE *);
	virtual long GetHostId(unsigned __int64 *);
	virtual long GetIsOccluded(int *);
	virtual long GetMonitor(IImmersiveMonitor * *);
	virtual long GetMonitorInternal(IImmersiveMonitor * *);
	virtual long GetOrientationPreferences(HWND__ * *,ORIENTATION_PREFERENCE *);
	virtual long GetPackageId(int,unsigned short * *);
	virtual long GetPersistingStateName(unsigned short * *);
	virtual long GetPresentationLayer(IApplicationPresentationLayer * *);
	virtual long GetRect(tagRECT *);
	virtual long GetRectInternal(tagRECT *);
	virtual long GetSizeConstraintOverridesLogical(tagSIZE *,tagSIZE *);
	virtual long GetSizeConstraintOverridesPhysical(tagSIZE *,tagSIZE *);
	virtual long GetTaskWindow(CTaskWindowFinder const &,ITaskWindow * *);
	virtual long GetTimestamps(tagIMMAPPTIMESTAMPS *);
	virtual long GetTitle(unsigned short * *);
	virtual long GetTitleInternal(unsigned short * *);
	virtual long GetUniqueId(unsigned short * *);
	virtual long GetViewData(IMMAPP_APPLICATION_VIEW_DATA *);
	virtual long GetViewDataInternal(IMMAPP_APPLICATION_VIEW_DATA *);
	virtual long GetWindowAndPrepareForActivation(IAM_ACTIVATE_APPLICATION_OPTION,HWND__ * *);
	virtual long GetWindowingEnvironmentConfigInternal(IWindowingEnvironmentConfig * *);
	virtual long GetWindows(IMMERSIVE_APPLICATION_GET_WINDOWS_FILTER,_GUID const &,void * *);
	virtual long GetWindowsInternal(IMMERSIVE_APPLICATION_GET_WINDOWS_FILTER,_GUID const &,void * *);
	virtual long HandleActivation(HWND__ *,bool);
	virtual long HandleDeactivation(ZBID);
	virtual long HandleInitialViewCreation(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,ITaskWindow *);
	virtual long HandleViewAddition(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,WindowAdditionReason,ITaskWindow *);
	virtual long HandleViewCreation(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,WindowAdditionReason,ITaskWindow *);
	virtual long HandleWindowBecameUnowned(HWND__ *);
	virtual long IncrementGhostAnimationWaitCount(unsigned int);
	virtual long IncrementGhostAnimationWaitCountInternal(unsigned int);
	virtual long InvokeCharms();
	virtual long IsApplicationWindowStronglyNamed(int *);
	virtual long IsEqualByApp(IImmersiveApplication *,int *);
	virtual long IsEqualByAppId(unsigned short const *,int *);
	virtual long IsEqualByHostId(unsigned __int64,int *);
	virtual long IsEqualByHwnd(HWND__ *,int *);
	virtual long IsForeground(int *);
	virtual long IsInteractive(int *);
	virtual long IsRunning(int *);
	virtual long IsServiceAvailable(IMMERSIVE_APPLICATION_QUERY_SERVICE_OPTION,_GUID const &,int *);
	virtual long IsSplashScreenPresented(int *);
	virtual long IsTitleBarDrawnByApp(int *);
	virtual long IsViewForSameApp(IImmersiveApplication *,int *);
	virtual long IsVisible(int *);
	virtual long NotifyApplicationWindows(unsigned int,unsigned __int64,__int64,NOTIFY_IMMERSIVE_APPLICATION_WINDOWS_OPTION,NOTIFY_IMMERSIVE_APPLICATION_WINDOWS_DELIVERY_TYPE);
	virtual long OnFramePositionChanged();
	virtual long OnMinSizePreferencesUpdated(HWND__ *);
	virtual long OnViewReadinessChanged(ITaskWindow *,bool);
	virtual long OpenPropertyStore(IMMAPPPROPERTYSTOREFLAGS,_GUID const &,void * *);
	virtual long OpenPropertyStoreInternal(IMMAPPPROPERTYSTOREFLAGS,_GUID const &,void * *);
	virtual long QueryService(IMMERSIVE_APPLICATION_QUERY_SERVICE_OPTION,unsigned long,_GUID const &,_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long RemoveBehaviorFlags(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003);
	virtual long RemoveGhostStatusFlag(__MIDL___MIDL_itf_shpriv_core_0000_0321_0004);
	virtual long RequestCloseAsync(_GUID const &,void * *);
	virtual long SetApplicationWindow(HWND__ *,SET_APP_REQUEST_ORIGINATOR,APP_TRANSITION_TYPE);
	virtual long SetBehaviorFlagsInternal(bool,__MIDL___MIDL_itf_shpriv_core_0000_0321_0003);
	virtual long SetForceActiveWindowAppearance(int);
	virtual long SetGhostVisualStyle(__MIDL___MIDL_itf_shpriv_core_0000_0321_0001);
	virtual long SetIsOccluded(int);
	virtual long SetMonitor(IImmersiveMonitor *,__MIDL___MIDL_itf_shpriv_core_0000_0321_0002);
	virtual long SetPositionerMonitor(IImmersiveMonitor *);
	virtual long SetPreferredAspectRatioHint(tagSIZE);
	virtual long SetSizeConstraintOverridesLogical(tagSIZE,tagSIZE);
	virtual long SetSizeConstraintOverridesPhysical(tagSIZE,tagSIZE);
	virtual long SetThumbnailPreviewState(IMMAPP_SETTHUMBNAIL_PREVIEW_STATE);
	virtual long SetViewPosition(IApplicationViewPosition *,APPLICATION_VIEW_DATA_UPDATE const *,IApplicationViewTitlebarConfiguration *,SET_IMM_APP_POS,SESSION_IDLE_STATE,void * *,APPLICATION_FRAME_CHROME_CHANGE_DATA *,APPLICATION_VIEW_CLOAK_TYPE,ZBID);
	virtual long SetWindowingEnvironmentConfig(IUnknown *);
	virtual long SetWindowingEnvironmentConfigInternal(IWindowingEnvironmentConfig *);
	virtual long SubscribeForPresentationChanges(IImmersiveApplicationPresentationListener *);
	virtual long TryInvokeBack(IAsyncCallback *);
	virtual long UnsubscribeFromPresentationChanges(IImmersiveApplicationPresentationListener *);
	virtual long UpdateViewEngagementFlags(VIEW_ENGAGEMENT_FLAGS,VIEW_ENGAGEMENT_FLAGS);
	virtual long get_Visible(unsigned char *);
	virtual long get_Window(unsigned int *);
	virtual unsigned int GetDisplayRegionIdInternal();
	virtual unsigned long GetGlomId();
	virtual unsigned long GetPIDForRotation();
	virtual unsigned long GetUniqueCallingContext();
	virtual unsigned short const * GetApplicationIdInternal();
	virtual void Ensure();
	virtual void ForgetThisApp(ForgetReason,bool *);
	virtual void HandleCrashRecovery();
	virtual void HandleGhostAnimationWaitCompleted();
	virtual void HandleNewProcess(void *);
	virtual void HandleSessionIdleStateChanged(SESSION_IDLE_STATE);
	virtual void HandleSplashScreenActivationCompleted();
	virtual void HandleVisibilityOverrideImmunityChange(SESSION_IDLE_STATE,OVERRIDE_IMMUNITY_CHANGE);
	virtual void OnBackButtonUpdated();
	virtual void OnPresentedWindowChanged(ITaskWindow *);
	virtual void OnTitleUpdated(HWND__ *);
	virtual void PrepareEnsuredViewForShow();
	virtual void ReconcileAutorotationPreferences();
	virtual void SendConsolidated(HWND__ *,WINDOW_CONSOLIDATED_FLAGS);
	virtual void SetForcedVisibilityWhileEnsured(bool);
	virtual void SetGhostVisualStyleInternal(__MIDL___MIDL_itf_shpriv_core_0000_0321_0001);
	virtual void SetMonitorInternal(IImmersiveMonitor *,UPDATE_MONITOR_SUPPLEMENTAL_DATA *,MonitorChangeOptions);
	virtual void SetResizingState(Windows::Internal::Shell::ViewManagerInterop::WindowResizingState);
	virtual void Unensure();
};

struct CImmersiveAppArray
{
	CImmersiveAppArray();
	static long s_CreateInstance(_GUID const &,void * *);
	virtual long AddObject(IUnknown *);
	virtual long Contains(IImmersiveApplication *,int *);
	virtual long GetAllApplicationsByAppID(unsigned short const *,IObjectArray * *);
	virtual long GetAllApplicationsByHostId(unsigned __int64,IObjectArray * *);
	virtual long GetApplication(unsigned short const *,IImmersiveApplication * *);
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
};

struct CImmersiveAppFinderByApplication
{
	CImmersiveAppFinderByApplication(IImmersiveApplicationInternal *);
	~CImmersiveAppFinderByApplication();
};

struct CImmersiveAppFinderByFrameProxy
{
	~CImmersiveAppFinderByFrameProxy();
};

struct CImmersiveAppFinderByHostIdAndGlomId
{
	int Compare(Microsoft::WRL::ComPtr<IUnknown> const &,Microsoft::WRL::ComPtr<IUnknown> const &);
};

struct CImmersiveAppFinderByTaskWindow
{
	~CImmersiveAppFinderByTaskWindow();
};

namespace CImmersiveAppTelemetry
{
	class DeleteWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~DeleteWindow();
	};

	class GetWindowAndPrepareForActivation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~GetWindowAndPrepareForActivation();
	};

	class Initialization
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~Initialization();
	};

	class ProcessNewWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~ProcessNewWindow();
	};

	class SetApplicationWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~SetApplicationWindow();
	};

	class SetPendingApplicationWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~SetPendingApplicationWindow();
	};

	class SetViewPosition
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		static SetViewPosition Start<unsigned short * &>(unsigned short * &);
		void StartActivity(unsigned short const *);
		~SetViewPosition();
	};

};

class CImmersiveApplicationTransitionHelper
{
	long _BeginCharmFlowTransitionRequest(HWND__ *,HWND__ *);
	long _BeginCharmPopupTransitionRequest(HWND__ *,HWND__ *);
	long _SubscribeToWNF();
	long _TransitionWithinApp(APP_TRANSITION_INFORMATION const * const);
	static long ImmersiveLauncherWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	void s_TransitionWindowWithRect(HWND__ *,DWMTRANSITION_TARGET,tagRECT const *);
public:
	CImmersiveApplicationTransitionHelper();
	virtual long BeginAppTransitionRequest(APP_TRANSITION_INFORMATION const * const);
	virtual long BeginCharmTransitionRequest(CHARM_TRANSITION_INFORMATION const * const);
	virtual long EndAppTransitionRequest();
	virtual long EndCharmTransitionRequest();
	virtual long Initialize(IServiceProvider *);
	virtual long Uninitialize();
};

struct CImmersiveApplicationWindow
{
	CImmersiveApplicationWindow(HWND__ *);
	virtual long GetApplicationId(unsigned short * *);
	virtual long GetBandId(unsigned long *);
	virtual long GetNativeWindow(HWND__ * *);
	virtual long GetProcessId(unsigned long *);
	virtual long GetThreadId(unsigned long *);
};

struct CImmersiveColor
{
	static bool IsColorSchemeChangeMessage(unsigned int,__int64);
	static unsigned long GetColor(IMMERSIVE_COLOR_TYPE);
};

struct CImmersiveContextMenuOwnerDrawHelper
{
	static bool s_ContextMenuWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,bool *,GRID_HOW_SELECTED_FLAGS *);
};

class CImmersiveMode
{
	class CDesktopVisibilityChangeSource
	{
		static __int64 s_ActivationFilterWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	public:
		CDesktopVisibilityChangeSource(IImmersiveMonitor *,unsigned long,bool,IImmersiveMonitor *,IMM_SYSTEM_MODE);
		void MonitorRectChanged();
		void UpdateActivationFilter(IMM_SYSTEM_MODE);
	};

	long _RegisterDesktopVisibilitySource(IImmersiveMonitor *);
	long _RegisterForLauncherVisibilityNotifications();
	static IMM_SYSTEM_MODE s_ModeFromZbid(ZBID);
	static long ImmersiveLauncherWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	void _HandleDesktopVisibilityChange(IImmersiveMonitor *,bool,bool);
	void _OnLauncherVisibilityChanged();
	void _PrepareDeferredNotifications(ZBID);
	void _ScheduleDesktopVisibilityNotification(IImmersiveMonitor *,bool);
	void _ScheduleLegacyModeNotification(IMM_SYSTEM_MODE,IMM_SYSTEM_MODE);
	void _ScheduleListenerNotification();
	void _UnregisterDesktopVisibilitySource(IImmersiveMonitor *);
	void _UpdateFallbackWindow();
protected:
	virtual ~CImmersiveMode();
public:
	CImmersiveMode();
	static long s_CreateInstance(_GUID const &,void * *);
	virtual IMM_SYSTEM_MODE GetImmersiveModeDeprecated();
	virtual IMM_SYSTEM_MODE GetLastActivationMode();
	virtual ZBID GetBandIdInternal();
	virtual long CompleteInitialization(IFallbackWindow *,IImmersiveMonitorManager *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetBandId(unsigned long *);
	virtual long GetMode(IMM_SYSTEM_MODE *);
	virtual long HandleActivation(ZBID);
	virtual long HandleActivationDeprecated(ZBID,bool);
	virtual long IsDesktopObscuredInternal(IImmersiveMonitor *,int *);
	virtual long IsDesktopVisible(IImmersiveMonitor *,int *);
	virtual long IsDesktopVisibleInternal(IImmersiveMonitor *,int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnDesktopVisibilityChanged(IImmersiveMonitor *,int);
	virtual long Register(IActiveZBandNotification *,unsigned long *);
	virtual long Register(IImmersiveSystemModeNotification *,unsigned long *);
	virtual long RegisterForDesktopVisibilityChanges(DESKTOP_VISIBILITY_NOTIFICATION_TYPE,IDesktopVisibilityChangesNotification *,unsigned long *);
	virtual long UnregisterForDesktopVisibilityChanges(unsigned long);
	virtual long v_UnregisterModeNotification(unsigned long);
	virtual long v_UnregisterZBandNotification(unsigned long);
	virtual void Uninitialize(IImmersiveMonitorManager *);
	virtual void ValidateActivationAndBroadcastChanged(ZBID);
};

struct CImmersiveShellBuilder
{
	virtual long CreateImmersiveShellController(IImmersiveShellController * *);
};

class CImmersiveShellComponent
{
protected:
	virtual long v_PublishServices(IServiceProvider *,IProfferService *);
	virtual long v_QueryService(_GUID const &,_GUID const &,void * *);
	virtual long v_ShutdownServices(IProfferService *);
public:
	long RegisterServiceInformation(CImmersiveShellComponent::ISC_SERVICE const *,unsigned int);
	virtual long PerformDelayedInitialization();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CImmersiveShellComponent();
};

class CImmersiveShellComponentWithGITSite
{
protected:
	virtual long v_DelegatingQueryService(_GUID const &,_GUID const &,void * *);
};

class CImmersiveShellComponentWithSite
{
protected:
	virtual long v_DelegatingQueryService(_GUID const &,_GUID const &,void * *);
};

class CImmersiveShellCreationBehavior
{
	long CreateComponentWithSxs(bool,IMMERSIVE_SHELL_COMPONENT const &,_GUID const &,void * *);
	long EnsureComponentCreators();
	long ValidateThread();
public:
	CImmersiveShellCreationBehavior();
	virtual long CreateComponent(unsigned int,_GUID const &,void * *);
	virtual long CreatePerMonitorComponent(int,unsigned int,_GUID const &,void * *);
	virtual long GetMaximumComponentCount(unsigned int *);
	virtual long GetPerMonitorComponentCount(int,unsigned int *);
	virtual long OnImmersiveShellCreated(IUnknown *);
	virtual long OnImmersiveShellThreadStart();
	virtual long OnImmersiveShellThreadStop();
	virtual long ShouldCreateComponent(unsigned int,int *,_GUID *);
};

class CImmersiveWindowFactory
{
	virtual long v_CreateSplashScreen(SPLASHSCREEN_FLAGS,ISplashScreen * *);
	virtual long v_Initialize(IImmersiveMonitor *,tagRECT const *);
	virtual void v_OnAfterSetAppWindow();
public:
	CImmersiveWindowFactory();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CImmersiveWindowFactoryBase
{
	virtual _GUID const & v_GetHandlerCLSID();
	virtual long v_GetAdditionalDataSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long v_MarshalAdditionalData(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
protected:
	virtual long v_CreateSplashScreen(SPLASHSCREEN_FLAGS,ISplashScreen * *);
	virtual long v_Initialize(IImmersiveMonitor *,tagRECT const *);
	virtual void v_OnAfterSetAppWindow();
	virtual ~CImmersiveWindowFactoryBase();
public:
	CImmersiveWindowFactoryBase();
	virtual long CreateCoreWindow(HSTRING__ *,Windows::UI::Core::ICoreWindow * *);
	virtual long CreateSplashScreen(SPLASHSCREEN_FLAGS,ISplashScreen * *);
	virtual long GetAppWindow(HWND__ * *);
	virtual long HasExistingSplashScreen(int *);
	virtual long Initialize(IImmersiveMonitor *,unsigned short const *);
	virtual long InitializeWithPosition(IImmersiveMonitor *,unsigned short const *,tagRECT const *);
	virtual long SetAppWindow(long);
	virtual long SetAppWindowAndGetHostProcess(long,unsigned __int64 *);
	virtual long SetViewId(unsigned long);
	virtual long get_WindowReuseAllowed(unsigned char *);
	void SetExistingSplashScreen(ISplashScreen *);
};

class CImmersiveWindowManager
{
	long _DeactivatePrevActiveApp(ZBID);
	long _HandleApplicationCreation(IImmersiveApplicationInternal *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,ITaskWindow *);
	long _HandleApplicationPrecreation(IImmersiveApplicationInternal *);
	long _RemoveApplication(IImmersiveApplicationInternal *);
	void _ScheduleInteractiveNotificationForApps(IImmersiveApplicationArray *,WINDOW_PRESENTED_OVERRIDE);
protected:
	virtual long v_ShutdownServices(IProfferService *);
	virtual ~CImmersiveWindowManager();
public:
	CImmersiveWindowManager();
	long RuntimeClassInitialize(IIAMServiceProvider *);
	virtual WINDOW_DESTROYED_RESULT HandleDestruction(IImmersiveApplicationInternal *,CTaskWindowFinder const &,ITaskWindow * *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetDefaultApplication(IImmersiveMonitor *,IImmersiveApplication * *);
	virtual long GetLastActiveApplication(IImmersiveApplicationInternal * *);
	virtual long GetMobodyApplication(IImmersiveApplication * *);
	virtual long GetMobodyApplicationNoLock(IImmersiveApplicationInternal * *);
	virtual long HandleDeactivation(IWM_ACTION_TYPE,ZBID);
	virtual long HandleWindowAction(IImmersiveApplicationInternal *,HWND__ *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,IWM_ACTION_TYPE,ITaskWindow *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual long SwitchToLastActiveApp(IImmersiveMonitor *);
	virtual void OnOverrideImmunityChanged(IImmersiveApplicationInternal *,SESSION_IDLE_STATE,OVERRIDE_IMMUNITY_CHANGE);
	virtual void Set(WINDOW_PRESENTED_OVERRIDE,SESSION_IDLE_STATE,IImmersiveMonitor *);
};

class CImpWorkerWndProc
{
protected:
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CInsightsExperienceManager
{
	long DestroyExperience();
	long HandleNotifyWindowName(Windows::Foundation::Collections::IPropertySet *);
	long RegisterForMonitorNotification();
	long SetViewSizeAndPosition(tagRECT);
	long SizeViewOnCreation();
	static __int64 s_AltTabProxyWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual long Close();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long Launch();
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnDismiss();
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual ~CInsightsExperienceManager();
	void CloseExperienceIfRunning();
	void CreateAltTabProxyWindow();
	void DisableLightDismissRequested();
	void EnableLightDismissRequested(CSingleViewShellExperience *);
	void RegisterWithLightDismiss(CSingleViewShellExperience *);
public:
	CInsightsExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CJumpViewExperienceEventArgs
{
	CJumpViewExperienceEventArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Params(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CJumpViewExperienceManager
{
	CSingleViewShellExperience::Border GetBorderFlagFromStuckEdge();
	JumpViewProvider::ShowJumpViewActivity BeginTelemetryActivity(Windows::Internal::Shell::JumpView::IJumpViewParams *);
	long DismissImpl(bool);
	long EnsureActivationArgs();
	long EnsureWindowPosition(CSingleViewShellExperience *);
	long GetMonitorInformation(tagPOINT,tagRECT &,unsigned int &,EDGEUI_TRAYSTUCKPLACE &);
	static long CalcWindowPosition(tagRECT,tagPOINT,int,int,Windows::UI::Xaml::HorizontalAlignment,Windows::UI::Xaml::VerticalAlignment,tagRECT &);
	void BeginJumpViewTelemetryTimeout();
	void CancelJumpViewTelemetryTimeout();
	void FireCancelledEvent();
protected:
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnIdleStateChanged(CSingleViewShellExperience *,bool);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
public:
	CJumpViewExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long ActiveZBandChangedForMonitor(unsigned long,unsigned long,IImmersiveMonitor *,MODE_CHANGE_REASON);
	virtual long Close();
	virtual long Dismiss();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Show(HSTRING__ *);
	virtual long add_Cancelled(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::JumpViewExperienceManager *,Windows::Internal::Shell::Experience::JumpViewExperienceEventArgs *> *,EventRegistrationToken *);
	virtual long add_Hidden(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::JumpViewExperienceManager *,Windows::Internal::Shell::Experience::JumpViewExperienceEventArgs *> *,EventRegistrationToken *);
	virtual long add_Shown(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::JumpViewExperienceManager *,Windows::Internal::Shell::Experience::JumpViewExperienceEventArgs *> *,EventRegistrationToken *);
	virtual long remove_Cancelled(EventRegistrationToken);
	virtual long remove_Hidden(EventRegistrationToken);
	virtual long remove_Shown(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CJumpViewExperienceManager();
};

class CLaunchActivatedEventArgs
{
	virtual ~CLaunchActivatedEventArgs();
public:
	CLaunchActivatedEventArgs();
	long RuntimeClassInitialize(HSTRING__ *,HSTRING__ *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long MarshalObjectToPropertySet(Windows::Foundation::Collections::IPropertySet *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Arguments(HSTRING__ * *);
	virtual long get_TileActivatedInfo(Windows::ApplicationModel::Activation::ITileActivatedInfo * *);
	virtual long get_TileId(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CLaunchToMonitor
{
	CLaunchToMonitor();
	virtual long GetMonitor(HMONITOR__ * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
};

class CLauncherAndDefaultSwitchTransitionTarget
{
	long _GetLastActivatedApp(IApplicationView * *);
	virtual bool v_ShouldUseGhostWindow(IAppLayoutOperationItem *);
public:
	virtual AppTransitionTargetType GetTargetType();
	virtual long ExecuteTag();
	virtual long PrepareTaggingInfoForApp(IAppLayoutOperationItem *,ITemporaryAppVisual *,IImmersiveApplicationManagerSafeForSyncCallouts *);
};

class CLauncherLoginEvent
{
	static void * s_hEvent;
};

struct CLinkedWalk<ViewEventDispatcher::PendingActivationData>
{
	CLinkedNode<ViewEventDispatcher::PendingActivationData> * Remove();
	int Step();
};

struct CLocalSimpleArray<Microsoft::WRL::ComPtr<CRefCountedObject<CAppViewManager::PRESENTED_WINDOW_CALLBACK_TRIGGER> >,4294967294>
{
	~CLocalSimpleArray<Microsoft::WRL::ComPtr<CRefCountedObject<CAppViewManager::PRESENTED_WINDOW_CALLBACK_TRIGGER> >,4294967294>();
};

class CMarshaledInterface
{
	struct CMarshalStream
	{
		long RuntimeClassInitialize(_GUID const &,IUnknown *,MARSHAL_KIND);
	};

	long _Unmarshal(_GUID const &,void * *,bool);
public:
	CMarshaledInterface & operator=(CMarshaledInterface const &);
	CMarshaledInterface();
	CMarshaledInterface(CMarshaledInterface const &);
	CMarshaledInterface<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> *,MARSHAL_KIND);
	long Unmarshal<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> > >);
	~CMarshaledInterface();
};

struct CMemString<CMemString_PolicyCoTaskMem>
{
	~CMemString<CMemString_PolicyCoTaskMem>();
};

struct CMonitorNotificationHelper
{
	CMonitorNotificationHelper(IImmersiveMonitorNotification *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
};

class CMultitaskingViewButtonElement
{
	struct CDetectRenderModeChange
	{
		CDetectRenderModeChange(CMultitaskingViewButtonElement *);
		~CDetectRenderModeChange();
	};

protected:
	CMultitaskingViewButtonElement::ButtonRenderMode _CalcButtonRenderMode();
	GlyphButtonStateMetrics & _GetStateBasedValue<GlyphButtonStateMetrics>(GlyphButtonStateMetrics &,GlyphButtonStateMetrics &,GlyphButtonStateMetrics &);
	virtual bool v_OnClick(PointerButton,MultitaskingViewPointerInputArgs const &);
public:
	virtual bool PointerDown(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual bool PointerUp(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual void PointerLeave();
	virtual void PointerMove(MultitaskingViewPointerInputArgs const &);
};

class CMultitaskingViewControllerBase
{
	struct BatchDismissView
	{
		~BatchDismissView();
	};

	void _CommitDismissView();
protected:
	long _StartTabletModeWindowArrangement(ISwitchItem *,IExternalDragCallback *);
	void _AnimateDismissView(ISwitchItem *);
	void _DismissView();
public:
	CMultitaskingViewControllerBase();
	virtual DragEffects IsDraggable(ISwitchItem *);
	virtual bool CanItemMoveDesktops(ISwitchItem *);
	virtual bool IsContextMenuEnabled(ISwitchItem *);
	virtual long GetContextMenu(ISwitchItem *,HMENU__ * *);
	virtual void CloseSwitchItem(ISwitchItem *);
	virtual void ContextMenuInvoked(ISwitchItem *,unsigned int);
	virtual void Destroy();
	virtual void DismissViewNoAnimate();
	virtual void DragSwitchItem(ISwitchItem *,IExternalDragCallback *);
	virtual void InvokeSwitchItem(ISwitchItem *);
	virtual void MoveItemToDesktop(ISwitchItem *,IVirtualDesktopItem *);
	virtual void MoveItemToNewDesktop(ISwitchItem *);
	virtual void OnActivationLost(IMultitaskingViewFrame *,HWND__ *);
	virtual void OnContainerNavigate(IMultitaskingViewFrame *,unsigned int);
	virtual void OnDisplayChange(IMultitaskingViewFrame *);
	virtual void OnFilterTextChange(IMultitaskingViewFrame *,unsigned short const *);
	virtual void OnKeyUp(IMultitaskingViewFrame *,unsigned int,ModifierKeys);
	virtual void OnLightDismiss(IMultitaskingViewFrame *);
	virtual void SwitchItemDragEnded();
	virtual void SwitchItemDragStarted(ISwitchItem *);
	~CMultitaskingViewControllerBase();
};

class CMultitaskingViewElementBase
{
	class CNullAnimationCoordinator
	{
		virtual long BeginAnimation();
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	class CNullDragProvider
	{
		virtual bool StartDrag(DragEffects,IMultitaskingViewElement *,IUnknown *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct PointerTracking
	{
		PointerTracking & operator=(PointerTracking const &);
		PointerTracking(PointerTracking const &);
	};

protected:
	Microsoft::WRL::ComPtr<IMultitaskingViewElement> _GetFocusForRemovedChild(IMultitaskingViewElement *);
	Microsoft::WRL::ComPtr<IMultitaskingViewElement> _HitTestChildren(Geometry::CPoint const &);
	MultitaskingViewPointerInputArgs _MapArgumentsToChild(MultitaskingViewPointerInputArgs const &);
	bool _ShouldRenderAsFocused();
	long _RaiseFocusEvent();
	static CMultitaskingViewElementBase::CNullAnimationCoordinator s_nullAnimationCoordinator;
	static CMultitaskingViewElementBase::CNullDragProvider s_nullDragProvider;
	virtual DropEffect v_OnDragOver(DragAndDropArgs *,MultitaskingViewPointerInputArgs const &);
	virtual DropEffect v_OnDrop(DragAndDropArgs *,MultitaskingViewPointerInputArgs const &);
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewElement> v_NavigateFromChildIndex(unsigned __int64,unsigned int,NavigationType);
	virtual bool v_InvokeElement();
	virtual bool v_IsContainer();
	virtual bool v_OnClick(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual bool v_PreHover(MultitaskingViewPointerInputArgs const &);
	virtual long v_AddChildToArray(IMultitaskingViewElement *);
	virtual long v_InitAccessibleObject(WeakReference::IWeakReference *,_GUID const &,void * *);
	virtual void v_ContextMenu(ContextMenuArgs const &);
	virtual void v_LayoutChildren();
	virtual void v_LayoutChildren(DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual void v_OnDragLeave();
	virtual void v_OnPointerLeave();
	virtual void v_OnPointerMove(MultitaskingViewPointerInputArgs const &);
	virtual void v_StartDrag(Geometry::CPoint const &);
	void _LayoutChildren(DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	void _PointerMove(MultitaskingViewPointerInputArgs const &);
	void _ResetCapture();
public:
	CMultitaskingViewElementBase();
	virtual AnimationCoordinatorItemType GetItemType();
	virtual DropEffect DragOver(DragAndDropArgs *,MultitaskingViewPointerInputArgs const &);
	virtual DropEffect Drop(DragAndDropArgs *,MultitaskingViewPointerInputArgs const &);
	virtual ElementMapping GetCoordinateMapping();
	virtual ElementStateFlags GetElementState();
	virtual Geometry::CRect GetPosition();
	virtual HWND__ * GetRootWindow();
	virtual Microsoft::WRL::ComPtr<IAnimationCoordinator> GetAnimationCoordinator();
	virtual Microsoft::WRL::ComPtr<IDCompThumbnail> GetRootThumbnail();
	virtual Microsoft::WRL::ComPtr<IDCompThumbnail> GetThumbnailForChildren();
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewDragProvider> GetDragProvider();
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewElement> GetChildFocus();
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewElement> GetElementFromPoint(Geometry::CPoint const &);
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewElement> GetParent();
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewElement> GetSelectedChild();
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewElement> Navigate(IMultitaskingViewElement *,unsigned int,NavigationType);
	virtual bool HasContextMenu();
	virtual bool HitTest(Geometry::CPoint const &);
	virtual bool InvokeElement();
	virtual bool InvokeFocusedElement();
	virtual bool IsAccessible();
	virtual bool IsEmpty();
	virtual bool IsFocused();
	virtual bool IsNavigable(NavigationType);
	virtual bool IsSelected();
	virtual bool IsVisible();
	virtual bool KeyDown(unsigned int,ModifierKeys);
	virtual bool KeyUp(unsigned int,ModifierKeys);
	virtual bool PointerDown(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual bool PointerHover(MultitaskingViewPointerInputArgs const &);
	virtual bool PointerUp(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual long AddChild(IMultitaskingViewElement *);
	virtual long AttachThumbnail(IDCompThumbnail *);
	virtual long GetAccessibleName(unsigned short * *);
	virtual long GetAccessibleObject(_GUID const &,void * *);
	virtual long GetAutomationId(unsigned short * *);
	virtual long GetChildren(IObjectArray * *);
	virtual long RemoveChild(IMultitaskingViewElement *,bool);
	virtual long Select();
	virtual long SetOpacity(double,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long SetParent(IMultitaskingViewElement *);
	virtual long Start2DAnimation(DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual void ChildBecameEmpty();
	virtual void ContextMenu(ContextMenuArgs const &);
	virtual void DragEnded(IUnknown *,DropEffect);
	virtual void DragEnding(IUnknown *,DropEffect);
	virtual void DragLeave();
	virtual void DragStarted(IUnknown *);
	virtual void Hide();
	virtual void LostCapture();
	virtual void PointerLeave();
	virtual void PointerMove(MultitaskingViewPointerInputArgs const &);
	virtual void RemoveAllDescendants();
	virtual void SetAnimationCoordinator(IAnimationCoordinator *);
	virtual void SetChildFocus(IMultitaskingViewElement *);
	virtual void SetEventSink(IMultitaskingViewElementEvents *);
	virtual void SetFocused(bool);
	virtual void SetPosition(Geometry::CRect const &);
	virtual void SetPosition(Geometry::CRect const &,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual void Show();
	virtual void ThumbnailSizeChanged(void *);
	~CMultitaskingViewElementBase();
};

class CMultitaskingViewFrame
{
	bool _OnKeyDown(unsigned int);
	bool _OnKeyUp(unsigned int);
	bool _OnMouseButtonDown(unsigned int,Geometry::CPoint const &);
	bool _OnMouseButtonUp(unsigned int,Geometry::CPoint const &);
	long _CloakWindow(bool);
	long _SetFocusToControl(MultitaskingViewControlFlags,_GUID const &,void * *);
	static Geometry::CSize s_GetMinimumScrollViewerSize(MultitaskingViewControlFlags,MultitaskingViewConfig const &,Geometry::CSize const &);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _EnsureDesktopZOrder();
	void _OnContextMenu(ContextMenuArgs const &);
	void _OnMouseHover(Geometry::CPoint const &);
	void _OnMouseMove(Geometry::CPoint const &);
	void _OnThumbnailSizeChanged(void *);
	void _OnWindowPosChanged();
public:
	CMultitaskingViewFrame();
	long RuntimeClassInitialize(MultitaskingViewControlFlags,MultitaskingViewConfig const &,ISwitchThumbnailDeviceManager *,IElementFactory *,ISwitchItemController *,IVirtualDesktopElementFactory *,IFrameLevelAnimationCoordinator *);
	virtual bool IsEmptyFrame();
	virtual bool IsSameWindow(HWND__ *);
	virtual long BeginAnimation(IFrameLevelAnimationCoordinator *);
	virtual long CreateFrame(Geometry::CRect const &,MultitaskingViewZOrder);
	virtual long GetDimmingLayerThumbnail(IDCompThumbnail * *);
	virtual long GetGradientThumbnail(IDCompThumbnail * *);
	virtual long GetGridElement(IMultitaskingViewElement * *);
	virtual long GetPosition(tagRECT *);
	virtual long GetRootElement(_GUID const &,void * *);
	virtual long GetRootThumbnail(IDCompThumbnail * *);
	virtual long GetVirtualDesktopContainerElement(IAnimatableMultitaskingViewElement * *);
	virtual long Hide();
	virtual long MoveVirtualCursor(Geometry::CPoint const &);
	virtual long Navigate(MultitaskingViewControlFlags,unsigned int);
	virtual long NavigateToItem(MultitaskingViewControlFlags,IUnknown *);
	virtual long SetActive();
	virtual long SetFrameInteractionHandler(IFrameInteractionEvents *);
	virtual long SetPosition(HWND__ *,Geometry::CRect const &);
	virtual long SetSwitchItems(IObservableObjectArray *);
	virtual long SetVirtualDesktopItems(IObservableObjectArray *);
	virtual long Show();
	virtual void BeginUpdates();
	virtual void DestroyFrame();
	virtual void EndUpdates();
	virtual void InvokeSelectedItem();
	virtual void OnClick(IMultitaskingViewElement *,PointerButton);
	virtual ~CMultitaskingViewFrame();
};

class CMultitaskingViewFrameElement
{
	Geometry::CRect _GetContentLocation(tagRECT const &);
	bool _ShouldHandleKey(unsigned int);
	long CreateContentDimmingLayerThumbnail(Geometry::CSize,IDCompThumbnail *,IDCompThumbnail *,IDCompThumbnail * *,IDCompThumbnail * *);
	long _CreateDesktopBackgroundThumbnail(Geometry::CRect const &,IDCompThumbnail * *);
	long _GetWallpaperSrcRect(tagRECT const &,tagRECT *);
	long _RefreshBackgroundThumbnails();
	long _SetContentThumbnailRects(IDCompThumbnail *,IDCompThumbnail *);
	static long s_CreateDimmingLayerThumbnail(ISwitchThumbnailFactory *,double,IDCompThumbnail *,IDCompThumbnail * *);
protected:
	virtual DropEffect v_OnDragOver(DragAndDropArgs *,MultitaskingViewPointerInputArgs const &);
	virtual bool v_InvokeElement();
	virtual bool v_IsContainer();
	virtual bool v_OnClick(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual long v_InitAccessibleObject(WeakReference::IWeakReference *,_GUID const &,void * *);
	virtual void v_LayoutChildren();
public:
	CMultitaskingViewFrameElement();
	long RuntimeClassInitialize(FrameMetrics const &,HWND__ *,AsyncFrameEvents const &,ISwitchThumbnailFactory *,IMultitaskingViewElement *,IMultitaskingViewElement *,IAnimationCoordinator *);
	virtual ElementStateFlags GetElementState();
	virtual HWND__ * GetRootWindow();
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewDragProvider> GetDragProvider();
	virtual bool HitTestForLightDismiss(Geometry::CPoint const &);
	virtual bool KeyDown(unsigned int,ModifierKeys);
	virtual bool KeyUp(unsigned int,ModifierKeys);
	virtual bool PointerDown(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual bool PointerHover(MultitaskingViewPointerInputArgs const &);
	virtual bool PointerUp(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual bool StartDrag(DragEffects,IMultitaskingViewElement *,IUnknown *);
	virtual long GetAccessibleName(unsigned short * *);
	virtual long GetDimmingLayerThumbnail(IDCompThumbnail * *);
	virtual long GetGradientThumbnail(IDCompThumbnail * *);
	virtual long GetRootThumbnail(IDCompThumbnail * *);
	virtual long RemoveChild(IMultitaskingViewElement *,bool);
	virtual void ChildBecameEmpty();
	virtual void DragEnding(IUnknown *,DropEffect);
	virtual void LightDismiss();
	virtual void LostCapture();
	virtual void OnPointerLeftInputEaterElement();
	virtual void PointerLeave();
	virtual void PointerMove(MultitaskingViewPointerInputArgs const &);
	virtual void RefreshBackground();
	virtual void RemoveAllDescendants();
	virtual void SetFocused(bool);
	virtual void UpdateElementState(ElementStateFlags,ElementStateFlags);
	virtual ~CMultitaskingViewFrameElement();
};

class CMultitaskingViewHostBase<IAllUpViewHost>
{
protected:
	long _RegisterForMonitorEvents(IUnknown *);
public:
	CMultitaskingViewHostBase<IAllUpViewHost>();
	virtual long DismissView();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetViewType(MULTITASKING_VIEW_TYPES *);
	virtual long IsViewVisible(int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	~CMultitaskingViewHostBase<IAllUpViewHost>();
};

class CMultitaskingViewHostBase<IAltTabViewHost>
{
protected:
	long _RegisterForMonitorEvents(IUnknown *);
public:
	CMultitaskingViewHostBase<IAltTabViewHost>();
	virtual long DismissView();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetViewType(MULTITASKING_VIEW_TYPES *);
	virtual long IsViewVisible(int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	~CMultitaskingViewHostBase<IAltTabViewHost>();
};

class CMultitaskingViewHostBase<IPPIAllUpViewHost>
{
protected:
	long _RegisterForMonitorEvents(IUnknown *);
public:
	virtual long DismissView();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetViewType(MULTITASKING_VIEW_TYPES *);
	virtual long IsViewVisible(int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
};

struct CMultitaskingViewHostBase<ISnapAssistViewHost>
{
	CMultitaskingViewHostBase<ISnapAssistViewHost>();
	virtual long DismissView();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetViewType(MULTITASKING_VIEW_TYPES *);
	virtual long IsViewVisible(int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	~CMultitaskingViewHostBase<ISnapAssistViewHost>();
};

class CMultitaskingViewHotKeyHandler
{
	bool _ShouldShowMTVAltTab();
	long _OnAltTab(IMMERSIVE_HOT_KEY_ID);
	long _RegisterHotKeys();
	void _UnregisterHotKeys();
public:
	CMultitaskingViewHotKeyHandler();
	long RuntimeClassInitialize(IImmersiveWindowMessageService *,IImmersiveMonitorManager *,IApplicationTargetingTracker *,IMultitaskingViewTaskScheduler *,IApplicationViewCollection *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual void Destroy();
};

class CMultitaskingViewManager
{
	long _CreateDCompMTVHost(MULTITASKING_VIEW_TYPES,IApplicationViewCollection *,_GUID const &,void * *);
	long _CreateMTVHost(MULTITASKING_VIEW_TYPES,IApplicationViewCollection *,_GUID const &,void * *);
	long _CreateXamlMTVHost(MULTITASKING_VIEW_TYPES,IApplicationViewCollection *,_GUID const &,void * *);
	long _FindMTVHost(MULTITASKING_VIEW_TYPES,CMultitaskingViewManager::FindMTVHostOptions,IMultitaskingViewHost * *,unsigned __int64 *);
	void _DestroyMTVHost(unsigned __int64);
public:
	CMultitaskingViewManager();
	long RuntimeClassInitialize(CMultitaskingViewManager::MultitaskingViewManagerInitializeArgs const &);
	virtual long CreateMultitaskingView(MULTITASKING_VIEW_TYPES,_GUID const &,void * *);
	virtual long CreateMultitaskingViewWithFilter(MULTITASKING_VIEW_TYPES,IApplicationViewCollection *,_GUID const &,void * *);
	virtual long Destroy();
	virtual long GetMultitaskingView(MULTITASKING_VIEW_TYPES,_GUID const &,void * *);
	virtual long GetThumbnailDeviceManager(ISwitchThumbnailDeviceManager * *);
	virtual long IsMultitaskingViewVisible(MULTITASKING_VIEW_TYPES,int *);
	virtual long MoveForegroundForPendingHostDismiss();
	virtual long ViewDismissed(IMultitaskingViewHost *);
	virtual ~CMultitaskingViewManager();
};

class CMultitaskingViewServiceProvider
{
	struct INIT_THREAD_DATA
	{
		~INIT_THREAD_DATA();
	};

	long _CreateHotKeyHandler();
	long _EnsureForegroundRight(bool);
	long _InitChildServices();
	long _StartMTVThread();
	static long s_CreateMTVManager(CMultitaskingViewServiceProvider::INIT_THREAD_DATA *);
	static unsigned long s_InitMTVThread(void *);
	static unsigned long s_RunMTVThread(void *);
	static void s_RunMessageLoop(void *);
	void _DismissContextMenuIfPresent();
	void _ShutdownChildServices();
public:
	CMultitaskingViewServiceProvider();
	long RuntimeClassInitialize();
	virtual long PerformDelayedInitialization();
	virtual long QueueTask(IMultitaskingViewTaskCallback *,MultitaskingViewTaskOptions);
	virtual long SetManagerReference(IMultitaskingViewManager *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CMultitaskingViewServiceProvider();
};

struct CNotificationData
{
	static void s_UnpackTouchEvent(void const *,IhmNotification::TouchEventSource *,unsigned int *,__int64 *,unsigned long *,bool *,bool *);
};

class CObjectWithThreadUseDetection
{
protected:
	long TryEnterOnCurrentThread(ThreadUseFailureResponse);
public:
	CObjectWithThreadUseDetection(ApartmentCheckEnum);
	long InitApartmentId();
	~CObjectWithThreadUseDetection();
};

struct COperationWaiter
{
	long Wait();
};

struct CPPIAllUpViewController
{
	long RuntimeClassInitialize(WeakReference::IWeakReference *,IMultitaskingViewManagerInternal *,IApplicationViewSwitcher *,IImmersiveAppCrusher *,ITabletModeViewManager *);
	virtual DragEffects IsDraggable(ISwitchItem *);
};

class CPPIAllUpViewHost
{
protected:
	virtual void v_DismissView();
public:
	CPPIAllUpViewHost();
	long RuntimeClassInitialize(IMultitaskingData *,IMultitaskingViewManagerInternal *,IApplicationViewSwitcher *,IImmersiveAppCrusher *,IMultitaskingViewVisibilityServiceInternal *,ITabletModeViewManager *);
	virtual long Show(IImmersiveMonitor *);
	virtual void DismissViewForDrag();
	virtual void HideViewForDrag();
	virtual ~CPPIAllUpViewHost();
};

struct CPPIAllUpViewService
{
	CPPIAllUpViewService();
	virtual long TogglePPIAllUpView(HMONITOR__ *);
	virtual void SetMonitorManager(IImmersiveMonitorManager *);
};

class CPeopleBarFlyoutExperienceManager
{
	struct DebounceDetection
	{
		struct Notification
		{
			long RuntimeClassInitialize(DebounceDetection *);
			virtual long ObservedMouseButtonDown(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
			virtual long ObservedMouseButtonUp(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
			virtual long ObservedMouseMove(tagPOINT,unsigned short,tagPOINT);
			void Disconnect();
		};

		bool CanShow();
		void BlockImmediateReshow();
	};

	long GetFlyoutRectForLocationAndBorderFlag(Windows::Foundation::Point,tagRECT *,CSingleViewShellExperience::Border *);
	long NotifyTrayOfFlyoutVisibility(bool);
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long SendFocusToTray();
	long UpdateFocusOnDismiss();
	long UpdateViewPositionAndEffects(bool);
	void AdjustSizeForScale(tagSIZE *);
protected:
	virtual long OnApplicationActivatedForLaunch(CSingleViewShellExperience *,long);
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewDestroying(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewShowing(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
public:
	CPeopleBarFlyoutExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HideFlyout();
	virtual long IsFlyoutOpen(unsigned char *);
	virtual long OnDismiss();
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowFlyout(Windows::Foundation::Point);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CPeopleBarFlyoutExperienceManager();
};

class CPeopleBarJumpViewExperienceManager
{
	long CalculateJumpViewPosition(tagRECT &,tagRECT *);
	long Dismiss(bool);
	long GetAppBarPositionForMonitor(HMONITOR__ * const,tagRECT *,EDGEUI_TRAYSTUCKPLACE *);
	long GetMonitorWorkArea(tagRECT &);
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long PositionJumpView();
protected:
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
public:
	CPeopleBarJumpViewExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long Dismiss();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long OnDismiss();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Show(HSTRING__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CPeopleBarJumpViewExperienceManager();
};

struct CPerMonitorDesktopVisibilityService
{
	CPerMonitorDesktopVisibilityService();
	long RuntimeClassInitialize();
	virtual long FullScreenVisibilityChanged(int);
	virtual long IsDesktopVisible(IImmersiveMonitor *,int *);
	virtual long RegisterForDesktopVisibilityChanges(DESKTOP_VISIBILITY_NOTIFICATION_TYPE,IDesktopVisibilityChangesNotification *,unsigned long *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterForDesktopVisibilityChanges(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CPerMonitorDesktopVisibilityService();
};

struct CPlaceModeButtonAcc
{
	CPlaceModeButtonAcc(IDragVisualAcc *,unsigned int,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,tagRECT const *);
	virtual bool ContainsPt(tagPOINT);
	virtual long GetEmbeddedFragmentRoots(tagSAFEARRAY * *);
	virtual long GetPatternProvider(int,IUnknown * *);
	virtual long GetPropertyValue(int,tagVARIANT *);
	virtual long GetRuntimeId(tagSAFEARRAY * *);
	virtual long Invoke();
	virtual long Navigate(NavigateDirection,IRawElementProviderFragment * *);
	virtual long SetFocus();
	virtual long get_BoundingRectangle(UiaRect *);
	virtual long get_FragmentRoot(IRawElementProviderFragmentRoot * *);
	virtual long get_HostRawElementProvider(IRawElementProviderSimple * *);
	virtual long get_ProviderOptions(ProviderOptions *);
	virtual void Disconnect();
};

class CPrivilegedArrangementOperations
{
	virtual long InsertAfterWindow(HWND__ *,HWND__ *);
	virtual long MaximizeWindow(HWND__ *);
	virtual long RegisterWindowArrangementCallout(HWND__ *,int);
	virtual long SetWindowArrangement(HWND__ *,tagRECT const *,tagRECT *,unsigned long);
	virtual long UpdateSizeConstraints(HWND__ *,tagSIZE *,tagSIZE *);
public:
	CPrivilegedArrangementOperations();
};

class CPrivilegedDesktopOperations
{
	virtual long ClearForeground();
	virtual long SetActivationFilter(HWND__ *,int);
	virtual long SetActiveProcess(unsigned long);
	virtual long SetCancelRotationDelayHintWindow(HWND__ *);
	virtual long SetFallbackForeground(HWND__ *,unsigned long);
public:
	CPrivilegedDesktopOperations();
};

class CPrivilegedForegroundOperations
{
	virtual long AllowSetForegroundWindow();
public:
	CPrivilegedForegroundOperations();
};

class CPrivilegedNotificationOperations
{
	virtual long NotifyWindowWithQEvent(HWND__ *,__MIDL___MIDL_itf_privilegedoperations_0000_0003_0001,unsigned __int64,__int64);
public:
	CPrivilegedNotificationOperations();
};

class CPrivilegedPresentationOperations
{
	virtual long SetHolographicComposition(HWND__ *,int);
	virtual long SetShellCloak(HWND__ *,__MIDL___MIDL_itf_privilegedoperations_0000_0002_0001);
	virtual long SetWindowBand(HWND__ *,HWND__ *,unsigned long);
	virtual long SetWindowCompositionAttribute(HWND__ *,unsigned long,void *,unsigned int);
public:
	CPrivilegedPresentationOperations();
};

class CPrivilegedSizeConstraintsOperations
{
	virtual long QuerySizeConstraints(HWND__ *);
public:
	CPrivilegedSizeConstraintsOperations();
};

class CPrivilegedTabletModeOperations
{
	virtual long EnableShellWindowManagementBehavior(unsigned long,unsigned long);
	virtual long SetWindowShowState(HWND__ *,unsigned long,unsigned long,tagRECT *);
public:
	CPrivilegedTabletModeOperations();
};

struct CPropVariant
{
	~CPropVariant();
};

struct CPropertyStoreHelper
{
	CPropertyStoreHelper(IPropertyStore *);
	~CPropertyStoreHelper();
};

struct CPropertyStoreHelperBase<IPropertyStore>
{
	long GetAsInt32<_tagpropertykey>(_tagpropertykey,long *);
	long GetBoolean<_tagpropertykey>(_tagpropertykey,bool *);
	long GetFailIfEmpty<_tagpropertykey>(_tagpropertykey,tagPROPVARIANT *);
	~CPropertyStoreHelperBase<IPropertyStore>();
};

class CQuickConnectExperienceManager
{
	int GetHorizontalAlignment(int,tagRECT const &);
	int GetVerticalAlignment(int,tagRECT const &);
	long CheckAndPopulateContact();
	long CopyContactCardOptions(Windows::ApplicationModel::Contacts::IContactCardOptions *,Windows::ApplicationModel::Contacts::IContactCardOptions * *);
	long FinalizeWindowPlacement(int,int,tagRECT const &);
	long FinalizeWindowPosition(int,int,tagRECT const &);
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long UpdateWindowPosition(CSingleViewShellExperience *);
	long ValidateBoundary(Windows::UI::Popups::Placement,int,int,tagRECT const &,bool &);
protected:
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
public:
	CQuickConnectExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long ExitContactCard();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long OnDismiss();
	virtual long PopulateDelayLoadedContactCard(_GUID,Windows::ApplicationModel::Contacts::IContact *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowContactCard(_GUID,unsigned __int64,Windows::ApplicationModel::Contacts::IContact *,Windows::Foundation::Rect,Windows::UI::Popups::Placement,Windows::ApplicationModel::Contacts::IContactCardOptions *,float,unsigned char);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CQuickConnectExperienceManager();
};

struct CRPCTimeout
{
	CRPCTimeout(unsigned long);
	~CRPCTimeout();
};

namespace CRVPrivate
{
	CCriticalFailureHandler cfhImmersiveShellStartup;
};

class CRealmActivationHistory
{
	REALM_ACTIVATION _GetRealmForActivation(IAM_APPLICATION_REALM);
	long _EnsureLauncher();
	long _TrySwitchToMarkedWindow();
public:
	CRealmActivationHistory(IImmersiveApplicationManagerInternal *);
	virtual long GetLastActiveTimestamp(IAM_APPLICATION_REALM,_FILETIME *);
	virtual long HandleActivation(ZBID,WindowType,bool);
	virtual long SetActiveApp(IAM_APPLICATION_REALM);
};

struct CRefCountedObject<APP_NOTIFICATION_DATA>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CAppViewManager::PRESENTED_WINDOW_CALLBACK_TRIGGER>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CAutoHandle<void *> >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CAutoMemPtr<ZBAND_NOTIFICATION_DATA> >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CCoSimpleArray<unsigned long,4294967294,CSimpleArrayStandardCompareHelper<unsigned long> > >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<LightweightPropertySet::LightweightProperty>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<PER_APPLICATION_DATA>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<ViewEventDispatcher::PerApplicationData>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<ViewEventRegistration>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<VirtualDesktopAnimationSyncNotificationInstance::MarshalledData>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<WindowEventDispatcher::PendingActivationData>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRefThread
{
protected:
	virtual ~CRefThread();
public:
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetRefCountChangeEvent(void *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CReportWindowVisibilityChange
{
	struct DISCOVER_OWNED_WINDOWS
	{
		~DISCOVER_OWNED_WINDOWS();
	};

	static int s_DiscoverOwnedWindowsProc(HWND__ *,__int64);
	void _ReportOwnedWindowsVisibilityChange(HWND__ *,ZBID,__int64);
public:
	CReportWindowVisibilityChange();
	bool IsOverrideImmuneApplication(IImmersiveApplicationInternal *);
	bool IsReportingEnabled(IImmersiveMonitor *,IImmersiveApplicationInternal *);
	long SetOverrideImmuneApplication(IImmersiveApplicationInternal *);
	void ClearOverrideImmuneApplication(IImmersiveApplicationInternal *);
	void ReportOwnedWindowsVisibilityChange(HWND__ *,ZBID,IImmersiveMonitor *,IImmersiveApplicationInternal *,__int64);
	void ReportWindowsVisibilityChange(HWND__ *,ZBID,IImmersiveMonitor *,IImmersiveApplicationInternal *,__int64);
};

class CRotationManagerSync
{
	long _GetOrientationPreferenceFromCurrentOrientation(ORIENTATION_PREFERENCE *);
	void _CheckForInitialSuppression();
	void _SetActiveProcessForRotation(unsigned long);
	void _SetAutoRotationConfiguration(unsigned long,HWND__ *,ORIENTATION_PREFERENCE);
public:
	CRotationManagerSync();
	virtual long CompleteInitialization(IServiceProvider *,IImmersiveApplicationManagerInternal *);
	virtual long DisableAutoRotationPreferences();
	virtual long EnableAutoRotationPreferences();
	virtual long LockAutoRotation();
	virtual long UnlockAutoRotation();
	virtual void ReconcileModernOrientationPreferences();
	virtual void SetLogicalForegroundProcess(HWND__ *,WindowType,IImmersiveApplicationInternal *);
	virtual void Uninitialize();
};

class CScreenClippingExperienceManager
{
	long CheckAndUpdateHostedAumid();
	long EnsureScreenClippingBroker();
	long HandleNotifyWindowName(Windows::Foundation::Collections::IPropertySet *);
	long RegisterForHotKeyHandling();
	long RegisterForPackageUpdatesWNF();
	long RegisterForViewExperience();
	long RegisterForViewPresentationMediator();
	long RegisterWithServiceProvider(IServiceProvider *);
	long SetViewSizeAndPosition(tagRECT);
	long ShowExperience(Windows::Internal::Shell::Experience::ScreenClipInvocationType);
	long ShowExperienceWithoutFocus();
	long SizeViewOnCreation();
	long StartAppClose();
	long UnregisterForHotKeyHandling();
	virtual long Close();
	virtual long GetScreenClippingBrokerAsIInspectable(IInspectable * *);
	virtual long LaunchOrToggle(Windows::Internal::Shell::Experience::ScreenClipInvocationType);
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual ~CScreenClippingExperienceManager();
	void LookUpPrintScreenSetting();
	void RequestHotKeys();
	void UnregisterOnClose();
public:
	CScreenClippingExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CScrollButtonContainer
{
protected:
	virtual void v_LayoutChildren();
public:
	CScrollButtonContainer();
	long RuntimeClassInitialize(ScrollViewerHostMetrics const &,ScrollButtonContainerFlags,WeakReference::IWeakReference *,IDWriteTextFormat *,ISwitchThumbnailFactory *);
	virtual bool HitTest(Geometry::CPoint const &);
	virtual bool IsFocused();
	virtual bool IsHotTracked();
	virtual void ButtonClicked(IGlyphButton *);
	virtual void SetDisabledButton(ScrollButton);
};

class CScrollViewer
{
	Geometry::CRect _GetTotalRect();
	Geometry::CRect _GetVisibleRect();
	int _GetMinScrollOffset();
	void _ApplyScroll(int,bool);
	void _UpdateViewport();
protected:
	virtual bool v_IsContainer();
	virtual long v_InitAccessibleObject(WeakReference::IWeakReference *,_GUID const &,void * *);
	virtual void v_LayoutChildren();
public:
	CScrollViewer();
	long RuntimeClassInitialize(_MARGINS const &,double,unsigned int,ScrollViewerFlags,IMultitaskingViewElement *,ISwitchThumbnailFactory *);
	virtual AnimationCoordinatorItemType GetItemType();
	virtual ElementMapping GetCoordinateMapping();
	virtual Geometry::CRect GetContentLocation();
	virtual Microsoft::WRL::ComPtr<IDCompThumbnail> GetThumbnailForChildren();
	virtual bool CanScroll();
	virtual bool HitTest(Geometry::CPoint const &);
	virtual bool IsHorizontal();
	virtual double GetScrollPercent();
	virtual double GetViewportPercent();
	virtual long SetBackgroundPosition(tagRECT const &,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long SetClip(tagRECT const &,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long SetViewportPosition(tagRECT const &,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual void ResetScroll();
	virtual void Scroll(unsigned int);
	virtual void ScrollIntoView(IMultitaskingViewElement *);
	virtual void SetFocused(bool);
	virtual void SetScrollPercent(double);
	virtual void UpdateViewport();
};

class CScrollViewerHost
{
	Geometry::CRect _GetIdealChildLocation();
	void _LayoutWithScrollButtons();
	void _LayoutWithoutScrollButtons();
protected:
	virtual bool v_IsContainer();
	virtual void v_LayoutChildren();
public:
	CScrollViewerHost();
	long RuntimeClassInitialize(ScrollViewerHostFlags,ScrollViewerHostMetrics const &,_MARGINS const &,RelativeMargins const &,unsigned int,IMultitaskingViewElement *,ISwitchThumbnailFactory *);
	virtual AnimationCoordinatorItemType GetItemType();
	virtual bool HitTest(Geometry::CPoint const &);
	virtual bool IsEmpty();
	virtual long GetAutomationId(unsigned short * *);
	virtual void Scroll(unsigned int);
	virtual void SetFocused(bool);
	virtual void UpdateScrollButtonEnablement();
	virtual void UpdateScrollButtonVisibility();
};

class CShoulderTapExperienceManager
{
	long GetPeopleBarScreenEdge(EDGEUI_TRAYSTUCKPLACE *);
	long PositionShoulderTap();
	long Reactivate(bool);
protected:
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
public:
	CShoulderTapExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long FocusHotkeyInvoked();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShoulderTap(HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ *,int,int,int,HSTRING__ *,HSTRING__ *,HSTRING__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CShoulderTapExperienceManager();
};

class CShrinkButtonElement
{
protected:
	long _RecreateShrinkableVisual();
	virtual long v_SetRenderMode(CMultitaskingViewButtonElement::ButtonRenderMode);
	virtual void v_LayoutChildren();
	virtual void v_LayoutChildren(DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	void _SetShrink();
public:
	CShrinkButtonElement();
	long RuntimeClassInitialize(double,ISwitchThumbnailFactory *);
	~CShrinkButtonElement();
};

class CSimpleHashTable<HWND__ *,Microsoft::WRL::ComPtr<ISwitchItemElement>,CDefaultHashPolicy<HWND__ *>,CDefaultKeyCompare<HWND__ *>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,HWND__ * const &,Microsoft::WRL::ComPtr<ISwitchItemElement> const &,Microsoft::WRL::ComPtr<ISwitchItemElement> *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<HWND__ *,Microsoft::WRL::ComPtr<ISwitchItemElement>,CDefaultHashPolicy<HWND__ *>,CDefaultKeyCompare<HWND__ *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<HWND__ *,Microsoft::WRL::ComPtr<ISwitchItemElement>,CDefaultHashPolicy<HWND__ *>,CDefaultKeyCompare<HWND__ *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,HWND__ * const &);
};

class CSimpleHashTable<HWND__ *,MultitaskingViewAnimationCoordinatorBase::ThumbnailData,CDefaultHashPolicy<HWND__ *>,CDefaultKeyCompare<HWND__ *>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,HWND__ * const &,MultitaskingViewAnimationCoordinatorBase::ThumbnailData const &,MultitaskingViewAnimationCoordinatorBase::ThumbnailData *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<HWND__ *,MultitaskingViewAnimationCoordinatorBase::ThumbnailData,CDefaultHashPolicy<HWND__ *>,CDefaultKeyCompare<HWND__ *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<HWND__ *,MultitaskingViewAnimationCoordinatorBase::ThumbnailData,CDefaultHashPolicy<HWND__ *>,CDefaultKeyCompare<HWND__ *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,HWND__ * const &);
};

class CSimpleHashTable<IApplicationView *,unsigned short const *,CDefaultHashPolicy<IApplicationView *>,CDefaultKeyCompare<IApplicationView *>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,IApplicationView * const &,unsigned short const * const &,unsigned short const * *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<IApplicationView *,unsigned short const *,CDefaultHashPolicy<IApplicationView *>,CDefaultKeyCompare<IApplicationView *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<IApplicationView *,unsigned short const *,CDefaultHashPolicy<IApplicationView *>,CDefaultKeyCompare<IApplicationView *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,IApplicationView * const &);
public:
	void RemoveAll();
};

class CSimpleHashTable<unsigned __int64,Microsoft::WRL::ComPtr<CRefCountedObject<PER_APPLICATION_DATA> >,CDefaultHashPolicy<unsigned __int64>,CDefaultKeyCompare<unsigned __int64>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	int _FreeBucket(CSimpleHashTable<unsigned __int64,Microsoft::WRL::ComPtr<CRefCountedObject<PER_APPLICATION_DATA> >,CDefaultHashPolicy<unsigned __int64>,CDefaultKeyCompare<unsigned __int64>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *);
	long _EnsureSet();
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned __int64,Microsoft::WRL::ComPtr<CRefCountedObject<PER_APPLICATION_DATA> >,CDefaultHashPolicy<unsigned __int64>,CDefaultKeyCompare<unsigned __int64>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned __int64,Microsoft::WRL::ComPtr<CRefCountedObject<PER_APPLICATION_DATA> >,CDefaultHashPolicy<unsigned __int64>,CDefaultKeyCompare<unsigned __int64>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned __int64 const &);
public:
	long GetItem(unsigned __int64 const &,Microsoft::WRL::ComPtr<CRefCountedObject<PER_APPLICATION_DATA> > &);
};

class CSimpleHashTable<unsigned short const *,Microsoft::WRL::ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > >,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	int _FreeBucket(CSimpleHashTable<unsigned short const *,Microsoft::WRL::ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > >,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned short const *,Microsoft::WRL::ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > >,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned short const *,Microsoft::WRL::ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > >,CStringHashPolicy,CStringCompare,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned short const * const &);
	static int s_EnumAdaptor<<lambda_43584e7377c77bc592a90ea9fe565013> >(<lambda_43584e7377c77bc592a90ea9fe565013> const *,unsigned short const * const &,Microsoft::WRL::ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > > &);
public:
	void RemoveAll();
};

struct CSimplePointerArray<IUnknown,CTContainer_PolicyRelease<IUnknown>,CSimpleArrayStandardCompareHelper<IUnknown *> >
{
	void RemoveAndReleaseAll();
};

struct CSimpleTempAppVisual
{
	CSimpleTempAppVisual();
	long RuntimeClassInitialize(ITemporaryAppVisual *);
	long RuntimeClassInitialize(tagRECT const &,tagRECT const &,TEMPORARY_APP_VISUAL_TYPE const &,HWND__ * const &,HWND__ * const &,IApplicationView *);
	static long CreateInstance(tagRECT const &,tagRECT const &,TEMPORARY_APP_VISUAL_TYPE const &,HWND__ * const &,HWND__ * const &,IApplicationView *,_GUID const &,void * *);
	virtual HWND__ * GetTargetHWND();
	virtual HWND__ * GetVisualHWND();
	virtual TEMPORARY_APP_VISUAL_TYPE GetVisualType();
	virtual long GetApplication(IImmersiveApplication * *);
	virtual long GetView(_GUID const &,void * *);
	virtual void GetVisualRect(APP_LAYOUT_RECT_TYPE,tagRECT *);
};

class CSingleViewShellExperience
{
	long EnsureUnboostCallback();
	long LaunchCore(Microsoft::WRL::Wrappers::HString const &,unsigned short const *);
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long OnEventQueued(Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *);
	long OnViewDestroyedBase();
	long OnViewPropertiesChangedBase(Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *);
	long OnViewVisibilityRevokedChangedBase();
	long RegisterAumid(HSTRING__ *,EventRegistrationToken *);
	long SetImportanceValues(CSingleViewShellExperience::ImportanceVectorOptions);
	long ShowView(CSingleViewShellExperience::ShowOptions);
	long ShowViewAsync(CSingleViewShellExperience::ShowOptions);
	long WaitForWindowReadyForPresentation(CSingleViewShellExperience::ShowOptions);
	void BoostDiskIo();
	void BoostPriority(CSingleViewShellExperience::PriorityBoostReason);
	void CancelWaitForWindowReadyForPresentation();
	void ResetViews();
	void StashPendingShow(CSingleViewShellExperience::ShowOptions);
	void UnboostDiskIo();
	void UnboostPriority(CSingleViewShellExperience::PriorityBoostReason);
public:
	CSingleViewShellExperience(SingleViewShellExperienceEventHandler *,CSingleViewShellExperience::Flags);
	bool IsViewCloaked();
	long AddSideBySideAumid(HSTRING__ *);
	long AddTestAumid(HSTRING__ *);
	long BringToForeground();
	long DestroyView();
	long Hide(CSingleViewShellExperience::HideOptions);
	long KeepAlive();
	long Launch();
	long NavigateView(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	long OnSessionIdleStateChanged(int);
	long OnViewStateChanged(Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *);
	long Reactivate(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *,Windows::Foundation::Collections::IPropertySet *);
	long RemoveKeepAlive();
	long RuntimeClassInitialize(IWeakReferenceSource *,IServiceProvider *,HSTRING__ *,HSTRING__ *);
	long SetArgs(HSTRING__ *);
	long SetPosition(tagRECT const *);
	long SetPreferentialRMSettings(CSingleViewShellExperience::ImportanceVectorOptions);
	long SetWindowBand(ZBID);
	long Show(CSingleViewShellExperience::ShowOptions);
	long ShowBorder(CSingleViewShellExperience::Border,ACCENT_STATE,unsigned long,tagRECT const *);
	long SwapAumid(HSTRING__ *);
	long Uncloak();
	void LaunchCompleted();
	~CSingleViewShellExperience();
};

class CSnapAssistViewController
{
	long _OnItemInvoked(IApplicationView *);
public:
	CSnapAssistViewController();
	long RuntimeClassInitialize(WeakReference::IWeakReference *,IMultitaskingViewManager *,IImmersiveAppCrusher *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITabViewManager *);
	virtual void InvokeSwitchItem(ISwitchItem *);
	virtual void OnActivationLost(IMultitaskingViewFrame *,HWND__ *);
	virtual void OnLightDismiss(IMultitaskingViewFrame *);
	virtual void SetCallback(ISnapAssistCallback *);
	virtual void SetRect(tagRECT *);
};

class CSnapAssistViewHost
{
protected:
	virtual void v_DismissView();
public:
	CSnapAssistViewHost();
	long RuntimeClassInitialize(IMultitaskingData *,IMultitaskingViewManagerInternal *,IMultitaskingViewVisibilityServiceInternal *,IImmersiveAppCrusher *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITabViewManager *);
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *,IVirtualDesktop *);
	virtual long SetCallback(ISnapAssistCallback *);
	virtual long Show(tagRECT *,SNAP_ASSIST_VIEW_FLAGS);
	virtual void AnimateDismissView(ISwitchItem *);
	virtual void DismissAnimationFinished(IUnknown *);
	virtual void InvokeAnimationFinished(IUnknown *);
	virtual ~CSnapAssistViewHost();
};

class CSplashScreen
{
	Windows::Foundation::Rect _get_ImageLocationInternal();
	bool _CanSendDismissedEvent();
public:
	CSplashScreen();
	virtual long CreateSplashScreenEvents(_GUID const &,void * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Initialize(unsigned short const *,tagRECT const *);
	virtual long OnActivationBegin(unsigned short const *,SPLASHSCREEN_FLAGS,HWND__ * *);
	virtual long OnActivationEnd(long,unsigned __int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowSplashScreen();
	virtual long TransitionToApp();
	virtual long add_Dismissed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_ImageLocation(Windows::Foundation::Rect *);
	virtual long remove_Dismissed(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CSplashScreen();
	void OnSizeChanged(tagRECT const *);
	void OnSystemVisualChanged(FRAME_SYSTEM_VISUAL);
	void OnViewAdded(ITaskWindow *);
	void OnViewRemoved(ITaskWindow *);
};

class CStartExperienceManager
{
	long GetMonitorInformation(CSingleViewShellExperience *,tagRECT *,EDGEUI_TRAYSTUCKPLACE *,bool *,tagRECT *,HMONITOR__ * *);
	long PositionMenu(CSingleViewShellExperience *,CStartExperienceManager::PositionMenuFlags);
	long ReactivateHelper(unsigned short const *,bool);
	long ReactivateHelper(unsigned short const *,unsigned int);
	long SetBackgroundImage(void *);
	long UnsetBackgroundImage();
protected:
	virtual long OnApplicationActivatedForLaunch(CSingleViewShellExperience *,long);
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnIdleStateChanged(CSingleViewShellExperience *,bool);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShowing(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
public:
	CStartExperienceManager(bool);
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long BringToForeground();
	virtual long Close();
	virtual long DimStart();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetIsFullScreen(unsigned char *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetStartSize(Windows::Foundation::Size *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetWindowHandle(unsigned __int64 *);
	virtual long Hide(unsigned int);
	virtual long IsWindowFullyVisible(unsigned char *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long PlayTransitionToCortana();
	virtual long Prelaunch(unsigned char);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Show(unsigned char,unsigned char,unsigned int);
	virtual long TakeKeyboardFocus(Windows::Internal::Shell::Experience::FocusNavigateDirection);
	virtual long UnDimStart();
	virtual long Uncloak();
	virtual long WorkAreaMayHaveChanged();
	virtual long add_Destroyed(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_DismissRequested(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_ExitTransitionToCortanaCompleted(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_Hidden(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_LaunchResult(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,int> *,EventRegistrationToken *);
	virtual long add_NotifyFocus(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_SetForegroundFailed(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_Shown(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long remove_Destroyed(EventRegistrationToken);
	virtual long remove_DismissRequested(EventRegistrationToken);
	virtual long remove_ExitTransitionToCortanaCompleted(EventRegistrationToken);
	virtual long remove_Hidden(EventRegistrationToken);
	virtual long remove_LaunchResult(EventRegistrationToken);
	virtual long remove_NotifyFocus(EventRegistrationToken);
	virtual long remove_SetForegroundFailed(EventRegistrationToken);
	virtual long remove_Shown(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnStoryboardCompleted();
	virtual ~CStartExperienceManager();
};

struct CStringCompare
{
	static int CompareKey(unsigned short const * const,unsigned short const * const);
};

struct CStringHashTable<Microsoft::WRL::ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > >,CStringHashPolicy,CStringCompare>
{
	long AddItem(unsigned short const * const &,Microsoft::WRL::ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > > const &);
};

class CSwitchController
{
	struct ActivationData
	{
		~ActivationData();
	};

	struct CDetectSwitchReentrancy
	{
		long BeginSwitchToApp(CSwitchController *);
		~CDetectSwitchReentrancy();
	};

	long _GetAppForSwitch(unsigned short const *,GET_VIEW_FOR_SWITCH_TYPE,IImmersiveMonitor *,IImmersiveApplication * *);
	long _GetMonitorForAppSwitch(IImmersiveMonitor *,IImmersiveApplication *,IImmersiveMonitor * *);
	long _GetMonitorForAppSwitch(IImmersiveMonitor *,unsigned short const *,IImmersiveMonitor * *);
	long _GetMonitorForAppSwitchWithPreference(IImmersiveMonitor *,ACTIVATION_MONITOR_PREFERENCE,IImmersiveApplication *,IImmersiveMonitor * *);
	long _GetMonitorForAppSwitchWithPreference(IImmersiveMonitor *,ACTIVATION_MONITOR_PREFERENCE,unsigned short const *,IImmersiveMonitor * *);
	long _GetValidDefaultMonitor(ACTIVATION_MONITOR_PREFERENCE,IImmersiveMonitor *,IImmersiveMonitor * *,bool *);
	long _LaunchApp(CSwitchController::ActivationData &);
	long _PackageActivationArguments(unsigned short const *,unsigned short const *,unsigned short const *,IUnknown *,ACTIVATEOPTIONSINTERNAL,bool,IDelayedAppActivation * *);
	long _PerformDelayedActivationInternal(IImmersiveApplication *,IDelayedAppActivation *,ISplashScreen *);
	long _PrepareAppForActivation(unsigned short const *,unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,CSwitchController::ActivationData &);
	long _RemoveAppWithPendingTermination(IImmersiveApplication *);
	long _SwitchToApp(CSwitchController::ActivationData &);
	static bool s_IsLegacyApp(unsigned short const *);
public:
	virtual long GetInitialAppRect(IImmersiveMonitor *,unsigned short const *,ACTIVATION_MONITOR_PREFERENCE,tagRECT *);
	virtual long PerformDelayedActivation(IImmersiveApplication *,IDelayedAppActivation *,ISplashScreen *);
	virtual long RelaunchApp(IImmersiveApplication *,ISplashScreen *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long SwitchToApp(IImmersiveApplication *,SWITCH_TO_APP_OPTIONS const *);
	virtual long SwitchToAppByIdWithArguments(unsigned short const *,unsigned short const *,unsigned short const *,SWITCH_TO_APP_OPTIONS const *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class CSwitchItemElement
{
protected:
	Geometry::CRect _CalcThumbnailRect(Geometry::CRect const &);
	long _CreateLabel(Geometry::CSize const &);
	long _RenderIcon(D2D_RECT_F const &,ID2D1DeviceContext *);
	long _RenderText(D2D_RECT_F const &,ID2D1DeviceContext *);
	virtual bool HasContextMenu();
	virtual bool v_InvokeElement();
	virtual long v_InitAccessibleObject(WeakReference::IWeakReference *,_GUID const &,void * *);
	virtual void ContextMenu(ContextMenuArgs const &);
	virtual void v_LayoutChildren(DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual void v_SetHotTracking(bool);
	void _GetLayoutRects(Geometry::CRect *,Geometry::CRect *,Geometry::CRect *);
	void _RenderLabel();
	void _RepaintCloseButton();
	void _UpdateBorder();
public:
	CSwitchItemElement();
	long RuntimeClassInitialize(CSwitchItemElement::SwitchItemElementInitializeArgs const &);
	virtual AnimationCoordinatorItemType GetItemType();
	virtual Geometry::CRect GetThumbnailLocation();
	virtual HWND__ * GetWindowForThumbnail();
	virtual Microsoft::WRL::ComPtr<IAnimatableMultitaskingViewElement> AsElement();
	virtual Microsoft::WRL::ComPtr<ISwitchItem> GetSwitchItem();
	virtual bool HitTest(Geometry::CPoint const &);
	virtual bool IsElementForItemData(IUnknown *);
	virtual bool IsFocused();
	virtual bool IsHotTracked();
	virtual bool IsNavigable(NavigationType);
	virtual double GetThumbnailAspectRatio();
	virtual int GetMaxHeight();
	virtual int GetWidthForHeight(int);
	virtual long AnimateComponent(SwitchItemComponent,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long GetAccessibleName(unsigned short * *);
	virtual long GetMonitor(HMONITOR__ * *);
	virtual long SetComponentOpacity(SwitchItemComponent,double,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual unsigned __int64 GetItemActivationTime();
	virtual void ButtonClicked(IGlyphButton *);
	virtual void DragEnding(IUnknown *,DropEffect);
	virtual void DragStarted(IUnknown *);
	virtual void Hide();
	virtual void SetController(ISwitchItemController *);
	virtual void SetFocused(bool);
	virtual void SetHostMonitorSize(Geometry::CSize const &);
	virtual void SetThumbnailSourceSize(tagSIZE const &);
	virtual void Show();
	virtual ~CSwitchItemElement();
};

struct CSwitchItemElementFactory
{
	CSwitchItemElementFactory();
	virtual long CreateElementForObject(IUnknown *,ISwitchThumbnailFactory *,_GUID const &,void * *);
	virtual long SetConfig(MultitaskingViewConfig const &);
};

class CSwitchItemGrid
{
	Microsoft::WRL::ComPtr<IMultitaskingViewElement> _HorizontalNavigateFromIndex(unsigned __int64,unsigned int);
	Microsoft::WRL::ComPtr<IMultitaskingViewElement> _VerticalNavigateFromIndex(unsigned __int64,unsigned int);
	long _AddElementForObject(IUnknown *);
	unsigned int _GetNavDirFromKey(unsigned int,ModifierKeys);
protected:
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewElement> v_NavigateFromChildIndex(unsigned __int64,unsigned int,NavigationType);
	virtual bool v_IsContainer();
	virtual long v_AddChildToArray(IMultitaskingViewElement *);
	virtual long v_InitAccessibleObject(WeakReference::IWeakReference *,_GUID const &,void * *);
	virtual void v_LayoutChildren();
public:
	CSwitchItemGrid();
	long RuntimeClassInitialize(GridMetrics const &,Geometry::CSize const &,IElementFactory *,ISwitchThumbnailFactory *,ISwitchItemController *,IObservableObjectArray *);
	virtual Geometry::CRect GetTotalRect();
	virtual Geometry::CRect GetVisibleRect();
	virtual bool CanScroll();
	virtual bool HitTest(Geometry::CPoint const &);
	virtual bool KeyDown(unsigned int,ModifierKeys);
	virtual bool KeyUp(unsigned int,ModifierKeys);
	virtual int GetScrollIncrement();
	virtual long AddChild(IMultitaskingViewElement *);
	virtual long GetAccessibleName(unsigned short * *);
	virtual long GetGridItemCoordinates(IMultitaskingViewElement *,unsigned __int64 *,unsigned __int64 *);
	virtual long GetItemByRowAndColumn(unsigned __int64,unsigned __int64,IMultitaskingViewElement * *);
	virtual long GetSwitchItemElementIndex(ISwitchItem *,unsigned __int64 *);
	virtual long MoveVirtualCursor(Geometry::CPoint const &);
	virtual long NavigateToItem(IUnknown *);
	virtual long RemoveChild(IMultitaskingViewElement *,bool);
	virtual long SetItems(IObservableObjectArray *);
	virtual unsigned __int64 GetColumnCount();
	virtual unsigned __int64 GetRowCount();
	virtual void BeginUpdates();
	virtual void EndUpdates();
	virtual void ItemAdded(IObservableObjectArray *,IObservableItem *);
	virtual void ItemOperationBegin(IObservableObjectArray *,ObservableArrayOperation,IObservableItem *);
	virtual void ItemOperationEnd(IObservableObjectArray *,ObservableArrayOperation,IObservableItem *);
	virtual void ItemRemoved(IObservableObjectArray *,IObservableItem *);
	virtual void NotifyScrollingChanged(bool);
	virtual void NotifyVisibleRectChanged(tagRECT const &);
	virtual void RemoveAllDescendants();
	virtual void ResetRowHeight();
	virtual void SetChildFocus(IMultitaskingViewElement *);
	virtual void SetFocused(bool);
	virtual void SetHostMonitorSize(Geometry::CSize const &);
	virtual void SetPosition(Geometry::CRect const &);
	virtual void SetPosition(Geometry::CRect const &,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual void UpdateGridMetrics(GridMetrics const &);
	virtual ~CSwitchItemGrid();
};

class CTCoAllocPolicy
{
	static unsigned __int64 _CoTaskMemSize(void *);
public:
	static long Alloc(void *,unsigned long,unsigned __int64,void * *);
	static long Realloc(void *,unsigned long,void *,unsigned __int64,void * *);
};

struct CTLocalAllocPolicy
{
	static long Alloc(void *,unsigned long,unsigned __int64,void * *);
	static long Realloc(void *,unsigned long,void *,unsigned __int64,void * *);
};

struct CTSimpleArray<ApplicationViewManagerVisibilityDebouncer::ApplicationViewManagerNotification,4294967294,CTPolicyCoTaskMem<ApplicationViewManagerVisibilityDebouncer::ApplicationViewManagerNotification>,CSimpleArrayStandardCompareHelper<ApplicationViewManagerVisibilityDebouncer::ApplicationViewManagerNotification>,CSimpleArrayStandardMergeHelper<ApplicationViewManagerVisibilityDebouncer::ApplicationViewManagerNotification> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<BUCKET *,4294967294,CTPolicyCoTaskMem<BUCKET *>,CSimpleArrayStandardCompareHelper<BUCKET *>,CSimpleArrayStandardMergeHelper<BUCKET *> >
{
	long SortEx<CBucketComparator>(CBucketComparator const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void _MergeSort<CBucketComparator>(CBucketComparator const &,unsigned __int64,unsigned __int64);
	void _MergeThem<CBucketComparator>(CBucketComparator const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CActivationBasedAppAndGlomCollection::CGlomCollection,4294967294,CTPolicyCoTaskMem<CActivationBasedAppAndGlomCollection::CGlomCollection>,CSimpleArrayStandardCompareHelper<CActivationBasedAppAndGlomCollection::CGlomCollection>,CSimpleArrayStandardMergeHelper<CActivationBasedAppAndGlomCollection::CGlomCollection> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CAppTransitionManager::AppSpecialInfo,4294967294,CTPolicyCoTaskMem<CAppTransitionManager::AppSpecialInfo>,CSimpleArrayStandardCompareHelper<CAppTransitionManager::AppSpecialInfo>,CSimpleArrayStandardMergeHelper<CAppTransitionManager::AppSpecialInfo> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CDelayIAMOperations::COperation *,4294967294,CTPolicyCoTaskMem<CDelayIAMOperations::COperation *>,CSimpleArrayStandardCompareHelper<CDelayIAMOperations::COperation *>,CSimpleArrayStandardMergeHelper<CDelayIAMOperations::COperation *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CImmersiveMode::CDesktopVisibilityChangeSource *,4294967294,CTPolicyLocalMem<CImmersiveMode::CDesktopVisibilityChangeSource *>,CSimpleArrayStandardCompareHelper<CImmersiveMode::CDesktopVisibilityChangeSource *>,CSimpleArrayStandardMergeHelper<CImmersiveMode::CDesktopVisibilityChangeSource *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CImmersiveMode::DesktopVisibilityChangeListener *,4294967294,CTPolicyLocalMem<CImmersiveMode::DesktopVisibilityChangeListener *>,CSimpleArrayStandardCompareHelper<CImmersiveMode::DesktopVisibilityChangeListener *>,CSimpleArrayStandardMergeHelper<CImmersiveMode::DesktopVisibilityChangeListener *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CImmersiveShellComponent::ISC_SERVICE,4294967294,CTPolicyCoTaskMem<CImmersiveShellComponent::ISC_SERVICE>,CSimpleArrayStandardCompareHelper<CImmersiveShellComponent::ISC_SERVICE>,CSimpleArrayStandardMergeHelper<CImmersiveShellComponent::ISC_SERVICE> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CMultitaskingViewManager::MULTITASKING_HOST_DATA,4294967294,CTPolicyCoTaskMem<CMultitaskingViewManager::MULTITASKING_HOST_DATA>,CSimpleArrayStandardCompareHelper<CMultitaskingViewManager::MULTITASKING_HOST_DATA>,CSimpleArrayStandardMergeHelper<CMultitaskingViewManager::MULTITASKING_HOST_DATA> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<ContextMenuRenderingData *,4294967294,CTPolicyCoTaskMem<ContextMenuRenderingData *>,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *>,CSimpleArrayStandardMergeHelper<ContextMenuRenderingData *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<ENUMERATED_WINDOW,4294967294,CTPolicyCoTaskMem<ENUMERATED_WINDOW>,CSimpleArrayStandardCompareHelper<ENUMERATED_WINDOW>,CSimpleArrayStandardMergeHelper<ENUMERATED_WINDOW> >
{
	long SortEx<CCompareRecoveredWindows>(CCompareRecoveredWindows const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void _MergeSort<CCompareRecoveredWindows>(CCompareRecoveredWindows const &,unsigned __int64,unsigned __int64);
	void _MergeThem<CCompareRecoveredWindows>(CCompareRecoveredWindows const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<GridLayoutFactory::LayoutItem,4294967294,CTPolicyCoTaskMem<GridLayoutFactory::LayoutItem>,CSimpleArrayStandardCompareHelper<GridLayoutFactory::LayoutItem>,CSimpleArrayStandardMergeHelper<GridLayoutFactory::LayoutItem> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<GridLayoutFactory::LayoutRow,4294967294,CTPolicyCoTaskMem<GridLayoutFactory::LayoutRow>,CSimpleArrayStandardCompareHelper<GridLayoutFactory::LayoutRow>,CSimpleArrayStandardMergeHelper<GridLayoutFactory::LayoutRow> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<GridRow,4294967294,CTPolicyCoTaskMem<GridRow>,CSimpleArrayStandardCompareHelper<GridRow>,CSimpleArrayStandardMergeHelper<GridRow> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<HWND__ *,4294967294,CTPolicyCoTaskMem<HWND__ *>,CSimpleArrayStandardCompareHelper<HWND__ *>,CSimpleArrayStandardMergeHelper<HWND__ *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<IUnknown *,4294967294,CTPolicyCoTaskMem<IUnknown *>,CSimpleArrayStandardCompareHelper<IUnknown *>,CSimpleArrayStandardMergeHelper<IUnknown *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<ItemAnimationCoordinatorBase::ClipChangedInfo,4294967294,CTPolicyCoTaskMem<ItemAnimationCoordinatorBase::ClipChangedInfo>,CSimpleArrayStandardCompareHelper<ItemAnimationCoordinatorBase::ClipChangedInfo>,CSimpleArrayStandardMergeHelper<ItemAnimationCoordinatorBase::ClipChangedInfo> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<ItemAnimationCoordinatorBase::ComponentInfo,4294967294,CTPolicyCoTaskMem<ItemAnimationCoordinatorBase::ComponentInfo>,CSimpleArrayStandardCompareHelper<ItemAnimationCoordinatorBase::ComponentInfo>,CSimpleArrayStandardMergeHelper<ItemAnimationCoordinatorBase::ComponentInfo> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<ItemAnimationCoordinatorBase::ItemRemovedInfo,4294967294,CTPolicyCoTaskMem<ItemAnimationCoordinatorBase::ItemRemovedInfo>,CSimpleArrayStandardCompareHelper<ItemAnimationCoordinatorBase::ItemRemovedInfo>,CSimpleArrayStandardMergeHelper<ItemAnimationCoordinatorBase::ItemRemovedInfo> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<ItemAnimationCoordinatorBase::PositionChangedInfo,4294967294,CTPolicyCoTaskMem<ItemAnimationCoordinatorBase::PositionChangedInfo>,CSimpleArrayStandardCompareHelper<ItemAnimationCoordinatorBase::PositionChangedInfo>,CSimpleArrayStandardMergeHelper<ItemAnimationCoordinatorBase::PositionChangedInfo> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CApplicationFrameWrapper>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CApplicationFrameWrapper> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CApplicationFrameWrapper> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CApplicationFrameWrapper> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CRefCountedObject<CAppViewManager::PRESENTED_WINDOW_CALLBACK_TRIGGER> >,4294967294,CTPolicyLocalMem<Microsoft::WRL::ComPtr<CRefCountedObject<CAppViewManager::PRESENTED_WINDOW_CALLBACK_TRIGGER> > >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CRefCountedObject<CAppViewManager::PRESENTED_WINDOW_CALLBACK_TRIGGER> > >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CRefCountedObject<CAppViewManager::PRESENTED_WINDOW_CALLBACK_TRIGGER> > > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CRefCountedObject<LightweightPropertySet::LightweightProperty> >,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CRefCountedObject<LightweightPropertySet::LightweightProperty> > >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CRefCountedObject<LightweightPropertySet::LightweightProperty> > >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CRefCountedObject<LightweightPropertySet::LightweightProperty> > > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CRefCountedObject<ViewEventDispatcher::PerApplicationData> >,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CRefCountedObject<ViewEventDispatcher::PerApplicationData> > >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CRefCountedObject<ViewEventDispatcher::PerApplicationData> > >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CRefCountedObject<ViewEventDispatcher::PerApplicationData> > > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CRefCountedObject<ViewEventRegistration> >,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CRefCountedObject<ViewEventRegistration> > >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CRefCountedObject<ViewEventRegistration> > >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CRefCountedObject<ViewEventRegistration> > > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IAppLayoutAnimationData>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IAppLayoutAnimationData> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAppLayoutAnimationData> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IAppLayoutAnimationData> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IAppLayoutItem>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IAppLayoutItem> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAppLayoutItem> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IAppLayoutItem> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IAppLayoutOperationItem>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IAppLayoutOperationItem> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAppLayoutOperationItem> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IAppLayoutOperationItem> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IApplicationView>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IApplicationView> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IApplicationView> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IApplicationView> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IAsyncCallback>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IAsyncCallback> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAsyncCallback> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IAsyncCallback> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IClassicWindow>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IClassicWindow> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IClassicWindow> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IClassicWindow> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IDCompThumbnail>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IDCompThumbnail> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IDCompThumbnail> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IDCompThumbnail> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IDropFeedbackItem>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IDropFeedbackItem> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IDropFeedbackItem> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IDropFeedbackItem> > >
{
	long SortEx<CDropFeedbackItemComparator>(CDropFeedbackItemComparator const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
	void _MergeSort<CDropFeedbackItemComparator>(CDropFeedbackItemComparator const &,unsigned __int64,unsigned __int64);
	void _MergeThem<CDropFeedbackItemComparator>(CDropFeedbackItemComparator const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IGITCookieObject>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IGITCookieObject> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IGITCookieObject> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IGITCookieObject> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IImmersiveMonitor>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IImmersiveMonitor> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IImmersiveMonitor> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IMultitaskingViewElement>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IMultitaskingViewElement> >,ElementHelpers::ElementCompare,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IMultitaskingViewElement> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IMultitaskingViewGridElement>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IMultitaskingViewGridElement> >,ComPtrCompareHelper,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IMultitaskingViewGridElement> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IObservableItem>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IObservableItem> >,ComPtrCompareHelper,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IObservableItem> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IObservablePropertyCallback>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IObservablePropertyCallback> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IObservablePropertyCallback> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IObservablePropertyCallback> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IPlaceModeButtonAcc>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IPlaceModeButtonAcc> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPlaceModeButtonAcc> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IPlaceModeButtonAcc> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<ITaggableTarget>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<ITaggableTarget> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaggableTarget> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<ITaggableTarget> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<ITaskWindow>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<ITaskWindow> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskWindow> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<ITaskWindow> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	long _MakeRoomAt(unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<ITaskbarLayoutItem>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<ITemporaryAppVisual>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<ITemporaryAppVisual> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITemporaryAppVisual> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<ITemporaryAppVisual> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IViewWrapperInternal>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IViewWrapperInternal> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IViewWrapperInternal> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IViewWrapperInternal> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IVirtualDesktop>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IVirtualDesktop> >,ComPtrCompareHelper,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IVirtualDesktop> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<VirtualDesktopGestureWindow>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<VirtualDesktopGestureWindow> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<VirtualDesktopGestureWindow> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<VirtualDesktopGestureWindow> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<WeakReference::IWeakReference>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<WeakReference::IWeakReference> >,ComPtrCompareHelper,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<WeakReference::IWeakReference> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<PeoplePaneViewManager::ViewChangeListener,4294967294,CTPolicyCoTaskMem<PeoplePaneViewManager::ViewChangeListener>,CSimpleArrayStandardCompareHelper<PeoplePaneViewManager::ViewChangeListener>,CSimpleArrayStandardMergeHelper<PeoplePaneViewManager::ViewChangeListener> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<PositionAdjustmentHistory::PositionAdjustment,4294967294,CTPolicyCoTaskMem<PositionAdjustmentHistory::PositionAdjustment>,CSimpleArrayStandardCompareHelper<PositionAdjustmentHistory::PositionAdjustment>,CSimpleArrayStandardMergeHelper<PositionAdjustmentHistory::PositionAdjustment> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<RecoveredViewInfo,4294967294,CTPolicyCoTaskMem<RecoveredViewInfo>,CSimpleArrayStandardCompareHelper<RecoveredViewInfo>,CSimpleArrayStandardMergeHelper<RecoveredViewInfo> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<RecoveredWindowForViewWrapper,4294967294,CTPolicyCoTaskMem<RecoveredWindowForViewWrapper>,CSimpleArrayStandardCompareHelper<RecoveredWindowForViewWrapper>,CSimpleArrayStandardMergeHelper<RecoveredWindowForViewWrapper> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<ResizeDropTarget,4294967294,CTPolicyCoTaskMem<ResizeDropTarget>,CSimpleArrayStandardCompareHelper<ResizeDropTarget>,CSimpleArrayStandardMergeHelper<ResizeDropTarget> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<SIZE_CONSTRAINTS_CACHE_ENTRY,4294967294,CTPolicyCoTaskMem<SIZE_CONSTRAINTS_CACHE_ENTRY>,CSimpleArrayStandardCompareHelper<SIZE_CONSTRAINTS_CACHE_ENTRY>,CSimpleArrayStandardMergeHelper<SIZE_CONSTRAINTS_CACHE_ENTRY> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<ScreenManager::CacheEntry,4294967294,CTPolicyCoTaskMem<ScreenManager::CacheEntry>,CSimpleArrayStandardCompareHelper<ScreenManager::CacheEntry>,CSimpleArrayStandardMergeHelper<ScreenManager::CacheEntry> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	long _InsertAt<ScreenManager::CacheEntry const &>(ScreenManager::CacheEntry const &,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<UiaPropertyChangedEventArgs *,4294967294,CTPolicyCoTaskMem<UiaPropertyChangedEventArgs *>,CSimpleArrayStandardCompareHelper<UiaPropertyChangedEventArgs *>,CSimpleArrayStandardMergeHelper<UiaPropertyChangedEventArgs *> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<ViewEventDispatcher::PendingViewData,4294967294,CTPolicyCoTaskMem<ViewEventDispatcher::PendingViewData>,CSimpleArrayStandardCompareHelper<ViewEventDispatcher::PendingViewData>,CSimpleArrayStandardMergeHelper<ViewEventDispatcher::PendingViewData> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<VirtualDesktopWindowMoveManager::PendingMove,4294967294,CTPolicyCoTaskMem<VirtualDesktopWindowMoveManager::PendingMove>,CSimpleArrayStandardCompareHelper<VirtualDesktopWindowMoveManager::PendingMove>,CSimpleArrayStandardMergeHelper<VirtualDesktopWindowMoveManager::PendingMove> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<WindowArrangementViewDragData::DropTarget,4294967294,CTPolicyCoTaskMem<WindowArrangementViewDragData::DropTarget>,CSimpleArrayStandardCompareHelper<WindowArrangementViewDragData::DropTarget>,CSimpleArrayStandardMergeHelper<WindowArrangementViewDragData::DropTarget> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CTPolicyCoTaskMem<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >,CSimpleArrayStandardMergeHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<_GUID,4294967294,CTPolicyCoTaskMem<_GUID>,CSimpleArrayStandardCompareHelper<_GUID>,CSimpleArrayStandardMergeHelper<_GUID> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<unsigned __int64,4294967294,CTPolicyCoTaskMem<unsigned __int64>,CSimpleArrayStandardCompareHelper<unsigned __int64>,CSimpleArrayStandardMergeHelper<unsigned __int64> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<unsigned long,4294967294,CTPolicyCoTaskMem<unsigned long>,CSimpleArrayStandardCompareHelper<unsigned long>,CSimpleArrayStandardMergeHelper<unsigned long> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IAppLayoutAnimationData>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAppLayoutAnimationData> > >
{
	long FindEx<CAppLayoutAnimationDataFinderByAnimationType>(CAppLayoutAnimationDataFinderByAnimationType const &,Microsoft::WRL::ComPtr<IAppLayoutAnimationData> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CAppLayoutAnimationDataFinderByView>(CAppLayoutAnimationDataFinderByView const &,Microsoft::WRL::ComPtr<IAppLayoutAnimationData> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IAppLayoutItem>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAppLayoutItem> > >
{
	long FindEx<AppLayoutFinders::CAppLayoutItemFinderByApplication>(AppLayoutFinders::CAppLayoutItemFinderByApplication const &,Microsoft::WRL::ComPtr<IAppLayoutItem> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<AppLayoutFinders::CAppLayoutItemFinderByItem>(AppLayoutFinders::CAppLayoutItemFinderByItem const &,Microsoft::WRL::ComPtr<IAppLayoutItem> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<AppLayoutFinders::CAppLayoutItemFinderByView>(AppLayoutFinders::CAppLayoutItemFinderByView const &,Microsoft::WRL::ComPtr<IAppLayoutItem> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IAppLayoutOperationItem>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAppLayoutOperationItem> > >
{
	long FindEx<CAppLayoutOperationItemFinderByApplication>(CAppLayoutOperationItemFinderByApplication const &,Microsoft::WRL::ComPtr<IAppLayoutOperationItem> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CAppLayoutOperationItemFinderByView>(CAppLayoutOperationItemFinderByView const &,Microsoft::WRL::ComPtr<IAppLayoutOperationItem> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IClassicWindow>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IClassicWindow> > >
{
	long FindEx<CClassicWindowFinderByAppID>(CClassicWindowFinderByAppID const &,Microsoft::WRL::ComPtr<IClassicWindow> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CClassicWindowFinderByHWND>(CClassicWindowFinderByHWND const &,Microsoft::WRL::ComPtr<IClassicWindow> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> > >
{
	long FindEx<CImmersiveAppFinderByAppId>(CImmersiveAppFinderByAppId const &,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CImmersiveAppFinderByApplication>(CImmersiveAppFinderByApplication const &,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CImmersiveAppFinderByHostId>(CImmersiveAppFinderByHostId const &,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CImmersiveAppFinderByHostIdAndGlomId>(CImmersiveAppFinderByHostIdAndGlomId const &,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CImmersiveAppFinderByHwnd>(CImmersiveAppFinderByHwnd const &,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CImmersiveAppFinderByTaskWindow>(CImmersiveAppFinderByTaskWindow const &,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IImmersiveMonitor>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >
{
	long FindEx<CImmersiveMonitorFinder>(CImmersiveMonitorFinder const &,Microsoft::WRL::ComPtr<IImmersiveMonitor> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IMultitaskingViewElement>,ElementHelpers::ElementCompare>
{
	long BinarySearchEx<CompareGridElements>(CompareGridElements const &,Microsoft::WRL::ComPtr<IMultitaskingViewElement> const &,unsigned __int64 *);
	long FindEx<CompareToItemData>(CompareToItemData const &,Microsoft::WRL::ComPtr<IMultitaskingViewElement> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<ElementHelpers::ElementCompare>(ElementHelpers::ElementCompare const &,Microsoft::WRL::ComPtr<IMultitaskingViewElement> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IMultitaskingViewGridElement>,ComPtrCompareHelper>
{
	long FindEx<ComPtrCompareHelper>(ComPtrCompareHelper const &,Microsoft::WRL::ComPtr<IMultitaskingViewGridElement> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IObservableItem>,ComPtrCompareHelper>
{
	long FindEx<ComPtrCompareHelper>(ComPtrCompareHelper const &,Microsoft::WRL::ComPtr<IObservableItem> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<ITaskWindow>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskWindow> > >
{
	long FindEx<CTaskWindowFinder>(CTaskWindowFinder const &,Microsoft::WRL::ComPtr<ITaskWindow> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<ITemporaryAppVisual>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITemporaryAppVisual> > >
{
	long FindEx<CTempAppVisualFinderByApplication>(CTempAppVisualFinderByApplication const &,Microsoft::WRL::ComPtr<ITemporaryAppVisual> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CTempAppVisualFinderByView>(CTempAppVisualFinderByView const &,Microsoft::WRL::ComPtr<ITemporaryAppVisual> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IViewWrapperInternal>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IViewWrapperInternal> > >
{
	long FindEx<ViewWrapperFinderByViewInstanceId>(ViewWrapperFinderByViewInstanceId const &,Microsoft::WRL::ComPtr<IViewWrapperInternal> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<ViewWrapperFinderByWindow>(ViewWrapperFinderByWindow const &,Microsoft::WRL::ComPtr<IViewWrapperInternal> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IVirtualDesktop>,ComPtrCompareHelper>
{
	long FindEx<ComPtrCompareHelper>(ComPtrCompareHelper const &,Microsoft::WRL::ComPtr<IVirtualDesktop> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<ViewEventDispatcher::PendingViewData,CSimpleArrayStandardCompareHelper<ViewEventDispatcher::PendingViewData> >
{
	long FindEx<ViewEventDispatcher::PendingDataFinderByViewInstanceId>(ViewEventDispatcher::PendingDataFinderByViewInstanceId const &,ViewEventDispatcher::PendingViewData const &,unsigned __int64 *,unsigned __int64);
};

class CTaskContinuityActivitiesExperienceManager
{
	long ApplyPriorityBoostIfNeeded();
	long PositionApplicationOnPrimaryMonitor();
protected:
	virtual long OnApplicationActivatedForLaunch(CSingleViewShellExperience *,long);
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewShowing(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
public:
	CTaskContinuityActivitiesExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long ActiveZBandChangedForMonitor(unsigned long,unsigned long,IImmersiveMonitor *,MODE_CHANGE_REASON);
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Hide();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Show();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTaskWindow
{
	long _Invoke(CTaskWindow::WINDOW_ACTION_TYPE);
	long _RegisterForViewReadinessChanges();
	static CTaskWindow::WINDOW_ACTION const * const * const s_rgActions;
	static CTaskWindow::WINDOW_ACTION const s_CloakWindow;
	static CTaskWindow::WINDOW_ACTION const s_UncloakWindow;
	static CTaskWindow::WINDOW_ACTION const s_ValidateActivation;
	static bool (*const * const s_CanCloakPrerequisite)(CTaskWindow::WINDOW_ACTION_PREREQ const *);
	static bool (*const * const s_CanTakeForegroundPrerequisite)(CTaskWindow::WINDOW_ACTION_PREREQ const *);
	static bool s_EnsureCanCloak(CTaskWindow::WINDOW_ACTION_PREREQ const *);
	static bool s_EnsureCanTakeForeground(CTaskWindow::WINDOW_ACTION_PREREQ const *);
	static bool s_ValidateCreationZbidAndConvert(ZBID,CTaskWindow::BAND_ID *);
	static long (*const * const s_ChangeCloak)(CTaskWindow::WINDOW_ACTION_DATA const *);
	static long s_SetWindowCloak(CTaskWindow::WINDOW_ACTION_DATA const *);
	static void s_UpdateDelayedVisibilityTimestamp(CTaskWindow::TASK_WINDOW *,__int64);
	static void s_UpdateNavigationLevel(IImmersiveApplicationInternal *,CTaskWindow::TASK_WINDOW *);
	void _LogVisibilityTelemetry(bool);
	void _QueryCloakedState();
	void _ReconcileViewWithVisibility();
public:
	CTaskWindow();
	long RuntimeClassInitialize(HWND__ *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,TASK_WINDOW_TYPE,IImmersiveApplicationInternal *,tagRECT const *,APPLICATION_VIEW_DATA const *);
	long RuntimeClassInitialize(TASKWINDOW_INIT_DATA const * const);
	static long s_CreateInstance(HWND__ *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,TASK_WINDOW_TYPE,IImmersiveApplicationInternal *,tagRECT const *,APPLICATION_VIEW_DATA const *,_GUID const &,void * *);
	virtual HWND__ * GetNativeWindow();
	virtual ViewPresentationState GetPresentationState();
	virtual ViewVisibilityState GetVisibility();
	virtual __MIDL___MIDL_itf_shpriv_core_0000_0321_0003 GetBehaviorFlags();
	virtual bool GetCanHandleCloseRequest();
	virtual bool GetShouldShowTitleBarBackButton();
	virtual bool IsCloaked();
	virtual bool IsEqualByView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	virtual bool IsPresentationReady();
	virtual bool ValidateActivation();
	virtual long Cloak();
	virtual long EnsurePositionOffset();
	virtual long GetPersistingStateName(unsigned short * *);
	virtual long GetTitle(unsigned short * *);
	virtual long GetView(_GUID const &,void * *);
	virtual long Reinitialize(TASKWINDOW_REINIT_DATA const &);
	virtual long RequestCloseAsync(Windows::Foundation::IAsyncOperation<Windows::Internal::Shell::ViewManagerInterop::AppRequestHandledResult> * *);
	virtual long SetBandId(ZBID);
	virtual long SetPositionAndViewData(tagRECT const * const,APPLICATION_VIEW_DATA const * const);
	virtual long TryInvokeBack(IAsyncCallback *);
	virtual long Uncloak();
	virtual void HandleCrashRecovery(bool);
	virtual void SendConsolidated(WINDOW_CONSOLIDATED_FLAGS);
	virtual void SendVisibilityChanged(__int64);
	virtual void SetBehaviorFlags(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003);
	virtual void SetPresentationState(HWND__ *,ViewPresentationState);
	virtual void SetResizingState(Windows::Internal::Shell::ViewManagerInterop::WindowResizingState);
	virtual void SetSendVisibilityOption(unsigned long,unsigned long);
	virtual void SetVisibility(ViewVisibilityState);
	virtual void UpdateTitle();
};

struct CTaskWindowFinder
{
	CTaskWindowFinder(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	~CTaskWindowFinder();
};

struct CTempAppVisualArray
{
	CTempAppVisualArray();
	static long CreateInstance(_GUID const &,void * *);
	virtual long AddItem(ITemporaryAppVisual *);
	virtual long AddItems(IObjectArray *);
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long GetItemForApp(IImmersiveApplication *,_GUID const &,void * *);
	virtual long GetItemForObject(IUnknown *,_GUID const &,void * *);
};

struct CTempAppVisualFinderByApplication
{
	int Compare(Microsoft::WRL::ComPtr<IUnknown> const &,Microsoft::WRL::ComPtr<IUnknown> const &);
};

struct CTempAppVisualFinderByView
{
	int Compare(Microsoft::WRL::ComPtr<IUnknown> const &,Microsoft::WRL::ComPtr<IUnknown> const &);
};

struct CThreadRefTaker
{
	virtual ~CThreadRefTaker();
};

struct CThreadUseDetector
{
	~CThreadUseDetector();
};

class CToastCenterExperienceManager
{
	bool ShouldShowWithinWorkArea();
	long ChangeDisplayContext(Windows::Internal::Shell::Holographic::UserDisplayContext);
	long Hide();
	long HideInHolographic();
	long Launch();
	long LookupToastQueue();
	long MoveToastCenterViewToDesktop();
	long MoveToastCenterViewToHolographic();
	long OnCriticalNotification();
	long OnDisplayContextChanged();
	long OnInputHostChanging(IHM_DISPLAY_MODE);
	long OnNewNotification();
	long OnShellReady();
	long OnTargetedMessage(CToastCenterExperienceManager::TargetedMessageKind,unsigned short);
	long PositionView();
	long RaisePropertyChangedEvent(unsigned short const *,bool);
	long ReturnFocus();
	long SetViewPresentationMode(Windows::Internal::Holographic::UI::PresentationMode);
	long SetZBand();
	long Show(bool);
	long ShowInHolographic();
	long SubscribeToCriticalNotificationWnf();
	long SubscribeToNewNotificationWnf();
	long SubscribeToShellReadyWnf();
	static long CriticalNotificationStateChangedCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	static long DisplayContextChangedCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	static long NotificationStateChangedCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	static long PostTargetedMessage(void *,CToastCenterExperienceManager::TargetedMessageKind,unsigned short);
	static long ShellReadyCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	void OnVisibilityChanged();
protected:
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShowing(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual long OnVisibilityRevokedChanged(CSingleViewShellExperience *);
public:
	CToastCenterExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HotKeyInvoked(Windows::Internal::Shell::Experience::HotKeyKind);
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RegisterHolographicExecutor(Windows::Internal::Shell::Holographic::IHolographicCoreExperienceExecutor *);
	virtual long SetVisibilityWithoutAnimations(unsigned char);
	virtual long UnregisterHolographicExecutor();
	virtual long add_VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *> *,EventRegistrationToken *);
	virtual long get_IsVisible(unsigned char *);
	virtual long put_IsVisible(unsigned char);
	virtual long remove_VisibilityChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CToastCenterExperienceManager();
};

class CTrustedComponentForegroundControl
{
	virtual long AllowSetForegroundWindow();
	virtual long PrivilegedInsertAfterWindow(HWND__ *,HWND__ *);
	virtual long PrivilegedMaximizeWindow(HWND__ *);
	virtual long PrivilegedUpdateSizeConstraints(HWND__ *,tagSIZE *,tagSIZE *);
	virtual long RaiseTaskbarWindow(HWND__ *,HWND__ *,int);
	virtual long RegisterForWindowArrangementCallout(HWND__ *,int);
	virtual long RevealDesktop();
	virtual long SetWindowArrangement(HWND__ *,tagRECT const *,tagRECT *,unsigned long);
public:
	CTrustedComponentForegroundControl(IImmersiveApplicationManager *);
	static long s_CreateInstance(IImmersiveApplicationManager *,_GUID const &,void * *);
};

struct CVirtualDesktop
{
	CVirtualDesktop();
	CVirtualDesktop(_GUID const &);
	long RuntimeClassInitialize(IVirtualDesktopVisibilityPolicy *,IVirtualDesktopLock *);
	virtual long GetID(_GUID *);
	virtual long GetName(HSTRING__ * *);
	virtual long GetNameInternal(HSTRING__ * *);
	virtual long IsViewVisible(IApplicationView *,int *);
	virtual long SetNameInternal(HSTRING__ *);
};

struct CVirtualDesktopApplicationViewEventListener
{
	long RuntimeClassInitialize(IVirtualDesktopManagerPrivate *,IVirtualDesktopSwitchAnimator *,IVirtualDesktopForegroundPolicy *,IVirtualDesktopWindowMoveManager *,IVirtualDesktopPinnedAppsPrivate *,IVirtualDesktopLock *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
};

class CVirtualDesktopBarElement
{
protected:
	virtual DropEffect v_OnDragOver(DragAndDropArgs *,MultitaskingViewPointerInputArgs const &);
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewElement> v_NavigateFromChildIndex(unsigned __int64,unsigned int,NavigationType);
	virtual bool v_IsContainer();
	virtual void v_LayoutChildren();
	void _LayoutBackground();
	void _UpdateScrollElementVisibility();
public:
	CVirtualDesktopBarElement();
	long RuntimeClassInitialize(VirtualDesktopMetrics const &,Geometry::CRect const &,IObservableObjectArray *,IVirtualDesktopElementFactory *,ISwitchThumbnailFactory *);
	virtual AnimationCoordinatorItemType GetItemType();
	virtual Microsoft::WRL::ComPtr<IVirtualDesktopNewElement> GetNewDesktopButton();
	virtual Microsoft::WRL::ComPtr<IVirtualDesktopNewElement> GetNewTimelineButton();
	virtual bool HitTest(Geometry::CPoint const &);
	virtual bool KeyDown(unsigned int,ModifierKeys);
	virtual long SetComponentOpacity(VirtualDesktopContainerComponent,double,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long SetComponentPosition(VirtualDesktopContainerComponent,tagRECT const &,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual void FrameRectChanged(tagRECT const &);
	virtual void ScrollCurrentDesktopIntoView();
	virtual void SetFocused(bool);
	virtual ~CVirtualDesktopBarElement();
};

class CVirtualDesktopCollection
{
	long _AddDesktop(IVirtualDesktop *);
public:
	CVirtualDesktopCollection();
	long RuntimeClassInitialize(IVirtualDesktopFactory *,IVirtualDesktopPersistence *,bool);
	virtual Microsoft::WRL::ComPtr<IVirtualDesktop> GetUniversalDesktop();
	virtual bool ContainsVirtualDesktop(IVirtualDesktop *);
	virtual long AddVirtualDesktop(IVirtualDesktop * *);
	virtual long AddVirtualDesktop(_GUID const &,IVirtualDesktop * *);
	virtual long DetermineRelativeDirection(IVirtualDesktop *,IVirtualDesktop *,unsigned int *);
	virtual long FindDesktop(_GUID const &,IVirtualDesktop * *);
	virtual long GetAdjacentVirtualDesktop(IVirtualDesktop *,unsigned int,_GUID const &,void * *);
	virtual long GetAsArray(_GUID const &,void * *);
	virtual long GetDesktopIndex(IVirtualDesktop *,unsigned __int64 *);
	virtual long RemoveVirtualDesktop(IVirtualDesktop *);
	virtual unsigned __int64 GetCount();
	virtual ~CVirtualDesktopCollection();
};

struct CVirtualDesktopComponent
{
	CVirtualDesktopComponent();
	long RuntimeClassInitialize();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CVirtualDesktopComponent();
};

class CVirtualDesktopContainerElement
{
protected:
	int CalcMaxVisibleDesktopCount();
	int CalcWidthForDesktopCount(int);
	virtual DropEffect v_OnDragOver(DragAndDropArgs *,MultitaskingViewPointerInputArgs const &);
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewElement> v_NavigateFromChildIndex(unsigned __int64,unsigned int,NavigationType);
	virtual bool v_IsContainer();
	virtual bool v_PreHover(MultitaskingViewPointerInputArgs const &);
	virtual long v_AddChildToArray(IMultitaskingViewElement *);
	virtual long v_InitAccessibleObject(WeakReference::IWeakReference *,_GUID const &,void * *);
	virtual void v_LayoutChildren();
	virtual void v_OnPointerLeave();
	virtual void v_OnPointerMove(MultitaskingViewPointerInputArgs const &);
	void ItemAddedInternal(IObservableItem *);
public:
	CVirtualDesktopContainerElement();
	long RuntimeClassInitialize(VirtualDesktopMetrics const &,Geometry::CRect const &,IObservableObjectArray *,IVirtualDesktopElementFactory *,ISwitchThumbnailFactory *);
	virtual Geometry::CRect GetTotalRect();
	virtual Geometry::CRect GetVisibleRect();
	virtual Geometry::CSize GetVirtualDesktopThumbnailSize();
	virtual Microsoft::WRL::ComPtr<IMultitaskingViewElement> GetSelectedChild();
	virtual ObservableProperty<bool> & GetSingleDesktopMode();
	virtual bool CanScroll();
	virtual bool HitTest(Geometry::CPoint const &);
	virtual bool KeyDown(unsigned int,ModifierKeys);
	virtual int GetScrollIncrement();
	virtual long GetAccessibleName(unsigned short * *);
	virtual void FrameRectChanged(tagRECT const &);
	virtual void ItemAdded(IObservableObjectArray *,IObservableItem *);
	virtual void ItemRemoved(IObservableObjectArray *,IObservableItem *);
	virtual void NotifyScrollingChanged(bool);
	virtual void NotifyVisibleRectChanged(tagRECT const &);
	virtual void ScrollCurrentDesktopIntoView();
	virtual void ScrollIntoView(IMultitaskingViewElement *);
	virtual void SetChildFocus(IMultitaskingViewElement *);
	virtual void SetFocused(bool);
	virtual ~CVirtualDesktopContainerElement();
};

struct CVirtualDesktopDefaultForegroundHandler
{
	virtual bool IsCurrentForegroundDefault();
	virtual long SetDefaultForeground();
};

struct CVirtualDesktopFactory
{
	CVirtualDesktopFactory();
	virtual long CreateVirtualDesktop(_GUID const &,_GUID const &,void * *);
	virtual long CreateVirtualDesktop(_GUID const &,void * *);
};

class CVirtualDesktopForegroundPolicy
{
	long _FindDesktopForView(IApplicationView *,IVirtualDesktop * *);
public:
	CVirtualDesktopForegroundPolicy();
	long RuntimeClassInitialize(IVirtualDesktopCollection *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopDefaultForegroundHandler *);
	virtual long DesktopChanged(IVirtualDesktop *);
	virtual long ForegroundViewChanged(IVirtualDesktopManagerPrivate *,IVirtualDesktopSwitchAnimator *,IApplicationView *);
	virtual long GetNewForegroundViewForDesktopSwitch(IVirtualDesktop *,IApplicationView * *,bool *);
	virtual long SetViewInterfaces(IApplicationViewCollection *);
};

struct CVirtualDesktopHolographicViewTransitionNotification
{
	CVirtualDesktopHolographicViewTransitionNotification();
	virtual long ViewTransitionedFromHolographic(IApplicationView *);
	virtual long ViewTransitionedToHolographic(IApplicationView *);
};

class CVirtualDesktopHotkeyHandler
{
	long _AddDesktop();
	long _CycleInDirection(VirtualDesktopSwitchDirection);
	long _RemoveDesktop();
public:
	CVirtualDesktopHotkeyHandler();
	virtual long HandleHotkey(IMMERSIVE_HOT_KEY_ID);
};

struct CVirtualDesktopLock
{
	virtual Microsoft::WRL::Wrappers::Details::SyncLockExclusive AcquireExclusive();
	virtual Microsoft::WRL::Wrappers::Details::SyncLockShared AcquireShared();
};

class CVirtualDesktopManager
{
	long _CheckDesktopRemovalPreconditions(IVirtualDesktop *,IVirtualDesktop *);
	long _MoveViewToDesktop(IApplicationView *,IVirtualDesktop *);
	long _PropagateVisibilityPolicyToOwnershipTree(IApplicationView *);
	long _UpdateViewVisibility(IApplicationView *,IVirtualDesktop *);
public:
	CVirtualDesktopManager();
	long RuntimeClassInitialize(IVirtualDesktopCollection *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopNotification2 *,IVirtualDesktopForegroundPolicy *,IVirtualDesktopPersistence2 *,IVirtualDesktopGroupedViewsPolicy *,IVirtualDesktopLock *);
	virtual bool AreModificationsSuspendedInternal();
	virtual long CanViewMoveDesktops(IApplicationView *,int *);
	virtual long CopyDesktopState(IApplicationView *,IApplicationView *);
	virtual long CreateDesktopInternal(IVirtualDesktop * *);
	virtual long CreateDesktopW(IVirtualDesktop * *);
	virtual long CreateRecoveredDesktopInternal(_GUID const &,IVirtualDesktop * *);
	virtual long DetermineRelativeDirectionInternal(IVirtualDesktop *,IVirtualDesktop *,unsigned int *);
	virtual long FindDesktop(_GUID const &,IVirtualDesktop * *);
	virtual long GetAdjacentDesktop(IVirtualDesktop *,unsigned int,IVirtualDesktop * *);
	virtual long GetAdjacentDesktopInternal(IVirtualDesktop *,unsigned int,IVirtualDesktop * *);
	virtual long GetCount(unsigned int *);
	virtual long GetCountInternal(unsigned int *);
	virtual long GetCurrentDesktop(IVirtualDesktop * *);
	virtual long GetCurrentDesktopInternal(IVirtualDesktop * *);
	virtual long GetDesktopSwitchIncludeExcludeViews(IVirtualDesktop *,IObjectArray * *,IObjectArray * *);
	virtual long GetDesktops(IObjectArray * *);
	virtual long GetDesktopsInternal(IObjectArray * *);
	virtual long MoveViewFromHolographicDesktopInternal(IApplicationView *);
	virtual long MoveViewToDesktop(IApplicationView *,IVirtualDesktop *);
	virtual long MoveViewToDesktopFromApiInternal(IApplicationView *,IVirtualDesktop *);
	virtual long MoveViewToDesktopInternal(IApplicationView *,IVirtualDesktop *);
	virtual long MoveViewToDesktopNoGroupPropagateInternal(IApplicationView *,IVirtualDesktop *);
	virtual long MoveViewToHolographicDesktopInternal(IApplicationView *);
	virtual long OnPinnedViewAddedInternal(IApplicationView *);
	virtual long OnViewAddedInternal(IApplicationView *);
	virtual long OnViewAddedInternal(IApplicationView *,IVirtualDesktop *);
	virtual long OnViewRemovedFromSwitchersInternal(IApplicationView *);
	virtual long OnViewRemovedInternal(IApplicationView *);
	virtual long PlaceOrphanedViewsInternal(IVirtualDesktop *);
	virtual long RemoveDesktop(IVirtualDesktop *,IVirtualDesktop *);
	virtual long RemoveDesktopForRecoveryInternal(IVirtualDesktop *,IVirtualDesktop *);
	virtual long RemoveDesktopInternal(IVirtualDesktop *,IVirtualDesktop *);
	virtual long SetDesktopName(IVirtualDesktop *,HSTRING__ *);
	virtual long SetViewCollectionInternal(IApplicationViewCollection *);
	virtual long SuspendModificationsInternal(IUnknown * *);
	virtual long SwitchDesktop(IVirtualDesktop *);
	virtual long SwitchDesktopForRecoveryInternal(IVirtualDesktop *);
	virtual long SwitchDesktopInternal(IVirtualDesktop *);
	virtual long ViewOwnerChangedInternal(IApplicationView *);
	virtual long ViewVisibilityUpdatedInternal(IApplicationView *);
	virtual void AdjustSuspensionCount(int);
};

class CVirtualDesktopNotifications
{
protected:
	long _ForwardVirtualDesktopNotification2<IVirtualDesktopNotification,IApplicationView *>(long ( IVirtualDesktopNotification::*)(IApplicationView *),IApplicationView *);
	long _ForwardVirtualDesktopNotification2<IVirtualDesktopNotification,IVirtualDesktop *,IVirtualDesktop *>(long ( IVirtualDesktopNotification::*)(IVirtualDesktop *,IVirtualDesktop *),IVirtualDesktop *,IVirtualDesktop *);
	long _ForwardVirtualDesktopNotification2<IVirtualDesktopNotification,IVirtualDesktop *>(long ( IVirtualDesktopNotification::*)(IVirtualDesktop *),IVirtualDesktop *);
	long _ForwardVirtualDesktopNotification2<IVirtualDesktopNotification2,IVirtualDesktop *,HSTRING__ *>(long ( IVirtualDesktopNotification2::*)(IVirtualDesktop *,HSTRING__ *),IVirtualDesktop *,HSTRING__ *);
	long _ForwardVirtualDesktopNotification<IVirtualDesktop,IVirtualDesktop>(long ( IVirtualDesktopNotification::*)(IVirtualDesktop *,IVirtualDesktop *),IVirtualDesktop *,IVirtualDesktop *);
public:
	virtual long Register(IVirtualDesktopNotification *,unsigned long *);
	virtual long RegisterInternal(IVirtualDesktopNotification *,unsigned long *);
	virtual long Unregister(unsigned long);
	virtual long UnregisterInternal(unsigned long);
};

class CVirtualDesktopVisibilityPolicy
{
	bool AreVisibilityPoliciesCompatible(IApplicationView *,IApplicationView *);
	long MoveViewToDesktopIfAllowed(IApplicationView *,IVirtualDesktop *,bool *);
public:
	virtual bool AreVisibilityPoliciesEqual(IApplicationView *,IApplicationView *);
	virtual bool CanViewMoveDesktops(IApplicationView *);
	virtual bool IsOrphanedView(IApplicationView *,IVirtualDesktopCollection *);
	virtual bool IsViewPinned(IApplicationView *,bool *);
	virtual bool IsVisible(IApplicationView *,IVirtualDesktop *);
	virtual bool IsVisibleOnlyOnDesktop(IApplicationView *,IVirtualDesktop *);
	virtual long CopyVisibilityPolicy(IApplicationView *,IApplicationView *);
	virtual long GetAssignedDesktop(IApplicationView *,IVirtualDesktopCollection *,IVirtualDesktop * *);
	virtual long MoveViewToDesktop(IApplicationView *,IVirtualDesktop *);
	virtual long MoveViewToHolographicDesktop(IApplicationView *);
	virtual long OnViewAdded(IApplicationView *,IVirtualDesktop *,IVirtualDesktopCollection *);
	virtual long OnViewRemoved(IApplicationView *);
	virtual long PinViewToAllDesktops(IApplicationView *,bool);
	virtual long SetCurrentDesktopForHighZBandView(IApplicationView *,IVirtualDesktop *);
	virtual long UnpinView(IApplicationView *,IVirtualDesktop *);
};

class CVirtualTouchpadExperienceManager
{
	long AnimateFrame(CVirtualTouchpadExperienceManager::AnimateFrameType,CExperienceManagerAnimationHelper * const);
	long ComputeConstraints(TouchpadPositionAnchorInternal const &,bool);
	long ComputeDesiredSize(HMONITOR__ *,tagRECT const *,DEVICE_SCALE_FACTOR const *);
	long ComputeDesiredSizeForMonitor(HMONITOR__ *);
	long DestroyFrame();
	long GetFramePosition(tagRECT *);
	long HandleScaleOrMonitorChange();
	long HideInternal();
	long PositionCursorForInteraction();
	long SaveFramePosition();
	long SetupExperienceFrame();
	long Uncloack(TouchpadControllerExperienceManagerTelemetry::TouchpadLaunched &);
	long UpdateFramePositionAndSize();
	long UpdateHostedViewPosition();
	static bool IsPointerDeviceSupportedOnMonitor(HMONITOR__ *,tagPOINTER_DEVICE_TYPE);
	static unsigned int GetRelativeSizeForMonitor(HMONITOR__ *,unsigned int);
protected:
	virtual long OnApplicationActivatedForLaunch(CSingleViewShellExperience *,long);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
public:
	CVirtualTouchpadExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Hide();
	virtual long OnChromeOffsetsChanged(IApplicationFrame *);
	virtual long OnCommand(IApplicationFrame *,_GUID const *,unsigned long);
	virtual long OnPositionChanged(IApplicationFrame *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ScaleChanged(unsigned int);
	virtual long Show(Windows::Internal::Shell::Experience::VirtualTouchpadPosition,Windows::Foundation::Rect);
	virtual long get_AreExperienceViewAndCursorOnTheSameMonitor(unsigned char *);
	virtual long get_IsVisible(unsigned char *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CVirtualTouchpadExperienceManager();
};

struct CVisibilityChangedEventArgs
{
	CVisibilityChangedEventArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CVisibilityOverride
{
	long _SubscribeToWNF();
	static _D3DKMT_CHECKOCCLUSION s_checkOcclusion;
	void _ProcessOverride();
public:
	CVisibilityOverride();
	long RuntimeClassInitialize(IImmersiveApplicationVisibilityOverride *);
	static long s_CreateInstance(IImmersiveApplicationVisibilityOverride *,_GUID const &,void * *);
	static long s_DXModeWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	static long s_HoloShellWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual ~CVisibilityOverride();
};

class CWRLExecuteCommandBase
{
protected:
	long _GetSelectedItem(unsigned long,_GUID const &,void * *);
	virtual ~CWRLExecuteCommandBase();
public:
	CWRLExecuteCommandBase();
	virtual long GetAssocElement(_GUID const &,void * *);
	virtual long GetSelection(_GUID const &,void * *);
	virtual long SetAssocElement(IAssociationElement *);
	virtual long SetDirectory(unsigned short const *);
	virtual long SetKeyState(unsigned long);
	virtual long SetNoShowUI(int);
	virtual long SetParameters(unsigned short const *);
	virtual long SetPosition(tagPOINT);
	virtual long SetSelection(IShellItemArray *);
	virtual long SetShowWindow(int);
};

class CWRLImpWndProc<AppResizeAcc>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<CExperienceManagerAnimationHelper::DummyWindow>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<CMultitaskingViewFrame>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<DragInputHandler>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<ForegroundStagingWindow>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<GhostDivider>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<JointDivider>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<JointResizeAcc>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<TabletModeCoverWindow>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<TabletModeInputHandler>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<VirtualDesktopGestureWindow>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<WindowGroup>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<winrt::Windows::Internal::Shell::implementation::TabProxyWindow>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLObjectWithGITSite
{
protected:
	Microsoft::WRL::ComPtr<IUnknown> SiteUnk();
	~CWRLObjectWithGITSite();
public:
	virtual long GetSite(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
};

struct CWRLObjectWithSite
{
	virtual long GetSite(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
};

class CWin32ApplicationView
{
	long CopyCloakableWindowsFromGatherer(unsigned int *,HWND__ * * *);
	long InitializeCloakType(CWin32ApplicationView::InitializeCloakTypeCaller);
	long SetWindowPosition(HWND__ *,tagWINDOWPLACEMENT const &);
	virtual long v_GetNativeWindow(HWND__ * *);
	virtual long v_GetProcessId(unsigned long *);
	virtual long v_IsTabEligible(bool *);
	virtual long v_RefreshEnterpriseIdIfNeeded();
	virtual long v_SetCloak(APPLICATION_VIEW_CLOAK_TYPE,int);
public:
	CWin32ApplicationView(IClassicWindowExternal *);
	long GetSwitchWindow(HWND__ * *);
	long RuntimeClassInitialize();
	virtual long ApplyOperation(IApplicationViewOperation *);
	virtual long CanReceiveInput(int *);
	virtual long EnumerateOwnershipTree(IObjectArray * *);
	virtual long GetAppUserModelId(unsigned short * *);
	virtual long GetCloakableWindows(unsigned int *,HWND__ * * *);
	virtual long GetExtendedFramePosition(tagRECT *);
	virtual long GetFrameworkViewType(FRAMEWORK_VIEW_TYPE *);
	virtual long GetHostId(unsigned __int64 *);
	virtual long GetIsOccluded(int *);
	virtual long GetLastActivationFILETIME(_FILETIME *);
	virtual long GetLastActivationTimestamp(unsigned __int64 *);
	virtual long GetMonitor(IImmersiveMonitor * *);
	virtual long GetPersistingStateName(unsigned short * *);
	virtual long GetPosition(_GUID const &,void * *);
	virtual long GetRootSwitchableOwner(IApplicationView * *);
	virtual long GetScaleFactor(unsigned int *);
	virtual long GetShowInSwitchers(int *);
	virtual long GetSizeConstraintsForDpi(unsigned int,tagSIZE *,tagSIZE *);
	virtual long GetThumbnailWindow(HWND__ * *);
	virtual long GetViewId(unsigned short * *);
	virtual long GetViewState(unsigned int *);
	virtual long GetVisibility(int *);
	virtual long GetWindow(HWND__ * *);
	virtual long HandleRecycle();
	virtual long IsEqualByAppUserModelId(unsigned short const *,int *);
	virtual long IsEqualByHostId(unsigned __int64,int *);
	virtual long IsInHighZOrderBand(int *);
	virtual long IsMirrored(int *);
	virtual long IsSplashScreenPresented(int *);
	virtual long IsTray(int *);
	virtual long OnMinSizePreferencesUpdated(HWND__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QuerySizeConstraintsFromApp();
	virtual long SetAppUserModelId(unsigned short const *);
	virtual long SetFocus();
	virtual long SetForceActiveWindowAppearance(int);
	virtual long SetIsOccluded(int);
	virtual long SetLastActivationTimestamp(unsigned __int64);
	virtual long SetPosition(IApplicationViewPosition *);
	virtual long SetShowInSwitchers(int);
	virtual long SetSizeConstraintsForDpi(unsigned int const *,tagSIZE const *,tagSIZE const *);
	virtual long SetViewState(unsigned int);
	virtual long SizeConstraintsQueried(unsigned int,tagSIZE,tagSIZE);
	virtual long SwitchTo();
	virtual long TryInvokeBack(IAsyncCallback *);
	virtual long UpdateEngagementFlags(VIEW_ENGAGEMENT_FLAGS,VIEW_ENGAGEMENT_FLAGS);
};

struct CWinRTAppIconLoader
{
	long RuntimeClassInitialize(IWinRTApplicationView *,tagSIZE const &,tagSIZE const &,tagSIZE const &,unsigned int,IApplicationViewIconLoaderNotifications *);
	static long s_LoadIconSync(IWinRTApplicationView *,tagSIZE const &,tagSIZE const &,tagSIZE const &,unsigned int,HBITMAP__ * *);
};

class CWinRTApplicationView
{
	long AdjustSizeForChrome(tagSIZE *,unsigned int);
	long GetSizeConstraintOverrides(tagSIZE *,tagSIZE *,tagSIZE *,tagSIZE *);
	virtual long v_GetNativeWindow(HWND__ * *);
	virtual long v_GetProcessId(unsigned long *);
	virtual long v_IsTabEligible(bool *);
	virtual long v_RefreshEnterpriseIdIfNeeded();
	virtual long v_SetCloak(APPLICATION_VIEW_CLOAK_TYPE,int);
public:
	CWinRTApplicationView(IImmersiveApplication *);
	long RuntimeClassInitialize();
	virtual long ApplyOperation(IApplicationViewOperation *);
	virtual long CanReceiveInput(int *);
	virtual long EnumerateOwnershipTree(IObjectArray * *);
	virtual long GetAppUserModelId(unsigned short * *);
	virtual long GetApplication(IImmersiveApplication * *);
	virtual long GetExtendedFramePosition(tagRECT *);
	virtual long GetFrameworkViewType(FRAMEWORK_VIEW_TYPE *);
	virtual long GetHostId(unsigned __int64 *);
	virtual long GetIsOccluded(int *);
	virtual long GetLastActivationFILETIME(_FILETIME *);
	virtual long GetLastActivationTimestamp(unsigned __int64 *);
	virtual long GetMonitor(IImmersiveMonitor * *);
	virtual long GetPersistingStateName(unsigned short * *);
	virtual long GetPosition(_GUID const &,void * *);
	virtual long GetRootSwitchableOwner(IApplicationView * *);
	virtual long GetScaleFactor(unsigned int *);
	virtual long GetShowInSwitchers(int *);
	virtual long GetSizeConstraintsForDpi(unsigned int,tagSIZE *,tagSIZE *);
	virtual long GetThumbnailWindow(HWND__ * *);
	virtual long GetViewId(unsigned short * *);
	virtual long GetViewState(unsigned int *);
	virtual long GetVisibility(int *);
	virtual long HandleRecycle();
	virtual long IsEqualByAppUserModelId(unsigned short const *,int *);
	virtual long IsEqualByHostId(unsigned __int64,int *);
	virtual long IsInHighZOrderBand(int *);
	virtual long IsMirrored(int *);
	virtual long IsSplashScreenPresented(int *);
	virtual long IsTray(int *);
	virtual long OnMinSizePreferencesUpdated(HWND__ *);
	virtual long QuerySizeConstraintsFromApp();
	virtual long SetAppUserModelId(unsigned short const *);
	virtual long SetFocus();
	virtual long SetForceActiveWindowAppearance(int);
	virtual long SetIsOccluded(int);
	virtual long SetLastActivationTimestamp(unsigned __int64);
	virtual long SetPosition(IApplicationViewPosition *);
	virtual long SetShowInSwitchers(int);
	virtual long SetSizeConstraintsForDpi(unsigned int const *,tagSIZE const *,tagSIZE const *);
	virtual long SetViewState(unsigned int);
	virtual long SwitchTo();
	virtual long TryInvokeBack(IAsyncCallback *);
	virtual long UpdateEngagementFlags(VIEW_ENGAGEMENT_FLAGS,VIEW_ENGAGEMENT_FLAGS);
};

class CWindowIconLoader
{
protected:
	static void _SendMessageCallback(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _LoadAsyncIcon(int);
	void _SendMessageCallback(CWindowIconLoader::SendMessageCallbackInfo *,HICON__ *);
public:
	long RuntimeClassInitialize(IWin32ApplicationView *,tagSIZE const &,IApplicationViewIconLoaderNotifications *,IIconLoadingFunctions *);
};

class CWrlLightweightHandlerBase
{
protected:
	long _GetStdMarshaler(_GUID const &,void * *);
	virtual long v_GetAdditionalDataSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long v_MarshalAdditionalData(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
	virtual void v_OnAggregatedUnknownCreated();
public:
	virtual long DisconnectObject(unsigned long);
	virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
	virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
	virtual long ReleaseMarshalData(IStream *);
	virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
};

class CWrlLightweightHandlerServer
{
	virtual unsigned long v_GetHandlerType();
public:
	virtual long GetClassForHandler(unsigned long,void *,_GUID *);
};

namespace CallerIdentity
{
	namespace ApiPolicyChecker
	{
		ApiPolicyChecker::LaunchRequirement GetLaunchRequirementForActiveBand(ZBID);
		bool DoesAppMeetLaunchRequirement(ApiPolicyChecker::LaunchRequirement,unsigned short const *,HWND__ *);
		long IsAppBeingDebugged(unsigned short const *,int *);
		long IsApplicationInteractive(unsigned short const *,int *);
		long IsComponentUiHostWindowForeground(HWND__ *);
		long ShouldAppBeAllowedToPerformPrivilegedOperationBasedOnForeground(unsigned short const *);
	};

	bool IsShellExperienceAppId(unsigned short const *);
	bool g_fRuntimeBrokerProcessIdInitialize;
	long CheckCallerCapability(unsigned short const *,bool *);
	long CheckCapabilityFromImpersonationToken(void *,unsigned short const *,bool *);
	long CheckCapabilityFromProcessHandle(void *,unsigned short const *,bool *);
	long CheckCapabilityFromWindow(HWND__ *,unsigned short const *,bool *);
	long CheckProcessCapability(unsigned long,unsigned short const *,bool *);
	long EnsureCallingProcessIsShellExperience();
	long FindAllApplicationsByAppID(IUnknown *,unsigned short const *,IObjectArray * *);
	long FindAllApplicationsByAppID(unsigned short const *,IObjectArray * *);
	long FindApplication(IUnknown *,HWND__ *,IImmersiveApplication * *);
	long GetAppIdFromProcessId(unsigned long,unsigned short * *);
	long GetCallingProcessAppId(unsigned short * *);
	long GetCallingProcessHandle(unsigned long,RUNTIMEBROKER_CALLERIDENTITY_CHECK,void * *);
	long GetCallingProcessType(PROCESS_UICONTEXT *);
	long GetImmersiveAppIdFromWindow(HWND__ *,unsigned short * *);
	long GetImpersonationTokenFromProcess(void *,unsigned long,void * *);
	long GetManifestedOrientationPreference(unsigned short const *,ORIENTATION_PREFERENCE *);
	long GetPackageFullNameFromAppId(unsigned short const *,unsigned short * *);
	long GetPackageSidFromProcess(unsigned long,void * *);
	long GetPackageSidFromProcessHandle(void *,void * *);
	long GetPackageSidFromProcessToken(void *,void * *);
	long GetProcessAppId(void *,unsigned short * *);
	long GetProcessAppIdWithAppResolverFallback(void *,unsigned short * *);
	long GetProcessTypeFromWindow(HWND__ *,PROCESS_UICONTEXT *);
	long GetStateHandle(unsigned short const *,void * *);
	long GetStateRegKey(void *,unsigned short const *,unsigned long,HKEY__ * *);
	long GetWeakProcessAppId(void *,unsigned short * *);
	long GetWeakWindowAppId(HWND__ *,unsigned short * *);
	long IsProcessAppContainer(void *,bool *);
	unsigned long g_dwRuntimeBrokerProcessId;
	void _EnsureRuntimeBrokerPID();
};

struct ChromeManager
{
	ChromeManager();
	long RuntimeClassInitialize(IUnknown *);
	virtual long AppLayoutChanged(IAppLayout *);
	virtual long DisplaySettingsChanged(IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetCoverWindow(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual long ShellTargetChanged(IApplicationView *);
	virtual long TabletModeChanged(bool);
};

struct ClientWindowReadyForPresentationEventArgs
{
	ClientWindowReadyForPresentationEventArgs(unsigned char);
	virtual long get_ReadyForPresentation(unsigned char *);
};

struct CoCreateInstanceImmersiveShellComponentCreator
{
	virtual long CreateComponent(_GUID const &,_GUID const &,void * *);
};

namespace Common
{
	struct Base32Encoding
	{
		static long GetChars(unsigned char const *,unsigned long,unsigned long,unsigned short *,unsigned long *);
	};

};

struct CommonPeopleTelemetry
{
	class HidePeopleBarFlyout
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(PeopleFlyoutAction);
		~HidePeopleBarFlyout();
	};

	class PeoplePaneAppLaunch
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		PeoplePaneAppLaunch Split();
		void PeoplePaneNewView<unsigned short const * &>(unsigned short const * &);
		void PeoplePaneSwitchToView<unsigned short const * &>(unsigned short const * &);
		void StartActivity(unsigned short const *);
		~PeoplePaneAppLaunch();
	};

	class ShowPeopleBarFlyout
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		ShowPeopleBarFlyout Split();
		ShowPeopleBarFlyout TransferToCurrentThread();
		ShowPeopleBarFlyout();
		void SessionBecameIdleDuringShow();
		void StartActivity(Windows::Foundation::Point);
		~ShowPeopleBarFlyout();
	};

	static bool IsEnabled(unsigned char,unsigned __int64);
	static void PeopleBarFlyoutDidntShowInSpecifiedTime<unsigned int const &>(unsigned int const &);
	void PeoplePaneViewChanged_(PeoplePaneViewChange);
};

struct CommonStartTelemetry
{
	class LauncherInvokeActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		LauncherInvokeActivity Split();
		LauncherInvokeActivity TransferToCurrentThread();
		LauncherInvokeActivity();
		void LauncherCancelledDueToForeground();
		void LauncherCancelledDueToLock();
		void LauncherOpened(unsigned int,unsigned int,LauncherTelemetry::Mode);
		void StartActivity();
		~LauncherInvokeActivity();
	};

	static void LauncherClosed();
};

class CompareGridElements
{
	static unsigned __int64 s_GetActivationTime(IMultitaskingViewElement *);
public:
	int Compare(Microsoft::WRL::ComPtr<IMultitaskingViewElement> const &,Microsoft::WRL::ComPtr<IMultitaskingViewElement> const &);
};

namespace Concurrency
{
	struct cancellation_token
	{
		~cancellation_token();
	};

	namespace details
	{
		class _CancellationTokenCallback<<lambda_be3e5d9dce35d2c8dbfa8485373731d5> >
		{
		protected:
			virtual void _Exec();
		public:
			_CancellationTokenCallback<<lambda_be3e5d9dce35d2c8dbfa8485373731d5> >(<lambda_be3e5d9dce35d2c8dbfa8485373731d5> const &);
		};

		class _CancellationTokenRegistration
		{
			void _Invoke();
		protected:
			virtual ~_CancellationTokenRegistration();
		};

		struct _CancellationTokenState
		{
			void _DeregisterCallback(_CancellationTokenRegistration *);
			void _RegisterCallback(_CancellationTokenRegistration *);
		};

		struct _ContextCallback
		{
			~_ContextCallback();
		};

		struct _ContinuationTaskHandleBase
		{
			virtual ~_ContinuationTaskHandleBase();
		};

		struct _DefaultPPLTaskScheduler
		{
			class _PPLTaskChore
			{
				static void _Callback(void *);
			};

			virtual void schedule(void (*)(void *),void *);
		};

		struct _DefaultTaskHelper
		{
			static void _NoCallOnDefaultTask_ErrorImpl();
		};

		struct _ExceptionHolder
		{
			void _RethrowUserException();
			~_ExceptionHolder();
		};

		struct _Internal_task_options
		{
			~_Internal_task_options();
		};

		struct _PPLTaskHandle<unsigned char,task<bool>::_ContinuationTaskHandle<bool,void,std::function<void (task<bool>)>,std::integral_constant<bool,1>,_TypeSelectorNoAsync>,_ContinuationTaskHandleBase>
		{
			virtual std::shared_ptr<_Task_impl_base> _GetTaskImplBase();
			virtual void invoke();
			virtual ~_PPLTaskHandle<unsigned char,task<bool>::_ContinuationTaskHandle<bool,void,std::function<void (task<bool>)>,std::integral_constant<bool,1>,_TypeSelectorNoAsync>,_ContinuationTaskHandleBase>();
		};

		class _RefCounter
		{
		protected:
			virtual void _Destroy();
		public:
			long _Release();
		};

		class _TaskCollectionBaseImpl
		{
		protected:
			void _SetCollectionState(_TaskCollectionBaseImpl::_TaskCollectionState);
		public:
			static void _RunTask(void (*)(void *),void *,_TaskInliningMode);
		};

		struct _TaskCreationCallstack
		{
			_TaskCreationCallstack(_TaskCreationCallstack const &);
			~_TaskCreationCallstack();
		};

		struct _TaskProcHandle
		{
			static void _RunChoreBridge(void *);
		};

		struct _TaskProcThunk
		{
			struct _Holder
			{
				~_Holder();
			};

			static void _Bridge(void *);
		};

		struct _TaskWorkItemRAIILogger
		{
			~_TaskWorkItemRAIILogger();
		};

		struct _Task_impl<bool>
		{
			virtual bool _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<_ExceptionHolder> const &);
			virtual ~_Task_impl<bool>();
			void _FinalizeAndRunContinuations(bool);
			void _SetUnwrappedAsyncOp(Windows::Foundation::IAsyncOperation<bool> ^);
		};

		struct _Task_impl<unsigned char>
		{
			virtual bool _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<_ExceptionHolder> const &);
			virtual ~_Task_impl<unsigned char>();
			void _FinalizeAndRunContinuations(unsigned char);
		};

		struct _Task_impl_base
		{
			_Task_impl_base(_CancellationTokenState *,scheduler_ptr);
			bool _CancelWithException(std::exception_ptr const &);
			static void _AsyncInit<bool,bool>(std::shared_ptr<_Task_impl<bool> > const &,Windows::Foundation::IAsyncOperation<bool> ^);
			task_group_status _Wait();
			virtual ~_Task_impl_base();
			void _DeregisterCancellation();
			void _RegisterCancellation(std::weak_ptr<_Task_impl_base>);
			void _RunContinuation(_ContinuationTaskHandleBase *);
			void _RunTaskContinuations();
			void _ScheduleContinuation(_ContinuationTaskHandleBase *);
			void _ScheduleContinuationTask(_ContinuationTaskHandleBase *);
			void _ScheduleTask(_TaskProcHandle *,_TaskInliningMode);
		};

		struct _ThenImplOptions
		{
			static _ThenImplOptions _CreateOptions(task_options const &,task_continuation_context const &,scheduler_ptr const &);
			~_ThenImplOptions();
		};

	};

	struct invalid_operation
	{
		invalid_operation(char const *);
		invalid_operation(invalid_operation const &);
		virtual ~invalid_operation();
	};

	struct scheduler_ptr
	{
		~scheduler_ptr();
	};

	class task<bool>
	{
		struct _ContinuationTaskHandle<bool,void,std::function<void (task<bool>)>,std::integral_constant<bool,1>,details::_TypeSelectorNoAsync>
		{
			_ContinuationTaskHandle<bool,void,std::function<void (task<bool>)>,std::integral_constant<bool,1>,details::_TypeSelectorNoAsync>(std::shared_ptr<details::_Task_impl<bool> > const &,std::shared_ptr<details::_Task_impl<unsigned char> > const &,std::function<void (task<bool>)> const &,task_continuation_context const &,details::_TaskInliningMode);
			virtual ~_ContinuationTaskHandle<bool,void,std::function<void (task<bool>)>,std::integral_constant<bool,1>,details::_TypeSelectorNoAsync>();
			void _Continue(std::integral_constant<bool,1>,details::_TypeSelectorNoAsync);
		};

		task<void> _ThenImpl<bool,std::function<void (task<bool>)> >(std::function<void (task<bool>)> const &,details::_ThenImplOptions &);
	public:
		task<bool><Windows::Foundation::IAsyncOperation<bool> ^>(Windows::Foundation::IAsyncOperation<bool> ^,task_options const &);
		void _CreateImpl(details::_CancellationTokenState *,scheduler_ptr);
		~task<bool>();
	};

	struct task<unsigned char>
	{
		void _CreateImpl(details::_CancellationTokenState *,scheduler_ptr);
	};

	struct task<void>
	{
		~task<void>();
	};

	struct task_canceled
	{
		task_canceled(task_canceled const &);
		virtual ~task_canceled();
	};

	struct task_continuation_context
	{
		~task_continuation_context();
	};

	struct task_options
	{
		task_options();
		~task_options();
	};

	Concurrency::task<bool> create_task<Windows::Foundation::IAsyncOperation<bool> ^>(Windows::Foundation::IAsyncOperation<bool> ^,Concurrency::task_options);
};

class ConnectedStandbyHelper
{
	long NotificationCallback(unsigned long);
public:
	long Initialize(IWindowDispatcherConnectedStandby *);
	void HandleViewCreated(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	void Shutdown();
};

struct ContextMenuArgs
{
	Geometry::CPoint GetScreenLocation(IMultitaskingViewElement *);
};

struct ControlCenterExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

struct CopyToViewValueSetBase
{
	virtual long GetSite(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual long Update(IUnknown *);
};

namespace Cortana
{
	namespace ViewModeHelpers
	{
		ViewModeHelpers::MainViewMode GetMainViewMode(HSTRING__ *);
		ViewModeHelpers::MainViewMode GetMainViewMode(unsigned short const *,unsigned __int64,unsigned short const *,unsigned __int64);
		bool AreEqual(unsigned short const *,unsigned __int64,unsigned short const *,unsigned __int64);
		long GetArgsSubstring(unsigned short const *,unsigned short const *,unsigned int,unsigned short const * *,unsigned __int64 *);
	};

};

namespace CortanaAvailability
{
	long CheckCortanaAvailability(unsigned char *);
	long IsCortanaAllowedOnSKU(unsigned char *);
	long IsCortanaPackageInstalled(unsigned char *);
	long IsDeveloperOverrideEnabled(unsigned char *);
	long IsEnterprisePolicyEnabled(unsigned char *);
	long TryGetInstalledPackage(Windows::ApplicationModel::IPackage * *);
	long WriteCortanaAvailabilityToRegistry();
};

class CortanaDesktopExperienceView
{
	HWND__ * GetHwnd();
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> GetViewWrapper();
	Windows::Internal::Shell::Experience::ShellExperienceViewBorderEdge GetBorderFlagFromStuckEdge(EDGEUI_TRAYSTUCKPLACE,bool,bool);
	bool GetAppsUseLightTheme();
	bool GetColorPrevalenceEnabled();
	bool GetHideFileExtensionsEnabled();
	bool IsCortiniSupported(HMONITOR__ *);
	bool IsViewVisible();
	int GetGutterWidth();
	int GetSpeechTextInputHeight(HMONITOR__ *);
	long ApplyCortanaWindowRegion(tagRECT,tagRECT,tagRECT,tagRECT,bool,bool,HMONITOR__ *);
	long ApplyCortanaWindowRegionWithCustomRects(Windows::Foundation::Rect);
	long ApplyCortiniWindowRegion(HRGN__ *,tagRECT,HMONITOR__ *);
	long BuildAdditionalArgsString(HMONITOR__ *,int,HSTRING__ * *);
	long ComputeAndOnTraySearchItemChanged(HMONITOR__ *);
	long DismissCortanaApp();
	long EnsureImmersiveShell();
	long EnsureInputHostManager();
	long GetActivateArgs(HSTRING__ *,HSTRING__ * *);
	long GetEdgeUIManager(HMONITOR__ *,IEdgeUiManager * *);
	long GetImmersiveLauncherMonitor(HMONITOR__ * *);
	long GetImmersiveLauncherMonitorInformation(HMONITOR__ * *,tagRECT *,tagRECT *,tagRECT *,EDGEUI_TRAYSTUCKPLACE *,bool *);
	long GetMonitorInformation(HMONITOR__ *,tagRECT *,tagRECT *,tagRECT *,EDGEUI_TRAYSTUCKPLACE *,bool *);
	long GetStartSize(Windows::Foundation::Size *);
	long GetStuckPlace(HMONITOR__ *,EDGEUI_TRAYSTUCKPLACE *);
	long GetViewWrapperAs<INtUserViewWrapper>(Microsoft::WRL::ComPtr<INtUserViewWrapper> &);
	long IsShowForTransitions(HSTRING__ *,bool *);
	long IsTraySearchBoxVisible(HMONITOR__ *,bool *);
	long NotifyAppWithTransitionType(unsigned short const *,Windows::Internal::Shell::Experience::CortanaAppTransitionType,HSTRING__ *);
	long NotifyShellModeChanged();
	long NotifySpeechTextInputHeightChange();
	long NotifyView(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long NotifyView(unsigned short const *,Windows::Foundation::Collections::IPropertySet *);
	long OnTargetedMessage(CortanaDesktopExperienceView::TargetedMessageKind,unsigned short);
	long OnViewChanged(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *);
	long OnViewCloaking();
	long OnViewEvent(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *);
	long OnViewEventQueued(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long OnViewHidden();
	long OnViewPropertiesChanging();
	long OnViewShown();
	long OnViewUncloaking();
	long OnWindowSizeChangeHandled();
	long PositionAlongsideStart();
	long PositionCortanaWindow(bool,bool);
	long PostTargetedMessage(CortanaDesktopExperienceView::TargetedMessageKind,unsigned short);
	long RegisterGlobalBackButton();
	long Relaunch(HSTRING__ *,Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	long RemoveRectFromRegion(HRGN__ *,int,int,int,int);
	long ResetCortanaWindowRegion();
	long ReturnForegroundToLockScreenCurtainIfNeeded();
	long SetPositioningAnchorForNotificationAnimation();
	long SetZBand(ZBID);
	long ShowBorder(tagRECT *);
	long ShowInternal(HSTRING__ *,Windows::Internal::Shell::Experience::ShellExperienceViewFocusOptions,Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	long UnregisterGlobalBackButton();
	static HICON__ * HICONFromBitmap(HBITMAP__ *);
	static __int64 s_CortanaAltTabProxyWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static long SetDefaultIconForProxyWindowThumbnail(HWND__ *);
	tagRECT CalculateLastActivatedTrayItemRect();
	tagRECT ComputeCortanaWindowRect(EDGEUI_TRAYSTUCKPLACE,int,int,tagRECT,bool);
	virtual long AboveLockAppActiveChanged(bool);
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long LockScreenActiveChanged(bool);
	virtual long OnDismiss();
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long ShellModeChanged(bool);
	virtual long ShellReadyChanged();
	virtual long TryInvokeBack();
	virtual long WindowsHelloActiveChanged(bool);
	void CreateCortanaAltTabProxyWindow();
	void EnsureForegroundRightsForAmbientModeIfNeeded();
	void SetExplicitDimissEnabled(unsigned char);
	void UpdateSuggestionsShowing(unsigned char);
public:
	CortanaDesktopExperienceView();
	long RuntimeClassInitialize(IServiceProvider *,TwinUI::Cortana::ICortanaExperienceManagerNotification *);
	long RuntimeClassInitialize(IServiceProvider *,TwinUI::Cortana::ICortanaExperienceManagerNotification *,wistd::unique_ptr<TwinUI::Cortana::ICortanaWNFService,wistd::default_delete<TwinUI::Cortana::ICortanaWNFService> >);
	virtual long ActivateView(Windows::Internal::Shell::Experience::IShellExperienceView *,HSTRING__ *,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *);
	virtual long CanHandleView(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::ShellExperiencePositionerType,unsigned char *);
	virtual long CanTransitionFromStart(unsigned char *);
	virtual long ControlGained(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::ShellExperiencePositionerType,IInspectable *);
	virtual long ControlLost(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::ShellExperiencePositionerType,IInspectable * *);
	virtual long Dispose();
	virtual long Hide();
	virtual long MinimizeToBoxMode();
	virtual long OnPearlRectChanged();
	virtual long OnTraySearchItemChanged(Windows::Foundation::Rect,Windows::Foundation::Rect);
	virtual long OnUIATreesUnlinked();
	virtual long OnWorkAreaChanged();
	virtual long PrepareForAppTransition(Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	virtual long Show(HSTRING__ *,Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	virtual long ShowWithStart(unsigned char);
	virtual long TakeKeyboardFocus();
	virtual long Uncloak();
	virtual long get_IsExplicitDismissEnabled(unsigned char *);
	virtual long get_LockCurtainShowing(unsigned char *);
	virtual long get_SuggestionsShowing(unsigned char *);
	virtual long get_Type(Windows::Internal::Shell::Experience::ShellExperiencePositionerType *);
	virtual ~CortanaDesktopExperienceView();
};

namespace CortanaExperienceHelpers
{
	namespace Testing
	{
		bool IsTestAppConfiguredAsReplacement();
		long IsTestAppConfiguredAsReplacement(bool *);
	};

	long GetCortanaRegKey(unsigned short const *,unsigned long *);
	long IsCortanaAvailable(unsigned char *);
	long SetCortanaRegKey(unsigned short const *,unsigned long,unsigned long);
	winrt::hstring GetStoreAppPFN();
	winrt::hstring GetStoreCortanaAumId();
	winrt::hstring TryGetCortanaAumid();
};

struct CortanaExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

class CortanaExperienceManagerNotification
{
	bool _CanNotify();
public:
	CortanaExperienceManagerNotification(CortanaSharedExperienceManager *);
	virtual long Close();
	virtual void DisableNotifications();
	virtual void EnableNotifications();
	virtual void OnAllowForegroundRightsRequested();
	virtual void OnAppRequestedDismiss();
	virtual void OnAppRequestedTransition();
	virtual void OnAppTransitionCompleted();
	virtual void OnDeviceLocked();
	virtual void OnDeviceUnlocked();
	virtual void OnEnsureForegroundRightsRequested();
	virtual void OnFocusNavigate(Windows::Internal::Shell::Experience::FocusNavigateDirection);
	virtual void OnHidden();
	virtual void OnNotifyRelaunch(Windows::Foundation::Rect);
	virtual void OnSetForegroundFailed();
	virtual void OnShown(Windows::Foundation::Rect);
	virtual void OnStartAndCortanaDismissRequested();
	virtual void OnSuggestionsHidden();
	virtual void OnSuggestionsShown();
};

namespace CortanaFeatureConfiguration
{
	CortanaFeatureConfiguration::FeatureBehaviorMap * getSharedFeatureTable();
	long GetDWORD(CortanaFeatureConfiguration::FeatureId,unsigned long *);
	long GetDWORDCore(unsigned short const *,CortanaFeatureConfiguration::FeatureFlightDataType,unsigned long,unsigned long *);
	long GetFeatureValue(unsigned short const *,bool (*)(),unsigned long,CortanaFeatureConfiguration::FeatureValue &);
	long GetFlightedValue(unsigned short const *,CortanaFeatureConfiguration::FeatureValue &,unsigned char &);
	long GetOverrideValue(unsigned short const *,CortanaFeatureConfiguration::FeatureValue &,unsigned char &);
};

namespace CortanaFlightingHelpers
{
	unsigned char IsImmersiveSearchEnabled();
	unsigned char IsWideQFDeltaEnabled();
};

struct CortanaProactiveLogging
{
	static _tlgProvider_t const * Provider();
};

struct CortanaProactiveTelemetry
{
	class CortanaExperienceManager_Dismiss
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CortanaExperienceManager_Dismiss();
	};

	class CortanaExperienceManager_GetCortanaEntryPointAndArgs
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CortanaExperienceManager_GetCortanaEntryPointAndArgs();
	};

	class CortanaExperienceManager_Hide
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CortanaExperienceManager_Hide();
	};

	class CortanaExperienceManager_OnEventQueued
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void CortanaExperienceManager_ShellSearchReadyEventSet();
		void StartActivity(unsigned short const *);
		~CortanaExperienceManager_OnEventQueued();
	};

	class CortanaExperienceManager_OnViewPropertiesChanging
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CortanaExperienceManager_OnViewPropertiesChanging();
	};

	class CortanaExperienceManager_PearlRectMayHaveChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CortanaExperienceManager_PearlRectMayHaveChanged();
	};

	class CortanaExperienceManager_PositionCortanaWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(int,int);
		void Stop(int,int,int,int);
		~CortanaExperienceManager_PositionCortanaWindow();
	};

	class CortanaExperienceManager_PreLaunch
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void CortanaExperienceManager_PreLaunch_LaunchRequired();
		void StartActivity();
		~CortanaExperienceManager_PreLaunch();
	};

	class CortanaExperienceManager_ShowDocked
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void CortanaExperienceManager_ShowDocked_LaunchArgs<unsigned short const * &>(unsigned short const * &);
		void StartActivity(unsigned short const *,unsigned short const *);
		~CortanaExperienceManager_ShowDocked();
	};

	class CortanaExperienceManager_ShowWithStart
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CortanaExperienceManager_ShowWithStart();
	};

	class CortanaStoreApp_CortanaAvailable
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void Cortana_AllowedOnSKU<unsigned char &>(unsigned char &);
		void Cortana_AppInstalled<unsigned char &>(unsigned char &);
		void Cortana_CortanaAvailable<unsigned char &>(unsigned char &);
		void Cortana_DeveloperOverride<unsigned char &>(unsigned char &);
		void Cortana_EnterprisePolicyEnabled<unsigned char &>(unsigned char &);
		void StartActivity();
		~CortanaStoreApp_CortanaAvailable();
	};

	static void CortanaExperienceManager_CortanaTabletMode<bool &>(bool &);
	static void CortanaExperienceManager_DeferredSuspensionTimerCanceled();
	static void CortanaExperienceManager_DeferredSuspensionTimerStarted();
	static void CortanaExperienceManager_OnClientWindowReadyForPresentationChanged();
	static void CortanaExperienceManager_SetPositioningAnchorRect<float &,float &,float &,float &>(float &,float &,float &,float &);
	static void CortanaExperienceManager_SuspensionAllowedByApp<bool &>(bool &);
	static void CortanaExperienceManager_SuspensionDisabled();
	static void CortanaExperienceManager_SuspensionEnabled();
	static void CortanaStoreAppExperienceManager_WNFReentrancyGuard();
	static void CortanaStoreApp_AppNotFoundWithExpectedExtension();
	static void OnPriorityBoostProcessed<long &,unsigned int &>(long &,unsigned int &);
	static void OnPriorityUnboostProcessed<long &,unsigned int &>(long &,unsigned int &);
};

namespace CortanaRegistrySettings
{
	bool _Boolify(unsigned long);
	long GetCortanaRegistrySetting<bool>(unsigned short const *,bool (*)(unsigned long),bool,bool *,bool *);
};

class CortanaSharedExperienceManager
{
	Microsoft::WRL::ComPtr<TwinUI::Cortana::ICortanaExperienceView> GetDesktopView();
	Microsoft::WRL::ComPtr<TwinUI::Cortana::ICortanaExperienceView> TryGetDesktopViewIfActive();
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> _GetViewWrapper();
	bool _IsViewVisible();
	long _AllowForegroundRights();
	long _ApplyPriorityBoostIfNeeded();
	long _ApplyPriorityUnboostIfNeeded();
	long _CancelDeferredSuspensionTimer();
	long _CreateShellExperienceView();
	long _GetCortanaEntryPointAndArgs(unsigned short const *,unsigned int,HSTRING__ * *,HSTRING__ * *);
	long _GetImmersiveShell(IServiceProvider * *);
	long _GetRegisteredForForegroundControl(ITrustedComponentForegroundControl * *);
	long _GetViewWrapperAs<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>(Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState> &);
	long _GetViewWrapperAs<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies>(Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies> &);
	long _ImmersiveShellQueryService(_GUID const &,_GUID const &,void * *);
	long _NormalizeAndAddPositionerArgs(HSTRING__ *,Windows::Internal::Shell::Experience::IShellExperiencePositioner *,HSTRING__ * *);
	long _OnClientWindowReadyForPresentationChangedHandler(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long _OnDeferredSuspensionTimer();
	long _OnMessageHandler(unsigned int,unsigned __int64,__int64);
	long _OnPriorityUnboostRequested();
	long _OnViewChangedHandler(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *);
	long _OnViewCreated();
	long _OnViewDestroyed();
	long _OnViewEvent(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long _OnViewEventHandler(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *);
	long _RegisterMessages();
	long _RegisterViewPresentationChanged();
	long _ResetActivationTimeoutPolicy();
	long _StartActivationTimeoutPolicy();
	long _StartDeferredSuspensionTimer();
	long _UnregisterViewPresentationChanged();
	static long _GetLaunchArgsSubstring(unsigned short const *,unsigned short const *,unsigned int,unsigned short const * *,unsigned __int64 *);
public:
	CortanaSharedExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	long RuntimeClassInitialize(IServiceProvider *,TwinUI::Cortana::ICortanaExperienceManagerNotification *,wistd::unique_ptr<TwinUI::Cortana::IPositionerSelector,wistd::default_delete<TwinUI::Cortana::IPositionerSelector> >);
	virtual long CanTransitionFromStart(unsigned char *);
	virtual long Close();
	virtual long EnsureForegroundRights();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetWindowHandle(unsigned __int64 *);
	virtual long Hide();
	virtual long InitializeTrustedComponentForegroundControl(ITrustedComponentForegroundControl *);
	virtual long MinimizeToBoxMode();
	virtual long NotifyUIATreesUnlinked();
	virtual long PearlRectMayHaveChanged();
	virtual long Prelaunch(unsigned char);
	virtual long PrepareForAppTransition(Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPositioningAnchorRect(Windows::Foundation::Rect,Windows::Foundation::Rect);
	virtual long Show(HSTRING__ *,Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	virtual long ShowWithStart(unsigned char);
	virtual long ShutdownTrustedComponentForegroundControl();
	virtual long TakeKeyboardFocus();
	virtual long Uncloak();
	virtual long WorkAreaMayHaveChanged();
	virtual long add_AppRequestedDismiss(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_AppRequestedTransition(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_AppTransitionCompleted(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_Destroyed(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_DeviceLocked(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_DeviceUnlocked(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_FocusNavigate(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *> *,EventRegistrationToken *);
	virtual long add_Hidden(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_LaunchResult(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int> *,EventRegistrationToken *);
	virtual long add_NotifyRelaunch(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect> *,EventRegistrationToken *);
	virtual long add_SetForegroundFailed(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_Shown(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> *,EventRegistrationToken *);
	virtual long add_StartAndCortanaDismissRequested(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_SuggestionsHidden(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_SuggestionsShown(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_IsExplicitDismissEnabled(unsigned char *);
	virtual long get_LockCurtainShowing(unsigned char *);
	virtual long get_SuggestionsShowing(unsigned char *);
	virtual long remove_AppRequestedDismiss(EventRegistrationToken);
	virtual long remove_AppRequestedTransition(EventRegistrationToken);
	virtual long remove_AppTransitionCompleted(EventRegistrationToken);
	virtual long remove_Destroyed(EventRegistrationToken);
	virtual long remove_DeviceLocked(EventRegistrationToken);
	virtual long remove_DeviceUnlocked(EventRegistrationToken);
	virtual long remove_FocusNavigate(EventRegistrationToken);
	virtual long remove_Hidden(EventRegistrationToken);
	virtual long remove_LaunchResult(EventRegistrationToken);
	virtual long remove_NotifyRelaunch(EventRegistrationToken);
	virtual long remove_SetForegroundFailed(EventRegistrationToken);
	virtual long remove_Shown(EventRegistrationToken);
	virtual long remove_StartAndCortanaDismissRequested(EventRegistrationToken);
	virtual long remove_SuggestionsHidden(EventRegistrationToken);
	virtual long remove_SuggestionsShown(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CortanaSharedExperienceManager();
};

class CortanaStoreAppExperienceManager
{
	long ActivateAppAsync(bool,unsigned short const *);
	long CreateCortanaAltTabProxyWindow();
	long GetMonitorInformation(HMONITOR__ *,EDGEUI_TRAYSTUCKPLACE *,tagRECT *,tagRECT *,tagRECT *);
	long HandleInputHostVisibilityChange(HWND__ *);
	long NotifyTrayOfCortanaVisibility(bool);
	long OnViewConsolidationRequested();
	long PositionCortanaWindow();
	long ReportActiveExperienceAboveLock(bool);
	long SetBorder(EDGEUI_TRAYSTUCKPLACE,bool);
	long SetZBand();
	long SubscribeToAppEvents();
	long SubscribeToServicesInternal(IServiceProvider *);
	long UnsubscribeFromServicesInternal();
	static HICON__ * HICONFromBitmap(HBITMAP__ *);
	static __int64 CortanaAltTabProxyWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static long SetDefaultIconForProxyWindowThumbnail(HWND__ *);
	static unsigned short const * const s_PreLaunchActivationKey;
	tagRECT ComputeCortanaWindowRect(EDGEUI_TRAYSTUCKPLACE,int,int,tagRECT,tagRECT,tagRECT,tagRECT,Geometry::CRect,int);
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
	virtual ~CortanaStoreAppExperienceManager();
	void CheckThread();
	void SetAltTabWindowVisibility(bool);
public:
	CortanaStoreAppExperienceManager();
	long RuntimeClassInitialize();
	virtual long ActivateAppWithArgumentsAsync(unsigned short const *);
	virtual long HandleTryResizeView(HWND__ *,tagSIZE,int *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long LaunchOrCloseAppAsync();
	virtual long PearlRectMayHaveChanged(HMONITOR__ *);
	virtual long PerformDelayedInitialization();
	virtual long SetCortanaTaskbarButtonRect(tagRECT);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

struct CortanaStoreAppExperienceManagerFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

class CoverWindowAcc
{
	static unsigned short const * const s_edgeActionCenter;
	static unsigned short const * const s_edgeSwitch;
	static unsigned short const * const s_edgeTop;
public:
	CoverWindowAcc();
	long RuntimeClassInitialize(HWND__ *,unsigned short const *,IRawElementProviderFragment *);
	virtual long ElementProviderFromPoint(double,double,IRawElementProviderFragment * *);
	virtual long GetEmbeddedFragmentRoots(tagSAFEARRAY * *);
	virtual long GetFocus(IRawElementProviderFragment * *);
	virtual long GetPatternProvider(int,IUnknown * *);
	virtual long GetPropertyValue(int,tagVARIANT *);
	virtual long GetRuntimeId(tagSAFEARRAY * *);
	virtual long GetSibling(IRawElementProviderSimple *,NavigateDirection,IRawElementProviderFragment * *);
	virtual long Navigate(NavigateDirection,IRawElementProviderFragment * *);
	virtual long SetFocus();
	virtual long get_BoundingRectangle(UiaRect *);
	virtual long get_FragmentRoot(IRawElementProviderFragmentRoot * *);
	virtual long get_HostRawElementProvider(IRawElementProviderSimple * *);
	virtual long get_ProviderOptions(ProviderOptions *);
	virtual void SetBoundingRect(Geometry::CRect const &);
	virtual void UpdateScreenEdges();
};

struct CreationThreadDispatcher
{
	CreationThreadDispatcher();
	long RunAsync<<lambda_8f2a2ffc4d06e565a800bfc0e8cd8d27> >(<lambda_8f2a2ffc4d06e565a800bfc0e8cd8d27>,unsigned long);
	long RuntimeClassInitialize();
};

class CustomShellManager
{
	bool IsCurrentProcessCustomShellHost();
public:
	CustomShellManager();
	long RuntimeClassInitialize();
	virtual long TryLaunchCustomShell(int *);
};

namespace D2DUtil
{
	_D3DCOLORVALUE ConvertColor(unsigned long,float);
};

namespace DCompThumbnailHelpers
{
	struct CDCompFactoryBatcher
	{
		CDCompFactoryBatcher(Microsoft::WRL::ComPtr<IDCompBatcher> const &,_GUID const &,IDCompBatchAnimationCallback *);
		void BeginBatch(Microsoft::WRL::ComPtr<IDCompBatcher> const &,_GUID const &,IDCompBatchAnimationCallback *);
		~CDCompFactoryBatcher();
	};

	long CreateDesktopBackgroundThumbnail(ISwitchThumbnailFactory *,IDCompThumbnail *,tagRECT const &,tagSIZE const *,IDCompThumbnail * *);
};

class DDAScreenCapture
{
	long Initialize();
	long InitializeDuplication();
	long IsDesktopVisibleOnMonitor(bool *);
	long IsScreenDRMProtected(bool *);
	long TryAcquireFrame(DXGI_OUTDUPL_FRAME_INFO *,IDXGIResource * *);
public:
	long GetScreenCaptureAsWicBitmapSource(IWICImagingFactory *,IWICBitmapSource * *);
	static long CreateInstance(DDAScreenCapture * *,HMONITOR__ *);
};

namespace DPIToPPIHelpers
{
	int ScaleByPPI(int,HWND__ *,DPIToPPIHelpers::ScaleModifier);
	int ScaleBySpecificDPI(int,int,DPIToPPIHelpers::ScaleModifier);
	int ScaleByType(DPIToPPIHelpers::ScaleType,int,HWND__ *,int,DPIToPPIHelpers::ScaleModifier);
	long DrawThemeTextExPPI(HWND__ *,DPIToPPIHelpers::ScaleType,unsigned int *,void *,HDC__ *,int,int,unsigned short const *,int,unsigned long,tagRECT *,_DTTOPTS *);
	long GetThemeTextExtentPPI(HWND__ *,DPIToPPIHelpers::ScaleType,unsigned int *,void *,HDC__ *,int,int,unsigned short const *,int,unsigned long,_DTTOPTS *,tagRECT *,tagRECT *);
};

namespace DWriteUtil
{
	long LoadDWriteTextFormat(IDWriteFactory *,unsigned short const *,DWRITE_FONT_WEIGHT,float,DWRITE_TEXT_ALIGNMENT,DWRITE_PARAGRAPH_ALIGNMENT,DWRITE_READING_DIRECTION,IDWriteTextFormat * *);
};

class DefaultLaunchPositionOverride
{
	bool IsCortanaApp(IApplicationView *);
public:
	virtual long TryGetLaunchPosition(IApplicationView *,std::optional<tagRECT> *);
};

struct DelayedTileActivationCallSite
{
	DelayedTileActivationCallSite(IUnknown *,HWND__ *,IAM_DESKTOP_SWITCH_OPTION,std::optional<bool>);
	virtual long ContextSensitiveHelp(int);
	virtual long GetDesktopSwitchPreference(IAM_DESKTOP_SWITCH_OPTION *);
	virtual long GetWindow(HWND__ * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ShouldSwitchToDesktop();
};

class DesktopBlueLightReductionManager
{
	void SubscribeToColorOverrideStateChange();
public:
	DesktopBlueLightReductionManager();
	long RuntimeClassInitialize();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long PerformDelayedInitialization();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long SetSite(IUnknown *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

struct DesktopOperation
{
	DesktopOperation();
	virtual long ConvertLayoutToDesktop();
	virtual void SetOldAppLayout(IAppLayout *);
	virtual void SetTempAppVisuals(ITemporaryAppVisualArray *);
};

class DesktopPositionerTelemetry
{
protected:
	void Create();
public:
	void InitializePositionCloak_(IApplicationView *);
};

class DesktopSingleViewShellExperiencePersonality
{
	long RegisterSessionIdleDetector();
public:
	virtual bool IsPersonality(void const *);
	virtual long BringToFocus();
	virtual long BringToForeground();
	virtual long EnableSessionIdleNotifications(IServiceProvider *);
	virtual long HideView();
	virtual long IsViewVisible(bool *);
	virtual long OnViewWrapperChanged();
	virtual long SetPosition(tagRECT const *);
	virtual long SetWindowBand(ZBID);
	virtual long ShowBorder(CSingleViewShellExperience::Border,ACCENT_STATE,unsigned long,tagRECT const *);
	virtual long ShowView();
	virtual ~DesktopSingleViewShellExperiencePersonality();
};

namespace DesktopWallpaperHelpers
{
	long CreateDCompDevice(IDCompositionDevice * *);
	long CreateDesktopWallpaperHWND(Geometry::CRect const &,HWND__ * *);
	unsigned short const * const c_desktopWallpaperWindowClass;
};

struct DragAndDropArgs
{
	DragAndDropArgs(DragEffects,IUnknown *,float);
};

class DragData
{
	DropTargetEnabledFlags GetDropTargetEnabledList(WindowArrangementViewDragData::DragDataFlags);
	long AddDropTarget(WindowArrangementViewDragData::DropLocation,Geometry::CRect const &,bool);
	long GetLeftAndRightItems(IAppLayoutItem * *,IAppLayoutItem * *);
	long GetReplaceDropTargetRects(Geometry::CRect *,Geometry::CRect *);
	long InitDropTargets(WindowArrangementViewDragData::DragDataFlags);
public:
	DragData();
	long RuntimeClassInitialize(IUnknown *,IAppLayout *,IApplicationView *,WindowArrangementViewDragData::DragDataFlags);
	virtual PlaceModeFeedbackTarget GetFeedbackTarget();
	virtual WindowArrangementViewDragData::DropLocation GetCurrentPlaceTarget();
	virtual WindowArrangementViewDragData::DropLocation GetPreviousPlaceTarget();
	virtual WindowArrangementViewDragData::DropTarget GetTarget();
	virtual WindowArrangementViewDragData::DropTarget HitTest(Geometry::CPoint const &);
	virtual long Update(Geometry::CPoint const &);
	virtual void ResetFeedbackTarget();
	virtual void UpdateFeedbackTarget(tagPOINT,tagRECT,PlaceModeFeedbackType,bool *);
	virtual void UpdatePlaceTarget(WindowArrangementViewDragData::DropLocation);
};

namespace DragDropSimulatorTelemetryProvider
{
	class OnSimulateDrop
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(long);
		~OnSimulateDrop();
	};

};

class DragInputHandler
{
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	DragInputHandler();
	long RuntimeClassInitialize(IExternalDragHost *);
	virtual long SetInputCallback(ITabletModeInputCallback *);
	virtual long Shutdown();
};

namespace EdpHelpers
{
	bool IsLocalOrRemoteDebuggerPresent(unsigned long);
	long GetEnterpriseIdForWindow(HWND__ *,unsigned short * *);
	long GetProcessImageName(unsigned long,unsigned short * *);
};

class ElementDragData
{
	bool IsExternalDrag();
	float GetExternalDragProgress();
	long GetDragSourceLocation(Geometry::CRect *);
	long StartExternalDrag();
	void CancelDrag();
	void DragOver(MultitaskingViewPointerInputArgs const &);
	void FinishDrag(DropEffect);
public:
	ElementDragData();
	long RuntimeClassInitialize(ISwitchThumbnailFactory *,IMultitaskingViewElement *,IMultitaskingViewElement *,IUnknown *,DragMetrics const &,DragEffects);
	virtual long GetDragVisualLocation(Geometry::CRect *,Geometry::CPoint *);
	virtual long StartDrag(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual void KeyDown(unsigned int,ModifierKeys);
	virtual void KeyUp(unsigned int,ModifierKeys);
	virtual void LostCapture();
	virtual void PointerDown(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual void PointerHover(MultitaskingViewPointerInputArgs const &);
	virtual void PointerLeave();
	virtual void PointerMove(MultitaskingViewPointerInputArgs const &);
	virtual void PointerUp(PointerButton,MultitaskingViewPointerInputArgs const &);
};

namespace ElementHelpers
{
	Geometry::CRect GetScreenLocation(IMultitaskingViewElement *);
	Geometry::CRect MapElementRectToAncestor(IMultitaskingViewElement *,IMultitaskingViewElement *,Geometry::CRect);
	Microsoft::WRL::ComPtr<IMultitaskingViewElement> GetAccessibleAncestor(IMultitaskingViewElement *);
	Microsoft::WRL::ComPtr<IMultitaskingViewElement> GetAncestorElementOfType(IMultitaskingViewElement *,AnimationCoordinatorItemType);
	Microsoft::WRL::ComPtr<IMultitaskingViewElement> GetFocusedDescendant(IMultitaskingViewElement *);
	Microsoft::WRL::ComPtr<IMultitaskingViewElement> GetRootElement(IMultitaskingViewElement *);
	ModifierKeys GetModifierKeyState();
	PointerButton GetPointerButtonForMessage(unsigned int);
	bool IsSameElement(IMultitaskingViewElement *,IMultitaskingViewElement *);
	long SendUiaPropertyEvent<bool>(IMultitaskingViewElement *,int,bool,bool);
	long SendUiaPropertyEvent<double>(IMultitaskingViewElement *,int,double,double);
	unsigned int MapToChildNavDir(unsigned int);
	void SetFocusToElement(IMultitaskingViewElement *);
};

struct EmulatedFullScreenManager
{
	EmulatedFullScreenManager();
	long RuntimeClassInitialize();
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long PromoteVisualProxyWindow(HWND__ *);
};

namespace EnumWindowsHelpers
{
	int LambdaEnumWindowsProc<<lambda_1d72a6719327f90c5d8253a2407aff64> >(HWND__ *,__int64);
	int LambdaEnumWindowsProc<<lambda_473ea9c22bd898f9bd25c8344d56a065> >(HWND__ *,__int64);
	int LambdaEnumWindowsProc<<lambda_54c83054385b952be3ab173b3a76abf0> >(HWND__ *,__int64);
	int LambdaEnumWindowsProc<<lambda_5560a5ae6a27c3052849bcc6223d54f3> >(HWND__ *,__int64);
	int LambdaEnumWindowsProc<<lambda_df7356024bf744f3615be68a3ea90a6d> >(HWND__ *,__int64);
	int LambdaEnumWindowsProc<<lambda_e2c0853faeb8110aeaae9508528948ac> >(HWND__ *,__int64);
};

namespace EventRegistrationHelpers
{
	struct EventRegistration<IImmersiveMonitorNotificationService,IImmersiveMonitorNotification>
	{
		EventRegistration<IImmersiveMonitorNotificationService,IImmersiveMonitorNotification>();
	};

	struct EventRegistration<IObservableObjectArray,IObservableObjectArrayChanged>
	{
		EventRegistration<IObservableObjectArray,IObservableObjectArrayChanged>();
	};

	struct EventRegistration<IObservableObjectArray,IObservableObjectArrayChangedBeginEnd>
	{
		EventRegistration<IObservableObjectArray,IObservableObjectArrayChangedBeginEnd>();
	};

	struct EventRegistration<IVirtualDesktopNotificationService,IVirtualDesktopNotification>
	{
		EventRegistration<IVirtualDesktopNotificationService,IVirtualDesktopNotification>();
	};

};

struct ExeData
{
	ExeData(ExeData const &);
	ExeData(unsigned int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
};

struct ExeDataCache
{
	std::optional<ExeData> GetCachedExeData(HWND__ *);
	std::optional<HWND__ *> TryGetWindowFromAppId(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	void DeleteCachedExeData(HWND__ *);
	void SaveExeData(HWND__ *,unsigned int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	~ExeDataCache();
};

struct ExePathToAppIdMapping
{
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetAppIdFromExePath(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetExePathFromAppId(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	void SaveAppIdForExePath(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
};

struct ExperienceHostLoggingTelemetry
{
	static void OnPriorityBoostProcessed<long &,unsigned int &>(long &,unsigned int &);
	static void OnPriorityUnboostProcessed<long &,unsigned int &>(long &,unsigned int &);
};

namespace ExperienceManagerUtils
{
	struct CopyableHString
	{
		CopyableHString(CopyableHString const &);
		~CopyableHString();
	};

	HWND__ * WindowFromViewWrapper(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	Microsoft::WRL::ComPtr<IInspectable> AsStrong<IInspectable>(Microsoft::WRL::WeakRef &);
	bool IsPreReleaseExperience();
	int GetPerMonitorDpi(HMONITOR__ *);
	int ScaleByDPI(int,int);
	int ScaleByPerMonitorDPI(int,HMONITOR__ *);
	int UnscaleByPerMonitorDPI(int,HMONITOR__ *);
	long GetHostExperiencePriorityManipulator(IServiceProvider *,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator * *);
	long GetHostExperiencePriorityManipulator(Windows::Internal::Shell::Experience::IShellExperienceManagerFactory *,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator * *);
	long PostToUIThread(IUnknown *,void *,__int64);
	long PostToUIThread(IUnknown *,void *,unsigned int,__int64);
	long RaiseReactivatedEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,unsigned long,HSTRING__ *,HSTRING__ *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *,Windows::Foundation::Collections::IPropertySet *);
	void ScaleByDPI(Windows::Foundation::Size const &,int,int &,int &);
};

struct EyeControlApp
{
	long Initialize(IEyeControlManager *);
	static long RawProc(void *,void const *,int);
	virtual ~EyeControlApp();
	void NotifySizeApplied(unsigned int,unsigned int,unsigned int,unsigned int);
	void NotifySizeChanged(unsigned int,unsigned int,unsigned int,unsigned int);
	void NotifyTransparencyApplied(int);
};

struct FeedsMicrosoftTelemetryProvider
{
	static _tlgProvider_t const * Provider();
};

class FocusHoldingTank
{
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	FocusHoldingTank();
	~FocusHoldingTank();
};

struct ForegroundStaging
{
	long Initialize();
	long SetActive();
	~ForegroundStaging();
};

class ForegroundStagingWindow
{
protected:
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	ForegroundStagingWindow();
	long RuntimeClassInitialize();
	virtual long SetActive();
	virtual void Destroy();
};

struct FrameFactory
{
	FrameFactory();
	long RuntimeClassInitialize(IPrivilegedPresentationOperations *);
	virtual long CreateFrameWithWrapper(IApplicationFrameWrapper * *);
	virtual long DestroyFrameWithWrapper(IApplicationFrameWrapper *);
	virtual long RegisterForFrameEvents(IApplicationFrameEventHandler *,unsigned long *);
	virtual long UnregisterForFrameEvents(unsigned long);
};

class FrameWrapper
{
	long ReconcileFramedView();
public:
	FrameWrapper();
	long RuntimeClassInitialize(IApplicationFrame *,IPrivilegedPresentationOperations *);
	virtual int IsEqualByFrame(IApplicationFrame *);
	virtual long GetFrame(IApplicationFrame * *);
	virtual long GetHostedRect(tagRECT *);
	virtual long PrepareFrameForDestroy();
	virtual long PresentFramedView();
	virtual long SetFramedView(IUnknown *);
	virtual long SetHostedPos(tagRECT const *);
	virtual long SetMaximumSize(tagSIZE const *);
	virtual long SetMinimumSize(tagSIZE const *);
	virtual long SetPointerActivationPolicy(_POINTER_ACTIVATION_POLICY);
	virtual long SetShellCloak(_SET_FRAME_CLOAK);
	virtual long SetSystemVisual(FRAME_SYSTEM_VISUAL);
	virtual long SetWindowBand(unsigned long);
	virtual long UpdateHostedViewPosition();
};

struct FrameworkViewTypeSetEventArgs
{
	FrameworkViewTypeSetEventArgs();
	virtual long get_ViewType(int *);
};

namespace FullScreenManagerTelemetry
{
	class FSMEnterFullScreenForView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,FULL_SCREEN_ENTER_REASON);
		~FSMEnterFullScreenForView();
	};

	class FSMExitFullScreenForView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,FULL_SCREEN_EXIT_REASON);
		~FSMExitFullScreenForView();
	};

	class FSMSetSystemOverlaysMode
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IImmersiveApplication *,FULL_SCREEN_OVERLAYS);
		~FSMSetSystemOverlaysMode();
	};

};

class FullScreenPositioner
{
	bool IsLightweightFullScreen(IApplicationView *);
	long AddView(IApplicationView *);
	long EraseAllViews();
	long FullScreenViewGetsFocus(IApplicationView *);
	long PrivateVisibleFullScreenViewChangedEvent(IApplicationView *,IApplicationView *);
	long RemoveView(IApplicationView *);
	long SetVisibleView(IApplicationView *);
	long SwitchToNonFullScreenApp();
	static void SetPositionerMonitor(IApplicationView *,IImmersiveMonitor *);
	void ApplyPendingPositioningOperations();
	void ApplyPresentationChanges(IApplicationView *,IPresentationRequestedArgs *);
	void ControlGainedHelper(IApplicationView *,SHELL_POSITIONER_TYPE,IPresentationRequestedArgs *,IApplicationView *);
	void FullScreenVisibilityChangedEvent(bool);
	void PositionView(IApplicationView *,FullScreenPositioner::PositionViewShowOperation,bool);
public:
	FullScreenPositioner();
	long RuntimeClassInitialize();
	virtual int ShouldBlockActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleFrameworkViewTypeChange(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual int ShouldHandlePresentationRequest(IApplicationView *,IInspectable *);
	virtual long ActiveZBandChangedForMonitor(unsigned long,unsigned long,IImmersiveMonitor *,MODE_CHANGE_REASON);
	virtual long ControlGainedForActivation(IApplicationView *,SHELL_POSITIONER_TYPE,IUnknown *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long FrameworkViewTypeChangedForView(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual long GetChromeConfigurationForView(IApplicationView *,int *,IApplicationViewTitlebarConfiguration * *);
	virtual long GetFullScreenView(IApplicationView * *);
	virtual long GetPosition(HWND__ *,_GUID const &,void * *);
	virtual long HandleRecoveryForView(IApplicationView *);
	virtual long HandleSwitchToView(IApplicationView *);
	virtual long HasFullScreenViewVisible(int *);
	virtual long HideFullScreenView();
	virtual long InitializePosition(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,IApplicationView *);
	virtual long InitializePositionWithShowCommand(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,unsigned long *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnTransitionStateChanged(unsigned __int64,__int64);
	virtual long OnViewClosing(IApplicationView *,int);
	virtual long PerformDelayedInitialization();
	virtual long PositionView(IApplicationView *,tagRECT,TRY_POSITION_VIEW_FLAGS);
	virtual long PresentationChangedForView(IApplicationView *,IInspectable *);
	virtual long Register(IFullScreenPositionerNotification *,unsigned long *);
	virtual long ResizeView(IApplicationView *,tagSIZE,tagSIZE);
	virtual long SetViewStateForDesiredAppState(IApplicationView *,APPLICATION_DESIRED_STATE);
	virtual long ShowFullScreenView(IApplicationView *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TabSwitchRequested(_GUID const &,IApplicationView *,IApplicationView *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long Unregister(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long UpdateLightweightFullScreenMode(IApplicationView *);
	virtual long ViewChangedTabGroup(IApplicationView *,_GUID const &,VIEW_CHANGED_TAB_GROUP_FLAGS);
	virtual void ControlGained(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown *,IPresentationRequestedArgs *);
	virtual void ControlLost(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown * *);
	virtual void SetCurrentView(IApplicationView *);
	virtual void SetTabletMode(bool);
	virtual ~FullScreenPositioner();
};

namespace FullScreenPositionerHelpers
{
	bool IsForcedFullScreenCompatModeEnabled();
	bool IsFullScreenCompatQuirkedApp(IApplicationView *);
	bool IsFullScreenModeDisabledForView(IApplicationView *);
	long CreateTitlebarConfiguration(IApplicationView *,bool,IApplicationViewTitlebarConfiguration * *);
};

struct FullScreenPositionerLogging
{
	static void TraceLoggingInfo(char const *,...);
};

namespace GDIHelpers
{
	Geometry::CRect GetDrawTextRectForCenteredGlyph(HDC__ *,unsigned short,Geometry::CRect const &);
	HBITMAP__ * PremultiplyAlphaChannel(HBITMAP__ *,bool);
	long AddBackgroundForIcon(HBITMAP__ *,unsigned long const &,tagSIZE const &,tagSIZE const &,tagSIZE const &,HBITMAP__ * *);
	void FillRectARGB(HDC__ *,tagRECT const *,unsigned char,unsigned long,bool);
	void PreProcessDIB(int,int,tagRGBQUAD *,int);
	void RenderCenteredGlyph(HDC__ *,HFONT__ *,unsigned short,unsigned long,unsigned long,Geometry::CRect const &);
	void RenderTransparentCenteredGlyph(HDC__ *,HFONT__ *,unsigned short,unsigned long,Geometry::CRect const &);
};

namespace Geometry
{
	struct CPoint
	{
		static CPoint ClientToScreen(HWND__ *,tagPOINT const &);
		static CPoint ScreenToClient(HWND__ *,tagPOINT const &);
	};

	struct CRect
	{
		CRect();
		CSegment1D GetHorizontalSegment();
		CSegment1D GetVerticalSegment();
		bool Contains(tagPOINT const &);
		bool Intersects(tagRECT const &);
		long GetHeight();
		long GetNearestEdgeToPointDistanceSquared(CPoint const &);
		long GetWidth();
		static CRect MulDiv(tagRECT const &,int,int);
	};

	struct CSize
	{
		static CSize MulDiv(tagSIZE const &,int,int);
	};

	bool operator==(Geometry::CRect const &,Geometry::CRect const &);
};

class GhostDivider
{
	HWND__ * GetPreviousWindow(IApplicationView *);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void RegisterWindowClass();
public:
	GhostDivider();
	long RuntimeClassInitialize(IPriviledgedPositioner *,IApplicationView *,GhostDividerPlacement);
	virtual long Show(GhostDividerShowFlags);
	virtual void Destroy();
	virtual void Solidify();
	virtual void Update(tagPOINT);
};

class GlobalInterfaceTable
{
	static IGlobalInterfaceTable * s_pGlobalInterfaceTable;
	static long s_Retrieve();
public:
	static long Marshal(IUnknown *,_GUID const &,unsigned long *);
	static long Unmarshal(unsigned long,_GUID const &,void * *);
	static void Revoke(unsigned long);
};

namespace GlobalsUtility
{
	class CGlobals<ApplicationViewManagement::CGlobals>
	{
		static ApplicationViewManagement::CGlobals * _s_pGlobals;
		static _RTL_SRWLOCK _s_lock;
	public:
		static Microsoft::WRL::ComPtr<ApplicationViewManagement::CGlobals> Get();
		static long InitializeGlobals<CApplicationViewManager *>(CApplicationViewManager *);
	};

};

struct GridLayout
{
	bool HitTestRow(Geometry::CPoint const &,unsigned __int64 *);
	long AddRow(unsigned __int64 *);
	long FindItem(Microsoft::WRL::ComPtr<IMultitaskingViewGridElement> const &,unsigned __int64 *,unsigned __int64 *);
	long RemoveItem(Microsoft::WRL::ComPtr<IMultitaskingViewGridElement> const &);
	void LayoutRows(Geometry::CRect const &);
	void Reset();
};

class GridLayoutFactory
{
	struct LayoutItem
	{
		void SetHeight(int);
	};

	struct LayoutRow
	{
		int GetMaxHeight();
		int GetNextMaxHeight();
	};

	Geometry::CSize _CalculateRowSize();
	int _FitRowToTargetWidth(GridLayoutFactory::LayoutRow const &);
	int _FitRowsToTargetWidth(CCoSimpleArray<GridLayoutFactory::LayoutRow,4294967294,CSimpleArrayStandardCompareHelper<GridLayoutFactory::LayoutRow> > &);
	int _GetMaximumRowHeight(unsigned __int64);
	long _AssignItemsToRows(GridLayout &,Geometry::CSize const &);
	long _CalculateNumberOfRows(CCoSimpleArray<GridLayoutFactory::LayoutItem,4294967294,CSimpleArrayStandardCompareHelper<GridLayoutFactory::LayoutItem> > const &,CCoSimpleArray<GridLayoutFactory::LayoutRow,4294967294,CSimpleArrayStandardCompareHelper<GridLayoutFactory::LayoutRow> > &,unsigned __int64 *,int *);
	long _SplitIntoRows(CCoSimpleArray<GridLayoutFactory::LayoutItem,4294967294,CSimpleArrayStandardCompareHelper<GridLayoutFactory::LayoutItem> > const &,unsigned __int64,CCoSimpleArray<GridLayoutFactory::LayoutRow,4294967294,CSimpleArrayStandardCompareHelper<GridLayoutFactory::LayoutRow> > &,int *);
	static int s_GetTotalWidthForHeight(CCoSimpleArray<GridLayoutFactory::LayoutItem,4294967294,CSimpleArrayStandardCompareHelper<GridLayoutFactory::LayoutItem> > const &,int,int,int);
	unsigned __int64 _GetMaximumVisibleRows();
	unsigned __int64 _SkipRowCountByContentWidth(CCoSimpleArray<GridLayoutFactory::LayoutItem,4294967294,CSimpleArrayStandardCompareHelper<GridLayoutFactory::LayoutItem> > const &);
public:
	GridLayoutFactory(GridMetrics const &,Geometry::CSize const &,Geometry::CRect const &,IObjectArray *);
	long LayoutItems(Geometry::CSize const &,GridLayout &);
};

struct GridRow
{
	void LayoutRow(Geometry::CRect const &);
};

class HideWallpaperIconsObject
{
	bool IsServer();
	bool IsSolidColorBackground();
public:
	long RuntimeClassInitialize();
};

struct HighContrastAwareOpacity<double>
{
	operator double();
};

struct HighContrastAwareOpacity<float>
{
	bool operator==(HighContrastAwareOpacity<float> const &);
	operator float();
};

namespace HolographicApps
{
	bool IsAppAllowedToBeResized(unsigned short const *);
};

struct HolographicForegroundAssistant
{
	HolographicForegroundAssistant();
	long RuntimeClassInitialize();
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long PurloinForeground();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class HolographicPositioner
{
	HolographicDetermination _IsPropertySetContextHolographic(Windows::Foundation::Collections::IPropertySet *);
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::Holographic::IViewHostItem> _FindViewHostItem(IApplicationView *);
	bool _IsDisplayContextHolographic();
	bool _IsInputContextHolographic();
	bool _IsViewContextHolographic(IApplicationView *,Windows::Foundation::Collections::IPropertySet *);
	bool _IsViewPropertySetHeuristicHolographic(IApplicationView *,Windows::Foundation::Collections::IPropertySet *);
	long _CloseView(IApplicationView *);
	long _CreateTitleBarConfiguration(IApplicationViewTitlebarConfiguration * *);
	long _EnableSystemVisuals(IApplicationView *,int);
	long _EnsureHolographicViewConfiguration(IApplicationView *);
	long _EnsureShellStateForView(IApplicationView *,bool *);
	long _EvaluateTakingControlOfWin32Slate(IApplicationView *,IWin32ApplicationView *,bool);
	long _HandleAppActivationResponse(IApplicationView *,Windows::Foundation::Collections::IPropertySet *);
	long _HandleControlGainedForView(IApplicationView *,Windows::Foundation::Collections::IPropertySet *);
	long _HandleControlLostForView(IApplicationView *);
	long _HandleSelfActivation(Windows::Foundation::Collections::IPropertySet *);
	long _HandleSwitchAsyncActivation(IApplicationView *,Windows::Foundation::Collections::IPropertySet *);
	long _IsPropertySetActivationSourceAumidForeground(Windows::Foundation::Collections::IPropertySet *,HWND__ *,int *);
	long _IsPropertySetActivationSourceProcessIdForeground(Windows::Foundation::Collections::IPropertySet *,HWND__ *,int *);
	long _IsSelfActivation(IApplicationView *,Windows::Foundation::Collections::IPropertySet *,int *);
	long _OnManagedWin32AppFocusGained(IApplicationView *,IWin32ApplicationView *);
	long _OnShellStateChanged(Windows::Internal::Shell::Holographic::ShellState);
	long _OnUnmanagedWin32ViewAdded(IApplicationView *,IWin32ApplicationView *);
	long _RaiseFrameworkViewTypeChanged(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	long _RaiseRequestNavigateToView(IApplicationView *);
	long _RaiseViewAdded(IApplicationView *);
	long _RaiseViewFocusGained(IApplicationView *);
	long _RaiseViewFocusLost(IApplicationView *);
	long _RaiseViewRemoved(IApplicationView *);
	long _SendViewTransitionNotification(IApplicationView *,ViewTransitionDirection);
	long _TransitionViewFromHolographic(IApplicationView *,Windows::Internal::Shell::Holographic::IViewHostItem *);
	long _TransitionViewToHolographic(IApplicationView *);
	static bool _IsViewWin32Slate(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	static long _GetApplicationViewUniqueId(IApplicationView *,unsigned int *);
	static unsigned int _GetApplicationViewUniqueIdForTracing(IApplicationView *);
public:
	HolographicPositioner();
	long RuntimeClassInitialize();
	virtual int ShouldBlockActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleFrameworkViewTypeChange(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual int ShouldHandlePresentationRequest(IApplicationView *,IInspectable *);
	virtual long BindSizeToRectangle(IApplicationView *,tagRECT);
	virtual long ControlGainedForActivation(IApplicationView *,SHELL_POSITIONER_TYPE,IUnknown *);
	virtual long EnterFullScreenForView(IApplicationView *);
	virtual long EvaluateHolographicContext(IApplicationView *,IUnknown *,int *);
	virtual long ExitFullScreenForView(IApplicationView *);
	virtual long FrameworkViewTypeChangedForView(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual long GetChromeConfigurationForView(IApplicationView *,int *,IApplicationViewTitlebarConfiguration * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetPosition(HWND__ *,_GUID const &,void * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HandleRecoveryForView(IApplicationView *);
	virtual long HandleSwitchToView(IApplicationView *);
	virtual long InitializePosition(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,IApplicationView *);
	virtual long InitializePositionWithShowCommand(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,unsigned long *);
	virtual long IsViewFullScreen(IApplicationView *,int *);
	virtual long IsViewManaged(IApplicationView *,int *);
	virtual long IsWindowManaged(HWND__ *,int *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnViewClosing(IApplicationView *,int);
	virtual long PositionView(IApplicationView *,tagRECT,TRY_POSITION_VIEW_FLAGS);
	virtual long PresentationChangedForView(IApplicationView *,IInspectable *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Register(IHolographicViewTransitionNotification *,unsigned long *);
	virtual long RegisterForViewEvents(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> *,EventRegistrationToken *);
	virtual long ResizeView(IApplicationView *,tagSIZE,tagSIZE);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TabSwitchRequested(_GUID const &,IApplicationView *,IApplicationView *);
	virtual long Unregister(unsigned long);
	virtual long UnregisterForViewEvents(EventRegistrationToken);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long ViewChangedTabGroup(IApplicationView *,_GUID const &,VIEW_CHANGED_TAB_GROUP_FLAGS);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void ControlGained(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown *,IPresentationRequestedArgs *);
	virtual void ControlLost(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown * *);
	virtual ~HolographicPositioner();
};

struct HolographicPositionerFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

struct HolographicPositionerProvider
{
	static _tlgProvider_t const * Provider();
};

struct HolographicPositionerTelemetry
{
	class ApplicationViewBackedViewHostItem_ChangeBounds
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,Windows::Internal::Shell::ViewManagerInterop::ViewBounds);
		~ApplicationViewBackedViewHostItem_ChangeBounds();
	};

	class ApplicationViewBackedViewHostItem_TakeForeground
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		void Stop(Windows::Internal::ComposableShell::ForegroundPolicyResult);
		~ApplicationViewBackedViewHostItem_TakeForeground();
	};

	class ApplicationViewBackedViewHostItem_put_Visibility
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,unsigned short const *,FRAMEWORK_VIEW_TYPE,bool);
		~ApplicationViewBackedViewHostItem_put_Visibility();
	};

	class ControlGained
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,SHELL_POSITIONER_TYPE,IUnknown *);
		~ControlGained();
	};

	class ControlGainedForActivation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,IUnknown *);
		~ControlGainedForActivation();
	};

	class ControlLost
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,SHELL_POSITIONER_TYPE);
		~ControlLost();
	};

	class Win32BackedViewHostItem_TakeForeground
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~Win32BackedViewHostItem_TakeForeground();
	};

	static void ApplicationViewBackedViewHostItem_get_Size<unsigned int &,float &,float &>(unsigned int &,float &,float &);
	static void SelfActivation();
};

namespace HolographicViewHelpers
{
	bool IsApplicationViewHolographic(IApplicationView *);
};

struct HolographicViewHostItemLedger
{
	HolographicViewHostItemLedger();
	long RuntimeClassInitialize();
	virtual Microsoft::WRL::ComPtr<Windows::Internal::Shell::Holographic::IViewHostItem> TryFindAndRemoveViewHostItem(IApplicationView *);
	virtual Microsoft::WRL::ComPtr<Windows::Internal::Shell::Holographic::IViewHostItem> TryFindViewHostItem(IApplicationView *);
	virtual long AddViewHostItem(Windows::Internal::Shell::Holographic::IViewHostItem *);
	virtual long GetLastActiveItem(Windows::Internal::Shell::Holographic::IViewHostItem * *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TryGetProcessIdByWindowId(unsigned int,unsigned int *);
	virtual long TryGetViewByUniqueId(Windows::Internal::ComposableShell::ComposableViewId,Windows::Internal::ComposableShell::IComposableView * *);
	virtual long TryGetViewByViewId(unsigned int,IInspectable * *);
	virtual long TryGetViewByWindowId(unsigned int,IInspectable * *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

struct HotTrackingElement
{
	struct DetectHotTrackChange
	{
		DetectHotTrackChange(HotTrackingElement *);
		~DetectHotTrackChange();
	};

	virtual void PointerLeave();
	virtual void PointerMove(MultitaskingViewPointerInputArgs const &);
};

class IActiveZBandNotificationServicePrivate
{
	virtual long Unregister(unsigned long);
};

struct IAnimationCoordinator
{
	virtual long ClipChanged(AnimationCoordinatorItemType,IUnknown *,Geometry::CRect const &,bool *);
	virtual long ItemAdded(AnimationCoordinatorItemType,IUnknown *,bool *);
	virtual long ItemHidden(AnimationCoordinatorItemType,IUnknown *,bool *);
	virtual long ItemRemoved(AnimationCoordinatorItemType,IUnknown *,bool *);
	virtual long ItemShown(AnimationCoordinatorItemType,IUnknown *,bool *);
	virtual long PositionChanged(AnimationCoordinatorItemType,IUnknown *,Geometry::CRect const &,bool *);
};

struct IAppLayoutCache
{
	IAppLayoutCache();
};

struct IAppLayoutCacheInternal
{
	IAppLayoutCacheInternal();
};

struct IAppLayoutOperationBuilder
{
	IAppLayoutOperationBuilder();
};

struct IApplicationViewChangeListener
{
	IApplicationViewChangeListener();
};

struct IApplicationViewIconLoader
{
	IApplicationViewIconLoader();
};

struct IApplicationViewIconLoaderNotifications
{
	IApplicationViewIconLoaderNotifications();
};

struct IBasicPositioner
{
	IBasicPositioner();
};

struct IEdgeUiTouchInvocation
{
	IEdgeUiTouchInvocation();
};

struct IExecuteCommand
{
	IExecuteCommand();
};

struct IEyeControlApp_Receive<EyeControlApp>
{
	static MsgCallInterfaceTableEntry const * const Interfaces;
	static MsgCallMethodDefinition const * const Methods;
	static MsgCallTypeDefinition const Type;
	static long Thunk_Message_Connect_9(void *,void * *);
	static long Thunk_Message_FocusEyeControl_14(void *,void * *);
	static long Thunk_Message_SetNoActivate_6(void *,void * *);
	static long Thunk_Message_SetSizeAndPosition_0(void *,void * *);
	static long Thunk_Message_SetTransparent_6(void *,void * *);
	static long Thunk_Message_Show_6(void *,void * *);
};

struct IFullScreenPositionerNotification
{
	IFullScreenPositionerNotification();
};

struct IGITCookieObject
{
	IGITCookieObject();
};

struct IIconLoadingFunctions
{
	IIconLoadingFunctions();
};

struct IImmersiveApplicationNotification
{
	IImmersiveApplicationNotification();
};

struct IImmersiveMonitorNotification
{
	IImmersiveMonitorNotification();
};

struct IImmersiveShellHookNotification
{
	IImmersiveShellHookNotification();
};

class IImmersiveSystemModeNotificationServicePrivate
{
	virtual long Unregister(unsigned long);
};

struct IInspectable
{
	IInspectable();
};

struct IInvokeProvider
{
	IInvokeProvider();
};

struct ILaunchTargetMonitor
{
	ILaunchTargetMonitor();
};

struct IMarshal
{
	IMarshal();
};

struct IMultitaskingViewElement
{
	virtual Geometry::CRect GetVisibleBounds();
};

struct IMultitaskingViewGestureState
{
	IMultitaskingViewGestureState();
};

struct IMultitaskingViewGestureStateInternal
{
	IMultitaskingViewGestureStateInternal();
};

struct IMultitaskingViewHost
{
	IMultitaskingViewHost();
};

struct IMultitaskingViewVisibilityService
{
	IMultitaskingViewVisibilityService();
};

struct IMultitaskingViewVisibilityServiceInternal
{
	IMultitaskingViewVisibilityServiceInternal();
};

struct IObjectArray
{
	IObjectArray();
};

struct IObjectWithAssociationElement
{
	IObjectWithAssociationElement();
};

struct IObjectWithSelection
{
	IObjectWithSelection();
};

struct IOleWindow
{
	IOleWindow();
};

struct IPrivilegedOperationsConsumer
{
	IPrivilegedOperationsConsumer();
};

struct IRawElementProviderSimple
{
	IRawElementProviderSimple();
};

struct IRemoteLauncherForegroundHandler
{
	IRemoteLauncherForegroundHandler();
};

struct IShellPositionerViewHandoff
{
	IShellPositionerViewHandoff();
};

struct ITabletModeChangeListener
{
	ITabletModeChangeListener();
};

struct ITaggableTarget
{
	ITaggableTarget();
};

struct IUnknown
{
	IUnknown();
};

struct IWeakReferenceSource
{
	IWeakReferenceSource();
};

struct IWindowManagementShowMoveSizeEvents
{
	IWindowManagementShowMoveSizeEvents();
};

struct IXamlMultitaskingViewController
{
	virtual void CloseSwitchItem(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^);
	virtual void ContextMenuInvoked(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^);
	virtual void GetContextMenu(WindowsInternal::ComposableShell::Experiences::Switcher::SwitchItemContextMenuArgs ^,WindowsInternal::ComposableShell::Experiences::Switcher::ISwitcherViewModel ^);
	virtual void InvokeSwitchItem(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^);
	virtual void VirtualDesktopInvoked(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop ^,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop ^);
};

struct IXamlSwitcherWindowInteractionEvents
{
	virtual void ActivationChanged(Platform::Object ^,Windows::UI::Core::WindowActivatedEventArgs ^);
	virtual void FirstFrameRendered(Platform::Object ^,Windows::UI::Xaml::RoutedEventArgs ^);
	virtual void OnContainerNavigate(unsigned int);
	virtual void OnLightDismiss();
};

namespace IamAccess
{
	struct SyncIamAccess
	{
		~SyncIamAccess();
	};

};

class IamTraceLogging
{
	class OnShellHookMessage
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		static OnShellHookMessage Start<unsigned __int64 &,HWND__ * &>(unsigned __int64 &,HWND__ * &);
		void StartActivity(unsigned __int64,HWND__ *);
		~OnShellHookMessage();
	};

protected:
	void Create();
public:
	void PendingActivation_(HWND__ *);
};

namespace IhmNotification
{
	void SendKeyboardSetVisible(bool,bool);
};

class ImeNotificationExperienceManager
{
	long CalculateScaling(int,HMONITOR__ *,tagMONITORINFO const &,bool,int *);
	long DecideDrawingArea(Windows::Foundation::Size &,tagRECT *);
protected:
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShowing(CSingleViewShellExperience *);
public:
	ImeNotificationExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetMode(Windows::Internal::Shell::Experience::ImeMode);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct ImeStatusNotificationExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

namespace ImmersiveApplicationLayout
{
	ImmersiveApplicationLayout::RectAlignment ComputeAppVisualAlignment(tagRECT const *,tagRECT const *);
	ImmersiveApplicationLayout::RectAlignment ComputeRectAlignment(tagRECT const *,tagRECT const *,tagRECT const *);
	bool AreAppViewDataEqual(APPLICATION_VIEW_DATA const *,APPLICATION_VIEW_DATA const *);
	int ComputeGutterTouchTargeting(int,DEVICE_SCALE_FACTOR);
	int ComputeGutterWidth(LAYOUT_ENVIRONMENT_DETAILS const *);
	int ComputeGutterWidth(tagSIZE,DEVICE_SCALE_FACTOR);
	long ComputeAdjacentDisplayEdges(tagRECT const *,tagRECT const *,tagRECT const *,ADJACENT_DISPLAY_EDGES *);
	long ComputeAppViewData(LAYOUT_ENVIRONMENT_DETAILS const *,tagRECT const *,tagRECT const *,APPLICATION_VIEW_DATA *);
	long ComputeAppViewState(LAYOUT_ENVIRONMENT_DETAILS const *,tagRECT const *,tagRECT const *,APPLICATION_VIEW_STATE *);
	unsigned int ComputeLayoutEnvMaxApps(LAYOUT_ENVIRONMENT_DETAILS const *);
	void InitLayoutEnv(LAYOUT_ENVIRONMENT_DETAILS *);
};

namespace ImmersiveContextMenuHelper
{
	CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > * _RetrieveParentArrayFromWindow(HWND__ *);
	ContextMenuRenderingData * GetContextMenuDataForItem(HWND__ *,unsigned __int64,unsigned int);
	bool CanApplyOwnerDrawToMenu(HMENU__ *,HWND__ *);
	bool ShouldUseDarkTheme(ImmersiveContextMenuOptions);
	long ApplyOwnerDrawToMenu(HMENU__ *,HWND__ *,tagPOINT *,ImmersiveContextMenuOptions,CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > &);
	long OverrideBackgroundColor(HMENU__ *,HWND__ *,ImmersiveContextMenuOptions);
	long StoreContextMenuDataForItem(HWND__ *,unsigned __int64,unsigned int,ContextMenuRenderingData *);
	long _GetRenderingDataForMenuItem(DPIToPPIHelpers::ScaleType,tagMENUITEMINFOW,unsigned short const *,tagPOINT *,CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > &,ContextMenuRenderingData *,ImmersiveContextMenuOptions,ContextMenuRenderingData * *);
	long _StoreParentArrayOnWindow(HWND__ *,CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > *);
	unsigned int _GetDpiForMonitorFromPoint(tagPOINT *);
	void * GetCurrentThemeForOverrides(HWND__ *,ImmersiveContextMenuOptions,bool);
	void HandleMergedMenus(HMENU__ *,HWND__ *);
	void RemoveContextMenuDataForItem(HWND__ *,unsigned __int64,unsigned int);
	void RemoveOwnerDrawFromMenu(HMENU__ *,HWND__ *);
	void _RemoveOwnerDrawFromMenuWorker(HMENU__ *,HWND__ *);
};

namespace ImmersiveIcons
{
	RESOURCE_CONTRAST GetContrastForParams(ImmersiveIcons::LoadIconParams const &);
	RESOURCE_CONTRAST GetMrtContrast();
	RESOURCE_SCALE DpiToMrtScale(unsigned int);
	long CreateIconBitmap(tagSIZE,tagSIZE,tagSIZE,unsigned long,bool,ImmersiveIcons::IconData2 const &,bool,HBITMAP__ * *);
	long GetIconData(unsigned short const *,ImmersiveIcons::LoadIconParams const &,ImmersiveIcons::IconData2 *);
	long InitResourceContextForAllThemes(ImmersiveIcons::LoadIconParams const &,IResourceContext *);
	long InitResourceContextForLightTheme(ImmersiveIcons::LoadIconParams const &,IResourceContext *);
	long LoadImmersiveIcon(tagSIZE,tagSIZE,tagSIZE,unsigned long,unsigned int,bool,unsigned short const *,HBITMAP__ * *);
	long _LoadImmersiveIcon(unsigned short const *,ImmersiveIcons::LoadIconParams const &,HBITMAP__ * *,ImmersiveIcons::IconData2 *);
};

namespace ImmersiveIconsLoggingTelemetry
{
	class LoadIconW
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~LoadIconW();
	};

};

class ImmersiveMonitorHelper
{
	bool DoesMonitorSupportTaskbar(IImmersiveMonitor *);
	bool IsCurrentMonitorAlsoPrimary();
	bool IsCurrentMonitorConnected();
	long MoveStartToMonitorWithoutHiding(IImmersiveMonitor *);
public:
	ImmersiveMonitorHelper();
	bool ConnectToMonitor(IImmersiveMonitor *);
	bool HandleConnectIfNewPrimaryArrives(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	bool HandleConnectIfNoCurrentMonitorExists(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	bool HandleCurrentMonitorDisconnect(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	bool HandleRotationOrResolutionChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	long AdjustMonitorConnectedIfNeeded();
	long GetMonitor(IImmersiveMonitor * *);
	long RuntimeClassInitialize(IServiceProvider *,IXamlLauncherState *);
	long TrayEdgeMayHaveChanged(EDGEUI_TRAYSTUCKPLACE,HMONITOR__ *);
	virtual long ActiveZBandChangedForMonitor(unsigned long,unsigned long,IImmersiveMonitor *,MODE_CHANGE_REASON);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long SetSite(IUnknown *);
};

namespace ImmersiveMultimonHelpers
{
	long IsLauncherVisibleOnMonitor(IUnknown *,IImmersiveLauncher *,bool *);
};

namespace ImmersiveOwnedWindowHelper
{
	int EnumImmersiveComponentOwnedWindows(HWND__ *,__int64);
	long RepositionOwnedWindows(HWND__ *,tagRECT const * const);
};

struct ImmersiveShellComponentCreator
{
	virtual long CreateComponent(_GUID const &,_GUID const &,void * *);
};

struct ImmersiveShellStressTool
{
	ImmersiveShellStressTool();
	long RuntimeClassInitialize();
	virtual long HangAsync(unsigned long,unsigned long,void *);
};

class InputEaterElement
{
protected:
	virtual bool IsNavigable(NavigationType);
	virtual void v_OnPointerLeave();
public:
	InputEaterElement();
	virtual bool IsEmpty();
};

class InsightsExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

class ItemAnimationCoordinatorBase
{
	struct ComponentInfo
	{
		ComponentInfo(ComponentInfo const &);
	};

	struct ItemRemovedInfo
	{
		ItemRemovedInfo(ItemRemovedInfo const &);
	};

	struct PositionChangedInfo
	{
		PositionChangedInfo(PositionChangedInfo const &);
	};

protected:
	virtual bool ShouldAnimateAddForType(AnimationCoordinatorItemType);
	virtual bool ShouldAnimateClipChangeForType(AnimationCoordinatorItemType);
	virtual bool ShouldAnimateHideForType(AnimationCoordinatorItemType);
	virtual bool ShouldAnimateMoveForType(AnimationCoordinatorItemType,bool *);
	virtual bool ShouldAnimateRemoveForType(AnimationCoordinatorItemType);
	virtual bool ShouldAnimateShowForType(AnimationCoordinatorItemType);
	virtual long AnimateRemovedElement(ItemAnimationCoordinatorBase::ItemRemovedInfo const &,IUIAnimationStoryboardEventHandler2 *);
	virtual void AnimateAddedElement(ItemAnimationCoordinatorBase::ComponentInfo const &);
	virtual void AnimateClipChangedElement(ItemAnimationCoordinatorBase::ClipChangedInfo const &);
	virtual void AnimateHiddenElement(ItemAnimationCoordinatorBase::ComponentInfo const &);
	virtual void AnimatePositionChanged(ItemAnimationCoordinatorBase::PositionChangedInfo const &);
	virtual void AnimateShownElement(ItemAnimationCoordinatorBase::ComponentInfo const &);
public:
	ItemAnimationCoordinatorBase();
	long RuntimeClassInitialize(ISwitchThumbnailFactory *,_GUID const &);
	virtual long BeginAnimation();
	virtual long ClipChanged(AnimationCoordinatorItemType,IUnknown *,Geometry::CRect const &,bool *);
	virtual long ItemAdded(AnimationCoordinatorItemType,IUnknown *,bool *);
	virtual long ItemHidden(AnimationCoordinatorItemType,IUnknown *,bool *);
	virtual long ItemRemoved(AnimationCoordinatorItemType,IUnknown *,bool *);
	virtual long ItemShown(AnimationCoordinatorItemType,IUnknown *,bool *);
	virtual long PositionChanged(AnimationCoordinatorItemType,IUnknown *,Geometry::CRect const &,bool *);
	~ItemAnimationCoordinatorBase();
};

class JointDivider
{
	long EnsureWindow();
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void HandlePaint(HDC__ *);
	void PaintFocusIndicator(HDC__ *,Geometry::CRect const &);
public:
	JointDivider();
	virtual long AppLayoutChanged(IAppLayout *);
	virtual long DisplaySettingsChanged(IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long SetSite(IUnknown *);
	virtual long ShellTargetChanged(IApplicationView *);
	virtual long TabletModeChanged(bool);
};

class JointResize
{
	bool IsJointResizeEnabled();
	long CalculateSecondaryView(IApplicationView *,int);
	long Commit();
	long CreateGhostDivider(GhostDividerShowFlags,GhostDividerPlacement);
	long GetViewForWindow(HWND__ *,IApplicationView * *);
	long HideDropFeedback(bool);
	long InitDropFeedback(int);
	long UpdateDropFeedback(tagRECT);
	tagPOINT CalculatePointFromRect(tagRECT);
	tagRECT ComputeExtendedViewRect(IApplicationView *,tagRECT);
	void Cleanup();
	void DestroyGhostDivider();
	void RegisterRawInput(bool);
	void RegisterViewChanges(bool);
	void UpdateGhostDivider(tagPOINT);
	void UpdateSizeConstraints(tagSIZE,tagSIZE);
public:
	JointResize();
	long RuntimeClassInitialize();
	virtual long ObservedKeyDown(unsigned int);
	virtual long ObservedKeyUp(unsigned int);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnArrangedWindowSizeStarted(IApplicationView *,tagRECT,int,unsigned int);
	virtual long OnSettingChanged(SETTING_IDENTIFIER);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void OnArrangedWindowBorderEnter(HWND__ *,int,unsigned int);
	virtual void OnArrangedWindowBorderExit();
	virtual void OnArrangedWindowSizeCompleted(int);
	virtual void OnArrangedWindowSizeUpdated(tagRECT);
	virtual void OnSizeConstraintsQueried(IApplicationView *,tagSIZE,tagSIZE);
	virtual ~JointResize();
};

class JointResizeAcc
{
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void RaisePropertyChangeNotification(int);
public:
	JointResizeAcc();
	long RuntimeClassInitialize();
	virtual long GetGrabbedItems(tagSAFEARRAY * *);
	virtual long GetPatternProvider(int,IUnknown * *);
	virtual long GetPropertyValue(int,tagVARIANT *);
	virtual long get_DropEffect(unsigned short * *);
	virtual long get_DropEffects(tagSAFEARRAY * *);
	virtual long get_HostRawElementProvider(IRawElementProviderSimple * *);
	virtual long get_IsGrabbed(int *);
	virtual long get_ProviderOptions(ProviderOptions *);
	virtual void EndDrag(bool);
	virtual void Shutdown();
	virtual void StartDrag();
	virtual void UpdateDrag(IApplicationView *,IApplicationView *);
};

struct JointResizeTelemetry
{
	class JointResize
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void InitDropFeedback();
		void StartActivity();
		~JointResize();
	};

	static void GhostDividerShown();
};

namespace JumpViewExperienceEvents
{
	unsigned short const * const DismissForLaunch;
	unsigned short const * const DismissToCaller;
	unsigned short const * const Focus;
	unsigned short const * const NotifyLaunchArguments;
	unsigned short const * const Param_HorizontalAlign;
	unsigned short const * const Param_LaunchArgumentString;
	unsigned short const * const Param_Position;
	unsigned short const * const Param_Title;
	unsigned short const * const Param_VerticalAlign;
};

struct JumpViewExperienceManagerFactory
{
	JumpViewExperienceManagerFactory();
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
	virtual long GetExperienceManager(unsigned short const *,IServiceProvider *,IInspectable * *);
};

namespace JumpViewProvider
{
	class ShowJumpViewActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		ShowJumpViewActivity Split();
		ShowJumpViewActivity TransferToCurrentThread();
		ShowJumpViewActivity();
		void JumpViewCancelledByAnotherInvoke();
		void JumpViewCancelledDueToForeground();
		void JumpViewCancelledDueToLock();
		void StartActivity(unsigned short const *,unsigned short const *,Windows::Internal::Shell::JumpView::JumpViewInvocationSurfaceType,Windows::Internal::Shell::JumpView::JumpViewInvocationMethod);
		~ShowJumpViewActivity();
	};

};

namespace JumpViewTelemetryHelper
{
	namespace Details
	{
		unsigned short const * const c_edgePinnedWebsiteAumidPrefix;
	};

	unsigned short const * CensorPath(unsigned short const *);
	void CensorAumidAndAppPath(unsigned short const * &,unsigned short const * &);
};

struct KBViewInfo
{
	KBViewInfo(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	bool IsAppDefaultView();
	bool IsValid();
	unsigned int GetFirstViewType();
	void BoostPriority();
	void InitializeIds();
	void UnboostPriority();
};

namespace KeyboardHosting
{
	struct MonitorInformation
	{
		bool IsValid();
		void SetMonitor(HMONITOR__ *);
		void UpdateMonitorInfo();
	};

	struct PositionAndSizeOptionsHelper
	{
		KeyboardSize GetDefaultKeyboardSize(HMONITOR__ *,Windows::Foundation::Rect,DEVICE_SCALE_FACTOR,bool,double,double *);
	};

	class PositionAndSizeOptionsProvider
	{
		long GetPositionAndSizeOptionsHub(Windows::Foundation::Rect,Windows::Foundation::Rect,Windows::Foundation::Rect,bool,Windows::Foundation::Collections::IVectorView<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> * *);
	public:
		PositionAndSizeOptionsProvider();
		virtual long GetPositionAndSizeOptions(Windows::Foundation::Rect,Windows::Foundation::Rect,Windows::Foundation::Rect,bool,Windows::Foundation::Collections::IVectorView<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> * *);
	};

	struct ScalingHelper
	{
		static Windows::Foundation::Rect PhysicalRectToRelative(Windows::Foundation::Rect const &,DEVICE_SCALE_FACTOR);
	};

	class TabTipAdapter
	{
		bool IsInputAppViewShowHideCallbackSafeToReportToTelemetry(unsigned int);
		bool IsXAMLExperienceDisabled();
		long AddEventHandlersFromCoreKeyboardManager();
		long CreateDeferredShowRequest(Windows::UI::Internal::Text::Core::CoreKeyboardViewType,Windows::UI::Internal::Text::Core::CoreKeyboardModality,bool);
		long CreatePendingShowRequest(Windows::UI::Internal::Text::Core::CoreKeyboardViewType,Windows::UI::Internal::Text::Core::CoreKeyboardModality,bool);
		long EnsureInputAppIsReady();
		long ExecuteDeferredRequest(DeferredShowRequestExecutionReason);
		long ExecutePendingRequest(PendingShowRequestExecutionReason);
		long OnButtomEdgeCandidateWindowAlignmentChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerBottomEdgeCandidateWindowAlignmentChangedEventArgs *);
		long OnCoreKeyboardClientRegistered(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerCoreKeyboardClientRegisteredEventArgs *);
		long OnCoreKeyboardHardwareKeyboardTextIntelligenceEnabled(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerHardwareKeyboardTextIntelligenceEnabledChangedEventArgs *);
		long OnCoreKeyboardHardwareKeyboardUIEnabled(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerHardwareKeyboardUIEnabledChangedEventArgs *);
		long OnEditControlEmbeddedHandwritingViewEnabledSettingChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerEditControlEmbeddedHandwritingViewEnabledSettingChangedEventArgs *);
		long OnEditControlEmbeddedHandwritingViewVisibleSettingChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerEditControlEmbeddedHandwritingViewVisibleSettingChangedEventArgs *);
		long OnEditControlFocusChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerEditControlFocusChangedEventArgs *);
		long OnEditControlInputScopeChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerEditControlInputScopeChangedEventArgs *);
		long OnEditControlLineTypeChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerEditControlLineTypeChangedEventArgs *);
		long OnEditControlManualInputPaneSettingChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerEditControlManualInputPaneSettingChangedEventArgs *);
		long OnEditControlPositionChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerEditControlPositionChangedEventArgs *);
		long OnEditControlReadOnlySettingChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerEditControlReadOnlySettingChangedEventArgs *);
		long OnEditControlSelectionChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerEditControlSelectionChangedEventArgs *);
		long OnHardwareKeyboardPresenceChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerHardwareKeyboardPresenceChangedEventArgs *);
		long OnInputAppChanged(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerInputAppChangedEventArgs *);
		long OnInputAppPropertiesChanged(Windows::UI::Internal::Text::Core::ICoreTextPropertyBag *,Windows::UI::Internal::Text::Core::ICoreTextPropertyBagPropertyValueChangedEventArgs *);
		long OnInputAppRequestedHide(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerInputAppRequestedHideEventArgs *);
		long OnInputAppRequestedResize(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerInputAppRequestedResizeEventArgs *);
		long OnInputAppRequestedShow(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerInputAppRequestedShowEventArgs *);
		long OnInputPaneTryHideRequested(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerInputPaneTryHideRequestedEventArgs *);
		long OnInputPaneTryShowRequested(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerInputPaneTryShowRequestedEventArgs *);
		long OnPrimaryViewHidingResponse(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerPrimaryViewHidingResponseEventArgs *);
		long OnPrimaryViewShowingResponse(Windows::UI::Internal::Text::Core::ICoreKeyboardManager *,Windows::UI::Internal::Text::Core::ICoreKeyboardManagerPrimaryViewShowingResponseEventArgs *);
		long OnShellRequestedStateChange(Windows::UI::Internal::Text::Core::CoreKeyboardViewType,Windows::UI::Internal::Text::Core::CoreKeyboardModality,ShellRequestedStateChangeReason);
		long ProcessChangeRequest(Windows::Internal::Shell::Text::ShellRequestType,unsigned int);
		long ProcessShowRequest(Windows::UI::Internal::Text::Core::CoreKeyboardViewType);
		long ProcessShowRequestWithStoredData(Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVectorView<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >,Windows::UI::Internal::Text::Core::CoreKeyboardViewType,Windows::UI::Internal::Text::Core::CoreKeyboardModality);
		long RefreshHardwareKeyboardUIState();
		long RequestPositionAndSizeUpdate();
		long SetTrackSelectionPosition(bool);
		static long TimerDeferredShowRequestCallback(void *);
		void RemoveEventHandlersFromCoreKeyboardManager();
	public:
		IHM_DISPLAY_MODE GetPrimaryViewDisplayMode();
		TabTipAdapter();
		long GetCurrentTextSelectionRect(tagRECT *);
		long NotifyOcclusionToCoreInputViewManager(unsigned int,tagRECT const &);
		long OnAccessibilityKeyboardRequestShow();
		long OnFramePositionAndSizeUpdateCompleted(unsigned int,tagRECT const &);
		long OnInputAppChangeApproved(unsigned short const *);
		long OnLightDismiss(unsigned int);
		long OnModalityInfoChanged(Windows::UI::Internal::Text::Core::CoreKeyboardModalityInfo);
		long OnShellHotKey(_TouchKeyboardShellHotKeyType);
		long RelaunchInputAppAfterTermination();
		long RuntimeClassInitialize(TouchKeyboardExperienceManager *);
		long SetInputAppAUMID(unsigned short const *);
		long SetOverrideMonitorSizeForSIP();
		long SetShellPreference(HSTRING__ *,HSTRING__ *);
		static long GetDefaultInputAppId(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > &);
		virtual long OnConnected(IMessageProxy *);
		virtual long OnDisconnected(IMessageProxy *);
		virtual long OnInPrivateModeChanged(bool);
		virtual long OnInputAppChangeApproved(MsgString *);
		virtual long OnKeyboardToggleButtonPressed();
		virtual long OnNoContextInputScopeChanged(unsigned int);
		virtual long OnPropertyChanged(IMessageProxy *,unsigned short);
		virtual long OnProxyCreated(IMessageProxy *);
		virtual long OnRemotePolicyIsReady();
		virtual long OnShellRequestedHide();
		virtual long OnShellRequestedShow(unsigned int,unsigned int);
		virtual ~TabTipAdapter();
		void OnInputAppActivated();
		void OnInputAppResumed();
		void OnInputAppTerminated();
		void UnInitialize();
	};

	class TabTipAdapterPolicy
	{
		HMONITOR__ * GetCurrentMonitor(Windows::Foundation::Rect);
		HMONITOR__ * LoadPinnedMonitor();
		bool CheckRequest(Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeRequest const &);
		bool IgnoreInputAppRequestedShow(unsigned int,Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeRequest const &);
		bool IsCursorPositionValid();
		bool LoadGlobalPosition(HKEY__ *,tagPOINT &);
		long GetPositionAndSizeOptions(Windows::Foundation::Collections::IVectorView<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> * *);
		long InitializeMonitors();
		long LoadFloatingBottomPositionIfNecessary(unsigned int);
		long SaveFloatingBottomPosition(Windows::Foundation::Point const &,unsigned int);
		long UpdatePinState();
		static HMONITOR__ * GetCurrentMonitorWithRect(Windows::Foundation::Rect);
		static long GetForegroundAppRect(Windows::Foundation::Rect &);
		static long GetPrimaryMonitorRect(tagRECT &);
		void GetFloatingBottomPosition(Windows::Foundation::Point *,unsigned int);
		void SaveGlobalPosition(Windows::Foundation::Point const &);
	public:
		TabTipAdapterPolicy();
		Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeRequest GetPrimaryViewLastRequest();
		Windows::UI::ViewManagement::Core::CoreInputViewOcclusionKind GetOcclusionKind(unsigned int);
		bool IsAnyViewShown();
		bool IsHidingAnimationRunning(unsigned int);
		bool IsPrimaryViewShown();
		bool IsViewShown(unsigned int);
		long OnInputAppPropertyChanged(HSTRING__ *,HSTRING__ *);
		long RuntimeClassInitialize();
		virtual long CheckIfFocusShouldBeRemoved(unsigned char *);
		virtual long DetermineMoveAnimationType(unsigned int,Windows::Internal::Shell::Text::MoveAnimationType *);
		virtual long GetShellState(Windows::UI::Internal::Text::Core::CoreKeyboardViewType,unsigned char *,unsigned char *,Windows::UI::Internal::Text::Core::CoreKeyboardModality *,Windows::Foundation::Collections::IVectorView<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> * *);
		virtual long GetVisibilityPreference(unsigned int,unsigned char *);
		virtual long HandleAccessibilityKeyboardVisibilityChanged(bool,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleAppLifeCycleUpdate(unsigned char,unsigned int *,Windows::Internal::Shell::Text::LifeCycleManagementType *);
		virtual long HandleAutoInvokeInDesktopModeChanged(bool,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleAutoInvokeInDesktopModePolicyChanged(bool,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleButtomEdgeCandidateWindowAlignmentChanged(unsigned char,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleConvertibleSlateModeChanged(unsigned char,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleDisplayChanged(Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleDpiChanged(Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleDragEnded(Windows::Foundation::Rect,Windows::Internal::Shell::Text::MoveAnimationType *,unsigned int *,Windows::Foundation::Rect *);
		virtual long HandleEditControlEmbeddedHandwritingViewEnabledSettingChanged(unsigned char,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleEditControlEmbeddedHandwritingViewVisibleSettingChanged(unsigned char,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleEditControlFocusChanged(unsigned char,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleEditControlLineTypeChanged(unsigned int,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleEditControlManualInputPaneSettingChanged(unsigned char,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleEditControlPositionChanged(Windows::Foundation::Rect,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleEditControlReadOnlySettingChanged(unsigned char,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleEditControlSelectionChanged(Windows::Foundation::Rect,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleFramePositionAndSizeUpdateCompleted(unsigned int,Windows::Foundation::Rect,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleFrameSizeUpdated(Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleHardwareKeyboardPresenceChanged(unsigned char,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleHardwareKeyboardTextIntelligenceEnabled(unsigned char,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleHardwareKeyboardUIEnabled(unsigned char,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleInputAppChanged(HSTRING__ *,unsigned char *);
		virtual long HandleInputModalityInfoChanged(Windows::UI::Internal::Text::Core::CoreKeyboardModalityInfo,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleInputPaneTryHide(unsigned int,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleInputPaneTryShow(unsigned int,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleKeyboardToggleButtonPressed(bool,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleShellRequestedHide(Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleShellRequestedShow(Windows::UI::Internal::Text::Core::CoreKeyboardModality,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleTabletModeChanged(bool,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long HandleWorkAreaChanged(tagRECT const &,Windows::Internal::Shell::Text::ShellRequestType *);
		virtual long NotifyInputAppDetached();
		virtual long NotifyInputPaneHiding();
		virtual long NotifyInputPaneShowing();
		virtual long NotifyVisibilityPreference(unsigned int,unsigned char);
		virtual long RegisterSizingInfoProvider(Windows::UI::Internal::Text::Core::CoreKeyboardViewType,Windows::Internal::Shell::Text::IHostingInfoProvider *);
		virtual long UnregisterSizingInfoProvider(unsigned int);
		virtual long VerifyInputAppRequestedHide(unsigned int,unsigned int *,unsigned char *);
		virtual long VerifyInputAppRequestedResize(unsigned int,Windows::Foundation::Size,Windows::Foundation::Rect,unsigned char,Windows::Foundation::Rect *,unsigned char *);
		virtual long VerifyInputAppRequestedShow(Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeRequest,unsigned int,unsigned int *,Windows::Foundation::Rect *,unsigned char *);
		virtual long VerifyLightDismiss(unsigned int,bool *);
		virtual ~TabTipAdapterPolicy();
		void OnInputAppActivated();
		void OnViewDestroyed(unsigned int);
	};

	class ViewRectHelper
	{
		static tagRECT GetAvoidanceRect(Windows::Foundation::Rect,Windows::Foundation::Rect);
		static tagRECT GetRelativePosition(Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeRequest,Windows::Foundation::Rect,tagRECT,tagSIZE);
		static void ValidateRect(Windows::Foundation::Rect *);
	public:
		static long GetViewRectNearCaret(Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeRequest,Windows::Foundation::Rect,Windows::Foundation::Rect,Windows::Foundation::Rect,bool,Windows::Foundation::Rect *,bool *,bool *);
		static long GetViewRectRelativeToInside(Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeRequest,Windows::Foundation::Rect,Windows::Foundation::Rect *);
	};

	class ViewRectProvider
	{
		bool IsViewOccludingCaret(Windows::Foundation::Rect &,Windows::Foundation::Rect &);
	public:
		virtual long GetViewRectFromPositionAndSizeRequest(Windows::Foundation::Rect &,Windows::Foundation::Rect &,Windows::Foundation::Rect &,Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeRequest,Windows::UI::Internal::Text::Core::CoreKeyboardEditControlLineType,bool,Windows::Foundation::Rect *,bool *,bool *);
	};

	bool IsRectNull(Windows::Foundation::Rect);
	bool IsRectNull(tagRECT);
	unsigned short const * ShellRequestedStateChangeReasonToString(KeyboardHosting::ShellRequestedStateChangeReason);
};

class KioskPositioner
{
	struct KioskPositionerConfiguration
	{
		~KioskPositionerConfiguration();
	};

	bool IsBackgroundActivation(IApplicationView *,IUnknown *);
	bool IsOwnedAppWindow(HWND__ *);
	bool IsViewManaged(IApplicationView *);
	bool IsWin32ApplicationView(IApplicationView *);
	bool ShouldHandleView(IApplicationView *);
	long CloseApplicationView(IApplicationView *);
	std::optional<KioskPositioner::KioskPositionerConfiguration> LoadAssignedAccessConfiguration();
	std::optional<KioskPositioner::KioskPositionerConfiguration> LoadShellLauncherConfiguration();
	void AddViewToKioskPositioner(IApplicationView *);
	void HandleApplicationView(IApplicationView *);
	void MaximizeWin32View(IApplicationView *);
	void SetPositionerMonitor(IApplicationView *,IImmersiveMonitor *);
	void SetUwpViewFullScreen(IApplicationView *,IImmersiveMonitor *);
	wil::com_ptr_t<IApplicationViewOperation,wil::err_exception_policy> CreateApplicationViewOperation(APPLICATION_FRAME_CHROME_OPTIONS,std::function<wil::com_ptr_t<IApplicationViewTitlebarConfiguration,wil::err_exception_policy> ()>);
	wil::com_ptr_t<IApplicationViewTitlebarConfiguration,wil::err_exception_policy> CreateTitlebarConfiguration();
	wil::com_ptr_t<IImmersiveMonitor,wil::err_exception_policy> GetMainMonitor();
public:
	KioskPositioner();
	long RuntimeClassInitialize();
	virtual int ShouldBlockActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleFrameworkViewTypeChange(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual int ShouldHandlePresentationRequest(IApplicationView *,IInspectable *);
	virtual long AllowClose(IApplicationView *,unsigned char *);
	virtual long ControlGainedForActivation(IApplicationView *,SHELL_POSITIONER_TYPE,IUnknown *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long EnterFullScreenForView(IApplicationView *);
	virtual long ExitFullScreenForView(IApplicationView *);
	virtual long FrameworkViewTypeChangedForView(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual long GetChromeConfigurationForView(IApplicationView *,int *,IApplicationViewTitlebarConfiguration * *);
	virtual long GetPosition(HWND__ *,_GUID const &,void * *);
	virtual long HandleRecoveryForView(IApplicationView *);
	virtual long HandleSwitchToView(IApplicationView *);
	virtual long InitializePosition(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,IApplicationView *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long IsViewFullScreen(IApplicationView *,int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnShowWindowPolicy(HWND__ *,unsigned int,unsigned long *,tagRECT *);
	virtual long OnViewClosing(IApplicationView *,int);
	virtual long PerformDelayedInitialization();
	virtual long PositionView(IApplicationView *,tagRECT,TRY_POSITION_VIEW_FLAGS);
	virtual long PresentationChangedForView(IApplicationView *,IInspectable *);
	virtual long ResizeView(IApplicationView *,tagSIZE,tagSIZE);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void ControlGained(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown *,IPresentationRequestedArgs *);
	virtual void ControlLost(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown * *);
	virtual void OnCuratedWindowHidden(HWND__ *);
	virtual void OnMoveSizeAttempted(IApplicationView *,unsigned long);
	virtual void OnShellTrackedWindowPosChanged(HWND__ *,IApplicationView *,int,unsigned long,tagRECT);
	virtual ~KioskPositioner();
};

namespace LambdaHelpers
{
	class CTimer
	{
		static CTimer * s_pTimerList;
		static _RTL_SRWLOCK s_rwLock;
		static void s_OnTimer(HWND__ *,unsigned int,unsigned __int64,unsigned long);
	public:
		CTimer(TIMER_KIND,ILambda *);
		virtual long InvokeNow();
		virtual long ResetInterval(unsigned long);
		virtual void Cancel();
	};

};

struct LaunchNewTabPageService
{
	LaunchNewTabPageService(Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long Update(IUnknown *);
};

class LegacyViewWrapper
{
	class NavigationLevelHelper
	{
		unsigned long GetDebounceDurationInMilliseconds();
		void HandleDebounceTimeout(_TP_TIMER *);
	public:
		Visibility GetVisibility();
		Windows::Internal::Shell::ViewManagerInterop::NavigationLevel GetNavigationLevel();
		void SetDesiredNavigationLevel(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	};

	long LoadQuirksForApp();
	virtual Windows::Internal::Shell::ViewManagerInterop::NavigationLevel v_GetDesiredNavigationLevel();
	virtual bool v_CanDirectlySizeWindow();
	virtual bool v_CanPositionWindow();
	virtual bool v_SetDesiredPosition_HasViewDataChanged(APPLICATION_VIEW_DATA const &,APPLICATION_VIEW_DATA const &);
	virtual bool v_SupportsBack();
	virtual void v_OnViewCreated();
	virtual void v_OnViewDestroyed();
	virtual void v_OnWindowCreated(WindowCreatedType);
	virtual void v_OnWindowDestroyed();
	virtual void v_SendConsolidated(Windows::Internal::Shell::ViewManagerInterop::ConsolidatedState);
	virtual void v_SetDesiredNavigationLevel(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	virtual void v_SetDesiredPosition_OnBeforePositionWindow(bool,bool);
	void SendViewStateToWindow(bool);
	void SendVisibilityToWindow(Visibility);
public:
	LegacyViewWrapper();
	long RuntimeClassInitialize(unsigned int,IUnknown *,unsigned short const *,unsigned short const *,LegacyViewWrapper::ViewLifetimePolicy,ViewEventDispatcher *);
};

class LegacyWindowWrapper
{
	class NavigationLevelHelper
	{
		unsigned long GetDebounceDurationInMilliseconds();
		void HandleDebounceTimeout(_TP_TIMER *);
	public:
		Visibility GetVisibility();
		Windows::Internal::Shell::ViewManagerInterop::NavigationLevel GetNavigationLevel();
		void SetDesiredNavigationLevel(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
		~NavigationLevelHelper();
	};

	long LoadQuirksForApp();
	virtual Windows::Internal::Shell::ViewManagerInterop::NavigationLevel v_GetDesiredNavigationLevel();
	virtual bool v_CanDirectlySizeWindow();
	virtual bool v_CanHandleCloseRequest();
	virtual bool v_CanPositionWindow();
	virtual bool v_SetDesiredPosition_HasViewDataChanged(APPLICATION_VIEW_DATA const &,APPLICATION_VIEW_DATA const &);
	virtual bool v_SupportsBack();
	virtual void v_HandleActivationRequested();
	virtual void v_OnWindowCreated(WindowCreatedType);
	virtual void v_PushBoundsToAppView();
	virtual void v_SendConsolidated(Windows::Internal::Shell::ViewManagerInterop::ConsolidatedState);
	virtual void v_SetDesiredNavigationLevel(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	virtual void v_SetDesiredPosition_OnBeforePositionWindow(bool,bool);
	void SendViewStateToWindow(bool);
	void SendVisibilityToWindow(Visibility);
public:
	LegacyWindowWrapper(IWindowEventDispatcherInternal *,Windows::Internal::ApplicationModel::WindowManagement::IAppView *,Windows::Internal::ApplicationModel::WindowManagement::IAppModel *,Windows::Internal::ApplicationModel::WindowManagement::AppModelKind,Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Internal::ApplicationModel::WindowManagement::IWindow *,Windows::Internal::ApplicationModel::WindowManagement::WindowId,unsigned short const *,WindowCreatedType);
};

class LightDismissElement
{
protected:
	virtual bool v_InvokeElement();
	virtual long v_InitAccessibleObject(WeakReference::IWeakReference *,_GUID const &,void * *);
	virtual long v_SetRenderMode(CMultitaskingViewButtonElement::ButtonRenderMode);
public:
	LightDismissElement();
	virtual bool HitTest(Geometry::CPoint const &);
	virtual bool IsEmpty();
	virtual bool IsNavigable(NavigationType);
	virtual long GetAccessibleName(unsigned short * *);
};

class LightweightPropertySet
{
	struct LightweightProperty
	{
		bool IsName(unsigned short const *);
	};

	static bool s_IsMangledName(unsigned short const *);
	static int s_PropEnumCallback(HWND__ *,unsigned short *,void *,unsigned __int64);
	static void s_MangleName(unsigned short const *,unsigned short *,unsigned __int64);
public:
	long GetProperty(unsigned short const *,unsigned long *);
	long SetProperty(unsigned short const *,unsigned long,HWND__ *);
	static unsigned long GetPropertyDirectlyFromWindow(HWND__ *,unsigned short const *);
	void PushLightweightPropertiesToWindow(HWND__ *);
};

struct ListenerTelemetryReport
{
	static unsigned int m_knownFailureCounter;
	static unsigned int m_unknownFailureCounter;
};

struct ListenerTelemetrySignalTracker
{
	~ListenerTelemetrySignalTracker();
};

class LockScreenDirectorServiceProviderImpl
{
	long EnsureChildServices(ILockScreenDirector * *);
	long GetLockScreenDirector(ILockScreenDirector * *);
	long StartDirectorThread();
	static unsigned long s_RunDirectorThread(void *);
	static void s_RunMessageLoop(void *);
	virtual ~LockScreenDirectorServiceProviderImpl();
	void StopDirectorThread();
protected:
	virtual long v_QueryService(_GUID const &,_GUID const &,void * *);
	virtual long v_ShutdownServices(IProfferService *);
public:
	LockScreenDirectorServiceProviderImpl();
	long RuntimeClassInitialize();
	virtual long PerformDelayedInitialization();
	virtual long SetDirectorReference(IUnknown *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

namespace LockScreenServiceTelemetry
{
	class LockScreenDirectorServiceProviderImpl_EnsureChildServices_Activity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~LockScreenDirectorServiceProviderImpl_EnsureChildServices_Activity();
	};

	class LockScreenDirectorServiceProviderImpl_GetLockScreenDirector_Activity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~LockScreenDirectorServiceProviderImpl_GetLockScreenDirector_Activity();
	};

	class LockScreenDirectorServiceProviderImpl_PerformDelayedInitialization_Activity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class LockScreenDirectorServiceProviderImpl_StartDirectorThread_Activity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~LockScreenDirectorServiceProviderImpl_StartDirectorThread_Activity();
	};

};

namespace LoggingUtil
{
	class AppIdCensorUtility
	{
		static bool ExtractDomain(unsigned short const *,unsigned short * *);
		static void CensorWebAppId(unsigned short const *,unsigned short const *,unsigned short * *);
	public:
		static long CensorAppIdBuffer(unsigned short const *,unsigned short * *);
		static unsigned short const * CensorAppIdAnyPath(unsigned short const *);
	};

};

namespace MeetNowExperienceEvents
{
	unsigned short const * const ShowExperienceFromUri;
};

class MeetNowExperienceManager
{
	long ShowFlyout(Windows::Foundation::Rect const &,unsigned __int64,bool);
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnIdleStateChanged(CSingleViewShellExperience *,bool);
	virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	void BeginShowFlyoutActivityTimeout();
	void CancelShowFlyoutActivityTimeout();
public:
	MeetNowExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HideFlyout();
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowFlyout(Windows::Foundation::Rect,unsigned __int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~MeetNowExperienceManager();
};

namespace MeetNowTelemetry
{
	class ShowFlyoutActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		ShowFlyoutActivity TransferToCurrentThread();
		void CancelledByAnotherInvoke();
		void CancelledDueToForeground();
		void CancelledDueToLock();
		void StartActivity(bool);
		~ShowFlyoutActivity();
	};

};

struct MeetNowTelemetryLogging
{
	static _tlgProvider_t const * Provider();
};

class MessageProxyReconnectAdapter
{
	long AttemptPullProxy();
	long CreateRemoteProxy();
	long StartConnectionRetryTimer();
	long StopConnectionRetryTimer();
	static long s_AttemptPullProxy(void *);
public:
	MessageProxyReconnectAdapter();
	long Dispose();
	long RuntimeClassInitialize(_GUID const &,unsigned short const *,IMessageProxyReconnectAdapterOwner *);
	static unsigned int ms_uiProxyConnectionAttemptLimit;
	virtual long GetMessageProxy(IMessageProxy * *);
	virtual long OnConnected(IMessageProxy *);
	virtual long OnDisconnected(IMessageProxy *);
	virtual long OnPropertyChanged(IMessageProxy *,unsigned short);
};

namespace Microsoft
{
	namespace CoreUI
	{
		namespace MessageCall
		{
			unsigned char const * const ECCallbacks_g_parameters_dlShF08DRQv6gwc32CE595KWE1o;
		};

	};

	namespace WRL
	{
		struct ActivationFactory<Details::Nil,Details::Nil,Details::Nil,0>
		{
			ActivationFactory<Details::Nil,Details::Nil,Details::Nil,0>();
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<FtmBase,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverterStatics>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<FtmBase,Windows::Internal::ComposableShell::Tabs::ITabSetMediatorStatics>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<FtmBase,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListenerFactory>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<FtmBase,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListenerFactory>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<FtmBase,Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceListenerFactory>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct AgileActivationFactory<Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverterStatics,Details::Nil,Details::Nil,0>
		{
			AgileActivationFactory<Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverterStatics,Details::Nil,Details::Nil,0>();
		};

		struct AgileActivationFactory<Windows::Internal::ComposableShell::Tabs::ITabSetMediatorStatics,Details::Nil,Details::Nil,0>
		{
			AgileActivationFactory<Windows::Internal::ComposableShell::Tabs::ITabSetMediatorStatics,Details::Nil,Details::Nil,0>();
		};

		struct AgileActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListenerFactory,Details::Nil,Details::Nil,0>
		{
			AgileActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListenerFactory,Details::Nil,Details::Nil,0>();
		};

		struct AgileActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListenerFactory,Details::Nil,Details::Nil,0>
		{
			AgileActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListenerFactory,Details::Nil,Details::Nil,0>();
		};

		struct AgileActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceListenerFactory,Details::Nil,Details::Nil,0>
		{
			AgileActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceListenerFactory,Details::Nil,Details::Nil,0>();
		};

		struct AgileEventSource<Windows::Foundation::IEventHandler<IInspectable *>,InvokeModeOptions<2> >
		{
			~AgileEventSource<Windows::Foundation::IEventHandler<IInspectable *>,InvokeModeOptions<2> >();
		};

		struct AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *>,InvokeModeOptions<2> >
		{
			~AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *>,InvokeModeOptions<2> >();
		};

		struct AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *>,InvokeModeOptions<2> >
		{
			long Add(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
			~AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *>,InvokeModeOptions<2> >();
		};

		struct AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId>,InvokeModeOptions<-2> >
		{
			long Add(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> *,EventRegistrationToken *);
		};

		class AgileRef
		{
		protected:
			long InternalResolve(_GUID const &,void * *);
		public:
			AgileRef & operator=(AgileRef const &);
			AgileRef();
			long As<IAsyncCallbackDispatcher>(Details::ComPtrRef<ComPtr<IAsyncCallbackDispatcher> >);
			~AgileRef();
		};

		struct ChainInterfaces<IAppTransitionTargetManager,ITaggableTarget,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			ChainInterfaces<IAppTransitionTargetManager,ITaggableTarget,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		class ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
		protected:
			long CanCastTo(_GUID const &,void * *);
		public:
			ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		class ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
		protected:
			long CanCastTo(_GUID const &,void * *);
		public:
			ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct ChainInterfaces<IVirtualDesktopNotificationServicePrivate,IVirtualDesktopNotificationService,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			ChainInterfaces<IVirtualDesktopNotificationServicePrivate,IVirtualDesktopNotificationService,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct ClassFactory<Details::Nil,Details::Nil,Details::Nil,0>
		{
			virtual long LockServer(int);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		class ComPtr<ABI::Windows::ApplicationModel::Resources::Core::IResourceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ABI::Windows::ApplicationModel::Resources::Core::IResourceManager>();
		};

		class ComPtr<ABI::Windows::ApplicationModel::Resources::Core::IResourceManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ABI::Windows::ApplicationModel::Resources::Core::IResourceManagerStatics>();
		};

		class ComPtr<AccessibilityExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<AccessibilityExperienceManager>();
		};

		class ComPtr<AccessibleElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<AgileApplicationViewChangeListenerConverter>
		{
			~ComPtr<AgileApplicationViewChangeListenerConverter>();
		};

		struct ComPtr<AgileRegistrationList::AgileCallbackArray>
		{
			~ComPtr<AgileRegistrationList::AgileCallbackArray>();
		};

		class ComPtr<AltEscHotkeyHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<AppLayoutCache>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<AppRequestOperation>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<AppRequestOperation>();
		};

		class ComPtr<AppResizeAcc>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<AppResizeData>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<AppResizeOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<AppResizeView>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<AppSizeConstraintsCache>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<AppSwitchOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<AppUsageTracker>
		{
			~ComPtr<AppUsageTracker>();
		};

		class ComPtr<AppViewDataSourceAdapter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(AppViewDataSourceAdapter *);
			~ComPtr<AppViewDataSourceAdapter>();
		};

		class ComPtr<AppViewEventHelpers::details::ApplicationViewEventRegistration>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<AppViewEventHelpers::details::ApplicationViewEventRegistration>();
		};

		class ComPtr<AppViewEventHelpers::details::ShellHookRegistration>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<AppViewEventHelpers::details::ShellHookRegistration>();
		};

		class ComPtr<AppViewIconFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<AppViewIconFactory>();
		};

		class ComPtr<AppViewIconLoader>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<AppViewIconLoader>();
		};

		class ComPtr<AppViewSwitchItemZOrderSort>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<AppViewSwitchItemZOrderSort>();
		};

		class ComPtr<ApplicationViewBackedViewHostItem>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<ApplicationViewBackedViewHostItem>();
		};

		class ComPtr<ApplicationViewManagement::CGlobals>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ApplicationViewManagerVisibilityDebouncer>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ApplicationViewManagerVisibilityDebouncer>();
		};

		class ComPtr<ApplicationViewOperation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(ApplicationViewOperation *);
			~ComPtr<ApplicationViewOperation>();
		};

		class ComPtr<ApplicationViewTitlebarConfiguration>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(ApplicationViewTitlebarConfiguration *);
			~ComPtr<ApplicationViewTitlebarConfiguration>();
		};

		struct ComPtr<ApplicationViewWrapper>
		{
			~ComPtr<ApplicationViewWrapper>();
		};

		class ComPtr<BackOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CActionCenterExperienceManager>
		{
			~ComPtr<CActionCenterExperienceManager>();
		};

		class ComPtr<CAllUpViewService>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CAltTabViewController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CAltTabViewHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CAppLayout>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CAppLayoutItem>
		{
			void Attach(CAppLayoutItem *);
		};

		class ComPtr<CAppViewManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<CAppViewManager>();
		};

		class ComPtr<CApplicationFrameService>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CApplicationFrameWrapper>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CApplicationFrameWrapper *);
			~ComPtr<CApplicationFrameWrapper>();
		};

		class ComPtr<CApplicationManager>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CApplicationManager>();
		};

		struct ComPtr<CApplicationViewManager>
		{
			~ComPtr<CApplicationViewManager>();
		};

		class ComPtr<CBaseTrayFlyoutExperienceManager::DebounceDetection::Notification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CBaseTrayFlyoutExperienceManager::DebounceDetection::Notification>();
		};

		class ComPtr<CBaseTrayFlyoutExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CBaseTrayFlyoutExperienceManager>();
		};

		struct ComPtr<CClassicWindowExternal>
		{
			~ComPtr<CClassicWindowExternal>();
		};

		struct ComPtr<CClassicWindowManager>
		{
			~ComPtr<CClassicWindowManager>();
		};

		struct ComPtr<CCommonApplicationViewOcclusionPosition>
		{
			void Attach(CCommonApplicationViewOcclusionPosition *);
		};

		class ComPtr<CCommonApplicationViewPosition>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CCommonApplicationViewPosition *);
			~ComPtr<CCommonApplicationViewPosition>();
		};

		struct ComPtr<CControlCenterExperienceManager>
		{
			~ComPtr<CControlCenterExperienceManager>();
		};

		class ComPtr<CDelayedTileActivation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CDelayedTileActivation *);
			~ComPtr<CDelayedTileActivation>();
		};

		struct ComPtr<CDesktopPositioner>
		{
			~ComPtr<CDesktopPositioner>();
		};

		class ComPtr<CDragVisual>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CDropFeedback>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CDropFeedbackItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			void Attach(CDropFeedbackItem *);
		};

		class ComPtr<CDropFeedbackList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CExperienceManagerAnimationHelper::DummyWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CExperienceManagerAnimationHelper::DummyWindow>();
		};

		struct ComPtr<CFallbackWindow>
		{
			~ComPtr<CFallbackWindow>();
		};

		class ComPtr<CFrameApplicationPresentation>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<CFrameApplicationPresentation>();
		};

		struct ComPtr<CGITCallbackArray>
		{
			~ComPtr<CGITCallbackArray>();
		};

		class ComPtr<CGlyphButtonElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CIAMSpecialWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CIAMSpecialWindow>();
		};

		class ComPtr<CIconLoader>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CIconLoaderInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CIconLoadingFunctions>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CImmersiveApp>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CImmersiveApp>();
		};

		struct ComPtr<CImmersiveAppArray>
		{
			~ComPtr<CImmersiveAppArray>();
		};

		class ComPtr<CImmersiveMode>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CImmersiveMode>();
		};

		struct ComPtr<CImmersiveWindowFactory>
		{
			~ComPtr<CImmersiveWindowFactory>();
		};

		struct ComPtr<CImmersiveWindowManager>
		{
			~ComPtr<CImmersiveWindowManager>();
		};

		struct ComPtr<CInsightsExperienceManager>
		{
			~ComPtr<CInsightsExperienceManager>();
		};

		struct ComPtr<CJumpViewExperienceManager>
		{
			~ComPtr<CJumpViewExperienceManager>();
		};

		class ComPtr<CLaunchActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CLaunchToMonitor>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CMarshaledInterface::CMarshalStream>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<CMarshaledInterface::CMarshalStream> & operator=(ComPtr<CMarshaledInterface::CMarshalStream> const &);
			void Attach(CMarshaledInterface::CMarshalStream *);
		};

		class ComPtr<CMultitaskingViewFrame>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CMultitaskingViewHotKeyHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CMultitaskingViewManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<COperationWaiter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<COperationWaiter>();
		};

		class ComPtr<CPPIAllUpViewController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CPPIAllUpViewHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CPPIAllUpViewService>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CPeopleBarFlyoutExperienceManager::DebounceDetection::Notification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CPeopleBarFlyoutExperienceManager::DebounceDetection::Notification>();
		};

		struct ComPtr<CPeopleBarFlyoutExperienceManager>
		{
			~ComPtr<CPeopleBarFlyoutExperienceManager>();
		};

		struct ComPtr<CPeopleBarJumpViewExperienceManager>
		{
			~ComPtr<CPeopleBarJumpViewExperienceManager>();
		};

		struct ComPtr<CPerMonitorDesktopVisibilityService>
		{
			~ComPtr<CPerMonitorDesktopVisibilityService>();
		};

		struct ComPtr<CPlaceModeButtonAcc>
		{
			void Attach(CPlaceModeButtonAcc *);
		};

		class ComPtr<CPrivilegedArrangementOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CPrivilegedDesktopOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CPrivilegedForegroundOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CPrivilegedNotificationOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CPrivilegedPresentationOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CPrivilegedSizeConstraintsOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CPrivilegedTabletModeOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CQuickConnectExperienceManager>
		{
			~ComPtr<CQuickConnectExperienceManager>();
		};

		class ComPtr<CRefCountedObject<CAppViewManager::PRESENTED_WINDOW_CALLBACK_TRIGGER> >
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CRefCountedObject<CAppViewManager::PRESENTED_WINDOW_CALLBACK_TRIGGER> >();
		};

		class ComPtr<CRefCountedObject<CAutoHandle<void *> > >
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CRefCountedObject<CAutoHandle<void *> > >();
		};

		class ComPtr<CRefCountedObject<CAutoMemPtr<ZBAND_NOTIFICATION_DATA> > >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > >
		{
		protected:
			void InternalAddRef();
		public:
			ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > > & operator=(ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > > const &);
			~ComPtr<CRefCountedObject<CCoSimpleArray<unsigned __int64,4294967294,CSimpleArrayStandardCompareHelper<unsigned __int64> > > >();
		};

		class ComPtr<CRefCountedObject<CCoSimpleArray<unsigned long,4294967294,CSimpleArrayStandardCompareHelper<unsigned long> > > >
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CRefCountedObject<CCoSimpleArray<unsigned long,4294967294,CSimpleArrayStandardCompareHelper<unsigned long> > > >();
		};

		class ComPtr<CRefCountedObject<LightweightPropertySet::LightweightProperty> >
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CRefCountedObject<LightweightPropertySet::LightweightProperty> >();
		};

		class ComPtr<CRefCountedObject<PER_APPLICATION_DATA> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<CRefCountedObject<PER_APPLICATION_DATA> > & operator=(ComPtr<CRefCountedObject<PER_APPLICATION_DATA> > const &);
			~ComPtr<CRefCountedObject<PER_APPLICATION_DATA> >();
		};

		class ComPtr<CRefCountedObject<ViewEventDispatcher::PerApplicationData> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<CRefCountedObject<ViewEventDispatcher::PerApplicationData> >();
		};

		class ComPtr<CRefCountedObject<ViewEventRegistration> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<CRefCountedObject<ViewEventRegistration> > & operator=(ComPtr<CRefCountedObject<ViewEventRegistration> > const &);
			~ComPtr<CRefCountedObject<ViewEventRegistration> >();
		};

		class ComPtr<CRefCountedObject<VirtualDesktopAnimationSyncNotificationInstance::MarshalledData> >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CRotationManagerSync>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CRotationManagerSync>();
		};

		struct ComPtr<CScreenClippingExperienceManager>
		{
			~ComPtr<CScreenClippingExperienceManager>();
		};

		class ComPtr<CScrollButtonContainer>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CScrollViewer>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CScrollViewer *);
		};

		class ComPtr<CScrollViewerHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CShoulderTapExperienceManager>
		{
			~ComPtr<CShoulderTapExperienceManager>();
		};

		class ComPtr<CSimpleTempAppVisual>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CSimpleTempAppVisual *);
		};

		class ComPtr<CSnapAssistViewController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CSnapAssistViewHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CSplashScreen>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CSplashScreen>();
		};

		struct ComPtr<CStartExperienceManager>
		{
			~ComPtr<CStartExperienceManager>();
		};

		struct ComPtr<CSwitchController>
		{
			~ComPtr<CSwitchController>();
		};

		class ComPtr<CSwitchItemElementFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CSwitchItemGrid>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CTaskContinuityActivitiesExperienceManager>
		{
			~ComPtr<CTaskContinuityActivitiesExperienceManager>();
		};

		struct ComPtr<CTaskWindow>
		{
			void Attach(CTaskWindow *);
			~ComPtr<CTaskWindow>();
		};

		struct ComPtr<CToastCenterExperienceManager>
		{
			~ComPtr<CToastCenterExperienceManager>();
		};

		class ComPtr<CVirtualDesktop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CVirtualDesktop *);
		};

		class ComPtr<CVirtualDesktopApplicationViewEventListener>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CVirtualDesktopBarElement>
		{
			~ComPtr<CVirtualDesktopBarElement>();
		};

		class ComPtr<CVirtualDesktopCollection>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CVirtualDesktopCollection>();
		};

		struct ComPtr<CVirtualDesktopComponent>
		{
			~ComPtr<CVirtualDesktopComponent>();
		};

		class ComPtr<CVirtualDesktopDefaultForegroundHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CVirtualDesktopFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CVirtualDesktopForegroundPolicy>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CVirtualDesktopHolographicViewTransitionNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CVirtualDesktopHotkeyHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CVirtualDesktopLock>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CVirtualDesktopManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CVirtualDesktopManager>();
		};

		class ComPtr<CVirtualDesktopNotificationsDerived>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CVirtualDesktopVisibilityPolicy>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CVirtualTouchpadExperienceManager>
		{
			~ComPtr<CVirtualTouchpadExperienceManager>();
		};

		struct ComPtr<CWin32ApplicationView>
		{
			~ComPtr<CWin32ApplicationView>();
		};

		class ComPtr<CWinRTAppIconLoader>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CWinRTApplicationView>
		{
			~ComPtr<CWinRTApplicationView>();
		};

		class ComPtr<CWindowIconLoader>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<ChromeManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<ClientWindowReadyForPresentationEventArgs>
		{
			void Attach(ClientWindowReadyForPresentationEventArgs *);
			~ComPtr<ClientWindowReadyForPresentationEventArgs>();
		};

		struct ComPtr<CortanaDesktopExperienceView>
		{
			~ComPtr<CortanaDesktopExperienceView>();
		};

		struct ComPtr<CortanaExperienceManagerNotification>
		{
			~ComPtr<CortanaExperienceManagerNotification>();
		};

		struct ComPtr<CortanaSharedExperienceManager>
		{
			~ComPtr<CortanaSharedExperienceManager>();
		};

		class ComPtr<CortanaStoreAppExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CortanaStoreAppExperienceManager>();
		};

		class ComPtr<CoverWindowAcc>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CreationThreadDispatcher>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<CreationThreadDispatcher>();
		};

		class ComPtr<DesktopOperation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<DesktopOperation>();
		};

		struct ComPtr<Details::EventTargetArray>
		{
			ComPtr<Details::EventTargetArray> & operator=(ComPtr<Details::EventTargetArray> const &);
			ComPtr<Details::EventTargetArray> & operator=(Details::EventTargetArray *);
			void Attach(Details::EventTargetArray *);
			~ComPtr<Details::EventTargetArray>();
		};

		class ComPtr<DragData>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<DragInputHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ElementDragData>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<EyeControlAdapter>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<FrameWrapper>
		{
			~ComPtr<FrameWrapper>();
		};

		class ComPtr<FrameworkViewTypeSetEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<FrameworkViewTypeSetEventArgs>();
		};

		struct ComPtr<FullScreenPositioner>
		{
			~ComPtr<FullScreenPositioner>();
		};

		class ComPtr<GhostDivider>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<HolographicForegroundAssistant>
		{
			~ComPtr<HolographicForegroundAssistant>();
		};

		struct ComPtr<HolographicPositioner>
		{
			~ComPtr<HolographicPositioner>();
		};

		struct ComPtr<HolographicViewHostItemLedger>
		{
			~ComPtr<HolographicViewHostItemLedger>();
		};

		class ComPtr<IAboveLockActivationManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAboveLockActivationManager>();
		};

		struct ComPtr<IActiveZBandNotification>
		{
			~ComPtr<IActiveZBandNotification>();
		};

		class ComPtr<IActiveZBandNotificationForMonitorService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IActiveZBandNotificationForMonitorService>();
		};

		class ComPtr<IAgileObject>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAgileObject>();
		};

		class ComPtr<IAgileReference>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAllUpViewHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAllUpViewInvoker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAllUpViewService>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAltTabViewHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAltTabViewHostInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAnimatableMultitaskingViewElement>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IAnimatableScrollViewer>(Details::ComPtrRef<ComPtr<IAnimatableScrollViewer> >);
			long As<IVirtualDesktopBarElement>(Details::ComPtrRef<ComPtr<IVirtualDesktopBarElement> >);
		};

		class ComPtr<IAnimatableMultitaskingViewFrame>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAnimatableScrollViewer>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAnimatedDismissableHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAnimationCoordinator>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IAnimationCoordinator> & operator=(IAnimationCoordinator *);
		};

		class ComPtr<IAppLayout>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IAppLayout> & operator=(ComPtr<IAppLayout> const &);
			ComPtr<IAppLayout> & operator=(IAppLayout *);
			~ComPtr<IAppLayout>();
		};

		class ComPtr<IAppLayoutAnimationData>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppLayoutApplicationAcc>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppLayoutBuilder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppLayoutCache>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IAppLayoutCache> & operator=(IAppLayoutCache *);
			~ComPtr<IAppLayoutCache>();
		};

		class ComPtr<IAppLayoutCacheInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppLayoutInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppLayoutItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IAppLayoutItem> & operator=(IAppLayoutItem *);
			long As<IAppLayoutItemBuilder>(Details::ComPtrRef<ComPtr<IAppLayoutItemBuilder> >);
			~ComPtr<IAppLayoutItem>();
		};

		class ComPtr<IAppLayoutItemBuilder>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppLayoutItemBuilder>();
		};

		class ComPtr<IAppLayoutItemEnum>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppLayoutItemEnum>();
		};

		class ComPtr<IAppLayoutItemInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppLayoutOperation>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IObjectArray>(Details::ComPtrRef<ComPtr<IObjectArray> >);
			~ComPtr<IAppLayoutOperation>();
		};

		class ComPtr<IAppLayoutOperationBuilder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppLayoutOperationItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IAppLayoutThumbnail>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppResizeAcc>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppResizeData>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppResizeOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppResizeView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppResizeView>();
		};

		class ComPtr<IAppSizeConstraintsCallback>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppSizeConstraintsCallback>();
		};

		class ComPtr<IAppSwitchOperation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppSwitchOperation>();
		};

		class ComPtr<IAppTransitionManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppTransitionTargetManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppTransitionTargetManagerSink>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppUriResolver>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppUriResolver>();
		};

		class ComPtr<IAppViewCloseOverrideBehavior>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppViewDataSourceAdapter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppViewDataSourceAdapter>();
		};

		class ComPtr<IAppViewManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppViewManager>();
		};

		class ComPtr<IAppViewManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationActivationManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationActivationManager>();
		};

		class ComPtr<IApplicationActivationManagerPriv>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationActivationManagerPriv>();
		};

		class ComPtr<IApplicationActivationPhonePriv>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationActivationPhonePriv>();
		};

		class ComPtr<IApplicationChromeControls>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationDataPersistence>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationDataPersistence>();
		};

		class ComPtr<IApplicationFrame>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationFrame> & operator=(IApplicationFrame *);
			~ComPtr<IApplicationFrame>();
		};

		class ComPtr<IApplicationFrameFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IApplicationFrameFactory> & operator=(ComPtr<IApplicationFrameFactory> const &);
			~ComPtr<IApplicationFrameFactory>();
		};

		class ComPtr<IApplicationFrameManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationFrameManager> & operator=(ComPtr<IApplicationFrameManager> const &);
			~ComPtr<IApplicationFrameManager>();
		};

		class ComPtr<IApplicationFrameProxy>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationFrameProxy><CApplicationFrameWrapper>(ComPtr<CApplicationFrameWrapper> const &,void * *);
			~ComPtr<IApplicationFrameProxy>();
		};

		class ComPtr<IApplicationFrameService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationFrameService>();
		};

		class ComPtr<IApplicationFrameTitleBar>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IApplicationFrameTitleBar>();
		};

		class ComPtr<IApplicationFrameWrapper>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IApplicationFrameWrapper> & operator=(ComPtr<IApplicationFrameWrapper> const &);
			~ComPtr<IApplicationFrameWrapper>();
		};

		class ComPtr<IApplicationManagerViewPosition>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationManagerViewPosition>();
		};

		class ComPtr<IApplicationPositionPersistence>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationPositionPersistence>();
		};

		class ComPtr<IApplicationPresentationLayer>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IApplicationPresentationLayer> & operator=(IApplicationPresentationLayer *);
			~ComPtr<IApplicationPresentationLayer>();
		};

		class ComPtr<IApplicationResolver2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationResolver2>();
		};

		class ComPtr<IApplicationResolver>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationStateChangeOutOfProcNotificationService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationStateChangeOutOfProcNotificationService>();
		};

		class ComPtr<IApplicationTargetingTracker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationView2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationView2>();
		};

		class ComPtr<IApplicationView>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationView> & operator=(ComPtr<IApplicationView> const &);
			ComPtr<IApplicationView> & operator=(IApplicationView *);
			long As<IApplicationViewBase>(Details::ComPtrRef<ComPtr<IApplicationViewBase> >);
			long As<IWin32ApplicationView>(Details::ComPtrRef<ComPtr<IWin32ApplicationView> >);
			long As<IWinRTApplicationView>(Details::ComPtrRef<ComPtr<IWinRTApplicationView> >);
			~ComPtr<IApplicationView>();
		};

		class ComPtr<IApplicationViewArrangePosition>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationViewArrangePosition>();
		};

		class ComPtr<IApplicationViewBase>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationViewBase>();
		};

		class ComPtr<IApplicationViewChangeListener>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<IApplicationViewChangeListener>();
		};

		class ComPtr<IApplicationViewCollection>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationViewCollection> & operator=(IApplicationViewCollection *);
			~ComPtr<IApplicationViewCollection>();
		};

		class ComPtr<IApplicationViewCollectionManagement>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IApplicationViewCollectionManagement>();
		};

		class ComPtr<IApplicationViewCompatibilityManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationViewIconLoader>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationViewIconLoader> & operator=(IApplicationViewIconLoader *);
			~ComPtr<IApplicationViewIconLoader>();
		};

		class ComPtr<IApplicationViewIconLoaderNotifications>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationViewOperation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationViewOperation>();
		};

		class ComPtr<IApplicationViewPosition>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationViewPosition> & operator=<IOcclusionBasedApplicationViewPosition>(ComPtr<IOcclusionBasedApplicationViewPosition> const &);
			long As<IOcclusionBasedApplicationViewPosition>(Details::ComPtrRef<ComPtr<IOcclusionBasedApplicationViewPosition> >);
			~ComPtr<IApplicationViewPosition>();
		};

		class ComPtr<IApplicationViewReconstitution>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationViewReconstitution>();
		};

		class ComPtr<IApplicationViewSerialization>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationViewSerialization>();
		};

		class ComPtr<IApplicationViewStatePositioner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationViewStatePositioner>();
		};

		class ComPtr<IApplicationViewSwitcher>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationViewSwitcher> & operator=(IApplicationViewSwitcher *);
		};

		class ComPtr<IApplicationViewTitlebarConfiguration>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationViewTitlebarConfiguration> & operator=(IApplicationViewTitlebarConfiguration *);
			~ComPtr<IApplicationViewTitlebarConfiguration>();
		};

		class ComPtr<IApplicationViewVisibilityDebouncedNotificationService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IApplicationViewVisibilityDebouncedNotificationService> & operator=(IApplicationViewVisibilityDebouncedNotificationService *);
			~ComPtr<IApplicationViewVisibilityDebouncedNotificationService>();
		};

		class ComPtr<IApplicationViewVisibilityDebouncedNotificationServicePrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationViewWithEnterpriseId>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationViewWithEnterpriseId>();
		};

		class ComPtr<IApplicationWindowSizingPersistence>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationWindowSizingPersistence>();
		};

		class ComPtr<IAssociationArray>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssociationElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAsyncCallback>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IAsyncCallback> & operator=(IAsyncCallback *);
			~ComPtr<IAsyncCallback>();
		};

		class ComPtr<IAsyncCallbackDispatcher>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAsyncCallbackDispatcher>();
		};

		class ComPtr<IAsyncInfo>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IUnknown>(Details::ComPtrRef<ComPtr<IUnknown> >);
			long As<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> > >);
			long As<Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> > >);
			~ComPtr<IAsyncInfo>();
		};

		class ComPtr<IBamThrottleSettings>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IBamThrottleSettings>();
		};

		class ComPtr<IBasicPositioner>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBatterySaverStateChangedHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBatterySaverStateChangedHandler>();
		};

		class ComPtr<IBindCtx>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICallingProcessInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICharmWindowManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IClassFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IClassFactory>();
		};

		class ComPtr<IClassicWindow>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IClassicWindow> & operator=(ComPtr<IClassicWindow> const &);
			ComPtr<IClassicWindow> & operator=(IClassicWindow *);
			~ComPtr<IClassicWindow>();
		};

		class ComPtr<IClassicWindowCollectionRefresh>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IClassicWindowCollectionRefresh>();
		};

		class ComPtr<IClassicWindowContainer>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IClassicWindowManagerPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IClassicWindowManagerPrivate>();
		};

		class ComPtr<IClassicWindowOwnershipQuery>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IClassicWindowOwnershipQuery>();
		};

		class ComPtr<IClassicWindowPresentation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IClassicWindowOwnershipQuery>(Details::ComPtrRef<ComPtr<IClassicWindowOwnershipQuery> >);
			~ComPtr<IClassicWindowPresentation>();
		};

		class ComPtr<ICompactOverlayPositioner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICompactOverlayPositioner>();
		};

		class ComPtr<IControllerInvokeOptions>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICoreWindowInterop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICoreWindowInterop>();
		};

		class ComPtr<ICortanaExperienceFlow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICortanaStoreAppExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICortanaStoreAppExperienceManager>();
		};

		class ComPtr<ICoverWindowAcc>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ID2D1Bitmap>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ID2D1Bitmap>();
		};

		class ComPtr<ID2D1DeviceContext>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ID2D1DeviceContext>();
		};

		class ComPtr<ID2D1GradientStopCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ID2D1LinearGradientBrush>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ID2D1SolidColorBrush>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ID3D11Device>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ID3D11DeviceContext>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ID3D11Texture2D>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ID3D11Texture2D>();
		};

		class ComPtr<IDCompBatchAnimationCallback>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDCompBatcher>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IDCompBatcher>();
		};

		class ComPtr<IDCompThumbnail>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IDCompThumbnail> & operator=(ComPtr<IDCompThumbnail> const &);
			long As<IVirtualDesktopThumbnail>(Details::ComPtrRef<ComPtr<IVirtualDesktopThumbnail> >);
			~ComPtr<IDCompThumbnail>();
		};

		class ComPtr<IDCompositionDesktopDevicePartner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionDesktopDevicePartner>();
		};

		class ComPtr<IDCompositionDevice>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionDevice>();
		};

		class ComPtr<IDCompositionDeviceInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionDeviceInternal>();
		};

		class ComPtr<IDCompositionTarget>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionTarget>();
		};

		class ComPtr<IDCompositionVisual>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionVisual>();
		};

		class ComPtr<IDWMStoryboardListener>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDWMStoryboardListener>();
		};

		class ComPtr<IDWriteFactory2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDWriteFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDWriteInlineObject>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDWriteTextFormat>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IDWriteTextFormat> & operator=(IDWriteTextFormat *);
		};

		class ComPtr<IDXGIAdapter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDXGIAdapter>();
		};

		class ComPtr<IDXGIDevice3>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDXGIDevice3>();
		};

		class ComPtr<IDXGIDevice>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDXGIOutput1>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDXGIOutput>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDXGIOutput>();
		};

		class ComPtr<IDXGIOutputDuplication>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDXGIResource>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<ID3D11Texture2D>(Details::ComPtrRef<ComPtr<ID3D11Texture2D> >);
			~ComPtr<IDXGIResource>();
		};

		class ComPtr<IDefaultLaunchPositionOverride>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDefaultLaunchPositionOverride>();
		};

		class ComPtr<IDelayedAppActivation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDelayedAppActivation>();
		};

		class ComPtr<IDesktopOperation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDesktopOperation>();
		};

		class ComPtr<IDesktopVirtualDesktopDataSource>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDesktopVirtualDesktopDataSource>();
		};

		class ComPtr<IDesktopVisibilityChangesNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDesktopVisibilityChangesNotification>();
		};

		class ComPtr<IDesktopVisibilityService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDesktopVisibilityService>();
		};

		class ComPtr<IDialogManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDialogManager>();
		};

		class ComPtr<IDiscoverRecentItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDiscoverRecentItem>();
		};

		class ComPtr<IDismissAnimationController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDismissalAnimationHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDragData>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDragDropViewCreationHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDragDropViewCreationHandler>();
		};

		class ComPtr<IDragViewTracker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDragVisual>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDragVisualAcc>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDragVisualHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<ITabletModeInputCallback>(Details::ComPtrRef<ComPtr<ITabletModeInputCallback> >);
		};

		class ComPtr<IDropFeedback>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IDropFeedback> & operator=(ComPtr<IDropFeedback> const &);
		};

		class ComPtr<IDropFeedbackArray>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDropFeedbackItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IDropFeedbackItemInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEdgeUiManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IEdgeUiManager>();
		};

		class ComPtr<IElementFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IElementFactory> & operator=(IElementFactory *);
		};

		class ComPtr<IEnterpriseIdChangeNotificationProvider>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IEnterpriseIdChangeNotificationProvider>();
		};

		class ComPtr<IExternalDragCallback>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IExternalDragHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEyeControlManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IEyeControlManager>();
		};

		class ComPtr<IFadeAnimationOverlayWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFadeAnimationOverlayWindow>();
		};

		class ComPtr<IFallbackWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFallbackWindow>();
		};

		class ComPtr<IForegroundStagingWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFrameElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFrameInteractionEvents>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IFrameLevelAnimationCoordinator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFramedViewWrapper>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFramedViewWrapper>();
		};

		class ComPtr<IFullScreenManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFullScreenManager>();
		};

		class ComPtr<IFullScreenNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFullScreenPositioner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFullScreenPositioner>();
		};

		class ComPtr<IFullScreenPositionerNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFullScreenPositionerNotification>();
		};

		class ComPtr<IFullScreenPositionerNotificationService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFullScreenPositionerNotificationService>();
		};

		class ComPtr<IFullScreenPositionerPrivateNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFullScreenPositionerPrivateNotification>();
		};

		class ComPtr<IFullscreenCloudExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFullscreenCloudExperienceManager>();
		};

		class ComPtr<IGITCookieObject>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IGhostDivider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IGlobalInterfaceTable>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		struct ComPtr<IGlobalOptions>
		{
			~ComPtr<IGlobalOptions>();
		};

		class ComPtr<IGlobalRudeWindowNotificationService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IGlobalRudeWindowNotificationService>();
		};

		class ComPtr<IGlyphButton>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IGlyphButtonHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IHolographicCoordinatorInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IHolographicPositioner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHolographicPositioner>();
		};

		class ComPtr<IHolographicViewTransitionNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHolographicViewTransitionNotification>();
		};

		class ComPtr<IHolographicViewTransitionNotificationService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHolographicViewTransitionNotificationService>();
		};

		class ComPtr<IHolographicWin32SlateActivationLog>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IHostedApplicationNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedApplicationNotification>();
		};

		class ComPtr<IHostedViewDeferClose>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedViewDeferClose>();
		};

		class ComPtr<IIAMServiceProvider>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IIAMServiceProvider>();
		};

		class ComPtr<IIAMSpecialWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IIconLoaderInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IIconLoadingFunctions>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveAppCrusher>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IImmersiveAppCrusher> & operator=(IImmersiveAppCrusher *);
			~ComPtr<IImmersiveAppCrusher>();
		};

		class ComPtr<IImmersiveAppNotificationListeners>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveAppNotificationListeners>();
		};

		class ComPtr<IImmersiveApplication2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplication2>();
		};

		class ComPtr<IImmersiveApplication>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IImmersiveApplication2>(Details::ComPtrRef<ComPtr<IImmersiveApplication2> >);
			long As<IImmersiveApplicationHolographic>(Details::ComPtrRef<ComPtr<IImmersiveApplicationHolographic> >);
			long As<IImmersiveApplicationInternal>(Details::ComPtrRef<ComPtr<IImmersiveApplicationInternal> >);
			void Attach(IImmersiveApplication *);
			~ComPtr<IImmersiveApplication>();
		};

		class ComPtr<IImmersiveApplicationArray2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationArray2>();
		};

		class ComPtr<IImmersiveApplicationArray>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IImmersiveApplicationArray>();
		};

		class ComPtr<IImmersiveApplicationArrayPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationArrayPrivate>();
		};

		class ComPtr<IImmersiveApplicationArrayService2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationArrayService2>();
		};

		class ComPtr<IImmersiveApplicationArrayService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationArrayService>();
		};

		class ComPtr<IImmersiveApplicationHolographic>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationHolographic>();
		};

		class ComPtr<IImmersiveApplicationInternal>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveApplicationInternal> & operator=(ComPtr<IImmersiveApplicationInternal> const &);
			ComPtr<IImmersiveApplicationInternal> & operator=(IImmersiveApplicationInternal *);
			long As<IImmersiveApplication>(Details::ComPtrRef<ComPtr<IImmersiveApplication> >);
			~ComPtr<IImmersiveApplicationInternal>();
		};

		class ComPtr<IImmersiveApplicationManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationManager>();
		};

		class ComPtr<IImmersiveApplicationManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveApplicationManagerInternal> & operator=(IImmersiveApplicationManagerInternal *);
			~ComPtr<IImmersiveApplicationManagerInternal>();
		};

		class ComPtr<IImmersiveApplicationManagerSafeForSyncCallouts2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationManagerSafeForSyncCallouts2>();
		};

		class ComPtr<IImmersiveApplicationManagerSafeForSyncCallouts>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationManagerSafeForSyncCallouts>();
		};

		class ComPtr<IImmersiveApplicationNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationNotification>();
		};

		class ComPtr<IImmersiveApplicationNotificationService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IImmersiveApplicationNotificationService>();
		};

		class ComPtr<IImmersiveApplicationPresentation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IApplicationManagerViewPosition>(Details::ComPtrRef<ComPtr<IApplicationManagerViewPosition> >);
			long As<IApplicationViewSerialization>(Details::ComPtrRef<ComPtr<IApplicationViewSerialization> >);
			~ComPtr<IImmersiveApplicationPresentation>();
		};

		class ComPtr<IImmersiveApplicationPresentationListener>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<IImmersiveApplicationTransitionHelper>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationTransitionHelper>();
		};

		class ComPtr<IImmersiveApplicationWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(IImmersiveApplicationWindow *);
			~ComPtr<IImmersiveApplicationWindow>();
		};

		class ComPtr<IImmersiveComponentCreator>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveComponentCreator>();
		};

		class ComPtr<IImmersiveIconicBitmap>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveLauncher>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveLauncher>();
		};

		class ComPtr<IImmersiveLauncherCortana>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveLauncherCortana>();
		};

		class ComPtr<IImmersiveLauncherVisibilityListener>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveLauncherVisibilityListener>();
		};

		class ComPtr<IImmersiveLayout>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IImmersiveLayout> & operator=(ComPtr<IImmersiveLayout> const &);
			~ComPtr<IImmersiveLayout>();
		};

		class ComPtr<IImmersiveMonitor>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveMonitor> & operator=(ComPtr<IImmersiveMonitor> const &);
			ComPtr<IImmersiveMonitor> & operator=(IImmersiveMonitor *);
			~ComPtr<IImmersiveMonitor>();
		};

		class ComPtr<IImmersiveMonitorManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveMonitorManager> & operator=(IImmersiveMonitorManager *);
			~ComPtr<IImmersiveMonitorManager>();
		};

		class ComPtr<IImmersiveMonitorNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveMonitorNotification>();
		};

		class ComPtr<IImmersiveMonitorNotificationService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveMonitorNotificationService> & operator=(IImmersiveMonitorNotificationService *);
			~ComPtr<IImmersiveMonitorNotificationService>();
		};

		class ComPtr<IImmersiveRawInputProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveSessionIdleDetector>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveSessionIdleDetector>();
		};

		class ComPtr<IImmersiveSessionIdleNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveSessionIdleNotification>();
		};

		class ComPtr<IImmersiveSettingsCache>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveSettingsCache> & operator=(IImmersiveSettingsCache *);
			~ComPtr<IImmersiveSettingsCache>();
		};

		class ComPtr<IImmersiveShellBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveShellBroker>();
		};

		class ComPtr<IImmersiveShellController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveShellCreationBehavior>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveShellCreationBehavior>();
		};

		class ComPtr<IImmersiveShellHookService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveShellHookService> & operator=(IImmersiveShellHookService *);
			~ComPtr<IImmersiveShellHookService>();
		};

		class ComPtr<IImmersiveSystemModeInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveSystemModeNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveSystemModeNotification>();
		};

		class ComPtr<IImmersiveWindowManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveWindowManager>();
		};

		class ComPtr<IImmersiveWindowManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveWindowManagerInternal>();
		};

		class ComPtr<IImmersiveWindowMessageService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IImmersiveWindowMessageService>();
		};

		class ComPtr<IInputDeviceWatcher>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInputHostLayout>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<IInputHostManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IInputHostManager>();
		};

		class ComPtr<IInspectable>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IInspectable> & operator=(IInspectable *);
			long As<ICoreWindowInterop>(Details::ComPtrRef<ComPtr<ICoreWindowInterop> >);
			long As<IServiceProvider>(Details::ComPtrRef<ComPtr<IServiceProvider> >);
			long As<Windows::Foundation::IPropertyValue>(Details::ComPtrRef<ComPtr<Windows::Foundation::IPropertyValue> >);
			long As<Windows::Internal::Shell::Experience::IStartExperienceManager>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::Experience::IStartExperienceManager> >);
			~ComPtr<IInspectable>();
		};

		struct ComPtr<IInternalFullScreenHandler>
		{
			~ComPtr<IInternalFullScreenHandler>();
		};

		class ComPtr<IInvocationAnimationHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInvokeProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IJointResizeAcc>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILambda>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILambda>();
		};

		class ComPtr<ILaunchSourceAppUserModelId>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILaunchSourceAppUserModelId>();
		};

		class ComPtr<ILaunchSourceViewSizePreference>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILaunchSourceViewSizePreference>();
		};

		class ComPtr<ILaunchTargetViewSizePreference>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILaunchTargetViewSizePreference>();
		};

		class ComPtr<ILaunchUIContextProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILaunchUIContextProvider>();
		};

		struct ComPtr<ILightDismissProvider>
		{
			~ComPtr<ILightDismissProvider>();
		};

		class ComPtr<ILockAppHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILockAppHost>();
		};

		class ComPtr<ILockAppHostPlatform>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILockAppHostPlatform>();
		};

		class ComPtr<ILockScreenDirector>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILockScreenDirector>();
		};

		class ComPtr<ILockScreenDirectorServiceProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILockScreenDirectorServiceProvider>();
		};

		class ComPtr<ILockScreenViewManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILockScreenViewManager>();
		};

		class ComPtr<IMarshal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMessageCallReceiveHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMessageCallSendHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMessageFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMessageFactory>();
		};

		class ComPtr<IMessageList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMessageLoopExtensions>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMessageLoopExtensions>();
		};

		class ComPtr<IMessageMap>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMessageMap>();
		};

		class ComPtr<IMessageObject>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMessageObject>();
		};

		class ComPtr<IMessagePort>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMessageProxy>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMessageProxy>();
		};

		class ComPtr<IMessageProxyList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMessageProxyList>();
		};

		class ComPtr<IMessageRegistrar>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMessageRegistrar>();
		};

		class ComPtr<IMessageSession>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMessageSession>();
		};

		class ComPtr<IMessageTimer>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMessageTimer>();
		};

		class ComPtr<IMrtResourceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMrtResourceManager>();
		};

		class ComPtr<IMultitaskingData>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IMultitaskingData> & operator=(IMultitaskingData *);
		};

		class ComPtr<IMultitaskingViewAnimation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IMultitaskingViewAnimation> & operator=(IMultitaskingViewAnimation *);
		};

		class ComPtr<IMultitaskingViewController>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IDismissAnimationController>(Details::ComPtrRef<ComPtr<IDismissAnimationController> >);
			long As<IFrameInteractionEvents>(Details::ComPtrRef<ComPtr<IFrameInteractionEvents> >);
			long As<ISnapAssistViewController>(Details::ComPtrRef<ComPtr<ISnapAssistViewController> >);
			long As<ISwitchItemController>(Details::ComPtrRef<ComPtr<ISwitchItemController> >);
		};

		class ComPtr<IMultitaskingViewDismissCallback>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMultitaskingViewDismissCallback>();
		};

		class ComPtr<IMultitaskingViewDragData>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IMultitaskingViewDragProvider>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<IMultitaskingViewDragSource>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewDragVisual>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewElement>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IMultitaskingViewElement> & operator=(ComPtr<IMultitaskingViewElement> const &);
			ComPtr<IMultitaskingViewElement> & operator=(IMultitaskingViewElement *);
			long As<IFrameElement>(Details::ComPtrRef<ComPtr<IFrameElement> >);
			long As<IGlyphButton>(Details::ComPtrRef<ComPtr<IGlyphButton> >);
			long As<IMultitaskingViewDragSource>(Details::ComPtrRef<ComPtr<IMultitaskingViewDragSource> >);
			long As<IMultitaskingViewElementRoot>(Details::ComPtrRef<ComPtr<IMultitaskingViewElementRoot> >);
			long As<IMultitaskingViewGridElement>(Details::ComPtrRef<ComPtr<IMultitaskingViewGridElement> >);
			long As<IScrollButtonContainer>(Details::ComPtrRef<ComPtr<IScrollButtonContainer> >);
			long As<IScrollButtonContainerHost>(Details::ComPtrRef<ComPtr<IScrollButtonContainerHost> >);
			long As<IScrollViewer>(Details::ComPtrRef<ComPtr<IScrollViewer> >);
			long As<IVirtualDesktopBarElement>(Details::ComPtrRef<ComPtr<IVirtualDesktopBarElement> >);
			long As<IVirtualDesktopContainerElement>(Details::ComPtrRef<ComPtr<IVirtualDesktopContainerElement> >);
			long As<IVirtualDesktopItemElement>(Details::ComPtrRef<ComPtr<IVirtualDesktopItemElement> >);
			long As<IVirtualDesktopNewElement>(Details::ComPtrRef<ComPtr<IVirtualDesktopNewElement> >);
		};

		class ComPtr<IMultitaskingViewElementRoot>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewForegroundStaging>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewFrame>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IAnimatableMultitaskingViewFrame>(Details::ComPtrRef<ComPtr<IAnimatableMultitaskingViewFrame> >);
		};

		class ComPtr<IMultitaskingViewGestureHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewGestureState>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IMultitaskingViewGestureState> & operator=(IMultitaskingViewGestureState *);
		};

		class ComPtr<IMultitaskingViewGestureStateInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewGridElement>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IMultitaskingViewHost>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IMultitaskingViewHost>();
		};

		class ComPtr<IMultitaskingViewHotKeyHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IMultitaskingViewManager> & operator=(IMultitaskingViewManager *);
			long As<IMultitaskingViewDismissCallback>(Details::ComPtrRef<ComPtr<IMultitaskingViewDismissCallback> >);
			long As<IMultitaskingViewManagerInternal>(Details::ComPtrRef<ComPtr<IMultitaskingViewManagerInternal> >);
			~ComPtr<IMultitaskingViewManager>();
		};

		class ComPtr<IMultitaskingViewManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IMultitaskingViewManagerInternal> & operator=(IMultitaskingViewManagerInternal *);
			long As<IMultitaskingViewForegroundStaging>(Details::ComPtrRef<ComPtr<IMultitaskingViewForegroundStaging> >);
		};

		class ComPtr<IMultitaskingViewServiceProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewTaskCallback>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewTaskScheduler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IMultitaskingViewTaskScheduler> & operator=(IMultitaskingViewTaskScheduler *);
		};

		class ComPtr<IMultitaskingViewTelemetryHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewVisibilityNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewVisibilityService>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMultitaskingViewVisibilityServiceInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IMultitaskingViewVisibilityServiceInternal> & operator=(IMultitaskingViewVisibilityServiceInternal *);
		};

		class ComPtr<INotificationController>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<INotificationController>();
		};

		class ComPtr<INotificationSettings>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INtUserViewWrapper>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<INtUserViewWrapper>();
		};

		class ComPtr<IOSTaskCompletion>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IOSTaskCompletion> & operator=(ComPtr<IOSTaskCompletion> const &);
			~ComPtr<IOSTaskCompletion>();
		};

		class ComPtr<IObjMgr>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IObjMgr>();
		};

		class ComPtr<IObjectArray>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IObjectArray> & operator=(IObjectArray *);
			void Attach(IObjectArray *);
			~ComPtr<IObjectArray>();
		};

		class ComPtr<IObjectCollection>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IObjectCollection>();
		};

		class ComPtr<IObjectProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IObjectProvider>();
		};

		class ComPtr<IObjectWithSite>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IObjectWithSite>();
		};

		class ComPtr<IObservableItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IVirtualDesktopItemInternal>(Details::ComPtrRef<ComPtr<IVirtualDesktopItemInternal> >);
		};

		class ComPtr<IObservableObjectArray>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IObservableObjectArray> & operator=(IObservableObjectArray *);
			ComPtr<IObservableObjectArray> & operator=<ISwitchItemFilteredCollection>(ComPtr<ISwitchItemFilteredCollection> const &);
		};

		class ComPtr<IObservableObjectArrayChanged>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObservableObjectArrayChangedBeginEnd>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IOcclusionBasedApplicationViewPosition>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IOcclusionBasedApplicationViewPosition>();
		};

		class ComPtr<IPPIAllUpViewHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPPIAllUpViewService>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPPILayoutOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPWSLayoutItemInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPWSLayoutItemInternal>();
		};

		class ComPtr<IPWSLayoutParser>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPWSLayoutParser>();
		};

		class ComPtr<IPenWorkspaceLayoutItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IPenWorkspaceLayoutItem>();
		};

		class ComPtr<IPenWorkspaceLayoutPolicyManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPenWorkspaceLayoutPolicyManager>();
		};

		class ComPtr<IPeoplePaneViewManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPeoplePaneViewManager>();
		};

		class ComPtr<IPeoplePaneViewUpdateSink>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<IPeoplePaneViewUpdateSink>();
		};

		class ComPtr<IPerMonitorShellPositionerManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPerMonitorShellPositionerManager>();
		};

		class ComPtr<IPersistStream>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPersistStream>();
		};

		class ComPtr<IPlaceModeButtonAcc>
		{
		protected:
			void InternalAddRef();
		public:
			ComPtr<IPlaceModeButtonAcc> & operator=(ComPtr<IPlaceModeButtonAcc> const &);
			ComPtr<IPlaceModeButtonAcc><CPlaceModeButtonAcc>(ComPtr<CPlaceModeButtonAcc> const &,void * *);
		};

		class ComPtr<IPlaceModeData>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPositionAdjustmentHistory>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IPresentationRequestedArgs>
		{
			~ComPtr<IPresentationRequestedArgs>();
		};

		class ComPtr<IPresentedWindowOverride>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPresentedWindowOverride>();
		};

		class ComPtr<IPriviledgedPositioner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IPriviledgedPositioner> & operator=(IPriviledgedPositioner *);
		};

		class ComPtr<IPrivilegedArrangementOperations>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPrivilegedArrangementOperations>();
		};

		class ComPtr<IPrivilegedDesktopOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPrivilegedForegroundOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPrivilegedNotificationOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPrivilegedOperationsConsumer>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPrivilegedOperationsConsumer>();
		};

		class ComPtr<IPrivilegedPresentationOperations>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IPrivilegedPresentationOperations> & operator=(IPrivilegedPresentationOperations *);
			~ComPtr<IPrivilegedPresentationOperations>();
		};

		class ComPtr<IPrivilegedSizeConstraintsOperations>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPrivilegedSizeConstraintsOperations>();
		};

		class ComPtr<IPrivilegedTabletModeOperations>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPrivilegedTabletModeOperations>();
		};

		class ComPtr<IPrivilegedWindowOwnershipOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IProcessLifetimeManagerControl>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IProcessLifetimeManagerControl>();
		};

		class ComPtr<IPropertyBag2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPropertyBag2>();
		};

		class ComPtr<IPropertyStore>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPropertyStore>();
		};

		class ComPtr<IProxyServerIdentity>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IProxyServerIdentity>();
		};

		class ComPtr<IQueryAssociations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRawElementProviderFragment>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IRawElementProviderSimple>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<ICoverWindowAcc>(Details::ComPtrRef<ComPtr<ICoverWindowAcc> >);
		};

		class ComPtr<IRealmActivationHistory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRealmActivationHistory>();
		};

		class ComPtr<IRealmActivationHistoryInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRemoteTabTipPolicy>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRemoteTabTipPolicy>();
		};

		class ComPtr<IRequestTrustedComponentForegroundControlInitialization>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRequestTrustedComponentForegroundControlInitialization>();
		};

		class ComPtr<IResourceCandidate2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IResourceCandidate>(Details::ComPtrRef<ComPtr<IResourceCandidate> >);
		};

		class ComPtr<IResourceCandidate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IResourceCandidate>();
		};

		class ComPtr<IResourceContext>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IResourceContext>();
		};

		class ComPtr<IResourceMap2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IResourceMap2>();
		};

		class ComPtr<IResourceMap>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IResourceMap>();
		};

		class ComPtr<IRestrictedErrorInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRotationManagerSync>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRotationManagerSync>();
		};

		class ComPtr<IRpcOptions>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRpcOptions>();
		};

		class ComPtr<IRudeWindowManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IScreenClippingBroker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IScreenManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IScrollButtonContainer>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IScrollButtonContainerHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IScrollViewer>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IMultitaskingViewElement>(Details::ComPtrRef<ComPtr<IMultitaskingViewElement> >);
		};

		class ComPtr<IScrollableElement>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IMultitaskingViewElement>(Details::ComPtrRef<ComPtr<IMultitaskingViewElement> >);
		};

		class ComPtr<IServiceHostBrokerProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IServiceHostBrokerProvider>();
		};

		class ComPtr<IServiceProvider>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IServiceProvider> & operator=(IServiceProvider *);
			~ComPtr<IServiceProvider>();
		};

		class ComPtr<ISharedBitmap>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellDropTarget>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellDropTarget>();
		};

		class ComPtr<IShellItem2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellItem>();
		};

		class ComPtr<IShellPositionerActivationHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellPositionerActivationHandler>();
		};

		class ComPtr<IShellPositionerFrameworkViewTypeChangedHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellPositionerFrameworkViewTypeChangedHandler>();
		};

		class ComPtr<IShellPositionerManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellPositionerManager>();
		};

		class ComPtr<IShellPositionerPriority>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellPositionerPriority>();
		};

		class ComPtr<IShellPositionerPriorityPersistence>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellPositionerPriorityPersistence>();
		};

		class ComPtr<IShellPositionerProxy>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellPositionerProxy>();
		};

		class ComPtr<IShellPositionerViewHandoff>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IShellPositionerViewHandoff>();
			~ComPtr<IShellPositionerViewHandoff>();
		};

		class ComPtr<IShellPositionerWindowingDelegationHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellRotationManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellRotationManager>();
		};

		class ComPtr<IShellTargetingContractManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IShellTargetingContractManager> & operator=(IShellTargetingContractManager *);
			~ComPtr<IShellTargetingContractManager>();
		};

		class ComPtr<IShellTargetingTracker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellUserAssist>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IShellUserAssist>();
		};

		class ComPtr<IShouldSwitchToDesktop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShouldSwitchToDesktop>();
		};

		class ComPtr<ISnapAssistCallback>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ISnapAssistCallback> & operator=(ISnapAssistCallback *);
		};

		class ComPtr<ISnapAssistController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISnapAssistViewController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISnapComponent>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<ISnapServiceProvider>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ISnapServiceProvider> & operator=(ISnapServiceProvider *);
			~ComPtr<ISnapServiceProvider>();
		};

		class ComPtr<ISplashScreen>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<ISplashScreen>();
		};

		class ComPtr<IStartDismissalPolicy>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IStartDismissalPolicy>();
		};

		class ComPtr<IStoryboardExtraData>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IStoryboardExtraData>();
		};

		struct ComPtr<IStream>
		{
			~ComPtr<IStream>();
		};

		class ComPtr<ISwitchController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISwitchItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ISwitchItem> & operator=(ISwitchItem *);
		};

		class ComPtr<ISwitchItemCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISwitchItemController>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ISwitchItemController> & operator=(ISwitchItemController *);
		};

		class ComPtr<ISwitchItemElement>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ISwitchItemElement> & operator=(ComPtr<ISwitchItemElement> const &);
		};

		class ComPtr<ISwitchItemFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISwitchItemFilteredCollection>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ISwitchItemFilteredCollection> & operator=(ComPtr<ISwitchItemFilteredCollection> const &);
			~ComPtr<ISwitchItemFilteredCollection>();
		};

		class ComPtr<ISwitchItemGrid>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IMultitaskingViewElement>(Details::ComPtrRef<ComPtr<IMultitaskingViewElement> >);
		};

		class ComPtr<ISwitchItemInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ISwitchItemInternal>();
		};

		class ComPtr<ISwitchItemThumbnailElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISwitchThumbnailDeviceManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ISwitchThumbnailDeviceManager> & operator=(ISwitchThumbnailDeviceManager *);
			~ComPtr<ISwitchThumbnailDeviceManager>();
		};

		class ComPtr<ISwitchThumbnailFactory>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ISwitchThumbnailFactory> & operator=(ISwitchThumbnailFactory *);
			~ComPtr<ISwitchThumbnailFactory>();
		};

		class ComPtr<ISyncIAMEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ISyncIAMEventHandler>();
		};

		class ComPtr<ITabViewManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ITabViewManager> & operator=(ITabViewManager *);
			~ComPtr<ITabViewManager>();
		};

		class ComPtr<ITabletModeChangeListener>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITabletModeChangeListener>();
		};

		class ComPtr<ITabletModeChrome>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModeChromeManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModeController>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ITabletModeController> & operator=(ITabletModeController *);
			~ComPtr<ITabletModeController>();
		};

		class ComPtr<ITabletModeControllerPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModeCoverWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModeInputCallback>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ITabletModeInputCallback> & operator=(ITabletModeInputCallback *);
			~ComPtr<ITabletModeInputCallback>();
		};

		class ComPtr<ITabletModeInputHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModeInputSource>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModePositioner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITabletModePositioner>();
		};

		class ComPtr<ITabletModePositionerHandoffContext>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITabletModePositionerHandoffContext>();
		};

		class ComPtr<ITabletModePositionerManager>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<ITabletModePositionerManagerNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModePositionerManagerPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModePositionerOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModePositionerPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModeViewManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ITabletModeViewManager> & operator=(ITabletModeViewManager *);
			~ComPtr<ITabletModeViewManager>();
		};

		class ComPtr<ITabletModeViewManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModeViewManagerProxy>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITaggableTarget>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITaskWindow>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ITaskWindow> & operator=(ITaskWindow *);
			~ComPtr<ITaskWindow>();
		};

		class ComPtr<ITaskbarLayoutItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<ITaskbarLayoutItemInternal>(Details::ComPtrRef<ComPtr<ITaskbarLayoutItemInternal> >);
			~ComPtr<ITaskbarLayoutItem>();
		};

		class ComPtr<ITaskbarLayoutItemInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITaskbarLayoutItemInternal>();
		};

		class ComPtr<ITaskbarLayoutParser>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITaskbarLayoutParser>();
		};

		class ComPtr<ITemporaryAppVisual>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<ITemporaryAppVisualArray>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<ITemporarySplashScreen>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITemporarySplashScreen>();
		};

		class ComPtr<IThumbnailCache>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IThumbnailDeviceSource>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IThumbnailDeviceSource>();
		};

		class ComPtr<ITimerLambda>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITimerLambda>();
		};

		class ComPtr<ITouchKeyboardExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITouchKeyboardExperienceManager>();
		};

		class ComPtr<ITouchpadSettingsManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITransitionCoordinator>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITransitionCoordinator>();
		};

		class ComPtr<ITrustedComponentForegroundControl>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ITrustedComponentForegroundControl> & operator=(ITrustedComponentForegroundControl *);
			~ComPtr<ITrustedComponentForegroundControl>();
		};

		class ComPtr<IUIAnimationStoryboardEventHandler2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IUIAnimationStoryboardEventHandler2>();
		};

		class ComPtr<IUnknown>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IUnknown> & operator=(ComPtr<IUnknown> const &);
			ComPtr<IUnknown> & operator=(IUnknown *);
			ComPtr<IUnknown>();
			long As<IClassicWindow>(Details::ComPtrRef<ComPtr<IClassicWindow> >);
			long As<IImmersiveApplication2>(Details::ComPtrRef<ComPtr<IImmersiveApplication2> >);
			long As<IImmersiveApplication>(Details::ComPtrRef<ComPtr<IImmersiveApplication> >);
			long As<IImmersiveApplicationInternal>(Details::ComPtrRef<ComPtr<IImmersiveApplicationInternal> >);
			long As<IStoryboardExtraData>(Details::ComPtrRef<ComPtr<IStoryboardExtraData> >);
			long As<ITabletModeViewManager>(Details::ComPtrRef<ComPtr<ITabletModeViewManager> >);
			long As<ITemporaryAppVisual>(Details::ComPtrRef<ComPtr<ITemporaryAppVisual> >);
			long As<Navigation::Server::IServerWindow>(Details::ComPtrRef<ComPtr<Navigation::Server::IServerWindow> >);
			long As<Navigation::Server::IShellView>(Details::ComPtrRef<ComPtr<Navigation::Server::IShellView> >);
			void Attach(IUnknown *);
			~ComPtr<IUnknown>();
		};

		class ComPtr<IUpdateViewValueSet>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IUpdateViewValueSet>();
		};

		class ComPtr<IUri>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IViewEventDispatcherCrashRecovery>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IViewEventDispatcherCrashRecovery>();
		};

		class ComPtr<IViewGroup>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IViewGroup>();
		};

		class ComPtr<IViewGroupManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IViewGroupManager>();
		};

		class ComPtr<IViewPresentationMediator>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IViewPresentationMediator>();
		};

		class ComPtr<IViewWrapperInternal>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IViewWrapperInternal> & operator=(ComPtr<IViewWrapperInternal> const &);
			ComPtr<IViewWrapperInternal><ViewWrapperBase>(ViewWrapperBase *);
			long As<IViewWrapperInternal>(Details::ComPtrRef<ComPtr<IViewWrapperInternal> >);
			~ComPtr<IViewWrapperInternal>();
		};

		class ComPtr<IVirtualDesktop2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktop2>();
		};

		class ComPtr<IVirtualDesktop>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IVirtualDesktop> & operator=(ComPtr<IVirtualDesktop> const &);
			ComPtr<IVirtualDesktop> & operator=(IVirtualDesktop *);
			long As<IInspectable>(Details::ComPtrRef<ComPtr<IInspectable> >);
			long As<IVirtualDesktop2>(Details::ComPtrRef<ComPtr<IVirtualDesktop2> >);
			~ComPtr<IVirtualDesktop>();
		};

		class ComPtr<IVirtualDesktopAccessibilityInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopAnimationNotificationInstance>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopAnimationNotificationInstance>();
		};

		class ComPtr<IVirtualDesktopAnimationSyncNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopAnimationSyncNotification>();
		};

		class ComPtr<IVirtualDesktopAnimationSyncNotificationServicePrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopAnimationSyncNotificationServicePrivate>();
		};

		class ComPtr<IVirtualDesktopBarElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopCollection>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopCollection> & operator=(IVirtualDesktopCollection *);
			~ComPtr<IVirtualDesktopCollection>();
		};

		class ComPtr<IVirtualDesktopContainerElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopControllerInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopDataSourceInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopDefaultForegroundHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopDefaultForegroundHandler>();
		};

		class ComPtr<IVirtualDesktopElementFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopElementFactory> & operator=(IVirtualDesktopElementFactory *);
		};

		class ComPtr<IVirtualDesktopFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopFactory>();
		};

		class ComPtr<IVirtualDesktopForegroundPolicy>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopForegroundPolicy> & operator=(IVirtualDesktopForegroundPolicy *);
		};

		class ComPtr<IVirtualDesktopGestureHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopGestureHandlerPrivate>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<IVirtualDesktopGestureHandlerPrivate>();
		};

		class ComPtr<IVirtualDesktopGroupedViewsManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopGroupedViewsPolicy>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopGroupedViewsPolicy> & operator=(IVirtualDesktopGroupedViewsPolicy *);
		};

		class ComPtr<IVirtualDesktopHotkeyHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopHotkeyHandler>();
		};

		class ComPtr<IVirtualDesktopInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopInternal>();
		};

		class ComPtr<IVirtualDesktopItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IVirtualDesktopItemElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopItemFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopItemInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopLock>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopLock> & operator=(IVirtualDesktopLock *);
		};

		class ComPtr<IVirtualDesktopManagerInternal2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopManagerInternal2>();
		};

		class ComPtr<IVirtualDesktopManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IVirtualDesktopManagerInternal> & operator=(IVirtualDesktopManagerInternal *);
			long As<IInspectable>(Details::ComPtrRef<ComPtr<IInspectable> >);
			~ComPtr<IVirtualDesktopManagerInternal>();
		};

		class ComPtr<IVirtualDesktopManagerPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopManagerPrivate> & operator=(IVirtualDesktopManagerPrivate *);
		};

		class ComPtr<IVirtualDesktopNewElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopNotification2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopNotification2>();
		};

		class ComPtr<IVirtualDesktopNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopNotification>();
		};

		class ComPtr<IVirtualDesktopNotificationService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IVirtualDesktopNotificationService> & operator=(IVirtualDesktopNotificationService *);
			~ComPtr<IVirtualDesktopNotificationService>();
		};

		class ComPtr<IVirtualDesktopNotificationServicePrivate>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IVirtualDesktopNotificationServicePrivate>();
		};

		class ComPtr<IVirtualDesktopPersistence2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopPersistence2>();
		};

		class ComPtr<IVirtualDesktopPinnedApps>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IVirtualDesktopPinnedApps> & operator=(IVirtualDesktopPinnedApps *);
			~ComPtr<IVirtualDesktopPinnedApps>();
		};

		class ComPtr<IVirtualDesktopPinnedAppsPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopPinnedAppsPrivate> & operator=(IVirtualDesktopPinnedAppsPrivate *);
		};

		class ComPtr<IVirtualDesktopPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopPrivate>();
		};

		class ComPtr<IVirtualDesktopRegistryHelpers>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopRegistryHelpers> & operator=(IVirtualDesktopRegistryHelpers *);
			~ComPtr<IVirtualDesktopRegistryHelpers>();
		};

		class ComPtr<IVirtualDesktopSwitchAnimator>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopSwitchAnimator> & operator=(IVirtualDesktopSwitchAnimator *);
		};

		class ComPtr<IVirtualDesktopTabletModePolicy>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopTabletModePolicyService>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopThumbnail>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopThumbnail>();
		};

		class ComPtr<IVirtualDesktopThumbnailWindowFilter>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IVirtualDesktopThumbnailWindowFilter> & operator=(IVirtualDesktopThumbnailWindowFilter *);
		};

		class ComPtr<IVirtualDesktopThumbnailWindowFilterChanges>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopVisibilityPolicy>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopVisibilityPolicy> & operator=(IVirtualDesktopVisibilityPolicy *);
			~ComPtr<IVirtualDesktopVisibilityPolicy>();
		};

		class ComPtr<IVirtualDesktopWindowMoveManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IVirtualDesktopWindowMoveManager> & operator=(IVirtualDesktopWindowMoveManager *);
		};

		class ComPtr<IVirtualDesktopsApiInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVisibilityOverride>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVoiceAssistantPositioner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVoiceAssistantPositioner>();
		};

		class ComPtr<IWICBitmap>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICBitmap>();
		};

		class ComPtr<IWICBitmapDecoder>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICBitmapDecoder>();
		};

		class ComPtr<IWICBitmapEncoder>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICBitmapEncoder>();
		};

		struct ComPtr<IWICBitmapFlipRotator>
		{
			~ComPtr<IWICBitmapFlipRotator>();
		};

		class ComPtr<IWICBitmapFrameDecode>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICBitmapFrameDecode>();
		};

		class ComPtr<IWICBitmapFrameEncode>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICBitmapFrameEncode>();
		};

		class ComPtr<IWICBitmapScaler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWICBitmapSource>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IWICBitmapSource> & operator=<IWICBitmap>(ComPtr<IWICBitmap> const &);
			ComPtr<IWICBitmapSource> & operator=<IWICBitmapFlipRotator>(ComPtr<IWICBitmapFlipRotator> const &);
			~ComPtr<IWICBitmapSource>();
		};

		class ComPtr<IWICFormatConverter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICFormatConverter>();
		};

		class ComPtr<IWICImagingFactory2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICImagingFactory2>();
		};

		class ComPtr<IWICImagingFactory>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IWICImagingFactory>();
		};

		class ComPtr<IWin32ApplicationView>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IWin32ApplicationView>();
		};

		class ComPtr<IWinRTApplicationView>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IWinRTApplicationView>();
		};

		class ComPtr<IWindowArrangementOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWindowArrangementView>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IWindowArrangementView> & operator=(ComPtr<IWindowArrangementView> const &);
		};

		class ComPtr<IWindowManagementEvents>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWindowManagementEvents>();
		};

		class ComPtr<IWindowManagementShowMoveSizeEvents>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWindowManagementShowMoveSizeEvents>();
		};

		class ComPtr<IWindowManagementWindowGroupingEvents>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWindowManagementWindowGroupingEvents>();
		};

		class ComPtr<IWindowSizeConversionLogicalClientToWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWindowSizeConversionLogicalClientToWindow>();
		};

		class ComPtr<IWindowingEnvironmentConfig>
		{
		protected:
			void InternalAddRef();
		public:
			ComPtr<IWindowingEnvironmentConfig> & operator=(IWindowingEnvironmentConfig *);
			~ComPtr<IWindowingEnvironmentConfig>();
		};

		class ComPtr<IWindowingEnvironmentManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWindowingEnvironmentManager>();
		};

		class ComPtr<IWnfCallback>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWnfCallback>();
		};

		class ComPtr<IXMLDOMDocument2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IPersistStream>(Details::ComPtrRef<ComPtr<IPersistStream> >);
			~ComPtr<IXMLDOMDocument2>();
		};

		class ComPtr<IXMLDOMDocument>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IXMLDOMDocument>();
		};

		class ComPtr<IXMLDOMElement>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IXMLDOMElement>();
		};

		class ComPtr<IXMLDOMNode>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IXMLDOMElement>(Details::ComPtrRef<ComPtr<IXMLDOMElement> >);
			~ComPtr<IXMLDOMNode>();
		};

		class ComPtr<IXMLDOMNodeList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IXMLDOMNodeList>();
		};

		class ComPtr<IXMLDOMParseError>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IXMLDOMParseError>();
		};

		class ComPtr<IXMLDOMSchemaCollection>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IXMLDOMSchemaCollection>();
		};

		class ComPtr<IXamlExplorerHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IXamlExplorerHost> & operator=(IXamlExplorerHost *);
			~ComPtr<IXamlExplorerHost>();
		};

		class ComPtr<IXamlExplorerHostWindow>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IXamlExplorerHostWindow> & operator=(ComPtr<IXamlExplorerHostWindow> const &);
			~ComPtr<IXamlExplorerHostWindow>();
		};

		class ComPtr<IXamlExplorerHostWindowCreatedCallback>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IXamlExplorerHostWindowCreatedCallback>();
		};

		class ComPtr<IXamlExplorerHostWindowInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IXamlExplorerHostWindowInternal>();
		};

		class ComPtr<IXamlLauncherState>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IXamlLauncherState> & operator=(IXamlLauncherState *);
			long As<IImmersiveLauncherCortana>(Details::ComPtrRef<ComPtr<IImmersiveLauncherCortana> >);
			long As<IObjectWithSite>(Details::ComPtrRef<ComPtr<IObjectWithSite> >);
		};

		class ComPtr<IXamlTaskbarManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IXamlViewHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IMultitaskingViewHost>(Details::ComPtrRef<ComPtr<IMultitaskingViewHost> >);
		};

		class ComPtr<IamAccess>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IamAccess> & operator=(IamAccess *);
		};

		struct ComPtr<ImeNotificationExperienceManager>
		{
			~ComPtr<ImeNotificationExperienceManager>();
		};

		class ComPtr<ImmersiveMonitorHelper>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ImmersiveMonitorHelper>();
		};

		struct ComPtr<ImmersiveShellStressTool>
		{
			~ComPtr<ImmersiveShellStressTool>();
		};

		class ComPtr<InputEaterElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ItemAnimationCoordinatorBase>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<JointDivider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<JointResize>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<JointResizeAcc>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<KeyboardHosting::PositionAndSizeOptionsProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<KeyboardHosting::PositionAndSizeOptionsProvider>();
		};

		class ComPtr<KeyboardHosting::TabTipAdapter>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<KeyboardHosting::TabTipAdapter>();
		};

		class ComPtr<KeyboardHosting::TabTipAdapterPolicy>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<KeyboardHosting::TabTipAdapterPolicy>();
		};

		class ComPtr<KeyboardHosting::ViewRectProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<KeyboardHosting::ViewRectProvider>();
		};

		struct ComPtr<LambdaHelpers::CTimer>
		{
			~ComPtr<LambdaHelpers::CTimer>();
		};

		struct ComPtr<LegacyViewWrapper>
		{
			void Attach(LegacyViewWrapper *);
			~ComPtr<LegacyViewWrapper>();
		};

		struct ComPtr<LegacyWindowWrapper>
		{
			void Attach(LegacyWindowWrapper *);
			~ComPtr<LegacyWindowWrapper>();
		};

		class ComPtr<LightDismissElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<LockScreenDirectorServiceProviderImpl>
		{
			~ComPtr<LockScreenDirectorServiceProviderImpl>();
		};

		class ComPtr<MessageProxyReconnectAdapter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<MessageProxyReconnectAdapter>();
		};

		class ComPtr<MonitorFrame>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<MonitorFrame>();
		};

		class ComPtr<MultitaskingData>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<MultitaskingViewDragVisual>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(MultitaskingViewDragVisual *);
		};

		class ComPtr<MultitaskingViewGestureHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Navigation::Server::IBool>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Navigation::Server::IBool>();
		};

		class ComPtr<Navigation::Server::IClientViewCreator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Navigation::Server::IInt32>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Navigation::Server::IInt32>();
		};

		class ComPtr<Navigation::Server::IServerWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Navigation::Server::IShellView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Navigation::Server::IShellView>();
		};

		class ComPtr<Navigation::Server::IShellViewManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Navigation::Server::IShellViewManager>();
		};

		class ComPtr<Navigation::Server::IUInt32>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Navigation::Server::IUInt32>();
		};

		class ComPtr<NotificationDispatcher>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<NotificationDispatcher>();
		};

		class ComPtr<PPILayoutOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<PWSLayoutItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<PWSLayoutParser>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<PWSLayoutParser>();
		};

		struct ComPtr<PWSLayoutPolicyManager>
		{
			~ComPtr<PWSLayoutPolicyManager>();
		};

		class ComPtr<PenWorkspace::Discover::ObjectArray>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<PenWorkspace::Discover::ObjectArray>();
		};

		class ComPtr<PenWorkspace::Discover::RecentAppsCache>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<PenWorkspace::Discover::UTMIconLoader>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<PenWorkspaceDiscoverBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<PenWorkspaceDiscoverBroker>();
		};

		struct ComPtr<PenWorkspaceDiscoverBrokerFactory>
		{
			~ComPtr<PenWorkspaceDiscoverBrokerFactory>();
		};

		struct ComPtr<PenWorkspaceScreenCaptureBroker>
		{
			~ComPtr<PenWorkspaceScreenCaptureBroker>();
		};

		struct ComPtr<PeoplePaneViewManager>
		{
			~ComPtr<PeoplePaneViewManager>();
		};

		struct ComPtr<PerMonitorShellPositionerManager>
		{
			~ComPtr<PerMonitorShellPositionerManager>();
		};

		class ComPtr<PositionAdjustmentHistory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<PositionerPriority>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(PositionerPriority *);
		};

		class ComPtr<PresentationReadyChangedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<PresentationRequestedArgs>
		{
			void Attach(PresentationRequestedArgs *);
			~ComPtr<PresentationRequestedArgs>();
		};

		struct ComPtr<PriorityBoostHelper>
		{
			long As<Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator> >);
			long As<Windows::Internal::Shell::Experience::IHostExperienceManager>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::Experience::IHostExperienceManager> >);
			~ComPtr<PriorityBoostHelper>();
		};

		class ComPtr<PrivilegedHotkeyOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<PrivilegedWindowGroupingOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<PrivilegedWindowOwnershipOperations>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<RetailDemoExperienceManager>
		{
			~ComPtr<RetailDemoExperienceManager>();
		};

		class ComPtr<ScreenClippingBrokerImpl>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ScreenManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		struct ComPtr<SearchAppDesktopExperienceView>
		{
			~ComPtr<SearchAppDesktopExperienceView>();
		};

		struct ComPtr<SearchAppExperienceManager>
		{
			~ComPtr<SearchAppExperienceManager>();
		};

		struct ComPtr<SearchAppExperienceManagerNotification>
		{
			~ComPtr<SearchAppExperienceManagerNotification>();
		};

		struct ComPtr<ShellFeedsDesktopExperienceView>
		{
			~ComPtr<ShellFeedsDesktopExperienceView>();
		};

		struct ComPtr<ShellFeedsExperienceManagerImpl>
		{
			~ComPtr<ShellFeedsExperienceManagerImpl>();
		};

		struct ComPtr<ShellFeedsExperienceManagerNotification>
		{
			~ComPtr<ShellFeedsExperienceManagerNotification>();
		};

		struct ComPtr<ShellPositionerHelpers::Details::ShellPositionerCallback<<lambda_b596592e3ff57c102c32409cde6b4c14> > >
		{
			~ComPtr<ShellPositionerHelpers::Details::ShellPositionerCallback<<lambda_b596592e3ff57c102c32409cde6b4c14> > >();
		};

		struct ComPtr<ShellPositionerManager>
		{
			~ComPtr<ShellPositionerManager>();
		};

		class ComPtr<SizeConversionViewInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(SizeConversionViewInfo *);
			~ComPtr<SizeConversionViewInfo>();
		};

		class ComPtr<SnapAssistViewDismissalAnimationCoordinator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<SnapAssistViewInvocationAnimationCoordinator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<StartExperienceWallpaperBackground>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<StartExperienceWallpaperBackground>();
		};

		struct ComPtr<StateChangedEventArgsImpl>
		{
			~ComPtr<StateChangedEventArgsImpl>();
		};

		class ComPtr<StubImmersiveApplication>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<StubImmersiveApplication>();
		};

		struct ComPtr<SurfaceHubPositioner>
		{
			~ComPtr<SurfaceHubPositioner>();
		};

		class ComPtr<SwitchItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<SwitchItemCloseAnimationCoordinator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<SwitchItemCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<SwitchItemFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<SwitchItemFilteredCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<SwitcherTabViewManagerWrapper>
		{
			void Attach(SwitcherTabViewManagerWrapper *);
			~ComPtr<SwitcherTabViewManagerWrapper>();
		};

		class ComPtr<TabTransferManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<TabTransferManager>();
		};

		class ComPtr<TabletModeCoverWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<TabletModeInputHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<TabletModePositioner>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<TabletModePositionerHandoffContext>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<TabletModePositionerOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<TabletModeViewManagerProxy>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<TaskFlowImmersiveShellBroker>
		{
			~ComPtr<TaskFlowImmersiveShellBroker>();
		};

		class ComPtr<TaskbarLayoutItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<TaskbarLayoutParser>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<TaskbarLayoutParser>();
		};

		struct ComPtr<TaskbarLayoutPolicyManager>
		{
			~ComPtr<TaskbarLayoutPolicyManager>();
		};

		class ComPtr<TitleBarController>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<TitleBarController>();
		};

		class ComPtr<TouchKeyboardExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<TouchKeyboardExperienceManager>();
		};

		class ComPtr<TwinUI::Cortana::ICortanaDesktopNotifications>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<TwinUI::Cortana::ICortanaExperienceManagerNotification>
		{
			ComPtr<TwinUI::Cortana::ICortanaExperienceManagerNotification> & operator=(TwinUI::Cortana::ICortanaExperienceManagerNotification *);
		};

		class ComPtr<TwinUI::Cortana::ICortanaExperienceView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<TwinUI::Cortana::ICortanaExperienceView>();
		};

		class ComPtr<TwinUI::Cortana::ICortanaWNFNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<TwinUI::Cortana::ICortanaWNFNotification>();
		};

		class ComPtr<TwinUI::Cortana::ISearchAppDesktopNotifications>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<TwinUI::Cortana::ISearchAppExperienceManagerNotification>
		{
			ComPtr<TwinUI::Cortana::ISearchAppExperienceManagerNotification> & operator=(TwinUI::Cortana::ISearchAppExperienceManagerNotification *);
		};

		class ComPtr<TwinUI::Cortana::ISearchAppExperienceView>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<TwinUI::Cortana::IShellExperienceViewLifetime>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<TwinUI::Cortana::ShellExperienceView>
		{
			~ComPtr<TwinUI::Cortana::ShellExperienceView>();
		};

		class ComPtr<TwinUI::ShellFeeds::IShellFeedsDesktopExperienceView>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<TwinUI::ShellFeeds::IShellFeedsDesktopNotifications>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification>
		{
			ComPtr<TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification> & operator=(TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification *);
		};

		class ComPtr<TwinUI::ShellFeeds::IShellFeedsShellExperienceViewLifetime>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<TwinUI::ShellFeeds::ShellFeedsShellExperienceView>
		{
			~ComPtr<TwinUI::ShellFeeds::ShellFeedsShellExperienceView>();
		};

		struct ComPtr<UAPViewWrapper>
		{
			void Attach(UAPViewWrapper *);
			~ComPtr<UAPViewWrapper>();
		};

		struct ComPtr<UwpAppStateManager>
		{
			~ComPtr<UwpAppStateManager>();
		};

		class ComPtr<ViewEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ViewEventArgs>();
		};

		struct ComPtr<ViewEventArgsForNavigationRequest>
		{
			void Attach(ViewEventArgsForNavigationRequest *);
		};

		class ComPtr<ViewEventArgsForPropertyChanged>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(ViewEventArgsForPropertyChanged *);
			~ComPtr<ViewEventArgsForPropertyChanged>();
		};

		class ComPtr<ViewEventArgsForSelectTargetView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(ViewEventArgsForSelectTargetView *);
			~ComPtr<ViewEventArgsForSelectTargetView>();
		};

		struct ComPtr<ViewEventArgsForShowAsStandalone>
		{
			void Attach(ViewEventArgsForShowAsStandalone *);
		};

		struct ComPtr<ViewEventArgsForShowAsViewMode>
		{
			void Attach(ViewEventArgsForShowAsViewMode *);
		};

		struct ComPtr<ViewEventArgsForSwitch>
		{
			void Attach(ViewEventArgsForSwitch *);
		};

		struct ComPtr<ViewEventArgsForWindowingSettings>
		{
			~ComPtr<ViewEventArgsForWindowingSettings>();
		};

		class ComPtr<ViewEventDispatcher>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ViewEventDispatcher> & operator=(ViewEventDispatcher *);
			~ComPtr<ViewEventDispatcher>();
		};

		struct ComPtr<ViewGroup>
		{
			~ComPtr<ViewGroup>();
		};

		struct ComPtr<ViewGroupManager>
		{
			~ComPtr<ViewGroupManager>();
		};

		class ComPtr<ViewHandledEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(ViewHandledEventArgs *);
			~ComPtr<ViewHandledEventArgs>();
		};

		class ComPtr<ViewHostItemEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(ViewHostItemEventArgs *);
			~ComPtr<ViewHostItemEventArgs>();
		};

		class ComPtr<ViewHostItemPropertyChangedArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ViewHostItemPropertyChangedArgs>();
		};

		class ComPtr<ViewHostViewModeChangeRequestedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(ViewHostViewModeChangeRequestedEventArgs *);
		};

		class ComPtr<ViewManagerBridge>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(ViewManagerBridge *);
			~ComPtr<ViewManagerBridge>();
		};

		struct ComPtr<ViewPresentationMediator>
		{
			~ComPtr<ViewPresentationMediator>();
		};

		class ComPtr<ViewSizePreferencesChangedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<VirtualDesktop>();
		};

		class ComPtr<VirtualDesktopAcessibility>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<VirtualDesktopAcessibility>();
		};

		class ComPtr<VirtualDesktopAddAnimationCoordinator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopAnimationSyncNotifications>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopDataSource>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<VirtualDesktopDataSource>();
		};

		struct ComPtr<VirtualDesktopDataSourceComponent>
		{
			~ComPtr<VirtualDesktopDataSourceComponent>();
		};

		class ComPtr<VirtualDesktopGestureHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<VirtualDesktopGestureWindow>
		{
			~ComPtr<VirtualDesktopGestureWindow>();
		};

		class ComPtr<VirtualDesktopGroupedViewsEventListener>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<VirtualDesktopGroupedViewsEventListener>();
		};

		class ComPtr<VirtualDesktopItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopItemCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopItemFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<VirtualDesktopManagerSuspensionToken>
		{
			~ComPtr<VirtualDesktopManagerSuspensionToken>();
		};

		class ComPtr<VirtualDesktopPersistence>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopRegistryHelpers>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopRemoveAnimationCoordinator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopSwitchAnimator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopTabletModeNotificationListener>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopTabletModePolicy>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopThumbnailWindowFilter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopWindowMoveManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualDesktopsApi>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<VirtualPinnedAppsHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<VirtualPinnedAppsHandler>();
		};

		struct ComPtr<VirtualTouchpadUriHandlerFactory>
		{
			void Attach(VirtualTouchpadUriHandlerFactory *);
		};

		struct ComPtr<VoiceAssistantPositioner>
		{
			~ComPtr<VoiceAssistantPositioner>();
		};

		class ComPtr<WeakReference::CWeakReference<CAltTabViewHost> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<CMultitaskingViewElementBase> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<CPPIAllUpViewHost> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<CScrollButtonContainer> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<CScrollViewerHost> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<CSnapAssistViewHost> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<CSwitchItemElement> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<CSwitchItemGrid> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<CVirtualDesktopBarElement> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<IUnknown> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<SwitchItemFilteredCollection> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::CWeakReference<SwitchItemThumbnailElement> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WeakReference::IWeakReference>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<WeakReference::IWeakReference> & operator=(WeakReference::IWeakReference *);
		};

		struct ComPtr<Win32AppStateManager>
		{
			~ComPtr<Win32AppStateManager>();
		};

		class ComPtr<WindowArrangementOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<WindowArrangementView>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<WindowGroup>
		{
			~ComPtr<WindowGroup>();
		};

		struct ComPtr<WindowGroupManager>
		{
			~ComPtr<WindowGroupManager>();
		};

		struct ComPtr<WindowSizeConverter>
		{
			~ComPtr<WindowSizeConverter>();
		};

		struct ComPtr<WindowWrapper>
		{
			void Attach(WindowWrapper *);
			~ComPtr<WindowWrapper>();
		};

		struct ComPtr<WindowingEnvironmentConfig>
		{
			~ComPtr<WindowingEnvironmentConfig>();
		};

		struct ComPtr<WindowingEnvironmentSettings>
		{
			~ComPtr<WindowingEnvironmentSettings>();
		};

		class ComPtr<Windows::ApplicationModel::Activation::IActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Activation::IActivatedEventArgs>();
		};

		class ComPtr<Windows::ApplicationModel::Activation::ISplashScreen>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::IContact>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<Windows::ApplicationModel::Contacts::IContact> & operator=(Windows::ApplicationModel::Contacts::IContact *);
			~ComPtr<Windows::ApplicationModel::Contacts::IContact>();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::IContactCardOptions2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Contacts::IContactCardOptions2>();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::IContactCardOptions>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<Windows::ApplicationModel::Contacts::IContactCardOptions2>(Details::ComPtrRef<ComPtr<Windows::ApplicationModel::Contacts::IContactCardOptions2> >);
			~ComPtr<Windows::ApplicationModel::Contacts::IContactCardOptions>();
		};

		class ComPtr<Windows::ApplicationModel::IAppInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::IPackage>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::IPackage>();
		};

		class ComPtr<Windows::ApplicationModel::IPackageCatalog>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Internal::UserActivities::IUserActivityMonitor>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Internal::UserActivities::IUserActivityMonitor>();
		};

		class ComPtr<Windows::ApplicationModel::Resources::Core::Internal::IResourceManagerStaticInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Resources::Core::Internal::IResourceManagerStaticInternal>();
		};

		class ComPtr<Windows::ApplicationModel::Resources::Core::Internal::ISystemResourceManagerExtensions2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Resources::Core::Internal::ISystemResourceManagerExtensions2>();
		};

		class ComPtr<Windows::Data::Json::IJsonArray>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Data::Json::IJsonValue>(Details::ComPtrRef<ComPtr<Windows::Data::Json::IJsonValue> >);
			long As<Windows::Foundation::Collections::IVector<Windows::Data::Json::IJsonValue *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IVector<Windows::Data::Json::IJsonValue *> > >);
			~ComPtr<Windows::Data::Json::IJsonArray>();
		};

		class ComPtr<Windows::Data::Json::IJsonObject>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Data::Json::IJsonValue>(Details::ComPtrRef<ComPtr<Windows::Data::Json::IJsonValue> >);
			~ComPtr<Windows::Data::Json::IJsonObject>();
		};

		class ComPtr<Windows::Data::Json::IJsonObjectStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Data::Json::IJsonObjectStatics>();
		};

		class ComPtr<Windows::Data::Json::IJsonValue>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Data::Json::IJsonValue>();
		};

		class ComPtr<Windows::Data::Json::IJsonValueStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Data::Json::IJsonValueStatics>();
		};

		class ComPtr<Windows::Devices::Enumeration::IDeviceInformationStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Devices::Enumeration::IDeviceWatcher>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Devices::Enumeration::IDeviceWatcher>();
		};

		struct ComPtr<Windows::Devices::Lights::ILampArray>
		{
			long As<Windows::Devices::Lights::Internal::ILampArrayPrivate>(Details::ComPtrRef<ComPtr<Windows::Devices::Lights::Internal::ILampArrayPrivate> >);
			~ComPtr<Windows::Devices::Lights::ILampArray>();
		};

		class ComPtr<Windows::Devices::Lights::ILampInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Devices::Lights::ILampInfo>();
		};

		class ComPtr<Windows::Devices::Lights::Internal::ILampArrayPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Devices::Lights::Internal::ILampArrayStaticsPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Devices::Lights::Internal::ILampArrayStaticsPrivate>();
		};

		class ComPtr<Windows::Foundation::Collections::Detail::IMarshalingBehaviorControl>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Detail::IMarshalingBehaviorControl>();
		};

		class ComPtr<Windows::Foundation::Collections::Detail::IPropertySetSerializer>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Detail::IPropertySetSerializer>();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<HSTRING__ *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<HSTRING__ *> >();
		};

		struct ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package *> >
		{
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::ITreeNode *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::ITreeNode *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Tabs::ShellTab *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Tabs::ShellTab *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::Chaining::IChainLink *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::Chaining::IChainLink *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<unsigned int> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<unsigned int> >();
		};

		struct ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Package *> >
		{
			~ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Package *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *> *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *> *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IKeyValuePair<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IKeyValuePair<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IPropertySet>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<Windows::Foundation::Collections::IPropertySet> & operator=(ComPtr<Windows::Foundation::Collections::IPropertySet> const &);
			ComPtr<Windows::Foundation::Collections::IPropertySet> & operator=(Windows::Foundation::Collections::IPropertySet *);
			long As<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> > >);
			~ComPtr<Windows::Foundation::Collections::IPropertySet>();
		};

		struct ComPtr<Windows::Foundation::Collections::IVector<HSTRING__ *> >
		{
			~ComPtr<Windows::Foundation::Collections::IVector<HSTRING__ *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::Data::Json::IJsonValue *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVector<Windows::Data::Json::IJsonValue *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::Chaining::IChainLink *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::Chaining::IChainLink *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<WindowsInternal::Shell::UnifiedTile::UnifiedTile *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<WindowsInternal::Shell::UnifiedTile::UnifiedTile *> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::ObservableVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::ObservableVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::ITreeNode *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::ITreeNode *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,XWinRT::IntVersionTag,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,XWinRT::IntVersionTag,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::Tabs::ShellTab *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::Tabs::ShellTab *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::Chaining::IChainLink *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::Chaining::IChainLink *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,Windows::Foundation::Collections::Internal::Vector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,Windows::Foundation::Collections::Internal::Vector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,XWinRT::IntVersionTag,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::Vector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::Vector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,XWinRT::IntVersionTag,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<unsigned int,Windows::Foundation::Collections::Internal::Vector<unsigned int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<unsigned int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,Windows::Foundation::Collections::Internal::VectorOptions<unsigned int,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<unsigned int,Windows::Foundation::Collections::Internal::Vector<unsigned int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<unsigned int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,Windows::Foundation::Collections::Internal::VectorOptions<unsigned int,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::ITreeNode *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::Tabs::ShellTab *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::Chaining::IChainLink *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::Vector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<unsigned int,Windows::Foundation::Collections::Internal::Vector<unsigned int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<unsigned int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,Windows::Foundation::Collections::Internal::VectorOptions<unsigned int,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::ITreeNode *,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::ITreeNode *,0,1,0> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> > >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> > >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::Tabs::ShellTab *,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::Tabs::ShellTab *,0,1,0> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::Chaining::IChainLink *,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::Chaining::IChainLink *,0,1,0> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,0,1,0> > >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> > >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> > >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> > >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<unsigned int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<unsigned int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,Windows::Foundation::Collections::Internal::VectorOptions<unsigned int,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<unsigned int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<unsigned int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,Windows::Foundation::Collections::Internal::VectorOptions<unsigned int,0,1,0> > >();
		};

		class ComPtr<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >();
		};

		class ComPtr<Windows::Foundation::IAsyncAction>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncAction>();
		};

		struct ComPtr<Windows::Foundation::IAsyncOperation<Windows::Devices::Lights::LampArray *> >
		{
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::Devices::Lights::LampArray *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >();
		};

		struct ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >
		{
			~ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >();
		};

		class ComPtr<Windows::Foundation::IClosable>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IClosable>();
		};

		class ComPtr<Windows::Foundation::IEventHandler<IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IEventHandler<IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::IPropertyValue>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IPropertyValue>();
		};

		class ComPtr<Windows::Foundation::IPropertyValueStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IPropertyValueStatics>();
		};

		class ComPtr<Windows::Foundation::IReference<bool> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IReference<bool> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,IInspectable *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,IInspectable *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewActivationRequestedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewActivationRequestedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewActivationShowRequestedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewActivationShowRequestedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewApplyWindowingEnvironmentSettingsRequestedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewApplyWindowingEnvironmentSettingsRequestedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewClearPersistedStateRequestedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewClearPersistedStateRequestedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewConsolidateRequestedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewConsolidateRequestedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewExecutionStateChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewExecutionStateChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewShowRequestedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewShowRequestedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewSwitchRequestedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewSwitchRequestedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewUniversalPropertyChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewUniversalPropertyChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewVisibilityChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewVisibilityChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::WindowWatcher *,IInspectable *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::WindowWatcher *,IInspectable *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::WindowWatcher *,Windows::Internal::ApplicationModel::WindowManagement::WindowChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::WindowWatcher *,Windows::Internal::ApplicationModel::WindowManagement::WindowChangedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::ITreeNode *,Windows::Internal::ComposableShell::ITreeNodeEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerCancellableEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerCancellableEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerMenuItemsRequestedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerMenuItemsRequestedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerRectEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerRectEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerThumbnailEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerThumbnailEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerViewEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerViewEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabHostedAppChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabHostedAppChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabSetMediator *,Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabViewProvidedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::ShellExperienceDispatcher *,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::ShellExperienceDispatcher *,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,int> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,int> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerBottomEdgeCandidateWindowAlignmentChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerBottomEdgeCandidateWindowAlignmentChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerCoreKeyboardClientRegisteredEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerCoreKeyboardClientRegisteredEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlEmbeddedHandwritingViewEnabledSettingChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlEmbeddedHandwritingViewEnabledSettingChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlEmbeddedHandwritingViewVisibleSettingChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlEmbeddedHandwritingViewVisibleSettingChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlFocusChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlFocusChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlInputScopeChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlInputScopeChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlLineTypeChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlLineTypeChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlManualInputPaneSettingChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlManualInputPaneSettingChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlPositionChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlPositionChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlReadOnlySettingChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlReadOnlySettingChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlSelectionChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlSelectionChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerHardwareKeyboardPresenceChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerHardwareKeyboardPresenceChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerHardwareKeyboardTextIntelligenceEnabledChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerHardwareKeyboardTextIntelligenceEnabledChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerHardwareKeyboardUIEnabledChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerHardwareKeyboardUIEnabledChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppRequestedHideEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppRequestedHideEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppRequestedResizeEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppRequestedResizeEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppRequestedShowEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppRequestedShowEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputPaneTryHideRequestedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputPaneTryHideRequestedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputPaneTryShowRequestedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputPaneTryShowRequestedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerPrimaryViewHidingResponseEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerPrimaryViewHidingResponseEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerPrimaryViewShowingResponseEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerPrimaryViewShowingResponseEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::ICoreTextPropertyBag *,Windows::UI::Internal::Text::Core::CoreTextPropertyBagPropertyValueChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::ICoreTextPropertyBag *,Windows::UI::Internal::Text::Core::CoreTextPropertyBagPropertyValueChangedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::IUriRuntimeClass>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IUriRuntimeClassFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IWwwFormUrlDecoderRuntimeClass>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Globalization::IGeographicRegion>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Globalization::IGeographicRegion>();
		};

		class ComPtr<Windows::Internal::ApplicationModel::WindowManagement::ICoreCUIBroker_WindowManagement>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::ApplicationModel::WindowManagement::ICoreCUIBroker_WindowManagement>();
		};

		class ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::AssignedAccess::IAssignedAccessUserInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::CapabilityAccess::IAppLaunchCapabilityAccess>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::CapabilityAccess::IAppLaunchCapabilityAccess>();
		};

		class ComPtr<Windows::Internal::CapabilityAccess::IAppLaunchCapabilityAccessStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::CapabilityAccess::IAppLaunchCapabilityAccessStatics>();
		};

		class ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop>();
		};

		class ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs>();
		};

		class ComPtr<Windows::Internal::ComposableShell::NodeChangedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(Windows::Internal::ComposableShell::NodeChangedEventArgs *);
			~ComPtr<Windows::Internal::ComposableShell::NodeChangedEventArgs>();
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter>();
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::IShellTab>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::ComposableShell::Tabs::IShellTab>();
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::IShellTabGroup>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::ComposableShell::Tabs::IShellTabGroup>();
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::ITabController>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::Internal::ComposableShell::Tabs::ITabController> & operator=(Windows::Internal::ComposableShell::Tabs::ITabController *);
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::ITabDataModel>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::ITabDroppedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::ITabViewProvidedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker>();
		};

		struct ComPtr<Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs>
		{
			~ComPtr<Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs>();
		};

		struct ComPtr<Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs>
		{
			void Attach(Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *);
			~ComPtr<Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs>();
		};

		struct ComPtr<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>
		{
			~ComPtr<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>();
		};

		class ComPtr<Windows::Internal::Data::Activities::ISetActivityMonitor>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Data::Activities::ISetActivityMonitor>();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Internal::GitPtr,2> >();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *>,Windows::Internal::GitPtr,2> >();
		};

		class ComPtr<Windows::Internal::IAsyncFireCompletion>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::Internal::INilDelegate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::INilDelegate>();
		};

		class ComPtr<Windows::Internal::OneCore::ViewEventHandlers::ICoreCUIBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::OneCore::ViewEventHandlers::ICoreCUIBroker>();
		};

		class ComPtr<Windows::Internal::Shell::Chaining::ChainLink<ObjectWithIamLock> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::Internal::Shell::Chaining::ChainLink<ObjectWithIamLock> > & operator=(Windows::Internal::Shell::Chaining::ChainLink<ObjectWithIamLock> *);
		};

		struct ComPtr<Windows::Internal::Shell::Chaining::ChainLinkEventArgs>
		{
			void Attach(Windows::Internal::Shell::Chaining::ChainLinkEventArgs *);
		};

		class ComPtr<Windows::Internal::Shell::Chaining::IChainLink>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<Windows::Internal::Shell::Chaining::IChainLink> & operator=(ComPtr<Windows::Internal::Shell::Chaining::IChainLink> const &);
			ComPtr<Windows::Internal::Shell::Chaining::IChainLink> & operator=(Windows::Internal::Shell::Chaining::IChainLink *);
			~ComPtr<Windows::Internal::Shell::Chaining::IChainLink>();
		};

		class ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow>();
		};

		class ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension>();
		};

		struct ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::VisibilityChangedEventArgs>
		{
			~ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::VisibilityChangedEventArgs>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IActionCenterExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IActionCenterExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IBaseExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IControlCenterExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IControlCenterExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::ICortanaExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::Internal::Shell::Experience::ICortanaExperienceManager> & operator=(Windows::Internal::Shell::Experience::ICortanaExperienceManager *);
			~ComPtr<Windows::Internal::Shell::Experience::ICortanaExperienceManager>();
		};

		struct ComPtr<Windows::Internal::Shell::Experience::ICortanaShownEventArgs>
		{
			~ComPtr<Windows::Internal::Shell::Experience::ICortanaShownEventArgs>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IHostExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IHostExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IJumpViewExperienceEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IJumpViewExperienceEventArgs>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IJumpViewExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IPeopleBarFlyoutExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IPeopleBarFlyoutExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IPeopleBarJumpViewExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IPeopleBarJumpViewExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IQuickConnectViewService2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IQuickConnectViewService2>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IQuickConnectViewService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IQuickConnectViewService>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IScreenClippingExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IScreenClippingExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperienceDispatcher>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperiencePositioner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<TwinUI::Cortana::ICortanaExperienceView>(Details::ComPtrRef<ComPtr<TwinUI::Cortana::ICortanaExperienceView> >);
			~ComPtr<Windows::Internal::Shell::Experience::IShellExperiencePositioner>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperiencePrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IShellExperiencePrivate>();
		};

		struct ComPtr<Windows::Internal::Shell::Experience::IShellExperienceView>
		{
			ComPtr<Windows::Internal::Shell::Experience::IShellExperienceView> & operator=(Windows::Internal::Shell::Experience::IShellExperienceView *);
			long As<TwinUI::Cortana::IShellExperienceViewLifetime>(Details::ComPtrRef<ComPtr<TwinUI::Cortana::IShellExperienceViewLifetime> >);
			operator int Details::BoolStruct::*();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperienceViewEventArg>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShoulderTapExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IShoulderTapExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IStartExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IStartExperienceManager>();
		};

		struct ComPtr<Windows::Internal::Shell::Experience::ITitleBarFactory>
		{
			~ComPtr<Windows::Internal::Shell::Experience::ITitleBarFactory>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IToastCenterExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IVirtualTouchpadExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IVirtualTouchpadExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs>();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IContextIdentifierStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Holographic::IContextIdentifierStatics>();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IHolographicCoreExperienceExecutor>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IHolographicForeground>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Holographic::IHolographicForeground>();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IHolographicForegroundAssistant>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IHolographicHotKeyHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Holographic::IHolographicHotKeyHandler>();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IHolographicShellExperienceViewPorter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IHolographicViewHostItemLedgerPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IHolographicViewPorter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IViewHostItem>
		{
		protected:
			void InternalAddRef();
		public:
			long As<Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal> >);
			~ComPtr<Windows::Internal::Shell::Holographic::IViewHostItem>();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal>();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IVirtualMonitorSlateHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::Internal::Shell::Holographic::IVirtualMonitorSlateHost> & operator=(ComPtr<Windows::Internal::Shell::Holographic::IVirtualMonitorSlateHost> const &);
			~ComPtr<Windows::Internal::Shell::Holographic::IVirtualMonitorSlateHost>();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IVirtualMonitorSlateHostFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem>
		{
			~ComPtr<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem>();
		};

		class ComPtr<Windows::Internal::Shell::IImmersiveWindowMessageNotificationHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(Windows::Internal::Shell::IImmersiveWindowMessageNotificationHandler *);
			~ComPtr<Windows::Internal::Shell::IImmersiveWindowMessageNotificationHandler>();
		};

		class ComPtr<Windows::Internal::Shell::JumpView::IJumpViewParams>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::JumpView::IJumpViewParams>();
		};

		class ComPtr<Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Foundation::Collections::IPropertySet>(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IPropertySet> >);
			~ComPtr<Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions>();
		};

		class ComPtr<Windows::Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice>();
		};

		class ComPtr<Windows::Internal::Shell::Popups::IPopupClient>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Popups::IPopupClientStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::ShellLauncher::IShellLauncherManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ShellLauncher::IShellLauncherManager>();
		};

		class ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListener>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListener>();
		};

		struct ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListenerFactory>
		{
			void Attach(Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListenerFactory *);
		};

		struct ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewTitleChangeListenerFactory>
		{
			void Attach(Windows::Internal::Shell::TaskFlow::DataEngine::AppViewTitleChangeListenerFactory *);
		};

		struct ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::IAppActivitySessionListenerFactory>
		{
			~ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::IAppActivitySessionListenerFactory>();
		};

		struct ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListenerFactory>
		{
			~ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListenerFactory>();
		};

		struct ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListenerFactory>
		{
			~ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListenerFactory>();
		};

		struct ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::IFileActivityListenerFactory>
		{
			~ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::IFileActivityListenerFactory>();
		};

		class ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter>();
		};

		class ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener>();
		};

		struct ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceListenerFactory>
		{
			~ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceListenerFactory>();
		};

		struct ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::SnapSignalData>
		{
			~ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::SnapSignalData>();
		};

		struct ComPtr<Windows::Internal::Shell::TaskFlow::DataEngine::UserPresenceListenerFactory>
		{
			void Attach(Windows::Internal::Shell::TaskFlow::DataEngine::UserPresenceListenerFactory *);
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForNavigationRequest>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForNavigationRequest>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSelectTargetView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSelectTargetView>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsStandalone>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsStandalone>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsViewMode>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsViewMode>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSwitch>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSwitch>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewPropertyChangedArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewPropertyChangedArgs>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> & operator=(ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const &);
			ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> & operator=(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
			long As<IFramedViewWrapper>(Details::ComPtrRef<ComPtr<IFramedViewWrapper> >);
			long As<INtUserViewWrapper>(Details::ComPtrRef<ComPtr<INtUserViewWrapper> >);
			long As<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState> >);
			long As<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies> >);
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IWindowWrapper>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IWindowWrapper>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnironmentSettingsArgsForImplicitEvent>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnironmentSettingsArgsForImplicitEvent>();
		};

		struct ComPtr<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings>
		{
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettingsArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettingsArgs>();
		};

		class ComPtr<Windows::Internal::ShellLauncher::IShellLauncherProfile2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::ShellLauncher::IShellLauncherProfile2>();
		};

		class ComPtr<Windows::Internal::ShellLauncher::IShellLauncherProfile>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::ShellLauncher::IShellLauncherProfile>();
		};

		class ComPtr<Windows::Internal::StateRepository::IApplicationStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IApplicationStatics>();
		};

		class ComPtr<Windows::Internal::StateRepository::IPackageStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IPackageStatics>();
		};

		class ComPtr<Windows::Management::Deployment::IPackageManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Management::Deployment::IPackageManager>();
		};

		class ComPtr<Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler>();
		};

		struct ComPtr<Windows::Storage::Streams::CBuffer<void (*)(void *),Windows::Storage::Streams::DefaultMarshaler> >
		{
			~ComPtr<Windows::Storage::Streams::CBuffer<void (*)(void *),Windows::Storage::Streams::DefaultMarshaler> >();
		};

		class ComPtr<Windows::Storage::Streams::IBuffer>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Storage::Streams::IBuffer>();
		};

		class ComPtr<Windows::Storage::Streams::IRandomAccessStream>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Streams::IRandomAccessStream>();
		};

		class ComPtr<Windows::System::Internal::ISignInStateManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::System::Internal::ISignInStateManager>();
		};

		class ComPtr<Windows::System::Internal::IUserManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::System::Internal::IUserManagerStatics>();
		};

		class ComPtr<Windows::System::Private::ILauncherViewOptionsInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::System::Private::ILauncherViewOptionsInternal>();
		};

		struct ComPtr<Windows::System::Threading::ITimerElapsedHandler>
		{
			~ComPtr<Windows::System::Threading::ITimerElapsedHandler>();
		};

		class ComPtr<Windows::UI::Composition::ICompositionDrawingSurface>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Composition::ICompositionDrawingSurface>();
		};

		class ComPtr<Windows::UI::Composition::ICompositionDrawingSurfaceInterop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Composition::ICompositionDrawingSurfaceInterop>();
		};

		class ComPtr<Windows::UI::Composition::ICompositionGraphicsDevice>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Composition::ICompositionGraphicsDevice>();
		};

		class ComPtr<Windows::UI::Composition::ICompositionSurface>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Composition::ICompositionSurface>();
		};

		class ComPtr<Windows::UI::Composition::ICompositionSurfaceBrush>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Composition::ICompositionSurfaceBrush>();
		};

		class ComPtr<Windows::UI::Composition::ICompositorInterop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Composition::ICompositorInterop>();
		};

		class ComPtr<Windows::UI::Internal::Text::Core::ICoreInputViewManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Internal::Text::Core::ICoreInputViewManager>();
		};

		class ComPtr<Windows::UI::Internal::Text::Core::ICoreInputViewManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Internal::Text::Core::ICoreInputViewManagerStatics>();
		};

		class ComPtr<Windows::UI::Internal::Text::Core::ICoreKeyboardManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Internal::Text::Core::ICoreKeyboardManager>();
		};

		class ComPtr<Windows::UI::Internal::Text::Core::ICoreKeyboardManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Internal::Text::Core::ICoreKeyboardManagerStatics>();
		};

		class ComPtr<Windows::UI::Internal::Text::Core::ICoreTextPropertyBag>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Internal::Text::Core::ICoreTextPropertyBag>();
		};

		class ComPtr<Windows::UI::Internal::Text::Core::ICoreTextPropertyBagWriter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Internal::Text::Core::ICoreTextPropertyBagWriter>();
		};

		struct ComPtr<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion>
		{
			~ComPtr<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion>();
		};

		class ComPtr<Windows::UI::ViewManagement::IActivationViewSwitcher>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::UI::ViewManagement::IUISettings2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::ViewManagement::IUISettings2>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ICuratedCollectionInitializationStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ICuratedCollectionInitializationStatics>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ICuratedCollectionSelectionHelpers>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ICuratedCollectionSelectionHelpers>();
		};

		struct ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ISelectionDataParser>
		{
			~ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ISelectionDataParser>();
		};

		struct ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionDataParser>
		{
			~ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionDataParser>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IAppLifecycleInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IAppLifecycleInfo>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IPackagedAppTileInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IPackagedAppTileInfo>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IPackagedUnifiedTileIdentifier>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IPackagedUnifiedTileIdentifier>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IPackagedUnifiedTileIdentifierFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IPackagedUnifiedTileIdentifierFactory>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::ITileImageResource>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::ITileImageResource>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTile>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTile> & operator=(WindowsInternal::Shell::UnifiedTile::IUnifiedTile *);
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTile>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileCollection>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileCollection>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileIdentifier>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileIdentifier>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManager>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManagerStatics>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IVisualTileInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IVisualTileInfo>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IWin32UnifiedTileIdentifierFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IWin32UnifiedTileIdentifierFactory>();
		};

		class ComPtr<XamlAllUpViewHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(XamlAllUpViewHost *);
			~ComPtr<XamlAllUpViewHost>();
		};

		class ComPtr<XamlAltTabViewHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(XamlAltTabViewHost *);
			~ComPtr<XamlAltTabViewHost>();
		};

		struct ComPtr<XamlExplorerHostShellComponent>
		{
			~ComPtr<XamlExplorerHostShellComponent>();
		};

		class ComPtr<XamlExplorerHostWindow>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<XamlExplorerHostWindow>();
		};

		class ComPtr<XamlLauncher>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<XamlSnapAssistViewHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(XamlSnapAssistViewHost *);
			~ComPtr<XamlSnapAssistViewHost>();
		};

		class ComPtr<lockframework::ILockAppBrokerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<lockframework::ILockAppBrokerStatics>();
		};

		class ComPtr<wil::details::DummyUnknown>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<wil::details::IEventInvocationContext>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<wil::details::IEventInvocationContextProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow>
		{
			~ComPtr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow>();
		};

		struct DelegateTraits<-1>
		{
			static void EnsureStackSnapshot(long);
		};

		namespace Details
		{
			struct ComPtrRef<AgileRef>
			{
				operator AgileRef *();
			};

			struct ComPtrRef<ComPtr<IApplicationView> >
			{
				operator IApplicationView * *();
			};

			struct ComPtrRef<ComPtr<IXMLDOMDocument2> >
			{
				operator IXMLDOMDocument2 * *();
			};

			struct ComPtrRef<WeakRef>
			{
				operator WeakRef *();
			};

			namespace DelegateArgTraits<long ( Windows::Foundation::ITypedEventHandler_impl<Windows::Foundation::Internal::AggregateType<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher *>,Windows::Foundation::Internal::AggregateType<Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *,Windows::Internal::ComposableShell::Tabs::ITabDataModelTabPropertyChangedEventArgs *> >::*)(Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::ITabDataModelTabPropertyChangedEventArgs *)>
			{
				struct DelegateInvokeHelper<Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *>,FtmBase>,<lambda_7fa9ec76c559735b12dbf01bbe3e3c50>,-1,Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::ITabDataModelTabPropertyChangedEventArgs *>
				{
					virtual long Invoke(Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::ITabDataModelTabPropertyChangedEventArgs *);
				};

			};

			struct EventTargetArray
			{
				EventTargetArray();
				long RuntimeClassInitialize(unsigned __int64);
				void AddTail(IUnknown *,void *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Implements<FtmBase,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverterStatics>,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Implements<FtmBase,Windows::Internal::ComposableShell::Tabs::ITabSetMediatorStatics>,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Implements<FtmBase,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListenerFactory>,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Implements<FtmBase,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListenerFactory>,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Implements<FtmBase,Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceListenerFactory>,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Nil,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,IInspectable,FtmBase,IWeakReferenceSource,Windows::Internal::Shell::CustomShell::ICustomShellExperienceRepository>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,IInspectable,FtmBase,IWeakReferenceSource,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,IInspectable,Implements<RuntimeClassFlags<2>,IApplicationViewIconLoader,FtmBase>,IWeakReferenceSource>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,IInspectable,Implements<RuntimeClassFlags<2>,IIconLoadingFunctions,FtmBase>,IWeakReferenceSource>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsWithPrelaunchAndViewIdBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Implements<Windows::Foundation::Collections::IVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IObservableVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> > >,IWeakReferenceSource,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Implements<Windows::Foundation::Collections::IVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IObservableVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> > >,IWeakReferenceSource,FtmBase>();
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<ViewEventArgsBase>,IWeakReferenceSource,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsViewMode,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnironmentSettingsArgsForImplicitEvent>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<ViewEventArgsBase>,IWeakReferenceSource,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSwitch>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<ViewEventArgsBase>,IWeakReferenceSource,Windows::Internal::Shell::ViewManagerInterop::IViewPropertyChangedArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<ViewEventArgsBase>,IWeakReferenceSource,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettingsArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<ViewHostItemEventArgsBase>,IWeakReferenceSource,Windows::Internal::Shell::Holographic::IViewHostItemPropertyChangedArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Windows::Internal::ComposableShell::TreeNodeEventArgsBase>,IWeakReferenceSource,Windows::Internal::ComposableShell::INodeChangedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::ITreeNode *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Tabs::ShellTab *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::Chaining::IChainLink *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<unsigned int>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::Extensions::ApplicationModel::IInternalAppInfo,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>();
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs,Windows::ApplicationModel::Activation::IViewSwitcherProvider,CloakedIid<Windows::ApplicationModel::Activation::IMultiviewActivationProperties> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnironmentSettingsArgsForImplicitEvent>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IIndividualExperienceManagerFactory,ICompositeExperienceManagerFactory,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ILockScreenDirectorServiceProvider,CImmersiveShellComponentWithGITSite>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IMultitaskingViewGestureState,IMultitaskingViewGestureStateInternal,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IMultitaskingViewVisibilityService,IMultitaskingViewVisibilityServiceInternal,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IRawElementProviderSimple,IDragProvider,IAppResizeAcc>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IRawElementProviderSimple,IDragProvider,IJointResizeAcc>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ITaggableTarget,CWRLObjectWithSite>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IViewManagerBridge,IMessageProxyListener,IMessageListListener,IMessageMapListener,Navigation::Server::IShellViewManagerListener,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IVirtualDesktopManager,IVirtualDesktopsApiInternal,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ChainInterfaces<IDesktopPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IDragDropViewCreationHandler,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ChainInterfaces<IKioskPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IPositionerApplicationClosePolicy,IApplicationViewChangeListener,IInternalFullScreenHandler,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ChainInterfaces<ISurfaceHubPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IActivationHints,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IAppLayoutCacheInternal,IAppLayoutCache,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ICustomShellManager,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IDesktopVisibilityService,IFullScreenPositionerNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IPrivilegedOperationsConsumer,IEmulatedFullScreenManager,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IPrivilegedOperationsConsumer,IRemoteLauncherForegroundHandler,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IViewPresentationMediator,IPrivilegedOperationsConsumer,IWindowManagementShowMoveSizeEvents,IWindowManagementChannelSeverEvents,IWindowManagementWindowGroupingEvents,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<ITabletModeViewManagerInternal,ITabletModeViewManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IEdgeUiTouchInvocation,IEdgeUiMouseInvocation>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IAppTransitionManager,IAppTransitionTargetManagerSink,IApplicationViewChangeListener>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IFullScreenManager,IFullScreenManagerPriv,IFullScreenNotificationService,IFullScreenPositionerNotification,IImmersiveMonitorNotification,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IMultitaskingViewServiceProvider,IMultitaskingViewTaskScheduler>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IPeoplePaneViewManager,IPeopleExperienceHostManager,IApplicationViewChangeListener,ITabletModeChangeListener>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewButtonElement>,IGlyphButton>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewControllerBase>,ISnapAssistViewController>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,ChainInterfaces<IAnimatableScrollViewer,IScrollViewer,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IGlyphButtonHost,IScrollButtonContainer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IMultitaskingViewElementRoot,IFrameElement,IInputEaterElementNotifications,IMultitaskingViewDragProvider,ILightDismissElementHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IObservableObjectArrayChanged,IVirtualDesktopContainerElement,IScrollableElement>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IScrollButtonContainerHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,ISwitchItemGrid,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,IMultitaskingViewTelemetryHost,IScrollableElement>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IVirtualDesktopBarElement>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewHostBase<IAllUpViewHost> >,IXamlViewHost,IAllUpViewHostInternal,ITabletModeChangeListener,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewHostBase<IAltTabViewHost> >,IAltTabViewHostInternal>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewHostBase<IAltTabViewHost> >,IXamlViewHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewHostBase<IPPIAllUpViewHost> >,IExternalDragHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewHostBase<ISnapAssistViewHost> >,IInvocationAnimationHost,IAnimatedDismissableHost,IDismissalAnimationHost,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewHostBase<ISnapAssistViewHost> >,IXamlViewHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CShrinkButtonElement>,IMultitaskingViewDragSource,ISwitchItemThumbnailElement>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithGITSite>,ChainInterfaces<IApplicationFrameServiceTestability,IApplicationFrameService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IApplicationFrameEventHandler,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithGITSite>,FtmBase,ITabletModeCoverWindow,ITabletModeChrome>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,CIAMSpecialWindowBase,IFallbackWindow,IImmersiveMonitorNotification,IRawElementProviderSimple,IInvokeProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ChainInterfaces<IAppResizeDataInternal,IAppResizeData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ChainInterfaces<IPlaceModeData,IDragData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IAppResizeView,ITabletModeInputCallback,IApplicationViewChangeListener>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IDragVisual,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IDropFeedback,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IExecuteCommand,IObjectWithSelection>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IImmersiveCharmsWindowManager,ICharmWindowManagerInternal>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IPPIAllUpViewService,IPPIAllUpViewInvoker>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ITabletModeChromeManager>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IVisibilityOverride,IImmersiveSessionIdleNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IWindowArrangementView,ITabletModeInputCallback,IApplicationViewChangeListener,IDragVisualHost,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,Implements<RuntimeClassFlags<2>,IImmersiveMonitorNotification,IActiveZBandNotificationForMonitor> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CopyToViewValueSetBase>,IOleWindow,IShouldSwitchToDesktop>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IAppLayoutInternal,ChainInterfaces<IAppLayoutBuilder,IAppLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ObservableItem>,ISwitchItem,ISwitchItemInternal>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Internal::FamilySafety::AppLimits::IAppUsageTracker,IApplicationViewChangeListener,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IAllUpViewService,IEdgeUiTouchInvocation,IAllUpViewInvoker>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IAppLayoutCacheInternal,IAppLayoutCache,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationActivationHistory,IImmersiveWindowManager,IImmersiveMonitorNotification,IImmersiveWindowManagerInternal,IObjectProvider,IPresentedWindowOverride>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewChangeListener,IDragVisualHost,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,IImmersiveRawInputKeyboardNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewChangeListener,ITabletModeChangeListener>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewChangeListener>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewCollection,IApplicationViewCollectionTestHook,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewCollectionTestHook,IApplicationViewSwitcher,IApplicationViewFlashingNotification,IPrivilegedOperationsConsumer,IWindowManagementConstraintsEvents,IImmersiveApplicationNotification,IEnterpriseIdChangeNotification,IApplicationViewStateControl,IWindowOccludedChangeListener>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IExternalDragHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IFrameInteractionEvents,ISwitchItemController,IDismissAnimationController>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IFullScreenNotificationService,IFullScreenPositionerNotification,IImmersiveMonitorNotification,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification,IRawElementProviderSimple,IInvokeProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveSessionIdleNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification,IShellTargetingChangeNotification,IFullScreenPositionerPrivateNotification,ITransitionNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,IServiceProvider,IImmersiveShellComponent,IImmersiveLauncherCortana,IXamlLauncherStateCallback,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveSystemModeInternal,IActiveZBand,IImmersiveSystemModeNotificationServicePrivate,IActiveZBandNotificationServicePrivate,Implements<RuntimeClassFlags<2>,IImmersiveMonitorNotification,IDesktopVisibilityService,IDesktopVisibilityChangesNotification> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveWindowMessageNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveWindowMessageNotification>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IInputEaterElementNotifications,IMultitaskingViewDragProvider,ILightDismissElementHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IInvocationAnimationHost,IAnimatedDismissableHost,IDismissalAnimationHost,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IInvokeProvider,ISelectionProvider,ISelectionItemProvider,IScrollProvider,IScrollItemProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IMessageMapListener,Navigation::Server::IShellViewManagerListener,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewGridElement,ISwitchItemElement,IGlyphButtonHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewManagerInternal,IMultitaskingViewDismissCallback,IMultitaskingViewForegroundStaging>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IObjectWithSelection,CWRLObjectWithSite>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,IMultitaskingViewTelemetryHost,IScrollableElement>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IObservableObjectArrayChangedBeginEnd,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,ChainInterfaces<ISwitchItemFilteredCollection,IObservableObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IPenWorkspaceDiscoverBroker,IImmersiveShellComponent,IWindowManagementInputUsageEvents>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IPositionerApplicationClosePolicy,IApplicationViewChangeListener,IInternalFullScreenHandler,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IPrivilegedOperationsConsumer,IEmulatedFullScreenManager,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IPrivilegedOperationsConsumer,IRemoteLauncherForegroundHandler,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IProjectionViewHelper,IImmersiveApplicationNotification,IDragViewEventHandler,IAppSwitcherNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IRawElementProviderFragment,IInvokeProvider,IPlaceModeButtonAcc>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IRawElementProviderFragment,IRawElementProviderFragmentRoot,ICoverWindowAcc>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IRawElementProviderFragment,IRawElementProviderFragmentRoot,IInvokeProvider,ISelectionProvider,ISelectionItemProvider,IScrollProvider,IScrollItemProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IRawElementProviderFragmentRoot,IDragProvider,IDragVisualAcc>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IScrollableElement>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ISelectionItemProvider,IScrollProvider,IScrollItemProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider,CWRLObjectWithGITSite>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IShellPositionerManager,IApplicationViewChangeListener,ITabletModeChangeListener,IShellPositionerActivationHandler,IShellPositionerFrameworkViewTypeChangedHandler,IShellPositionerPresentationRequestedHandler>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IInputHostLayoutChanges,IAppSwitcherNotification,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IShellTargetingChangeNotification,IFullScreenPositionerPrivateNotification,ITransitionNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModeChrome>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModePositionerInternal,ITabletModePositionerPriv,IStartDismissalPolicy,IShellPositionerViewHandoff,IApplicationViewChangeListener,ITabletModeChangeListener,IImmersiveMonitorNotification,Implements<RuntimeClassFlags<2>,IShellPositionerWindowingDelegationHandler,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification,IShellTargetingChangeNotification,IFullScreenPositionerPrivateNotification,ITransitionNotification> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModePositionerManagerNotification,IApplicationViewChangeListener,IScreenManagerTestHook>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IUpdateViewValueSet,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IViewPresentationMediator,IPrivilegedOperationsConsumer,IWindowManagementShowMoveSizeEvents,IWindowManagementChannelSeverEvents,IWindowManagementWindowGroupingEvents,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IVirtualDesktopAccessibility,IVirtualDesktopAccessibilityInternal,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IWindowManagementChannelSeverEvents,IWindowManagementWindowGroupingEvents,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IXamlLauncherState,IImmersiveLauncherCortana,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IXamlViewHost,IAllUpViewHostInternal,ITabletModeChangeListener,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IXamlViewHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IAppResizeOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IAppSwitchOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IBackOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IDesktopOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IPPILayoutOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<ITabletModePositionerOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IWindowArrangementOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWindowingEnvironmentManager,IWindowingEnvironmentManagerInternal>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,Implements<RuntimeClassFlags<2>,ChainInterfaces<IApplicationViewCollectionManagement,IApplicationViewCollection,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IApplicationViewCollectionTestHook,IApplicationViewSwitcher,IApplicationViewFlashingNotification,IPrivilegedOperationsConsumer,IWindowManagementConstraintsEvents,IImmersiveApplicationNotification,IEnterpriseIdChangeNotification,IApplicationViewStateControl,IWindowOccludedChangeListener> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWRLObjectWithGITSite>,IActiveZBand,IImmersiveSystemMode,IImmersiveSystemModeInternal,IActiveZBand,IImmersiveSystemModeNotificationServicePrivate,IActiveZBandNotificationServicePrivate,Implements<RuntimeClassFlags<2>,IImmersiveMonitorNotification,IDesktopVisibilityService,IDesktopVisibilityChangesNotification> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWRLObjectWithGITSite>,Implements<RuntimeClassFlags<2>,IRealmActivationHistory,IRealmActivationHistoryInternal> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWRLObjectWithSite>,CImmersiveShellComponent>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<IActiveZBandNotificationServicePrivate>,Implements<RuntimeClassFlags<2>,IImmersiveMonitorNotification,IDesktopVisibilityService,IDesktopVisibilityChangesNotification> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,ChainInterfaces<IRawElementProviderSimple2,IRawElementProviderSimple,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IRawElementProviderFragment,IRawElementProviderFragmentRoot,IInvokeProvider,ISelectionProvider,ISelectionItemProvider,IScrollProvider,IScrollItemProvider> >,Implements<RuntimeClassFlags<2>,IGridProvider,IGridItemProvider> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<2>,1,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >();
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,ChainInterfaces<IApplicationFrameProxy,IApplicationFrame,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWeakReferenceSource,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,ChainInterfaces<IViewGroupInternal,IViewGroup,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWeakReferenceSource,ITitleBarRecovery,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,ChainInterfaces<IViewGroupManagerInternal,IViewGroupManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWeakReferenceSource,ITitleBarRecovery,IWindowManagementWindowGroupingEvents,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,ChainInterfaces<IVirtualDesktop2,IVirtualDesktop,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWeakReferenceSource,IVirtualDesktopPrivate,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,FtmBase,IWeakReferenceSource,CImmersiveShellComponentWithGITSite,IImmersiveApplicationManager,IImmersiveShellHookNotification,IImmersiveApplicationArrayService,IImmersiveApplicationArrayService2,IImmersiveApplicationVisibilityOverride,IIAMServiceProvider,ISpecialWindowMessageCallback,IImmersiveMonitorNotification,IApplicationManagerViewPosition,IImmersiveApplicationNotificationService,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,FtmBase,IWeakReferenceSource,IScreenClippingBroker>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,ILightDismissNotification,IWeakReferenceSource,IInputHostLayoutChanges>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,WindowWrapperBase,IWeakReferenceSource,ILegacyViewWrapper>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CApplicationViewBase>,IWeakReferenceSource,IWin32ApplicationView,IAppSizeConstraintsCallback,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Internal::Shell::Experience::IPeopleBarFlyoutExperienceManager,IWeakReferenceSource,ILightDismissNotification,Windows::Foundation::IClosable,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Internal::Shell::Experience::IPeopleBarJumpViewExperienceManager,IWeakReferenceSource,ILightDismissNotification,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Internal::Shell::Experience::IShellExperiencePositioner,IWeakReferenceSource,TwinUI::Cortana::ICortanaDesktopNotifications,TwinUI::Cortana::ICortanaExperienceView,ILightDismissNotification,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,TwinUI::Cortana::ICortanaWNFNotification>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Internal::Shell::Experience::IShellExperienceView,IWeakReferenceSource,TwinUI::Cortana::IShellExperienceViewLifetime>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Internal::Shell::Experience::IShellExperienceView,IWeakReferenceSource,TwinUI::ShellFeeds::IShellFeedsShellExperienceViewLifetime>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher,IWeakReferenceSource,IWindowEventDispatcherInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,IWindowDispatcherConnectedStandby,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker,INtUserViewWrapperCollection>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher,IWeakReferenceSource,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IWindowDispatcherConnectedStandby,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker>,FtmBase>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ChainInterfaces<IVirtualDesktopManagerInternal3,IVirtualDesktopManagerInternal2,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ISuspendableVirtualDesktopManager,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ChainInterfaces<IVirtualDesktopManagerPrivate,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWeakReferenceSource,ChainInterfaces<IVirtualDesktopManagerInternal3,IVirtualDesktopManagerInternal2,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ISuspendableVirtualDesktopManager,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<CWrlLightweightHandlerServer>,CloakedIid<IConfigureWindowFactory>,CloakedIid<ICoreWindowFactoryPriv> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IConfigureWindowFactory>,CloakedIid<ICoreWindowFactoryPriv> >
			{
				ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IConfigureWindowFactory>,CloakedIid<ICoreWindowFactoryPriv> >();
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<Windows::Internal::IAsyncDeferral>,CloakedIid<Windows::Internal::IComPoolTask>,CloakedIid<Windows::Internal::IAsyncFireCompletion> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IActiveZBandNotificationForMonitor,IApplicationViewChangeListener,ITabletModeChangeListener,IFullScreenPositionerNotificationService,IFullScreenPositionerTestHandler,ITransitionStateChangeHandler,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IAppSizeConstraintsCallback,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveWindowMessageNotification,ITouchKeyboardExperienceManager,ITabletModeChangeListener,IApplicationStateChangeHandler,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IWnfCallback,IEyeControlAdapterOwner,IEyeControlManager,IInputDeviceWatcherOwner,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IApplicationView2,IApplicationViewBase,IApplicationViewWithEnterpriseId>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IEyeControlAdapterOwner,IEyeControlManager,IInputDeviceWatcherOwner,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IFullScreenPositionerNotificationService,IFullScreenPositionerTestHandler,ITransitionStateChangeHandler,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveApplicationArrayService,IImmersiveApplicationArrayService2,IImmersiveApplicationVisibilityOverride,IIAMServiceProvider,ISpecialWindowMessageCallback,IImmersiveMonitorNotification,IApplicationManagerViewPosition,IImmersiveApplicationNotificationService,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveApplicationManager,IImmersiveShellHookNotification,IImmersiveApplicationArrayService,IImmersiveApplicationArrayService2,IImmersiveApplicationVisibilityOverride,IIAMServiceProvider,ISpecialWindowMessageCallback,IImmersiveMonitorNotification,IApplicationManagerViewPosition,IImmersiveApplicationNotificationService,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveMonitorNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveWindowMessageNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveMonitorNotification,Windows::Foundation::IClosable,Windows::Internal::Shell::Holographic::IHolographicExperienceExtension,IInputHostLayoutChanges>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker,INtUserViewWrapperCollection>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveShellHookNotification,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListener,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,TwinUI::Cortana::ICortanaWNFNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveWindowMessageNotification,IBatterySaverStateChangedHandler,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IDWMStoryboardListener>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveWindowMessageNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IInputHostLayoutChanges>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ILightDismissNotification,IImmersiveMonitorNotification,Windows::Internal::Shell::Experience::IInsightsExperienceManager>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ILightDismissNotification,IWeakReferenceSource,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IActionCenterExperienceManager,IEdgeUiInvocation,IEdgeUiTouchInvocation,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ILightDismissNotification,IWeakReferenceSource,Windows::Internal::Shell::Experience::IQuickConnectExperienceManager>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IPrivilegedOperationsConsumer,IXamlExplorerHost,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ITabViewManager,ITabDragHandler,ITabGroupManager,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IActiveZBandNotificationForMonitor,IApplicationViewChangeListener,ITabletModeChangeListener,IFullScreenPositionerNotificationService,IFullScreenPositionerTestHandler,ITransitionStateChangeHandler,IPrivilegedOperationsConsumer>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ITitleBarRecovery,IWindowManagementWindowGroupingEvents,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ITouchKeyboardExperienceManager,ITabletModeChangeListener,IApplicationStateChangeHandler,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IViewManagerControl,IWindowDispatcherConnectedStandby,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,CWRLObjectWithGITSite,IImmersiveApplication,IImmersiveApplication2,IImmersiveApplicationHolographic,IImmersiveApplicationInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Desktop::ViewManagerInterop::ObjectWithVisibility,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithIamLock>,IServiceProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,ChainInterfaces<IFullScreenPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IActiveZBandNotificationForMonitor,IApplicationViewChangeListener,ITabletModeChangeListener,IFullScreenPositionerNotificationService,IFullScreenPositionerTestHandler,ITransitionStateChangeHandler,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IAppViewDataSourceAdapter,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IApplicationFrameEventHandler,IScaleChangeSink,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IApplicationViewChangeListener,ISwitchItemCollection>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,ITabViewManager,ITabDragHandler,ITabGroupManager,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IApplicationViewChangeListener,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListener,IWindowSnappingEvents,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IImmersiveLayoutChanges,Windows::Internal::RetailDemo::IRetailDemoExperienceManager,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IImmersiveSessionIdleNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IImmersiveShellHookNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,ILegacyViewWrapper>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IPresentationRequestedArgs,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,ISplashScreen,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,ITitleBarRecovery,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IVirtualDesktopPrivate,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Implements<RuntimeClassFlags<2>,ChainInterfaces<IHolographicPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInternalFullScreenHandler,IHolographicViewManager,IHolographicViewTransitionNotificationService,Windows::Internal::Shell::Holographic::IHolographicViewHostItemSource>,Implements<RuntimeClassFlags<3>,CloakedIid<IShellPositionerViewHandoff>,CloakedIid<ITabbingAwarePositioner>,CloakedIid<IApplicationViewChangeListener> > >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,KeyboardHosting::IDesktopKeyboardHostingPolicy,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,TwinUI::Cortana::ISearchAppDesktopNotifications,TwinUI::Cortana::ISearchAppExperienceView,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,TwinUI::ShellFeeds::IShellFeedsDesktopExperienceView,IImmersiveWindowMessageNotification,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Foundation::IClosable,IImmersiveWindowMessageNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Foundation::IClosable,IInitializeTrustedComponentForegroundControl>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Internal::ComposableShell::Tabs::IApplicationViewTabOperation,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IWindowDispatcherConnectedStandby,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IControlCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>();
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWindowSnappingEvents,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AppViewDataSourceAdapterBase>,IWeakReferenceSource,IAppViewDataSourceAdapter,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveApplicationManager,IImmersiveShellHookNotification,IImmersiveApplicationArrayService,IImmersiveApplicationArrayService2,IImmersiveApplicationVisibilityOverride,IIAMServiceProvider,ISpecialWindowMessageCallback,IImmersiveMonitorNotification,IApplicationManagerViewPosition,IImmersiveApplicationNotificationService,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,IAcrylicPolicyManager,IImmersiveWindowMessageNotification,IBatterySaverStateChangedHandler,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveWindowMessageNotification,ITouchKeyboardExperienceManager,ITabletModeChangeListener,IApplicationStateChangeHandler,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IWnfCallback,IEyeControlAdapterOwner,IEyeControlManager,IInputDeviceWatcherOwner,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,ITabViewManager,ITabDragHandler,ITabGroupManager,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,ICortanaStoreAppExperienceManager,IImmersiveLayoutChanges,IInputHostLayoutChanges,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,IImmersiveLayoutChanges,Windows::Internal::RetailDemo::IRetailDemoExperienceManager,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,IPrivilegedOperationsConsumer,IXamlExplorerHost,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,Implements<RuntimeClassFlags<2>,ChainInterfaces<IHolographicPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInternalFullScreenHandler,IHolographicViewManager,IHolographicViewTransitionNotificationService,Windows::Internal::Shell::Holographic::IHolographicViewHostItemSource>,Implements<RuntimeClassFlags<3>,CloakedIid<IShellPositionerViewHandoff>,CloakedIid<ITabbingAwarePositioner>,CloakedIid<IApplicationViewChangeListener> > >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,Windows::Internal::ComposableShell::Tabs::ITabSetMediator,IWindowSnappingEvents,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,Windows::Internal::FamilySafety::AppLimits::IFamilyAppUsageManager,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,Windows::Internal::Shell::Holographic::IHolographicForegroundAssistant,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,Windows::Internal::Shell::Holographic::IHolographicViewHostItemHistory,Windows::Internal::ComposableShell::Core::IViewProvider,CloakedIid<Windows::Internal::Shell::Holographic::IHolographicViewHostItemLedgerPrivate>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker,INtUserViewWrapperCollection>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithSite>,IWeakReferenceSource,ChainInterfaces<IFullScreenPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IActiveZBandNotificationForMonitor,IApplicationViewChangeListener,ITabletModeChangeListener,IFullScreenPositionerNotificationService,IFullScreenPositionerTestHandler,ITransitionStateChangeHandler,IPrivilegedOperationsConsumer>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker,INtUserViewWrapperCollection> >,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker> >,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase> >,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase> >,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery> >,IViewManagerControl,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker,INtUserViewWrapperCollection>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery> >,IViewManagerControl,IWindowDispatcherConnectedStandby,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<ViewWrapperBase>,IWeakReferenceSource,ILegacyViewWrapper>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<ViewWrapperBase>,IWeakReferenceSource,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<WindowWrapperBase>,IWeakReferenceSource,ILegacyViewWrapper>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<WindowWrapperBase>,IWeakReferenceSource,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,TwinUI::Cortana::ICortanaDesktopNotifications,TwinUI::Cortana::ICortanaExperienceView,ILightDismissNotification,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,TwinUI::Cortana::ICortanaWNFNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,TwinUI::Cortana::ICortanaWNFNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::IClosable,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::ComposableShell::Core::IViewProvider,CloakedIid<Windows::Internal::Shell::Holographic::IHolographicViewHostItemLedgerPrivate>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController2,IVirtualDesktopControllerInternal,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::Data::Activities::ISetActivityMonitor,CImmersiveShellComponentWithGITSite,ICDPUserActivitySettingsCallback,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::FamilySafety::AppLimits::IFamilyAppUsageManager,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::IAsyncOperationLocal,CloakedIid<Windows::Internal::IAsyncDeferral>,CloakedIid<Windows::Internal::IComPoolTask>,CloakedIid<Windows::Internal::IAsyncFireCompletion> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,IWindowDispatcherConnectedStandby,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker,INtUserViewWrapperCollection>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewVisibilityOverride,Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies,Windows::Internal::Shell::ViewManagerInterop::IClientWindowState,Windows::Internal::Shell::ViewManagerInterop::IViewRecoveryState,IFramedViewWrapper,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::Shell::Experience::IActionCenterExperienceManager,IEdgeUiInvocation,IEdgeUiTouchInvocation,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::Shell::Experience::IToastCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable,Windows::Internal::Shell::Holographic::IHolographicExperienceExtension,IInputHostLayoutChanges>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,IApplicationViewBackedViewHostItemPrivate,IImmersiveApplicationPresentationListener,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,Windows::Internal::Shell::Holographic::IPortableViewHostItem,IApplicationViewBackedViewHostItemPrivate,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,ChainInterfaces<IWindowWrapperInternal,Windows::Internal::Shell::ViewManagerInterop::IWindowWrapper,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewVisibilityOverride,Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies,Windows::Internal::Shell::ViewManagerInterop::IClientWindowState,Windows::Internal::Shell::ViewManagerInterop::IViewRecoveryState,IFramedViewWrapper,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<6>,0,IClassFactory,Nil,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct MakeAllocator<AccessibilityExperienceManager>
			{
				~MakeAllocator<AccessibilityExperienceManager>();
			};

			struct MakeAllocator<AgileApplicationViewChangeListenerConverter>
			{
				~MakeAllocator<AgileApplicationViewChangeListenerConverter>();
			};

			struct MakeAllocator<AgileRegistrationList::AgileCallbackArray>
			{
				~MakeAllocator<AgileRegistrationList::AgileCallbackArray>();
			};

			struct MakeAllocator<AppLayoutCache>
			{
				~MakeAllocator<AppLayoutCache>();
			};

			struct MakeAllocator<AppRequestOperation>
			{
				~MakeAllocator<AppRequestOperation>();
			};

			struct MakeAllocator<AppResizeView>
			{
				~MakeAllocator<AppResizeView>();
			};

			struct MakeAllocator<AppSizeConstraintsCache>
			{
				~MakeAllocator<AppSizeConstraintsCache>();
			};

			struct MakeAllocator<AppUsageTracker>
			{
				~MakeAllocator<AppUsageTracker>();
			};

			struct MakeAllocator<AppViewDataSourceAdapter>
			{
				~MakeAllocator<AppViewDataSourceAdapter>();
			};

			struct MakeAllocator<AppViewIconLoader>
			{
				~MakeAllocator<AppViewIconLoader>();
			};

			struct MakeAllocator<ApplicationViewManagerVisibilityDebouncer>
			{
				~MakeAllocator<ApplicationViewManagerVisibilityDebouncer>();
			};

			struct MakeAllocator<CActionCenterExperienceManager>
			{
				~MakeAllocator<CActionCenterExperienceManager>();
			};

			struct MakeAllocator<CAltTabViewController>
			{
				~MakeAllocator<CAltTabViewController>();
			};

			struct MakeAllocator<CAltTabViewHost>
			{
				~MakeAllocator<CAltTabViewHost>();
			};

			struct MakeAllocator<CAppLayout>
			{
				~MakeAllocator<CAppLayout>();
			};

			struct MakeAllocator<CAppTransitionTargetManager>
			{
				~MakeAllocator<CAppTransitionTargetManager>();
			};

			struct MakeAllocator<CApplicationFrameWrapper>
			{
				~MakeAllocator<CApplicationFrameWrapper>();
			};

			struct MakeAllocator<CApplicationManager>
			{
				~MakeAllocator<CApplicationManager>();
			};

			struct MakeAllocator<CApplicationViewManager>
			{
				~MakeAllocator<CApplicationViewManager>();
			};

			struct MakeAllocator<CBaseTrayFlyoutExperienceManager::DebounceDetection::Notification>
			{
				~MakeAllocator<CBaseTrayFlyoutExperienceManager::DebounceDetection::Notification>();
			};

			struct MakeAllocator<CBaseTrayFlyoutExperienceManager>
			{
				~MakeAllocator<CBaseTrayFlyoutExperienceManager>();
			};

			struct MakeAllocator<CClassicWindowManager>
			{
				~MakeAllocator<CClassicWindowManager>();
			};

			struct MakeAllocator<CControlCenterExperienceManager>
			{
				~MakeAllocator<CControlCenterExperienceManager>();
			};

			struct MakeAllocator<CDelayedTileActivation>
			{
				~MakeAllocator<CDelayedTileActivation>();
			};

			struct MakeAllocator<CDesktopPositioner>
			{
				~MakeAllocator<CDesktopPositioner>();
			};

			struct MakeAllocator<CDropFeedbackList>
			{
				~MakeAllocator<CDropFeedbackList>();
			};

			struct MakeAllocator<CExperienceManagerAnimationHelper::DummyWindow>
			{
				~MakeAllocator<CExperienceManagerAnimationHelper::DummyWindow>();
			};

			struct MakeAllocator<CFallbackWindow>
			{
				~MakeAllocator<CFallbackWindow>();
			};

			struct MakeAllocator<CFrameApplicationPresentation>
			{
				~MakeAllocator<CFrameApplicationPresentation>();
			};

			struct MakeAllocator<CIAMSpecialWindow>
			{
				~MakeAllocator<CIAMSpecialWindow>();
			};

			struct MakeAllocator<CImmersiveApp>
			{
				~MakeAllocator<CImmersiveApp>();
			};

			struct MakeAllocator<CImmersiveWindowManager>
			{
				~MakeAllocator<CImmersiveWindowManager>();
			};

			struct MakeAllocator<CInsightsExperienceManager>
			{
				~MakeAllocator<CInsightsExperienceManager>();
			};

			struct MakeAllocator<CJumpViewExperienceManager>
			{
				~MakeAllocator<CJumpViewExperienceManager>();
			};

			struct MakeAllocator<CPeopleBarFlyoutExperienceManager::DebounceDetection::Notification>
			{
				~MakeAllocator<CPeopleBarFlyoutExperienceManager::DebounceDetection::Notification>();
			};

			struct MakeAllocator<CPeopleBarFlyoutExperienceManager>
			{
				~MakeAllocator<CPeopleBarFlyoutExperienceManager>();
			};

			struct MakeAllocator<CPeopleBarJumpViewExperienceManager>
			{
				~MakeAllocator<CPeopleBarJumpViewExperienceManager>();
			};

			struct MakeAllocator<CPerMonitorDesktopVisibilityService>
			{
				~MakeAllocator<CPerMonitorDesktopVisibilityService>();
			};

			struct MakeAllocator<CQuickConnectExperienceManager>
			{
				~MakeAllocator<CQuickConnectExperienceManager>();
			};

			struct MakeAllocator<CScreenClippingExperienceManager>
			{
				~MakeAllocator<CScreenClippingExperienceManager>();
			};

			struct MakeAllocator<CShoulderTapExperienceManager>
			{
				~MakeAllocator<CShoulderTapExperienceManager>();
			};

			struct MakeAllocator<CStartExperienceManager>
			{
				~MakeAllocator<CStartExperienceManager>();
			};

			struct MakeAllocator<CSwitchController>
			{
				~MakeAllocator<CSwitchController>();
			};

			struct MakeAllocator<CTaskContinuityActivitiesExperienceManager>
			{
				~MakeAllocator<CTaskContinuityActivitiesExperienceManager>();
			};

			struct MakeAllocator<CTaskWindow>
			{
				~MakeAllocator<CTaskWindow>();
			};

			struct MakeAllocator<CToastCenterExperienceManager>
			{
				~MakeAllocator<CToastCenterExperienceManager>();
			};

			struct MakeAllocator<CVirtualDesktopCollection>
			{
				~MakeAllocator<CVirtualDesktopCollection>();
			};

			struct MakeAllocator<CVirtualDesktopComponent>
			{
				~MakeAllocator<CVirtualDesktopComponent>();
			};

			struct MakeAllocator<CVirtualDesktopLock>
			{
				~MakeAllocator<CVirtualDesktopLock>();
			};

			struct MakeAllocator<CVirtualDesktopManager>
			{
				~MakeAllocator<CVirtualDesktopManager>();
			};

			struct MakeAllocator<CVirtualTouchpadExperienceManager>
			{
				~MakeAllocator<CVirtualTouchpadExperienceManager>();
			};

			struct MakeAllocator<CVisibilityChangedEventArgs>
			{
				~MakeAllocator<CVisibilityChangedEventArgs>();
			};

			struct MakeAllocator<CortanaDesktopExperienceView>
			{
				~MakeAllocator<CortanaDesktopExperienceView>();
			};

			struct MakeAllocator<CortanaSharedExperienceManager>
			{
				~MakeAllocator<CortanaSharedExperienceManager>();
			};

			struct MakeAllocator<CortanaStoreAppExperienceManager>
			{
				~MakeAllocator<CortanaStoreAppExperienceManager>();
			};

			struct MakeAllocator<CustomShellManager>
			{
				~MakeAllocator<CustomShellManager>();
			};

			struct MakeAllocator<DesktopOperation>
			{
				~MakeAllocator<DesktopOperation>();
			};

			struct MakeAllocator<FrameWrapper>
			{
				~MakeAllocator<FrameWrapper>();
			};

			struct MakeAllocator<FullScreenPositioner>
			{
				~MakeAllocator<FullScreenPositioner>();
			};

			struct MakeAllocator<HolographicForegroundAssistant>
			{
				~MakeAllocator<HolographicForegroundAssistant>();
			};

			struct MakeAllocator<HolographicPositioner>
			{
				~MakeAllocator<HolographicPositioner>();
			};

			struct MakeAllocator<HolographicViewHostItemLedger>
			{
				~MakeAllocator<HolographicViewHostItemLedger>();
			};

			struct MakeAllocator<ImeNotificationExperienceManager>
			{
				~MakeAllocator<ImeNotificationExperienceManager>();
			};

			struct MakeAllocator<ImmersiveMonitorHelper>
			{
				~MakeAllocator<ImmersiveMonitorHelper>();
			};

			struct MakeAllocator<ImmersiveShellStressTool>
			{
				~MakeAllocator<ImmersiveShellStressTool>();
			};

			struct MakeAllocator<JointDivider>
			{
				~MakeAllocator<JointDivider>();
			};

			struct MakeAllocator<KeyboardHosting::PositionAndSizeOptionsProvider>
			{
				~MakeAllocator<KeyboardHosting::PositionAndSizeOptionsProvider>();
			};

			struct MakeAllocator<KeyboardHosting::TabTipAdapter>
			{
				~MakeAllocator<KeyboardHosting::TabTipAdapter>();
			};

			struct MakeAllocator<KeyboardHosting::TabTipAdapterPolicy>
			{
				~MakeAllocator<KeyboardHosting::TabTipAdapterPolicy>();
			};

			struct MakeAllocator<KeyboardHosting::ViewRectProvider>
			{
				~MakeAllocator<KeyboardHosting::ViewRectProvider>();
			};

			struct MakeAllocator<LegacyViewWrapper>
			{
				~MakeAllocator<LegacyViewWrapper>();
			};

			struct MakeAllocator<LegacyWindowWrapper>
			{
				~MakeAllocator<LegacyWindowWrapper>();
			};

			struct MakeAllocator<LockScreenDirectorServiceProviderImpl>
			{
				~MakeAllocator<LockScreenDirectorServiceProviderImpl>();
			};

			struct MakeAllocator<MeetNowExperienceManager>
			{
				~MakeAllocator<MeetNowExperienceManager>();
			};

			struct MakeAllocator<MessageProxyReconnectAdapter>
			{
				~MakeAllocator<MessageProxyReconnectAdapter>();
			};

			struct MakeAllocator<MonitorFrame>
			{
				~MakeAllocator<MonitorFrame>();
			};

			struct MakeAllocator<PWSLayoutItem>
			{
				~MakeAllocator<PWSLayoutItem>();
			};

			struct MakeAllocator<PWSLayoutParser>
			{
				~MakeAllocator<PWSLayoutParser>();
			};

			struct MakeAllocator<PWSLayoutPolicyManager>
			{
				~MakeAllocator<PWSLayoutPolicyManager>();
			};

			struct MakeAllocator<PenWorkspace::Discover::ObjectArray>
			{
				~MakeAllocator<PenWorkspace::Discover::ObjectArray>();
			};

			struct MakeAllocator<PenWorkspace::Discover::RecentAppsCache>
			{
				~MakeAllocator<PenWorkspace::Discover::RecentAppsCache>();
			};

			struct MakeAllocator<PenWorkspaceDiscoverBroker>
			{
				~MakeAllocator<PenWorkspaceDiscoverBroker>();
			};

			struct MakeAllocator<PenWorkspaceDiscoverBrokerFactory>
			{
				~MakeAllocator<PenWorkspaceDiscoverBrokerFactory>();
			};

			struct MakeAllocator<PenWorkspaceScreenCaptureBroker>
			{
				~MakeAllocator<PenWorkspaceScreenCaptureBroker>();
			};

			struct MakeAllocator<PeoplePaneViewManager>
			{
				~MakeAllocator<PeoplePaneViewManager>();
			};

			struct MakeAllocator<PerMonitorShellPositionerManager>
			{
				~MakeAllocator<PerMonitorShellPositionerManager>();
			};

			struct MakeAllocator<PositionAdjustmentHistory>
			{
				~MakeAllocator<PositionAdjustmentHistory>();
			};

			struct MakeAllocator<PositionerPriority>
			{
				~MakeAllocator<PositionerPriority>();
			};

			struct MakeAllocator<RetailDemoExperienceManager>
			{
				~MakeAllocator<RetailDemoExperienceManager>();
			};

			struct MakeAllocator<ScreenClippingBrokerImpl>
			{
				~MakeAllocator<ScreenClippingBrokerImpl>();
			};

			struct MakeAllocator<ScreenManager>
			{
				~MakeAllocator<ScreenManager>();
			};

			struct MakeAllocator<SearchAppDesktopExperienceView>
			{
				~MakeAllocator<SearchAppDesktopExperienceView>();
			};

			struct MakeAllocator<SearchAppExperienceManager>
			{
				~MakeAllocator<SearchAppExperienceManager>();
			};

			struct MakeAllocator<ShellFeedsDesktopExperienceView>
			{
				~MakeAllocator<ShellFeedsDesktopExperienceView>();
			};

			struct MakeAllocator<ShellFeedsExperienceManagerFactory>
			{
				~MakeAllocator<ShellFeedsExperienceManagerFactory>();
			};

			struct MakeAllocator<ShellFeedsExperienceManagerImpl>
			{
				~MakeAllocator<ShellFeedsExperienceManagerImpl>();
			};

			struct MakeAllocator<ShellPositionerManager>
			{
				~MakeAllocator<ShellPositionerManager>();
			};

			struct MakeAllocator<SimpleClassFactory<ShellFeedsExperienceManagerFactory,0> >
			{
				~MakeAllocator<SimpleClassFactory<ShellFeedsExperienceManagerFactory,0> >();
			};

			struct MakeAllocator<SimpleSealedActivationFactory<SystemTray::TrayInfoTipActivator,0> >
			{
				~MakeAllocator<SimpleSealedActivationFactory<SystemTray::TrayInfoTipActivator,0> >();
			};

			struct MakeAllocator<SimpleSealedActivationFactory<SystemTray::TrayInfoTipAppInfoProvider,0> >
			{
				~MakeAllocator<SimpleSealedActivationFactory<SystemTray::TrayInfoTipAppInfoProvider,0> >();
			};

			struct MakeAllocator<SimpleSealedActivationFactory<Windows::Internal::Shell::CustomShell::CustomShellExperienceRepository,0> >
			{
				~MakeAllocator<SimpleSealedActivationFactory<Windows::Internal::Shell::CustomShell::CustomShellExperienceRepository,0> >();
			};

			struct MakeAllocator<SizeConversionViewInfo>
			{
				~MakeAllocator<SizeConversionViewInfo>();
			};

			struct MakeAllocator<StartExperienceWallpaperBackground>
			{
				~MakeAllocator<StartExperienceWallpaperBackground>();
			};

			struct MakeAllocator<SurfaceHubPositioner>
			{
				~MakeAllocator<SurfaceHubPositioner>();
			};

			struct MakeAllocator<TabViewManager>
			{
				~MakeAllocator<TabViewManager>();
			};

			struct MakeAllocator<TabletModeViewManagerProxy>
			{
				~MakeAllocator<TabletModeViewManagerProxy>();
			};

			struct MakeAllocator<TaskFlowImmersiveShellBroker>
			{
				~MakeAllocator<TaskFlowImmersiveShellBroker>();
			};

			struct MakeAllocator<TaskbarLayoutItem>
			{
				~MakeAllocator<TaskbarLayoutItem>();
			};

			struct MakeAllocator<TaskbarLayoutParser>
			{
				~MakeAllocator<TaskbarLayoutParser>();
			};

			struct MakeAllocator<TaskbarLayoutPolicyManager>
			{
				~MakeAllocator<TaskbarLayoutPolicyManager>();
			};

			struct MakeAllocator<TitleBarController>
			{
				~MakeAllocator<TitleBarController>();
			};

			struct MakeAllocator<TouchKeyboardExperienceManager>
			{
				~MakeAllocator<TouchKeyboardExperienceManager>();
			};

			struct MakeAllocator<TwinUI::Cortana::ShellExperienceView>
			{
				~MakeAllocator<TwinUI::Cortana::ShellExperienceView>();
			};

			struct MakeAllocator<TwinUI::ShellFeeds::ShellFeedsShellExperienceView>
			{
				~MakeAllocator<TwinUI::ShellFeeds::ShellFeedsShellExperienceView>();
			};

			struct MakeAllocator<UAPViewWrapper>
			{
				~MakeAllocator<UAPViewWrapper>();
			};

			struct MakeAllocator<UwpAppStateManager>
			{
				~MakeAllocator<UwpAppStateManager>();
			};

			struct MakeAllocator<ViewEventArgsForWindowingSettings>
			{
				~MakeAllocator<ViewEventArgsForWindowingSettings>();
			};

			struct MakeAllocator<ViewEventDispatcher>
			{
				~MakeAllocator<ViewEventDispatcher>();
			};

			struct MakeAllocator<ViewGroup>
			{
				~MakeAllocator<ViewGroup>();
			};

			struct MakeAllocator<ViewGroupManager>
			{
				~MakeAllocator<ViewGroupManager>();
			};

			struct MakeAllocator<ViewPresentationMediator>
			{
				~MakeAllocator<ViewPresentationMediator>();
			};

			struct MakeAllocator<VirtualDesktop>
			{
				~MakeAllocator<VirtualDesktop>();
			};

			struct MakeAllocator<VirtualDesktopAcessibility>
			{
				~MakeAllocator<VirtualDesktopAcessibility>();
			};

			struct MakeAllocator<VirtualDesktopAnimationSyncNotifications>
			{
				~MakeAllocator<VirtualDesktopAnimationSyncNotifications>();
			};

			struct MakeAllocator<VirtualDesktopDataSource>
			{
				~MakeAllocator<VirtualDesktopDataSource>();
			};

			struct MakeAllocator<VirtualDesktopDataSourceComponent>
			{
				~MakeAllocator<VirtualDesktopDataSourceComponent>();
			};

			struct MakeAllocator<VirtualDesktopGestureWindow>
			{
				~MakeAllocator<VirtualDesktopGestureWindow>();
			};

			struct MakeAllocator<VirtualDesktopGroupedViewsEventListener>
			{
				~MakeAllocator<VirtualDesktopGroupedViewsEventListener>();
			};

			struct MakeAllocator<VirtualDesktopManagerSuspensionToken>
			{
				~MakeAllocator<VirtualDesktopManagerSuspensionToken>();
			};

			struct MakeAllocator<VirtualPinnedAppsHandler>
			{
				~MakeAllocator<VirtualPinnedAppsHandler>();
			};

			struct MakeAllocator<VoiceAssistantPositioner>
			{
				~MakeAllocator<VoiceAssistantPositioner>();
			};

			struct MakeAllocator<Win32AppStateManager>
			{
				~MakeAllocator<Win32AppStateManager>();
			};

			struct MakeAllocator<WindowArrangementView>
			{
				~MakeAllocator<WindowArrangementView>();
			};

			struct MakeAllocator<WindowGroupManager>
			{
				~MakeAllocator<WindowGroupManager>();
			};

			struct MakeAllocator<WindowSizeConverter>
			{
				~MakeAllocator<WindowSizeConverter>();
			};

			struct MakeAllocator<WindowWrapper>
			{
				~MakeAllocator<WindowWrapper>();
			};

			struct MakeAllocator<WindowingEnvironmentConfig>
			{
				~MakeAllocator<WindowingEnvironmentConfig>();
			};

			struct MakeAllocator<WindowingEnvironmentManager>
			{
				~MakeAllocator<WindowingEnvironmentManager>();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::ITreeNode *,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::ITreeNode *,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::Tabs::ShellTab *,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::ComposableShell::Tabs::ShellTab *,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::Chaining::IChainLink *,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::Chaining::IChainLink *,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<unsigned int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<unsigned int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,Windows::Foundation::Collections::Internal::VectorOptions<unsigned int,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<unsigned int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<unsigned int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,Windows::Foundation::Collections::Internal::VectorOptions<unsigned int,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Internal::Shell::IImmersiveWindowMessageNotificationHandler>
			{
				~MakeAllocator<Windows::Internal::Shell::IImmersiveWindowMessageNotificationHandler>();
			};

			struct MakeAllocator<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListener>
			{
				~MakeAllocator<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListener>();
			};

			struct MakeAllocator<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionDataParser>
			{
				~MakeAllocator<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionDataParser>();
			};

			struct MakeAllocator<XamlAllUpViewHost>
			{
				~MakeAllocator<XamlAllUpViewHost>();
			};

			struct MakeAllocator<XamlAltTabViewHost>
			{
				~MakeAllocator<XamlAltTabViewHost>();
			};

			struct MakeAllocator<XamlExplorerHostShellComponent>
			{
				~MakeAllocator<XamlExplorerHostShellComponent>();
			};

			struct MakeAllocator<XamlLauncherFactory>
			{
				~MakeAllocator<XamlLauncherFactory>();
			};

			struct MakeAllocator<XamlSnapAssistViewHost>
			{
				~MakeAllocator<XamlSnapAssistViewHost>();
			};

			struct MakeAllocator<winrt::wrl_class_factory<winrt::Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher> >
			{
				~MakeAllocator<winrt::wrl_class_factory<winrt::Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher> >();
			};

			struct MakeAllocator<winrt::wrl_class_factory<winrt::Windows::Internal::Shell::implementation::WindowTabHost> >
			{
				~MakeAllocator<winrt::wrl_class_factory<winrt::Windows::Internal::Shell::implementation::WindowTabHost> >();
			};

			class ModuleBase
			{
				static void * moduleLock_;
			protected:
				static unsigned long volatile objectCount_;
			public:
				static ModuleBase * module_;
				virtual CreatorMap const * * GetFirstEntryPointer();
				virtual CreatorMap const * * GetLastEntryPointer();
				virtual CreatorMap const * * GetMidEntryPointer();
				virtual _RTL_SRWLOCK * GetLock();
				virtual unsigned long GetObjectCount();
			};

			class RuntimeClassBaseT<19>
			{
			protected:
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> *,_GUID const &,void * *);
			};

			class RuntimeClassBaseT<1>
			{
			protected:
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> > >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ChainInterfaces<IWindowingEnvironmentSettingsInternal,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ChainInterfaces<IWindowingEnvironmentSettingsInternal,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IIconLoaderInternal> > >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IIconLoaderInternal> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IUnknown> > >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IUnknown> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSelectTargetView> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSelectTargetView> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsStandalone,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnironmentSettingsArgsForImplicitEvent> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsStandalone,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnironmentSettingsArgsForImplicitEvent> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewHostItemEventArgsBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewHostItemEventArgsBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs,FtmBase> *,_GUID const &,void * *);
			};

			class RuntimeClassBaseT<2>
			{
			protected:
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IWindowManagementJointResizeEvents,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,IImmersiveRawInputKeyboardNotification> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IWindowManagementJointResizeEvents,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,IImmersiveRawInputKeyboardNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLExecuteCommandBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLExecuteCommandBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IAppResizeOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IAppResizeOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IAppSwitchOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IAppSwitchOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IBackOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IBackOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IDesktopOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IDesktopOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IPPILayoutOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IPPILayoutOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<ITabletModePositionerOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<ITabletModePositionerOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IWindowArrangementOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IWindowArrangementOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IAllUpViewService,IEdgeUiTouchInvocation,IAllUpViewInvoker> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IAllUpViewService,IEdgeUiTouchInvocation,IAllUpViewInvoker> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,ITabletModeChrome> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,ITabletModeChrome> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IXamlLauncherState,IImmersiveLauncherCortana,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IXamlLauncherState,IImmersiveLauncherCortana,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IAnimatableMultitaskingViewFrame,IMultitaskingViewFrame,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IMultitaskingViewElementEvents,IFrameTestHooks> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IAnimatableMultitaskingViewFrame,IMultitaskingViewFrame,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IMultitaskingViewElementEvents,IFrameTestHooks> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IAppTransitionTargetManager,ITaggableTarget,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,CWRLObjectWithSite> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IAppTransitionTargetManager,ITaggableTarget,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,CWRLObjectWithSite> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IApplicationViewVisibilityDebouncedNotificationServicePrivate,IApplicationViewVisibilityDebouncedNotificationService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IApplicationViewChangeListener,IApplicationViewCollection,IApplicationViewCollectionTestHook,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IApplicationViewVisibilityDebouncedNotificationServicePrivate,IApplicationViewVisibilityDebouncedNotificationService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IApplicationViewChangeListener,IApplicationViewCollection,IApplicationViewCollectionTestHook,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IDropFeedbackItem,ITemporaryAppVisual,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveApplicationNotification,IDropFeedbackItemInternal> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IDropFeedbackItem,ITemporaryAppVisual,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveApplicationNotification,IDropFeedbackItemInternal> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IVirtualDesktopAnimationSyncNotificationServicePrivate,IVirtualDesktopAnimationSyncNotificationService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IVirtualDesktopAnimationSyncNotificationServicePrivate,IVirtualDesktopAnimationSyncNotificationService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IVirtualDesktopPinnedAppsPrivate,IVirtualDesktopPinnedApps,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IVirtualDesktopPinnedAppsPrivate,IVirtualDesktopPinnedApps,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IVirtualDesktopTabletModePolicy,IVirtualDesktopTabletModePolicyService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IVirtualDesktopTabletModePolicy,IVirtualDesktopTabletModePolicyService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IXamlExplorerHostWindowInternal,IXamlExplorerHostWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IXamlExplorerHostWindowInternal,IXamlExplorerHostWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ImmersiveShellComponentCreator,IImmersiveComponentCreator,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ImmersiveShellComponentCreator,IImmersiveComponentCreator,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,IClassicWindowManagerPrivate,IApplicationActivationHistory,IClassicWindowManager,IClassicWindowPresentation,IClassicWindowCollectionRefresh,ITaskListChangeListener,IClassicWindowOwnershipQuery> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,IClassicWindowManagerPrivate,IApplicationActivationHistory,IClassicWindowManager,IClassicWindowPresentation,IClassicWindowCollectionRefresh,ITaskListChangeListener,IClassicWindowOwnershipQuery> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,IRotationManagerSync,IShellRotationManager> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,IRotationManagerSync,IShellRotationManager> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,HotTrackingElement,IMultitaskingViewGridElement,ISwitchItemElement,IGlyphButtonHost> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,HotTrackingElement,IMultitaskingViewGridElement,ISwitchItemElement,IGlyphButtonHost> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppLayoutItemInternal,ChainInterfaces<IAppLayoutItemBuilder,IAppLayoutItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppLayoutItemInternal,ChainInterfaces<IAppLayoutItemBuilder,IAppLayoutItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITouchpadGesture,ChainInterfaces<IVirtualDesktopGestureHandlerPrivate,IVirtualDesktopGestureHandler,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITouchpadGesture,ChainInterfaces<IVirtualDesktopGestureHandlerPrivate,IVirtualDesktopGestureHandler,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ObservableItem,ChainInterfaces<IVirtualDesktopItemInternal,IVirtualDesktopItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ObservableItem,ChainInterfaces<IVirtualDesktopItemInternal,IVirtualDesktopItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ObservableObjectArray,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,ChainInterfaces<ISwitchItemFilteredCollection,IObservableObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ObservableObjectArray,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,ChainInterfaces<ISwitchItemFilteredCollection,IObservableObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,SnapAssistViewAnimationCoordinatorBase<MultitaskingViewDismissalAnimationCoordinator> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,SnapAssistViewAnimationCoordinatorBase<MultitaskingViewDismissalAnimationCoordinator> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,SnapAssistViewAnimationCoordinatorBase<MultitaskingViewInvocationAnimationCoordinator> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,SnapAssistViewAnimationCoordinatorBase<MultitaskingViewInvocationAnimationCoordinator> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,VirtualDesktopNotificationForwarderHelper<CVirtualDesktopNotifications> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,VirtualDesktopNotificationForwarderHelper<CVirtualDesktopNotifications> > *,_GUID const &,void * *);
			};

			class RuntimeClassBaseT<3>
			{
			protected:
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveWindowFactoryBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveWindowFactoryBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CWRLObjectWithSite,Windows::Internal::Shell::Experience::IStartExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IDWMStoryboardListener> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CWRLObjectWithSite,Windows::Internal::Shell::Experience::IStartExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IDWMStoryboardListener> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IApplicationFrameProxy,IApplicationFrame,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IApplicationFrameProxy,IApplicationFrame,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IApplicationViewIconLoaderNotifications> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IApplicationViewIconLoaderNotifications> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveWindowMessageNotification> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveWindowMessageNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IActionCenterExperienceManager,IEdgeUiInvocation,IEdgeUiTouchInvocation,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IActionCenterExperienceManager,IEdgeUiInvocation,IEdgeUiTouchInvocation,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IControlCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IControlCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IObjectProvider,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IObjectProvider,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ITabViewManager> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ITabViewManager> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ITitleBarController,IImmersiveShellHookNotification,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ITitleBarController,IImmersiveShellHookNotification,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IWindowGroup,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IWindowGroup,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IWindowGroupManager,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IWindowGroupManager,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ObservableObjectArray,IApplicationViewChangeListener,ISwitchItemCollection> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ObservableObjectArray,IApplicationViewChangeListener,ISwitchItemCollection> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::Cortana::ICortanaExperienceManagerNotification,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::Cortana::ICortanaExperienceManagerNotification,Windows::Foundation::IClosable> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::Cortana::ISearchAppExperienceManagerNotification,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::Cortana::ISearchAppExperienceManagerNotification,Windows::Foundation::IClosable> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::ShellFeeds::IShellFeedsDesktopNotifications,TwinUI::ShellFeeds::IShellFeedsDesktopExperienceView,IImmersiveWindowMessageNotification,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::ShellFeeds::IShellFeedsDesktopNotifications,TwinUI::ShellFeeds::IShellFeedsDesktopExperienceView,IImmersiveWindowMessageNotification,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification,Windows::Foundation::IClosable> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Foundation::IClosable,ILightDismissNotification,IImmersiveMonitorNotification,Windows::Internal::Shell::Experience::IInsightsExperienceManager> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Foundation::IClosable,ILightDismissNotification,IImmersiveMonitorNotification,Windows::Internal::Shell::Experience::IInsightsExperienceManager> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController2,IVirtualDesktopControllerInternal,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController2,IVirtualDesktopControllerInternal,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource,IDesktopVirtualDesktopDataSource,IVirtualDesktopDataSourceInternal,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource,IDesktopVirtualDesktopDataSource,IVirtualDesktopDataSourceInternal,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IToastCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable,Windows::Internal::Shell::Holographic::IHolographicExperienceExtension,IInputHostLayoutChanges> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IToastCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable,Windows::Internal::Shell::Holographic::IHolographicExperienceExtension,IInputHostLayoutChanges> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IJumpViewExperienceManager,IImmersiveMonitorNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveWindowMessageNotification> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IJumpViewExperienceManager,IImmersiveMonitorNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveWindowMessageNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperiencePositioner,TwinUI::Cortana::ICortanaDesktopNotifications,TwinUI::Cortana::ICortanaExperienceView,ILightDismissNotification,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,TwinUI::Cortana::ICortanaWNFNotification> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperiencePositioner,TwinUI::Cortana::ICortanaDesktopNotifications,TwinUI::Cortana::ICortanaExperienceView,ILightDismissNotification,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,TwinUI::Cortana::ICortanaWNFNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellFeedsExperienceManager,IImmersiveMonitorNotification,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellFeedsExperienceManager,IImmersiveMonitorNotification,Windows::Foundation::IClosable> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,IApplicationViewBackedViewHostItemPrivate,IImmersiveApplicationPresentationListener,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,IApplicationViewBackedViewHostItemPrivate,IImmersiveApplicationPresentationListener,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,Windows::Internal::Shell::Holographic::IPortableViewHostItem,IApplicationViewBackedViewHostItemPrivate,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,Windows::Internal::Shell::Holographic::IPortableViewHostItem,IApplicationViewBackedViewHostItemPrivate,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,IImmersiveShellHookNotification,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListener,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,IImmersiveShellHookNotification,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListener,FtmBase> *,_GUID const &,void * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IAcrylicPolicyManager,IImmersiveWindowMessageNotification,IBatterySaverStateChangedHandler,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IAcrylicPolicyManager,IImmersiveWindowMessageNotification,IBatterySaverStateChangedHandler,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveWindowMessageNotification,ITouchKeyboardExperienceManager,ITabletModeChangeListener,IApplicationStateChangeHandler,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveWindowMessageNotification,ITouchKeyboardExperienceManager,ITabletModeChangeListener,IApplicationStateChangeHandler,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,ITabViewManager,ITabDragHandler,ITabGroupManager,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,ITabViewManager,ITabDragHandler,ITabGroupManager,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,ICortanaStoreAppExperienceManager,IImmersiveLayoutChanges,IInputHostLayoutChanges,IPrivilegedOperationsConsumer> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,ICortanaStoreAppExperienceManager,IImmersiveLayoutChanges,IInputHostLayoutChanges,IPrivilegedOperationsConsumer> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::RetailDemo::IRetailDemoExperienceManager,IPrivilegedOperationsConsumer,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::RetailDemo::IRetailDemoExperienceManager,IPrivilegedOperationsConsumer,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IXamlExplorerHost,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IXamlExplorerHost,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::ComposableShell::Tabs::ITabSetMediator,IWindowSnappingEvents,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::ComposableShell::Tabs::ITabSetMediator,IWindowSnappingEvents,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::FamilySafety::AppLimits::IFamilyAppUsageManager,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::FamilySafety::AppLimits::IFamilyAppUsageManager,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicForegroundAssistant,IPrivilegedOperationsConsumer,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicForegroundAssistant,IPrivilegedOperationsConsumer,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicViewHostItemHistory,Windows::Internal::ComposableShell::Core::IViewProvider,CloakedIid<Windows::Internal::Shell::Holographic::IHolographicViewHostItemLedgerPrivate>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicViewHostItemHistory,Windows::Internal::ComposableShell::Core::IViewProvider,CloakedIid<Windows::Internal::Shell::Holographic::IHolographicViewHostItemLedgerPrivate>,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CWRLObjectWithSite,Windows::Internal::Shell::Experience::IStartExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IDWMStoryboardListener> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CWRLObjectWithSite,Windows::Internal::Shell::Experience::IStartExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IDWMStoryboardListener> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IVirtualDesktopManagerPrivate,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IVirtualDesktopManagerInternal3,IVirtualDesktopManagerInternal2,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ISuspendableVirtualDesktopManager,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IVirtualDesktopManagerPrivate,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IVirtualDesktopManagerInternal3,IVirtualDesktopManagerInternal2,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ISuspendableVirtualDesktopManager,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,IImmersiveApplicationManager,IImmersiveShellHookNotification,IImmersiveApplicationArrayService,IImmersiveApplicationArrayService2,IImmersiveApplicationVisibilityOverride,IIAMServiceProvider,ISpecialWindowMessageCallback,IImmersiveMonitorNotification,IApplicationManagerViewPosition,IImmersiveApplicationNotificationService,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,IImmersiveApplicationManager,IImmersiveShellHookNotification,IImmersiveApplicationArrayService,IImmersiveApplicationArrayService2,IImmersiveApplicationVisibilityOverride,IIAMServiceProvider,ISpecialWindowMessageCallback,IImmersiveMonitorNotification,IApplicationManagerViewPosition,IImmersiveApplicationNotificationService,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CWRLObjectWithGITSite,IImmersiveApplication,IImmersiveApplication2,IImmersiveApplicationHolographic,IImmersiveApplicationInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Desktop::ViewManagerInterop::ObjectWithVisibility,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithIamLock>,IServiceProvider> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CWRLObjectWithGITSite,IImmersiveApplication,IImmersiveApplication2,IImmersiveApplicationHolographic,IImmersiveApplicationInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Desktop::ViewManagerInterop::ObjectWithVisibility,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithIamLock>,IServiceProvider> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IControlCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IControlCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::ShellFeeds::IShellFeedsDesktopNotifications,TwinUI::ShellFeeds::IShellFeedsDesktopExperienceView,IImmersiveWindowMessageNotification,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::ShellFeeds::IShellFeedsDesktopNotifications,TwinUI::ShellFeeds::IShellFeedsDesktopExperienceView,IImmersiveWindowMessageNotification,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ViewWrapperBase,ILegacyViewWrapper> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ViewWrapperBase,ILegacyViewWrapper> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Internal::UserActivities::IUserActivityMonitor,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataBroker,Windows::Internal::Data::Activities::ITaskDataCacheBroker,Windows::Internal::Data::Activities::ISetActivityMonitor,CImmersiveShellComponentWithGITSite,ICDPUserActivitySettingsCallback,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Internal::UserActivities::IUserActivityMonitor,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataBroker,Windows::Internal::Data::Activities::ITaskDataCacheBroker,Windows::Internal::Data::Activities::ISetActivityMonitor,CImmersiveShellComponentWithGITSite,ICDPUserActivitySettingsCallback,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IToastCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable,Windows::Internal::Shell::Holographic::IHolographicExperienceExtension,IInputHostLayoutChanges> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IToastCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable,Windows::Internal::Shell::Holographic::IHolographicExperienceExtension,IInputHostLayoutChanges> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperiencePositioner,TwinUI::Cortana::ISearchAppDesktopNotifications,TwinUI::Cortana::ISearchAppExperienceView,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperiencePositioner,TwinUI::Cortana::ISearchAppDesktopNotifications,TwinUI::Cortana::ISearchAppExperienceView,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,IApplicationViewBackedViewHostItemPrivate,IImmersiveApplicationPresentationListener,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,IApplicationViewBackedViewHostItemPrivate,IImmersiveApplicationPresentationListener,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,Windows::Internal::Shell::Holographic::IPortableViewHostItem,IApplicationViewBackedViewHostItemPrivate,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,Windows::Internal::Shell::Holographic::IPortableViewHostItem,IApplicationViewBackedViewHostItemPrivate,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase> *,unsigned long *,_GUID * *);
			};

			class RuntimeClassImpl<RuntimeClassFlags<10>,1,0,0,CImmersiveShellComponentWithSite,IImmersiveShellStressTool>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<10>,1,0,0,IShellPositionerProxy>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ChainInterfaces<IWindowingEnvironmentSettingsInternal,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ChainInterfaces<IWindowingEnvironmentSettingsInternal,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,FtmBase,Windows::Internal::Shell::CustomShell::ICustomShellExperienceRepository>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,FtmBase,Windows::Internal::Shell::CustomShell::ICustomShellExperienceRepository>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,FtmBase,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,FtmBase,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,FtmBase>
			{
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IApplicationViewIconLoader,FtmBase> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IApplicationViewIconLoader,FtmBase> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IIconLoaderInternal> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IIconLoaderInternal> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IIconLoaderInternal> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IIconLoadingFunctions,FtmBase> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IIconLoadingFunctions,FtmBase> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IUnknown> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IUnknown> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<RuntimeClassFlags<2>,IUnknown> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<Windows::Foundation::Collections::IVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IObservableVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<Windows::Foundation::Collections::IVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IObservableVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForNavigationRequest>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForNavigationRequest>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSelectTargetView>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSelectTargetView>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsStandalone,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnironmentSettingsArgsForImplicitEvent>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsStandalone,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnironmentSettingsArgsForImplicitEvent>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsViewMode,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnironmentSettingsArgsForImplicitEvent>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForShowAsViewMode,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnironmentSettingsArgsForImplicitEvent>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSwitch>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgsForSwitch>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewPropertyChangedArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IViewPropertyChangedArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettingsArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettingsArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewEventArgsBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewHostItemEventArgsBase,Windows::Internal::Shell::Holographic::IViewHostItemPropertyChangedArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewHostItemEventArgsBase,Windows::Internal::Shell::Holographic::IViewHostItemPropertyChangedArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewHostItemEventArgsBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,ViewHostItemEventArgsBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::IAppDisplayInfo,Windows::Internal::Extensions::ApplicationModel::IInternalAppInfo,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::IAppDisplayInfo,Windows::Internal::Extensions::ApplicationModel::IInternalAppInfo,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::IAppInfo,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::IAppInfo,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::ComposableShell::ITreeNode *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::ComposableShell::ITreeNode *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::ComposableShell::Tabs::ShellTab *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::ComposableShell::Tabs::ShellTab *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Shell::Chaining::IChainLink *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Shell::Chaining::IChainLink *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<unsigned int>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<unsigned int>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::ITreeNode *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::ITreeNode *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Tabs::ShellTab *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Tabs::ShellTab *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::Chaining::IChainLink *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::Chaining::IChainLink *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption>,Windows::Foundation::Collections::IIterable<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption>,Windows::Foundation::Collections::IIterable<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::IIterable<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::IIterable<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<unsigned int>,Windows::Foundation::Collections::IIterable<unsigned int>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<unsigned int>,Windows::Foundation::Collections::IIterable<unsigned int>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorChangedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorChangedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::ITreeNode *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::ITreeNode *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Tabs::ShellTab *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Tabs::ShellTab *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::Chaining::IChainLink *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::Chaining::IChainLink *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption>,Windows::Foundation::Collections::IIterable<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption>,Windows::Foundation::Collections::IIterable<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::IIterable<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::IIterable<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<unsigned int>,Windows::Foundation::Collections::IIterable<unsigned int>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<unsigned int>,Windows::Foundation::Collections::IIterable<unsigned int>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Tabs::ITabDroppedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Tabs::ITabDroppedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Tabs::ITabViewProvidedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Tabs::ITabViewProvidedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Tabs::ITabWindowSnappedWithOthersEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Tabs::ITabWindowSnappedWithOthersEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Tabs::IViewTabEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::Tabs::IViewTabEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::TreeNodeEventArgsBase,Windows::Internal::ComposableShell::INodeChangedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::ComposableShell::TreeNodeEventArgsBase,Windows::Internal::ComposableShell::INodeChangedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::FamilySafety::AppLimits::IAppUsageStateChangedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::FamilySafety::AppLimits::IAppUsageStateChangedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Notifications::IWpnAppInfoProvider,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Notifications::IWpnAppInfoProvider,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Notifications::IWpnToastActivator,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Notifications::IWpnToastActivator,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Chaining::IChainLinkEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Chaining::IChainLinkEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Desktop::ViewManagerInterop::IVisibilityChangedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Desktop::ViewManagerInterop::IVisibilityChangedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::ICortanaShownEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::ICortanaShownEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IJumpViewExperienceEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IJumpViewExperienceEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::TaskFlow::DataEngine::ISnapSignalData>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::TaskFlow::DataEngine::ISnapSignalData>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::UI::Internal::ViewManagement::IApplicationViewTabInsertionContext,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::UI::Internal::ViewManagement::IApplicationViewTabInsertionContext,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,wil::details::IEventInvocationContext,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,wil::details::IEventInvocationContext,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,wil::details::IEventInvocationContextProvider,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,wil::details::IEventInvocationContextProvider,FtmBase>();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,AccessibleElementBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CCommonApplicationViewArrangePositionImpl,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CCommonApplicationViewOcclusionPositionImpl,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CCommonApplicationViewPositionImpl,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CIAMSpecialWindowBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,ChainInterfaces<IDesktopPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IDragDropViewCreationHandler,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,ChainInterfaces<IKioskPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IPositionerApplicationClosePolicy,IApplicationViewChangeListener,IInternalFullScreenHandler,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,ChainInterfaces<ISurfaceHubPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,ChainInterfaces<IVoiceAssistantPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IInputHostLayoutChanges,IAppSwitcherNotification,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IActivationHints,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IAppLayoutCacheInternal,IAppLayoutCache,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,ICustomShellManager,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IDesktopVisibilityService,IFullScreenPositionerNotification,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IEmulatedFullScreenManager,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IRemoteLauncherForegroundHandler,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IViewPresentationMediator,IPrivilegedOperationsConsumer,IWindowManagementShowMoveSizeEvents,IWindowManagementChannelSeverEvents,IWindowManagementWindowGroupingEvents,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ChainInterfaces<ITabletModePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabletModePositionerInternal,ITabletModePositionerPriv,IStartDismissalPolicy,IShellPositionerViewHandoff,IApplicationViewChangeListener,ITabletModeChangeListener,IImmersiveMonitorNotification,Implements<RuntimeClassFlags<2>,IShellPositionerWindowingDelegationHandler,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification,IShellTargetingChangeNotification,IFullScreenPositionerPrivateNotification,ITransitionNotification> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ChainInterfaces<ITabletModePositionerManagerPriv,ITabletModePositionerManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWindowManagementShowMoveSizeEvents>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ChainInterfaces<ITabletModeViewManagerInternal,ITabletModeViewManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IEdgeUiTouchInvocation,IEdgeUiMouseInvocation>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IAppTransitionManager,IAppTransitionTargetManagerSink,IApplicationViewChangeListener>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IFullScreenManager,IFullScreenManagerPriv,IFullScreenNotificationService,IFullScreenPositionerNotification,IImmersiveMonitorNotification,IPrivilegedOperationsConsumer>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IMultitaskingViewServiceProvider,IMultitaskingViewTaskScheduler>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IPeoplePaneViewManager,IPeopleExperienceHostManager,IApplicationViewChangeListener,ITabletModeChangeListener>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IPerMonitorShellPositionerManager>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IShellPositionerManager,IApplicationViewChangeListener,ITabletModeChangeListener,IShellPositionerActivationHandler,IShellPositionerFrameworkViewTypeChangedHandler,IShellPositionerPresentationRequestedHandler>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ISwitchController>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IWindowManagementJointResizeEvents,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,IImmersiveRawInputKeyboardNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IWindowSizeConversionLogicalClientToWindow,IImmersiveMonitorNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewButtonElement,IGlyphButton>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewButtonElement>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewControllerBase,ISnapAssistViewController>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewControllerBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewElementBase,ChainInterfaces<IAnimatableScrollViewer,IScrollViewer,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewElementBase,IGlyphButtonHost,IScrollButtonContainer>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewElementBase,IMultitaskingViewElementRoot,IFrameElement,IInputEaterElementNotifications,IMultitaskingViewDragProvider,ILightDismissElementHost>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewElementBase,IObservableObjectArrayChanged,IVirtualDesktopContainerElement,IScrollableElement>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewElementBase,IScrollButtonContainerHost>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewElementBase,ISwitchItemGrid,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,IMultitaskingViewTelemetryHost,IScrollableElement>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewElementBase,IVirtualDesktopBarElement>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewElementBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewHostBase<IAllUpViewHost>,IXamlViewHost,IAllUpViewHostInternal,ITabletModeChangeListener,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewHostBase<IAltTabViewHost>,IAltTabViewHostInternal>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewHostBase<IAltTabViewHost>,IXamlViewHost>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewHostBase<IPPIAllUpViewHost>,IExternalDragHost>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewHostBase<ISnapAssistViewHost>,IInvocationAnimationHost,IAnimatedDismissableHost,IDismissalAnimationHost,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CMultitaskingViewHostBase<ISnapAssistViewHost>,IXamlViewHost>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CShrinkButtonElement,IMultitaskingViewDragSource,ISwitchItemThumbnailElement>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLExecuteCommandBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,ChainInterfaces<IApplicationFrameServiceTestability,IApplicationFrameService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IApplicationFrameEventHandler,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,FtmBase,ITabletModeCoverWindow,ITabletModeChrome>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,IDefaultLaunchPositionOverride>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IAppResizeOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IAppSwitchOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IBackOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IDesktopOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IPPILayoutOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<ITabletModePositionerOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IWindowArrangementOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,CIAMSpecialWindowBase,IFallbackWindow,IImmersiveMonitorNotification,IRawElementProviderSimple,IInvokeProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,ChainInterfaces<IAppResizeDataInternal,IAppResizeData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,ChainInterfaces<IPlaceModeData,IDragData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IAllUpViewService,IEdgeUiTouchInvocation,IAllUpViewInvoker>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IAppResizeView,ITabletModeInputCallback,IApplicationViewChangeListener>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IDragVisual,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IDropFeedback,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IExecuteCommand,IObjectWithSelection>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IImmersiveCharmsWindowManager,ICharmWindowManagerInternal>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IPPIAllUpViewService,IPPIAllUpViewInvoker>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,ITabletModeChrome>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,ITabletModeChromeManager>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IVisibilityOverride,IImmersiveSessionIdleNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IWindowArrangementView,ITabletModeInputCallback,IApplicationViewChangeListener,IDragVisualHost,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IXamlLauncherState,IImmersiveLauncherCortana,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,Implements<RuntimeClassFlags<2>,IImmersiveLauncher,IImmersiveLauncherTrayNotify,IImmersiveShellHookNotification,IServiceProvider,IImmersiveShellComponent,IImmersiveLauncherCortana,IXamlLauncherStateCallback,IPrivilegedOperationsConsumer> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,Implements<RuntimeClassFlags<2>,IImmersiveMonitorNotification,IActiveZBandNotificationForMonitor> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IAnimatableMultitaskingViewFrame,IMultitaskingViewFrame,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IMultitaskingViewElementEvents,IFrameTestHooks>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IAnimatableMultitaskingViewFrame,IMultitaskingViewFrame,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IMultitaskingViewElementEvents,IFrameTestHooks>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IAppTransitionTargetManager,ITaggableTarget,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,CWRLObjectWithSite>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IApplicationViewVisibilityDebouncedNotificationServicePrivate,IApplicationViewVisibilityDebouncedNotificationService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IApplicationViewChangeListener,IApplicationViewCollection,IApplicationViewCollectionTestHook,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IDropFeedbackItem,ITemporaryAppVisual,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveApplicationNotification,IDropFeedbackItemInternal>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IDropFeedbackItem,ITemporaryAppVisual,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveApplicationNotification,IDropFeedbackItemInternal>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IImmersiveApplicationArrayPrivate,IImmersiveApplicationArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveApplicationArray2>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IPWSLayoutItemInternal,IPenWorkspaceLayoutItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ITaskbarLayoutItemInternal,ITaskbarLayoutItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ITaskbarLayoutParserTest,IPWSLayoutParser,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ITaskbarLayoutParserTest,ITaskbarLayoutParser,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ITemporaryAppVisualArray,IObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ITemporaryAppVisualArray,IObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IVirtualDesktopAnimationSyncNotificationServicePrivate,IVirtualDesktopAnimationSyncNotificationService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IVirtualDesktopPersistence2,IVirtualDesktopPersistence,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IVirtualDesktopPinnedAppsPrivate,IVirtualDesktopPinnedApps,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IVirtualDesktopTabletModePolicy,IVirtualDesktopTabletModePolicyService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IXamlExplorerHostWindowInternal,IXamlExplorerHostWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ImmersiveShellComponentCreator,IImmersiveComponentCreator,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<VirtualDesktopNotificationBase<IVirtualDesktopNotification2>,IVirtualDesktopNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IVirtualDesktopAccessibility,IVirtualDesktopAccessibilityInternal,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CopyToViewValueSetBase,IOleWindow,IShouldSwitchToDesktop>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IWindowingEnvironmentManager,IWindowingEnvironmentManagerInternal>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IApplicationViewCollectionManagement,IApplicationViewCollection,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IApplicationViewCollectionTestHook,IApplicationViewSwitcher,IApplicationViewFlashingNotification,IPrivilegedOperationsConsumer,IWindowManagementConstraintsEvents,IImmersiveApplicationNotification,IEnterpriseIdChangeNotification,IApplicationViewStateControl,IWindowOccludedChangeListener> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,IApplicationActivationHistory,IImmersiveWindowManager,IImmersiveMonitorNotification,IImmersiveWindowManagerInternal,IObjectProvider,IPresentedWindowOverride> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,IActiveZBand,IImmersiveSystemMode,IImmersiveSystemModeInternal,IActiveZBand,IImmersiveSystemModeNotificationServicePrivate,IActiveZBandNotificationServicePrivate,Implements<RuntimeClassFlags<2>,IImmersiveMonitorNotification,IDesktopVisibilityService,IDesktopVisibilityChangesNotification> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,IClassicWindowManagerPrivate,IApplicationActivationHistory,IClassicWindowManager,IClassicWindowPresentation,IClassicWindowCollectionRefresh,ITaskListChangeListener,IClassicWindowOwnershipQuery>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,IRotationManagerSync,IShellRotationManager>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,Implements<RuntimeClassFlags<2>,IRealmActivationHistory,IRealmActivationHistoryInternal> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,ChainInterfaces<IAppViewManagerInternal,IAppViewManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IProjectionViewHelper,IImmersiveApplicationNotification,IDragViewEventHandler,IAppSwitcherNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IAppLayoutInternal,ChainInterfaces<IAppLayoutBuilder,IAppLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IApplicationFrameFactory>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IApplicationFrameWrapper>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IDiscoverRecentItem>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IImmersiveApplicationTransitionHelper>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IImmersiveApplicationWindow>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IImmersiveShellCreationBehavior>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IMultitaskingViewTaskCallback>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IObjectArray>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IPenWorkspaceDiscoverBroker,IImmersiveShellComponent,IWindowManagementInputUsageEvents>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IPenWorkspaceScreenCaptureBroker>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IShellPositionerPriority,IShellPositionerPriorityPersistence>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,ITrustedComponentForegroundControl>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IWindowingEnvironmentConfig,IWindowingEnvironmentConfigInternal>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IXamlExplorerHostWindowCreatedCallback>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,HotTrackingElement,IMultitaskingViewGridElement,ISwitchItemElement,IGlyphButtonHost>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppLayoutAnimationData>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppLayoutAnimationData>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppLayoutItemEnum>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppLayoutItemEnum>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppLayoutItemInternal,ChainInterfaces<IAppLayoutItemBuilder,IAppLayoutItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppLayoutItemInternal,ChainInterfaces<IAppLayoutItemBuilder,IAppLayoutItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppLayoutOperationItem>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppLayoutOperationItem>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppSizeConstraintsCache>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IApplicationPresentationLayer,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IApplicationViewBroker>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IApplicationViewChangeListener,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IApplicationViewIconLoaderNotifications>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IApplicationViewIconLoaderNotifications>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IApplicationViewTitlebarConfiguration,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAsyncCallback,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAsyncCallback>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAsyncCallbackDispatcher>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IClassicWindow>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IClassicWindowExternal,IClassicWindowContainer,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ICreationThreadDispatcher,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDCompBatchAnimationCallback>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDCompBatchAnimationCallback>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDelayedAppActivation,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDesktopVisibilityChangesNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDropFeedbackArray>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDropFeedbackArray>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IElementFactory>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IElementFactory>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IExternalDragCallback>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IExternalDragCallback>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IForegroundStagingWindow>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IForegroundStagingWindow>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IGITCookieObject,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IGhostDivider>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IGhostDivider>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IHolographicViewTransitionNotification,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveApplication>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveComponentCreator>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveMonitorNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveSessionIdleNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveShellBuilder>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveShellComponent,IClassFactory>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveShellHookNotification,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IIndividualExperienceManagerFactory,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IIndividualExperienceManagerFactory,ICompositeExperienceManagerFactory,FtmBase>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ILambda>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ILaunchTargetMonitor,IServiceProvider,CWRLObjectWithGITSite>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ILaunchUIContext,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ILockScreenDirectorServiceProvider,CImmersiveShellComponentWithGITSite>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMessageProxyReconnectAdapter,IMessageProxyListener>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMessageProxyReconnectAdapterOwner,IRemoteTabTipAdapter>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingData>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingData>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewDragData>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewDragData>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewDragVisual>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewDragVisual>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewGestureHandler,ITouchpadGesture>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewGestureHandler,ITouchpadGesture>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewGestureState,IMultitaskingViewGestureStateInternal,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewHotKeyHandler,IImmersiveWindowMessageNotification>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewHotKeyHandler,IImmersiveWindowMessageNotification>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewManager,IMultitaskingViewManagerInternal,IMultitaskingViewDismissCallback,IMultitaskingViewForegroundStaging>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewManager,IMultitaskingViewManagerInternal,IMultitaskingViewDismissCallback,IMultitaskingViewForegroundStaging>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMultitaskingViewVisibilityService,IMultitaskingViewVisibilityServiceInternal,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,INotificationCB>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IObjectArray,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IObservableObjectArrayChanged>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IObservableObjectArrayChanged>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IObservableObjectArrayChangedBeginEnd>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IObservableObjectArrayChangedBeginEnd>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IObservablePropertyCallback>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IObservablePropertyCallback>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IOleWindow>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPersist,IOleWindow>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPersist,IOleWindow>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPositionAdjustmentHistory,IPositionAdjustmentHistoryTestHook>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPositionAdjustmentHistory,IPositionAdjustmentHistoryTestHook>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPrivilegedArrangementOperations,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPrivilegedDesktopOperations,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPrivilegedForegroundOperations,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPrivilegedHotkeyOperations,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPrivilegedNotificationOperations,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPrivilegedPresentationOperations,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPrivilegedSizeConstraintsOperations,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPrivilegedTabletModeOperations,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPrivilegedWindowGroupingOperations,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPrivilegedWindowOwnershipOperations,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IDragProvider,IAppResizeAcc>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IDragProvider,IAppResizeAcc>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IDragProvider,IJointResizeAcc>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IDragProvider,IJointResizeAcc>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IRawElementProviderFragment,IInvokeProvider,IPlaceModeButtonAcc>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IRawElementProviderFragment,IInvokeProvider,IPlaceModeButtonAcc>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IRawElementProviderFragment,IRawElementProviderFragmentRoot,ICoverWindowAcc>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IRawElementProviderFragment,IRawElementProviderFragmentRoot,ICoverWindowAcc>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IRawElementProviderFragment,IRawElementProviderFragmentRoot,IDragProvider,IDragVisualAcc>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IRawElementProviderFragment,IRawElementProviderFragmentRoot,IDragProvider,IDragVisualAcc>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRemoteEyeControlManager>
			{
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IScreenManager,IAppViewCloseOverrideBehavior,ITabletModePositionerManagerNotification,IApplicationViewChangeListener,IScreenManagerTestHook>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IScreenManager,IAppViewCloseOverrideBehavior,ITabletModePositionerManagerNotification,IApplicationViewChangeListener,IScreenManagerTestHook>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IServiceProvider,IUpdateViewValueSet,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IShellPositionerCallback,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISwitchItemController>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISwitchItemController>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISwitchItemFactory>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISwitchItemFactory>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabShellHotKeyHandler,IImmersiveWindowMessageNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabTransferManager,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabletModeChangeListener>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabletModeChangeListener>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabletModeInputHandler>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabletModeInputHandler>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabletModeInputSource>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabletModeInputSource>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabletModePositionerHandoffContext>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabletModePositionerHandoffContext>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabletModeViewManagerProxy,ITabletModeViewManager>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITabletModeViewManagerProxy,ITabletModeViewManager>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITaggableTarget,CWRLObjectWithSite>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITemporaryAppVisual>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITemporaryAppVisual>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IThumbnailDeviceSource,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITimerLambda>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITouchpadGesture,ChainInterfaces<IVirtualDesktopGestureHandlerPrivate,IVirtualDesktopGestureHandler,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITouchpadGesture,ChainInterfaces<IVirtualDesktopGestureHandlerPrivate,IVirtualDesktopGestureHandler,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUIAnimationStoryboardEventHandler2>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUIAnimationStoryboardEventHandler2>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUnknown,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUnknown>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IViewManagerBridge,IMessageProxyListener,IMessageListListener,IMessageMapListener,Navigation::Server::IShellViewManagerListener,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopAnimationNotificationInstance>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopCollection>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopDefaultForegroundHandler>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopFactory>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopForegroundPolicy>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopHotkeyHandler>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopItemFactory>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopItemFactory>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopLock>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopManager,IVirtualDesktopsApiInternal,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopRegistryHelpers>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopSwitchAnimator>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopThumbnailWindowFilter,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopThumbnailWindowFilter,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopVisibilityPolicy>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IVirtualDesktopWindowMoveManager,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IWeakReference>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IWindowManagerBridge,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,IPenWorkspaceLayoutPolicyManager> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,ITaskbarLayoutPolicyManager> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::IAsyncActionCompletedHandler,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<IInspectable *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,IInspectable *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewActivationRequestedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewActivationShowRequestedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewApplyWindowingEnvironmentSettingsRequestedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewChangedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewClearPersistedStateRequestedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewConsolidateRequestedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewExecutionStateChangedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewShowRequestedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewSwitchRequestedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewUniversalPropertyChangedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::AppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::AppViewVisibilityChangedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::WindowWatcher *,IInspectable *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ApplicationModel::WindowManagement::WindowWatcher *,Windows::Internal::ApplicationModel::WindowManagement::WindowChangedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::ITreeNode *,Windows::Internal::ComposableShell::ITreeNodeEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerCancellableEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerMenuItemsRequestedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerRectEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerThumbnailEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabController *,Windows::Internal::ComposableShell::Tabs::TabControllerViewEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabHostedAppChangedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabSetMediator *,Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabViewProvidedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::System::Threading::ITimerElapsedHandler,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ItemAnimationCoordinatorBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,KeyboardHosting::IPositionAndSizeOptionsProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,KeyboardHosting::IViewRectProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ObservableItem,ChainInterfaces<IVirtualDesktopItemInternal,IVirtualDesktopItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ObservableItem,ISwitchItem,ISwitchItemInternal>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ObservableObjectArray,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,ChainInterfaces<ISwitchItemFilteredCollection,IObservableObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ObservableObjectArray,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,SnapAssistViewAnimationCoordinatorBase<MultitaskingViewDismissalAnimationCoordinator> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,SnapAssistViewAnimationCoordinatorBase<MultitaskingViewInvocationAnimationCoordinator> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,VirtualDesktopNotificationForwarderHelper<CVirtualDesktopNotifications> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,WeakReference::IWeakReference>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,WeakReference::IWeakReference>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncActionCompletedHandler,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Devices::Lights::LampArray *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Shell::Experience::TitleBarFactory *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Storage::Streams::IRandomAccessStream *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IEventHandler<IInspectable *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher *,Windows::Devices::Enumeration::DeviceInformation *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher *,Windows::Devices::Enumeration::DeviceInformationUpdate *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *> >
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *> >();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::ShellExperienceDispatcher *,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,int> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerBottomEdgeCandidateWindowAlignmentChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerCoreKeyboardClientRegisteredEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlEmbeddedHandwritingViewEnabledSettingChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlEmbeddedHandwritingViewVisibleSettingChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlFocusChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlInputScopeChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlLineTypeChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlManualInputPaneSettingChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlPositionChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlReadOnlySettingChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerEditControlSelectionChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerHardwareKeyboardPresenceChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerHardwareKeyboardTextIntelligenceEnabledChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerHardwareKeyboardUIEnabledChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppRequestedHideEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppRequestedResizeEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputAppRequestedShowEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputPaneTryHideRequestedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerInputPaneTryShowRequestedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerPrimaryViewHidingResponseEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::CoreKeyboardManager *,Windows::UI::Internal::Text::Core::CoreKeyboardManagerPrimaryViewShowingResponseEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::UI::Internal::Text::Core::ICoreTextPropertyBag *,Windows::UI::Internal::Text::Core::CoreTextPropertyBagPropertyValueChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::FamilySafety::AppLimits::IAppStateManager,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::FamilySafety::AppLimits::IAppUsageTracker,IApplicationViewChangeListener,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::IComPoolTask>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ISelectionDataParser>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,AppViewDataSourceAdapterBase,IAppViewDataSourceAdapter,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,AppViewDataSourceAdapterBase,IAppViewDataSourceAdapter,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CApplicationViewBase,IWin32ApplicationView,IAppSizeConstraintsCallback,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CApplicationViewBase,IWin32ApplicationView,IAppSizeConstraintsCallback,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CApplicationViewBase,IWinRTApplicationView,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CApplicationViewBase,IWinRTApplicationView,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IAcrylicPolicyManager,IImmersiveWindowMessageNotification,IBatterySaverStateChangedHandler,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IAcrylicPolicyManager,IImmersiveWindowMessageNotification,IBatterySaverStateChangedHandler,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveWindowMessageNotification,ITouchKeyboardExperienceManager,ITabletModeChangeListener,IApplicationStateChangeHandler,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveWindowMessageNotification,ITouchKeyboardExperienceManager,ITabletModeChangeListener,IApplicationStateChangeHandler,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IWnfCallback,IEyeControlAdapterOwner,IEyeControlManager,IInputDeviceWatcherOwner,IPrivilegedOperationsConsumer,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IWnfCallback,IEyeControlAdapterOwner,IEyeControlManager,IInputDeviceWatcherOwner,IPrivilegedOperationsConsumer,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,ITabViewManager,ITabDragHandler,ITabGroupManager,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,ITabViewManager,ITabDragHandler,ITabGroupManager,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,ICortanaStoreAppExperienceManager,IImmersiveLayoutChanges,IInputHostLayoutChanges,IPrivilegedOperationsConsumer>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,ICortanaStoreAppExperienceManager,IImmersiveLayoutChanges,IInputHostLayoutChanges,IPrivilegedOperationsConsumer>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::RetailDemo::IRetailDemoExperienceManager,IPrivilegedOperationsConsumer,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::RetailDemo::IRetailDemoExperienceManager,IPrivilegedOperationsConsumer,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IXamlExplorerHost,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IXamlExplorerHost,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IHolographicPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInternalFullScreenHandler,IHolographicViewManager,IHolographicViewTransitionNotificationService,Windows::Internal::Shell::Holographic::IHolographicViewHostItemSource>,Implements<RuntimeClassFlags<3>,CloakedIid<IShellPositionerViewHandoff>,CloakedIid<ITabbingAwarePositioner>,CloakedIid<IApplicationViewChangeListener> > >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IHolographicPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInternalFullScreenHandler,IHolographicViewManager,IHolographicViewTransitionNotificationService,Windows::Internal::Shell::Holographic::IHolographicViewHostItemSource>,Implements<RuntimeClassFlags<3>,CloakedIid<IShellPositionerViewHandoff>,CloakedIid<ITabbingAwarePositioner>,CloakedIid<IApplicationViewChangeListener> > >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::ComposableShell::Tabs::ITabSetMediator,IWindowSnappingEvents,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::ComposableShell::Tabs::ITabSetMediator,IWindowSnappingEvents,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::FamilySafety::AppLimits::IFamilyAppUsageManager,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::FamilySafety::AppLimits::IFamilyAppUsageManager,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicForegroundAssistant,IPrivilegedOperationsConsumer,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicForegroundAssistant,IPrivilegedOperationsConsumer,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicViewHostItemHistory,Windows::Internal::ComposableShell::Core::IViewProvider,CloakedIid<Windows::Internal::Shell::Holographic::IHolographicViewHostItemLedgerPrivate>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicViewHostItemHistory,Windows::Internal::ComposableShell::Core::IViewProvider,CloakedIid<Windows::Internal::Shell::Holographic::IHolographicViewHostItemLedgerPrivate>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithSite,ChainInterfaces<IFullScreenPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IActiveZBandNotificationForMonitor,IApplicationViewChangeListener,ITabletModeChangeListener,IFullScreenPositionerNotificationService,IFullScreenPositionerTestHandler,ITransitionStateChangeHandler,IPrivilegedOperationsConsumer>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithSite,ChainInterfaces<IFullScreenPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IActiveZBandNotificationForMonitor,IApplicationViewChangeListener,ITabletModeChangeListener,IFullScreenPositionerNotificationService,IFullScreenPositionerTestHandler,ITransitionStateChangeHandler,IPrivilegedOperationsConsumer>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveWindowFactoryBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveWindowFactoryBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CWRLObjectWithSite,Windows::Internal::Shell::Experience::IStartExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IDWMStoryboardListener>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CWRLObjectWithSite,Windows::Internal::Shell::Experience::IStartExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IDWMStoryboardListener>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IApplicationFrameProxy,IApplicationFrame,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IApplicationFrameProxy,IApplicationFrame,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IViewGroupInternal,IViewGroup,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITitleBarRecovery,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IViewGroupInternal,IViewGroup,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITitleBarRecovery,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IViewGroupManagerInternal,IViewGroupManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITitleBarRecovery,IWindowManagementWindowGroupingEvents,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IViewGroupManagerInternal,IViewGroupManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITitleBarRecovery,IWindowManagementWindowGroupingEvents,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IVirtualDesktop2,IVirtualDesktop,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IVirtualDesktopPrivate,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IVirtualDesktop2,IVirtualDesktop,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IVirtualDesktopPrivate,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IVirtualDesktopManagerPrivate,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IVirtualDesktopManagerInternal3,IVirtualDesktopManagerInternal2,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ISuspendableVirtualDesktopManager,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IVirtualDesktopManagerPrivate,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IVirtualDesktopManagerInternal3,IVirtualDesktopManagerInternal2,IVirtualDesktopManagerInternal,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ISuspendableVirtualDesktopManager,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,IImmersiveApplicationManager,IImmersiveShellHookNotification,IImmersiveApplicationArrayService,IImmersiveApplicationArrayService2,IImmersiveApplicationVisibilityOverride,IIAMServiceProvider,ISpecialWindowMessageCallback,IImmersiveMonitorNotification,IApplicationManagerViewPosition,IImmersiveApplicationNotificationService,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,IImmersiveApplicationManager,IImmersiveShellHookNotification,IImmersiveApplicationArrayService,IImmersiveApplicationArrayService2,IImmersiveApplicationVisibilityOverride,IIAMServiceProvider,ISpecialWindowMessageCallback,IImmersiveMonitorNotification,IApplicationManagerViewPosition,IImmersiveApplicationNotificationService,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CWRLObjectWithGITSite,IImmersiveApplication,IImmersiveApplication2,IImmersiveApplicationHolographic,IImmersiveApplicationInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Desktop::ViewManagerInterop::ObjectWithVisibility,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithIamLock>,IServiceProvider>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CWRLObjectWithGITSite,IImmersiveApplication,IImmersiveApplication2,IImmersiveApplicationHolographic,IImmersiveApplicationInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Desktop::ViewManagerInterop::ObjectWithVisibility,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithIamLock>,IServiceProvider>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,IScreenClippingBroker>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,IScreenClippingBroker>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IApplicationViewIconLoaderNotifications>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IApplicationViewIconLoaderNotifications>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IApplicationViewOperation,Windows::Internal::ComposableShell::Tabs::IApplicationViewTabOperation,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IApplicationViewOperation,Windows::Internal::ComposableShell::Tabs::IApplicationViewTabOperation,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveWindowMessageNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveWindowMessageNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,IPresentationRequestedArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,IPresentationRequestedArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,IInputHostLayoutChanges>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,IInputHostLayoutChanges>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IActionCenterExperienceManager,IEdgeUiInvocation,IEdgeUiTouchInvocation,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IActionCenterExperienceManager,IEdgeUiInvocation,IEdgeUiTouchInvocation,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IControlCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IControlCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IQuickConnectExperienceManager>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,Windows::Internal::Shell::Experience::IQuickConnectExperienceManager>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IObjectProvider,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IObjectProvider,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ITabViewManager>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ITabViewManager>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ITaskWindow>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ITaskWindow>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ITitleBarController,IImmersiveShellHookNotification,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ITitleBarController,IImmersiveShellHookNotification,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IWindowGroup,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IWindowGroup,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IWindowGroupManager,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IWindowGroupManager,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ObservableObjectArray,IApplicationViewChangeListener,ISwitchItemCollection>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ObservableObjectArray,IApplicationViewChangeListener,ISwitchItemCollection>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::Cortana::ICortanaExperienceManagerNotification,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::Cortana::ICortanaExperienceManagerNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::Cortana::ISearchAppExperienceManagerNotification,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::Cortana::ISearchAppExperienceManagerNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::ShellFeeds::IShellFeedsDesktopNotifications,TwinUI::ShellFeeds::IShellFeedsDesktopExperienceView,IImmersiveWindowMessageNotification,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::ShellFeeds::IShellFeedsDesktopNotifications,TwinUI::ShellFeeds::IShellFeedsDesktopExperienceView,IImmersiveWindowMessageNotification,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ViewWrapperBase,ILegacyViewWrapper>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ViewWrapperBase,ILegacyViewWrapper>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ViewWrapperBase,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ViewWrapperBase,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,WindowWrapperBase,ILegacyViewWrapper>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,WindowWrapperBase,ILegacyViewWrapper>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,WindowWrapperBase,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,WindowWrapperBase,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Activation::ISplashScreen,ISplashScreen,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Activation::ISplashScreen,ISplashScreen,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Internal::UserActivities::IUserActivityMonitor,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataBroker,Windows::Internal::Data::Activities::ITaskDataCacheBroker,Windows::Internal::Data::Activities::ISetActivityMonitor,CImmersiveShellComponentWithGITSite,ICDPUserActivitySettingsCallback,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Internal::UserActivities::IUserActivityMonitor,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataBroker,Windows::Internal::Data::Activities::ITaskDataCacheBroker,Windows::Internal::Data::Activities::ISetActivityMonitor,CImmersiveShellComponentWithGITSite,ICDPUserActivitySettingsCallback,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Foundation::IClosable,ILightDismissNotification,IImmersiveMonitorNotification,Windows::Internal::Shell::Experience::IInsightsExperienceManager>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Foundation::IClosable,ILightDismissNotification,IImmersiveMonitorNotification,Windows::Internal::Shell::Experience::IInsightsExperienceManager>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IIconFactory>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IIconFactory>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::ISwitchItemSort,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::ISwitchItemSort,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop,ChainInterfaces<VirtualDesktopNotificationBase<IVirtualDesktopNotification2>,IVirtualDesktopNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IVirtualDesktopInternal,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop,ChainInterfaces<VirtualDesktopNotificationBase<IVirtualDesktopNotification2>,IVirtualDesktopNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IVirtualDesktopInternal,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController2,IVirtualDesktopControllerInternal,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController2,IVirtualDesktopControllerInternal,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource,IDesktopVirtualDesktopDataSource,IVirtualDesktopDataSourceInternal,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource,IDesktopVirtualDesktopDataSource,IVirtualDesktopDataSourceInternal,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Tabs::IBrokeredTabAppPolicySettings,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Tabs::IBrokeredTabAppPolicySettings,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IToastCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable,Windows::Internal::Shell::Holographic::IHolographicExperienceExtension,IInputHostLayoutChanges>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IToastCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable,Windows::Internal::Shell::Holographic::IHolographicExperienceExtension,IInputHostLayoutChanges>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ICortanaExperienceManager,Windows::Foundation::IClosable,IInitializeTrustedComponentForegroundControl>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ICortanaExperienceManager,Windows::Foundation::IClosable,IInitializeTrustedComponentForegroundControl>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IHostExperienceManager,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IHostExperienceManager,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IImeStatusNotificationExperienceManager,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IImeStatusNotificationExperienceManager,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IJumpViewExperienceManager,IImmersiveMonitorNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveWindowMessageNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IJumpViewExperienceManager,IImmersiveMonitorNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveWindowMessageNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::INetworkFlyoutExperienceManager,Windows::Foundation::IClosable,IImmersiveWindowMessageNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::INetworkFlyoutExperienceManager,Windows::Foundation::IClosable,IImmersiveWindowMessageNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IPeopleBarFlyoutExperienceManager,ILightDismissNotification,Windows::Foundation::IClosable,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IPeopleBarFlyoutExperienceManager,ILightDismissNotification,Windows::Foundation::IClosable,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IPeopleBarJumpViewExperienceManager,ILightDismissNotification,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IPeopleBarJumpViewExperienceManager,ILightDismissNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IScreenClippingExperienceManager,Windows::Foundation::IClosable,IImmersiveWindowMessageNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IScreenClippingExperienceManager,Windows::Foundation::IClosable,IImmersiveWindowMessageNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperiencePositioner,TwinUI::Cortana::ICortanaDesktopNotifications,TwinUI::Cortana::ICortanaExperienceView,ILightDismissNotification,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,TwinUI::Cortana::ICortanaWNFNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperiencePositioner,TwinUI::Cortana::ICortanaDesktopNotifications,TwinUI::Cortana::ICortanaExperienceView,ILightDismissNotification,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,TwinUI::Cortana::ICortanaWNFNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperiencePositioner,TwinUI::Cortana::ISearchAppDesktopNotifications,TwinUI::Cortana::ISearchAppExperienceView,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperiencePositioner,TwinUI::Cortana::ISearchAppDesktopNotifications,TwinUI::Cortana::ISearchAppExperienceView,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInputHostLayoutChanges,TwinUI::Cortana::ICortanaWNFNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperienceView,TwinUI::Cortana::IShellExperienceViewLifetime>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperienceView,TwinUI::Cortana::IShellExperienceViewLifetime>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperienceView,TwinUI::ShellFeeds::IShellFeedsShellExperienceViewLifetime>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellExperienceView,TwinUI::ShellFeeds::IShellFeedsShellExperienceViewLifetime>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellFeedsExperienceManager,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShellFeedsExperienceManager,IImmersiveMonitorNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShoulderTapExperienceManager>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IShoulderTapExperienceManager>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITaskContinuityActivitiesExperienceManager,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITaskContinuityActivitiesExperienceManager,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IVirtualTouchpadExperienceManager,IApplicationFrameEventHandler,IScaleChangeSink,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IVirtualTouchpadExperienceManager,IApplicationFrameEventHandler,IScaleChangeSink,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,IApplicationViewBackedViewHostItemPrivate,IImmersiveApplicationPresentationListener,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,IApplicationViewBackedViewHostItemPrivate,IImmersiveApplicationPresentationListener,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,Windows::Internal::Shell::Holographic::IPortableViewHostItem,IApplicationViewBackedViewHostItemPrivate,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,Windows::Internal::Shell::Holographic::IPortableViewHostItem,IApplicationViewBackedViewHostItemPrivate,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,IApplicationViewChangeListener,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListener,IWindowSnappingEvents,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,IApplicationViewChangeListener,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListener,IWindowSnappingEvents,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,IImmersiveSessionIdleNotification,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,IImmersiveSessionIdleNotification,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,IImmersiveShellHookNotification,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListener,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,IImmersiveShellHookNotification,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeListener,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Text::IShellKeyboardHostingPolicy,KeyboardHosting::IDesktopKeyboardHostingPolicy,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Text::IShellKeyboardHostingPolicy,KeyboardHosting::IDesktopKeyboardHostingPolicy,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher,IWindowEventDispatcherInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,IWindowDispatcherConnectedStandby,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker,INtUserViewWrapperCollection>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher,IWindowEventDispatcherInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,IWindowDispatcherConnectedStandby,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker,INtUserViewWrapperCollection>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IWindowDispatcherConnectedStandby,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IWindowDispatcherConnectedStandby,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker>,FtmBase>();
			};

			class RuntimeClassImpl<RuntimeClassFlags<6>,0,0,0,IClassFactory,Nil,Nil,Nil,Nil>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<6>,0,0,0,IClassFactory,Nil,Nil,Nil,Nil>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsWithPrelaunchAndViewIdBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsWithPrelaunchAndViewIdBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IApplicationViewIconLoader,FtmBase> >,IWeakReferenceSource> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IApplicationViewIconLoader,FtmBase> >,IWeakReferenceSource> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IIconLoadingFunctions,FtmBase> >,IWeakReferenceSource> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IIconLoadingFunctions,FtmBase> >,IWeakReferenceSource> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<CActivatedEventArgsWithViewIdBase>,Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<CActivatedEventArgsWithViewIdBase>,Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IAnimatableScrollViewer,IScrollViewer,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,ChainInterfaces<IAnimatableScrollViewer,IScrollViewer,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IAnimatableScrollViewer,IScrollViewer,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,ChainInterfaces<IAnimatableScrollViewer,IScrollViewer,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IAppResizeDataInternal,IAppResizeData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ChainInterfaces<IAppResizeDataInternal,IAppResizeData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IAppResizeDataInternal,IAppResizeData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ChainInterfaces<IAppResizeDataInternal,IAppResizeData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IAppResizeOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IAppResizeOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IAppResizeOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IAppResizeOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IAppSwitchOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IAppSwitchOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IAppSwitchOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IAppSwitchOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IBackOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IBackOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IBackOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IBackOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IDesktopPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IDragDropViewCreationHandler,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ChainInterfaces<IDesktopPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IDragDropViewCreationHandler,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IDesktopPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IDragDropViewCreationHandler,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ChainInterfaces<IDesktopPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IDragDropViewCreationHandler,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IPPILayoutOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IPPILayoutOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IPPILayoutOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IPPILayoutOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IPlaceModeData,IDragData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ChainInterfaces<IPlaceModeData,IDragData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IPlaceModeData,IDragData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ChainInterfaces<IPlaceModeData,IDragData,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<ITabletModePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabletModePositionerInternal,ITabletModePositionerPriv,IStartDismissalPolicy,IShellPositionerViewHandoff,IApplicationViewChangeListener,ITabletModeChangeListener,IImmersiveMonitorNotification,Implements<RuntimeClassFlags<2>,IShellPositionerWindowingDelegationHandler,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification,IShellTargetingChangeNotification,IFullScreenPositionerPrivateNotification,ITransitionNotification> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<ITabletModePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabletModePositionerInternal,ITabletModePositionerPriv,IStartDismissalPolicy,IShellPositionerViewHandoff,IApplicationViewChangeListener,ITabletModeChangeListener,IImmersiveMonitorNotification,Implements<RuntimeClassFlags<2>,IShellPositionerWindowingDelegationHandler,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification,IShellTargetingChangeNotification,IFullScreenPositionerPrivateNotification,ITransitionNotification> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<ITabletModePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabletModePositionerInternal,ITabletModePositionerPriv,IStartDismissalPolicy,IShellPositionerViewHandoff,IApplicationViewChangeListener,ITabletModeChangeListener,IImmersiveMonitorNotification,Implements<RuntimeClassFlags<2>,IShellPositionerWindowingDelegationHandler,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification,IShellTargetingChangeNotification,IFullScreenPositionerPrivateNotification,ITransitionNotification> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<ITabletModePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ITabletModePositionerInternal,ITabletModePositionerPriv,IStartDismissalPolicy,IShellPositionerViewHandoff,IApplicationViewChangeListener,ITabletModeChangeListener,IImmersiveMonitorNotification,Implements<RuntimeClassFlags<2>,IShellPositionerWindowingDelegationHandler,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification,IShellTargetingChangeNotification,IFullScreenPositionerPrivateNotification,ITransitionNotification> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<ITabletModePositionerManagerPriv,ITabletModePositionerManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWindowManagementShowMoveSizeEvents>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<ITabletModePositionerManagerPriv,ITabletModePositionerManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWindowManagementShowMoveSizeEvents> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<ITabletModePositionerManagerPriv,ITabletModePositionerManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWindowManagementShowMoveSizeEvents>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<ITabletModePositionerManagerPriv,ITabletModePositionerManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWindowManagementShowMoveSizeEvents> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<ITabletModePositionerOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<ITabletModePositionerOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<ITabletModePositionerOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<ITabletModePositionerOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<ITabletModeViewManagerInternal,ITabletModeViewManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IEdgeUiTouchInvocation,IEdgeUiMouseInvocation>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<ITabletModeViewManagerInternal,ITabletModeViewManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IEdgeUiTouchInvocation,IEdgeUiMouseInvocation> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<ITabletModeViewManagerInternal,ITabletModeViewManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IEdgeUiTouchInvocation,IEdgeUiMouseInvocation>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<ITabletModeViewManagerInternal,ITabletModeViewManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IEdgeUiTouchInvocation,IEdgeUiMouseInvocation> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IVirtualDesktopItemInternal,IVirtualDesktopItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ObservableItem>,ChainInterfaces<IVirtualDesktopItemInternal,IVirtualDesktopItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IVirtualDesktopItemInternal,IVirtualDesktopItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ObservableItem>,ChainInterfaces<IVirtualDesktopItemInternal,IVirtualDesktopItem,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IVoiceAssistantPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IInputHostLayoutChanges,IAppSwitcherNotification,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ChainInterfaces<IVoiceAssistantPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IInputHostLayoutChanges,IAppSwitcherNotification,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IVoiceAssistantPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IInputHostLayoutChanges,IAppSwitcherNotification,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ChainInterfaces<IVoiceAssistantPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IInputHostLayoutChanges,IAppSwitcherNotification,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IWindowArrangementOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IWindowArrangementOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IWindowArrangementOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CAppLayoutOperation>,ChainInterfaces<IWindowArrangementOperation,IAppLayoutOperationBuilder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,CloakedIid<IStdMarshalInfo> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWrlLightweightHandlerBase>,CloakedIid<IStdMarshalInfo> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,CloakedIid<IStdMarshalInfo> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWrlLightweightHandlerBase>,CloakedIid<IStdMarshalInfo> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAllUpViewService,IEdgeUiTouchInvocation,IAllUpViewInvoker>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IAllUpViewService,IEdgeUiTouchInvocation,IAllUpViewInvoker> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAllUpViewService,IEdgeUiTouchInvocation,IAllUpViewInvoker>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IAllUpViewService,IEdgeUiTouchInvocation,IAllUpViewInvoker> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAppLayoutInternal,ChainInterfaces<IAppLayoutBuilder,IAppLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IAppLayoutInternal,ChainInterfaces<IAppLayoutBuilder,IAppLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAppLayoutInternal,ChainInterfaces<IAppLayoutBuilder,IAppLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IAppLayoutInternal,ChainInterfaces<IAppLayoutBuilder,IAppLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAppResizeView,ITabletModeInputCallback,IApplicationViewChangeListener>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IAppResizeView,ITabletModeInputCallback,IApplicationViewChangeListener> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAppResizeView,ITabletModeInputCallback,IApplicationViewChangeListener>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IAppResizeView,ITabletModeInputCallback,IApplicationViewChangeListener> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAppTransitionManager,IAppTransitionTargetManagerSink,IApplicationViewChangeListener>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IAppTransitionManager,IAppTransitionTargetManagerSink,IApplicationViewChangeListener> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAppTransitionManager,IAppTransitionTargetManagerSink,IApplicationViewChangeListener>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IAppTransitionManager,IAppTransitionTargetManagerSink,IApplicationViewChangeListener> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IDismissalAnimation>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<MultitaskingViewAnimationCoordinatorBase>,IDismissalAnimation> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IDismissalAnimation>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<MultitaskingViewAnimationCoordinatorBase>,IDismissalAnimation> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IDragVisual,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IDragVisual,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IDragVisual,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IDragVisual,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IDropFeedback,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IDropFeedback,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IDropFeedback,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IDropFeedback,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IExecuteCommand,IObjectWithSelection>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IExecuteCommand,IObjectWithSelection> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IExecuteCommand,IObjectWithSelection>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IExecuteCommand,IObjectWithSelection> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IExternalDragHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewHostBase<IPPIAllUpViewHost> >,IExternalDragHost> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IExternalDragHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewHostBase<IPPIAllUpViewHost> >,IExternalDragHost> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IFullScreenManager,IFullScreenManagerPriv,IFullScreenNotificationService,IFullScreenPositionerNotification,IImmersiveMonitorNotification,IPrivilegedOperationsConsumer>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IFullScreenManager,IFullScreenManagerPriv,IFullScreenNotificationService,IFullScreenPositionerNotification,IImmersiveMonitorNotification,IPrivilegedOperationsConsumer> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IFullScreenManager,IFullScreenManagerPriv,IFullScreenNotificationService,IFullScreenPositionerNotification,IImmersiveMonitorNotification,IPrivilegedOperationsConsumer>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IFullScreenManager,IFullScreenManagerPriv,IFullScreenNotificationService,IFullScreenPositionerNotification,IImmersiveMonitorNotification,IPrivilegedOperationsConsumer> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IGlyphButton>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewButtonElement>,IGlyphButton> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IGlyphButton>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewButtonElement>,IGlyphButton> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IGlyphButtonHost,IScrollButtonContainer>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IGlyphButtonHost,IScrollButtonContainer> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IGlyphButtonHost,IScrollButtonContainer>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IGlyphButtonHost,IScrollButtonContainer> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IInvocationAnimationHost,IAnimatedDismissableHost,IDismissalAnimationHost,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewHostBase<ISnapAssistViewHost> >,IInvocationAnimationHost,IAnimatedDismissableHost,IDismissalAnimationHost,VirtualDesktopNotificationBase<IVirtualDesktopNotification> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IInvocationAnimationHost,IAnimatedDismissableHost,IDismissalAnimationHost,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewHostBase<ISnapAssistViewHost> >,IInvocationAnimationHost,IAnimatedDismissableHost,IDismissalAnimationHost,VirtualDesktopNotificationBase<IVirtualDesktopNotification> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewDragSource,ISwitchItemThumbnailElement>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CShrinkButtonElement>,IMultitaskingViewDragSource,ISwitchItemThumbnailElement> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewDragSource,ISwitchItemThumbnailElement>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CShrinkButtonElement>,IMultitaskingViewDragSource,ISwitchItemThumbnailElement> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewElementRoot,IFrameElement,IInputEaterElementNotifications,IMultitaskingViewDragProvider,ILightDismissElementHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IMultitaskingViewElementRoot,IFrameElement,IInputEaterElementNotifications,IMultitaskingViewDragProvider,ILightDismissElementHost> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewElementRoot,IFrameElement,IInputEaterElementNotifications,IMultitaskingViewDragProvider,ILightDismissElementHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IMultitaskingViewElementRoot,IFrameElement,IInputEaterElementNotifications,IMultitaskingViewDragProvider,ILightDismissElementHost> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewGridElement,ISwitchItemElement,IGlyphButtonHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<HotTrackingElement>,IMultitaskingViewGridElement,ISwitchItemElement,IGlyphButtonHost> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewGridElement,ISwitchItemElement,IGlyphButtonHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<HotTrackingElement>,IMultitaskingViewGridElement,ISwitchItemElement,IGlyphButtonHost> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewServiceProvider,IMultitaskingViewTaskScheduler>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IMultitaskingViewServiceProvider,IMultitaskingViewTaskScheduler> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewServiceProvider,IMultitaskingViewTaskScheduler>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IMultitaskingViewServiceProvider,IMultitaskingViewTaskScheduler> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewTaskCallback>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IMultitaskingViewTaskCallback> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IMultitaskingViewTaskCallback>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IMultitaskingViewTaskCallback> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,ChainInterfaces<ISwitchItemFilteredCollection,IObservableObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ObservableObjectArray>,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,ChainInterfaces<ISwitchItemFilteredCollection,IObservableObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,ChainInterfaces<ISwitchItemFilteredCollection,IObservableObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ObservableObjectArray>,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,ChainInterfaces<ISwitchItemFilteredCollection,IObservableObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IObservableObjectArrayChanged,IVirtualDesktopContainerElement,IScrollableElement>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IObservableObjectArrayChanged,IVirtualDesktopContainerElement,IScrollableElement> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IObservableObjectArrayChanged,IVirtualDesktopContainerElement,IScrollableElement>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IObservableObjectArrayChanged,IVirtualDesktopContainerElement,IScrollableElement> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IPPIAllUpViewService,IPPIAllUpViewInvoker>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IPPIAllUpViewService,IPPIAllUpViewInvoker> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IPPIAllUpViewService,IPPIAllUpViewInvoker>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IPPIAllUpViewService,IPPIAllUpViewInvoker> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IScrollButtonContainerHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IScrollButtonContainerHost> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IScrollButtonContainerHost>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IScrollButtonContainerHost> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISnapAssistViewController>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewControllerBase>,ISnapAssistViewController> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISnapAssistViewController>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewControllerBase>,ISnapAssistViewController> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISwitchItem,ISwitchItemInternal>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ObservableItem>,ISwitchItem,ISwitchItemInternal> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISwitchItem,ISwitchItemInternal>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ObservableItem>,ISwitchItem,ISwitchItemInternal> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISwitchItemGrid,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,IMultitaskingViewTelemetryHost,IScrollableElement>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,ISwitchItemGrid,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,IMultitaskingViewTelemetryHost,IScrollableElement> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISwitchItemGrid,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,IMultitaskingViewTelemetryHost,IScrollableElement>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,ISwitchItemGrid,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,IMultitaskingViewTelemetryHost,IScrollableElement> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModeChrome>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ITabletModeChrome> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModeChrome>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ITabletModeChrome> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModeChromeManager>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ITabletModeChromeManager> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModeChromeManager>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ITabletModeChromeManager> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModeCoverWindow,ITabletModeChrome>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,ITabletModeCoverWindow,ITabletModeChrome> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModeCoverWindow,ITabletModeChrome>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,ITabletModeCoverWindow,ITabletModeChrome> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IVirtualDesktopBarElement>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IVirtualDesktopBarElement> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IVirtualDesktopBarElement>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CMultitaskingViewElementBase>,IVirtualDesktopBarElement> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IWindowArrangementView,ITabletModeInputCallback,IApplicationViewChangeListener,IDragVisualHost,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IWindowArrangementView,ITabletModeInputCallback,IApplicationViewChangeListener,IDragVisualHost,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IWindowArrangementView,ITabletModeInputCallback,IApplicationViewChangeListener,IDragVisualHost,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IWindowArrangementView,ITabletModeInputCallback,IApplicationViewChangeListener,IDragVisualHost,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IWindowManagementJointResizeEvents,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,IImmersiveRawInputKeyboardNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IWindowManagementJointResizeEvents,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,IImmersiveRawInputKeyboardNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IWindowManagementJointResizeEvents,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,IImmersiveRawInputKeyboardNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IWindowManagementJointResizeEvents,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,IImmersiveRawInputKeyboardNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IImmersiveLauncher,IImmersiveLauncherTrayNotify,IImmersiveShellHookNotification,IServiceProvider,IImmersiveShellComponent,IImmersiveLauncherCortana,IXamlLauncherStateCallback,IPrivilegedOperationsConsumer> > >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,Implements<RuntimeClassFlags<2>,IImmersiveLauncher,IImmersiveLauncherTrayNotify,IImmersiveShellHookNotification,IServiceProvider,IImmersiveShellComponent,IImmersiveLauncherCortana,IXamlLauncherStateCallback,IPrivilegedOperationsConsumer> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IImmersiveLauncher,IImmersiveLauncherTrayNotify,IImmersiveShellHookNotification,IServiceProvider,IImmersiveShellComponent,IImmersiveLauncherCortana,IXamlLauncherStateCallback,IPrivilegedOperationsConsumer> > >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,Implements<RuntimeClassFlags<2>,IImmersiveLauncher,IImmersiveLauncherTrayNotify,IImmersiveShellHookNotification,IServiceProvider,IImmersiveShellComponent,IImmersiveLauncherCortana,IXamlLauncherStateCallback,IPrivilegedOperationsConsumer> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ObservableObjectArray>,VirtualDesktopNotificationBase<IVirtualDesktopNotification> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ObservableObjectArray>,VirtualDesktopNotificationBase<IVirtualDesktopNotification> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IApplicationViewChangeListener,ISwitchItemCollection>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<ObservableObjectArray>,IWeakReferenceSource,IApplicationViewChangeListener,ISwitchItemCollection> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IApplicationViewChangeListener,ISwitchItemCollection>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<ObservableObjectArray>,IWeakReferenceSource,IApplicationViewChangeListener,ISwitchItemCollection> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CImmersiveWindowFactoryBase>,IWeakReferenceSource> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CImmersiveWindowFactoryBase>,IWeakReferenceSource> >();
			};

			class StaticStorage<DefaultModule<1>,0,int>
			{
				static StaticStorage<DefaultModule<1>,0,int> instance_;
			public:
				~StaticStorage<DefaultModule<1>,0,int>();
			};

			class StaticStorage<Platform::Details::InProcModule,0,int>
			{
				static StaticStorage<Platform::Details::InProcModule,0,int> instance_;
			};

			struct StrongReference
			{
				unsigned long IncrementStrongReference();
			};

			struct WeakReferenceImpl
			{
				virtual long Resolve(_GUID const &,IInspectable * *);
			};

			ComPtr<AgileRegistrationList::AgileCallbackArray> Make<AgileRegistrationList::AgileCallbackArray,std::vector<AgileRegistrationList::Item,std::allocator<AgileRegistrationList::Item> > &>(std::vector<AgileRegistrationList::Item,std::allocator<AgileRegistrationList::Item> > &);
			ComPtr<Details::WeakReferenceImpl> Make<WeakReferenceImpl,IUnknown * &>(IUnknown * &);
			ComPtr<SwitcherTabViewManagerWrapper> Make<SwitcherTabViewManagerWrapper,ITabViewManager * const &>(ITabViewManager * const &);
			ComPtr<ViewEventArgsForWindowingSettings> Make<ViewEventArgsForWindowingSettings,std::map<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,std::less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,std::allocator<std::pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > > &,Windows::Internal::ApplicationModel::WindowingEnvironment::WindowingEnvironmentId &>(std::map<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,std::less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,std::allocator<std::pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > > &,Windows::Internal::ApplicationModel::WindowingEnvironment::WindowingEnvironmentId &);
			ComPtr<ViewGroup> Make<ViewGroup,IWindowGroupManager * &,ITitleBarController * &,ITabViewManager * &,Windows::Foundation::IEventHandler<IInspectable *> * &,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &,IPrivilegedForegroundOperations * &>(IWindowGroupManager * &,ITitleBarController * &,ITabViewManager * &,Windows::Foundation::IEventHandler<IInspectable *> * &,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &,IPrivilegedForegroundOperations * &);
			ComPtr<ViewGroupManager> Make<ViewGroupManager,ITitleBarController * &,ITabViewManager * &>(ITitleBarController * &,ITabViewManager * &);
			ComPtr<WindowGroupManager> Make<WindowGroupManager,IPrivilegedWindowGroupingOperations * &>(IPrivilegedWindowGroupingOperations * &);
			ComPtr<Windows::Storage::Streams::CBuffer<void (*)(void *),Windows::Storage::Streams::DefaultMarshaler> > Make<Windows::Storage::Streams::CBuffer<void (*)(void *),Windows::Storage::Streams::DefaultMarshaler>,unsigned int &,unsigned int &,unsigned char * &,void (*&)(void *)>(unsigned int &,unsigned int &,unsigned char * &,void (*&)(void *));
			Details::WeakReferenceImpl * CreateWeakReference(IUnknown *);
			bool TerminateMap(Details::ModuleBase *,unsigned short const *,bool);
			bool TerminateMap(Details::ModuleBase *,wchar_t const *,bool);
			long CreateActivationFactory<BrokeredViewTabConverterStatics>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<SimpleSealedActivationFactory<SystemTray::TrayInfoTipActivator,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<SimpleSealedActivationFactory<SystemTray::TrayInfoTipAppInfoProvider,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<SimpleSealedActivationFactory<Windows::Internal::Shell::CustomShell::CustomShellExperienceRepository,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<Windows::Internal::ComposableShell::Tabs::TabSetMediatorStatics>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListenerFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewTitleChangeListenerFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::UserPresenceListenerFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateAgileHelper<Windows::Foundation::IEventHandler<IInspectable *> >(Windows::Foundation::IEventHandler<IInspectable *> *,Windows::Foundation::IEventHandler<IInspectable *> * *);
			long CreateAgileHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::ITreeNode *,Windows::Internal::ComposableShell::ITreeNodeEventArgs *> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::ITreeNode *,Windows::Internal::ComposableShell::ITreeNodeEventArgs *> *,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::ITreeNode *,Windows::Internal::ComposableShell::ITreeNodeEventArgs *> * *);
			long CreateAgileHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *> *,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *> * *);
			long CreateAgileHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> * *);
			long CreateAgileHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabSetMediator *,Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs *> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabSetMediator *,Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs *> *,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabSetMediator *,Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs *> * *);
			long CreateAgileHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> *,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> * *);
			long CreateAgileHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *> *,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *> * *);
			long CreateAgileHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabViewProvidedEventArgs *> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabViewProvidedEventArgs *> *,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabViewProvidedEventArgs *> * *);
			long CreateAgileHelper<Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler>(Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler *,Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler * *);
			long CreateClassFactory<AccessibilityExperienceManagerCF>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<CCortanaExperienceManagerClassFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<CortanaStoreAppExperienceManagerFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<HolographicPositionerFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<RetailDemoExperienceManagerFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<AcrylicPolicyManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ActionCenterExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ActivationHints,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<AllUpViewUriHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CAppTransitionManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CApplicationManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CApplicationViewBroker,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CApplicationViewManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CDesktopPositioner,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CFullScreenManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveShellBuilder,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CMultitaskingViewServiceProvider,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPerMonitorDesktopVisibilityService,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSwitchController,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CVirtualDesktopComponent,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ControlCenterExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CortanaExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CustomShellManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<DesktopBlueLightReductionManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<EmulatedFullScreenManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<FullScreenPositioner,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<HolographicForegroundAssistant,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<HolographicViewHostItemLedger,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ImeStatusNotificationExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ImmersiveShellStressTool,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<InsightsExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<JointResize,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<JumpViewExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<KioskPositioner,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<LockScreenDirectorServiceProviderImpl,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PCShellImmersiveComponentCreator,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PWSLayoutPolicyManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PenWorkspaceDiscoverBrokerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PenWorkspaceScreenCaptureBroker,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PeopleBarFlyoutExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PeopleBarJumpViewExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PeoplePaneViewManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PerMonitorShellPositionerManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PrivilegedOperationsService,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<QuickConnectExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<RemoteLauncherForegroundHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ScreenClippingExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<SearchAppExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ShellFeedsExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ShellPositionerManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ShoulderTapExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<StartExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<SurfaceHubPositioner,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TabViewManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TabletModePositioner,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TabletModePositionerManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TabletModeViewManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TaskContinuityActivitiesExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TaskFlowImmersiveShellBroker,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TaskbarLayoutPolicyManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ToastCenterExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ViewEventDispatcher,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ViewPresentationMediator,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<VirtualDesktopDataSourceComponent,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<VirtualTouchpadExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<VirtualTouchpadUriHandlerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<VoiceAssistantPositioner,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<WindowEventDispatcher,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<WindowSizeConverter,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<WindowingEnvironmentManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<Windows::Internal::ComposableShell::Tabs::TabSetMediator,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<XamlAllUpViewHost,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<XamlAltTabViewHost,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<XamlExplorerHostShellComponent,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<XamlSnapAssistViewHost,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<TouchKeyboardExperienceManagerCF>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<VirtualTouchpadUriHandlerFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<XamlLauncherFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<winrt::wrl_class_factory<winrt::Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<winrt::wrl_class_factory<winrt::Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<winrt::wrl_class_factory<winrt::Windows::Internal::Shell::implementation::WindowTabHost> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long GetActivationFactory<1>(Details::ModuleBase *,unsigned short const *,HSTRING__ *,IActivationFactory * *);
			long GetCacheEntry(Details::ModuleBase *,unsigned int *,_GUID const &,Details::CreatorMap const *,IUnknown * *);
			long GetClassObject<1>(Details::ModuleBase *,unsigned short const *,_GUID const &,_GUID const &,void * *);
			long MakeAndInitialize<AgileApplicationViewChangeListenerConverter,IApplicationViewChangeListener,IApplicationViewChangeListener * &>(IApplicationViewChangeListener * *,IApplicationViewChangeListener * &);
			long MakeAndInitialize<AltEscHotkeyHandler,AltEscHotkeyHandler,WeakReference::IWeakReference * &>(AltEscHotkeyHandler * *,WeakReference::IWeakReference * &);
			long MakeAndInitialize<AppResizeData,AppResizeData,IAppLayout * &>(AppResizeData * *,IAppLayout * &);
			long MakeAndInitialize<AppResizeView,AppResizeView,bool &>(AppResizeView * *,bool &);
			long MakeAndInitialize<AppViewEventHelpers::details::ApplicationViewEventRegistration,AppViewEventHelpers::details::ApplicationViewEventRegistration,IApplicationViewChangeListener * &>(AppViewEventHelpers::details::ApplicationViewEventRegistration * *,IApplicationViewChangeListener * &);
			long MakeAndInitialize<AppViewEventHelpers::details::ShellHookRegistration,AppViewEventHelpers::details::ShellHookRegistration,IImmersiveShellHookNotification * &>(AppViewEventHelpers::details::ShellHookRegistration * *,IImmersiveShellHookNotification * &);
			long MakeAndInitialize<AppViewIconFactory,AppViewIconFactory,IApplicationView * &,IApplicationViewIconLoader * &>(AppViewIconFactory * *,IApplicationView * &,IApplicationViewIconLoader * &);
			long MakeAndInitialize<ApplicationViewManagement::CGlobals,ApplicationViewManagement::CGlobals,CApplicationViewManager * &>(ApplicationViewManagement::CGlobals * *,CApplicationViewManager * &);
			long MakeAndInitialize<ApplicationViewManagerVisibilityDebouncer,ApplicationViewManagerVisibilityDebouncer,IApplicationViewCollection * &>(ApplicationViewManagerVisibilityDebouncer * *,IApplicationViewCollection * &);
			long MakeAndInitialize<BrokeredViewTabConverterImpl,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter * &>(Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter * *,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter * &);
			long MakeAndInitialize<CActionCenterExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CAllUpViewService,CAllUpViewService,IMultitaskingViewTaskScheduler * &>(CAllUpViewService * *,IMultitaskingViewTaskScheduler * &);
			long MakeAndInitialize<CAltTabViewController,CAltTabViewController,WeakReference::IWeakReference * &,IMultitaskingViewManagerInternal * &,IApplicationViewSwitcher * &,IImmersiveAppCrusher * &,IApplicationViewCollection * &,Windows::Internal::ComposableShell::Tabs::ITabController * &,ITabViewManager * &>(CAltTabViewController * *,WeakReference::IWeakReference * &,IMultitaskingViewManagerInternal * &,IApplicationViewSwitcher * &,IImmersiveAppCrusher * &,IApplicationViewCollection * &,Windows::Internal::ComposableShell::Tabs::ITabController * &,ITabViewManager * &);
			long MakeAndInitialize<CAltTabViewHost,CAltTabViewHost,IMultitaskingData * &,IMultitaskingViewManagerInternal * &,IApplicationViewSwitcher * &,IImmersiveAppCrusher * &,IMultitaskingViewVisibilityServiceInternal * &,IMultitaskingViewGestureState * &,IApplicationViewCollection * &,Windows::Internal::ComposableShell::Tabs::ITabController * &,ITabViewManager * &>(CAltTabViewHost * *,IMultitaskingData * &,IMultitaskingViewManagerInternal * &,IApplicationViewSwitcher * &,IImmersiveAppCrusher * &,IMultitaskingViewVisibilityServiceInternal * &,IMultitaskingViewGestureState * &,IApplicationViewCollection * &,Windows::Internal::ComposableShell::Tabs::ITabController * &,ITabViewManager * &);
			long MakeAndInitialize<CAppArrangementSingleTransitionTarget,ITaggableTarget,AnimationPassState const * &,unsigned long &>(ITaggableTarget * *,AnimationPassState const * &,unsigned long &);
			long MakeAndInitialize<CAppViewManager,CAppViewManager,IImmersiveApplicationManagerInternal * &>(CAppViewManager * *,IImmersiveApplicationManagerInternal * &);
			long MakeAndInitialize<CApplicationFrameService,CApplicationFrameService,IImmersiveApplicationManagerInternal * &>(CApplicationFrameService * *,IImmersiveApplicationManagerInternal * &);
			long MakeAndInitialize<CAsyncSwitchItemController,ISwitchItemController,ISwitchItemController * &>(ISwitchItemController * *,ISwitchItemController * &);
			long MakeAndInitialize<CBaseTrayFlyoutExperienceManager,IInspectable,IServiceProvider * &,unsigned short const * &,unsigned short const * &>(IInspectable * *,IServiceProvider * &,unsigned short const * &,unsigned short const * &);
			long MakeAndInitialize<CCharmsWindowManager,ICharmWindowManagerInternal,IImmersiveApplicationTransitionHelper * &>(ICharmWindowManagerInternal * *,IImmersiveApplicationTransitionHelper * &);
			long MakeAndInitialize<CClassicWindowManager,IClassicWindowManagerPrivate,IImmersiveSystemModeInternal * &>(IClassicWindowManagerPrivate * *,IImmersiveSystemModeInternal * &);
			long MakeAndInitialize<CCommonApplicationViewArrangePositionSnapshot,IApplicationViewArrangePosition,HWND__ * &>(IApplicationViewArrangePosition * *,HWND__ * &);
			long MakeAndInitialize<CCommonApplicationViewOcclusionPosition,IApplicationViewPosition,tagWINDOWPLACEMENT &>(IApplicationViewPosition * *,tagWINDOWPLACEMENT &);
			long MakeAndInitialize<CCommonApplicationViewOcclusionPosition,IOcclusionBasedApplicationViewPosition,tagWINDOWPLACEMENT &>(IOcclusionBasedApplicationViewPosition * *,tagWINDOWPLACEMENT &);
			long MakeAndInitialize<CCommonApplicationViewOcclusionPositionSnapshot,IOcclusionBasedApplicationViewPosition,HWND__ * &>(IOcclusionBasedApplicationViewPosition * *,HWND__ * &);
			long MakeAndInitialize<CCommonApplicationViewPosition,CCommonApplicationViewPosition,Geometry::CRect &>(CCommonApplicationViewPosition * *,Geometry::CRect &);
			long MakeAndInitialize<CCommonApplicationViewPosition,IApplicationViewPosition,Geometry::CRect &>(IApplicationViewPosition * *,Geometry::CRect &);
			long MakeAndInitialize<CCommonApplicationViewPosition,IApplicationViewPosition,tagRECT &>(IApplicationViewPosition * *,tagRECT &);
			long MakeAndInitialize<CControlCenterExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CExperienceManagerAnimationHelper::DummyWindow,CExperienceManagerAnimationHelper::DummyWindow,IDWMStoryboardListener * &>(CExperienceManagerAnimationHelper::DummyWindow * *,IDWMStoryboardListener * &);
			long MakeAndInitialize<CFrameApplicationPresentation,CFrameApplicationPresentation,unsigned short const * &,unsigned long &,bool &,IIAMServiceProvider * &,IImmersiveApplicationInternal * &>(CFrameApplicationPresentation * *,unsigned short const * &,unsigned long &,bool &,IIAMServiceProvider * &,IImmersiveApplicationInternal * &);
			long MakeAndInitialize<CGITCallbackArray,IObjectArray,CCoSimpleArray<ComPtr<IGITCookieObject>,4294967294,CSimpleArrayStandardCompareHelper<ComPtr<IGITCookieObject> > > &>(IObjectArray * *,CCoSimpleArray<ComPtr<IGITCookieObject>,4294967294,CSimpleArrayStandardCompareHelper<ComPtr<IGITCookieObject> > > &);
			long MakeAndInitialize<CGridTelemetryController,ISwitchItemController,WeakReference::IWeakReference * &,ISwitchItemController * &>(ISwitchItemController * *,WeakReference::IWeakReference * &,ISwitchItemController * &);
			long MakeAndInitialize<CIAMSpecialWindow,CIAMSpecialWindow,SPECIAL_WINDOW_INIT_DATA const * const &>(CIAMSpecialWindow * *,SPECIAL_WINDOW_INIT_DATA const * const &);
			long MakeAndInitialize<CIconLoaderInternal,CIconLoaderInternal,IApplicationViewIconLoader * &>(CIconLoaderInternal * *,IApplicationViewIconLoader * &);
			long MakeAndInitialize<CImmersiveApp,IImmersiveApplication,unsigned short const * &,unsigned short const * &,unsigned long &,IImmersiveMonitor * &,PER_APPLICATION_DATA * &,IIAMServiceProvider * &,unsigned __int64 &>(IImmersiveApplication * *,unsigned short const * &,unsigned short const * &,unsigned long &,IImmersiveMonitor * &,PER_APPLICATION_DATA * &,IIAMServiceProvider * &,unsigned __int64 &);
			long MakeAndInitialize<CImmersiveWindowManager,IImmersiveWindowManager,IIAMServiceProvider * &>(IImmersiveWindowManager * *,IIAMServiceProvider * &);
			long MakeAndInitialize<CInsightsExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CJumpViewExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CLauncherAndDefaultSwitchTransitionTarget,ITaggableTarget,AnimationPassState const * &,unsigned long &>(ITaggableTarget * *,AnimationPassState const * &,unsigned long &);
			long MakeAndInitialize<CMultitaskingViewFrameElement,IMultitaskingViewElement,FrameMetrics const &,HWND__ * &,AsyncFrameEvents const &,ISwitchThumbnailFactory * &,IMultitaskingViewElement * &,IMultitaskingViewElement * &,IAnimationCoordinator * &>(IMultitaskingViewElement * *,FrameMetrics const &,HWND__ * &,AsyncFrameEvents const &,ISwitchThumbnailFactory * &,IMultitaskingViewElement * &,IMultitaskingViewElement * &,IAnimationCoordinator * &);
			long MakeAndInitialize<CMultitaskingViewHotKeyHandler,CMultitaskingViewHotKeyHandler,IImmersiveWindowMessageService * &,IImmersiveMonitorManager * &,IApplicationTargetingTracker * &,IMultitaskingViewTaskScheduler * &,IApplicationViewCollection * &>(CMultitaskingViewHotKeyHandler * *,IImmersiveWindowMessageService * &,IImmersiveMonitorManager * &,IApplicationTargetingTracker * &,IMultitaskingViewTaskScheduler * &,IApplicationViewCollection * &);
			long MakeAndInitialize<CPPIAllUpViewController,CPPIAllUpViewController,WeakReference::IWeakReference * &,IMultitaskingViewManagerInternal * &,IApplicationViewSwitcher * &,IImmersiveAppCrusher * &,ITabletModeViewManager * &>(CPPIAllUpViewController * *,WeakReference::IWeakReference * &,IMultitaskingViewManagerInternal * &,IApplicationViewSwitcher * &,IImmersiveAppCrusher * &,ITabletModeViewManager * &);
			long MakeAndInitialize<CPPIAllUpViewHost,CPPIAllUpViewHost,IMultitaskingData * &,IMultitaskingViewManagerInternal * &,IApplicationViewSwitcher * &,IImmersiveAppCrusher * &,IMultitaskingViewVisibilityServiceInternal * &,ITabletModeViewManager * &>(CPPIAllUpViewHost * *,IMultitaskingData * &,IMultitaskingViewManagerInternal * &,IApplicationViewSwitcher * &,IImmersiveAppCrusher * &,IMultitaskingViewVisibilityServiceInternal * &,ITabletModeViewManager * &);
			long MakeAndInitialize<CPPIAllUpViewService,CPPIAllUpViewService,IMultitaskingViewTaskScheduler * &>(CPPIAllUpViewService * *,IMultitaskingViewTaskScheduler * &);
			long MakeAndInitialize<CPeopleBarFlyoutExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CPeopleBarJumpViewExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CQuickConnectExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CScreenClippingExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CShoulderTapExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CSimpleTempAppVisual,CSimpleTempAppVisual,ITemporaryAppVisual * &>(CSimpleTempAppVisual * *,ITemporaryAppVisual * &);
			long MakeAndInitialize<CSnapAssistViewController,CSnapAssistViewController,WeakReference::IWeakReference * &,IMultitaskingViewManager * &,IImmersiveAppCrusher * &,Windows::Internal::ComposableShell::Tabs::ITabController * &,ITabViewManager * &>(CSnapAssistViewController * *,WeakReference::IWeakReference * &,IMultitaskingViewManager * &,IImmersiveAppCrusher * &,Windows::Internal::ComposableShell::Tabs::ITabController * &,ITabViewManager * &);
			long MakeAndInitialize<CSnapAssistViewHost,CSnapAssistViewHost,IMultitaskingData * &,IMultitaskingViewManagerInternal * &,IMultitaskingViewVisibilityServiceInternal * &,IImmersiveAppCrusher * &,Windows::Internal::ComposableShell::Tabs::ITabController * &,ITabViewManager * &>(CSnapAssistViewHost * *,IMultitaskingData * &,IMultitaskingViewManagerInternal * &,IMultitaskingViewVisibilityServiceInternal * &,IImmersiveAppCrusher * &,Windows::Internal::ComposableShell::Tabs::ITabController * &,ITabViewManager * &);
			long MakeAndInitialize<CSwitchItemGrid,CSwitchItemGrid,GridMetrics const &,Geometry::CSize const &,IElementFactory * &,ISwitchThumbnailFactory * &,ISwitchItemController * &,IObservableObjectArray * &>(CSwitchItemGrid * *,GridMetrics const &,Geometry::CSize const &,IElementFactory * &,ISwitchThumbnailFactory * &,ISwitchItemController * &,IObservableObjectArray * &);
			long MakeAndInitialize<CTaskContinuityActivitiesExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CTaskWindow,ITaskWindow,TASKWINDOW_INIT_DATA const * const &>(ITaskWindow * *,TASKWINDOW_INIT_DATA const * const &);
			long MakeAndInitialize<CToastCenterExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CVirtualDesktop,CVirtualDesktop,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopLock * &>(CVirtualDesktop * *,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopLock * &);
			long MakeAndInitialize<CVirtualDesktopApplicationViewEventListener,CVirtualDesktopApplicationViewEventListener,IVirtualDesktopManagerPrivate * &,IVirtualDesktopSwitchAnimator * &,IVirtualDesktopForegroundPolicy * &,IVirtualDesktopWindowMoveManager * &,IVirtualDesktopPinnedAppsPrivate * &,IVirtualDesktopLock * &>(CVirtualDesktopApplicationViewEventListener * *,IVirtualDesktopManagerPrivate * &,IVirtualDesktopSwitchAnimator * &,IVirtualDesktopForegroundPolicy * &,IVirtualDesktopWindowMoveManager * &,IVirtualDesktopPinnedAppsPrivate * &,IVirtualDesktopLock * &);
			long MakeAndInitialize<CVirtualDesktopCollection,CVirtualDesktopCollection,IVirtualDesktopFactory * &,IVirtualDesktopPersistence * &,bool &>(CVirtualDesktopCollection * *,IVirtualDesktopFactory * &,IVirtualDesktopPersistence * &,bool &);
			long MakeAndInitialize<CVirtualDesktopFactory,CVirtualDesktopFactory,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopLock * &>(CVirtualDesktopFactory * *,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopLock * &);
			long MakeAndInitialize<CVirtualDesktopForegroundPolicy,CVirtualDesktopForegroundPolicy,IVirtualDesktopCollection * &,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopDefaultForegroundHandler * &>(CVirtualDesktopForegroundPolicy * *,IVirtualDesktopCollection * &,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopDefaultForegroundHandler * &);
			long MakeAndInitialize<CVirtualDesktopHolographicViewTransitionNotification,CVirtualDesktopHolographicViewTransitionNotification,IVirtualDesktopManagerPrivate * &,IVirtualDesktopLock * &>(CVirtualDesktopHolographicViewTransitionNotification * *,IVirtualDesktopManagerPrivate * &,IVirtualDesktopLock * &);
			long MakeAndInitialize<CVirtualDesktopHotkeyHandler,CVirtualDesktopHotkeyHandler,IVirtualDesktopManagerPrivate * &,IVirtualDesktopSwitchAnimator * &,IVirtualDesktopLock * &>(CVirtualDesktopHotkeyHandler * *,IVirtualDesktopManagerPrivate * &,IVirtualDesktopSwitchAnimator * &,IVirtualDesktopLock * &);
			long MakeAndInitialize<CVirtualDesktopManager,CVirtualDesktopManager,IVirtualDesktopCollection * &,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopNotification2 * &,IVirtualDesktopForegroundPolicy * &,IVirtualDesktopPersistence2 * &,IVirtualDesktopGroupedViewsPolicy * &,IVirtualDesktopLock * &>(CVirtualDesktopManager * *,IVirtualDesktopCollection * &,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopNotification2 * &,IVirtualDesktopForegroundPolicy * &,IVirtualDesktopPersistence2 * &,IVirtualDesktopGroupedViewsPolicy * &,IVirtualDesktopLock * &);
			long MakeAndInitialize<CVirtualDesktopNotificationsDerived,CVirtualDesktopNotificationsDerived,unsigned long &,IVirtualDesktopLock * &>(CVirtualDesktopNotificationsDerived * *,unsigned long &,IVirtualDesktopLock * &);
			long MakeAndInitialize<CVirtualDesktopVisibilityPolicy,CVirtualDesktopVisibilityPolicy,IVirtualDesktopNotification * &>(CVirtualDesktopVisibilityPolicy * *,IVirtualDesktopNotification * &);
			long MakeAndInitialize<CVirtualTouchpadExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CVisibilityOverride,IVisibilityOverride,IImmersiveApplicationVisibilityOverride * &>(IVisibilityOverride * *,IImmersiveApplicationVisibilityOverride * &);
			long MakeAndInitialize<CWinRTAppIconLoader,CWinRTAppIconLoader,IWinRTApplicationView * &,tagSIZE const &,tagSIZE const &,tagSIZE const &,unsigned int &,IApplicationViewIconLoaderNotifications * &>(CWinRTAppIconLoader * *,IWinRTApplicationView * &,tagSIZE const &,tagSIZE const &,tagSIZE const &,unsigned int &,IApplicationViewIconLoaderNotifications * &);
			long MakeAndInitialize<CWindowIconLoader,CWindowIconLoader,IWin32ApplicationView * &,tagSIZE const &,IApplicationViewIconLoaderNotifications * &,IIconLoadingFunctions * &>(CWindowIconLoader * *,IWin32ApplicationView * &,tagSIZE const &,IApplicationViewIconLoaderNotifications * &,IIconLoadingFunctions * &);
			long MakeAndInitialize<ChromeManager,ChromeManager,IUnknown * &>(ChromeManager * *,IUnknown * &);
			long MakeAndInitialize<ClientWindowReadyForPresentationEventArgs,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs,bool const &>(Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs * *,bool const &);
			long MakeAndInitialize<CortanaDesktopExperienceView,Windows::Internal::Shell::Experience::IShellExperiencePositioner,IServiceProvider * &,TwinUI::Cortana::ICortanaExperienceManagerNotification * &>(Windows::Internal::Shell::Experience::IShellExperiencePositioner * *,IServiceProvider * &,TwinUI::Cortana::ICortanaExperienceManagerNotification * &);
			long MakeAndInitialize<CortanaSharedExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CoverWindowAcc,CoverWindowAcc,HWND__ * &,unsigned short const * &,IRawElementProviderFragment * &>(CoverWindowAcc * *,HWND__ * &,unsigned short const * &,IRawElementProviderFragment * &);
			long MakeAndInitialize<DragInputHandler,DragInputHandler,IExternalDragHost * &>(DragInputHandler * *,IExternalDragHost * &);
			long MakeAndInitialize<EventTargetArray,EventTargetArray,unsigned __int64 &>(Details::EventTargetArray * *,unsigned __int64 &);
			long MakeAndInitialize<FrameworkViewTypeSetEventArgs,FrameworkViewTypeSetEventArgs,int &>(FrameworkViewTypeSetEventArgs * *,int &);
			long MakeAndInitialize<ImeNotificationExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<InputEaterElement,InputEaterElement,IInputEaterElementNotifications * &>(InputEaterElement * *,IInputEaterElementNotifications * &);
			long MakeAndInitialize<LightDismissElement,LightDismissElement,ILightDismissElementHost * &,unsigned int &>(LightDismissElement * *,ILightDismissElementHost * &,unsigned int &);
			long MakeAndInitialize<MeetNowExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<MultitaskingViewDragVisual,MultitaskingViewDragVisual,ISwitchThumbnailFactory * &,IMultitaskingViewElement * &,IMultitaskingViewElement * &,Geometry::CSize const &,double &>(MultitaskingViewDragVisual * *,ISwitchThumbnailFactory * &,IMultitaskingViewElement * &,IMultitaskingViewElement * &,Geometry::CSize const &,double &);
			long MakeAndInitialize<MultitaskingViewGestureHandler,MultitaskingViewGestureHandler,IMultitaskingViewTaskScheduler * &,IMultitaskingViewVisibilityService * &>(MultitaskingViewGestureHandler * *,IMultitaskingViewTaskScheduler * &,IMultitaskingViewVisibilityService * &);
			long MakeAndInitialize<PenWorkspace::Discover::ObjectArray,PenWorkspace::Discover::ObjectArray,std::vector<ComPtr<IDiscoverRecentItem>,std::allocator<ComPtr<IDiscoverRecentItem> > > &>(PenWorkspace::Discover::ObjectArray * *,std::vector<ComPtr<IDiscoverRecentItem>,std::allocator<ComPtr<IDiscoverRecentItem> > > &);
			long MakeAndInitialize<PenWorkspace::Discover::UTMIconLoader,PenWorkspace::Discover::UTMIconLoader,WindowsInternal::Shell::UnifiedTile::IUnifiedTile * &>(PenWorkspace::Discover::UTMIconLoader * *,WindowsInternal::Shell::UnifiedTile::IUnifiedTile * &);
			long MakeAndInitialize<PositionerPriority,PositionerPriority,unsigned long &>(PositionerPriority * *,unsigned long &);
			long MakeAndInitialize<PresentationReadyChangedEventArgs,PresentationReadyChangedEventArgs,bool &>(PresentationReadyChangedEventArgs * *,bool &);
			long MakeAndInitialize<SearchAppDesktopExperienceView,Windows::Internal::Shell::Experience::IShellExperiencePositioner,IServiceProvider * &,TwinUI::Cortana::ISearchAppExperienceManagerNotification * &>(Windows::Internal::Shell::Experience::IShellExperiencePositioner * *,IServiceProvider * &,TwinUI::Cortana::ISearchAppExperienceManagerNotification * &);
			long MakeAndInitialize<SearchAppExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<ShellFeedsDesktopExperienceView,TwinUI::ShellFeeds::IShellFeedsDesktopExperienceView,IServiceProvider * &,TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification * &>(TwinUI::ShellFeeds::IShellFeedsDesktopExperienceView * *,IServiceProvider * &,TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification * &);
			long MakeAndInitialize<ShellFeedsExperienceManagerImpl,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<ShellPositionerProxy,IShellPositionerProxy,IShellPositionerManager * &,IApplicationView * &>(IShellPositionerProxy * *,IShellPositionerManager * &,IApplicationView * &);
			long MakeAndInitialize<SizeConversionViewInfo,SizeConversionViewInfo,IImmersiveMonitor * &,int &,int &,IApplicationViewTitlebarConfiguration * &>(Details::ComPtrRef<ComPtr<SizeConversionViewInfo> >,IImmersiveMonitor * &,int &,int &,IApplicationViewTitlebarConfiguration * &);
			long MakeAndInitialize<SizeConversionViewInfo,SizeConversionViewInfo,IImmersiveMonitor * &,int &,int &,IApplicationViewTitlebarConfiguration * &>(SizeConversionViewInfo * *,IImmersiveMonitor * &,int &,int &,IApplicationViewTitlebarConfiguration * &);
			long MakeAndInitialize<SnapAssistViewDismissalAnimationCoordinator,SnapAssistViewDismissalAnimationCoordinator,WeakReference::IWeakReference * &,IMultitaskingViewAnimation * &>(SnapAssistViewDismissalAnimationCoordinator * *,WeakReference::IWeakReference * &,IMultitaskingViewAnimation * &);
			long MakeAndInitialize<StubImmersiveApplication,StubImmersiveApplication,unsigned short const * &>(StubImmersiveApplication * *,unsigned short const * &);
			long MakeAndInitialize<SwitchItemCloseAnimationCoordinator,SwitchItemCloseAnimationCoordinator,ISwitchThumbnailFactory * &,_GUID const &>(SwitchItemCloseAnimationCoordinator * *,ISwitchThumbnailFactory * &,_GUID const &);
			long MakeAndInitialize<SwitchItemFilteredCollection,SwitchItemFilteredCollection,IObservableObjectArray * &>(SwitchItemFilteredCollection * *,IObservableObjectArray * &);
			long MakeAndInitialize<SwitchItemThumbnailElement,IMultitaskingViewElement,ThumbnailSizeMetrics const &,ISwitchThumbnailFactory * const &,ISwitchItem * const &>(IMultitaskingViewElement * *,ThumbnailSizeMetrics const &,ISwitchThumbnailFactory * const &,ISwitchItem * const &);
			long MakeAndInitialize<SystemTray::TrayInfoTipAppInfo,Windows::ApplicationModel::IAppInfo,HSTRING__ * &>(Windows::ApplicationModel::IAppInfo * *,HSTRING__ * &);
			long MakeAndInitialize<SystemTray::TrayNotifyCallback,SystemTray::TrayNotifyCallback,HSTRING__ * &>(SystemTray::TrayNotifyCallback * *,HSTRING__ * &);
			long MakeAndInitialize<TabAppPolicySettings,Windows::Internal::ComposableShell::Tabs::IBrokeredTabAppPolicySettings,IServiceProvider * &>(Windows::Internal::ComposableShell::Tabs::IBrokeredTabAppPolicySettings * *,IServiceProvider * &);
			long MakeAndInitialize<TabShellHotKeyHandler,TabShellHotKeyHandler,IImmersiveWindowMessageService * &,IApplicationViewCollection * &,ITabViewManager * &,Windows::Internal::ComposableShell::Tabs::ITabDataModel * &,Windows::Internal::ComposableShell::Tabs::ITabController * &,ITitleBarController * &>(TabShellHotKeyHandler * *,IImmersiveWindowMessageService * &,IApplicationViewCollection * &,ITabViewManager * &,Windows::Internal::ComposableShell::Tabs::ITabDataModel * &,Windows::Internal::ComposableShell::Tabs::ITabController * &,ITitleBarController * &);
			long MakeAndInitialize<TabletModeCoverWindow,TabletModeCoverWindow,IUnknown * &>(TabletModeCoverWindow * *,IUnknown * &);
			long MakeAndInitialize<TabletModePositionerHandoffContext,TabletModePositionerHandoffContext,IAppLayout * &,bool &>(TabletModePositionerHandoffContext * *,IAppLayout * &,bool &);
			long MakeAndInitialize<ViewEventArgsForNavigationRequest,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs,Windows::Foundation::Collections::IPropertySet * &>(Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs * *,Windows::Foundation::Collections::IPropertySet * &);
			long MakeAndInitialize<ViewEventArgsForPropertyChanged,ViewEventArgsForPropertyChanged,unsigned short const (&)[12]>(ViewEventArgsForPropertyChanged * *,unsigned short const (&)[12]);
			long MakeAndInitialize<ViewEventArgsForPropertyChanged,ViewEventArgsForPropertyChanged,unsigned short const (&)[18]>(ViewEventArgsForPropertyChanged * *,unsigned short const (&)[18]);
			long MakeAndInitialize<ViewEventArgsForPropertyChanged,ViewEventArgsForPropertyChanged,unsigned short const * const &>(ViewEventArgsForPropertyChanged * *,unsigned short const * const &);
			long MakeAndInitialize<ViewEventArgsForPropertyChanged,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs,unsigned short const * &>(Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs * *,unsigned short const * &);
			long MakeAndInitialize<ViewEventArgsForSelectTargetView,ViewEventArgsForSelectTargetView,Windows::Foundation::Collections::IPropertySet * &,unsigned int &>(ViewEventArgsForSelectTargetView * *,Windows::Foundation::Collections::IPropertySet * &,unsigned int &);
			long MakeAndInitialize<ViewHostItemPropertyChangedArgs,ViewHostItemPropertyChangedArgs,unsigned short const (&)[18]>(ViewHostItemPropertyChangedArgs * *,unsigned short const (&)[18]);
			long MakeAndInitialize<ViewSizePreferencesChangedEventArgs,ViewSizePreferencesChangedEventArgs,Windows::Foundation::Size &>(ViewSizePreferencesChangedEventArgs * *,Windows::Foundation::Size &);
			long MakeAndInitialize<VirtualDesktop,VirtualDesktop,IVirtualDesktop * &,IThumbnailDeviceSource * &,IVirtualDesktopManagerInternal * &,IVirtualDesktopNotificationService * &>(VirtualDesktop * *,IVirtualDesktop * &,IThumbnailDeviceSource * &,IVirtualDesktopManagerInternal * &,IVirtualDesktopNotificationService * &);
			long MakeAndInitialize<VirtualDesktopAddAnimationCoordinator,VirtualDesktopAddAnimationCoordinator,int &,ISwitchThumbnailFactory * &>(VirtualDesktopAddAnimationCoordinator * *,int &,ISwitchThumbnailFactory * &);
			long MakeAndInitialize<VirtualDesktopGestureHandler,VirtualDesktopGestureHandler,IVirtualDesktopManagerInternal * &>(VirtualDesktopGestureHandler * *,IVirtualDesktopManagerInternal * &);
			long MakeAndInitialize<VirtualDesktopGroupedViewsEventListener,VirtualDesktopGroupedViewsEventListener,ITabViewManager * &,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter * &,IInspectable * &,IVirtualDesktopManagerPrivate * &,IVirtualDesktopPinnedAppsPrivate * &,IVirtualDesktopGroupedViewsPolicy * &,IVirtualDesktopLock * &>(VirtualDesktopGroupedViewsEventListener * *,ITabViewManager * &,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter * &,IInspectable * &,IVirtualDesktopManagerPrivate * &,IVirtualDesktopPinnedAppsPrivate * &,IVirtualDesktopGroupedViewsPolicy * &,IVirtualDesktopLock * &);
			long MakeAndInitialize<VirtualDesktopItem,VirtualDesktopItem,IVirtualDesktopManagerInternal * &,IVirtualDesktop * &>(VirtualDesktopItem * *,IVirtualDesktopManagerInternal * &,IVirtualDesktop * &);
			long MakeAndInitialize<VirtualDesktopItemCollection,VirtualDesktopItemCollection,IVirtualDesktopItemFactory * &,IVirtualDesktopManagerInternal * &,IVirtualDesktopNotificationService * &>(VirtualDesktopItemCollection * *,IVirtualDesktopItemFactory * &,IVirtualDesktopManagerInternal * &,IVirtualDesktopNotificationService * &);
			long MakeAndInitialize<VirtualDesktopItemFactory,VirtualDesktopItemFactory,IVirtualDesktopManagerInternal * &>(VirtualDesktopItemFactory * *,IVirtualDesktopManagerInternal * &);
			long MakeAndInitialize<VirtualDesktopPersistence,VirtualDesktopPersistence,IVirtualDesktopRegistryHelpers * &>(VirtualDesktopPersistence * *,IVirtualDesktopRegistryHelpers * &);
			long MakeAndInitialize<VirtualDesktopRemoveAnimationCoordinator,VirtualDesktopRemoveAnimationCoordinator,VirtualDesktopMetrics const &,int &,ISwitchThumbnailFactory * &>(VirtualDesktopRemoveAnimationCoordinator * *,VirtualDesktopMetrics const &,int &,ISwitchThumbnailFactory * &);
			long MakeAndInitialize<VirtualDesktopSwitchAnimator,VirtualDesktopSwitchAnimator,IVirtualDesktopManagerPrivate * &,IVirtualDesktopAnimationSyncNotificationServicePrivate * &>(VirtualDesktopSwitchAnimator * *,IVirtualDesktopManagerPrivate * &,IVirtualDesktopAnimationSyncNotificationServicePrivate * &);
			long MakeAndInitialize<VirtualDesktopTabletModeNotificationListener,VirtualDesktopTabletModeNotificationListener,IVirtualDesktopTabletModePolicy * &,IServiceProvider * &>(VirtualDesktopTabletModeNotificationListener * *,IVirtualDesktopTabletModePolicy * &,IServiceProvider * &);
			long MakeAndInitialize<VirtualDesktopThumbnailWindowFilter,VirtualDesktopThumbnailWindowFilter,IVirtualDesktopManagerInternal * &,ITabletModeController * &,IVirtualDesktopNotificationService * &>(VirtualDesktopThumbnailWindowFilter * *,IVirtualDesktopManagerInternal * &,ITabletModeController * &,IVirtualDesktopNotificationService * &);
			long MakeAndInitialize<VirtualDesktopWindowMoveManager,VirtualDesktopWindowMoveManager,IVirtualDesktopManagerPrivate * &,IVirtualDesktopCollection * &,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopPinnedAppsPrivate * &>(VirtualDesktopWindowMoveManager * *,IVirtualDesktopManagerPrivate * &,IVirtualDesktopCollection * &,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopPinnedAppsPrivate * &);
			long MakeAndInitialize<VirtualDesktopsApi,VirtualDesktopsApi,IVirtualDesktopManagerPrivate * &,IVirtualDesktopCollection * &,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopWindowMoveManager * &,IVirtualDesktopLock * &>(VirtualDesktopsApi * *,IVirtualDesktopManagerPrivate * &,IVirtualDesktopCollection * &,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopWindowMoveManager * &,IVirtualDesktopLock * &);
			long MakeAndInitialize<VirtualPinnedAppsHandler,VirtualPinnedAppsHandler,IVirtualDesktopManagerPrivate * &,IVirtualDesktopRegistryHelpers * &,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopGroupedViewsPolicy * &,IVirtualDesktopLock * &>(VirtualPinnedAppsHandler * *,IVirtualDesktopManagerPrivate * &,IVirtualDesktopRegistryHelpers * &,IVirtualDesktopVisibilityPolicy * &,IVirtualDesktopGroupedViewsPolicy * &,IVirtualDesktopLock * &);
			long MakeAndInitialize<WeakReference::CWeakReference<CAltTabViewHost>,WeakReference::CWeakReference<CAltTabViewHost>,CAltTabViewHost * &>(WeakReference::CWeakReference<CAltTabViewHost> * *,CAltTabViewHost * &);
			long MakeAndInitialize<WeakReference::CWeakReference<CMultitaskingViewElementBase>,WeakReference::CWeakReference<CMultitaskingViewElementBase>,CMultitaskingViewElementBase * &>(WeakReference::CWeakReference<CMultitaskingViewElementBase> * *,CMultitaskingViewElementBase * &);
			long MakeAndInitialize<WeakReference::CWeakReference<CPPIAllUpViewHost>,WeakReference::CWeakReference<CPPIAllUpViewHost>,CPPIAllUpViewHost * &>(WeakReference::CWeakReference<CPPIAllUpViewHost> * *,CPPIAllUpViewHost * &);
			long MakeAndInitialize<WeakReference::CWeakReference<CScrollButtonContainer>,WeakReference::CWeakReference<CScrollButtonContainer>,CScrollButtonContainer * &>(WeakReference::CWeakReference<CScrollButtonContainer> * *,CScrollButtonContainer * &);
			long MakeAndInitialize<WeakReference::CWeakReference<CScrollViewerHost>,WeakReference::CWeakReference<CScrollViewerHost>,CScrollViewerHost * &>(WeakReference::CWeakReference<CScrollViewerHost> * *,CScrollViewerHost * &);
			long MakeAndInitialize<WeakReference::CWeakReference<CSnapAssistViewHost>,WeakReference::CWeakReference<CSnapAssistViewHost>,CSnapAssistViewHost * &>(WeakReference::CWeakReference<CSnapAssistViewHost> * *,CSnapAssistViewHost * &);
			long MakeAndInitialize<WeakReference::CWeakReference<CSwitchItemElement>,WeakReference::CWeakReference<CSwitchItemElement>,CSwitchItemElement * &>(WeakReference::CWeakReference<CSwitchItemElement> * *,CSwitchItemElement * &);
			long MakeAndInitialize<WeakReference::CWeakReference<CSwitchItemGrid>,WeakReference::CWeakReference<CSwitchItemGrid>,CSwitchItemGrid * &>(WeakReference::CWeakReference<CSwitchItemGrid> * *,CSwitchItemGrid * &);
			long MakeAndInitialize<WeakReference::CWeakReference<CVirtualDesktopBarElement>,WeakReference::CWeakReference<CVirtualDesktopBarElement>,CVirtualDesktopBarElement * &>(WeakReference::CWeakReference<CVirtualDesktopBarElement> * *,CVirtualDesktopBarElement * &);
			long MakeAndInitialize<WeakReference::CWeakReference<IUnknown>,WeakReference::CWeakReference<IUnknown>,IUnknown * &>(WeakReference::CWeakReference<IUnknown> * *,IUnknown * &);
			long MakeAndInitialize<WeakReference::CWeakReference<SwitchItemFilteredCollection>,WeakReference::CWeakReference<SwitchItemFilteredCollection>,SwitchItemFilteredCollection * &>(WeakReference::CWeakReference<SwitchItemFilteredCollection> * *,SwitchItemFilteredCollection * &);
			long MakeAndInitialize<WeakReference::CWeakReference<SwitchItemThumbnailElement>,WeakReference::CWeakReference<SwitchItemThumbnailElement>,SwitchItemThumbnailElement * &>(WeakReference::CWeakReference<SwitchItemThumbnailElement> * *,SwitchItemThumbnailElement * &);
			long MakeAndInitialize<Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs,Windows::Internal::ComposableShell::Tabs::ITabDroppedEventArgs,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId &,Windows::Internal::ComposableShell::Tabs::ShellTabId &,int &>(Windows::Internal::ComposableShell::Tabs::ITabDroppedEventArgs * *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId &,Windows::Internal::ComposableShell::Tabs::ShellTabId &,int &);
			long MakeAndInitialize<Windows::Internal::ComposableShell::Tabs::TabViewProvidedEventArgs,Windows::Internal::ComposableShell::Tabs::ITabViewProvidedEventArgs,Windows::Internal::ComposableShell::Tabs::ShellTabId &,int &>(Windows::Internal::ComposableShell::Tabs::ITabViewProvidedEventArgs * *,Windows::Internal::ComposableShell::Tabs::ShellTabId &,int &);
			long MakeAndInitialize<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListener,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListener,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter * &>(Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListener * *,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter * &);
			long MakeAndInitialize<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewTitleChangeListener,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewTitleChangeListener,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter * &>(Windows::Internal::Shell::TaskFlow::DataEngine::AppViewTitleChangeListener * *,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter * &);
			long MakeAndInitialize<Windows::Internal::Shell::TaskFlow::DataEngine::UserPresenceListener,Windows::Internal::Shell::TaskFlow::DataEngine::UserPresenceListener,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter * &>(Windows::Internal::Shell::TaskFlow::DataEngine::UserPresenceListener * *,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter * &);
			long MakeAndInitialize<XamlExplorerHostWindow,XamlExplorerHostWindow,IXamlExplorerHostWindowCreatedCallback * &,unsigned long &,IPrivilegedPresentationOperations * &,IXamlExplorerHost * &>(XamlExplorerHostWindow * *,IXamlExplorerHostWindowCreatedCallback * &,unsigned long &,IPrivilegedPresentationOperations * &,IXamlExplorerHost * &);
			unsigned long SafeUnknownDecrementReference(long volatile &);
			unsigned long SafeUnknownIncrementReference(long volatile &);
			void RaiseException(long,unsigned long);
		};

		struct ErrorPropagationPolicyTraits<-1>
		{
			static long FireCompletionErrorPropagationPolicyFilter(long,IUnknown *,void *);
			static long FireProgressErrorPropagationPolicyFilter(long,IUnknown *,void *);
		};

		class EventSource<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_18fc82b29393100b2544100e203bc48c> >(<lambda_18fc82b29393100b2544100e203bc48c>);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::IEventHandler<IInspectable *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::IEventHandler<IInspectable *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_9d75cb42004a5c80c8af25a46cf0553c> >(<lambda_9d75cb42004a5c80c8af25a46cf0553c>);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_f3e2ba377ecf56fb3aa66def83e00359> >(<lambda_f3e2ba377ecf56fb3aa66def83e00359>);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::ITreeNode *,Windows::Internal::ComposableShell::ITreeNodeEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::ITreeNode *,Windows::Internal::ComposableShell::ITreeNodeEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_79a5f62d5b885a1e6266f9e6030b7c30> >(<lambda_79a5f62d5b885a1e6266f9e6030b7c30>);
		public:
			long InvokeAll<Windows::Internal::ComposableShell::TreeNodeBase *,Windows::Internal::ComposableShell::NodeChangedEventArgs *>(Windows::Internal::ComposableShell::TreeNodeBase *,Windows::Internal::ComposableShell::NodeChangedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_dff9a42c92dbb58eb1d18d74326918dd> >(<lambda_dff9a42c92dbb58eb1d18d74326918dd>);
		public:
			long InvokeAll<VirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *>(VirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_120d50d771ef1c4f54c8117f11c1c164> >(<lambda_120d50d771ef1c4f54c8117f11c1c164>);
		public:
			long InvokeAll<TabViewManager *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *>(TabViewManager *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabSetMediator *,Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabSetMediator *,Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_f4c9be16395340f7ad6a68bc2f8073dc> >(<lambda_f4c9be16395340f7ad6a68bc2f8073dc>);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_9e0ae8d731b4f3e7b636b1866b829d88> >(<lambda_9e0ae8d731b4f3e7b636b1866b829d88>);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_6467f9191169c2bc35f91af727f9d16b> >(<lambda_6467f9191169c2bc35f91af727f9d16b>);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabViewProvidedEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabViewProvidedEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_57bd99529ad7d3cbc0fb4c168a91a308> >(<lambda_57bd99529ad7d3cbc0fb4c168a91a308>);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithVisibility *,Windows::Internal::Shell::Desktop::ViewManagerInterop::IVisibilityChangedEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithVisibility *,Windows::Internal::Shell::Desktop::ViewManagerInterop::IVisibilityChangedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_6788242ee63e21dca0a125830d496daa> >(<lambda_6788242ee63e21dca0a125830d496daa>);
			long DoInvoke<<lambda_7910202c5a8ff16e0244c5ffb5eab525> >(<lambda_7910202c5a8ff16e0244c5ffb5eab525>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *>,InvokeModeOptions<2> >();
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_0b5fb972904d11c724cc9fe376f39de7> >(<lambda_0b5fb972904d11c724cc9fe376f39de7>);
			long DoInvoke<<lambda_2b4e52e002df5ddb490bb6e80dcb767a> >(<lambda_2b4e52e002df5ddb490bb6e80dcb767a>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect>,InvokeModeOptions<2> >();
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_68949f556153738f7c1e1d8e42eb57ef> >(<lambda_68949f556153738f7c1e1d8e42eb57ef>);
			long DoInvoke<<lambda_9c8d9b8069f993990b80997feb9680e3> >(<lambda_9c8d9b8069f993990b80997feb9680e3>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *>,InvokeModeOptions<2> >();
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_93fad9a9cd16745ec3a421ef37a54f85> >(<lambda_93fad9a9cd16745ec3a421ef37a54f85>);
			long DoInvoke<<lambda_eeea9621d87ba9507a40bff9472ea3ff> >(<lambda_eeea9621d87ba9507a40bff9472ea3ff>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *>,InvokeModeOptions<2> >();
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_2b22f8ed1186cb0c238f8cc81a41386e> >(<lambda_2b22f8ed1186cb0c238f8cc81a41386e>);
			long DoInvoke<<lambda_9dd196aade3b74d6ebabba0926cd735f> >(<lambda_9dd196aade3b74d6ebabba0926cd735f>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int>,InvokeModeOptions<2> >();
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_0f38df34ab0b55fc3a1f601fa7c4ce08> >(<lambda_0f38df34ab0b55fc3a1f601fa7c4ce08>);
			long DoInvoke<<lambda_137a958745c6adebc7e5e7c227296fee> >(<lambda_137a958745c6adebc7e5e7c227296fee>);
			long DoInvoke<<lambda_e76785eefaca58383fb180da28b78939> >(<lambda_e76785eefaca58383fb180da28b78939>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *>,InvokeModeOptions<2> >();
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_f7183679cc6b687de449de5d3d056096> >(<lambda_f7183679cc6b687de449de5d3d056096>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *>,InvokeModeOptions<2> >();
			long Remove(EventRegistrationToken);
			~EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *>,InvokeModeOptions<2> >();
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_8c74985eb182a9929bdbca70e6e0c592> >(<lambda_8c74985eb182a9929bdbca70e6e0c592>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *>,InvokeModeOptions<2> >();
			long Remove(EventRegistrationToken);
			~EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *>,InvokeModeOptions<2> >();
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::JumpViewExperienceManager *,Windows::Internal::Shell::Experience::JumpViewExperienceEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::JumpViewExperienceManager *,Windows::Internal::Shell::Experience::JumpViewExperienceEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_26d2ea429dbc4a2f9ab7f3444fe459d5> >(<lambda_26d2ea429dbc4a2f9ab7f3444fe459d5>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::JumpViewExperienceManager *,Windows::Internal::Shell::Experience::JumpViewExperienceEventArgs *>,InvokeModeOptions<2> >();
			long InvokeAll<CJumpViewExperienceManager *,Windows::Internal::Shell::Experience::IJumpViewExperienceEventArgs *>(CJumpViewExperienceManager *,Windows::Internal::Shell::Experience::IJumpViewExperienceEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_07e5c00b9399e10e8bc2914989c37cb1> >(<lambda_07e5c00b9399e10e8bc2914989c37cb1>);
			long DoInvoke<<lambda_f4076b844f394c201f6c95811a6b7602> >(<lambda_f4076b844f394c201f6c95811a6b7602>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *>,InvokeModeOptions<2> >();
			long Remove(EventRegistrationToken);
			~EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *>,InvokeModeOptions<2> >();
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,int>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,int> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_c34e1150c827eefe393f0941e07fc445> >(<lambda_c34e1150c827eefe393f0941e07fc445>);
		public:
			long Remove(EventRegistrationToken);
			~EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,int>,InvokeModeOptions<2> >();
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_107e2df1239c9f44dfee9d64da397eb2> >(<lambda_107e2df1239c9f44dfee9d64da397eb2>);
			long DoInvoke<<lambda_e6e0eff2c801ccf50926d67388532b90> >(<lambda_e6e0eff2c801ccf50926d67388532b90>);
		public:
			EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *>,InvokeModeOptions<-2> >();
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler *,void *,EventRegistrationToken *);
			long DoInvoke<<lambda_01545e3462c885316a734816cc3d9dbf> >(<lambda_01545e3462c885316a734816cc3d9dbf>);
		public:
			long Remove(EventRegistrationToken);
		};

		class FtmBase
		{
		protected:
			long CanCastTo(_GUID const &,void * *);
		public:
			FtmBase();
			virtual long DisconnectObject(unsigned long);
			virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
			virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
			virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
			virtual long ReleaseMarshalData(IStream *);
			virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
		};

		struct Implements<RuntimeClassFlags<2>,ChainInterfaces<IAnimatableMultitaskingViewElement,IMultitaskingViewElement,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			Implements<RuntimeClassFlags<2>,ChainInterfaces<IAnimatableMultitaskingViewElement,IMultitaskingViewElement,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct Implements<RuntimeClassFlags<2>,ChainInterfaces<IFrameLevelAnimationCoordinator,IAnimationCoordinator,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IMultitaskingViewAnimation>
		{
			Implements<RuntimeClassFlags<2>,ChainInterfaces<IFrameLevelAnimationCoordinator,IAnimationCoordinator,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IMultitaskingViewAnimation>();
		};

		struct Implements<RuntimeClassFlags<2>,ChainInterfaces<IPPIAllUpViewHost,IMultitaskingViewHost,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveMonitorNotification>
		{
			Implements<RuntimeClassFlags<2>,ChainInterfaces<IPPIAllUpViewHost,IMultitaskingViewHost,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveMonitorNotification>();
		};

		struct Implements<RuntimeClassFlags<2>,CloakedIid<IMarshal> >
		{
			Implements<RuntimeClassFlags<2>,CloakedIid<IMarshal> >();
		};

		struct Implements<RuntimeClassFlags<2>,IAnimationCoordinator>
		{
			Implements<RuntimeClassFlags<2>,IAnimationCoordinator>();
		};

		struct Implements<RuntimeClassFlags<2>,IObservableItem>
		{
			Implements<RuntimeClassFlags<2>,IObservableItem>();
		};

		struct Implements<RuntimeClassFlags<2>,IObservableObjectArray>
		{
			Implements<RuntimeClassFlags<2>,IObservableObjectArray>();
		};

		struct Implements<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,ChainInterfaces<IRawElementProviderSimple2,IRawElementProviderSimple,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IRawElementProviderFragment,IRawElementProviderFragmentRoot,IInvokeProvider,ISelectionProvider,ISelectionItemProvider,IScrollProvider,IScrollItemProvider>,Implements<RuntimeClassFlags<2>,IGridProvider,IGridItemProvider> >
		{
			Implements<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,ChainInterfaces<IRawElementProviderSimple2,IRawElementProviderSimple,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IRawElementProviderFragment,IRawElementProviderFragmentRoot,IInvokeProvider,ISelectionProvider,ISelectionItemProvider,IScrollProvider,IScrollItemProvider>,Implements<RuntimeClassFlags<2>,IGridProvider,IGridItemProvider> >();
		};

		struct InvokeTraits<-2>
		{
			static long InvokeDelegates<<lambda_0cd7030a9deebe04bdab590b3d524da7>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithVisibility *,Windows::Internal::Shell::Desktop::ViewManagerInterop::IVisibilityChangedEventArgs *> >(<lambda_0cd7030a9deebe04bdab590b3d524da7>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithVisibility *,Windows::Internal::Shell::Desktop::ViewManagerInterop::IVisibilityChangedEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_107e2df1239c9f44dfee9d64da397eb2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >(<lambda_107e2df1239c9f44dfee9d64da397eb2>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_18fc82b29393100b2544100e203bc48c>,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >(<lambda_18fc82b29393100b2544100e203bc48c>,Details::EventTargetArray *,EventSource<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_57bd99529ad7d3cbc0fb4c168a91a308>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabViewProvidedEventArgs *> >(<lambda_57bd99529ad7d3cbc0fb4c168a91a308>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabViewProvidedEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_6467f9191169c2bc35f91af727f9d16b>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *> >(<lambda_6467f9191169c2bc35f91af727f9d16b>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_9e0ae8d731b4f3e7b636b1866b829d88>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> >(<lambda_9e0ae8d731b4f3e7b636b1866b829d88>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_e6e0eff2c801ccf50926d67388532b90>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >(<lambda_e6e0eff2c801ccf50926d67388532b90>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_f3e2ba377ecf56fb3aa66def83e00359>,Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *> >(<lambda_f3e2ba377ecf56fb3aa66def83e00359>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_f4c9be16395340f7ad6a68bc2f8073dc>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabSetMediator *,Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs *> >(<lambda_f4c9be16395340f7ad6a68bc2f8073dc>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabSetMediator *,Windows::Internal::ComposableShell::Tabs::TabWindowSnappedWithOthersEventArgs *>,InvokeModeOptions<-2> > *);
		};

		struct InvokeTraits<2>
		{
			static long InvokeDelegates<<lambda_01545e3462c885316a734816cc3d9dbf>,Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler>(<lambda_01545e3462c885316a734816cc3d9dbf>,Details::EventTargetArray *,EventSource<Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_07e5c00b9399e10e8bc2914989c37cb1>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> >(<lambda_07e5c00b9399e10e8bc2914989c37cb1>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_0b5fb972904d11c724cc9fe376f39de7>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect> >(<lambda_0b5fb972904d11c724cc9fe376f39de7>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_0f38df34ab0b55fc3a1f601fa7c4ce08>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *> >(<lambda_0f38df34ab0b55fc3a1f601fa7c4ce08>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_120d50d771ef1c4f54c8117f11c1c164>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> >(<lambda_120d50d771ef1c4f54c8117f11c1c164>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_137a958745c6adebc7e5e7c227296fee>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *> >(<lambda_137a958745c6adebc7e5e7c227296fee>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_26d2ea429dbc4a2f9ab7f3444fe459d5>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::JumpViewExperienceManager *,Windows::Internal::Shell::Experience::JumpViewExperienceEventArgs *> >(<lambda_26d2ea429dbc4a2f9ab7f3444fe459d5>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::JumpViewExperienceManager *,Windows::Internal::Shell::Experience::JumpViewExperienceEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_2b22f8ed1186cb0c238f8cc81a41386e>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int> >(<lambda_2b22f8ed1186cb0c238f8cc81a41386e>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_2b4e52e002df5ddb490bb6e80dcb767a>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect> >(<lambda_2b4e52e002df5ddb490bb6e80dcb767a>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_2e0b1c39c089e5aecfc9235c04f458e0>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> >(<lambda_2e0b1c39c089e5aecfc9235c04f458e0>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_400cf0bc2764b957a92c04371e65a1fa>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *> >(<lambda_400cf0bc2764b957a92c04371e65a1fa>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_45ccc3e8749ae13d103bd24117a6cb73>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> >(<lambda_45ccc3e8749ae13d103bd24117a6cb73>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_6788242ee63e21dca0a125830d496daa>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> >(<lambda_6788242ee63e21dca0a125830d496daa>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_68949f556153738f7c1e1d8e42eb57ef>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> >(<lambda_68949f556153738f7c1e1d8e42eb57ef>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_6e6af11e347cab1aac75bc8678153b8f>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> >(<lambda_6e6af11e347cab1aac75bc8678153b8f>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_7910202c5a8ff16e0244c5ffb5eab525>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> >(<lambda_7910202c5a8ff16e0244c5ffb5eab525>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_79a5f62d5b885a1e6266f9e6030b7c30>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::ITreeNode *,Windows::Internal::ComposableShell::ITreeNodeEventArgs *> >(<lambda_79a5f62d5b885a1e6266f9e6030b7c30>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::ITreeNode *,Windows::Internal::ComposableShell::ITreeNodeEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_80f851d88800f834d2a3ef88a36b1460>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> >(<lambda_80f851d88800f834d2a3ef88a36b1460>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_84e9384144d6ba1bd249a4c4588adc05>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> >(<lambda_84e9384144d6ba1bd249a4c4588adc05>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_8c74985eb182a9929bdbca70e6e0c592>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> >(<lambda_8c74985eb182a9929bdbca70e6e0c592>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_93fad9a9cd16745ec3a421ef37a54f85>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *> >(<lambda_93fad9a9cd16745ec3a421ef37a54f85>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_947b3ec738187c517cfd986e9b41a2e5>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *> >(<lambda_947b3ec738187c517cfd986e9b41a2e5>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_9c8d9b8069f993990b80997feb9680e3>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> >(<lambda_9c8d9b8069f993990b80997feb9680e3>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_9d75cb42004a5c80c8af25a46cf0553c>,Windows::Foundation::IEventHandler<IInspectable *> >(<lambda_9d75cb42004a5c80c8af25a46cf0553c>,Details::EventTargetArray *,EventSource<Windows::Foundation::IEventHandler<IInspectable *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_9dd196aade3b74d6ebabba0926cd735f>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int> >(<lambda_9dd196aade3b74d6ebabba0926cd735f>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_b3a123d132742ed9bb736a7f1db72d4f>,Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> >(<lambda_b3a123d132742ed9bb736a7f1db72d4f>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_c34e1150c827eefe393f0941e07fc445>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,int> >(<lambda_c34e1150c827eefe393f0941e07fc445>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,int>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_dff9a42c92dbb58eb1d18d74326918dd>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *> >(<lambda_dff9a42c92dbb58eb1d18d74326918dd>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_e76785eefaca58383fb180da28b78939>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *> >(<lambda_e76785eefaca58383fb180da28b78939>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IBaseExperienceManager *,Windows::Internal::Shell::Experience::IVisibilityChangedEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_eeb1c1c0fb02826426a12229466118a6>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> >(<lambda_eeb1c1c0fb02826426a12229466118a6>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_eeea9621d87ba9507a40bff9472ea3ff>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *> >(<lambda_eeea9621d87ba9507a40bff9472ea3ff>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_f4076b844f394c201f6c95811a6b7602>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> >(<lambda_f4076b844f394c201f6c95811a6b7602>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_f7183679cc6b687de449de5d3d056096>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> >(<lambda_f7183679cc6b687de449de5d3d056096>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_fb952677536a34a05459944fcc1a9ba6>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> >(<lambda_fb952677536a34a05459944fcc1a9ba6>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *>,InvokeModeOptions<2> > *);
		};

		class Module<1,Details::DefaultModule<1> >
		{
			static bool StaticInitialize();
			static bool isInitialized;
		protected:
			static _RTL_RUN_ONCE initOnceInProc_;
		public:
			static Details::DefaultModule<1> & Create();
			virtual long RegisterCOMObject(unsigned short const *,_GUID *,IClassFactory * *,unsigned long *,unsigned int);
			virtual long RegisterWinRTObject(unsigned short const *,unsigned short const * *,<unnamed-type-RO_REGISTRATION_COOKIE> * *,unsigned int);
			virtual long UnregisterCOMObject(unsigned short const *,unsigned long *,unsigned int);
			virtual long UnregisterWinRTObject(unsigned short const *,<unnamed-type-RO_REGISTRATION_COOKIE> *);
			virtual unsigned long DecrementObjectCount();
			virtual unsigned long IncrementObjectCount();
			virtual ~Module<1,Details::DefaultModule<1> >();
		};

		class Module<1,Platform::Details::InProcModule>
		{
		protected:
			static _RTL_RUN_ONCE initOnceInProc_;
		public:
			virtual long RegisterCOMObject(wchar_t const *,_GUID *,IClassFactory * *,unsigned long *,unsigned int);
			virtual long RegisterWinRTObject(wchar_t const *,wchar_t const * *,<unnamed-type-RO_REGISTRATION_COOKIE> * *,unsigned int);
			virtual long UnregisterCOMObject(wchar_t const *,unsigned long *,unsigned int);
			virtual long UnregisterWinRTObject(wchar_t const *,<unnamed-type-RO_REGISTRATION_COOKIE> *);
			virtual unsigned long DecrementObjectCount();
			virtual unsigned long IncrementObjectCount();
		};

		struct RuntimeClass<CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >
		{
			RuntimeClass<CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >();
		};

		struct RuntimeClass<Implements<RuntimeClassFlags<2>,IApplicationViewIconLoader,FtmBase> >
		{
			RuntimeClass<Implements<RuntimeClassFlags<2>,IApplicationViewIconLoader,FtmBase> >();
		};

		struct RuntimeClass<Implements<RuntimeClassFlags<2>,IIconLoadingFunctions,FtmBase> >
		{
			RuntimeClass<Implements<RuntimeClassFlags<2>,IIconLoadingFunctions,FtmBase> >();
		};

		struct RuntimeClass<Implements<Windows::Foundation::Collections::IVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IObservableVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >,FtmBase>
		{
			virtual ~RuntimeClass<Implements<Windows::Foundation::Collections::IVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IIterable<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,Windows::Foundation::Collections::IObservableVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<10>,CImmersiveShellComponentWithSite,IImmersiveShellStressTool>
		{
			RuntimeClass<RuntimeClassFlags<10>,CImmersiveShellComponentWithSite,IImmersiveShellStressTool>();
		};

		struct RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::Experience::ICortanaShownEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::Experience::ICortanaShownEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg>
		{
			RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg>();
		};

		struct RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg>
		{
			RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg>();
		};

		struct RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,AccessibleElementBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,AccessibleElementBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CCommonApplicationViewArrangePositionImpl,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CCommonApplicationViewArrangePositionImpl,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CCommonApplicationViewOcclusionPositionImpl,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CCommonApplicationViewOcclusionPositionImpl,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<IDesktopPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IDragDropViewCreationHandler,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<IDesktopPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IDragDropViewCreationHandler,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<IDesktopPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IDragDropViewCreationHandler,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener,IPrivilegedOperationsConsumer>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<IKioskPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IPositionerApplicationClosePolicy,IApplicationViewChangeListener,IInternalFullScreenHandler,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<IKioskPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IPositionerApplicationClosePolicy,IApplicationViewChangeListener,IInternalFullScreenHandler,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<ISurfaceHubPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<ISurfaceHubPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IApplicationViewChangeListener,ITabletModeChangeListener>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<IVoiceAssistantPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IInputHostLayoutChanges,IAppSwitcherNotification,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<IVoiceAssistantPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IInputHostLayoutChanges,IAppSwitcherNotification,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,IPrivilegedOperationsConsumer>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IActivationHints,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IActivationHints,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IAppLayoutCacheInternal,IAppLayoutCache,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IAppLayoutCacheInternal,IAppLayoutCache,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ICustomShellManager,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ICustomShellManager,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ICustomShellManager,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IDesktopVisibilityService,IFullScreenPositionerNotification,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IDesktopVisibilityService,IFullScreenPositionerNotification,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IDesktopVisibilityService,IFullScreenPositionerNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IEmulatedFullScreenManager,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IEmulatedFullScreenManager,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IRemoteLauncherForegroundHandler,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IRemoteLauncherForegroundHandler,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IViewPresentationMediator,IPrivilegedOperationsConsumer,IWindowManagementShowMoveSizeEvents,IWindowManagementChannelSeverEvents,IWindowManagementWindowGroupingEvents,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IViewPresentationMediator,IPrivilegedOperationsConsumer,IWindowManagementShowMoveSizeEvents,IWindowManagementChannelSeverEvents,IWindowManagementWindowGroupingEvents,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IViewPresentationMediator,IPrivilegedOperationsConsumer,IWindowManagementShowMoveSizeEvents,IWindowManagementChannelSeverEvents,IWindowManagementWindowGroupingEvents,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ITabletModePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITabletModePositionerInternal,ITabletModePositionerPriv,IStartDismissalPolicy,IShellPositionerViewHandoff,IApplicationViewChangeListener,ITabletModeChangeListener,IImmersiveMonitorNotification,Implements<RuntimeClassFlags<2>,IShellPositionerWindowingDelegationHandler,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification,IShellTargetingChangeNotification,IFullScreenPositionerPrivateNotification,ITransitionNotification> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ITabletModePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITabletModePositionerInternal,ITabletModePositionerPriv,IStartDismissalPolicy,IShellPositionerViewHandoff,IApplicationViewChangeListener,ITabletModeChangeListener,IImmersiveMonitorNotification,Implements<RuntimeClassFlags<2>,IShellPositionerWindowingDelegationHandler,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification,IShellTargetingChangeNotification,IFullScreenPositionerPrivateNotification,ITransitionNotification> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ITabletModePositionerManagerPriv,ITabletModePositionerManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IWindowManagementShowMoveSizeEvents>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ITabletModePositionerManagerPriv,ITabletModePositionerManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IWindowManagementShowMoveSizeEvents>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ITabletModeViewManagerInternal,ITabletModeViewManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IEdgeUiTouchInvocation,IEdgeUiMouseInvocation>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ITabletModeViewManagerInternal,ITabletModeViewManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IEdgeUiTouchInvocation,IEdgeUiMouseInvocation>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IAppTransitionManager,IAppTransitionTargetManagerSink,IApplicationViewChangeListener>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IAppTransitionManager,IAppTransitionTargetManagerSink,IApplicationViewChangeListener>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IFullScreenManager,IFullScreenManagerPriv,IFullScreenNotificationService,IFullScreenPositionerNotification,IImmersiveMonitorNotification,IPrivilegedOperationsConsumer>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IFullScreenManager,IFullScreenManagerPriv,IFullScreenNotificationService,IFullScreenPositionerNotification,IImmersiveMonitorNotification,IPrivilegedOperationsConsumer>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IMultitaskingViewServiceProvider,IMultitaskingViewTaskScheduler>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IMultitaskingViewServiceProvider,IMultitaskingViewTaskScheduler>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IPeoplePaneViewManager,IPeopleExperienceHostManager,IApplicationViewChangeListener,ITabletModeChangeListener>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IPeoplePaneViewManager,IPeopleExperienceHostManager,IApplicationViewChangeListener,ITabletModeChangeListener>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IPerMonitorShellPositionerManager>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IPerMonitorShellPositionerManager>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IShellPositionerManager,IApplicationViewChangeListener,ITabletModeChangeListener,IShellPositionerActivationHandler,IShellPositionerFrameworkViewTypeChangedHandler,IShellPositionerPresentationRequestedHandler>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IShellPositionerManager,IApplicationViewChangeListener,ITabletModeChangeListener,IShellPositionerActivationHandler,IShellPositionerFrameworkViewTypeChangedHandler,IShellPositionerPresentationRequestedHandler>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ISwitchController>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ISwitchController>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IWindowManagementJointResizeEvents,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,IImmersiveRawInputKeyboardNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IWindowManagementJointResizeEvents,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,IImmersiveRawInputKeyboardNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IWindowSizeConversionLogicalClientToWindow,IImmersiveMonitorNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IWindowSizeConversionLogicalClientToWindow,IImmersiveMonitorNotification>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IWindowSizeConversionLogicalClientToWindow,IImmersiveMonitorNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewControllerBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewControllerBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewElementBase,ChainInterfaces<IAnimatableScrollViewer,IScrollViewer,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewElementBase,ChainInterfaces<IAnimatableScrollViewer,IScrollViewer,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewElementBase,IMultitaskingViewElementRoot,IFrameElement,IInputEaterElementNotifications,IMultitaskingViewDragProvider,ILightDismissElementHost>
		{
			RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewElementBase,IMultitaskingViewElementRoot,IFrameElement,IInputEaterElementNotifications,IMultitaskingViewDragProvider,ILightDismissElementHost>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewElementBase,ISwitchItemGrid,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,IMultitaskingViewTelemetryHost,IScrollableElement>
		{
			RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewElementBase,ISwitchItemGrid,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,IMultitaskingViewTelemetryHost,IScrollableElement>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewHostBase<IAllUpViewHost>,IXamlViewHost,IAllUpViewHostInternal,ITabletModeChangeListener,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewHostBase<IAllUpViewHost>,IXamlViewHost,IAllUpViewHostInternal,ITabletModeChangeListener,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewHostBase<IPPIAllUpViewHost>,IExternalDragHost>
		{
			RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewHostBase<IPPIAllUpViewHost>,IExternalDragHost>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewHostBase<ISnapAssistViewHost>,IInvocationAnimationHost,IAnimatedDismissableHost,IDismissalAnimationHost,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CMultitaskingViewHostBase<ISnapAssistViewHost>,IInvocationAnimationHost,IAnimatedDismissableHost,IDismissalAnimationHost,VirtualDesktopNotificationBase<IVirtualDesktopNotification> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,FtmBase,ITabletModeCoverWindow,ITabletModeChrome>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,FtmBase,ITabletModeCoverWindow,ITabletModeChrome>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IAppResizeOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IAppResizeOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IAppSwitchOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IAppSwitchOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IBackOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IBackOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IDesktopOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IDesktopOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IPPILayoutOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IPPILayoutOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<ITabletModePositionerOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<ITabletModePositionerOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IWindowArrangementOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CAppLayoutOperation,ChainInterfaces<IWindowArrangementOperation,IAppLayoutOperationBuilder,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CIAMSpecialWindowBase,IFallbackWindow,IImmersiveMonitorNotification,IRawElementProviderSimple,IInvokeProvider>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,CIAMSpecialWindowBase,IFallbackWindow,IImmersiveMonitorNotification,IRawElementProviderSimple,IInvokeProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,IDragVisual,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,IDragVisual,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,IDropFeedback,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,IDropFeedback,ITemporaryAppVisual,IImmersiveApplicationNotification,ITempAppVisualHost>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,IWindowArrangementView,ITabletModeInputCallback,IApplicationViewChangeListener,IDragVisualHost,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,IWindowArrangementView,ITabletModeInputCallback,IApplicationViewChangeListener,IDragVisualHost,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,Implements<RuntimeClassFlags<2>,IImmersiveLauncher,IImmersiveLauncherTrayNotify,IImmersiveShellHookNotification,IServiceProvider,IImmersiveShellComponent,IImmersiveLauncherCortana,IXamlLauncherStateCallback,IPrivilegedOperationsConsumer> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,Implements<RuntimeClassFlags<2>,IImmersiveLauncher,IImmersiveLauncherTrayNotify,IImmersiveShellHookNotification,IServiceProvider,IImmersiveShellComponent,IImmersiveLauncherCortana,IXamlLauncherStateCallback,IPrivilegedOperationsConsumer> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ChainInterfaces<IDropFeedbackItem,ITemporaryAppVisual,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveApplicationNotification,IDropFeedbackItemInternal>
		{
			RuntimeClass<RuntimeClassFlags<2>,ChainInterfaces<IDropFeedbackItem,ITemporaryAppVisual,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveApplicationNotification,IDropFeedbackItemInternal>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ChainInterfaces<IXamlExplorerHostWindowInternal,IXamlExplorerHostWindow,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,ChainInterfaces<IXamlExplorerHostWindowInternal,IXamlExplorerHostWindow,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CopyToViewValueSetBase,IOleWindow,IShouldSwitchToDesktop>
		{
			RuntimeClass<RuntimeClassFlags<2>,CopyToViewValueSetBase,IOleWindow,IShouldSwitchToDesktop>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IWindowingEnvironmentManager,IWindowingEnvironmentManagerInternal>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IWindowingEnvironmentManager,IWindowingEnvironmentManagerInternal>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IWindowingEnvironmentManager,IWindowingEnvironmentManagerInternal>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IApplicationViewCollectionManagement,IApplicationViewCollection,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IApplicationViewCollectionTestHook,IApplicationViewSwitcher,IApplicationViewFlashingNotification,IPrivilegedOperationsConsumer,IWindowManagementConstraintsEvents,IImmersiveApplicationNotification,IEnterpriseIdChangeNotification,IApplicationViewStateControl,IWindowOccludedChangeListener> >
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IApplicationViewCollectionManagement,IApplicationViewCollection,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IApplicationViewCollectionTestHook,IApplicationViewSwitcher,IApplicationViewFlashingNotification,IPrivilegedOperationsConsumer,IWindowManagementConstraintsEvents,IImmersiveApplicationNotification,IEnterpriseIdChangeNotification,IApplicationViewStateControl,IWindowOccludedChangeListener> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,IApplicationActivationHistory,IImmersiveWindowManager,IImmersiveMonitorNotification,IImmersiveWindowManagerInternal,IObjectProvider,IPresentedWindowOverride> >
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,IApplicationActivationHistory,IImmersiveWindowManager,IImmersiveMonitorNotification,IImmersiveWindowManagerInternal,IObjectProvider,IPresentedWindowOverride> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,IActiveZBand,IImmersiveSystemMode,IImmersiveSystemModeInternal,IActiveZBand,IImmersiveSystemModeNotificationServicePrivate,IActiveZBandNotificationServicePrivate,Implements<RuntimeClassFlags<2>,IImmersiveMonitorNotification,IDesktopVisibilityService,IDesktopVisibilityChangesNotification> >
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,IActiveZBand,IImmersiveSystemMode,IImmersiveSystemModeInternal,IActiveZBand,IImmersiveSystemModeNotificationServicePrivate,IActiveZBandNotificationServicePrivate,Implements<RuntimeClassFlags<2>,IImmersiveMonitorNotification,IDesktopVisibilityService,IDesktopVisibilityChangesNotification> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,IClassicWindowManagerPrivate,IApplicationActivationHistory,IClassicWindowManager,IClassicWindowPresentation,IClassicWindowCollectionRefresh,ITaskListChangeListener,IClassicWindowOwnershipQuery>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,IClassicWindowManagerPrivate,IApplicationActivationHistory,IClassicWindowManager,IClassicWindowPresentation,IClassicWindowCollectionRefresh,ITaskListChangeListener,IClassicWindowOwnershipQuery>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,IMultitaskingViewTaskCallback>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,IMultitaskingViewTaskCallback>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,IObjectArray>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,IObjectArray>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,IWindowingEnvironmentConfig,IWindowingEnvironmentConfigInternal>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,FtmBase,IWindowingEnvironmentConfig,IWindowingEnvironmentConfigInternal>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,IXamlExplorerHostWindowCreatedCallback>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,IXamlExplorerHostWindowCreatedCallback>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,HotTrackingElement,IMultitaskingViewGridElement,ISwitchItemElement,IGlyphButtonHost>
		{
			RuntimeClass<RuntimeClassFlags<2>,HotTrackingElement,IMultitaskingViewGridElement,ISwitchItemElement,IGlyphButtonHost>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IAppLayoutItemInternal,ChainInterfaces<IAppLayoutItemBuilder,IAppLayoutItem,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,IAppLayoutItemInternal,ChainInterfaces<IAppLayoutItemBuilder,IAppLayoutItem,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IApplicationViewChangeListener,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IApplicationViewChangeListener,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IAsyncCallback,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IAsyncCallback,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IAsyncCallback>
		{
			RuntimeClass<RuntimeClassFlags<2>,IAsyncCallback>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IDCompBatchAnimationCallback>
		{
			RuntimeClass<RuntimeClassFlags<2>,IDCompBatchAnimationCallback>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IImmersiveMonitorNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,IImmersiveMonitorNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IIndividualExperienceManagerFactory,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IIndividualExperienceManagerFactory,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ILockScreenDirectorServiceProvider,CImmersiveShellComponentWithGITSite>
		{
			RuntimeClass<RuntimeClassFlags<2>,ILockScreenDirectorServiceProvider,CImmersiveShellComponentWithGITSite>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IMessageProxyReconnectAdapterOwner,IRemoteTabTipAdapter>
		{
			RuntimeClass<RuntimeClassFlags<2>,IMessageProxyReconnectAdapterOwner,IRemoteTabTipAdapter>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IMessageProxyReconnectAdapterOwner,IRemoteTabTipAdapter>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IMultitaskingViewGestureHandler,ITouchpadGesture>
		{
			RuntimeClass<RuntimeClassFlags<2>,IMultitaskingViewGestureHandler,ITouchpadGesture>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IObjectArray,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IObjectArray,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IObservablePropertyCallback>
		{
			RuntimeClass<RuntimeClassFlags<2>,IObservablePropertyCallback>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IShellPositionerCallback,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IShellPositionerCallback,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ISwitchItemController>
		{
			RuntimeClass<RuntimeClassFlags<2>,ISwitchItemController>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ITabletModeChangeListener>
		{
			RuntimeClass<RuntimeClassFlags<2>,ITabletModeChangeListener>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IUIAnimationStoryboardEventHandler2>
		{
			RuntimeClass<RuntimeClassFlags<2>,IUIAnimationStoryboardEventHandler2>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IUnknown>
		{
			RuntimeClass<RuntimeClassFlags<2>,IUnknown>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IUnknown>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::IAsyncActionCompletedHandler,FtmBase> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::IAsyncActionCompletedHandler,FtmBase> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<IInspectable *>,FtmBase> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<IInspectable *>,FtmBase> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *>,FtmBase> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *>,FtmBase> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *>,FtmBase> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *>,FtmBase> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId>,FtmBase> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId>,FtmBase> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *>,FtmBase> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *>,FtmBase> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ItemAnimationCoordinatorBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,ItemAnimationCoordinatorBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,KeyboardHosting::IPositionAndSizeOptionsProvider>
		{
			RuntimeClass<RuntimeClassFlags<2>,KeyboardHosting::IPositionAndSizeOptionsProvider>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,KeyboardHosting::IPositionAndSizeOptionsProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ObservableObjectArray,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,ChainInterfaces<ISwitchItemFilteredCollection,IObservableObjectArray,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,ObservableObjectArray,IObservableObjectArrayChanged,IObservableObjectArrayChangedBeginEnd,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,ChainInterfaces<ISwitchItemFilteredCollection,IObservableObjectArray,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,VirtualDesktopNotificationForwarderHelper<CVirtualDesktopNotifications> >
		{
			RuntimeClass<RuntimeClassFlags<2>,VirtualDesktopNotificationForwarderHelper<CVirtualDesktopNotifications> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,WeakReference::IWeakReference>
		{
			RuntimeClass<RuntimeClassFlags<2>,WeakReference::IWeakReference>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<IInspectable *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<IInspectable *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::StartExperienceManager *,IInspectable *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::FamilySafety::AppLimits::IAppStateManager,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::FamilySafety::AppLimits::IAppStateManager,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::FamilySafety::AppLimits::IAppStateManager,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::FamilySafety::AppLimits::IAppUsageTracker,IApplicationViewChangeListener,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::FamilySafety::AppLimits::IAppUsageTracker,IApplicationViewChangeListener,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::IComPoolTask>
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::IComPoolTask>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ISelectionDataParser>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ISelectionDataParser>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,AppViewDataSourceAdapterBase,IAppViewDataSourceAdapter,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,AppViewDataSourceAdapterBase,IAppViewDataSourceAdapter,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,AppViewDataSourceAdapterBase,IAppViewDataSourceAdapter,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CApplicationViewBase,IWin32ApplicationView,IAppSizeConstraintsCallback,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CApplicationViewBase,IWin32ApplicationView,IAppSizeConstraintsCallback,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CApplicationViewBase,IWinRTApplicationView,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CApplicationViewBase,IWinRTApplicationView,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IAcrylicPolicyManager,IImmersiveWindowMessageNotification,IBatterySaverStateChangedHandler,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IAcrylicPolicyManager,IImmersiveWindowMessageNotification,IBatterySaverStateChangedHandler,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveWindowMessageNotification,ITouchKeyboardExperienceManager,ITabletModeChangeListener,IApplicationStateChangeHandler,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveWindowMessageNotification,ITouchKeyboardExperienceManager,ITabletModeChangeListener,IApplicationStateChangeHandler,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveWindowMessageNotification,ITouchKeyboardExperienceManager,ITabletModeChangeListener,IApplicationStateChangeHandler,ILightDismissNotification,IGlobalRudeWindowNotifications,Windows::ApplicationModel::Internal::DataTransfer::IClipboardViewLauncher,IDWMStoryboardListener,ITextInputHostInfoProvider,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IWnfCallback,IEyeControlAdapterOwner,IEyeControlManager,IInputDeviceWatcherOwner,IPrivilegedOperationsConsumer,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IWnfCallback,IEyeControlAdapterOwner,IEyeControlManager,IInputDeviceWatcherOwner,IPrivilegedOperationsConsumer,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,ITabViewManager,ITabDragHandler,ITabGroupManager,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,ITabViewManager,ITabDragHandler,ITabGroupManager,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IApplicationViewChangeListener,IWindowManagementShowMoveSizeEvents,ITabViewManager,ITabDragHandler,ITabGroupManager,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,ITitleBarRecovery,IPrivilegedOperationsConsumer,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,ICortanaStoreAppExperienceManager,IImmersiveLayoutChanges,IInputHostLayoutChanges,IPrivilegedOperationsConsumer>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,ICortanaStoreAppExperienceManager,IImmersiveLayoutChanges,IInputHostLayoutChanges,IPrivilegedOperationsConsumer>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::RetailDemo::IRetailDemoExperienceManager,IPrivilegedOperationsConsumer,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::RetailDemo::IRetailDemoExperienceManager,IPrivilegedOperationsConsumer,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IXamlExplorerHost,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IXamlExplorerHost,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IHolographicPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IInternalFullScreenHandler,IHolographicViewManager,IHolographicViewTransitionNotificationService,Windows::Internal::Shell::Holographic::IHolographicViewHostItemSource>,Implements<RuntimeClassFlags<3>,CloakedIid<IShellPositionerViewHandoff>,CloakedIid<ITabbingAwarePositioner>,CloakedIid<IApplicationViewChangeListener> > >
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IHolographicPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IInternalFullScreenHandler,IHolographicViewManager,IHolographicViewTransitionNotificationService,Windows::Internal::Shell::Holographic::IHolographicViewHostItemSource>,Implements<RuntimeClassFlags<3>,CloakedIid<IShellPositionerViewHandoff>,CloakedIid<ITabbingAwarePositioner>,CloakedIid<IApplicationViewChangeListener> > >();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::ComposableShell::Tabs::ITabSetMediator,IWindowSnappingEvents,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::ComposableShell::Tabs::ITabSetMediator,IWindowSnappingEvents,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::FamilySafety::AppLimits::IFamilyAppUsageManager,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::FamilySafety::AppLimits::IFamilyAppUsageManager,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicForegroundAssistant,IPrivilegedOperationsConsumer,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicForegroundAssistant,IPrivilegedOperationsConsumer,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicViewHostItemHistory,Windows::Internal::ComposableShell::Core::IViewProvider,CloakedIid<Windows::Internal::Shell::Holographic::IHolographicViewHostItemLedgerPrivate>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Holographic::IHolographicViewHostItemHistory,Windows::Internal::ComposableShell::Core::IViewProvider,CloakedIid<Windows::Internal::Shell::Holographic::IHolographicViewHostItemLedgerPrivate>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithSite,ChainInterfaces<IFullScreenPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IActiveZBandNotificationForMonitor,IApplicationViewChangeListener,ITabletModeChangeListener,IFullScreenPositionerNotificationService,IFullScreenPositionerTestHandler,ITransitionStateChangeHandler,IPrivilegedOperationsConsumer>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithSite,ChainInterfaces<IFullScreenPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IActiveZBandNotificationForMonitor,IApplicationViewChangeListener,ITabletModeChangeListener,IFullScreenPositionerNotificationService,IFullScreenPositionerTestHandler,ITransitionStateChangeHandler,IPrivilegedOperationsConsumer>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithSite,ChainInterfaces<IFullScreenPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IApplicationViewStatePositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITabbingAwarePositioner,IShellPositionerViewHandoff,IImmersiveMonitorNotification,IActiveZBandNotificationForMonitor,IApplicationViewChangeListener,ITabletModeChangeListener,IFullScreenPositionerNotificationService,IFullScreenPositionerTestHandler,ITransitionStateChangeHandler,IPrivilegedOperationsConsumer>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveWindowFactoryBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveWindowFactoryBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CWRLObjectWithSite,Windows::Internal::Shell::Experience::IStartExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IDWMStoryboardListener>
		{
			RuntimeClass<RuntimeClassFlags<3>,CWRLObjectWithSite,Windows::Internal::Shell::Experience::IStartExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IDWMStoryboardListener>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,CWRLObjectWithSite,Windows::Internal::Shell::Experience::IStartExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IDWMStoryboardListener>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,ChainInterfaces<IViewGroupInternal,IViewGroup,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITitleBarRecovery,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,ChainInterfaces<IViewGroupInternal,IViewGroup,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITitleBarRecovery,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,ChainInterfaces<IViewGroupManagerInternal,IViewGroupManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITitleBarRecovery,IWindowManagementWindowGroupingEvents,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,ChainInterfaces<IViewGroupManagerInternal,IViewGroupManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ITitleBarRecovery,IWindowManagementWindowGroupingEvents,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,ChainInterfaces<IVirtualDesktopManagerPrivate,IVirtualDesktopManagerInternal,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IVirtualDesktopManagerInternal3,IVirtualDesktopManagerInternal2,IVirtualDesktopManagerInternal,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ISuspendableVirtualDesktopManager,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,ChainInterfaces<IVirtualDesktopManagerPrivate,IVirtualDesktopManagerInternal,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<IVirtualDesktopManagerInternal3,IVirtualDesktopManagerInternal2,IVirtualDesktopManagerInternal,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ISuspendableVirtualDesktopManager,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,FtmBase,CImmersiveShellComponentWithGITSite,IImmersiveApplicationManager,IImmersiveShellHookNotification,IImmersiveApplicationArrayService,IImmersiveApplicationArrayService2,IImmersiveApplicationVisibilityOverride,IIAMServiceProvider,ISpecialWindowMessageCallback,IImmersiveMonitorNotification,IApplicationManagerViewPosition,IImmersiveApplicationNotificationService,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>
		{
			RuntimeClass<RuntimeClassFlags<3>,FtmBase,CImmersiveShellComponentWithGITSite,IImmersiveApplicationManager,IImmersiveShellHookNotification,IImmersiveApplicationArrayService,IImmersiveApplicationArrayService2,IImmersiveApplicationVisibilityOverride,IIAMServiceProvider,ISpecialWindowMessageCallback,IImmersiveMonitorNotification,IApplicationManagerViewPosition,IImmersiveApplicationNotificationService,IImmersiveAppNotificationListeners,IImmersiveApplicationManagerInternal,IImmersiveApplicationManagerSafeForSyncCallouts,IImmersiveApplicationManagerSafeForSyncCallouts2,IApplicationStateChangeHandler,IImmersiveSessionIdleNotification,IRequestTrustedComponentForegroundControlInitialization,IAppSwitchingTestability,IImmersiveApplicationPresentation,IApplicationViewReconstitution,IApplicationViewSerialization,IPrivilegedOperationsConsumer,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow,IImmersiveApplicationTerminator,IImmersiveApplicationTitleBarManager,IUncloakWindowService,IXamlIslandPopupManager,IWindowManagementShowMoveSizeEvents>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,FtmBase,CWRLObjectWithGITSite,IImmersiveApplication,IImmersiveApplication2,IImmersiveApplicationHolographic,IImmersiveApplicationInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Desktop::ViewManagerInterop::ObjectWithVisibility,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithIamLock>,IServiceProvider>
		{
			RuntimeClass<RuntimeClassFlags<3>,FtmBase,CWRLObjectWithGITSite,IImmersiveApplication,IImmersiveApplication2,IImmersiveApplicationHolographic,IImmersiveApplicationInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Desktop::ViewManagerInterop::ObjectWithVisibility,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithIamLock>,IServiceProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,IImmersiveRawInputMouseNotification>
		{
			RuntimeClass<RuntimeClassFlags<3>,IImmersiveRawInputMouseNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,IInspectable,IPresentationRequestedArgs,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,IInspectable,IPresentationRequestedArgs,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IActionCenterExperienceManager,IEdgeUiInvocation,IEdgeUiTouchInvocation,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
		{
			RuntimeClass<RuntimeClassFlags<3>,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IActionCenterExperienceManager,IEdgeUiInvocation,IEdgeUiTouchInvocation,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IControlCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
		{
			RuntimeClass<RuntimeClassFlags<3>,ILightDismissNotification,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IControlCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,ITitleBarController,IImmersiveShellHookNotification,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,ITitleBarController,IImmersiveShellHookNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,IWindowGroupManager,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,IWindowGroupManager,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,ObservableObjectArray,IApplicationViewChangeListener,ISwitchItemCollection>
		{
			RuntimeClass<RuntimeClassFlags<3>,ObservableObjectArray,IApplicationViewChangeListener,ISwitchItemCollection>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,ViewWrapperBase,ILegacyViewWrapper>
		{
			RuntimeClass<RuntimeClassFlags<3>,ViewWrapperBase,ILegacyViewWrapper>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,ViewWrapperBase,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>
		{
			RuntimeClass<RuntimeClassFlags<3>,ViewWrapperBase,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,WindowWrapperBase,ILegacyViewWrapper>
		{
			RuntimeClass<RuntimeClassFlags<3>,WindowWrapperBase,ILegacyViewWrapper>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,WindowWrapperBase,ILegacyViewWrapper>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,WindowWrapperBase,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>
		{
			RuntimeClass<RuntimeClassFlags<3>,WindowWrapperBase,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,WindowWrapperBase,IUAPViewWrapper,Windows::Internal::Shell::ViewManagerInterop::IViewWrapperSplashScreenSupport>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Internal::UserActivities::IUserActivityMonitor,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataBroker,Windows::Internal::Data::Activities::ITaskDataCacheBroker,Windows::Internal::Data::Activities::ISetActivityMonitor,CImmersiveShellComponentWithGITSite,ICDPUserActivitySettingsCallback,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Internal::UserActivities::IUserActivityMonitor,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataBroker,Windows::Internal::Data::Activities::ITaskDataCacheBroker,Windows::Internal::Data::Activities::ISetActivityMonitor,CImmersiveShellComponentWithGITSite,ICDPUserActivitySettingsCallback,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource,IDesktopVirtualDesktopDataSource,IVirtualDesktopDataSourceInternal,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource,IDesktopVirtualDesktopDataSource,IVirtualDesktopDataSourceInternal,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IToastCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable,Windows::Internal::Shell::Holographic::IHolographicExperienceExtension,IInputHostLayoutChanges>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IBaseExperienceManager,Windows::Internal::Shell::Experience::IToastCenterExperienceManager,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable,Windows::Internal::Shell::Holographic::IHolographicExperienceExtension,IInputHostLayoutChanges>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::ICortanaExperienceManager,Windows::Foundation::IClosable,IInitializeTrustedComponentForegroundControl>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::ICortanaExperienceManager,Windows::Foundation::IClosable,IInitializeTrustedComponentForegroundControl>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IShellExperiencePositioner,TwinUI::Cortana::ICortanaDesktopNotifications,TwinUI::Cortana::ICortanaExperienceView,ILightDismissNotification,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,TwinUI::Cortana::ICortanaWNFNotification>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IShellExperiencePositioner,TwinUI::Cortana::ICortanaDesktopNotifications,TwinUI::Cortana::ICortanaExperienceView,ILightDismissNotification,IImmersiveWindowMessageNotification,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,TwinUI::Cortana::ICortanaWNFNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,IApplicationViewBackedViewHostItemPrivate,IImmersiveApplicationPresentationListener,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,IApplicationViewBackedViewHostItemPrivate,IImmersiveApplicationPresentationListener,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,Windows::Internal::Shell::Holographic::IPortableViewHostItem,IApplicationViewBackedViewHostItemPrivate,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Holographic::IViewHostItem,Windows::Internal::Shell::Holographic::IViewHostItemAppViewInternal,Windows::Internal::Shell::Holographic::IPortableViewHostItem,IApplicationViewBackedViewHostItemPrivate,Implements<Windows::Internal::ComposableShell::IForegroundTarget,Windows::Internal::ComposableShell::Core::ICoreForegroundTarget,Windows::Internal::ComposableShell::TreeNodeBase>,IImmersiveShellHookNotification,IApplicationViewChangeListener,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,IApplicationViewChangeListener,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListener,IWindowSnappingEvents,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,IApplicationViewChangeListener,Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewListener,IWindowSnappingEvents,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Text::IShellKeyboardHostingPolicy,KeyboardHosting::IDesktopKeyboardHostingPolicy,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Text::IShellKeyboardHostingPolicy,KeyboardHosting::IDesktopKeyboardHostingPolicy,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher,IWindowEventDispatcherInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,IWindowDispatcherConnectedStandby,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker,INtUserViewWrapperCollection>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher,IWindowEventDispatcherInternal,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,IWindowDispatcherConnectedStandby,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker,INtUserViewWrapperCollection>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IWindowDispatcherConnectedStandby,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,IViewEventDispatcherCrashRecovery,Implements<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherCrashRecovery>,IViewManagerControl,IWindowDispatcherConnectedStandby,IImmersiveShellHookNotification,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<3>,IPrivilegedOperationsConsumer,IImmersiveSessionIdleNotification,Windows::Internal::Shell::Popups::IPopupClientBroker>,FtmBase>();
		};

		struct RuntimeClass<ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettingsArgs>
		{
			virtual ~RuntimeClass<ViewEventArgsBase,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettingsArgs>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::ITreeNode *>,FtmBase>
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::ITreeNode *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Tabs::ShellTab *>,FtmBase>
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::IIterable<Windows::Internal::ComposableShell::Tabs::ShellTab *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,FtmBase>
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::Chaining::IChainLink *>,FtmBase>
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Shell::Chaining::IChainLink *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::Chaining::IChainLink *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,FtmBase>
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption>,Windows::Foundation::Collections::IIterable<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption>,Windows::Foundation::Collections::IIterable<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::IIterable<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *>,Windows::Foundation::Collections::IIterable<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<unsigned int>,Windows::Foundation::Collections::IIterable<unsigned int>,FtmBase>
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<unsigned int>,Windows::Foundation::Collections::IIterable<unsigned int>,FtmBase>();
		};

		struct SimpleActivationFactory<SystemTray::TrayInfoTipActivator,0>
		{
			virtual long ActivateInstance(IInspectable * *);
		};

		struct SimpleActivationFactory<SystemTray::TrayInfoTipAppInfoProvider,0>
		{
			virtual long ActivateInstance(IInspectable * *);
		};

		struct SimpleActivationFactory<Windows::Internal::Shell::CustomShell::CustomShellExperienceRepository,0>
		{
			virtual long ActivateInstance(IInspectable * *);
		};

		struct SimpleClassFactory<AcrylicPolicyManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ActionCenterExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ActivationHints,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<AllUpViewUriHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CAppTransitionManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CApplicationManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CApplicationViewBroker,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CApplicationViewManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CDesktopPositioner,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CFullScreenManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveShellBuilder,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CMultitaskingViewServiceProvider,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPerMonitorDesktopVisibilityService,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSwitchController,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CVirtualDesktopComponent,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ControlCenterExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CortanaExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CustomShellManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<DesktopBlueLightReductionManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<EmulatedFullScreenManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<FullScreenPositioner,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<HolographicForegroundAssistant,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<HolographicViewHostItemLedger,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ImeStatusNotificationExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ImmersiveShellStressTool,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<InsightsExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<JointResize,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<JumpViewExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<KioskPositioner,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<LockScreenDirectorServiceProviderImpl,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PCShellImmersiveComponentCreator,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PWSLayoutPolicyManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PenWorkspaceDiscoverBrokerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PenWorkspaceScreenCaptureBroker,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PeopleBarFlyoutExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PeopleBarJumpViewExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PeoplePaneViewManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PerMonitorShellPositionerManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PrivilegedOperationsService,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<QuickConnectExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<RemoteLauncherForegroundHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ScreenClippingExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<SearchAppExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ShellFeedsExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ShellPositionerManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ShoulderTapExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<StartExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<SurfaceHubPositioner,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TabViewManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TabletModePositioner,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TabletModePositionerManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TabletModeViewManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TaskContinuityActivitiesExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TaskFlowImmersiveShellBroker,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TaskbarLayoutPolicyManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ToastCenterExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ViewEventDispatcher,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ViewPresentationMediator,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<VirtualDesktopDataSourceComponent,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<VirtualTouchpadExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<VirtualTouchpadUriHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<VirtualTouchpadUriHandlerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<VoiceAssistantPositioner,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<WindowEventDispatcher,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<WindowSizeConverter,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<WindowingEnvironmentManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<Windows::Internal::ComposableShell::Tabs::TabSetMediator,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<XamlAllUpViewHost,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<XamlAltTabViewHost,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<XamlExplorerHostShellComponent,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<XamlSnapAssistViewHost,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		class WeakRef
		{
		protected:
			long InternalResolve(_GUID const &,IInspectable * *);
		public:
			WeakRef(ComPtr<IWeakReference> const &);
			WeakRef(WeakRef const &);
			long As<IInspectable>(Details::ComPtrRef<ComPtr<IInspectable> >);
			long As<Windows::Internal::Shell::Experience::IActionCenterExperienceManager>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::Experience::IActionCenterExperienceManager> >);
			~WeakRef();
		};

		namespace Wrappers
		{
			struct AutoSelectObject<HFONT__ *>
			{
				~AutoSelectObject<HFONT__ *>();
			};

			class ClientDC
			{
			protected:
				virtual bool InternalClose();
			public:
				ClientDC(HWND__ *);
				~ClientDC();
			};

			class CompatibleDC
			{
			protected:
				virtual bool InternalClose();
			public:
				CompatibleDC(HDC__ *);
				long CheckValidity();
				~CompatibleDC();
			};

			namespace Details
			{
				class SyncLockExclusive
				{
					void InternalUnlock();
				public:
					~SyncLockExclusive();
				};

				struct SyncLockShared
				{
					~SyncLockShared();
				};

				int CompareStringOrdinal(HSTRING__ *,HSTRING__ *);
			};

			struct HString
			{
				long Set(HSTRING__ * const &);
				long Set(unsigned short const *,unsigned int);
				long Set(wchar_t const *,unsigned int);
				long Set<unsigned short const *>(unsigned short const * const &,Details::Dummy);
				long Set<wchar_t *>(wchar_t * const &,Details::Dummy);
				~HString();
			};

			class HStringReference
			{
				static unsigned int AddOne(unsigned int);
				void CreateReference(unsigned short const *,unsigned int,unsigned int);
				void CreateReference(wchar_t const *,unsigned int,unsigned int);
			public:
				HStringReference(unsigned short const *,unsigned int);
				HStringReference<128>(unsigned short (&)[128]);
				HStringReference<14>(unsigned short const (&)[14]);
				HStringReference<2084>(unsigned short (&)[2084]);
				HStringReference<260>(wchar_t (&)[260]);
				HStringReference<34>(unsigned short (&)[34]);
				HStringReference<CCoTaskMemPtr<unsigned short> >(CCoTaskMemPtr<unsigned short> const &,Details::Dummy);
				HStringReference<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,Details::Dummy);
				HStringReference<unsigned short *>(unsigned short * const &,Details::Dummy);
				HStringReference<unsigned short const *>(unsigned short const * const &,Details::Dummy);
				~HStringReference();
			};

			class HandleT<HandleTraits::ClientDCTraits>
			{
			protected:
				virtual bool InternalClose();
			};

			class HandleT<HandleTraits::CompatibleDCTraits>
			{
			protected:
				virtual bool InternalClose();
			};

			class HandleT<HandleTraits::HBITMAPTraits>
			{
			protected:
				virtual bool InternalClose();
			};

			struct RoInitializeWrapper
			{
				~RoInitializeWrapper();
			};

			struct SRWLock
			{
				Details::SyncLockExclusive LockExclusive();
				Details::SyncLockShared LockShared();
				static Details::SyncLockExclusive LockExclusive(_RTL_SRWLOCK *);
				~SRWLock();
			};

			bool operator==(HSTRING__ * const &,Wrappers::HStringReference const &);
		};

		WRL::ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> > Callback<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *>,ShellFeedsDesktopExperienceView,Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *>(ShellFeedsDesktopExperienceView *,long ( ShellFeedsDesktopExperienceView::*)(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *));
		WRL::ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> > Callback<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *>,ShellFeedsExperienceManagerImpl,Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *>(ShellFeedsExperienceManagerImpl *,long ( ShellFeedsExperienceManagerImpl::*)(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *));
		WRL::ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> > Callback<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *>,ShellFeedsDesktopExperienceView,Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *>(ShellFeedsDesktopExperienceView *,long ( ShellFeedsDesktopExperienceView::*)(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *));
		WRL::ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> > Callback<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *>,ShellFeedsExperienceManagerImpl,Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *>(ShellFeedsExperienceManagerImpl *,long ( ShellFeedsExperienceManagerImpl::*)(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *));
		WRL::ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> > Callback<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *>,CBaseTrayFlyoutExperienceManager,Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *>(CBaseTrayFlyoutExperienceManager *,long ( CBaseTrayFlyoutExperienceManager::*)(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *));
		WRL::ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> > Callback<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *>,ShellFeedsExperienceManagerImpl,Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *>(ShellFeedsExperienceManagerImpl *,long ( ShellFeedsExperienceManagerImpl::*)(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *));
		Windows::Foundation::Diagnostics::IAsyncCausalityTracerStatics * gCausality;
		_RTL_RUN_ONCE gCausalityInitOnce;
		long AsAgile<IAsyncCallbackDispatcher>(IAsyncCallbackDispatcher *,WRL::AgileRef *);
		long AsAgile<ISplashScreen>(ISplashScreen *,WRL::AgileRef *);
		long AsAgile<Windows::ApplicationModel::Activation::IActivatedEventArgs>(Windows::ApplicationModel::Activation::IActivatedEventArgs *,WRL::AgileRef *);
		long AsAgile<Windows::Foundation::IEventHandler<IInspectable *> >(Windows::Foundation::IEventHandler<IInspectable *> *,WRL::AgileRef *);
		long AsWeak<ApplicationViewBackedViewHostItem>(ApplicationViewBackedViewHostItem *,WRL::WeakRef *);
		long AsWeak<CActionCenterExperienceManager>(CActionCenterExperienceManager *,WRL::WeakRef *);
		long AsWeak<CControlCenterExperienceManager>(CControlCenterExperienceManager *,WRL::WeakRef *);
		long AsWeak<CScreenClippingExperienceManager>(CScreenClippingExperienceManager *,WRL::WeakRef *);
		long AsWeak<CTaskWindow>(CTaskWindow *,WRL::WeakRef *);
		long AsWeak<CortanaSharedExperienceManager>(CortanaSharedExperienceManager *,WRL::WeakRef *);
		long AsWeak<FullScreenPositioner>(FullScreenPositioner *,WRL::WeakRef *);
		long AsWeak<IDWMStoryboardListener>(IDWMStoryboardListener *,WRL::WeakRef *);
		long AsWeak<IIconLoaderInternal>(IIconLoaderInternal *,WRL::WeakRef *);
		long AsWeak<IInspectable>(IInspectable *,WRL::WeakRef *);
		long AsWeak<IUnknown>(IUnknown *,WRL::WeakRef *);
		long AsWeak<IWeakReferenceSource>(IWeakReferenceSource *,WRL::WeakRef *);
		long AsWeak<PrivilegedOperationsService>(PrivilegedOperationsService *,WRL::WeakRef *);
		long AsWeak<SearchAppExperienceManager>(SearchAppExperienceManager *,WRL::WeakRef *);
		long AsWeak<ShellFeedsExperienceManagerImpl>(ShellFeedsExperienceManagerImpl *,WRL::WeakRef *);
		long AsWeak<TouchKeyboardExperienceManager>(TouchKeyboardExperienceManager *,WRL::WeakRef *);
		long AsWeak<TwinUI::Cortana::ICortanaWNFNotification>(TwinUI::Cortana::ICortanaWNFNotification *,WRL::WeakRef *);
		long AsWeak<WindowEventDispatcher>(WindowEventDispatcher *,WRL::WeakRef *);
		long AsWeak<wil::details::IEventInvocationContext>(wil::details::IEventInvocationContext *,WRL::WeakRef *);
	};

};

class MonitorFrame
{
	void AddCallback();
	void DestroyInternal();
public:
	MonitorFrame(IImmersiveMonitor *,Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,IXamlMultitaskingViewController ^,IXamlSwitcherWindowInteractionEvents ^);
	long Cloak(bool);
	virtual ~MonitorFrame();
	void BeginInvokeAnimation();
	void DismissAnimated(IMonitorFrameDismissAnimationCallback ^);
	void Initialize(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitcherViewModel ^,WindowsInternal::ComposableShell::Experiences::Switcher::SwitcherControlBase ^,Windows::UI::Xaml::Window ^,IXamlExplorerHostWindow *);
};

class MultitaskingData
{
	long _InitializeVirtualDesktopComponents(IVirtualDesktopManagerInternal *,IVirtualDesktopPinnedApps *,IVirtualDesktopNotificationService *);
	virtual ~MultitaskingData();
public:
	MultitaskingData();
	long RuntimeClassInitialize(IApplicationViewCollection *,IApplicationViewVisibilityDebouncedNotificationService *,IVirtualDesktopThumbnailWindowFilter *,IVirtualDesktopManagerInternal *,IVirtualDesktopPinnedApps *,IVirtualDesktopNotificationService *,IImmersiveSettingsCache *,ISnapServiceProvider *,IApplicationViewIconLoader *,Windows::Internal::ComposableShell::Tabs::ITabDataModel *,ITabViewManager *,SwitchItemFilterBehavior);
	virtual Microsoft::WRL::ComPtr<IApplicationViewIconLoader> GetIconLoader();
	virtual Microsoft::WRL::ComPtr<IImmersiveSettingsCache> GetSettingsCache();
	virtual Microsoft::WRL::ComPtr<IObservableObjectArray> GetSwitchItemCollection();
	virtual Microsoft::WRL::ComPtr<IObservableObjectArray> GetVirtualDesktopItemCollection();
	virtual Microsoft::WRL::ComPtr<ISnapServiceProvider> GetSnapServiceProvider();
	virtual Microsoft::WRL::ComPtr<IVirtualDesktopManagerInternal> GetVirtualDesktopManager();
	virtual Microsoft::WRL::ComPtr<IVirtualDesktopNotificationService> GetVirtualDesktopNotifications();
	virtual Microsoft::WRL::ComPtr<IVirtualDesktopPinnedApps> GetVirtualDesktopPinnedApps();
	virtual Microsoft::WRL::ComPtr<IVirtualDesktopThumbnailWindowFilter> GetVirtualDesktopThumbnailWindowFilter();
};

class MultitaskingViewAnimationCoordinatorBase
{
	struct ThumbnailData
	{
		ThumbnailData & operator=(ThumbnailData const &);
	};

protected:
	bool IsCloaked(HWND__ *);
	long AnimateVisibleSwitchItem(ISwitchItemElement *,IDCompBatchAnimationCallback *,bool);
	long GetDestinationRect(ISwitchItemElement *,tagRECT *);
	long GetSourceRect(ISwitchItemElement *,tagRECT *);
	virtual bool ShouldForceItemVisible(ISwitchItemElement *);
	virtual bool ShouldTreatItemAsMinimized(ISwitchItemElement *);
public:
	MultitaskingViewAnimationCoordinatorBase();
	long RuntimeClassInitialize();
	virtual Microsoft::WRL::ComPtr<WeakReference::IWeakReference> GetWeakRef();
	virtual long BeginAnimation();
	virtual long GetVisualForWindow(HWND__ *,IDCompThumbnail * *);
	virtual void SetAnimationData(ISwitchThumbnailFactory *,IAnimatableMultitaskingViewFrame *,IDCompThumbnail *);
	virtual void ThumbnailSourceSizeChanged(void *);
	~MultitaskingViewAnimationCoordinatorBase();
};

namespace MultitaskingViewConfigHelpers
{
	long _ReadRegistryValue(HKEY__ *,unsigned short const *,unsigned long *);
	void GetConfigFromRegistry(MultitaskingViewConfigHelpers::ConfigView,MultitaskingViewConfig *);
	void GetDefaultConfig(MultitaskingViewConfigHelpers::ConfigView,MultitaskingViewConfig *);
	void ScaleMetricsByDPI(MultitaskingViewConfig const &,unsigned int,MultitaskingViewConfig *);
	void _ReadFrameMetrics(HKEY__ *,FrameMetrics &);
	void _ReadGlyphButtonMetrics(HKEY__ *,unsigned short const *,GlyphButtonMetrics &);
	void _ReadGridMetrics(HKEY__ *,GridMetrics &);
	void _ReadNewVirtualDesktopButtonMetrics(HKEY__ *,VirtualDesktopNewButtonMetrics &);
	void _ReadOptionalRegistryValue(HKEY__ *,unsigned short const *,RelativeMargins *);
	void _ReadOptionalRegistryValue(HKEY__ *,unsigned short const *,_MARGINS *);
	void _ReadOptionalRegistryValue<bool>(HKEY__ *,unsigned short const *,bool *);
	void _ReadOptionalRegistryValue<double>(HKEY__ *,unsigned short const *,double *);
	void _ReadOptionalRegistryValue<float>(HKEY__ *,unsigned short const *,float *);
	void _ReadOptionalRegistryValueWithPrefix<double>(HKEY__ *,unsigned short const *,unsigned short const *,double *);
	void _ReadOptionalRegistryValueWithPrefix<int>(HKEY__ *,unsigned short const *,unsigned short const *,int *);
	void _ReadOptionalRegistryValueWithPrefix<long>(HKEY__ *,unsigned short const *,unsigned short const *,long *);
	void _ReadThumbnailSizeMetrics(HKEY__ *,ThumbnailSizeMetrics &);
	void _ReadVirtualDesktopMetrics(HKEY__ *,VirtualDesktopMetrics &);
	void _ScaleByDPI<_MARGINS>(_MARGINS *,unsigned int,unsigned int);
};

class MultitaskingViewDismissalAnimationCoordinator
{
protected:
	static MultitaskingViewAnimationCoordinatorBase::MultitaskingViewAnimationParameters const animationParameters;
	virtual MultitaskingViewAnimationCoordinatorBase::MultitaskingViewAnimationParameters GetAnimationParameters();
	virtual long FinishAnimateVisibleSwitchItem(ISwitchItemElement *,IDCompThumbnail *,IUIAnimationStoryboardEventHandler2 *);
	virtual long GetBeginRect(ISwitchItemElement *,tagRECT *);
	virtual long GetEndRect(ISwitchItemElement *,tagRECT *);
	virtual long PrepReusedThumbnail(ISwitchItemElement *,IDCompThumbnail *);
	virtual void AnimateMinimizedSwitchItem(ISwitchItemElement *,IDCompBatchAnimationCallback *);
	virtual void OnAnimationFinished();
public:
	MultitaskingViewDismissalAnimationCoordinator();
	long RuntimeClassInitialize(WeakReference::IWeakReference *,IMultitaskingViewAnimation *);
	virtual long GetVisualForWindow(HWND__ *,IDCompThumbnail * *);
	virtual void Cancel();
	virtual void ThumbnailSourceSizeChanged(void *);
};

class MultitaskingViewDragVisual
{
	Geometry::CRect GetContentShrinkRect();
public:
	MultitaskingViewDragVisual();
	long RuntimeClassInitialize(ISwitchThumbnailFactory *,IMultitaskingViewElement *,IMultitaskingViewElement *,Geometry::CSize const &,double);
	virtual Geometry::CRect GetPosition();
	virtual long Hide(DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long SetPosition(Geometry::CPoint const &,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual void SetMaxDragVisualSize(Geometry::CSize const &);
};

class MultitaskingViewGestureHandler
{
	bool ShouldProcessGestureInput(MultitaskingViewGestureHandler::MultitaskingViewState const &);
	long GetMultitaskingViewState(MultitaskingViewGestureHandler::MultitaskingViewState *);
	long ProcessGestureInput(GestureState,MultitaskingViewGestureHandler::MultitaskingViewState const &,unsigned int);
	long UpdateTouchpadDimensions(unsigned int);
	unsigned __int64 GetTimestampForPointerInput(unsigned int);
	void InitializeConfig();
public:
	MultitaskingViewGestureHandler();
	long RuntimeClassInitialize(IMultitaskingViewTaskScheduler *,IMultitaskingViewVisibilityService *);
	virtual int CanBePreempted();
	virtual int CanPreemptOtherGestures();
	virtual long CancelSwipe();
	virtual long ContinueSwipe(int,int,int,int,unsigned int);
	virtual long FinishSwipe(int,int,int,int,unsigned int);
	virtual long GetGestureState(IMultitaskingViewGestureState * *);
	virtual long StartSwipe(int,int,unsigned int,TOUCHPAD_GESTURE_CONTEXT);
	virtual void SetApplicationViewCollection(IApplicationViewCollection *);
	virtual void SetMonitorManager(IImmersiveMonitorManager *);
	virtual void SetTouchpadSettingsManager(ITouchpadSettingsManager *);
};

namespace MultitaskingViewGestureHandlerHelpers
{
	MultitaskingViewGestureHandlerHelpers::GestureAction DetermineGestureAction(MultitaskingViewGestureHandlerHelpers::GestureDirection,bool,MULTITASKING_VIEW_TYPES);
};

struct MultitaskingViewGestureState
{
	MultitaskingViewGestureState();
	virtual int IsGestureActive();
	virtual void SetGestureState(GestureState);
};

class MultitaskingViewInvocationAnimationCoordinator
{
protected:
	static MultitaskingViewAnimationCoordinatorBase::MultitaskingViewAnimationParameters const animationParameters;
	virtual MultitaskingViewAnimationCoordinatorBase::MultitaskingViewAnimationParameters GetAnimationParameters();
	virtual long FinishAnimateVisibleSwitchItem(ISwitchItemElement *,IDCompThumbnail *,IUIAnimationStoryboardEventHandler2 *);
	virtual long GetBeginRect(ISwitchItemElement *,tagRECT *);
	virtual long GetEndRect(ISwitchItemElement *,tagRECT *);
	virtual long PrepReusedThumbnail(ISwitchItemElement *,IDCompThumbnail *);
	virtual void AnimateMinimizedSwitchItem(ISwitchItemElement *,IDCompBatchAnimationCallback *);
	virtual void OnAnimationFinished();
public:
	MultitaskingViewInvocationAnimationCoordinator();
	long RuntimeClassInitialize(WeakReference::IWeakReference *,IMultitaskingViewAnimation *);
};

class MultitaskingViewTelemetry
{
	class CreateMultitaskingViewHost
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(MULTITASKING_VIEW_TYPES);
		~CreateMultitaskingViewHost();
	};

	class DismissMultitaskingView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(MULTITASKING_VIEW_TYPES);
		void Stop(MULTITASKING_VIEW_TYPES);
		~DismissMultitaskingView();
	};

	class DragSwitchItem
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(unsigned int);
		~DragSwitchItem();
	};

	class ExternalDragDetected
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ExternalDragDetected();
	};

	class ExternalDragHandoff
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ExternalDragHandoff();
	};

	class ShowAltTab
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ShowAltTab();
	};

	class ShowPPIAllUpView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ShowPPIAllUpView();
	};

	class ShowSnapAssist
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ShowSnapAssist();
	};

protected:
	void Create();
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static void AllUpViewHoverScrubSelectVirtualDesktop();
	static void AllUpViewHoverSelectVirtualDesktop();
	static void MultitaskingViewFrameDismissed();
	static void PTPGestureActionCompleted<unsigned int &>(unsigned int &);
	static void SwitchItemClosed<unsigned __int64 &>(unsigned __int64 &);
	void AltTabInvoked_(ALT_TAB_VIEW_FLAGS);
	void MultitaskingViewFrameShown_(unsigned int,unsigned int,Geometry::CRect const &);
	void PTPGestureActionCompleted_(unsigned int);
	void SwitchItemInitializationError_(long);
	void SwitchItemInvoked_(unsigned __int64,unsigned int);
	void SwitchItemLoadError_(long);
	void VirtualDesktopScrollingChanged_(bool,unsigned int);
};

namespace MultitaskingViewUtils
{
	bool LoadFont(tagLOGFONTW &,unsigned int,unsigned int,unsigned int,unsigned int);
	long LoadDWriteTextFormat(IDWriteFactory *,unsigned int,unsigned int,unsigned int,unsigned int,DWRITE_TEXT_ALIGNMENT,DWRITE_PARAGRAPH_ALIGNMENT,DWRITE_READING_DIRECTION,IDWriteTextFormat * *);
	void DrawInsetRect(ID2D1DeviceContext *,D2D_RECT_F &,ID2D1SolidColorBrush *,int);
};

class MultitaskingViewVisibilityService
{
	void UpdateVisibility(MULTITASKING_VIEW_TYPES,MULTITASKING_VIEW_TYPES);
public:
	MultitaskingViewVisibilityService();
	virtual long IsViewVisible(MULTITASKING_VIEW_TYPES,MULTITASKING_VIEW_TYPES *);
	virtual long Register(IMultitaskingViewVisibilityNotification *,unsigned long *);
	virtual long Unregister(unsigned long);
	virtual void ViewDismissed(MULTITASKING_VIEW_TYPES);
	virtual void ViewShown(MULTITASKING_VIEW_TYPES);
};

struct NonAgileDispatcher
{
	virtual long Dispatch(IAsyncCallback *);
};

struct NotificationCenterLogging
{
	static _tlgProvider_t const * Provider();
};

namespace NotificationCenterUITelemetry
{
	struct NotificationCenterTelemetry
	{
		class DismissActionCenter
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity(DismissMethod,InputType);
			~DismissActionCenter();
		};

		class EM_CriticalNotificationActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void TurnedScreenOn();
			~EM_CriticalNotificationActivity();
		};

		class EM_DisplayContextChanged
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void DisplayContextChangedToHeadMountedDisplay();
			void DisplayContextChangedToMonitor();
			void StartActivity();
			~EM_DisplayContextChanged();
		};

		class EM_DisplaySettingsChangeActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void RepositioningView();
			void StartActivity();
			~EM_DisplaySettingsChangeActivity();
		};

		class EM_EventQueuedActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void AccessibleName();
			void Active();
			void BottomOffset();
			void FlyoutHeight();
			void IgnoredEvent();
			void InitializationComplete();
			void IsConstrainedToWorkArea();
			void IsFullHeight();
			void RepositioningView();
			void Size();
			void StartActivity(unsigned short const *);
			~EM_EventQueuedActivity();
		};

		class EM_HideActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void HidingInHolographic();
			void NoOp_AlreadyHidden();
			void StartActivity();
			~EM_HideActivity();
		};

		class EM_HideInHolographic
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~EM_HideInHolographic();
		};

		class EM_LaunchActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void LaunchedApplication();
			void NoOp_ActionCenterVisible();
			void NoOp_DeviceLockdown();
			void NoOp_ShellNotReady();
			void NoOp_ShutdownInProgress();
			void StartActivity();
			void TurnedScreenOn_SoundSentry();
			~EM_LaunchActivity();
		};

		class EM_NewNotificationActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void RequestingLaunch();
			void StartActivity();
			~EM_NewNotificationActivity();
		};

		class EM_PositionViewActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~EM_PositionViewActivity();
		};

		class EM_RaiseApplicationEventActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void EventRaised();
			void NoOp_ApplicationNotRunning();
			void StartActivity(unsigned short const *,bool);
			~EM_RaiseApplicationEventActivity();
		};

		class EM_RegisterHolographicExecutor
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~EM_RegisterHolographicExecutor();
		};

		class EM_ReturnFocusActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void ReturnedToActiveApp();
			void ReturnedToLock();
			void StartActivity();
			~EM_ReturnFocusActivity();
		};

		class EM_ShowActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void NoOp_AlreadyVisible();
			void ShowingInHolographic();
			void StartActivity(bool);
			~EM_ShowActivity();
		};

		class EM_ShowInHolographic
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~EM_ShowInHolographic();
		};

		class EM_UnregisterHolographicExecutor
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~EM_UnregisterHolographicExecutor();
		};

		class EM_ViewCloakingActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~EM_ViewCloakingActivity();
		};

		class EM_ViewDestroyedActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~EM_ViewDestroyedActivity();
		};

		class EM_ViewHiddenActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~EM_ViewHiddenActivity();
		};

		class EM_ViewShownActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~EM_ViewShownActivity();
		};

		class EM_ViewUncloakingActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~EM_ViewUncloakingActivity();
		};

		class LaunchActionCenter
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity(InvokeMethod,InputType);
			~LaunchActionCenter();
		};

		static void ActionCenterDidntLaunchInSpecifiedTime<unsigned long const &>(unsigned long const &);
		static void ActionCenterLaunchSkippedDueToDeviceLockdown();
		static void ActionCenterLaunchSkippedDueToPolicy();
		static void ActionCenterLaunchSkippedDueToShellNotReady();
		static void ReadyToLaunch();
		static void ToastDidntLaunchInSpecifiedTime<unsigned long const &>(unsigned long const &);
	};

};

class NotificationDispatcher
{
	long AddTask(IAsyncCallback *);
public:
	long RuntimeClassInitialize();
	static __int64 WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void DispatchNotifications();
	void Shutdown();
};

namespace OS
{
	void EnableMarshalByValue(IUnknown *);
};

struct OWNERSHIP_CHANGE_INFO
{
	~OWNERSHIP_CHANGE_INFO();
};

struct ObservableItem
{
	ObservableItem();
	virtual ObservableProperty<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > * GetTitle();
};

class ObservableObjectArray
{
	long _FireNotification(void ( IObservableObjectArrayChanged::*)(IObservableObjectArray *,IObservableItem *),ObservableArrayOperation,IObservableItem *);
protected:
	long _AddItem(Microsoft::WRL::ComPtr<IObservableItem> const &,ObservableArrayOperation);
	long _RemoveItem(Microsoft::WRL::ComPtr<IObservableItem> const &,ObservableArrayOperation);
public:
	ObservableObjectArray();
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long RegisterBeginEndListener(IObservableObjectArrayChangedBeginEnd *,unsigned long *);
	virtual long RegisterListener(IObservableObjectArrayChanged *,unsigned long *);
	virtual long UnregisterBeginEndListener(unsigned long);
	virtual long UnregisterListener(unsigned long);
	virtual void Destroy();
	~ObservableObjectArray();
};

struct ObservableProperty<HWND__ *>
{
	HWND__ * const & operator=(HWND__ * const &);
};

struct ObservableProperty<Microsoft::WRL::ComPtr<IWICBitmap> >
{
	Microsoft::WRL::ComPtr<IWICBitmap> const & operator=(Microsoft::WRL::ComPtr<IWICBitmap> const &);
};

class ObservableProperty<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >
{
	bool _HasListenerID(void *);
public:
	long RemoveListener(void *);
};

struct ObservableProperty<unsigned int>
{
	unsigned int const & operator=(unsigned int const &);
};

namespace OverlayModeTelemetry
{
	class ExitCompactOverlayModeForView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,CompactOverlayExitReason);
		~ExitCompactOverlayModeForView();
	};

};

struct PCShellImmersiveComponentCreator
{
	PCShellImmersiveComponentCreator();
};

namespace PCShellImmersiveShellBuilder
{
	bool IsWindowTabHostEnabled();
};

class PPILayoutOperation
{
	long FindLeastRecentlyActivatedItem(IApplicationView * *);
	long QueryInsertApp(IApplicationView *);
	static APP_LAYOUT_INSERT_LOCATION _insertSide;
	static bool _isSideSet;
public:
	PPILayoutOperation();
	virtual long ClearAppLaunchSide();
	virtual long ClearLayout();
	virtual long InsertApp(IApplicationView *,SWITCH_TO_APP_FLAGS);
	virtual long SetAppLaunchSide(APP_LAYOUT_INSERT_LOCATION);
	virtual void SetOldAppLayout(IAppLayout *);
	virtual void SetTempAppVisuals(ITemporaryAppVisualArray *);
};

struct PWSLayoutItem
{
	virtual long GetAppUserModelID(HSTRING__ * *);
	virtual long GetFilePath(HSTRING__ * *);
	virtual long SetAppModelUserId(unsigned short const *);
	virtual long SetDesktopLinkPath(unsigned short const *);
};

class PWSLayoutParser
{
	long CalculateSelectionAttributes();
	long ParsePinnedAppNode(IXMLDOMNode *,IPenWorkspaceLayoutItem * *);
public:
	PWSLayoutParser();
	long RuntimeClassInitialize();
	virtual long ParsePWSLayoutCollectionNode(Microsoft::WRL::ComPtr<IXMLDOMNode> &,CCoSimpleArray<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> > > &);
	virtual long SetCurrentRegion(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
};

class PWSLayoutPolicyManager
{
	long ConvertItemsToObjectArray(CCoSimpleArray<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> > > &,IObjectArray * *);
	long GetDefaultLayoutXML(IXMLDOMDocument2 * *);
	long GetOEMLayoutXML(IXMLDOMDocument2 * *);
	long LoadOEMLayoutFilePath();
	long PopulateDefaultLayoutItems(CCoSimpleArray<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> > > &);
	long PopulateOEMLayoutItems(CCoSimpleArray<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> > > &);
	long ValidateDefaultLayoutXML(IXMLDOMDocument2 *);
	long ValidateLayoutModificationXML(IXMLDOMDocument2 *);
	static long LoadLayoutXMLFromFilePath(Microsoft::WRL::Wrappers::HStringReference *,IXMLDOMDocument2 * *);
	static long Populate(CCoSimpleArray<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> > > &,Microsoft::WRL::ComPtr<IXMLDOMNode> &);
	static long XMLDocFromStream(Windows::Storage::Streams::IRandomAccessStream *,IXMLDOMDocument2 * *);
public:
	PWSLayoutPolicyManager();
	long RuntimeClassInitialize();
	virtual long CanApplyPenWorkspaceLayout(PenWorkspaceLayoutType,int *);
	virtual long GetPenWorkspaceLayout(PenWorkspaceLayoutType,IObjectArray * *);
	virtual ~PWSLayoutPolicyManager();
};

struct ParsedPenWorkspaceLayout
{
	ParsedPenWorkspaceLayout & operator=(ParsedPenWorkspaceLayout const &);
	~ParsedPenWorkspaceLayout();
};

struct ParsedTaskbarLayout
{
	void operator=(ParsedTaskbarLayout const &);
	~ParsedTaskbarLayout();
};

namespace PenWorkspace
{
	namespace Discover
	{
		struct ObjectArray
		{
			virtual long GetAt(unsigned int,_GUID const &,void * *);
			virtual long GetCount(unsigned int *);
			void AddObject(IUnknown *);
		};

		class RecentAppsCache
		{
			bool IsQualifiedDisplayItem(std::shared_ptr<AppUsageData>);
			bool MatchesStickyNote(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
			long CreateRecentItem(std::shared_ptr<AppUsageData>,IDiscoverRecentItem * *);
			long EnsureUnifiedTileManager();
			long GetSortedAppList(std::vector<std::shared_ptr<AppUsageData>,std::allocator<std::shared_ptr<AppUsageData> > > &);
			long LoadDataFromDisk();
			long LoadDefaults();
			long LoadJsonDataFromDisk(Windows::Data::Json::IJsonObject *);
			long LoadOEMApps(_FILETIME,int *);
			long PrependDefaultApp(unsigned short const *,_FILETIME &);
			long PurgeLowUsageApps();
			long SaveDataToDisk();
			long SaveDataToJson(Windows::Data::Json::IJsonObject * *);
			long TrackProcess(unsigned long,_FILETIME const &);
			static unsigned long s_ProcessQueueThreadProc(void *);
			unsigned long ProcessQueueThreadProc();
		public:
			RecentAppsCache();
			long GetMRUApps(int,std::vector<Microsoft::WRL::ComPtr<IDiscoverRecentItem>,std::allocator<Microsoft::WRL::ComPtr<IDiscoverRecentItem> > > &);
			long HaveUsedPen(int *);
			long OnForegroundProcessChanged(unsigned long,unsigned long,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int);
			long RuntimeClassInitialize();
			virtual ~RecentAppsCache();
		};

		struct RecentItem
		{
			virtual long GetIcon(tagSIZE,float,IStream * *,tagSIZE *,unsigned long *);
		};

		struct TrackingData
		{
			~TrackingData();
		};

		struct UTMIconLoader
		{
			virtual long GetIcon(tagSIZE,float,IStream * *,tagSIZE *,unsigned long *);
		};

		struct UTMRecentItem
		{
			UTMRecentItem();
			long RuntimeClassInitialize(WindowsInternal::Shell::UnifiedTile::IUnifiedTile *);
			virtual long Activate();
			virtual long GetIdentifier(unsigned short * *);
			virtual long GetIsDesktopItem(int *);
			virtual long GetTitle(unsigned short * *);
		};

		long GetApplicationUserModelIdFromLinkFile(HSTRING__ * const,HSTRING__ * *);
	};

};

struct PenWorkspaceBrokerTelemetry
{
	class OfficeInstalled
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool);
	};

	static bool IsEnabled(unsigned char,unsigned __int64);
	static void FailedToLoadDataFromDisk();
	static void FailedToParseJsonString();
	static void OemAppLoaded<unsigned short const * &>(unsigned short const * &);
	void OemAppLoaded_(unsigned short const *);
};

class PenWorkspaceDiscoverBroker
{
	static long GetInstallTime(WindowsInternal::Shell::UnifiedTile::IUnifiedTile *,_FILETIME *);
public:
	PenWorkspaceDiscoverBroker();
	long RuntimeClassInitialize();
	virtual long ActivateApp(unsigned short const *);
	virtual long GetAumid(unsigned short const *,unsigned short * *,_FILETIME *);
	virtual long GetPackageFullNameFromAppId(unsigned short const *,unsigned short * *);
	virtual long GetRecentItems(int,IObjectArray * *);
	virtual long HaveUsedPen(int *);
	virtual long PerformDelayedInitialization();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void OnForegroundProcessChanged(unsigned long,unsigned long,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int);
};

struct PenWorkspaceDiscoverBrokerFactory
{
	PenWorkspaceDiscoverBrokerFactory();
	long RuntimeClassInitialize();
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long LockServer(int);
	virtual long PerformDelayedInitialization();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class PenWorkspaceScreenCaptureBroker
{
	long GetScreenCaptureInternal(HMONITOR__ *,IStream * *,IWICBitmapSource * *);
public:
	PenWorkspaceScreenCaptureBroker();
	long RuntimeClassInitialize();
	virtual long GetScreenCapture(IStream * *,HMONITOR__ *);
	virtual long GetScreenCaptureWithWICBitmap(HMONITOR__ *,IStream * *,IWICBitmapSource * *);
};

struct PeopleBarFlyoutExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

struct PeopleBarJumpViewExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

struct PeoplePaneViewInfo
{
	PeoplePaneViewInfo(unsigned short const *,ViewType,tagSIZE);
	long StartTelemetryShowTimer();
};

class PeoplePaneViewManager
{
	struct ViewChangeListener
	{
		ViewChangeListener(ViewChangeListener const &);
		~ViewChangeListener();
	};

	HWND__ * GetHwndFromView(IApplicationView *);
	bool IsApplicationViewAlreadyStashed(IApplicationView *);
	long AddPeoplePaneToTabletModeLayout(IApplicationView *);
	long AddedApplicationView(IApplicationView *);
	long CloseView(IApplicationView *);
	long FindPaneViewInfoByContactId(unsigned short const *,std::shared_ptr<PeoplePaneViewInfo> &);
	long FindPendingShareViewInfoByContactId(unsigned short const *,std::shared_ptr<PeoplePaneViewInfo> &);
	long FindPendingViewByHwnd(HWND__ *,IApplicationView * *);
	long FindShareViewInfosByContactId(unsigned short const *,std::vector<std::shared_ptr<PeoplePaneViewInfo>,std::allocator<std::shared_ptr<PeoplePaneViewInfo> > > &);
	long FindViewInfoByApplicationView(IApplicationView *,std::shared_ptr<PeoplePaneViewInfo> &);
	long FindViewInfoByApplicationViewId(int,std::shared_ptr<PeoplePaneViewInfo> &);
	long FocusApplicationView(IApplicationView *,bool);
	long GetRectFromPropertySet(unsigned short const *,tagRECT *);
	long GetTabletModePositioner(ITabletModePositioner * *);
	long HandleViewReady(int,std::shared_ptr<PeoplePaneViewInfo> &);
	long IsWindowVisibleInContactPanel(HWND__ *,unsigned short const *,int *);
	long LaunchPeoplePaneForContactWithArgs(unsigned short const *,unsigned short const *);
	long RemovePendingView(IApplicationView *);
	long RemovedApplicationView(IApplicationView *);
	static unsigned short const * s_GetAppId();
	void NotifyListeners(PeoplePaneViewChange,unsigned short const *,int);
	void RemovePaneViewInfoForContactId(unsigned short const *);
	void RemovePendingShareViewInfoForContactId(unsigned short const *);
public:
	PeoplePaneViewManager();
	long RuntimeClassInitialize();
	virtual long ClosePeoplePane(unsigned short const *);
	virtual long ClosePeopleShare(int);
	virtual long GetBarFlyoutExperienceManager(_GUID const &,void * *);
	virtual long GetJumpListExperienceManager(_GUID const &,void * *);
	virtual long GetPeopleBarDropTarget(IInspectable * *);
	virtual long GetRectForFlyoutButton(tagRECT *);
	virtual long GetRectFromContactId(unsigned short const *,tagRECT *);
	virtual long GetShoulderTapExperienceManager(_GUID const &,void * *);
	virtual long GetViewContactId(int,unsigned short * *);
	virtual long GetViewDesiredSize(int,tagSIZE *);
	virtual long IsApplicationVisibleInContactPanel(unsigned short const *,int *);
	virtual long IsPeoplePaneOpen(unsigned short const *,int *);
	virtual long LaunchPeoplePane(unsigned short const *,unsigned short const *);
	virtual long LaunchPeopleShare(unsigned short const *,IInspectable *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long PeoplePaneViewReady(unsigned short const *,int);
	virtual long PeopleShareViewReady(unsigned short const *,int);
	virtual long RegisterApplications();
	virtual long SetPeopleBandWindow(HWND__ *);
	virtual long SetPeopleBarCoreWindow(HWND__ *);
	virtual long SetPeopleBarDropTarget(IInspectable *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long SubscribeToViewChangeNotifications(IPeoplePaneViewUpdateSink *,unsigned long *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long UnsubscribeFromViewChangeNotifications(unsigned long);
	virtual ~PeoplePaneViewManager();
};

struct PerMonitorShellPositionerManager
{
	PerMonitorShellPositionerManager();
	long RuntimeClassInitialize();
	virtual long GetPositioner(SHELL_POSITIONER_TYPE,_GUID const &,void * *);
	virtual long SubscribeToServices(IServiceProvider *);
};

namespace PerSessionState
{
	bool HasLoginCompleted();
	bool IsCurrentThreadOnInputDesktop();
	bool IsLauncherVisible(bool);
	bool _HasDesktopSwitchCompleted();
};

namespace PerfTrack
{
	struct AppLaunchTelemetry
	{
		static bool IsEnabled(unsigned char,unsigned __int64);
		void AppLaunched_(Location,unsigned short const *);
	};

	struct AppSwitchTelemetry
	{
		void AppSwitched_(SwitchLocation,unsigned short const *,SwitchInvokeMethod,unsigned short const *);
	};

};

namespace Platform
{
	class Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>
	{
		void SetObject(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^);
	public:
		Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> & operator=(Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>);
		Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> & operator=(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^);
		Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^);
		Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ Get();
		void Release();
		void Swap(Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> &);
		~Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>();
	};

	class Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>
	{
		void SetObject(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^);
	public:
		Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> & operator=(Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>);
		Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> & operator=(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^);
		Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^);
		WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ Get();
		void Release();
		void Swap(Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> &);
		~Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>();
	};

	class Array<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>
	{
		void CopyToOrDetach(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ * *,unsigned int *);
	public:
		Array<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ *,unsigned int);
	};

	class Array<Windows::UI::Xaml::Markup::XmlnsDefinition,1>
	{
		void CopyToOrDetach(Windows::UI::Xaml::Markup::XmlnsDefinition * *,unsigned int *);
	public:
		Array<Windows::UI::Xaml::Markup::XmlnsDefinition,1>(Windows::UI::Xaml::Markup::XmlnsDefinition *,unsigned int);
	};

	class Array<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>
	{
		void CopyToOrDetach(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ * *,unsigned int *);
	public:
		Array<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ *,unsigned int);
	};

	class ArrayReference<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>
	{
		void Init(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ *,unsigned int,bool);
	};

	class ArrayReference<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>
	{
		void Init(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ *,unsigned int,bool);
	};

	namespace Collections
	{
		namespace Details
		{
			struct IteratorForVectorView<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^>
			{
				IteratorForVectorView<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^>(std::shared_ptr<unsigned int> const &,std::shared_ptr<std::vector<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>,std::allocator<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > > const &);
			};

			struct IteratorForVectorView<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^>
			{
				IteratorForVectorView<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^>(std::shared_ptr<unsigned int> const &,std::shared_ptr<std::vector<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>,std::allocator<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > > const &);
			};

			struct VectorChangedEventArgs
			{
				VectorChangedEventArgs(Windows::Foundation::Collections::CollectionChange,unsigned int);
			};

			Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ Unwrap<Windows::Internal::ComposableShell::Multitasking::ISwitchItem>(Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> const &);
			WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ Unwrap<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata>(Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> const &);
			bool VectorBindableIndexOf<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,std::equal_to<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^> >(std::integral_constant<bool,1>,std::vector<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>,std::allocator<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > const &,Object ^,unsigned int *);
			bool VectorBindableIndexOf<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,std::equal_to<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> >(std::integral_constant<bool,1>,std::vector<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>,std::allocator<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > const &,Object ^,unsigned int *);
			bool VectorIndexOf<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,std::equal_to<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^> >(std::vector<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>,std::allocator<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > const &,Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,unsigned int *);
			bool VectorIndexOf<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,std::equal_to<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> >(std::vector<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>,std::allocator<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > const &,WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,unsigned int *);
			void IncrementCounter(std::shared_ptr<unsigned int> &);
			void Init<std::vector<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>,std::allocator<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > >(std::shared_ptr<unsigned int> &,std::shared_ptr<std::vector<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>,std::allocator<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > > &);
			void Init<std::vector<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>,std::allocator<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > >(std::shared_ptr<unsigned int> &,std::shared_ptr<std::vector<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>,std::allocator<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > > &);
			void ValidateBounds(bool);
			void ValidateCounter(std::shared_ptr<unsigned int> const &,unsigned int);
			void ValidateSize(unsigned __int64);
		};

		class Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,std::equal_to<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^>,1>
		{
			void Notify(Windows::Foundation::Collections::CollectionChange,unsigned int);
		public:
			Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,std::equal_to<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^>,1>();
		};

		class Vector<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,std::equal_to<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^>,1>
		{
			void Notify(Windows::Foundation::Collections::CollectionChange,unsigned int);
		public:
			Vector<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,std::equal_to<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^>,1>();
		};

		class VectorView<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,std::equal_to<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^>,1>
		{
			VectorView<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,std::equal_to<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^>,1>(std::shared_ptr<unsigned int> const &,std::shared_ptr<std::vector<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>,std::allocator<Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > > const &);
		};

		class VectorView<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,std::equal_to<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^>,1>
		{
			VectorView<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,std::equal_to<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^>,1>(std::shared_ptr<unsigned int> const &,std::shared_ptr<std::vector<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>,std::allocator<Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > > const &);
		};

		struct VectorViewIterator<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^>
		{
			~VectorViewIterator<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^>();
		};

	};

	namespace Details
	{
		struct ControlBlock
		{
			virtual unsigned long __abi_Release();
		};

		struct CustomBox<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^>
		{
			CustomBox<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^>(WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^);
			virtual String ^ ToString();
		};

		struct Heap
		{
			static void PlacementFree(void *,void *);
		};

		struct IActivationFactory
		{
			virtual Object ^ ActivateInstance();
		};

		struct IWeakReference
		{
			virtual Object ^ Resolve(Guid *);
		};

		struct IWeakReferenceSource
		{
			virtual IWeakReference ^ GetWeakReference();
		};

		struct InProcModule
		{
			virtual unsigned long __abi_DecrementObjectCount();
			virtual unsigned long __abi_IncrementObjectCount();
		};

		class __abi_CaptureBase
		{
		protected:
			virtual ~__abi_CaptureBase();
		public:
			static void operator delete(void *,void *);
			void Delete(__abi_CaptureBase *,void *);
		};

		struct __abi_CapturePtr
		{
			~__abi_CapturePtr();
		};

		struct __abi_FunctorCapture<<lambda_dfd4c4fe7dd339db13c17a1e4e5cfd6e>,void,Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Windows::Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^>
		{
			virtual void Invoke(Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Windows::Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^);
		};

		Details::InProcModule & module_;
		int Initialize();
		long InitializeData(int);
		long ReCreateFromException(Exception ^);
		void Cleanup();
		void DuplicateString(HSTRING__ *,HSTRING__ * *);
		void UninitializeData(int);
	};

	class EventSource
	{
		void DoInvokeVoid<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^>,<lambda_843a4523c4ce898f7fb4bb4d9e96aac5> >(Details::EventLock *,<lambda_843a4523c4ce898f7fb4bb4d9e96aac5>);
		void DoInvokeVoid<Windows::Foundation::Collections::VectorChangedEventHandler<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^>,<lambda_0185f2fcaf29182e01e5e20f55c595fb> >(Details::EventLock *,<lambda_0185f2fcaf29182e01e5e20f55c595fb>);
		void DoInvokeVoid<Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Windows::Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^>,<lambda_16286fe9edebb121e83a2911c5464574> >(Details::EventLock *,<lambda_16286fe9edebb121e83a2911c5464574>);
		void DoInvokeVoid<Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Windows::Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^>,<lambda_ded30c34a5b946bc18cf9caf8a4ec53d> >(Details::EventLock *,<lambda_ded30c34a5b946bc18cf9caf8a4ec53d>);
		void DoInvokeVoid<Windows::UI::Xaml::Interop::BindableVectorChangedEventHandler,<lambda_fa30a613036bcec23797998bf71b5136> >(Details::EventLock *,<lambda_fa30a613036bcec23797998bf71b5136>);
	public:
		void InvokeVoid<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^>,Windows::Foundation::Collections::IObservableVector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^> ^,Windows::Foundation::Collections::IVectorChangedEventArgs ^>(Details::EventLock *,Windows::Foundation::Collections::IObservableVector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^> ^,Windows::Foundation::Collections::IVectorChangedEventArgs ^);
		void InvokeVoid<Windows::Foundation::Collections::VectorChangedEventHandler<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^>,Windows::Foundation::Collections::IObservableVector<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> ^,Windows::Foundation::Collections::IVectorChangedEventArgs ^>(Details::EventLock *,Windows::Foundation::Collections::IObservableVector<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> ^,Windows::Foundation::Collections::IVectorChangedEventArgs ^);
		void InvokeVoid<Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Windows::Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^>,Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Windows::Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^>(Details::EventLock *,Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Windows::Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^);
		void InvokeVoid<Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Windows::Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^>,Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Windows::Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^>(Details::EventLock *,Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Windows::Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^);
		void InvokeVoid<Windows::UI::Xaml::Interop::BindableVectorChangedEventHandler,Windows::UI::Xaml::Interop::IBindableObservableVector ^,Object ^>(Details::EventLock *,Windows::UI::Xaml::Interop::IBindableObservableVector ^,Object ^);
		~EventSource();
	};

	struct Guid
	{
		bool Equals(_GUID const &);
	};

	struct String
	{
		String(HSTRING__ *);
		String(wchar_t const *);
	};

	struct WeakReference
	{
		~WeakReference();
	};

	class WriteOnlyArray<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>
	{
	protected:
		WriteOnlyArray<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ *,unsigned int);
		static Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ * AllocateAndCopyElements(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const *,unsigned int);
	public:
		~WriteOnlyArray<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>();
	};

	class WriteOnlyArray<Windows::UI::Xaml::Markup::XmlnsDefinition,1>
	{
	protected:
		WriteOnlyArray<Windows::UI::Xaml::Markup::XmlnsDefinition,1>(Windows::UI::Xaml::Markup::XmlnsDefinition *,unsigned int);
		static Windows::UI::Xaml::Markup::XmlnsDefinition * AllocateAndCopyElements(Windows::UI::Xaml::Markup::XmlnsDefinition const *,unsigned int);
	public:
		~WriteOnlyArray<Windows::UI::Xaml::Markup::XmlnsDefinition,1>();
	};

	class WriteOnlyArray<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>
	{
	protected:
		WriteOnlyArray<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ *,unsigned int);
		static WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ * AllocateAndCopyElements(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ const *,unsigned int);
	public:
		~WriteOnlyArray<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>();
	};

};

class PositionAdjustmentHistory
{
	unsigned int GetEntryCountForView(IApplicationView *);
	void TrimDecayedEntries();
public:
	virtual PositionAdjustmentAction AddPositionAdjustment(IApplicationView *);
	virtual void ClearHistory();
	virtual void OverrideDecayTime(unsigned long);
};

struct PositionerPriority
{
	PositionerPriority();
	long RuntimeClassInitialize(unsigned long);
	virtual SHELL_POSITIONER_TYPE GetCurrentPositioner();
	virtual int ContainsPositioner(SHELL_POSITIONER_TYPE);
	virtual long Clone(IShellPositionerPriority * *);
	virtual unsigned long GetBitfieldToPersist();
	virtual void AddPositioner(SHELL_POSITIONER_TYPE);
	virtual void RemovePositioner(SHELL_POSITIONER_TYPE);
	virtual void SwapPositioners(SHELL_POSITIONER_TYPE,SHELL_POSITIONER_TYPE);
};

namespace PositionerPropertySetHelpers
{
	long GetDetailsForActivation(IApplicationView *,IUnknown *,PositionerPropertySetHelpers::ActivationPropertyFlags *,PositionerPropertySetHelpers::ViewSizePreferences *);
	long IsVoiceActivation(Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IPropertySet>,bool *);
	long SetAppActivationResponse(Windows::Internal::ShellHelpers::PropertySetHelper &,unsigned char);
};

struct PresentationReadyChangedEventArgs
{
	PresentationReadyChangedEventArgs();
	virtual long get_ReadyForPresentation(unsigned char *);
};

struct PresentationRequestedArgs
{
	PresentationRequestedArgs(Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings *,IApplicationView *);
	PresentationRequestedArgs(Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings *,IApplicationView *,unsigned int);
	virtual long get_AllowDisplayRegionSpanning(int *);
	virtual long get_BoundsPreference(unsigned int *);
	virtual long get_IncludeSystemChrome(int *);
	virtual long get_IsAdjacent(int *);
	virtual long get_IsExclusive(int *);
	virtual long get_KeepAspectRatio(int *);
	virtual long get_Offset(tagPOINT *);
	virtual long get_PresenterKind(unsigned int *);
	virtual long get_RelativePositionAnchorView(IApplicationView * *);
	virtual long get_RequestedDisplayRegionIds(IInspectable * *);
	virtual long get_Size(tagSIZE *);
	virtual long get_WindowingEnvironmentId(unsigned int *);
};

struct PrimaryAppProxyBase
{
	virtual ~PrimaryAppProxyBase();
};

class PriorityBoostHelper
{
	long BoostPriorityHelper();
	void ResetActivationTimeoutPolicy();
public:
	PriorityBoostHelper(CSingleViewShellExperience *);
	long OnViewCreated();
	long RegisterForStartReady(IServiceProvider *);
	virtual long AllowSuspension(unsigned char);
	virtual long BoostPriority();
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long UnboostPriority();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct PrivilegedHotkeyOperations
{
	PrivilegedHotkeyOperations();
	virtual long RequestPrivilegedHotkeys(unsigned int,IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const,IImmersiveWindowMessageNotification *,unsigned long *);
	virtual long UnrequestPrivilegedHotkeys(unsigned long);
};

namespace PrivilegedOperations
{
	bool IsTabShellEnabled();
};

struct PrivilegedOperationsBase<IPrivilegedArrangementOperations>
{
	long RuntimeClassInitialize(IamAccess *,Microsoft::WRL::WeakRef);
	virtual ~PrivilegedOperationsBase<IPrivilegedArrangementOperations>();
};

struct PrivilegedOperationsBase<IPrivilegedDesktopOperations>
{
	long RuntimeClassInitialize(IamAccess *,Microsoft::WRL::WeakRef);
	virtual ~PrivilegedOperationsBase<IPrivilegedDesktopOperations>();
};

struct PrivilegedOperationsBase<IPrivilegedForegroundOperations>
{
	long RuntimeClassInitialize(IamAccess *,Microsoft::WRL::WeakRef);
	virtual ~PrivilegedOperationsBase<IPrivilegedForegroundOperations>();
};

struct PrivilegedOperationsBase<IPrivilegedHotkeyOperations>
{
	long RuntimeClassInitialize(IamAccess *,Microsoft::WRL::WeakRef);
	virtual ~PrivilegedOperationsBase<IPrivilegedHotkeyOperations>();
};

struct PrivilegedOperationsBase<IPrivilegedNotificationOperations>
{
	long RuntimeClassInitialize(IamAccess *,Microsoft::WRL::WeakRef);
	virtual ~PrivilegedOperationsBase<IPrivilegedNotificationOperations>();
};

struct PrivilegedOperationsBase<IPrivilegedPresentationOperations>
{
	long RuntimeClassInitialize(IamAccess *,Microsoft::WRL::WeakRef);
	virtual ~PrivilegedOperationsBase<IPrivilegedPresentationOperations>();
};

struct PrivilegedOperationsBase<IPrivilegedSizeConstraintsOperations>
{
	long RuntimeClassInitialize(IamAccess *,Microsoft::WRL::WeakRef);
	virtual ~PrivilegedOperationsBase<IPrivilegedSizeConstraintsOperations>();
};

struct PrivilegedOperationsBase<IPrivilegedTabletModeOperations>
{
	long RuntimeClassInitialize(IamAccess *,Microsoft::WRL::WeakRef);
	virtual ~PrivilegedOperationsBase<IPrivilegedTabletModeOperations>();
};

struct PrivilegedOperationsBase<IPrivilegedWindowGroupingOperations>
{
	long RuntimeClassInitialize(IamAccess *,Microsoft::WRL::WeakRef);
	virtual ~PrivilegedOperationsBase<IPrivilegedWindowGroupingOperations>();
};

struct PrivilegedOperationsBase<IPrivilegedWindowOwnershipOperations>
{
	long RuntimeClassInitialize(IamAccess *,Microsoft::WRL::WeakRef);
	virtual ~PrivilegedOperationsBase<IPrivilegedWindowOwnershipOperations>();
};

class PrivilegedOperationsService
{
	static PrivilegedOperationsService * s_this;
public:
	PrivilegedOperationsService();
	long InitializePrivilegedOperationsForIam(IPrivilegedOperationsConsumer *);
	long RuntimeClassInitialize();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual ~PrivilegedOperationsService();
};

class PrivilegedOperationsServiceBase<CPrivilegedArrangementOperations,CPrivilegedForegroundOperations,CPrivilegedTabletModeOperations,CPrivilegedSizeConstraintsOperations,PrivilegedWindowOwnershipOperations,PrivilegedHotkeyOperations,PrivilegedWindowGroupingOperations>
{
protected:
	long InitializePrivilegedOperations(Microsoft::WRL::WeakRef);
	long PublishPrivilegedOperations(IPrivilegedOperationsConsumer *,_GUID const &);
};

class PrivilegedOperationsServiceBase<CPrivilegedDesktopOperations,CPrivilegedPresentationOperations,CPrivilegedNotificationOperations,CPrivilegedArrangementOperations,CPrivilegedForegroundOperations,CPrivilegedTabletModeOperations,CPrivilegedSizeConstraintsOperations,PrivilegedWindowOwnershipOperations,PrivilegedHotkeyOperations,PrivilegedWindowGroupingOperations>
{
protected:
	long InitializePrivilegedOperations(Microsoft::WRL::WeakRef);
	long PublishPrivilegedOperations(IPrivilegedOperationsConsumer *,_GUID const &);
};

class PrivilegedOperationsServiceBase<CPrivilegedForegroundOperations,CPrivilegedTabletModeOperations,CPrivilegedSizeConstraintsOperations,PrivilegedWindowOwnershipOperations,PrivilegedHotkeyOperations,PrivilegedWindowGroupingOperations>
{
protected:
	long InitializePrivilegedOperations(Microsoft::WRL::WeakRef);
	long PublishPrivilegedOperations(IPrivilegedOperationsConsumer *,_GUID const &);
};

class PrivilegedOperationsServiceBase<CPrivilegedNotificationOperations,CPrivilegedArrangementOperations,CPrivilegedForegroundOperations,CPrivilegedTabletModeOperations,CPrivilegedSizeConstraintsOperations,PrivilegedWindowOwnershipOperations,PrivilegedHotkeyOperations,PrivilegedWindowGroupingOperations>
{
protected:
	long InitializePrivilegedOperations(Microsoft::WRL::WeakRef);
	long PublishPrivilegedOperations(IPrivilegedOperationsConsumer *,_GUID const &);
};

class PrivilegedOperationsServiceBase<CPrivilegedPresentationOperations,CPrivilegedNotificationOperations,CPrivilegedArrangementOperations,CPrivilegedForegroundOperations,CPrivilegedTabletModeOperations,CPrivilegedSizeConstraintsOperations,PrivilegedWindowOwnershipOperations,PrivilegedHotkeyOperations,PrivilegedWindowGroupingOperations>
{
protected:
	long InitializePrivilegedOperations(Microsoft::WRL::WeakRef);
	long PublishPrivilegedOperations(IPrivilegedOperationsConsumer *,_GUID const &);
};

class PrivilegedOperationsServiceBase<CPrivilegedSizeConstraintsOperations,PrivilegedWindowOwnershipOperations,PrivilegedHotkeyOperations,PrivilegedWindowGroupingOperations>
{
protected:
	long InitializePrivilegedOperations(Microsoft::WRL::WeakRef);
	long PublishPrivilegedOperations(IPrivilegedOperationsConsumer *,_GUID const &);
};

class PrivilegedOperationsServiceBase<CPrivilegedTabletModeOperations,CPrivilegedSizeConstraintsOperations,PrivilegedWindowOwnershipOperations,PrivilegedHotkeyOperations,PrivilegedWindowGroupingOperations>
{
protected:
	long InitializePrivilegedOperations(Microsoft::WRL::WeakRef);
	long PublishPrivilegedOperations(IPrivilegedOperationsConsumer *,_GUID const &);
};

class PrivilegedOperationsServiceBase<PrivilegedHotkeyOperations,PrivilegedWindowGroupingOperations>
{
protected:
	long InitializePrivilegedOperations(Microsoft::WRL::WeakRef);
	long PublishPrivilegedOperations(IPrivilegedOperationsConsumer *,_GUID const &);
};

class PrivilegedOperationsServiceBase<PrivilegedWindowGroupingOperations>
{
protected:
	long InitializePrivilegedOperations(Microsoft::WRL::WeakRef);
	long PublishPrivilegedOperations(IPrivilegedOperationsConsumer *,_GUID const &);
};

class PrivilegedOperationsServiceBase<PrivilegedWindowOwnershipOperations,PrivilegedHotkeyOperations,PrivilegedWindowGroupingOperations>
{
protected:
	long InitializePrivilegedOperations(Microsoft::WRL::WeakRef);
	long PublishPrivilegedOperations(IPrivilegedOperationsConsumer *,_GUID const &);
};

class PrivilegedWindowGroupingOperations
{
	virtual long CreateWindowGroup(unsigned long *);
	virtual long DeleteWindowGroup(unsigned long);
	virtual long EnableWindowGroupPolicy(unsigned long,unsigned long,unsigned long);
	virtual long SetWindowGroup(unsigned long,HWND__ *,unsigned long,unsigned long);
public:
	PrivilegedWindowGroupingOperations();
};

class PrivilegedWindowOwnershipOperations
{
	long SetZOrderBandToMatch(HWND__ *,HWND__ *);
	virtual long SetBridgeWindowChild(HWND__ *,HWND__ *);
	virtual long SetWindowOwner(HWND__ *,HWND__ *);
public:
	PrivilegedWindowOwnershipOperations();
};

class PropertySetAssembler
{
	Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> > GetAs<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> >();
	void EnsurePropertySet();
	void EnsureValueFactory();
public:
	bool Insert(wchar_t const *,IInspectable *,IInspectable *);
	bool InsertHString<wchar_t const *>(wchar_t const *,HSTRING__ *,HSTRING__ *);
	~PropertySetAssembler();
};

struct QuickConnectExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

struct QuickConnectTelemetry
{
	class ExperienceManager_CheckAndPopulateContact
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		ExperienceManager_CheckAndPopulateContact Split();
		void ExperienceManager_CheckAndPopulateContact_PopulatedDelayLoadedContact();
		void StartActivity();
		~ExperienceManager_CheckAndPopulateContact();
	};

	class ExperienceManager_FinalizeWindowPlacement
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ExperienceManager_FinalizeWindowPlacement();
	};

	class ExperienceManager_FinalizeWindowPosition
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void ExperienceManager_FinalizeWindowPosition_Finalized<long &,long &,long &,long &>(long &,long &,long &,long &);
		void ExperienceManager_FinalizeWindowPosition_FixedPosition();
		void StartActivity();
		~ExperienceManager_FinalizeWindowPosition();
	};

	class ExperienceManager_OnViewCreated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void ExperienceManager_OnViewCreated_Params<_GUID &>(_GUID &);
		void ExperienceManager_OnViewCreated_RegisteredClientWindowReadyForPresentation();
		void StartActivity();
		~ExperienceManager_OnViewCreated();
	};

	class ExperienceManager_OnViewDestroyed
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void ExperienceManager_OnViewDestroyed_Params<_GUID &>(_GUID &);
		void ExperienceManager_OnViewDestroyed_ReleasedLifeTime();
		void ExperienceManager_OnViewDestroyed_UnregisteredClientWindowReadyForPresentation();
		void StartActivity();
		~ExperienceManager_OnViewDestroyed();
	};

	class ExperienceManager_OnViewPropertiesChanging
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void ExperienceManager_OnViewPropertiesChanging_IsQuickConnectViewServiceReady();
		void ExperienceManager_OnViewPropertiesChanging_WindowResize();
		void StartActivity();
		~ExperienceManager_OnViewPropertiesChanging();
	};

	class ExperienceManager_PopulateDelayLoadedContactCard
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void ExperienceManager_PopulateDelayLoadedContactCard_Params<_GUID &>(_GUID &);
		void ExperienceManager_PopulateDelayLoadedContactCard_SkipDueToCookieUnmatch<_GUID &,_GUID &>(_GUID &,_GUID &);
		void StartActivity();
		~ExperienceManager_PopulateDelayLoadedContactCard();
	};

	class ExperienceManager_ShowContactCard
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void ExperienceManager_ShowContactCard_Guid<_GUID &>(_GUID &);
		void ExperienceManager_ShowContactCard_Normalized<float &,float &,float &,float &>(float &,float &,float &,float &);
		void ExperienceManager_ShowContactCard_Scaled<float &,float &,float &,float &>(float &,float &,float &,float &);
		void ExperienceManager_ShowContactCard_Showing();
		void ExperienceManager_ShowContactCard_SkipShowNewContactCardDueToOldOneStillExists();
		void StartActivity();
		~ExperienceManager_ShowContactCard();
	};

	class ExperienceManager_UpdateWindowPosition
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void ExperienceManager_UpdateWindowPosition_Params<int &,int &>(int &,int &);
		void ExperienceManager_UpdateWindowPosition_SetPosition<long &,long &,long &,long &>(long &,long &,long &,long &);
		void StartActivity();
		~ExperienceManager_UpdateWindowPosition();
	};

	static void ExperienceManager_ExitContactCard<_GUID &>(_GUID &);
	static void ExperienceManager_OnDismiss<_GUID &>(_GUID &);
	static void ExperienceManager_RegisteredWithLightDismiss();
	static void ExperienceManager_StartedLifeTime();
};

namespace QwordHelpers
{
	unsigned __int64 BoolToQword(bool);
};

struct RecoveredViewInfo
{
	RecoveredViewInfo(RecoveredViewInfo const &);
	~RecoveredViewInfo();
};

struct RefCountWrapper<HSTRING__ *,void>
{
	static long Wrap(HSTRING__ *,Microsoft::WRL::Wrappers::HString *);
};

struct RelativeMargins
{
	Geometry::CRect ApplyMargins(Geometry::CRect const &);
};

struct RemoteLauncherForegroundHandler
{
	RemoteLauncherForegroundHandler();
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long TryAcquireForegroundRightsForRemoteLaunch();
};

class RetailDemoExperienceManager
{
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long OnViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	static int _ParseScreenInt(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,bool,bool);
	static std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > _SplitString(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,unsigned short);
	static tagRECT _ParseScreenRect(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	virtual ~RetailDemoExperienceManager();
	void _AdjustWorkingArea(tagRECT);
	void _Close();
	void _Dock();
	void _Float();
	void _ParseExperienceArguments(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	void _RestoreWorkingArea();
	void _SetDefaults();
	void _SetFrameRect(tagRECT);
	void _SetTopmost();
	void _SetWindowBand();
	void _Show();
public:
	RetailDemoExperienceManager();
	long RuntimeClassInitialize();
	virtual long Close();
	virtual long Dock(int,int,int,int);
	virtual long Float(int,int,int,int);
	virtual long GetReservedSpace(int *,long *,long *,long *);
	virtual long Hide();
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long LaunchApplication(HSTRING__ *,HSTRING__ *,HSTRING__ *);
	virtual long SetTopmost(int);
	virtual long SetWindowBand(int);
	virtual long Show();
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
};

struct RetailDemoExperienceManagerFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

struct RoVariant
{
	struct Accessor
	{
		long GetBoolean(unsigned char *);
		long GetInt32(int *);
		long GetRect(Windows::Foundation::Rect *);
		long GetSize(Windows::Foundation::Size *);
		long GetString(HSTRING__ * *);
	};

	struct OutRef
	{
		~OutRef();
	};

	RoVariant(IInspectable *,bool);
	~RoVariant();
};

struct RpcOptionsHelper
{
	static long GetRpcOptions(IUnknown *,bool,IRpcOptions * *);
};

struct SERVICE_AVAILABILITY_CHANGED_DATA
{
	SERVICE_AVAILABILITY_CHANGED_DATA(IImmersiveApplication *,IObjectArray *,unsigned int,_GUID const *,IMM_APP_SERVICE_NOTIFY_FLAGS);
	~SERVICE_AVAILABILITY_CHANGED_DATA();
};

struct SH<void *,SH_HANDLE>
{
	void Reset();
};

struct SH_HANDLE
{
	~SH_HANDLE();
};

struct SP<unsigned char,SP_HLOCAL<unsigned char> >
{
	void Reset();
};

struct SP<unsigned char,SP_MEM<unsigned char> >
{
	void Reset();
};

struct SP<unsigned long,SP_MEM<unsigned long> >
{
	void Reset();
};

struct SP<unsigned short *,SP_MEM<unsigned short *> >
{
	void Reset();
};

struct SP<unsigned short,SP_MEM<unsigned short> >
{
	void Reset();
};

namespace SQM
{
	unsigned short const * CensorAppID(unsigned short const *);
};

namespace ScalingCompatTelemetry
{
	struct CScalingCompatTelemetry
	{
		void ScalingCompatCalulationInvoked_(AppType,unsigned int,unsigned int);
	};

};

class ScreenClippingBrokerImpl
{
	virtual long GetGraphicsCaptureItemForAllDisplays(_GUID const &,void * *);
public:
	ScreenClippingBrokerImpl();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class ScreenClippingExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

class ScreenManager
{
	struct CacheEntry
	{
		~CacheEntry();
	};

	long HandleAppToAppLayoutChange(IAppLayoutOperation *,bool *);
	long HandleInPlaceCacheUpdateForLayoutChange(IAppLayoutOperation *,bool *);
	void ForgetView(IApplicationView *);
public:
	ScreenManager();
	virtual int GetCacheSize();
	virtual long AppLayoutChanged(IImmersiveMonitor *,IAppLayoutOperation *);
	virtual long Destroy();
	virtual long GetAppViewCloseOverrideOperation(IAppLayout *,IApplicationView *,bool,IAppLayoutOperation * *);
	virtual long Initialize(ScreenManangerInitParams const &);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long TabletModeChanged(bool);
};

namespace ScreenManagerHelpers
{
	long CreateReverseAppToAppSwitchLayoutOperation(ITabletModePositioner *,IApplicationView *,bool,IAppLayoutOperation * *);
	long IsRelatedWin32ViewPresentInLayout(IAppLayout *,IApplicationView *,IApplicationView * *);
};

class SearchAppDesktopExperienceView
{
	HWND__ * GetHwnd();
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> GetViewWrapper();
	Windows::Internal::Shell::Experience::ShellExperienceViewBorderEdge GetBorderFlagFromStuckEdge(EDGEUI_TRAYSTUCKPLACE,bool);
	bool GetAppsUseLightTheme();
	bool GetColorPrevalenceEnabled();
	bool GetHideFileExtensionsEnabled();
	bool IsViewVisible();
	int GetSearchBoxHeight(HMONITOR__ *);
	long ApplyCortanaWindowRegion(tagRECT,tagRECT,tagRECT,tagRECT,bool,bool,HMONITOR__ *);
	long BuildAdditionalArgsString(HMONITOR__ *,int,HSTRING__ * *);
	long CalculateLastActivatedTrayItemRect(tagRECT *);
	long ComputeAndOnTraySearchItemChanged(HMONITOR__ *);
	long DismissCortanaApp();
	long EnsureImmersiveShell();
	long EnsureInputHostManager();
	long GetActivateArgs(HSTRING__ *,HSTRING__ * *);
	long GetEdgeUIManager(HMONITOR__ *,IEdgeUiManager * *);
	long GetImmersiveLauncherMonitor(HMONITOR__ * *);
	long GetMonitorInformation(HMONITOR__ *,tagRECT *,tagRECT *,tagRECT *,EDGEUI_TRAYSTUCKPLACE *,bool *);
	long GetStartSize(Windows::Foundation::Size *);
	long GetStuckPlace(HMONITOR__ *,EDGEUI_TRAYSTUCKPLACE *);
	long GetViewWrapperAs<INtUserViewWrapper>(Microsoft::WRL::ComPtr<INtUserViewWrapper> &);
	long IsShowForTransitions(HSTRING__ *,bool *);
	long IsTraySearchBoxVisible(HMONITOR__ *,bool *);
	long NotifyAppWithTransitionType(unsigned short const *,Windows::Internal::Shell::Experience::CortanaAppTransitionType,HSTRING__ *);
	long NotifyShellModeChanged();
	long NotifyTaskbarSearchBoxChanged();
	long NotifyView(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long NotifyView(unsigned short const *,Windows::Foundation::Collections::IPropertySet *);
	long OnViewChanged(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *);
	long OnViewCloaking();
	long OnViewEvent(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *);
	long OnViewEventQueued(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long OnViewHidden();
	long OnViewPropertiesChanging();
	long OnViewShown();
	long OnViewUncloaking();
	long OnWindowSizeChangeHandled();
	long PositionAlongsideStart();
	long PositionCortanaWindow(bool,bool);
	long PostTargetedMessage(SearchAppDesktopExperienceView::TargetedMessageKind,unsigned short);
	long RegisterGlobalBackButton();
	long Relaunch(HSTRING__ *,Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	long RemoveRectFromRegion(HRGN__ *,int,int,int,int);
	long ResetCortanaWindowRegion();
	long SetZBand(ZBID);
	long ShowBorder(tagRECT *);
	long ShowInternal(HSTRING__ *,Windows::Internal::Shell::Experience::ShellExperienceViewFocusOptions,Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	long UnregisterGlobalBackButton();
	static HICON__ * HICONFromBitmap(HBITMAP__ *);
	static __int64 s_SearchAltTabProxyWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static long SetDefaultIconForProxyWindowThumbnail(HWND__ *);
	tagRECT ComputeCortanaWindowRect(EDGEUI_TRAYSTUCKPLACE,int,int,tagRECT,tagRECT,bool);
	virtual long AboveLockAppActiveChanged(bool);
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long LockScreenActiveChanged(bool);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long ShellModeChanged(bool);
	virtual long ShellReadyChanged();
	virtual long TryInvokeBack();
	virtual long WindowsHelloActiveChanged(bool);
	void CreateSearchAltTabProxyWindow();
	void SetExplicitDismissEnabled(unsigned char);
	void UpdateSuggestionsShowing(unsigned char);
public:
	SearchAppDesktopExperienceView();
	long RuntimeClassInitialize(IServiceProvider *,TwinUI::Cortana::ISearchAppExperienceManagerNotification *);
	long RuntimeClassInitialize(IServiceProvider *,TwinUI::Cortana::ISearchAppExperienceManagerNotification *,wistd::unique_ptr<TwinUI::Cortana::ICortanaWNFService,wistd::default_delete<TwinUI::Cortana::ICortanaWNFService> >);
	virtual long ActivateView(Windows::Internal::Shell::Experience::IShellExperienceView *,HSTRING__ *,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *);
	virtual long CanHandleView(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::ShellExperiencePositionerType,unsigned char *);
	virtual long CanTransitionFromStart(unsigned char *);
	virtual long ControlGained(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::ShellExperiencePositionerType,IInspectable *);
	virtual long ControlLost(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::ShellExperiencePositionerType,IInspectable * *);
	virtual long Dispose();
	virtual long Hide();
	virtual long MinimizeToBoxMode();
	virtual long OnPearlRectChanged();
	virtual long OnTraySearchItemChanged(Windows::Foundation::Rect,Windows::Foundation::Rect);
	virtual long OnUIATreesUnlinked();
	virtual long OnWorkAreaChanged();
	virtual long PrepareForAppTransition(Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	virtual long Show(HSTRING__ *,Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	virtual long ShowWithStart(unsigned char);
	virtual long TakeKeyboardFocus();
	virtual long Uncloak();
	virtual long get_IsExplicitDismissEnabled(unsigned char *);
	virtual long get_LockCurtainShowing(unsigned char *);
	virtual long get_SuggestionsShowing(unsigned char *);
	virtual long get_Type(Windows::Internal::Shell::Experience::ShellExperiencePositionerType *);
	virtual ~SearchAppDesktopExperienceView();
};

class SearchAppExperienceManager
{
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> _GetViewWrapper();
	bool _IsViewVisible();
	long _ApplyPriorityBoostIfNeeded();
	long _ApplyPriorityUnboostIfNeeded();
	long _CancelDeferredSuspensionTimer();
	long _CreateShellExperienceView();
	long _GetCortanaEntryPointAndArgs(unsigned short const *,unsigned int,HSTRING__ * *,HSTRING__ * *);
	long _GetImmersiveShell(IServiceProvider * *);
	long _GetViewWrapperAs<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>(Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState> &);
	long _GetViewWrapperAs<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies>(Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies> &);
	long _ImmersiveShellQueryService(_GUID const &,_GUID const &,void * *);
	long _NormalizeAndAddPositionerArgs(HSTRING__ *,HSTRING__ * *);
	long _OnClientWindowReadyForPresentationChangedHandler(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long _OnDeferredSuspensionTimer();
	long _OnMessageHandler(unsigned int,unsigned __int64,__int64);
	long _OnViewChangedHandler(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *);
	long _OnViewCreated();
	long _OnViewDestroyed();
	long _OnViewEvent(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long _OnViewEventHandler(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *);
	long _RegisterMessages();
	long _RegisterViewPresentationChanged();
	long _ResetActivationTimeoutPolicy();
	long _StartActivationTimeoutPolicy();
	long _StartDeferredSuspensionTimer();
	long _UnregisterViewPresentationChanged();
	static long _GetLaunchArgsSubstring(unsigned short const *,unsigned short const *,unsigned int,unsigned short const * *,unsigned __int64 *);
public:
	SearchAppExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	long RuntimeClassInitialize(IServiceProvider *,TwinUI::Cortana::ISearchAppExperienceManagerNotification *);
	virtual long CanTransitionFromStart(unsigned char *);
	virtual long Close();
	virtual long EnsureForegroundRights();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetWindowHandle(unsigned __int64 *);
	virtual long Hide();
	virtual long InitializeTrustedComponentForegroundControl(ITrustedComponentForegroundControl *);
	virtual long MinimizeToBoxMode();
	virtual long NotifyUIATreesUnlinked();
	virtual long PearlRectMayHaveChanged();
	virtual long Prelaunch(unsigned char);
	virtual long PrepareForAppTransition(Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPositioningAnchorRect(Windows::Foundation::Rect,Windows::Foundation::Rect);
	virtual long Show(HSTRING__ *,Windows::Internal::Shell::Experience::CortanaAppTransitionType);
	virtual long ShowWithStart(unsigned char);
	virtual long ShutdownTrustedComponentForegroundControl();
	virtual long TakeKeyboardFocus();
	virtual long Uncloak();
	virtual long WorkAreaMayHaveChanged();
	virtual long add_AppRequestedDismiss(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_AppRequestedTransition(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_AppTransitionCompleted(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_Destroyed(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_DeviceLocked(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_DeviceUnlocked(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_FocusNavigate(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::IFocusNavigateEventArgs *> *,EventRegistrationToken *);
	virtual long add_Hidden(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_LaunchResult(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,int> *,EventRegistrationToken *);
	virtual long add_NotifyRelaunch(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Foundation::Rect> *,EventRegistrationToken *);
	virtual long add_SetForegroundFailed(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_Shown(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> *,EventRegistrationToken *);
	virtual long add_StartAndCortanaDismissRequested(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_SuggestionsHidden(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_SuggestionsShown(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_IsExplicitDismissEnabled(unsigned char *);
	virtual long get_LockCurtainShowing(unsigned char *);
	virtual long get_SuggestionsShowing(unsigned char *);
	virtual long remove_AppRequestedDismiss(EventRegistrationToken);
	virtual long remove_AppRequestedTransition(EventRegistrationToken);
	virtual long remove_AppTransitionCompleted(EventRegistrationToken);
	virtual long remove_Destroyed(EventRegistrationToken);
	virtual long remove_DeviceLocked(EventRegistrationToken);
	virtual long remove_DeviceUnlocked(EventRegistrationToken);
	virtual long remove_FocusNavigate(EventRegistrationToken);
	virtual long remove_Hidden(EventRegistrationToken);
	virtual long remove_LaunchResult(EventRegistrationToken);
	virtual long remove_NotifyRelaunch(EventRegistrationToken);
	virtual long remove_SetForegroundFailed(EventRegistrationToken);
	virtual long remove_Shown(EventRegistrationToken);
	virtual long remove_StartAndCortanaDismissRequested(EventRegistrationToken);
	virtual long remove_SuggestionsHidden(EventRegistrationToken);
	virtual long remove_SuggestionsShown(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~SearchAppExperienceManager();
};

struct SearchAppExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

struct SearchAppExperienceManagerNotification
{
	SearchAppExperienceManagerNotification(SearchAppExperienceManager *);
	virtual long Close();
	virtual void DisableNotifications();
	virtual void EnableNotifications();
	virtual void OnAllowForegroundRightsRequested();
	virtual void OnAppRequestedDismiss();
	virtual void OnAppRequestedTransition();
	virtual void OnAppTransitionCompleted();
	virtual void OnDeviceLocked();
	virtual void OnDeviceUnlocked();
	virtual void OnEnsureForegroundRightsRequested();
	virtual void OnFocusNavigate(Windows::Internal::Shell::Experience::FocusNavigateDirection);
	virtual void OnHidden();
	virtual void OnNotifyRelaunch(Windows::Foundation::Rect);
	virtual void OnSetForegroundFailed();
	virtual void OnShown(Windows::Foundation::Rect);
	virtual void OnStartAndCortanaDismissRequested();
	virtual void OnSuggestionsHidden();
	virtual void OnSuggestionsShown();
};

class SharedMessagePortRefPtr
{
protected:
	IMessagePortStore * Assign(IMessagePortStore *);
public:
	long Initialize(InputCapability);
	static int SecurityShim_SharedMessagePortSecurity(void * *);
	void Release();
	~SharedMessagePortRefPtr();
};

namespace ShellExperienceHelpers
{
	class NavigationLevelOverrideHelper
	{
		long NavigateView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	public:
		long DisableOverride(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
		long EnableOverride(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
		long Navigate(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	};

	long SetWindowOwner(HWND__ *,HWND__ *);
	void FixRelativeZOrderingBeforeOwnership(HWND__ *,HWND__ *);
};

namespace ShellFeedsAvailability
{
	long CheckFeedsAvailability(unsigned char *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *);
	long CheckFeedsServerAvailability(unsigned char,unsigned char *,unsigned char *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *);
	long WriteFeedsAvailabilityToRegistry(unsigned char,unsigned char *);
};

namespace ShellFeedsAvailabilityHelpers
{
	long CheckFeedsEnablementOnServer(unsigned char *,unsigned char *);
	long CreateGUID(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > &);
	long CreateMUID(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > &);
	long IsEnterprisePolicyEnabled(unsigned char *);
	long IsFeedsAllowedOnSKU(unsigned char *);
	long IsFeedsAppInstalled(unsigned char *);
	long IsFeedsEnabledAtEndPoint(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,unsigned char *,unsigned char *);
	long PingFeedsEnablementEndpoint(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,unsigned char *);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const GetCurrentLanguage();
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const GetCurrentUILanguage();
	unsigned char IsNetworkConnectivityAvailable();
	unsigned char IsTempProfile();
};

class ShellFeedsDesktopExperienceView
{
	HWND__ * GetHwnd();
	HWND__ * GetTrayWindowFromLastActivatedMonitor();
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> GetViewWrapper();
	bool GetAppsUseLightTheme();
	bool GetColorPrevalenceEnabled();
	bool IsViewVisible();
	long BuildAdditionalArgsString(HMONITOR__ *,HSTRING__ * *);
	long EnsureImmersiveShell();
	long EnsureInputHostManager();
	long GetActivateArgs(HSTRING__ *,HSTRING__ * *);
	long GetAnimationClipRect(tagRECT *);
	long GetEdgeUIManager(HMONITOR__ *,IEdgeUiManager * *);
	long GetMonitorInformation(HMONITOR__ *,tagRECT *,tagRECT *,tagRECT *,EDGEUI_TRAYSTUCKPLACE *,bool *);
	long GetStuckPlace(HMONITOR__ *,EDGEUI_TRAYSTUCKPLACE *);
	long HookKeyboard();
	long HookMouse();
	long NotifyShellModeChanged();
	long NotifyTrayOfFlyoutVisibility(bool);
	long NotifyView(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long NotifyView(unsigned short const *,Windows::Foundation::Collections::IPropertySet *);
	long OnViewChanged(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *);
	long OnViewCloaking();
	long OnViewDestroyed();
	long OnViewEvent(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *);
	long OnViewEventQueued(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long OnViewHidden();
	long OnViewPropertiesChanging();
	long OnViewSetForegroundFailed();
	long OnViewShown();
	long OnViewUncloaked();
	long OnViewUncloaking();
	long PositionShellFeedsWindow();
	long Relaunch(HSTRING__ *);
	long ShowBorder(tagRECT,tagRECT);
	long ShowInternal(HSTRING__ *,Windows::Internal::Shell::Experience::ShellExperienceViewFocusOptions);
	long UnhookKeyboard();
	long UnhookMouse();
	static __int64 LowLevelKeyboardHookProc(int,unsigned __int64,__int64);
	static __int64 LowLevelMouseHookProc(int,unsigned __int64,__int64);
	static long NotifyFlyoutHoverState(bool);
	tagRECT ComputeShellFeedsWindowRect(EDGEUI_TRAYSTUCKPLACE,int,int,tagRECT const &,tagRECT const &,tagRECT const &,tagRECT const &,tagRECT const &,int);
	virtual long AboveLockAppActiveChanged(bool);
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long LockScreenActiveChanged(bool);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long ShellModeChanged(bool);
	virtual long ShellReadyChanged();
	virtual long WindowsHelloActiveChanged(bool);
public:
	ShellFeedsDesktopExperienceView();
	long RuntimeClassInitialize(IServiceProvider *,TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification *);
	long RuntimeClassInitialize(IServiceProvider *,TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification *,wistd::unique_ptr<TwinUI::Cortana::ICortanaWNFService,wistd::default_delete<TwinUI::Cortana::ICortanaWNFService> >);
	virtual long ControlGained(Windows::Internal::Shell::Experience::IShellExperienceView *);
	virtual long Dispose();
	virtual long Hide();
	virtual long OnPositioningAnchorRectChanged(Windows::Foundation::Rect);
	virtual long Show(HSTRING__ *,TwinUI::ShellFeeds::FeedsButtonInteraction);
	virtual long Uncloak();
	virtual void SetClickFlyoutShowing(bool);
	virtual ~ShellFeedsDesktopExperienceView();
};

namespace ShellFeedsExperienceHelpers
{
	long SetShellFeedsRegKey(unsigned short const *,unsigned long,unsigned long);
	long SetShellFeedsRegKey(unsigned short const *,unsigned short const *,unsigned long);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const GetCurrentLocaleLanguage();
};

struct ShellFeedsExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

class ShellFeedsExperienceManagerImpl
{
	bool _IsViewVisible();
	long _CancelDeferredSuspensionTimer();
	long _CreateShellExperienceView();
	long _GetImmersiveShell(IServiceProvider * *);
	long _GetViewWrapperAs<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>(Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState> &);
	long _Hide();
	long _ImmersiveShellQueryService(_GUID const &,_GUID const &,void * *);
	long _NotifyViewTaskbarButtonHoverStateChanged(bool);
	long _OnAppRequestedDismiss();
	long _OnAppRequestedUncloak();
	long _OnClientWindowReadyForPresentationChangedHandler(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long _OnDeferredSuspensionTimer();
	long _OnMessageHandler(unsigned int,unsigned __int64,__int64);
	long _OnSetForegroundFailed();
	long _OnShown(Windows::Internal::Shell::Experience::ICortanaShownEventArgs *);
	long _OnViewChangedHandler(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *);
	long _OnViewCreated();
	long _OnViewDestroyed();
	long _OnViewEvent(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long _OnViewEventHandler(Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *);
	long _RegisterMessages();
	long _RegisterViewPresentationChanged();
	long _Show(HSTRING__ *,Windows::Internal::Shell::Experience::ShellFeedsButtonInteraction);
	long _StartDeferredSuspensionTimer();
	long _Uncloak();
	long _UnregisterMessages();
	long _UnregisterViewPresentationChanged();
public:
	ShellFeedsExperienceManagerImpl();
	long RuntimeClassInitialize(IServiceProvider *);
	long RuntimeClassInitialize(IServiceProvider *,TwinUI::ShellFeeds::IShellFeedsExperienceManagerNotification *);
	virtual long Close();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long NotifyFeedsButtonVisibilityChanged(unsigned char);
	virtual long NotifyTaskbarButtonInteraction(Windows::Internal::Shell::Experience::ShellFeedsButtonType,Windows::Internal::Shell::Experience::ShellFeedsButtonInteraction,HSTRING__ *);
	virtual long Poke(HSTRING__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPositioningAnchorRect(Windows::Internal::Shell::Experience::ShellFeedsButtonType,Windows::Foundation::Rect);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~ShellFeedsExperienceManagerImpl();
};

struct ShellFeedsExperienceManagerNotification
{
	ShellFeedsExperienceManagerNotification(ShellFeedsExperienceManagerImpl *);
	virtual long Close();
	virtual void OnAppRequestedDismiss();
	virtual void OnAppRequestedUncloak();
	virtual void OnHidden();
	virtual void OnSetForegroundFailed();
	virtual void OnShown(Windows::Foundation::Rect);
};

struct ShellFeedsTelemetry
{
	static void ShellFeedsDesktopExperienceView_NotifyFlyoutHoverState<bool &>(bool &);
	static void ShellFeedsDesktopExperienceView_NotifyTrayOfFlyoutVisibility<bool &>(bool &);
	static void ShellFeedsDesktopExperienceView_PositionShellFeedsWindow<long &,long &,long &,long &,long &,long &,long &,long &>(long &,long &,long &,long &,long &,long &,long &,long &);
	static void ShellFeedsExperienceManagerImpl_OnViewEvent_SuspensionAllowedByApp<bool &>(bool &);
	static void ShellFeedsLauncher_NetworkStatusChangeListenerStopped();
};

struct ShellFrameAggregateTelemetry
{
	static void GetUnmetTabRequirements(unsigned int,TelemetryHelpers::WindowCharacteristics const &);
};

namespace ShellMRTHelper
{
	namespace Common
	{
		bool HasFileUriScheme(HSTRING__ *);
		bool HasMsAppDataUriScheme(HSTRING__ *);
		bool HasMsAppXUriScheme(HSTRING__ *);
		bool HasMsResourceUriScheme(HSTRING__ *);
		long ConvertMsAppXUriToMsResourceUri(HSTRING__ *,unsigned short * *);
		long ConvertMsAppXUriToMsResourceUri(Windows::Foundation::IUriRuntimeClass *,unsigned short * *);
		long TryFallbackToFilePath(HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ * *);
		unsigned short const * const c_fileUriScheme;
		unsigned short const * const c_msAppDataUriScheme;
		unsigned short const * const c_msAppXUriScheme;
		unsigned short const * const c_msResourceUriFilesPathPrefix;
		unsigned short const * const c_msResourceUriScheme;
		unsigned short const * const c_msResourcesRedirectFolderName;
	};

};

namespace ShellManagedWindowHelper
{
	bool ShouldTreatShellManagedWindowAsNotShellManaged(HWND__ *);
};

namespace ShellPositionerHelpers
{
	namespace Details
	{
		struct ShellPositionerCallback<<lambda_b596592e3ff57c102c32409cde6b4c14> >
		{
			virtual long Invoke(IBasicPositioner *);
		};

	};

};

class ShellPositionerManager
{
	long ChangePositionerForView(IApplicationView *,SHELL_POSITIONER_TYPE,bool);
	long CreateViewArrayForView(IApplicationView *,IObjectArray * *);
	long GetPositionerPriorityForView(IApplicationView *,IShellPositionerPriority * *);
	long HandleActivationRequest(ShellPositionerManager::ActivationRequestType,IApplicationView *,IImmersiveMonitor *,IUnknown *,IPresentationRequestedArgs *,IApplicationView *,unsigned long *);
	long HandleFrameworkViewTypeChange(FRAMEWORK_VIEW_TYPE,IApplicationView *,IImmersiveMonitor *);
	long PerformPositionerHandoff(IApplicationView *,IImmersiveMonitor *,IImmersiveMonitor *,IPresentationRequestedArgs *,SHELL_POSITIONER_TYPE,SHELL_POSITIONER_TYPE);
	long PerformPositionerHandoff(IApplicationView *,SHELL_POSITIONER_TYPE,SHELL_POSITIONER_TYPE);
	long PerformPositionerHandoff(IObjectArray *,IImmersiveMonitor *,IImmersiveMonitor *,IPresentationRequestedArgs *,SHELL_POSITIONER_TYPE,SHELL_POSITIONER_TYPE);
	long PersistPositionerPriority(IApplicationView *);
	long RecoverPriorities();
	long SendControlLostToPositioner(IApplicationView *,IImmersiveMonitor *,SHELL_POSITIONER_TYPE,SHELL_POSITIONER_TYPE,IUnknown * *);
	long UpdatePositionerPriorityForActivation(IShellPositionerPriority *,IApplicationView *,IImmersiveMonitor *,IUnknown *);
	long UpdatePositionerPriorityForFrameworkViewType(IShellPositionerPriority *,IApplicationView *,IImmersiveMonitor *,FRAMEWORK_VIEW_TYPE);
	long UpdatePositionerPriorityForPresentation(IShellPositionerPriority *,IApplicationView *,IImmersiveMonitor *,IInspectable *);
	static long GetPositionerForMonitor(SHELL_POSITIONER_TYPE,IImmersiveMonitor *,_GUID const &,void * *);
public:
	ShellPositionerManager();
	long RuntimeClassInitialize();
	virtual long ActivationRequested(IApplicationView *,IUnknown *);
	virtual long AddPositionerForView(IApplicationView *,SHELL_POSITIONER_TYPE);
	virtual long ChangeMonitor(IApplicationView *,IImmersiveMonitor *,IImmersiveMonitor *,SHELL_POSITIONER_TYPE);
	virtual long FrameworkViewTypeChanged(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual long GetPositionerForView(IApplicationView *,_GUID const &,void * *);
	virtual long GetPositionerProxy(IApplicationView *,IShellPositionerProxy * *);
	virtual long GetViewsForPositioner(SHELL_POSITIONER_TYPE,IImmersiveMonitor *,IObjectArray * *);
	virtual long InitializePosition(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,IApplicationView *);
	virtual long InitializePositionWithShowCommand(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,unsigned long *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long PerformDelayedInitialization();
	virtual long PresentationRequested(IApplicationView *,IInspectable *);
	virtual long RemovePositionerForView(IApplicationView *,SHELL_POSITIONER_TYPE);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long SwapPositionersForViews(SHELL_POSITIONER_TYPE,SHELL_POSITIONER_TYPE);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

struct ShellPositionerProxy
{
	ShellPositionerProxy();
	long RuntimeClassInitialize(IShellPositionerManager *,IApplicationView *);
	virtual long PerformSyncCallback(IShellPositionerCallback *);
};

class ShellPositionerTelemetry
{
	class ActivationRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ActivationRequested();
	};

	class FrameworkViewTypeChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~FrameworkViewTypeChanged();
	};

	class InitializePosition
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~InitializePosition();
	};

	class InitializePositionWithShowCommand
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~InitializePositionWithShowCommand();
	};

	class PresentationRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~PresentationRequested();
	};

	class TMChangeHandler
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~TMChangeHandler();
	};

	static bool DoesAppHaveQuirk(IApplicationView *,__MIDL___MIDL_itf_shpriv_core_0000_0321_0005);
protected:
	void Create();
public:
	void PositionViewForActivation_(IApplicationView *,SHELL_POSITIONER_TYPE);
};

struct ShoulderTapExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

struct ShoulderTapExperienceManagerTelemetry
{
	static bool IsEnabled(unsigned char,unsigned __int64);
	void PositionShoulderTapEnd_(unsigned short const *,int,int,int,int,int,int,int,int,int,int,int,int,int);
	void PositionShoulderTapStart_(unsigned short const *);
	void ShoulderTap_(unsigned short const *,unsigned short const *,unsigned short const *,int,int,int);
};

struct SingleViewExperienceLogging
{
	static _tlgProvider_t const * Provider();
};

struct SingleViewExperienceTelemetry
{
	class CancelWaitForWindowReadyForPresentation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,bool);
		~CancelWaitForWindowReadyForPresentation();
	};

	class Hide
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned int,void *);
		void Stop(unsigned int);
		~Hide();
	};

	class Launch
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,void *);
		~Launch();
	};

	class LaunchCompleted
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~LaunchCompleted();
	};

	class OnClientWindowReadinessProcessed
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned int);
		void Stop(unsigned int);
		~OnClientWindowReadinessProcessed();
	};

	class OnEventQueued
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *);
		~OnEventQueued();
	};

	class OnPropertyChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *);
		~OnPropertyChanged();
	};

	class Reactivate
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned short const *);
		~Reactivate();
	};

	class RemoveKeepAlive
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned int,void *);
		~RemoveKeepAlive();
	};

	class Show
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned int,void *);
		void Stop(unsigned int);
		~Show();
	};

	class Uncloak
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~Uncloak();
	};

	class WaitForWindowReadyForPresentation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void Stop(unsigned short const *,unsigned short const *);
		~WaitForWindowReadyForPresentation();
	};

	static void SessionIdleState<bool &>(bool &);
	static void TrayFlyoutLaunchedByWindow<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &>(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
};

class SingleViewLightDismissHelper
{
	long EnsureLightDismissProvider();
	long InternalRegisterWithLightDismiss(LIGHT_DISMISS_FLAGS,ILightDismissNotification *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
public:
	bool IsRegisteredWithLightDismiss();
	long RegisterWithLightDismiss(ILightDismissNotification *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long RegisterWithLightDismiss(LIGHT_DISMISS_FLAGS,ILightDismissNotification *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long UpdateLightDismiss(LIGHT_DISMISS_FLAGS,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	void UnregisterWithLightDismiss();
	~SingleViewLightDismissHelper();
};

struct SingleViewShellExperienceEventHandler
{
	virtual long CreatePersonality(CSingleViewShellExperience *,wistd::unique_ptr<SingleViewShellExperiencePersonality,wistd::default_delete<SingleViewShellExperiencePersonality> > *);
	virtual long OnApplicationActivatedForLaunch(CSingleViewShellExperience *,long);
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnIdleStateChanged(CSingleViewShellExperience *,bool);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewDestroying(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShowing(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual long OnVisibilityRevokedChanged(CSingleViewShellExperience *);
};

struct SingleViewShellExperiencePersonality
{
	virtual long Initialize(IServiceProvider *);
};

class SizeConversionViewInfo
{
	long GetAppDataForView(IApplicationView *);
	long GetPositionerDataForView(IUnknown *,IApplicationView *);
public:
	SizeConversionViewInfo();
	long RuntimeClassInitialize(IImmersiveMonitor *,int,int,IApplicationViewTitlebarConfiguration *);
	long RuntimeClassInitialize(IUnknown *,IApplicationView *);
	long RuntimeClassInitialize(IUnknown *,IApplicationView *,IImmersiveMonitor *);
};

struct SmartCookie
{
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),AppViewEventHelpers::details::ApplicationViewEventRegistration *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),AppViewEventHelpers::details::ApplicationViewEventRegistration *);
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),KioskPositioner *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),KioskPositioner *);
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),PeoplePaneViewManager *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),PeoplePaneViewManager *);
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),ScreenManager *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),ScreenManager *);
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),SurfaceHubPositioner *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),SurfaceHubPositioner *);
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),TabViewManager *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),TabViewManager *);
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),Windows::Internal::Shell::Holographic::Win32BackedViewHostItem *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),Windows::Internal::Shell::Holographic::Win32BackedViewHostItem *);
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),winrt::Windows::Internal::Shell::implementation::WindowTabHost *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),winrt::Windows::Internal::Shell::implementation::WindowTabHost *);
	long Register<IBamThrottleSettings,long ( IBamThrottleSettings::*)(IWindowOccludedChangeListener *,unsigned long *),long ( IBamThrottleSettings::*)(unsigned long),CApplicationViewManager *>(IBamThrottleSettings *,long ( IBamThrottleSettings::*)(IWindowOccludedChangeListener *,unsigned long *),long ( IBamThrottleSettings::*)(unsigned long),CApplicationViewManager *);
	long Register<IEnterpriseIdChangeNotificationProvider,long ( IEnterpriseIdChangeNotificationProvider::*)(IEnterpriseIdChangeNotification *,unsigned long *),long ( IEnterpriseIdChangeNotificationProvider::*)(unsigned long),CApplicationViewManager *>(IEnterpriseIdChangeNotificationProvider *,long ( IEnterpriseIdChangeNotificationProvider::*)(IEnterpriseIdChangeNotification *,unsigned long *),long ( IEnterpriseIdChangeNotificationProvider::*)(unsigned long),CApplicationViewManager *);
	long Register<IImmersiveApplicationNotificationService,long ( IImmersiveApplicationNotificationService::*)(IImmersiveApplicationNotification *,unsigned long *),long ( IImmersiveApplicationNotificationService::*)(unsigned long),CApplicationViewManager *>(IImmersiveApplicationNotificationService *,long ( IImmersiveApplicationNotificationService::*)(IImmersiveApplicationNotification *,unsigned long *),long ( IImmersiveApplicationNotificationService::*)(unsigned long),CApplicationViewManager *);
	long Register<IImmersiveMonitorNotificationService,long ( IImmersiveMonitorNotificationService::*)(IImmersiveMonitorNotification *,unsigned long *),long ( IImmersiveMonitorNotificationService::*)(unsigned long),KioskPositioner *>(IImmersiveMonitorNotificationService *,long ( IImmersiveMonitorNotificationService::*)(IImmersiveMonitorNotification *,unsigned long *),long ( IImmersiveMonitorNotificationService::*)(unsigned long),KioskPositioner *);
	long Register<IImmersiveMonitorNotificationService,long ( IImmersiveMonitorNotificationService::*)(IImmersiveMonitorNotification *,unsigned long *),long ( IImmersiveMonitorNotificationService::*)(unsigned long),SurfaceHubPositioner *>(IImmersiveMonitorNotificationService *,long ( IImmersiveMonitorNotificationService::*)(IImmersiveMonitorNotification *,unsigned long *),long ( IImmersiveMonitorNotificationService::*)(unsigned long),SurfaceHubPositioner *);
	long Register<IImmersiveSettingsCache,long ( IImmersiveSettingsCache::*)(IImmersiveSettingsCacheNotification *,unsigned long *),long ( IImmersiveSettingsCache::*)(unsigned long),JointResize *>(IImmersiveSettingsCache *,long ( IImmersiveSettingsCache::*)(IImmersiveSettingsCacheNotification *,unsigned long *),long ( IImmersiveSettingsCache::*)(unsigned long),JointResize *);
	long Register<IImmersiveSettingsCache,long ( IImmersiveSettingsCache::*)(IImmersiveSettingsCacheNotification *,unsigned long *),long ( IImmersiveSettingsCache::*)(unsigned long),winrt::Windows::Internal::Shell::implementation::WindowTabHost *>(IImmersiveSettingsCache *,long ( IImmersiveSettingsCache::*)(IImmersiveSettingsCacheNotification *,unsigned long *),long ( IImmersiveSettingsCache::*)(unsigned long),winrt::Windows::Internal::Shell::implementation::WindowTabHost *);
	long Register<IImmersiveShellHookService,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,AppViewEventHelpers::details::ShellHookRegistration *>(IImmersiveShellHookService *,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,AppViewEventHelpers::details::ShellHookRegistration *);
	long Register<IImmersiveShellHookService,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,TabViewManager *>(IImmersiveShellHookService *,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,TabViewManager *);
	long Register<IImmersiveShellHookService,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,TitleBarController *>(IImmersiveShellHookService *,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,TitleBarController *);
	long Register<IImmersiveShellHookService,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,Windows::Internal::Shell::Holographic::Win32BackedViewHostItem *>(IImmersiveShellHookService *,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,Windows::Internal::Shell::Holographic::Win32BackedViewHostItem *);
	long Register<IImmersiveWindowMessageService,long ( IImmersiveWindowMessageService::*)(unsigned int,IImmersiveWindowMessageNotification *,unsigned long *),long ( IImmersiveWindowMessageService::*)(unsigned long),int,AcrylicPolicyManager *>(IImmersiveWindowMessageService *,long ( IImmersiveWindowMessageService::*)(unsigned int,IImmersiveWindowMessageNotification *,unsigned long *),long ( IImmersiveWindowMessageService::*)(unsigned long),int,AcrylicPolicyManager *);
	long Register<IImmersiveWindowMessageService,long ( IImmersiveWindowMessageService::*)(unsigned int,IImmersiveWindowMessageNotification *,unsigned long *),long ( IImmersiveWindowMessageService::*)(unsigned long),int,TabViewManager *>(IImmersiveWindowMessageService *,long ( IImmersiveWindowMessageService::*)(unsigned int,IImmersiveWindowMessageNotification *,unsigned long *),long ( IImmersiveWindowMessageService::*)(unsigned long),int,TabViewManager *);
	long Register<IImmersiveWindowMessageService,long ( IImmersiveWindowMessageService::*)(unsigned int,IImmersiveWindowMessageNotification *,unsigned long *),long ( IImmersiveWindowMessageService::*)(unsigned long),unsigned int,TabViewManager *>(IImmersiveWindowMessageService *,long ( IImmersiveWindowMessageService::*)(unsigned int,IImmersiveWindowMessageNotification *,unsigned long *),long ( IImmersiveWindowMessageService::*)(unsigned long),unsigned int,TabViewManager *);
	long Register<IInputHostLayout,long ( IInputHostLayout::*)(IInputHostLayoutChanges *,unsigned long *),long ( IInputHostLayout::*)(unsigned long),CToastCenterExperienceManager *>(IInputHostLayout *,long ( IInputHostLayout::*)(IInputHostLayoutChanges *,unsigned long *),long ( IInputHostLayout::*)(unsigned long),CToastCenterExperienceManager *);
	long Register<ISnapComponent,long ( ISnapComponent::*)(IWindowSnappingEvents *,unsigned long *),long ( ISnapComponent::*)(unsigned long),Windows::Internal::ComposableShell::Tabs::TabSetMediator *>(ISnapComponent *,long ( ISnapComponent::*)(IWindowSnappingEvents *,unsigned long *),long ( ISnapComponent::*)(unsigned long),Windows::Internal::ComposableShell::Tabs::TabSetMediator *);
	long Register<ISnapComponent,long ( ISnapComponent::*)(IWindowSnappingEvents *,unsigned long *),long ( ISnapComponent::*)(unsigned long),Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListener *>(ISnapComponent *,long ( ISnapComponent::*)(IWindowSnappingEvents *,unsigned long *),long ( ISnapComponent::*)(unsigned long),Windows::Internal::Shell::TaskFlow::DataEngine::AppViewListener *);
	long Register<ITabletModeController,long ( ITabletModeController::*)(ITabletModeChangeListener *,unsigned long *),long ( ITabletModeController::*)(unsigned long),PeoplePaneViewManager *>(ITabletModeController *,long ( ITabletModeController::*)(ITabletModeChangeListener *,unsigned long *),long ( ITabletModeController::*)(unsigned long),PeoplePaneViewManager *);
	long Register<ITabletModeController,long ( ITabletModeController::*)(ITabletModeChangeListener *,unsigned long *),long ( ITabletModeController::*)(unsigned long),SurfaceHubPositioner *>(ITabletModeController *,long ( ITabletModeController::*)(ITabletModeChangeListener *,unsigned long *),long ( ITabletModeController::*)(unsigned long),SurfaceHubPositioner *);
	long Register<ITabletModeController,long ( ITabletModeController::*)(ITabletModeChangeListener *,unsigned long *),long ( ITabletModeController::*)(unsigned long),TouchKeyboardExperienceManager *>(ITabletModeController *,long ( ITabletModeController::*)(ITabletModeChangeListener *,unsigned long *),long ( ITabletModeController::*)(unsigned long),TouchKeyboardExperienceManager *);
	long Register<ITabletModePositionerManager,long ( ITabletModePositionerManager::*)(ITabletModePositionerManagerNotification *,unsigned long *),long ( ITabletModePositionerManager::*)(unsigned long),ScreenManager *>(ITabletModePositionerManager *,long ( ITabletModePositionerManager::*)(ITabletModePositionerManagerNotification *,unsigned long *),long ( ITabletModePositionerManager::*)(unsigned long),ScreenManager *);
	long Register<IViewPresentationMediator,long ( IViewPresentationMediator::*)(IWindowManagementShowMoveSizeEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),CApplicationManager *>(IViewPresentationMediator *,long ( IViewPresentationMediator::*)(IWindowManagementShowMoveSizeEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),CApplicationManager *);
	long Register<IViewPresentationMediator,long ( IViewPresentationMediator::*)(IWindowManagementShowMoveSizeEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),KioskPositioner *>(IViewPresentationMediator *,long ( IViewPresentationMediator::*)(IWindowManagementShowMoveSizeEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),KioskPositioner *);
	long Register<IViewPresentationMediator,long ( IViewPresentationMediator::*)(IWindowManagementShowMoveSizeEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),TabViewManager *>(IViewPresentationMediator *,long ( IViewPresentationMediator::*)(IWindowManagementShowMoveSizeEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),TabViewManager *);
	long Register<IViewPresentationMediator,long ( IViewPresentationMediator::*)(IWindowManagementShowMoveSizeEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),TabletModePositionerManager *>(IViewPresentationMediator *,long ( IViewPresentationMediator::*)(IWindowManagementShowMoveSizeEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),TabletModePositionerManager *);
	long Register<IViewPresentationMediator,long ( IViewPresentationMediator::*)(IWindowManagementShowMoveSizeEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),VoiceAssistantPositioner *>(IViewPresentationMediator *,long ( IViewPresentationMediator::*)(IWindowManagementShowMoveSizeEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),VoiceAssistantPositioner *);
	long Register<IViewPresentationMediator,long ( IViewPresentationMediator::*)(IWindowManagementWindowGroupingEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),ViewGroupManager *>(IViewPresentationMediator *,long ( IViewPresentationMediator::*)(IWindowManagementWindowGroupingEvents *,unsigned long *),long ( IViewPresentationMediator::*)(unsigned long),ViewGroupManager *);
	long Register<IVirtualDesktopNotificationService,long ( IVirtualDesktopNotificationService::*)(IVirtualDesktopNotification *,unsigned long *),long ( IVirtualDesktopNotificationService::*)(unsigned long),VirtualDesktop *>(IVirtualDesktopNotificationService *,long ( IVirtualDesktopNotificationService::*)(IVirtualDesktopNotification *,unsigned long *),long ( IVirtualDesktopNotificationService::*)(unsigned long),VirtualDesktop *);
	long Register<IVirtualDesktopNotificationService,long ( IVirtualDesktopNotificationService::*)(IVirtualDesktopNotification *,unsigned long *),long ( IVirtualDesktopNotificationService::*)(unsigned long),VirtualDesktopDataSource *>(IVirtualDesktopNotificationService *,long ( IVirtualDesktopNotificationService::*)(IVirtualDesktopNotification *,unsigned long *),long ( IVirtualDesktopNotificationService::*)(unsigned long),VirtualDesktopDataSource *);
	long Register<IVirtualDesktopNotificationService,long ( IVirtualDesktopNotificationService::*)(IVirtualDesktopNotification *,unsigned long *),long ( IVirtualDesktopNotificationService::*)(unsigned long),winrt::Windows::Internal::Shell::implementation::WindowTabHost *>(IVirtualDesktopNotificationService *,long ( IVirtualDesktopNotificationService::*)(IVirtualDesktopNotification *,unsigned long *),long ( IVirtualDesktopNotificationService::*)(unsigned long),winrt::Windows::Internal::Shell::implementation::WindowTabHost *);
	long Register<IVirtualDesktopNotificationServicePrivate,long ( IVirtualDesktopNotificationServicePrivate::*)(IVirtualDesktopNotification *,unsigned long *),long ( IVirtualDesktopNotificationServicePrivate::*)(unsigned long),VirtualDesktopAcessibility *>(IVirtualDesktopNotificationServicePrivate *,long ( IVirtualDesktopNotificationServicePrivate::*)(IVirtualDesktopNotification *,unsigned long *),long ( IVirtualDesktopNotificationServicePrivate::*)(unsigned long),VirtualDesktopAcessibility *);
	long Unregister();
	void Swap(SmartCookie &);
	~SmartCookie();
};

struct SnapAssistViewAnimationCoordinatorBase<MultitaskingViewDismissalAnimationCoordinator>
{
	virtual MultitaskingViewAnimationCoordinatorBase::MultitaskingViewAnimationParameters GetAnimationParameters();
	virtual bool ShouldTreatItemAsMinimized(ISwitchItemElement *);
	virtual void SetAnimationData(ISwitchThumbnailFactory *,IAnimatableMultitaskingViewFrame *,IDCompThumbnail *);
};

struct SnapAssistViewAnimationCoordinatorBase<MultitaskingViewInvocationAnimationCoordinator>
{
	virtual MultitaskingViewAnimationCoordinatorBase::MultitaskingViewAnimationParameters GetAnimationParameters();
	virtual bool ShouldTreatItemAsMinimized(ISwitchItemElement *);
	virtual void SetAnimationData(ISwitchThumbnailFactory *,IAnimatableMultitaskingViewFrame *,IDCompThumbnail *);
};

struct SnapAssistViewDismissalAnimationCoordinator
{
	SnapAssistViewDismissalAnimationCoordinator();
	virtual _GUID GetAnimationTelemetryGuid();
};

struct SnapAssistViewInvocationAnimationCoordinator
{
	SnapAssistViewInvocationAnimationCoordinator();
	virtual _GUID GetAnimationTelemetryGuid();
};

namespace SplashScreen
{
	class CBasicSplashScreenLayout
	{
	protected:
		static Windows::Foundation::Rect _CenterImageWithRounding(Windows::Foundation::Size const &,Windows::Foundation::Rect const &);
		static Windows::Foundation::Rect _PhysicalRectToScaledRectWithRounding(unsigned int,Windows::Foundation::Rect const &);
	public:
		virtual SPLASHSCREEN_IMAGE_TYPE GetImageType();
		virtual Windows::Foundation::Rect GetPhysicalImageLocation();
		virtual Windows::Foundation::Rect GetRelativeImageLocation();
		virtual void SetImageSize(Windows::Foundation::Size const &);
		virtual void SetScaleFactor(DEVICE_SCALE_FACTOR);
		virtual void SetScaleFactor(unsigned int);
		virtual void SetSize(Windows::Foundation::Size const &);
	};

};

struct StartExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

class StartExperienceWallpaperBackground
{
	long InsertThumbnailVisual(tagRECT const &);
	long RebuildScene(tagRECT const &);
public:
	long RuntimeClassInitialize(HWND__ *,IDCompositionDevice *);
	virtual ~StartExperienceWallpaperBackground();
};

struct StartMenuExperienceTelemetry
{
	class StartMenuReposition
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~StartMenuReposition();
	};

	static void InfraFailure<bool &,long &>(bool &,long &);
};

class StartWindowTelemetry
{
	class ActivateHoldingTankWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ActivateHoldingTankWindow();
	};

	class CortanaLauncherInvokeActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		CortanaLauncherInvokeActivity TransferToCurrentThread();
		CortanaLauncherInvokeActivity();
		void StartActivity();
		~CortanaLauncherInvokeActivity();
	};

	class CreateHoldingTankWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(void *);
		~CreateHoldingTankWindow();
	};

	class DestroyHoldingTankWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class GetImmersiveMonitor
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~GetImmersiveMonitor();
	};

	class PerformDelayedInitialization
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~PerformDelayedInitialization();
	};

	class SubscribeToServices
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SubscribeToServices();
	};

	class UnsubscribeFromServices
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~UnsubscribeFromServices();
	};

protected:
	void Create();
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static void CortanaBlockedBySetForegroundFailure();
	static void CortanaKeepsCrashing();
	static void CortanaRecoveryDuringShutdown();
	static void CortanaViewDestroyedWhileVisible();
	static void CriticalProcessDidntUseAnyCpu<unsigned short const (&)[11]>(unsigned short const (&)[11]);
	static void CriticalProcessDidntUseAnyCpu<unsigned short const (&)[28]>(unsigned short const (&)[28]);
	static void SearchNotInstalled<long const &>(long const &);
	static void ShellExperienceHostNotInstalled<long const &>(long const &);
	static void ShowAttemptSkippedDueToIdle();
	static void ShowAttemptSkippedDueToOpenContextMenu();
	static void StartAndCortanaBlockedBySetForegroundFailure();
	static void StartBlockedBySetForegroundFailure();
	static void StartKeepsCrashing();
	static void StartMenuExperienceHostNotInstalled<long const &>(long const &);
	static void StartRecoveryDuringShutdown();
	static void StartRunningWithoutCortana<long &>(long &);
	static void StartStayedUpWhenCortanaCrashed();
	static void StartViewDestroyedWhileVisible();
};

struct StateChangedEventArgsImpl
{
	StateChangedEventArgsImpl(unsigned short const *,bool);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_AppIdentifier(HSTRING__ * *);
	virtual long get_IsActive(unsigned char *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct StubImmersiveApplication
{
	StubImmersiveApplication();
	virtual SPLASHSCREEN_ORIENTATION_PREFERENCE GetManifestedOrientationPreference();
	virtual int IsQuirkEnabled(__MIDL___MIDL_itf_shpriv_core_0000_0321_0005);
	virtual long AddBehaviorFlags(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003);
	virtual long AddGhostStatusFlag(__MIDL___MIDL_itf_shpriv_core_0000_0321_0004);
	virtual long BelongsToPackage(unsigned short const *,int *);
	virtual long ContainsStronglyNamedWindow(int *);
	virtual long GetApplicationId(unsigned short * *);
	virtual long GetBehaviorFlags(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003 *);
	virtual long GetCanHandleCloseRequest(int *);
	virtual long GetDestinationInformation(IImmersiveApplicationWindow * *,tagRECT *);
	virtual long GetDisplayName(unsigned short * *);
	virtual long GetIsOccluded(int *);
	virtual long GetMonitor(IImmersiveMonitor * *);
	virtual long GetPackageId(int,unsigned short * *);
	virtual long GetPersistingStateName(unsigned short * *);
	virtual long GetRect(tagRECT *);
	virtual long GetTimestamps(tagIMMAPPTIMESTAMPS *);
	virtual long GetTitle(unsigned short * *);
	virtual long GetUniqueId(unsigned short * *);
	virtual long GetViewData(IMMAPP_APPLICATION_VIEW_DATA *);
	virtual long GetWindows(IMMERSIVE_APPLICATION_GET_WINDOWS_FILTER,_GUID const &,void * *);
	virtual long IncrementGhostAnimationWaitCount(unsigned int);
	virtual long InvokeCharms();
	virtual long IsApplicationWindowStronglyNamed(int *);
	virtual long IsEqualByApp(IImmersiveApplication *,int *);
	virtual long IsEqualByAppId(unsigned short const *,int *);
	virtual long IsEqualByHwnd(HWND__ *,int *);
	virtual long IsForeground(int *);
	virtual long IsInteractive(int *);
	virtual long IsRunning(int *);
	virtual long IsServiceAvailable(IMMERSIVE_APPLICATION_QUERY_SERVICE_OPTION,_GUID const &,int *);
	virtual long IsSplashScreenPresented(int *);
	virtual long IsTitleBarDrawnByApp(int *);
	virtual long IsViewForSameApp(IImmersiveApplication *,int *);
	virtual long IsVisible(int *);
	virtual long NotifyApplicationWindows(unsigned int,unsigned __int64,__int64,NOTIFY_IMMERSIVE_APPLICATION_WINDOWS_OPTION,NOTIFY_IMMERSIVE_APPLICATION_WINDOWS_DELIVERY_TYPE);
	virtual long OnMinSizePreferencesUpdated(HWND__ *);
	virtual long OpenPropertyStore(IMMAPPPROPERTYSTOREFLAGS,_GUID const &,void * *);
	virtual long QueryService(IMMERSIVE_APPLICATION_QUERY_SERVICE_OPTION,unsigned long,_GUID const &,_GUID const &,void * *);
	virtual long RemoveBehaviorFlags(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003);
	virtual long RemoveGhostStatusFlag(__MIDL___MIDL_itf_shpriv_core_0000_0321_0004);
	virtual long RequestCloseAsync(_GUID const &,void * *);
	virtual long SetGhostVisualStyle(__MIDL___MIDL_itf_shpriv_core_0000_0321_0001);
	virtual long SetIsOccluded(int);
	virtual long SetMonitor(IImmersiveMonitor *,__MIDL___MIDL_itf_shpriv_core_0000_0321_0002);
	virtual long SetPositionerMonitor(IImmersiveMonitor *);
	virtual long SetThumbnailPreviewState(IMMAPP_SETTHUMBNAIL_PREVIEW_STATE);
	virtual long SetWindowingEnvironmentConfig(IUnknown *);
	virtual long TryInvokeBack(IAsyncCallback *);
};

class SurfaceHubPositioner
{
	long _CreateTitlebarConfiguration(IApplicationViewTitlebarConfiguration * *);
	long _GetMonitorForLaunch(IApplicationView *,IImmersiveMonitor * *);
	long _IsViewManaged(IApplicationView *,bool *);
	long _OnSizeConstraintsChanged(IApplicationView *);
	long _ReLayoutAllApps(IImmersiveMonitor *);
	long _RepositionAppViewsOnWorkAreaChange(IImmersiveMonitor *);
	long _SetDefaultLayout(IApplicationView *,bool);
	static long _SetPositionerMonitor(IApplicationView *,IImmersiveMonitor *);
public:
	SurfaceHubPositioner();
	long RuntimeClassInitialize();
	virtual int ShouldBlockActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleFrameworkViewTypeChange(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual int ShouldHandlePresentationRequest(IApplicationView *,IInspectable *);
	virtual long ControlGainedForActivation(IApplicationView *,SHELL_POSITIONER_TYPE,IUnknown *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long FrameworkViewTypeChangedForView(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual long GetChromeConfigurationForView(IApplicationView *,int *,IApplicationViewTitlebarConfiguration * *);
	virtual long GetPosition(HWND__ *,_GUID const &,void * *);
	virtual long HandleRecoveryForView(IApplicationView *);
	virtual long HandleSwitchToView(IApplicationView *);
	virtual long InitializePosition(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,IApplicationView *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnViewClosing(IApplicationView *,int);
	virtual long PositionView(IApplicationView *,tagRECT,TRY_POSITION_VIEW_FLAGS);
	virtual long PresentationChangedForView(IApplicationView *,IInspectable *);
	virtual long ResizeView(IApplicationView *,tagSIZE,tagSIZE);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void ControlGained(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown *,IPresentationRequestedArgs *);
	virtual void ControlLost(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown * *);
	virtual ~SurfaceHubPositioner();
};

class SwitchItem
{
	bool _IsCortanaAltTabProxyWindowView(IApplicationView *);
	long _LoadTitle();
	long _LoadTitleFromWinRTFrame(unsigned short * *);
public:
	SwitchItem();
	long RuntimeClassInitialize(IApplicationView *,GroupingType);
	virtual GroupingType GetGroupingType();
	virtual Microsoft::WRL::ComPtr<IApplicationView> GetApplicationView();
	virtual ObservableProperty<HWND__ *> * GetWindowForThumbnail();
	virtual ObservableProperty<Microsoft::WRL::ComPtr<IWICBitmap> > * GetIcon();
	virtual ObservableProperty<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > * GetTitle();
	virtual long EnumerateVerbs();
	virtual long GetMonitor(HMONITOR__ * *);
	virtual long LoadIconW(tagSIZE const &,tagSIZE const &,unsigned int,IIconLoaderInternal *);
	virtual unsigned __int64 GetLastActivationTimestamp();
	virtual ~SwitchItem();
};

class SwitchItemCloseAnimationCoordinator
{
protected:
	virtual bool ShouldAnimateClipChangeForType(AnimationCoordinatorItemType);
	virtual bool ShouldAnimateMoveForType(AnimationCoordinatorItemType,bool *);
	virtual bool ShouldAnimateRemoveForType(AnimationCoordinatorItemType);
	virtual long AnimateRemovedElement(ItemAnimationCoordinatorBase::ItemRemovedInfo const &,IUIAnimationStoryboardEventHandler2 *);
	virtual void AnimateClipChangedElement(ItemAnimationCoordinatorBase::ClipChangedInfo const &);
	virtual void AnimatePositionChanged(ItemAnimationCoordinatorBase::PositionChangedInfo const &);
};

class SwitchItemCollection
{
	Microsoft::WRL::ComPtr<IObservableItem> _FindExistingItem(IApplicationView *);
	bool IsIncludedTab(IApplicationView *);
	long OnTabSelectionChanged(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	long UpdateTabSelection(IApplicationView *,bool);
	long _AddViewItem(IApplicationView *);
	long _AddViews(IObjectArray *);
	long _RemoveViewItem(IApplicationView *);
	long _UpdateShowInSwitchers(IApplicationView *,bool);
	long _UpdateThumbnailWindow(IApplicationView *);
public:
	SwitchItemCollection();
	long RuntimeClassInitialize(ISwitchItemFactory *,IApplicationViewCollection *,IApplicationViewVisibilityDebouncedNotificationService *,Windows::Internal::ComposableShell::Tabs::ITabDataModel *,ITabViewManager *,SwitchItemFilterBehavior);
	virtual long GetItemForView(IApplicationView *,_GUID const &,void * *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual void Destroy();
};

struct SwitchItemFactory
{
	virtual long CreateSwitchItem(IApplicationView *,GroupingType,_GUID const &,void * *);
};

class SwitchItemFilteredCollection
{
	bool _ItemMeetsFilterCriteria(IObservableItem *);
	long _ApplyFilterToAllItems();
	long _ApplyFilterToItem(IObservableItem *,bool);
	long _RegisterItemForTitleChanges(IObservableItem *);
	long _UnregisterItemForTitleChanges(IObservableItem *);
public:
	SwitchItemFilteredCollection();
	long RuntimeClassInitialize(IObservableObjectArray *);
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long RegisterBeginEndListener(IObservableObjectArrayChangedBeginEnd *,unsigned long *);
	virtual long RegisterListener(IObservableObjectArrayChanged *,unsigned long *);
	virtual long SetActiveTabFilter();
	virtual long SetMonitorFilter(IImmersiveMonitorManager *,IImmersiveMonitor *);
	virtual long SetTitleFilter(unsigned short const *);
	virtual long SetVirtualDesktopFilter(IVirtualDesktopNotificationService *,IVirtualDesktop *);
	virtual long SetWindowTabFilter();
	virtual long UnregisterBeginEndListener(unsigned long);
	virtual long UnregisterListener(unsigned long);
	virtual long ViewVirtualDesktopChanged(IApplicationView *);
	virtual long VirtualDesktopDestroyBegin(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyFailed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyed(IVirtualDesktop *,IVirtualDesktop *);
	virtual void Destroy();
	virtual void ItemAdded(IObservableObjectArray *,IObservableItem *);
	virtual void ItemOperationBegin(IObservableObjectArray *,ObservableArrayOperation,IObservableItem *);
	virtual void ItemOperationEnd(IObservableObjectArray *,ObservableArrayOperation,IObservableItem *);
	virtual void ItemRemoved(IObservableObjectArray *,IObservableItem *);
	virtual ~SwitchItemFilteredCollection();
};

namespace SwitchItemTelemetry
{
	long ExtractAppId(ISwitchItem *,unsigned short * *);
	long ItemInitTelemetry(long);
};

class SwitchItemThumbnailElement
{
protected:
	DCompThumbnailFrameInfo GetInnerBorderInfo();
	DCompThumbnailFrameInfo GetOuterBorderInfo();
	long ShowContextMenu(ContextMenuArgs const &);
	virtual bool v_InvokeElement();
	virtual bool v_OnClick(PointerButton,MultitaskingViewPointerInputArgs const &);
	virtual long v_InitAccessibleObject(WeakReference::IWeakReference *,_GUID const &,void * *);
	virtual long v_SetRenderMode(CMultitaskingViewButtonElement::ButtonRenderMode);
	virtual void v_ContextMenu(ContextMenuArgs const &);
	virtual void v_LayoutChildren(DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual void v_StartDrag(Geometry::CPoint const &);
	void Close();
	void InvalidateThumbnailVisual();
	void UpdateThumbnailBorder();
public:
	SwitchItemThumbnailElement();
	long RuntimeClassInitialize(ThumbnailSizeMetrics const &,ISwitchThumbnailFactory *,ISwitchItem *);
	virtual AnimationCoordinatorItemType GetItemType();
	virtual Geometry::CRect GetSourcePosition();
	virtual bool HasContextMenu();
	virtual bool IsAccessible();
	virtual bool KeyDown(unsigned int,ModifierKeys);
	virtual long CreateDragVisual(ISwitchThumbnailFactory *,IDCompThumbnail *,Geometry::CRect const &,IUnknown * *);
	virtual long GetAccessibleName(unsigned short * *);
	virtual long StartExternalDrag(IExternalDragCallback *);
	virtual void DragEnded(IUnknown *,DropEffect);
	virtual void DragEnding(IUnknown *,DropEffect);
	virtual void DragStarted(IUnknown *);
	virtual void Hide();
	virtual void SetController(ISwitchItemController *);
	virtual void SetFocused(bool);
	virtual void Show();
	virtual void ThumbnailSizeChanged(void *);
};

struct SwitcherTabViewManagerWrapper
{
	SwitcherTabViewManagerWrapper(ITabViewManager *);
	virtual long DragEnterForApplicationManagedTab(IInspectable *,IApplicationView *);
	virtual long DuplicateTab(IApplicationView *,_GUID const &);
	virtual long EvaluateViewGroupingAndManagement(IApplicationView *,IUnknown *,int *);
	virtual long GetTabDragType(IInspectable *,TAB_DRAG_TYPE *);
	virtual long GetViewForTab(IInspectable *,IApplicationView * *);
	virtual long GetViewForTabInDrag(IInspectable *,IApplicationView * *);
	virtual long IsViewTabbed(IApplicationView *,int *);
	virtual long OnTabbedWindowMisbehaving(IApplicationView *,int *);
	virtual long SelectViewInTabGroup(IApplicationView *,_GUID const &);
	virtual long SwitchToFallbackTabForGroup(_GUID const &);
	virtual long TabDropped(_GUID const &,_GUID const &,int,tagPOINT);
	virtual long TryAssignViewToTabGroup(IApplicationView *,IUnknown *,_GUID *);
	virtual long TryGetLastSelectedTabForView(IApplicationView *,IInspectable * *);
	virtual long TryGetSelectedTabForView(IApplicationView *,IInspectable * *);
	virtual long TryGetTabForView(IApplicationView *,IInspectable * *);
	virtual long TryGetTabGroupForView(IApplicationView *,_GUID const &,void * *);
	virtual long TryRemoveViewFromTabGroup(IApplicationView *);
	virtual long UpdateFallbackTabForGroup(_GUID const &,_GUID const &);
	virtual long UpdatePropertySetWithTargetGroupForActivation(IUnknown *);
};

namespace SystemTray
{
	struct TrayInfoTipActivator
	{
		TrayInfoTipActivator();
		static TrustLevel InternalGetTrustLevel();
		static wchar_t const * InternalGetRuntimeClassName();
		virtual long Activate(HSTRING__ *,HSTRING__ *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *,Windows::Foundation::Collections::IVectorView<HSTRING__ *> *);
		virtual long CanActivate(HSTRING__ *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *,unsigned char *);
		virtual long GetIids(unsigned long *,_GUID * *);
		virtual long GetRuntimeClassName(HSTRING__ * *);
		virtual long GetTrustLevel(TrustLevel *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual long set_Context(unsigned long,Windows::System::IUser *,Windows::Foundation::Collections::IPropertySet *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	struct TrayInfoTipAppInfo
	{
		TrayInfoTipAppInfo();
		long RuntimeClassInitialize(HSTRING__ *);
		virtual long get_AppUserModelId(HSTRING__ * *);
		virtual long get_DisplayInfo(Windows::ApplicationModel::IAppDisplayInfo * *);
		virtual long get_Id(HSTRING__ * *);
		virtual long get_PackageFamilyName(HSTRING__ * *);
	};

	struct TrayInfoTipAppInfoProvider
	{
		TrayInfoTipAppInfoProvider();
		static TrustLevel InternalGetTrustLevel();
		static wchar_t const * InternalGetRuntimeClassName();
		virtual long FindAppInfo(HSTRING__ *,Windows::ApplicationModel::IAppInfo * *);
		virtual long GetIids(unsigned long *,_GUID * *);
		virtual long GetRuntimeClassName(HSTRING__ * *);
		virtual long GetTrustLevel(TrustLevel *);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual unsigned long AddRef();
		virtual unsigned long Release();
	};

	class TrayInfoTipDisplayInfo
	{
		void InitProperties(HSTRING__ *,bool);
	public:
		TrayInfoTipDisplayInfo();
		long RuntimeClassInitialize(HSTRING__ *);
		virtual long GetLogo(Windows::Foundation::Size,Windows::Storage::Streams::IRandomAccessStreamReference * *);
		virtual long get_Description(HSTRING__ * *);
		virtual long get_DisplayName(HSTRING__ * *);
		virtual long get_Properties(Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * *);
	};

	struct TrayNotifyCallback
	{
		TrayNotifyCallback();
		long RuntimeClassInitialize(HSTRING__ *);
		virtual long Notify(unsigned long,tagNOTIFYITEM *);
	};

	namespace TrayUtility
	{
		bool MatchesTrayInfoTipAppIdFormat(HSTRING__ *);
	};

};

class TabAppPolicySettings
{
	long GetPropertySetFromActivatedEventArgs(Windows::ApplicationModel::Activation::IActivatedEventArgs *,Windows::Foundation::Collections::IPropertySet * *);
	static long AppUsesCustomTabsWhenLaunchedIntoNewGroup(unsigned short const *,bool *);
	static long GetCallerAppId(unsigned short * *);
public:
	TabAppPolicySettings();
	static bool ViewUsesCustomTabsWhenLaunchedIntoNewGroup(IApplicationView *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetInsertionContextForActivation(Windows::ApplicationModel::Activation::IActivatedEventArgs *,Windows::UI::Internal::ViewManagement::IApplicationViewTabInsertionContext * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long IsActivatingIntoExistingGroup(Windows::ApplicationModel::Activation::IActivatedEventArgs *,unsigned char *);
	virtual long IsViewInActivationGroup(int,Windows::ApplicationModel::Activation::IActivatedEventArgs *,unsigned char *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_UseCustomTabsWhenLaunchedIntoNewGroup(unsigned char *);
	virtual long put_UseCustomTabsWhenLaunchedIntoNewGroup(unsigned char);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

namespace TabGroupingPolicy
{
	class TabGroupPolicyEvaluator
	{
		HWND__ * GetTabGroupTargetWindow();
		HWND__ * GetTargetWindow();
		Windows::UI::ViewManagement::ViewGrouping GetSourceAppIdViewGroupingPreference();
		Windows::UI::ViewManagement::ViewGrouping GetViewGroupingPreference();
		static wil::srwlock s_chooseLock;
		void ChooseTargetViewUsingHeuristic(IApplicationViewCollection *);
	public:
		TabGroupPolicyEvaluator(IServiceProvider *,Windows::Foundation::Collections::IPropertySet *,IWin32ApplicationView *,IApplicationViewCollection *);
	};

	bool ChooseTargetGroupAndCheckIfIsANewTabGroup(IServiceProvider *,Windows::Foundation::Collections::IPropertySet *,IWin32ApplicationView *,IApplicationViewCollection *);
	bool IsTabbableWindowBetweenInZOrder(HWND__ *,HWND__ *);
};

class TabShellHotKeyHandler
{
	long OnCloseActiveTab();
	long OnDuplicateFocusedTab();
	long OnSelectRelativeTab(Windows::Internal::ComposableShell::Tabs::RelativeTabPosition);
	long OnSelectTabByIndex(unsigned int);
	long OnToggleTabbedBandFocus();
	long OnTryCreateNewTab(_GUID);
	long RegisterHotKeys();
	std::pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > TryGetGroupAndTabInFocus();
public:
	TabShellHotKeyHandler();
	long RuntimeClassInitialize(IImmersiveWindowMessageService *,IApplicationViewCollection *,ITabViewManager *,Windows::Internal::ComposableShell::Tabs::ITabDataModel *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITitleBarController *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual void Destroy();
};

struct TabShellTelemetryBase
{
	static _GUID const GetShellTabGroupId(Windows::Internal::ComposableShell::Tabs::IShellTabGroup *);
	static _GUID const GetShellTabId(Windows::Internal::ComposableShell::Tabs::IShellTab *);
};

class TabTransferManager
{
	long OnTabDropped(IInspectable *,Windows::Internal::ComposableShell::Tabs::ITabDroppedEventArgs *);
	long OnTabTransferCompleted(IInspectable *,Windows::Internal::ComposableShell::Tabs::ShellTabId);
	long OnTabTransferStarting(IInspectable *,Windows::Internal::ComposableShell::Tabs::ShellTabId);
	virtual ~TabTransferManager();
	void AdvanceTransfer(TransferStates);
	void PerformCancel(bool);
	void PerformComplete();
	void PerformDrop();
	void PrepareTabAndViewForDrag(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	void ResetTransferState();
	void ValidateTabId(Windows::Internal::ComposableShell::Tabs::ShellTabId);
public:
	TabTransferManager();
	long RuntimeClassInitialize(wil::com_ptr_t<IWeakReference,wil::err_exception_policy>,Windows::Internal::ComposableShell::Tabs::ITabDataModel *,Windows::Internal::ComposableShell::Tabs::ITabController *,Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker *,IUnknown *,IPrivilegedForegroundOperations *);
	virtual long CancelTabTransfer(Windows::Internal::ComposableShell::Tabs::ShellTabId);
	virtual long DragEnterForApplicationManagedTab(IInspectable *,IApplicationView *);
	virtual long GetViewForTabInDrag(IInspectable *,IApplicationView * *);
	virtual long IsTabBeingTransfered(Windows::Internal::ComposableShell::Tabs::ShellTabId,unsigned char *);
	virtual long NewViewForTab(unsigned int,Windows::Internal::ComposableShell::Tabs::ShellTabId);
	virtual long OnViewRemoved(IApplicationView *);
	virtual long TabDropped(_GUID const &,_GUID const &,int,tagPOINT);
	virtual long TabTransferReceived(Windows::Internal::ComposableShell::Tabs::ShellTabId);
};

class TabViewManager
{
	bool IsWindowStateStale(HWND__ *,tagRECT const &,TRACKED_WINDOW_STATE);
	bool TrySetViewForeground(IApplicationView *,bool *);
	long CloseTab(Windows::Internal::ComposableShell::Tabs::IShellTab *,IApplicationView *);
	long CloseView(IApplicationView *);
	long ConnectTabToView(IApplicationView *,Windows::Foundation::Collections::IPropertySet *,Windows::Internal::ComposableShell::Tabs::IShellTabGroup * *,Windows::Internal::ComposableShell::Tabs::IShellTab * *);
	long CreateHotKeyHandler();
	long CreateSurfaceBrushUsingWIC(Windows::UI::Composition::ICompositor *,IUnknown *,IStream *,Windows::UI::Composition::ICompositionSurfaceBrush * *);
	long CreateSurfaceBrushUsingXaml(Windows::UI::Composition::ICompositor *,IStream *,Windows::UI::Composition::ICompositionSurfaceBrush * *);
	long EnableAcrylicForView(IApplicationView *);
	long EnterFullScreen(IApplicationView *);
	long ExitFullScreen(IApplicationView *);
	long GetShellItemForView(IApplicationView *,IShellItem * *);
	long InsertBadgeGlyph(Windows::Internal::ComposableShell::Tabs::IShellTab *,HSTRING__ *,HSTRING__ *,HSTRING__ *);
	long MinimizeView(IApplicationView *);
	long OnBoundingRectRequested(Windows::Internal::ComposableShell::Tabs::ITabController *,Windows::Internal::ComposableShell::Tabs::ITabControllerRectEventArgs *);
	long OnCloseTabRequested(Windows::Internal::ComposableShell::Tabs::ITabController *,Windows::Internal::ComposableShell::Tabs::ITabControllerEventArgs *);
	long OnSelectTabRequested(Windows::Internal::ComposableShell::Tabs::ITabController *,Windows::Internal::ComposableShell::Tabs::ITabControllerCancellableEventArgs *);
	long OnTabMenuItemsRequested(Windows::Internal::ComposableShell::Tabs::ITabController *,Windows::Internal::ComposableShell::Tabs::ITabControllerMenuItemsRequestedEventArgs *);
	long OnTabMovedGroups(Windows::Internal::ComposableShell::Tabs::ITabController *,Windows::Internal::ComposableShell::Tabs::ITabControllerEventArgs *);
	long OnTabViewOperationRequested(Windows::Internal::ComposableShell::Tabs::ITabController *,Windows::Internal::ComposableShell::Tabs::ITabControllerViewEventArgs *);
	long OnThumbnailRequested(Windows::Internal::ComposableShell::Tabs::ITabController *,Windows::Internal::ComposableShell::Tabs::ITabControllerThumbnailEventArgs *);
	long OnViewCanTabChanged(IApplicationView *);
	long OnViewFocusChanged(IApplicationView *,bool);
	long OnViewLostFocus(IApplicationView *,IUnknown *);
	long OnViewNeedinessChanged(IApplicationView *);
	long PerformWindowPlacementOperation(IApplicationView *,Windows::Internal::ComposableShell::Tabs::ViewCommand);
	long RemoveVirtualTabImpl(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	long SetTabGroupForeground(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	long SwitchToTitleBar(IApplicationView *);
	long ToggleVerticalMaximize(IApplicationView *);
	long UpdateTabDisplayName(HWND__ *,Windows::Internal::ComposableShell::Tabs::IShellTab *);
	long UpdateTabDisplayName(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTab *);
	long ViewPosChanged(IApplicationView *,tagRECT const &,TRACKED_WINDOW_STATE);
	static bool IsWindowRunningInElevatedToken(HWND__ *);
	static void SetViewTransitionsEnabled(IApplicationView *,bool);
	std::pair<wil::com_ptr_t<Windows::UI::Composition::IVisual,wil::err_exception_policy>,wil::unique_any_t<wil::details::unique_storage<wil::details::handle_null_resource_policy<int (*)(void *),&int CloseHandle(void *)> > > > CreateDwmSharedThumbnailVisual(Windows::UI::Composition::ICompositor *,Windows::Internal::ComposableShell::Tabs::IShellTab *,HWND__ *,Windows::Foundation::Size const &);
	unsigned int GetNumTabsInGroupForView(Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,IApplicationView *);
	void AddTabAndViewToMapsLockHeld(Windows::Internal::ComposableShell::Tabs::IShellTab *,IApplicationView *);
	void OnGetUnmetTabRequirementsResult(HWND__ *,DWM_TAB_WINDOW_REQUIREMENTS);
	void OnUnmetTabRequirementsChanged(HWND__ *,DWM_TAB_WINDOW_REQUIREMENTS);
	void RecoverTabGroupsFromWindowGroups();
	void RemoveTabAndViewFromMapsLockHeld(Windows::Internal::ComposableShell::Tabs::IShellTab *,IApplicationView *);
	void TryAddView(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTab *);
	void TryCleanupReplacedView(IApplicationView *);
	void UpdateFallbackTabForGroup(Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,Windows::Internal::ComposableShell::Tabs::IShellTab *);
	void UpdateViewAnimationStateForTab(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTab *);
	wil::com_ptr_t<IApplicationView,wil::err_exception_policy> GetViewForTabLockHeld(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	wil::com_ptr_t<IApplicationView,wil::err_exception_policy> TryGetViewForTab(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	wil::com_ptr_t<Windows::Foundation::Collections::IPropertySet,wil::err_exception_policy> GetActivationValueSet(IApplicationView *,IUnknown *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> TryFindAndNotifyReplacementTab(Windows::Foundation::Collections::IPropertySet *,IApplicationView *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> TryGetFallbackTabForGroup(Windows::Internal::ComposableShell::Tabs::IShellTabGroup *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> TryGetLastSelectedTabForView(IApplicationView *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> TryGetTabForViewImpl(IApplicationView *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> TryGetGroup(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	wil::com_ptr_t<Windows::UI::Composition::IVisual,wil::err_exception_policy> CreateStaticThumbnailVisual(Windows::UI::Composition::ICompositor *,IUnknown *,Windows::Internal::ComposableShell::Tabs::IShellTabImage *,Windows::Foundation::Size const &);
public:
	TabViewManager();
	long RuntimeClassInitialize();
	virtual long AddAndInsertTabAtDefaultPositionForWindowId(Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::UI::Internal::ViewManagement::IApplicationViewTabInsertionContext *,Windows::Internal::ApplicationModel::WindowManagement::WindowId,Windows::Internal::ComposableShell::Tabs::IShellTab * *);
	virtual long AddTabAndViewToMaps(IInspectable *,IApplicationView *);
	virtual long AddVirtualTabForWindow(Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Internal::ApplicationModel::WindowManagement::WindowId,Windows::Internal::ComposableShell::Tabs::IShellTab * *);
	virtual long CancelTabTransfer(Windows::Internal::ComposableShell::Tabs::ShellTabId);
	virtual long DragEnterForApplicationManagedTab(IInspectable *,IApplicationView *);
	virtual long DuplicateTab(IApplicationView *,_GUID const &);
	virtual long EvaluateViewGroupingAndManagement(IApplicationView *,IUnknown *,int *);
	virtual long GetDisplayNameForShellTab(Windows::Internal::ComposableShell::Tabs::IShellTab *,HSTRING__ * *);
	virtual long GetNumTabsForView(IApplicationView *,unsigned __int64 *);
	virtual long GetTabDragType(IInspectable *,TAB_DRAG_TYPE *);
	virtual long GetTabForWindowId(Windows::Internal::ApplicationModel::WindowManagement::WindowId,Windows::Internal::ComposableShell::Tabs::IShellTab * *);
	virtual long GetViewForTab(IInspectable *,IApplicationView * *);
	virtual long GetViewForTabInDrag(IInspectable *,IApplicationView * *);
	virtual long GetWindowGroupInfo(HWND__ *,WINDOW_GROUP_INFO *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long IsViewTabbed(IApplicationView *,int *);
	virtual long MoveWindowToGroup(HWND__ *,_GUID const &,unsigned int);
	virtual long NewViewForTab(unsigned int,Windows::Internal::ComposableShell::Tabs::ShellTabId);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long OnShowWindowPolicy(HWND__ *,unsigned int,unsigned long *,tagRECT *);
	virtual long OnTabbedWindowMisbehaving(IApplicationView *,int *);
	virtual long OnTitleBarsCreated();
	virtual long OnTitleBarsLost();
	virtual long PerformDelayedInitialization();
	virtual long RemoveTabAndViewFromMaps(IInspectable *,IApplicationView *);
	virtual long RemoveVirtualTab(Windows::Internal::ComposableShell::Tabs::IShellTab *);
	virtual long SelectViewInTabGroup(IApplicationView *,_GUID const &);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long SwitchToFallbackTabForGroup(_GUID const &);
	virtual long TabDropped(_GUID const &,_GUID const &,int,tagPOINT);
	virtual long TabTransferReceived(Windows::Internal::ComposableShell::Tabs::ShellTabId);
	virtual long TryAssignViewToTabGroup(IApplicationView *,IUnknown *,_GUID *);
	virtual long TryFindMatchingAppInGroup(IApplicationView *,_GUID const &,IApplicationView * *);
	virtual long TryGetLastSelectedTabForView(IApplicationView *,IInspectable * *);
	virtual long TryGetSelectedTabForView(IApplicationView *,IInspectable * *);
	virtual long TryGetTabForView(IApplicationView *,IInspectable * *);
	virtual long TryGetTabGroupForView(IApplicationView *,_GUID const &,void * *);
	virtual long TryGetTabGroupForWindowId(Windows::Internal::ApplicationModel::WindowManagement::WindowId,Windows::Internal::ComposableShell::Tabs::IShellTabGroup * *);
	virtual long TryRemoveViewFromTabGroup(IApplicationView *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long UpdateFallbackTabForGroup(_GUID const &,_GUID const &);
	virtual long UpdatePropertySetWithTargetGroupForActivation(IUnknown *);
	virtual long add_TabDeselectedViewActive(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewTabAssociated(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewTabClosed(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewTabDeassociated(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewTabLostFocus(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *);
	virtual long get_TabTransferEventBroker(Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker * *);
	virtual long remove_TabDeselectedViewActive(EventRegistrationToken);
	virtual long remove_ViewTabAssociated(EventRegistrationToken);
	virtual long remove_ViewTabClosed(EventRegistrationToken);
	virtual long remove_ViewTabDeassociated(EventRegistrationToken);
	virtual long remove_ViewTabLostFocus(EventRegistrationToken);
	virtual long v_PublishServices(IServiceProvider *,IProfferService *);
	virtual void OnCuratedWindowHidden(HWND__ *);
	virtual void OnMoveSizeAttempted(IApplicationView *,unsigned long);
	virtual void OnShellTrackedWindowPosChanged(HWND__ *,IApplicationView *,int,unsigned long,tagRECT);
	virtual ~TabViewManager();
};

struct TabViewManagerMeasures
{
	class GroupWindowTemplateAppliedToView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,unsigned long,unsigned long,tagRECT const &,tagRECT const &);
		void ViewDidNotMatchTemplate(tagRECT const &,tagRECT const &,double,IApplicationView *);
		void ViewMisbehaving<int &>(int &);
		~GroupWindowTemplateAppliedToView();
	};

	class TabViewManagerAddVirtualTab
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(Windows::Internal::ComposableShell::Tabs::IShellTab *,unsigned int);
		void Stop(Windows::Internal::ComposableShell::Tabs::IShellTab *);
		void TabViewManagerAddVirtualTabToView(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTab *);
		~TabViewManagerAddVirtualTab();
	};

	class TabViewManagerCloseTab
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void TabViewManagerClosingTab(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,Windows::Internal::ComposableShell::Tabs::IShellTab *,unsigned int);
		~TabViewManagerCloseTab();
	};

	class TabViewManagerCloseTabRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void InvokingAppManagedTabCloseRequestedHandlers(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Internal::ComposableShell::Tabs::IShellTabGroup *);
		void StartActivity();
		void Stop(bool);
		void TabViewManager_CloseRequestedRpcTimeout<long const &>(long const &);
		void ZombieTab(Windows::Internal::ComposableShell::Tabs::IShellTab *);
		~TabViewManagerCloseTabRequested();
	};

	class TabViewManagerConnectTabToView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void TabViewManagerTabAddedForView(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,Windows::Internal::ComposableShell::Tabs::IShellTab *,bool);
		~TabViewManagerConnectTabToView();
	};

	class TabViewManagerSelectTabRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void TabViewManagerSelectTab(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,Windows::Internal::ComposableShell::Tabs::IShellTab *);
		~TabViewManagerSelectTabRequested();
	};

	static bool IsEnabled(unsigned char,unsigned __int64);
	void HotKeyHandlerMessageReceived_(unsigned int,Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,Windows::Internal::ComposableShell::Tabs::IShellTab *,_GUID const &);
	void TabViewManagerCloseViewForTab_(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,Windows::Internal::ComposableShell::Tabs::IShellTab *);
};

class TabViewManagerTraceLogging
{
	class GroupWindowTemplateAppliedToFallbackWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(HWND__ *);
	};

	class TabViewManager_CloakView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *);
		~TabViewManager_CloakView();
	};

	class TabViewManager_CloseView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *);
		~TabViewManager_CloseView();
	};

	class TabViewManager_EnterFullScreen
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *);
		~TabViewManager_EnterFullScreen();
	};

	class TabViewManager_ExitFullScreen
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *);
		~TabViewManager_ExitFullScreen();
	};

	class TabViewManager_GetOrCreateTabForWindowId
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		void Stop(Windows::Internal::ComposableShell::Tabs::IShellTab *,bool);
		~TabViewManager_GetOrCreateTabForWindowId();
	};

	class TabViewManager_NewViewForTab
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(HWND__ *,_GUID);
		~TabViewManager_NewViewForTab();
	};

	class TabViewManager_OnApplicationViewChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,HWND__ *,APPLICATION_VIEW_CHANGE);
		~TabViewManager_OnApplicationViewChanged();
	};

	class TabViewManager_OnTitleBarsCreated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TabViewManager_OnTitleBarsCreated();
	};

	class TabViewManager_OnTitleBarsLost
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TabViewManager_OnTitleBarsLost();
	};

	class TabViewManager_OnUnmetTabRequirementsChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(HWND__ *,DWM_TAB_WINDOW_REQUIREMENTS);
		void UnmetTabRequirementsChanged(DWM_TAB_WINDOW_REQUIREMENTS,DWM_TAB_WINDOW_REQUIREMENTS,TelemetryHelpers::WindowCharacteristics const &);
	};

	class TabViewManager_OnViewCanTabChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void DisablingTabs();
		void EnablingTabs();
		void StartActivity(IApplicationView *);
		~TabViewManager_OnViewCanTabChanged();
	};

	class TabViewManager_OnViewFocusChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TabViewManager_OnViewFocusChanged();
	};

	class TabViewManager_RecoverTabGroupsFromWindowGroups
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void TabViewManager_RecoverTabForWindow(HWND__ *);
		~TabViewManager_RecoverTabGroupsFromWindowGroups();
	};

	class TabViewManager_ReplacementTabSelection
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTab *,unsigned int);
		~TabViewManager_ReplacementTabSelection();
	};

	class TabViewManager_TabTransferCanceled
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(_GUID);
		~TabViewManager_TabTransferCanceled();
	};

	class TabViewManager_TabTransferCompleted
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(_GUID);
		~TabViewManager_TabTransferCompleted();
	};

	class TabViewManager_TabTransferStarted
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(_GUID);
		~TabViewManager_TabTransferStarted();
	};

	class TabViewManager_UpdateFallbackTabForGroup
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,Windows::Internal::ComposableShell::Tabs::IShellTab *);
		void Stop(Windows::Internal::ComposableShell::Tabs::IShellTab *);
		~TabViewManager_UpdateFallbackTabForGroup();
	};

	static char const * GetChangeName(APPLICATION_VIEW_CHANGE);
protected:
	virtual void OnErrorReported(bool,wil::FailureInfo const &);
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static void FailedQueryWindowServiceForApplicationViewTabManager<char const * &,HWND__ * &,long const &>(char const * &,HWND__ * &,long const &);
	static void TabViewManager_AddTabAndViewToMaps<Windows::Internal::ComposableShell::Tabs::IShellTab * &,IApplicationView * &>(Windows::Internal::ComposableShell::Tabs::IShellTab * &,IApplicationView * &);
	static void TabViewManager_MaximizedWindowInfo<IApplicationView * &,tagRECT &,tagRECT const &,tagRECT &,tagRECT &>(IApplicationView * &,tagRECT &,tagRECT const &,tagRECT &,tagRECT &);
	static void TabViewManager_RemoveTabAndViewFromMaps<Windows::Internal::ComposableShell::Tabs::IShellTab * &,IApplicationView * &>(Windows::Internal::ComposableShell::Tabs::IShellTab * &,IApplicationView * &);
	static wil::ActivityThreadWatcher WatchCurrentThread(char const *);
	void FailedQueryWindowServiceForApplicationViewTabManager_(char const *,HWND__ *,long);
	void TabAppPolicySettings_IsActivatingIntoExistingGroup_(unsigned short const *,int,bool);
	void TabAppPolicySettings_IsViewInActivationGroup_(unsigned short const *,int,int,Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,bool);
	void TabTransferManager_SetTransferState_(unsigned int);
	void TabViewManager_AddTabAndViewToMaps_(Windows::Internal::ComposableShell::Tabs::IShellTab *,IApplicationView *);
	void TabViewManager_BoundingRectRequestedForTab_(Windows::Internal::ComposableShell::Tabs::IShellTab *,tagRECT const &);
	void TabViewManager_MaximizedWindowInfo_(IApplicationView *,tagRECT const &,tagRECT const &,tagRECT const &,tagRECT const &);
	void TabViewManager_OnTabViewOperationRequested_(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTab *,unsigned int);
	void TabViewManager_OnThumbnailRequested_(Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,Windows::Internal::ComposableShell::Tabs::IShellTab *);
	void TabViewManager_RemoveTabAndViewFromMaps_(Windows::Internal::ComposableShell::Tabs::IShellTab *,IApplicationView *);
	void TabViewManager_RemovingViewFromTabGroup_(IApplicationView *,Windows::Internal::ComposableShell::Tabs::IShellTabGroup *,unsigned int);
	void TabViewManager_ViewForTabNotFound_(Windows::Internal::ComposableShell::Tabs::IShellTab *);
};

struct TabWrapper
{
	TabWrapper(Windows::Internal::ComposableShell::Tabs::IShellTab *,TabWrapperOptions);
	~TabWrapper();
};

class TabletModeCoverWindow
{
	long CreateCoverWindow();
	long CreateDesktopThumbnail();
	long GetLowestLayoutView(IApplicationView * *);
	long InitializeInstance();
	long UpdateWindowOrder();
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void OnPointerUp();
	void ScaleFactorChanged();
	void SystemColorsChanged();
public:
	TabletModeCoverWindow();
	long RuntimeClassInitialize(IUnknown *);
	virtual long AppLayoutChanged(IAppLayout *);
	virtual long DisplaySettingsChanged(IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetCoverWindow(HWND__ * *);
	virtual long SetSite(IUnknown *);
	virtual long ShellTargetChanged(IApplicationView *);
	virtual long TabletModeChanged(bool);
	virtual ~TabletModeCoverWindow();
};

namespace TabletModeDragPattern
{
	long GenerateAppResizeDropEffect(IAppLayoutOperation *,ResizeAction,CSimpleHashTable<IApplicationView *,unsigned short const *,CDefaultHashPolicy<IApplicationView *>,CDefaultKeyCompare<IApplicationView *>,CDefaultResizePolicy,CDefaultRehashPolicy> *,unsigned short * *);
	long GenerateWindowArrangementDropEffect(IApplicationView *,IAppLayout *,ARRANGEMENT_ACTION,CSimpleHashTable<IApplicationView *,unsigned short const *,CDefaultHashPolicy<IApplicationView *>,CDefaultKeyCompare<IApplicationView *>,CDefaultResizePolicy,CDefaultRehashPolicy> *,unsigned short * *);
	long GetViewAtIndex(IAppLayout *,unsigned int,IApplicationView * *);
};

namespace TabletModeHelpers
{
	bool IsTabletMode();
	long QueryTabletMode(_TABLETMODESTATE *);
};

class TabletModeInputHandler
{
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	TabletModeInputHandler();
	long RuntimeClassInitialize(SHOW_WINDOW_ARRANGEMENT_VIEW_SOURCE,ITabletModeInputCallback *);
	virtual HWND__ * GetWindow();
	virtual long TakeForeground();
	virtual void PointerCancel();
	virtual void PointerDown(unsigned int,tagPOINT);
	virtual void PointerUp(unsigned int,tagPOINT);
	virtual void PointerUpdate(unsigned int,tagPOINT);
	virtual void Shutdown();
	virtual void TakeCapture();
};

class TabletModePositioner
{
	bool CanShowSwitcherOrLauncher(bool);
	bool IsFullScreenViewVisible();
	bool IsLauncherVisible();
	bool IsOldFullScreenView(IApplicationView *);
	bool IsOurMonitor(IImmersiveMonitor *);
	bool IsSwitcherVisible(MULTITASKING_VIEW_TYPES);
	bool IsTabletMode();
	bool IsViewRectValid(tagRECT const &,tagRECT const &);
	bool IsWindowStateStale(IApplicationView *,tagRECT const &,TRACKED_WINDOW_STATE);
	bool ShouldOverrideShowWindowNoOp(unsigned int,HWND__ *);
	bool ShouldShowLauncher();
	bool ShouldShowSnapAssist(bool);
	long AppToAppSwitchHelper(IApplicationView *,APPLICATION_VIEW_SIZE_PREFERENCE,IApplicationView *,APPLICATION_VIEW_SIZE_PREFERENCE,APP_TO_APP_SWITCH_FLAGS);
	long ApplyLayoutOperationHelper(IUnknown *);
	long CancelMoveSizeOperationForOperableView();
	long ChangeLayoutEnvironmentHelper(LAYOUT_ENVIRONMENT_DETAILS const &);
	long CleanupBackgroundViews(IObjectArray *,ViewOperationFlags);
	long CloakWindow(HWND__ *);
	long CreateAndInitApplicationViewOperation(IApplicationView *,IApplicationViewOperation * *);
	long EvictAppHelper(IApplicationView *,EVICT_APP_FLAGS);
	long ForegroundViewChanged(IApplicationView *);
	long ForegroundViewChanged(IApplicationView *,bool,bool *);
	long GetCurrentLayoutEnvironment(LAYOUT_ENVIRONMENT_DETAILS *);
	long GetForegroundOperableView(IApplicationView * *);
	long GetOperableViews(IImmersiveMonitor *,IObjectArray * *);
	long GetScaleFactor(DEVICE_SCALE_FACTOR *);
	long GetTopOperableView(IObjectArray *,IApplicationView * *);
	long HandleFlashDetection(IAppLayoutOperation *);
	long InitLayoutOperationHelper(_GUID const &,_GUID const &,void * *);
	long Initialize();
	long InitializeAppLayoutForStartup();
	long InitializeAppLayoutForTabletModeEntry();
	long LayoutEnvironmentChanged();
	long NotifyAppLayoutChanged(IAppLayoutOperation *);
	long PositionView(IApplicationView *,tagRECT const &,LAYOUT_ENVIRONMENT_DETAILS const &,IApplicationViewOperation *);
	long ResizeViewHelper(IApplicationView *,int);
	long SetAppLayout(IAppLayout *);
	long ShowLauncher(bool);
	long ShowLauncherOrSnapAssistInHole(APP_LAYOUT_OPERATION_ACTIONS);
	long ShowSnapAssist();
	long SwitchToAppHelper(IApplicationView *,SWITCH_TO_APP_FLAGS,tagRECT *,bool *);
	long SwitchToCustomLayoutHelper(IAppLayout *,SwitchToCustomLayoutFlags);
	long SwitchToEmptyLayoutHelper(SwitchToEmptyLayoutFlags);
	long SwitchToSanitizedAppLayout(ViewOperationFlags);
	long ViewRemoved(IApplicationView *);
	static long CreateEmptyAppLayout(LAYOUT_ENVIRONMENT_DETAILS const &,IAppLayout * *);
	static long CreateTitlebarConfiguration(IApplicationView *,IApplicationViewTitlebarConfiguration * *);
	static void GetFrameRectForView(IApplicationView *,tagRECT *);
	void HandleAutoRotationLock();
	void SetTabletMode(_TABLETMODESTATE);
	void TryClearFullScreenCachedAppLayout(IApplicationView *);
	void ViewMinimized(IApplicationView *,TabletModeTraceLogging::ShellTrackedWindowPosChanged);
	void ViewRestored(IApplicationView *,TabletModeTraceLogging::ShellTrackedWindowPosChanged);
public:
	TabletModePositioner();
	long RuntimeClassInitialize();
	virtual int ShouldBlockActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleFrameworkViewTypeChange(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual int ShouldHandlePresentationRequest(IApplicationView *,IInspectable *);
	virtual long ApplyLayoutOperation(IUnknown *);
	virtual long BlockDismiss(int *);
	virtual long ControlGainedForActivation(IApplicationView *,SHELL_POSITIONER_TYPE,IUnknown *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long FrameworkViewTypeChangedForView(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual long GetAppLayout(IAppLayout * *);
	virtual long GetAppViewCloseOverrideBehavior(IAppViewCloseOverrideBehavior * *);
	virtual long GetChromeConfigurationForView(IApplicationView *,int *,IApplicationViewTitlebarConfiguration * *);
	virtual long GetPosition(HWND__ *,_GUID const &,void * *);
	virtual long HandleRecoveryForView(IApplicationView *);
	virtual long HandleSwitchToView(IApplicationView *);
	virtual long InitLayoutOperation(_GUID const &,_GUID const &,void * *);
	virtual long InitializePosition(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,IApplicationView *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long MultitaskingViewDismissed(MULTITASKING_VIEW_TYPES);
	virtual long MultitaskingViewShown(MULTITASKING_VIEW_TYPES);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnOutgoingTransitionCompleted();
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long OnViewClosing(IApplicationView *,int);
	virtual long PerformDelayedInitialization();
	virtual long PositionView(IApplicationView *,tagRECT,TRY_POSITION_VIEW_FLAGS);
	virtual long PresentationChangedForView(IApplicationView *,IInspectable *);
	virtual long ResizeView(IApplicationView *,tagSIZE,tagSIZE);
	virtual long SetViewStateForDesiredAppState(IApplicationView *,APPLICATION_DESIRED_STATE);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long TargetChanged(SHELL_TARGET_IDENTIFIER,IApplicationView *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long VisibleFullScreenViewChanged(IApplicationView *,IApplicationView *);
	virtual void AllowNextShowWindow(HWND__ *,unsigned int);
	virtual void AllowNextWindowPosChange(IApplicationView *,tagRECT);
	virtual void ControlGained(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown *,IPresentationRequestedArgs *);
	virtual void ControlLost(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown * *);
	virtual void ScaleFactorChanged();
	virtual void ShellTrackedWindowPosChanged(IApplicationView *,int,tagRECT,unsigned long);
	virtual void ShowWindowAttempted(HWND__ *,unsigned int,unsigned long *);
	virtual ~TabletModePositioner();
};

struct TabletModePositionerHandoffContext
{
	long RuntimeClassInitialize(IAppLayout *,bool);
	virtual long GetHandoffContext(IAppLayout * *,int *);
};

namespace TabletModePositionerHelpers
{
	bool IsControlledView(IApplicationView *);
	bool IsOperableView(IApplicationView *);
	bool IsOperableWindow(HWND__ *);
	long GetApplicationViewsFromLayout(IAppLayout *,unsigned int *,IApplicationView * *,IApplicationView * *);
};

class TabletModePositionerManager
{
	long NotifyAppLayoutChanged(IImmersiveMonitor *,IAppLayoutOperation *);
public:
	TabletModePositionerManager();
	long RuntimeClassInitialize();
	virtual long OnShowWindowPolicy(HWND__ *,unsigned int,unsigned long *,tagRECT *);
	virtual long PerMonitorPositionerLayoutChanged(IImmersiveMonitor *,IAppLayoutOperation *);
	virtual long RegisterForAppLayoutChanges(ITabletModePositionerManagerNotification *,unsigned long *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterForAppLayoutChanges(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void OnCuratedWindowHidden(HWND__ *);
	virtual void OnMoveSizeAttempted(IApplicationView *,unsigned long);
	virtual void OnShellTrackedWindowPosChanged(HWND__ *,IApplicationView *,int,unsigned long,tagRECT);
	virtual ~TabletModePositionerManager();
};

class TabletModePositionerOperation
{
	bool IsViewInArray(IApplicationView *,IObjectArray *);
	long AddViewToNewLayout(IApplicationView *,tagRECT const &,APP_LAYOUT_INSERT_LOCATION);
	long FindAdjacentItem(IAppLayoutItem *,_GUID const &,void * *);
	long GetLeftAndRightSnappedViews(IObjectArray *,IApplicationView * *,IApplicationView * *);
public:
	TabletModePositionerOperation();
	virtual long ChangeLayoutEnvironment(LAYOUT_ENVIRONMENT_DETAILS const &);
	virtual long CreateSanitizedLayout(IApplicationView *,IApplicationView *,IObjectArray *,CreateSanitizedLayoutFlags);
	virtual long ResizeView(IApplicationView *,int);
	virtual long SwitchToCustomLayout(IAppLayout *,SwitchToCustomLayoutFlags);
	virtual long SwitchToEmptyLayout(SwitchToEmptyLayoutFlags);
	virtual void SetOldAppLayout(IAppLayout *);
	virtual void SetTempAppVisuals(ITemporaryAppVisualArray *);
};

class TabletModeTelemetry
{
	class AppToAppSwitch
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,APPLICATION_VIEW_SIZE_PREFERENCE,IApplicationView *,APPLICATION_VIEW_SIZE_PREFERENCE);
		~AppToAppSwitch();
	};

	class TMAppArrange
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IAppLayout *,IApplicationView *,unsigned int);
		void Stop(WindowArrangementViewDragData::DropLocation);
		~TMAppArrange();
	};

	class TMAppResize
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IAppLayout *);
		void Stop(ResizeDropLocation);
		~TMAppResize();
	};

	class WindowArrangementView_Show
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(SHOW_WINDOW_ARRANGEMENT_VIEW_MODE,SHOW_WINDOW_ARRANGEMENT_VIEW_SOURCE);
		~WindowArrangementView_Show();
	};

protected:
	void Create();
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static unsigned short const * CensorAppID(unsigned short const *);
	void ReverseAppToAppSwitch_(IAppLayout *,IApplicationView *,AppCloseMethod);
	void SplitViewCreated_(IAppLayout *,IAppLayout *,APP_LAYOUT_OPERATION_ACTIONS);
};

class TabletModeTraceLogging
{
	class ApplicationViewChangedFocus
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *);
	};

	class ApplyLayoutOperationHelper
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IAppLayoutOperation *);
		~ApplyLayoutOperationHelper();
	};

	class ShellTrackedWindowPosChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void FullScreenAppIgnored();
		void Maximized();
		void Minimized();
		void Restored();
		void RestoredAppAddedToLayout();
		void StaleState();
		void StartActivity(IApplicationView *,int,tagRECT const &,unsigned long);
		void ViewForceEvicted(IApplicationView *,tagRECT const &,tagRECT const &);
		void ViewForceMaximized(IApplicationView *,tagRECT const &,tagRECT const &);
		void ViewPositionAdjusted(IApplicationView *,tagRECT const &,tagRECT const &);
		~ShellTrackedWindowPosChanged();
	};

	class ShowWindowAttempted
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,HWND__ *,unsigned int);
		void Stop(unsigned long);
	};

	class TMPControlGained
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IObjectArray *,SHELL_POSITIONER_TYPE);
	};

	class TMPControlLost
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IObjectArray *,SHELL_POSITIONER_TYPE);
	};

	static long GetAppLayoutData(IAppLayout *,TabletModeTraceLogging::AppLayoutData *);
	static long GetAppLayoutItemData(IAppLayoutItem *,TabletModeTraceLogging::AppLayoutItemData *);
	static long GetAppLayoutItemName(IAppLayoutItem *,unsigned short * *);
	static long GetAppLayoutItems(IAppLayout *,IAppLayoutItem * *,IAppLayoutItem * *);
	static long GetAppLayoutOperationData(IAppLayoutOperation *,TabletModeTraceLogging::AppLayoutOperationData *);
};

class TabletModeViewManager
{
	class CachedWindowArrangementViewLifetime
	{
		virtual ~CachedWindowArrangementViewLifetime();
	public:
		long RuntimeClassInitialize(TabletModeViewManager *,IWindowArrangementView *);
	};

	bool IsLauncherOrSwitcherVisibleOnThisMonitor();
	bool IsViewFullScreen(IApplicationView *);
	long DismissAllLightDismiss();
	long GetAppLayoutForDropFeedback(IApplicationView *,SHOW_WINDOW_ARRANGEMENT_VIEW_MODE,IAppLayout * *);
	long ShowWindowArrangementView(IApplicationView *,IAppLayout *,tagRECT *,tagPOINT *,tagRECT *,SHOW_WINDOW_ARRANGEMENT_VIEW_MODE,SHOW_WINDOW_ARRANGEMENT_VIEW_SOURCE,ITabletModeInputSource *);
	long StartSwipeHelper(unsigned int,tagPOINT,SHOW_WINDOW_ARRANGEMENT_VIEW_SOURCE);
	void UpdateLayoutItemsSizeConstraints();
public:
	TabletModeViewManager();
	long RuntimeClassInitialize();
	virtual HWND__ * GetWindow();
	virtual long BeginDragVisualHandoff(IApplicationView *,tagRECT *,tagPOINT *,ITabletModeInputSource *);
	virtual long BeginPlaceModeDrag(unsigned int,tagPOINT);
	virtual long CancelDrag();
	virtual long CancelSwipe();
	virtual long CommitDrag(tagPOINT);
	virtual long CommitSwipe(unsigned int,tagPOINT);
	virtual long ContinueDrag(tagPOINT);
	virtual long ContinueSwipe(unsigned int,tagPOINT);
	virtual long CreateWindowArrangementViewForDrag(IApplicationView *,IUnknown * *);
	virtual long EndDragVisualHandoff(IApplicationView *);
	virtual long HideAppResizeView();
	virtual long HideWindowArrangementView();
	virtual long HitCornerOrEdge(EDGEUI_CORNEROREDGE,tagPOINT,EDGEUI_INPUTNOTIFICATION *,int);
	virtual long MouseDwelled(tagPOINT,EDGEUI_INPUTNOTIFICATION *);
	virtual long MoveSizeAttempted(IApplicationView *,MOVE_SIZE_TYPE);
	virtual long ObservedKeypress(unsigned int);
	virtual long ObservedMouseButtonDown(tagPOINT);
	virtual long ObservedMouseMove(tagPOINT,tagPOINT);
	virtual long ObservedTouchInput(tagPOINT);
	virtual long ShowAppResizeView(IApplicationView *,MOVE_SIZE_TYPE,tagPOINT);
	virtual long ShowPlaceMode(IApplicationView *,IAppLayout *,tagRECT *);
	virtual long StartDrag(tagPOINT);
	virtual long StartExtendedSwipe(tagPOINT,unsigned int,tagPOINT);
	virtual long StartSwipe(unsigned int,tagPOINT);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~TabletModeViewManager();
};

class TabletModeViewManagerProxy
{
	long GetTabletModeViewManager(ITabletModeViewManager * *);
public:
	virtual long BeginDragVisualHandoff(IApplicationView *,tagRECT *,tagPOINT *,ITabletModeInputSource *);
	virtual long CreateWindowArrangementViewForDrag(IApplicationView *,IUnknown * *);
	virtual long EndDragVisualHandoff(IApplicationView *);
	virtual long HideAppResizeView();
	virtual long HideWindowArrangementView();
	virtual long MoveSizeAttempted(IApplicationView *,MOVE_SIZE_TYPE);
	virtual long ShowAppResizeView(IApplicationView *,MOVE_SIZE_TYPE,tagPOINT);
	virtual long ShowPlaceMode(IApplicationView *,IAppLayout *,tagRECT *);
	virtual void SetMonitorManager(IImmersiveMonitorManager *);
};

struct TaskContinuityActivitiesExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

struct TaskFlowDataEngineTelemetry
{
	class WindowSnapStateChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void SnapSignalDataNotCreated();
		void StartActivity(unsigned int);
		~WindowSnapStateChanged();
	};

	static void FailedToRetreiveAppIdInfo<long &>(long &);
	static void FailedToRetreiveProcessId<long &>(long &);
	static void FailedToRetreiveWindowHandle();
	static void SignalProcessingListenerCountersReport<unsigned int &,unsigned int &>(unsigned int &,unsigned int &);
	static void TaskflowDataEngine_CDPInitializeResult<long &>(long &);
	static void UserPresenceIdleState<int &>(int &);
	static wil::ActivityThreadWatcher WatchCurrentThread(char const *);
};

class TaskFlowImmersiveShellBroker
{
	bool IsAFCAndActivityTrackingEnabled();
	long EnsureViewActiveActivityManager();
	long GetAppViewManager(IApplicationViewCollection * *);
	long ReinitializeObjects();
	long StartActivityIndexer();
	long StartAppActivitySessionListener();
	long StartAppViewListener();
	long StartAppViewTitleChangeListener();
	long StartClipboardSignalListener();
	long StartFileListener();
	long StartUserPresenceListener();
	long TryGetApplicationViewViewIdForCoreWindow(unsigned __int64,unsigned __int64 *);
public:
	TaskFlowImmersiveShellBroker();
	long RuntimeClassInitialize();
	virtual long GetCurrentActivityForAllViewsAsync(Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *> * *);
	virtual long GetCurrentActivityForViewAsync(unsigned __int64,Windows::Internal::ComposableShell::Tabs::ShellTabId,Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> * *);
	virtual long GetFileActivityListener(Windows::Internal::Shell::TaskFlow::DataEngine::IFileActivityListener * *);
	virtual long GetViewActiveActivityManager(Windows::Internal::Data::Activities::IViewActiveActivityManager * *);
	virtual long LaunchUserActivityAsync(Windows::ApplicationModel::UserActivities::IUserActivity *,Windows::Internal::Data::Activities::IActivityLauncherOptions *,Windows::Foundation::IAsyncOperation<bool> * *);
	virtual long OnActivityFeedOperationStateChanged(ActivityFeedOperationScope,ActivityFeedOperationState);
	virtual long PerformDelayedInitialization();
	virtual long SessionCreated(Windows::ApplicationModel::Internal::UserActivities::IUserActivitySessionInfo *);
	virtual long SessionCreatedForSet(HSTRING__ *,Windows::ApplicationModel::UserActivities::IUserActivity *);
	virtual long SessionCreatedForSetWithWindowId(HSTRING__ *,Windows::Internal::ApplicationModel::WindowManagement::WindowId,Windows::ApplicationModel::UserActivities::IUserActivity *);
	virtual long SessionDisposed(Windows::ApplicationModel::Internal::UserActivities::IUserActivitySessionInfo *);
	virtual long SessionDisposedForSet(HSTRING__ *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TryGetActivityIndexer(Windows::Internal::Data::Activities::IActivityIndexer * *);
	virtual long TryGetUserActivityMonitor(Windows::ApplicationModel::Internal::UserActivities::IUserActivityMonitor * *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long get_ActiveUserContextToken(unsigned __int64 *);
	virtual ~TaskFlowImmersiveShellBroker();
};

namespace TaskbarFlexibleLayoutTelemetry
{
	class CanApplyTaskbarLayout
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CanApplyTaskbarLayout();
	};

	class GetTaskbarLayout
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~GetTaskbarLayout();
	};

};

namespace TaskbarHelpers
{
	HWND__ * GetTrayWindowForMonitor(HMONITOR__ *);
};

struct TaskbarLayoutItem
{
	TaskbarLayoutItem();
	virtual long GetAppUserModelID(HSTRING__ * *);
	virtual long GetDesktopApplicationId(HSTRING__ * *);
	virtual long GetFilePath(HSTRING__ * *);
	virtual long GetPinningSource(TaskbarPinningSource *);
	virtual long GetSecondaryTileId(HSTRING__ * *);
	virtual long SetAppModelUserId(unsigned short const *);
	virtual long SetDesktopApplicationId(unsigned short const *);
	virtual long SetDesktopLinkPath(unsigned short const *);
	virtual long SetSecondaryTileId(unsigned short const *);
	virtual void SetPinnedBy(TaskbarPinningSource);
};

class TaskbarLayoutParser
{
	long CalculateSelectionAttributes();
	long ParsePinnedAppNode(IXMLDOMNode *,ITaskbarLayoutItem * *);
	long ParseTaskbarLayoutNode(IXMLDOMNode *,ParsedTaskbarLayout &);
public:
	TaskbarLayoutParser();
	long RuntimeClassInitialize();
	virtual long ParseTaskbarLayoutCollectionNode(Microsoft::WRL::ComPtr<IXMLDOMNode> &,CCoSimpleArray<Microsoft::WRL::ComPtr<ITaskbarLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> > > &);
	virtual long SetCurrentRegion(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
};

class TaskbarLayoutPolicyManager
{
	int CanApplyMDMLayout();
	int IsOverrideLayout(IXMLDOMNode *);
	long CanApplyGroupPolicyLayout(int *,int *);
	long ConvertItemsToObjectArray(CCoSimpleArray<Microsoft::WRL::ComPtr<ITaskbarLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> > > &,IObjectArray * *);
	long EnsureEnterpriseLayoutFilePath();
	long EnsureOEMLayoutFilePath();
	long GetCloudDefaultLayoutXML(IXMLDOMDocument2 * *);
	long GetDefaultLayoutXML(IXMLDOMDocument2 * *);
	long GetLayoutModificationXML(IXMLDOMDocument2 * *);
	long GetMDMLayoutXML(IXMLDOMDocument2 * *);
	long GetMDMPolicyLayoutTimestamp(unsigned long *);
	long GetMDMStartLayoutPolicy(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
	long GetMDMStartLayoutPolicyWithFlags(PMPolicyRequestedDataFlags,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
	long GetOEMLayoutXML(IXMLDOMDocument2 * *);
	long GetPolicyLayoutXML(IXMLDOMDocument2 * *);
	long LoadLayoutXMLFromFilePath(Microsoft::WRL::Wrappers::HStringReference *,IXMLDOMDocument2 * *);
	long PopulateAndSetPinned(CCoSimpleArray<Microsoft::WRL::ComPtr<ITaskbarLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> > > &,Microsoft::WRL::ComPtr<IXMLDOMNode> &,TaskbarPinningSource);
	long PopulateCloudDefaultLayoutItems(CCoSimpleArray<Microsoft::WRL::ComPtr<ITaskbarLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> > > &);
	long PopulateDefaultLayoutItems(CCoSimpleArray<Microsoft::WRL::ComPtr<ITaskbarLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> > > &);
	long PopulateEnterpriseLayoutItems(CCoSimpleArray<Microsoft::WRL::ComPtr<ITaskbarLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> > > &);
	long PopulateOEMLayoutItems(CCoSimpleArray<Microsoft::WRL::ComPtr<ITaskbarLayoutItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ITaskbarLayoutItem> > > &);
	long SetMDMPolicyLayoutTimestampToCurrent();
	long ValidateDefaultLayoutXML(IXMLDOMDocument2 *);
	long ValidateLayoutModificationXML(IXMLDOMDocument2 *);
	long XMLDocFromStream(Windows::Storage::Streams::IRandomAccessStream *,IXMLDOMDocument2 * *);
public:
	TaskbarLayoutPolicyManager();
	long RuntimeClassInitialize();
	virtual long CanApplyTaskbarLayout(TaskbarLayoutType,int *,int *);
	virtual long GetTaskbarLayout(TaskbarLayoutType,IObjectArray * *);
	virtual ~TaskbarLayoutPolicyManager();
};

namespace TelemetryHelpers
{
	void GetWindowCharacteristicsPartial(HWND__ *,TelemetryHelpers::WindowCharacteristics &);
	void GetWindowCharacteristicsWithProcessName(HWND__ *,TelemetryHelpers::WindowCharacteristics &);
};

struct ThumbnailDeviceFactory
{
	ThumbnailDeviceFactory();
	virtual Microsoft::WRL::ComPtr<Windows::Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice> GetThumbnailDevice();
	virtual void PreCreateThumbnailDevice();
};

struct ThumbnailHeight
{
	int GetForScreenHeight(int);
};

namespace TileUtils
{
	long ConvertFileUriToFilePath(unsigned short const *,unsigned short * *);
};

namespace TimelineUI
{
	struct TimelineHost
	{
		TimelineHost();
	};

};

struct TitleBarChangedEventArgs
{
	TitleBarChangedEventArgs();
	virtual long get_Title(HSTRING__ * *);
};

class TitleBarController
{
	long EnsureTitleBarFactoryStatics();
	long OnViewCreatedImpl(IApplicationView *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &,bool);
	long RegisterForShellHooks();
	long RemoveWin32View(IWin32ApplicationView *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &);
	virtual ~TitleBarController();
	void ConnectTitleBarToSharedVisual(Windows::Internal::Shell::Experience::ITitleBar *,IWin32ApplicationView *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &);
	void DisconnectTitleBarFromSharedVisual(Windows::Internal::Shell::Experience::ITitleBar *,IWin32ApplicationView *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &);
	void SetPseudoActiveViewAndSwitchToTitleBarIfAppropriate(IApplicationView *,bool);
	void UnregisterFromShellHooks();
	void UpdateWin32TitleBarSize(IWin32ApplicationView *,Windows::Internal::Shell::Experience::ITitleBar *);
	wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> TryGetTitleBarForView(IWin32ApplicationView *);
public:
	TitleBarController();
	virtual long AttachTitleBarToView(IApplicationView *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &);
	virtual long GetTitleBarFactoryStatics(Windows::Internal::Shell::Experience::ITitleBarFactoryStatics * *);
	virtual long IsPseudoActiveView(IApplicationView *,bool *);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long SwitchToTitleBar(IApplicationView *);
	virtual long TryToggleTitleBarFocusForForegroundWindow();
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void OnViewFocusChanged(IApplicationView *,bool);
	virtual void OnViewPositionChanged(IApplicationView *,TRACKED_WINDOW_STATE);
	virtual void OnViewRecovered(IApplicationView *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &,bool);
	virtual void OnViewRemoved(IApplicationView *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &);
};

namespace TitlebarOverlayHelpers
{
	bool OverlayTitlebarsInTabletMode();
};

struct ToastCenterExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

class TouchKeyboardExperienceManager
{
	bool IsCompatibilityKeyboardEnabled();
	bool IsFrameReady(IApplicationFrame *);
	bool IsKeyboardFilterServiceRunning();
	long AnimateWindow(IApplicationFrameWrapper *,HWND__ *,CExperienceManagerAnimationHelper &,bool);
	long CreateAppFrameWrapper(IApplicationFrameWrapper * *);
	long CreateModalExperienceAsync();
	long DestroyView(KBViewInfo *);
	long FindFrameWrapper(IApplicationFrame *,Microsoft::WRL::ComPtr<IApplicationFrameWrapper> &);
	long FindViewInfo(IApplicationFrameWrapper *,std::shared_ptr<KBViewInfo> &);
	long FindViewInfo(unsigned int,std::shared_ptr<KBViewInfo> &);
	long GetFrameWindowByViewId(unsigned int,HWND__ * *);
	long GetMDMPolicyValue(unsigned short const *,TouchKeyboardExperienceManager::MDMAvailabilityPolicy *);
	long InitializeChromeOptionsAndGetTitleBar(IApplicationFrameWrapper *,IApplicationFrameTitleBar * *);
	long InitializeTabTipAdapter();
	long InitializeViewInfoIfNeeded(KBViewInfo *);
	long NotifyPositionAndSizeUpdateCompleted(IApplicationFrame *);
	long OnAutoInvokeInDesktopModePolicyChanged();
	long OnConvertibleSlateModeChanged();
	long OnDisplayChanged();
	long OnDpiChanged();
	long OnHolographicDisplayChanged(Windows::Internal::Shell::Holographic::UserDisplayContext const &);
	long OnLockScreenActiveChanged(bool);
	long OnTabtipRegistryChanged();
	long OnViewCreated(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,EventRegistrationToken);
	long OnViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long RegisterForApplicationStateChanges();
	long RegisterForViewEvents(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	long SetHostedPos(IApplicationFrameWrapper *,IApplicationFrame *,tagRECT const *);
	long ShowView(KBViewInfo *);
	long TerminateInputApplication(unsigned short const *);
	long UnregisterForApplicationStateChanges();
	long UnregisterForViewEvents();
	long UpdateBorder(unsigned int,ViewEffectKind);
	long UpdateWindowAccent(HWND__ *,ACCENT_STATE,unsigned long,tagRECT const *);
	static long MoveFrameWithinScreenIfNecessary(IApplicationFrame *,IApplicationFrameWrapper *,bool);
	static void OobeCompletedCallback(void *);
	virtual ~TouchKeyboardExperienceManager();
	void HandleTouchEvent(unsigned char const (&)[32]);
	void InitializeShellPreferencesDesktop();
	void InitializeShellPreferencesHub();
	void PreloadInputApp();
	void SubscribeTouchKeyboardWnfNotifications();
	void UnsubscribeTouchKeyboardWnfNotifications();
	void UpdateDictationAvailability();
	void UpdateDockedModeAvailability();
	void UpdateEmojiInputAvailability();
	void UpdateEyeControlState();
	void UpdateFullLayoutAvailability();
	void UpdateHandwritingAvailability();
	void UpdateLinguisticDataAvailability();
	void UpdateNarrowLayoutAvailability();
	void UpdateOobeRunningState();
	void UpdateSettingsLauncherAvailability();
	void UpdateSplitLayoutAvailability();
	void UpdateWideLayoutAvailability();
public:
	PLM_APPLICATION_STATE GetInputAppState();
	TouchKeyboardExperienceManager();
	bool GetApplicationViewIdIfExists(unsigned int,unsigned int &);
	bool GetFirstViewTypeIfExists(unsigned int,Windows::UI::Internal::Text::Core::CoreKeyboardViewType &);
	long EnsureInputAppIsActivated();
	long FireInputPaneShowingEvent(unsigned int,tagRECT);
	long GetViewRect(unsigned int,tagRECT *);
	long InitializeViewInfosIfNeeded();
	long NotifyCurrentVisibilityState(unsigned int,bool,bool);
	long OnInputAppChangeApproved(unsigned short const *);
	long OnInputAppPropertyChanged(HSTRING__ *,HSTRING__ *);
	long OnInputAppRequestedHide(unsigned int,bool);
	long OnInputAppRequestedResize(unsigned int,tagRECT);
	long OnInputAppRequestedShow(unsigned int,tagRECT,ViewOptions);
	long RuntimeClassInitialize();
	long ShouldShowEmojiTipsOnHotKey(bool *);
	static bool IsSessionShuttingDown();
	virtual long GetCurrentTextSelectionRect(tagRECT *);
	virtual long GetForegroundInputHostWindowId(unsigned int *);
	virtual long GetIsSystemInputApp(unsigned short const *,int *);
	virtual long OnAccessibilityKeyboardRequestHide();
	virtual long OnAccessibilityKeyboardRequestShow();
	virtual long OnApplicationStateChanged(unsigned short const *,PLM_STATE_CHANGE);
	virtual long OnChromeOffsetsChanged(IApplicationFrame *);
	virtual long OnCommand(IApplicationFrame *,_GUID const *,unsigned long);
	virtual long OnDismiss();
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long OnPositionChanged(IApplicationFrame *);
	virtual long OnRudeWindowStateChange(IImmersiveMonitor *,RudeWindowStateChangeFlags,HWND__ *);
	virtual long OnShellHotKey(_TouchKeyboardShellHotKeyType);
	virtual long PerformDelayedInitialization();
	virtual long ShowClipboardView();
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
	virtual void OnStoryboardCompleted();
	void FireInputPaneHidingEvent(unsigned int);
	void UpdateViewVisibilityInShellPreference(unsigned int,bool);
};

struct TouchKeyboardExperienceManagerCF
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

class TouchKeyboardExperienceTelemetryLogger
{
	class DeferredRequestCreated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(Windows::UI::Internal::Text::Core::CoreKeyboardViewType,Windows::UI::Internal::Text::Core::CoreKeyboardModality,bool);
		~DeferredRequestCreated();
	};

	class InputAppActivated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~InputAppActivated();
	};

	class InputAppActivation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~InputAppActivation();
	};

	class InputAppActivationRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~InputAppActivationRequested();
	};

	class InputAppResumeRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~InputAppResumeRequested();
	};

	class InputAppResumed
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~InputAppResumed();
	};

	class InputAppTerminated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~InputAppTerminated();
	};

	class OnApplicationChromeOffsetsChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~OnApplicationChromeOffsetsChanged();
	};

	class OnApplicationFrameCommand
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~OnApplicationFrameCommand();
	};

	class OnApplicationFramePositionChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~OnApplicationFramePositionChanged();
	};

	class OnInputAppRequestedHideActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,unsigned int);
		~OnInputAppRequestedHideActivity();
	};

	class OnInputAppRequestedHideActivity_Queued
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~OnInputAppRequestedHideActivity_Queued();
	};

	class OnInputAppRequestedResizeActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,unsigned int);
		void Stop(unsigned int,unsigned int,Windows::Foundation::Size,bool,bool,long);
		~OnInputAppRequestedResizeActivity();
	};

	class OnInputAppRequestedResizeActivity_Queued
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~OnInputAppRequestedResizeActivity_Queued();
	};

	class OnInputAppRequestedShowActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,unsigned int);
		void Stop(unsigned int,unsigned int,Windows::Foundation::Rect &,bool);
		~OnInputAppRequestedShowActivity();
	};

	class OnInputAppRequestedShowActivity_Queued
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~OnInputAppRequestedShowActivity_Queued();
	};

	class OnLightDismiss
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~OnLightDismiss();
	};

	class OnPreloadInputAppActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~OnPreloadInputAppActivity();
	};

	class OnShellRequestedHideActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~OnShellRequestedHideActivity();
	};

	class OnShellRequestedShowActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~OnShellRequestedShowActivity();
	};

	class OnShellRequestedStateChangeActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(Windows::UI::Internal::Text::Core::CoreKeyboardViewType,unsigned int,unsigned short const *,bool,bool,bool);
		~OnShellRequestedStateChangeActivity();
	};

	class OnViewCreated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~OnViewCreated();
	};

	class PendingRequestCreated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(Windows::UI::Internal::Text::Core::CoreKeyboardViewType,Windows::UI::Internal::Text::Core::CoreKeyboardModality,bool);
	};

	class PendingRequestExecuted
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(bool,Windows::UI::Internal::Text::Core::CoreKeyboardViewType,bool,unsigned int);
		~PendingRequestExecuted();
	};

	class SetInputAppAUMIDActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~SetInputAppAUMIDActivity();
	};

	class TouchKeyboardExperienceManagerDelayedInitialization
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool,bool);
		~TouchKeyboardExperienceManagerDelayedInitialization();
	};

	class TouchKeyboardExperienceManagerSubscribeToServices
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~TouchKeyboardExperienceManagerSubscribeToServices();
	};

protected:
	static TouchKeyboardExperienceTelemetryLogger * Instance();
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static void InputAppSuspended();
	static void InputAppSuspending();
	static void OnViewCreatedFailed<long &>(long &);
	static void TouchKeyboardExperienceManagerDestroyed();
	static void ViewCreationTaskFailed();
	static void ViewInfoDuplicated();
	static wil::ActivityThreadWatcher WatchCurrentThread(char const *);
	void CoreInputViewOcclusionChanged_(unsigned int,Windows::UI::ViewManagement::Core::CoreInputViewOcclusionKind,unsigned short const *,Windows::Foundation::Rect &,Windows::Foundation::Rect &,Windows::Foundation::Rect &);
	void EditControlPositionChanged_(unsigned short const *,Windows::Foundation::Rect &,Windows::Foundation::Rect &,Windows::Foundation::Rect &);
	void MonitorInfoUsedForCreatingOptions_(unsigned __int64,Windows::Foundation::Rect &,unsigned int,unsigned __int64,Windows::Foundation::Rect &,unsigned int,unsigned __int64,Windows::Foundation::Rect &,unsigned int,bool,bool);
	void MonitorInfoUsedForShowRequest_(unsigned __int64,Windows::Foundation::Rect &,unsigned int,unsigned __int64,Windows::Foundation::Rect &,unsigned int,unsigned __int64,Windows::Foundation::Rect &,unsigned int,bool,bool);
};

struct TouchKeyboardExperienceTraceLogging
{
	static _tlgProvider_t const * Provider();
};

struct TouchpadControllerExperienceManagerTelemetry
{
	class TouchpadLaunched
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		TouchpadLaunched TransferToCurrentThread();
		TouchpadLaunched();
		void Hide();
		void StartActivity();
		~TouchpadLaunched();
	};

	static void ControllerMoved<long &,long &,_GUID const &>(long &,long &,_GUID const &);
};

namespace TrayNotificationsTelemetry
{
	class FindAppInfoContext
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(HSTRING__ *);
		~FindAppInfoContext();
	};

};

namespace TwinUI
{
	namespace Cortana
	{
		class CCortanaWNFService
		{
			long GetNotification(ICortanaWNFNotification * *);
			long UpdateFromCurrentWNFState(bool);
			static long AboveLockAppActiveWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
			static long LockScreenActiveWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
			static long ShellAppLaunchWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
			static long ShellModeWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
			static long ShellReadyWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
			static long WindowsHelloActiveWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
		public:
			CCortanaWNFService();
			virtual long SubscribeToWNF(ICortanaWNFNotification *,bool);
			virtual long UnsubscribeToWNF();
		};

		class CortanaPositionerSelector
		{
			long _GetDesktopExperiencePositioner(Windows::Internal::Shell::Experience::IShellExperiencePositioner * *);
		public:
			CortanaPositionerSelector(IServiceProvider *,ICortanaExperienceManagerNotification *);
			virtual long ActivateView(Windows::Internal::Shell::Experience::IShellExperienceView *,HSTRING__ *,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *);
			virtual long GetActivePositioner(Windows::Internal::Shell::Experience::IShellExperiencePositioner * *);
			virtual long GetPositionerByType(Windows::Internal::Shell::Experience::ShellExperiencePositionerType,Windows::Internal::Shell::Experience::IShellExperiencePositioner * *);
			virtual long RefreshActivePositioner(Windows::Internal::Shell::Experience::IShellExperienceView *,HSTRING__ *);
			virtual long SetActivePositioner(Windows::Internal::Shell::Experience::ShellExperiencePositionerType,Windows::Internal::Shell::Experience::IShellExperienceView *);
		};

		class ShellExperienceView
		{
			long SetWindowRegionAsync(HWND__ *,HRGN__ *,int);
			long _FireViewChanged(Windows::Internal::Shell::Experience::ShellExperienceViewChangeType,long);
			long _FireViewEvent(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
			virtual long OnApplicationActivatedForLaunch(CSingleViewShellExperience *,long);
			virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
			virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
			virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
			virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
			virtual long OnViewCloaking(CSingleViewShellExperience *);
			virtual long OnViewCreated(CSingleViewShellExperience *);
			virtual long OnViewDestroyed(CSingleViewShellExperience *);
			virtual long OnViewHidden(CSingleViewShellExperience *);
			virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
			virtual long OnViewShown(CSingleViewShellExperience *);
			virtual long OnViewUncloaking(CSingleViewShellExperience *);
		public:
			ShellExperienceView();
			long RuntimeClassInitialize(IServiceProvider *,HSTRING__ *,HSTRING__ *,HSTRING__ *,ZBID);
			virtual long Activate(HSTRING__ *,Windows::Internal::Shell::Experience::ShellExperienceViewFocusOptions);
			virtual long BringToForeground();
			virtual long Hide();
			virtual long KeepAlive();
			virtual long Launch(HSTRING__ *);
			virtual long LaunchCompleted();
			virtual long NotifyView(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
			virtual long RemoveKeepAlive();
			virtual long SetDrawingRegion(unsigned __int64,unsigned char);
			virtual long SetPreferentialRMSettings(CSingleViewShellExperience::ImportanceVectorOptions);
			virtual long ShowBorder(Windows::Internal::Shell::Experience::ShellExperienceViewBorderEdge,Windows::Internal::Shell::Experience::ShellExperienceViewBorderAccentState);
			virtual long ShowBorderWithRect(Windows::Internal::Shell::Experience::ShellExperienceViewBorderEdge,Windows::Internal::Shell::Experience::ShellExperienceViewBorderAccentState,Windows::UI::Color,Windows::Foundation::Rect);
			virtual long Uncloak();
			virtual long add_ViewChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> *,EventRegistrationToken *);
			virtual long add_ViewEvent(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> *,EventRegistrationToken *);
			virtual long get_Created(unsigned char *);
			virtual long get_DesiredSize(Windows::Foundation::Size *);
			virtual long get_PendingViewAction(CSingleViewShellExperience::PendingViewAction *);
			virtual long get_PropertySet(Windows::Foundation::Collections::IPropertySet * *);
			virtual long get_Ready(unsigned char *);
			virtual long get_ViewState(CSingleViewShellExperience::ExperienceViewState *);
			virtual long get_ViewWrapper(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
			virtual long get_Visible(unsigned char *);
			virtual long remove_ViewChanged(EventRegistrationToken);
			virtual long remove_ViewEvent(EventRegistrationToken);
			virtual ~ShellExperienceView();
		};

	};

	namespace Lighting
	{
		struct AssistantLightBlock
		{
			virtual void HandleState(int,Cortana::Lighting::AssistantState);
			virtual void SetExclusiveLockState(bool);
		};

		struct AssistantLightFactory
		{
			static long GetAssistantLight(Microsoft::WRL::ComPtr<Windows::Devices::Lights::ILampArray>,std::shared_ptr<IAssistantLight> &);
		};

		class AssistantLightManager
		{
			long AddDevice(HSTRING__ *);
			long IsCortanaDevice(Windows::Devices::Lights::ILampArray *,bool *);
			long IsDeviceEnabled(Windows::Devices::Enumeration::IDeviceInformationUpdate *,bool *);
			long OnDeviceAdded(Windows::Devices::Enumeration::IDeviceWatcher *,Windows::Devices::Enumeration::IDeviceInformation *);
			long OnDeviceRemoved(Windows::Devices::Enumeration::IDeviceWatcher *,Windows::Devices::Enumeration::IDeviceInformationUpdate *);
			long OnDeviceUpdated(Windows::Devices::Enumeration::IDeviceWatcher *,Windows::Devices::Enumeration::IDeviceInformationUpdate *);
			long RemoveDevice(HSTRING__ *);
			long StartWatching();
			void Animate(Cortana::Lighting::AssistantState);
		public:
			AssistantLightManager();
			void HandleState(Cortana::Lighting::AssistantState);
			~AssistantLightManager();
		};

		class AssistantLightStrip
		{
			long Animate(int,std::vector<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> >,std::allocator<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > > > &);
		public:
			AssistantLightStrip(Microsoft::WRL::ComPtr<Windows::Devices::Lights::ILampArray>,std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> >);
			virtual void HandleState(int,Cortana::Lighting::AssistantState);
			virtual void SetExclusiveLockState(bool);
		};

		class AssistantLightWNFListener
		{
			static long ShellAssistantStateChangeWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
		public:
			AssistantLightWNFListener();
		};

		struct IAssistantLight
		{
			virtual ~IAssistantLight();
		};

	};

	namespace ShellFeeds
	{
		class ShellFeedsShellExperienceView
		{
			long _FireViewChanged(Windows::Internal::Shell::Experience::ShellExperienceViewChangeType,long);
			long _FireViewEvent(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
			virtual long OnApplicationActivatedForLaunch(CSingleViewShellExperience *,long);
			virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
			virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
			virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
			virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
			virtual long OnViewCloaking(CSingleViewShellExperience *);
			virtual long OnViewCreated(CSingleViewShellExperience *);
			virtual long OnViewDestroyed(CSingleViewShellExperience *);
			virtual long OnViewHidden(CSingleViewShellExperience *);
			virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
			virtual long OnViewShown(CSingleViewShellExperience *);
			virtual long OnViewUncloaked(CSingleViewShellExperience *);
			virtual long OnViewUncloaking(CSingleViewShellExperience *);
		public:
			ShellFeedsShellExperienceView();
			long RuntimeClassInitialize(IServiceProvider *,HSTRING__ *,HSTRING__ *,HSTRING__ *,ZBID);
			virtual long Activate(HSTRING__ *,Windows::Internal::Shell::Experience::ShellExperienceViewFocusOptions);
			virtual long BringToForeground();
			virtual long Hide();
			virtual long KeepAlive();
			virtual long Launch(HSTRING__ *);
			virtual long LaunchCompleted();
			virtual long NotifyView(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
			virtual long RemoveKeepAlive();
			virtual long SetDrawingRegion(unsigned __int64,unsigned char);
			virtual long SetPreferentialRMSettings(CSingleViewShellExperience::ImportanceVectorOptions);
			virtual long ShowBorder(Windows::Internal::Shell::Experience::ShellExperienceViewBorderEdge,Windows::Internal::Shell::Experience::ShellExperienceViewBorderAccentState);
			virtual long ShowBorderWithRect(Windows::Internal::Shell::Experience::ShellExperienceViewBorderEdge,Windows::Internal::Shell::Experience::ShellExperienceViewBorderAccentState,Windows::UI::Color,Windows::Foundation::Rect);
			virtual long Uncloak();
			virtual long add_ViewChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewChangedArg *> *,EventRegistrationToken *);
			virtual long add_ViewEvent(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::IShellExperienceView *,Windows::Internal::Shell::Experience::IShellExperienceViewEventArg *> *,EventRegistrationToken *);
			virtual long get_Created(unsigned char *);
			virtual long get_DesiredSize(Windows::Foundation::Size *);
			virtual long get_PendingViewAction(CSingleViewShellExperience::PendingViewAction *);
			virtual long get_PropertySet(Windows::Foundation::Collections::IPropertySet * *);
			virtual long get_Ready(unsigned char *);
			virtual long get_ViewState(CSingleViewShellExperience::ExperienceViewState *);
			virtual long get_ViewWrapper(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
			virtual long get_Visible(unsigned char *);
			virtual long remove_ViewChanged(EventRegistrationToken);
			virtual long remove_ViewEvent(EventRegistrationToken);
		};

	};

};

class UAPViewWrapper
{
	virtual Windows::Internal::Shell::ViewManagerInterop::NavigationLevel v_GetDesiredNavigationLevel();
	virtual bool v_CanDirectlySizeWindow();
	virtual bool v_CanPositionWindow();
	virtual bool v_SetDesiredPosition_HasViewDataChanged(APPLICATION_VIEW_DATA const &,APPLICATION_VIEW_DATA const &);
	virtual bool v_SupportsBack();
	virtual void v_OnViewVisibilityChanged(EventPhase,Visibility);
	virtual void v_OnWindowCreated(WindowCreatedType);
	virtual void v_SendConsolidated(Windows::Internal::Shell::ViewManagerInterop::ConsolidatedState);
	virtual void v_SetDesiredNavigationLevel(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	virtual void v_SetDesiredPosition_OnBeforePositionWindow(bool,bool);
public:
	UAPViewWrapper();
	long RuntimeClassInitialize(unsigned int,IUnknown *,unsigned short const *,unsigned short const *,ViewEventDispatcher *);
	virtual long SetImageLocation(Windows::Foundation::Rect);
	virtual long SetIsDismissed(unsigned char);
};

namespace UserAssistImpl
{
	IShellUserAssist * GetUserAssistWorker(_GUID const &);
	IShellUserAssist * g_cachedUserAssist;
};

struct UwpAppPackageInfo
{
	bool IsAppActive();
	std::vector<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy>,std::allocator<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> > > GetActiveViews();
	void EnumerateAppViews(Windows::Internal::FamilySafety::AppLimits::IAppStateDataReporter *);
	void UpdateView(IWinRTApplicationView *,Windows::Internal::FamilySafety::AppLimits::ViewState);
};

struct UwpAppStateManager
{
	UwpAppStateManager();
	virtual bool IsAppActive(unsigned short const *);
	virtual std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetDisplayName(unsigned short const *);
	virtual std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > GetActiveApps();
	virtual void CancelTerminateApp(unsigned short const *);
	virtual void EnumerateAppStateData(Windows::Internal::FamilySafety::AppLimits::IAppStateDataReporter *);
	virtual void Reset();
	virtual void TerminateApp(unsigned short const *,Windows::Internal::FamilySafety::AppLimits::TerminationType);
	virtual void UpdateAppView(IApplicationView *,Windows::Internal::FamilySafety::AppLimits::ViewState,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification *,bool);
};

class UwpPrimaryAppProxy
{
	std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > FindAppView(IApplicationView *);
	std::list<wil::com_ptr_t<IImmersiveMonitor,wil::err_exception_policy>,std::allocator<wil::com_ptr_t<IImmersiveMonitor,wil::err_exception_policy> > > GetSortedConnectedMonitors(IImmersiveMonitorManager *);
	unsigned __int64 GetAppHostId(IApplicationView *);
	void RelayoutAppViewsInternal(IImmersiveMonitorManager *,std::function<void (IApplicationView *,IImmersiveMonitor *)>);
public:
	virtual bool HandleView(IApplicationView *,IImmersiveMonitorManager *,std::function<void (IApplicationView *,IImmersiveMonitor *)>);
	virtual bool IsSameAppId(IApplicationView *);
	virtual bool RemoveView(IApplicationView *,IImmersiveMonitorManager *,std::function<void (IApplicationView *,IImmersiveMonitor *)>);
	virtual void RelayoutAppViews(IImmersiveMonitorManager *,std::function<void (IApplicationView *,IImmersiveMonitor *)>);
};

struct ViewAnimationStoryboardHelper
{
	long Begin(HWND__ *,DWMTRANSITION_TARGET,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *);
	long Begin(IApplicationView *,DWMTRANSITION_TARGET);
	long Initialize(int,_GUID const &);
	~ViewAnimationStoryboardHelper();
};

struct ViewEventArgsBase
{
	ViewEventArgsBase();
	virtual long get_EventContext(Windows::Foundation::Collections::IPropertySet * *);
	virtual long get_EventType(Windows::Internal::Shell::ViewManagerInterop::ViewEventType *);
};

struct ViewEventArgsForNavigationRequest
{
	ViewEventArgsForNavigationRequest();
	virtual long get_DisplayRegionId(unsigned int *);
	virtual long get_IsHolographicActivation(unsigned char *);
	virtual long put_DisplayRegionId(unsigned int);
	virtual long put_IsHolographicActivation(unsigned char);
};

struct ViewEventArgsForPropertyChanged
{
	ViewEventArgsForPropertyChanged();
	long RuntimeClassInitialize(unsigned short const *);
	virtual long get_PropertyKey(HSTRING__ * *);
};

struct ViewEventArgsForSelectTargetView
{
	ViewEventArgsForSelectTargetView();
	virtual long SetTargetViewId(unsigned int);
	virtual long get_RequestingViewInstanceId(unsigned int *);
};

struct ViewEventArgsForShowAsStandalone
{
	ViewEventArgsForShowAsStandalone();
	long RuntimeClassInitialize(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::UI::ViewManagement::ViewSizePreference,Windows::UI::ViewManagement::ViewSizePreference,unsigned __int64,IAsyncCallback *,Windows::Foundation::Collections::IPropertySet *);
	long RuntimeClassInitialize(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::UI::ViewManagement::ViewSizePreference,Windows::UI::ViewManagement::ViewSizePreference,unsigned __int64,IAsyncCallback *,Windows::Foundation::Collections::IPropertySet *,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings *);
	virtual long CompleteOperation(unsigned int);
	virtual long get_NavigationRequestIdForActivation(unsigned __int64 *);
	virtual long get_ViewAnchor(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
	virtual long get_ViewSizePreferenceAnchor(Windows::UI::ViewManagement::ViewSizePreference *);
	virtual long get_ViewSizePreferenceToShow(Windows::UI::ViewManagement::ViewSizePreference *);
	virtual long get_ViewToShow(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
	virtual long get_WindowingEnvironmentSettings(Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings * *);
};

struct ViewEventArgsForShowAsViewMode
{
	ViewEventArgsForShowAsViewMode();
	long RuntimeClassInitialize(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::UI::ViewManagement::ApplicationViewMode,Windows::Internal::ApplicationModel::WindowManagement::ExperienceKind,Windows::UI::ViewManagement::ViewSizePreference,Windows::UI::ViewManagement::ViewSizePreference,Windows::Foundation::Size,Windows::UI::ViewManagement::ViewGrouping,IAsyncCallback *);
	long RuntimeClassInitialize(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::UI::ViewManagement::ApplicationViewMode,Windows::Internal::ApplicationModel::WindowManagement::ExperienceKind,Windows::UI::ViewManagement::ViewSizePreference,Windows::UI::ViewManagement::ViewSizePreference,Windows::Foundation::Size,Windows::UI::ViewManagement::ViewGrouping,IAsyncCallback *,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings *);
	virtual long CompleteOperation(unsigned int);
	virtual long get_CustomSize(Windows::Foundation::Size *);
	virtual long get_GroupingPreferenceAsUInt32(unsigned int *);
	virtual long get_ViewAnchor(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
	virtual long get_ViewMode(Windows::UI::ViewManagement::ApplicationViewMode *);
	virtual long get_ViewSizePreference(Windows::UI::ViewManagement::ViewSizePreference *);
	virtual long get_ViewSizePreferenceAnchor(Windows::UI::ViewManagement::ViewSizePreference *);
	virtual long get_ViewToShow(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
	virtual long get_WindowExperienceKind(Windows::Internal::ApplicationModel::WindowManagement::ExperienceKind *);
	virtual long get_WindowingEnvironmentSettings(Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings * *);
};

struct ViewEventArgsForSwitch
{
	ViewEventArgsForSwitch();
	long RuntimeClassInitialize(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::UI::ViewManagement::ApplicationViewSwitchingOptions,IAsyncCallback *);
	virtual long CompleteOperation(unsigned int);
	virtual long get_ViewSwitchFrom(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
	virtual long get_ViewSwitchOptions(Windows::UI::ViewManagement::ApplicationViewSwitchingOptions *);
	virtual long get_ViewSwitchTo(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
};

struct ViewEventArgsForWindowingSettings
{
	ViewEventArgsForWindowingSettings(std::map<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,std::less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,std::allocator<std::pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > >,Windows::Internal::ApplicationModel::WindowingEnvironment::WindowingEnvironmentId);
	virtual long GetWindowingSettings(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings * *);
	virtual long SetNonShownViews(Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> *);
	virtual long get_Success(unsigned char *);
	virtual long get_Views(Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> * *);
	virtual long get_WindowingEnvironmentId(unsigned int *);
	virtual long put_Success(unsigned char);
};

class ViewEventDispatcher
{
	struct PendingViewData
	{
		~PendingViewData();
	};

	long _AddValidView(IViewWrapperInternal *);
	long _ChangePopupUIShowingCount(IViewWrapperInternal *,PopupCountOperation,unsigned __int64);
	long _CreatePerApplicationData(IViewWrapperInternal *,CRefCountedObject<ViewEventDispatcher::PerApplicationData> * *);
	long _EnsureViewHasWrapperAndListener(unsigned int,IViewWrapperInternal * *,CRefCountedObject<ViewEventRegistration> * *,bool *);
	long _EnsureViewsHaveWrappersForSameListenerAndNotifyListenerIfNeeded(unsigned int,unsigned int,IViewWrapperInternal * *,IViewWrapperInternal * *,CRefCountedObject<ViewEventRegistration> * *);
	long _FindMatchingViewEventRegistration(IViewWrapperInternal *,CRefCountedObject<ViewEventRegistration> * *);
	long _FindMatchingViewEventRegistration(unsigned short const *,unsigned short const *,CRefCountedObject<ViewEventRegistration> * *);
	long _FindPendingActivation(unsigned __int64,CLinkedNode<ViewEventDispatcher::PendingActivationData> * *);
	long _FindPerApplicationData(IViewWrapperInternal *,CRefCountedObject<ViewEventDispatcher::PerApplicationData> * *);
	long _HandleForegroundWindow(HWND__ *);
	long _HandleWindowCreated(HWND__ *,ViewEventDispatcher::WindowType);
	long _HandleWindowCreatedForExistingView(HWND__ *,unsigned int);
	long _HandleWindowCreatedWithNoView(HWND__ *);
	long _HandleWindowDestroyed(HWND__ *);
	long _PerformCrashRecovery();
	long _RaiseViewEvent(IViewWrapperInternal *,Windows::Internal::Shell::ViewManagerInterop::ViewEventType);
	long _RaiseViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::ViewEventType,AgileGitPtr);
	long _RaiseViewEventWithPropertySet(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::ViewEventType,Windows::Foundation::Collections::IPropertySet *,AgileGitPtr);
	long _RemovePendingViewReferenceForViewInstanceId(unsigned int,IUnknown * *);
	long _ViewFromFrameOrWindow(HWND__ *,IViewWrapperInternal * *);
	long _ViewFromHostIdAndExperienceId(unsigned __int64,unsigned short const *,IViewWrapperInternal * *);
	long _ViewFromViewInstanceId(unsigned int,IViewWrapperInternal * *);
	long _ViewFromWindow(HWND__ *,IViewWrapperInternal * *);
	static int s_RecoverWindowsProc(HWND__ *,__int64);
	virtual ~ViewEventDispatcher();
	void BoostUnboostSiHostProcess(bool);
	void _FlushRemovedPendingActivations();
	void _GetViews(std::vector<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,std::allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> > > &);
	void _OverrideNavigationLevelForView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,NavigationLevelOverride);
	void _QueuePendingActivationNodeForDestruction(CLinkedNode<ViewEventDispatcher::PendingActivationData> *);
	void _RemovePendingActivationsForAppId(Windows::Internal::String const &);
	void _RemovePerApplicationData(CRefCountedObject<ViewEventDispatcher::PerApplicationData> *);
	void _RemoveValidView(unsigned __int64);
public:
	ViewEventDispatcher();
	long HandleFrameWindowChange(IViewWrapperInternal *);
	long QueuePendingActivation(IViewWrapperInternal *,Windows::Foundation::Collections::IPropertySet *,bool);
	long RuntimeClassInitialize();
	virtual long DecrementPopupCount(unsigned int);
	virtual long GetCanShowPopups(unsigned int,unsigned char *);
	virtual long GetPendingActivationData(unsigned __int64,Windows::Foundation::Collections::IPropertySet * *);
	virtual long GetTopLevelHost(unsigned int,Windows::Internal::Shell::Popups::ClientIdentifier *);
	virtual long IncrementPopupCount(unsigned int);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long InitiateUserLogoff(unsigned __int64);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long PerformDelayedInitialization();
	virtual long RecoverViews(EventRegistrationToken,IObjectArray * *);
	virtual long RecoverViews(EventRegistrationToken,Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> * *);
	virtual long RegisterForPropertyChangeEvents(unsigned int,Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler *,EventRegistrationToken *);
	virtual long RegisterForViewEvents(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> *,HSTRING__ *,HSTRING__ *,EventRegistrationToken *);
	virtual long RegisterForViewEventsWithOptions(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> *,HSTRING__ *,HSTRING__ *,Windows::Internal::Shell::Desktop::ViewManagerInterop::ViewEventRegistrationFlags,EventRegistrationToken *);
	virtual long RemovePendingActivation(unsigned __int64);
	virtual long Shutdown();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TerminateApp(unsigned __int64);
	virtual long TransferForegroundFromComponentToHost(unsigned int);
	virtual long TransferForegroundWithinComponentTree(unsigned int);
	virtual long TryGetViewIdForWindowId(unsigned int,unsigned int *);
	virtual long UnregisterForPropertyChangeEvents(unsigned int,EventRegistrationToken);
	virtual long UnregisterForViewEvents(EventRegistrationToken);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long add_ForegroundViewChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager *,Windows::Internal::Shell::ViewManagerInterop::IForegroundViewChangedEventArgs *> *,EventRegistrationToken *);
	virtual long add_SelectViewToActivateForHitTest(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager *,Windows::Internal::Shell::ViewManagerInterop::ISelectViewToActivateForHitTestEventArgs *> *,EventRegistrationToken *);
	virtual long add_UserLogoffComplete(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher *,Windows::Internal::Shell::ViewManagerInterop::IUserLogoffCompleteEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewEventDispatcherReadyChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher *,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherReadyChangedEventArgs *> *,EventRegistrationToken *);
	virtual long get_ForegroundView(unsigned int *);
	virtual long get_ForegroundViewData(Windows::Internal::Shell::ViewManagerInterop::ForegroundViewData *);
	virtual long get_ViewEventDispatcherReady(unsigned char *);
	virtual long remove_ForegroundViewChanged(EventRegistrationToken);
	virtual long remove_SelectViewToActivateForHitTest(EventRegistrationToken);
	virtual long remove_UserLogoffComplete(EventRegistrationToken);
	virtual long remove_ViewEventDispatcherReadyChanged(EventRegistrationToken);
	virtual long v_PublishServices(IServiceProvider *,IProfferService *);
	virtual long v_ShutdownServices(IProfferService *);
	virtual void GetViews(std::vector<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,std::allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> > > &);
	virtual void OverrideNavigationLevelForView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,NavigationLevelOverride);
	void ActivationCompleted(unsigned __int64);
	void BoostShellPriority(ViewEventDispatcher::BoostOptions);
	void NavigateAwayFromView(unsigned int);
	void SwitchAsync(unsigned int,unsigned int,Windows::UI::ViewManagement::ApplicationViewSwitchingOptions,IAsyncCallback *);
	void TryConsolidate(unsigned int);
	void TryShowAsStandaloneAsync(unsigned int,unsigned int,Windows::UI::ViewManagement::ViewSizePreference,Windows::UI::ViewManagement::ViewSizePreference,unsigned __int64,IAsyncCallback *);
	void TryShowAsViewModeAsync(unsigned int,unsigned int,Windows::UI::ViewManagement::ApplicationViewMode,Windows::UI::ViewManagement::ViewSizePreference,Windows::Foundation::Size,Windows::UI::ViewManagement::ViewGrouping,IAsyncCallback *);
	void UnboostShellPriority();
	void ViewCreated(unsigned int,IUnknown *);
	void ViewDesiredNavigationLevelChanged(unsigned int,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	void ViewDestroyed(unsigned int);
	void ViewNavigationLevelChanged(unsigned int,Navigation::ViewNavigationLevel);
	void ViewNavigationRequested(unsigned int,unsigned int,Navigation::ViewActivationFlags,Windows::Foundation::Collections::IPropertySet *);
	void ViewOperationRequestComplete(unsigned int,ViewOperationRequestType,Windows::Internal::Shell::ViewManagerInterop::AppRequestHandledResult);
	void ViewPropertyChanged(unsigned int,unsigned short const *);
	void ViewVisibilityChanged(EventPhase,unsigned int,Visibility);
};

struct ViewEventRegistration
{
	~ViewEventRegistration();
};

class ViewGroup
{
	bool AreViewTabsAppManaged(IApplicationView *);
	bool IsWindowMisbehaving(IApplicationView *,tagRECT const &,tagRECT const &,TabViewManagerMeasures::GroupWindowTemplateAppliedToView &);
	virtual ~ViewGroup();
public:
	ViewGroup(IWindowGroupManager *,ITitleBarController *,ITabViewManager *,Windows::Foundation::IEventHandler<IInspectable *> *,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &,IPrivilegedForegroundOperations *);
	virtual bool ContainsView(IApplicationView *);
	virtual bool IsEmpty();
	virtual bool IsWindowRelevantForTemplate(IApplicationView *,HWND__ *);
	virtual long AddView(IApplicationView *);
	virtual long ApplyTemplateToAllViews(IApplicationView *);
	virtual long Destroy();
	virtual long GetPendingSelectedView(IApplicationView * *);
	virtual long GetSelectedView(IApplicationView * *);
	virtual long OnBringingViewToForeground(IApplicationView *);
	virtual long OnTemplateAppliedToWindow(IApplicationView *,HWND__ *,TRACKED_WINDOW_STATE,TRACKED_WINDOW_STATE,tagRECT const &,tagRECT const &);
	virtual long OnTitleBarsCreated();
	virtual long OnTitleBarsLost();
	virtual long RemoveView(IApplicationView *,SelectedViewRemovalBehavior);
	virtual long SelectView(IApplicationView *,ViewGroupSelectViewReason);
	virtual unsigned __int64 GetCount();
};

class ViewGroupManager
{
	wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> GetApplicableViewGroup(IApplicationView *,HWND__ *);
	wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> GetViewGroup(IApplicationView *);
public:
	ViewGroupManager(ITitleBarController *,ITabViewManager *);
	virtual long CreateViewGroup(Windows::Internal::ComposableShell::Tabs::ShellTabGroupId,Windows::Foundation::IEventHandler<IInspectable *> *,IViewGroup * *);
	virtual long DestroyViewGroup(IViewGroup *);
	virtual long Initialize(IServiceProvider *,IPrivilegedWindowGroupingOperations *,IPrivilegedForegroundOperations *);
	virtual long OnBringingViewToForeground(IApplicationView *);
	virtual long OnTitleBarsCreated();
	virtual long OnTitleBarsLost();
	virtual long OnViewPositionChanged(IApplicationView *,TRACKED_WINDOW_STATE);
	virtual long Shutdown();
	virtual void OnGroupWindowTemplateApplied(HWND__ *,unsigned long,unsigned long,tagRECT,tagRECT);
	virtual ~ViewGroupManager();
};

struct ViewHandledEventArgs
{
	virtual long get_Handled(unsigned char *);
};

struct ViewHostItemEventArgs
{
	ViewHostItemEventArgs();
};

struct ViewHostItemEventArgsBase
{
	ViewHostItemEventArgsBase();
	virtual long get_EventContext(Windows::Foundation::Collections::IPropertySet * *);
	virtual long get_EventType(Windows::Internal::Shell::Holographic::ViewHostItemEventType *);
};

struct ViewHostItemPropertyChangedArgs
{
	ViewHostItemPropertyChangedArgs();
	virtual long get_PropertyKey(HSTRING__ * *);
};

namespace ViewHostTelemetry
{
	long SendAppSwitchTelemetry(ISwitchItem *,PerfTrack::SwitchLocation,PerfTrack::SwitchInvokeMethod);
};

struct ViewHostViewModeChangeRequestedEventArgs
{
	ViewHostViewModeChangeRequestedEventArgs();
	virtual long get_Mode(Windows::Internal::Shell::Holographic::ViewMode *);
};

class ViewManagerBridge
{
	long CloseOrphanedShellWindows(CCoSimpleArray<RecoveredViewInfo,4294967294,CSimpleArrayStandardCompareHelper<RecoveredViewInfo> > const &);
	long OnRequestApplicationViewSwitcherOperation(unsigned int,unsigned int,Windows::Foundation::Collections::IPropertySet *);
	long RaiseViewPropertyChanged(IMessageMap *,MsgString *);
	void InitializeAndRunCoreUiMessageLoop();
	void UninitializeAndTerminateCoreUiMessageLoop();
public:
	ViewManagerBridge();
	long GetShellWindowIdForView(Navigation::Server::IShellView *,Navigation::WindowType *,unsigned int *);
	long RuntimeClassInitialize(ViewEventDispatcher *);
	long WaitForViewManagerConnection();
	virtual bool GetCanViewHandleCloseRequest(IUnknown *);
	virtual long AddWindowToView(IUnknown *,unsigned int);
	virtual long CloseServerWindow(unsigned int);
	virtual long CreateNewViewForWindow(HWND__ *,unsigned short const *,unsigned int *);
	virtual long GetAppUserModelIdForView(IUnknown *,MsgString * *);
	virtual long GetHostIdForView(IUnknown *,unsigned __int64 *);
	virtual long GetHostViewInstanceIdForView(IUnknown *,unsigned int *);
	virtual long GetNavigationLevelForView(IUnknown *,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel *);
	virtual long GetProcessIdForView(IUnknown *,unsigned int *);
	virtual long GetSplashScreenDismissed(IUnknown *,bool *);
	virtual long GetViewClientExtensionMapPropertyAsBool(IUnknown *,HSTRING__ *,unsigned char *);
	virtual long GetViewClientExtensionMapPropertyAsInt(IUnknown *,HSTRING__ *,int *);
	virtual long GetViewClientExtensionMapPropertyAsUInt(IUnknown *,HSTRING__ *,unsigned int *);
	virtual long GetWindowResizingStateForView(IUnknown *,Windows::Internal::Shell::ViewManagerInterop::WindowResizingState *);
	virtual long OnAdded(IMessageList *,int,IUnknown *);
	virtual long OnAdded(IMessageMap *,MsgString *,IUnknown *);
	virtual long OnClear(IMessageList *);
	virtual long OnClear(IMessageMap *);
	virtual long OnCloseRequestedComplete(unsigned int,bool);
	virtual long OnConnected(IMessageProxy *);
	virtual long OnDisconnected(IMessageProxy *);
	virtual long OnLayoutCompleted(unsigned int);
	virtual long OnNavigateAwayFromView(unsigned int,Navigation::ViewNavigationLevel);
	virtual long OnNavigateToViewFailed(unsigned int,int);
	virtual long OnPropertyChanged(IMessageProxy *,unsigned short);
	virtual long OnRemoved(IMessageList *,int,IUnknown *);
	virtual long OnRemoved(IMessageMap *,MsgString *,IUnknown *);
	virtual long OnReplaced(IMessageList *,int,IUnknown *,IUnknown *);
	virtual long OnReplaced(IMessageMap *,MsgString *,IUnknown *,IUnknown *);
	virtual long OnRequestBeginPresentView(unsigned int,bool);
	virtual long OnRequestClearPersistedState(unsigned int,MsgString *);
	virtual long OnRequestConsolidateView(unsigned int);
	virtual long OnRequestEndPresentView(unsigned int,bool,Navigation::Direction,Navigation::AnimationType,Navigation::AnimationFlags);
	virtual long OnRequestHideStatusBar(unsigned int);
	virtual long OnRequestNavigateToView(unsigned int,unsigned int,Navigation::ViewActivationFlags,unsigned __int64,MsgBlob *);
	virtual long OnRequestShowStandardSystemOverlays(unsigned int);
	virtual long OnRequestShowStatusBar(unsigned int);
	virtual long OnServerWindowCreated(unsigned int,int);
	virtual long OnShutdownComplete();
	virtual long OnSystemKeyClientPressed(unsigned int,Navigation::SystemKey,bool);
	virtual long OnSystemKeyPressedComplete(unsigned int,Navigation::SystemKey,bool);
	virtual long OnUIAConnectComplete(unsigned int,MsgString *,int);
	virtual long OnUserLogoffComplete(unsigned __int64);
	virtual long OnViewLimitReached();
	virtual long RemoveWindowFromView(IUnknown *,unsigned int);
	virtual long RequestCloseForView(unsigned int);
	virtual long SetHolographicActivationForTokenView(unsigned int,bool);
	virtual long SetHostViewInstanceIdForView(IUnknown *,unsigned int);
	virtual long TryBackForView(IUnknown *);
	virtual void ChangeActivationTimeoutDisabled(IUnknown *,bool);
	virtual void CloseViewForScenario(unsigned int,IUnknown *,ViewCloseScenario);
	virtual void ConsolidateView(IUnknown *,bool);
	virtual void EnableInput(IUnknown *,bool);
	virtual void MarkViewNoPointerActivate(IUnknown *,bool);
	virtual void NavigateView(unsigned int,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	virtual void ResumeAndNavigateView(unsigned int,unsigned int,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	virtual void SetBoundsForView(IUnknown *,tagRECT const &,APPLICATION_VIEW_DATA const &);
	virtual void SetDehydrationPolicyForView(IUnknown *,Windows::Internal::Shell::ViewManagerInterop::DehydrationPolicy);
	virtual void SetImportanceVectorForView(IUnknown *,unsigned int);
	virtual void SetMainViewStatusForView(IUnknown *,bool);
	virtual void SetSplashScreenDismissed(IUnknown *,bool);
	virtual void SetSplashScreenRect(IUnknown *,Windows::Foundation::Rect const &);
	virtual void SetWindowResizingStateForView(IUnknown *,Windows::Internal::Shell::ViewManagerInterop::WindowResizingState);
	virtual void Shutdown();
	virtual void TransferRecoveredViews(CCoSimpleArray<RecoveredViewInfo,4294967294,CSimpleArrayStandardCompareHelper<RecoveredViewInfo> > *);
	virtual void UpdateEngagementFlagsForView(IUnknown *,Windows::Internal::Shell::ViewManagerInterop::ViewEngagementFlags,Windows::Internal::Shell::ViewManagerInterop::ViewEngagementFlags);
	virtual ~ViewManagerBridge();
};

struct ViewManagerInteropTabTraceLogging
{
	static bool IsEnabled(unsigned char,unsigned __int64);
	void WindowEventDispatcher_PendingActivationPropertySetAdded_(Windows::Foundation::Collections::IPropertySet *);
};

struct ViewManagerInteropTelemetry
{
	static void ViewManagerViewLimitReached();
};

class ViewManagerInteropTraceLogging
{
	class AddSessionIdleTaskCompletion
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long);
		~AddSessionIdleTaskCompletion();
	};

	class AddWindowToView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long,unsigned long);
		~AddWindowToView();
	};

	class CloseOrphanedShellViews
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CloseOrphanedShellViews();
	};

	class CloseUnRecoveredViews
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CloseUnRecoveredViews();
	};

	class ConnectToViewManager
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ConnectToViewManager();
	};

	class ConnectToWindowManager
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ConnectToWindowManager();
	};

	class CrashRecovery
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(unsigned long,unsigned long);
		~CrashRecovery();
	};

	class GetShellWindowIdForView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *);
		void WindowId<unsigned int &>(unsigned int &);
		~GetShellWindowIdForView();
	};

	class GetViewClientExtensionMapPropertyAsBool
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *,unsigned short const *);
		void Value<bool &>(bool &);
		~GetViewClientExtensionMapPropertyAsBool();
	};

	class GetViewClientExtensionMapPropertyAsInt
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *,unsigned short const *);
		void Value<int &>(int &);
		~GetViewClientExtensionMapPropertyAsInt();
	};

	class GetViewClientExtensionMapPropertyAsUInt
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *,unsigned short const *);
		void Value<unsigned int &>(unsigned int &);
		~GetViewClientExtensionMapPropertyAsUInt();
	};

	class HandleViewCreated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long);
		~HandleViewCreated();
	};

	class HandleWindowCreated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *,unsigned long);
		~HandleWindowCreated();
	};

	class OnAdded
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *);
		~OnAdded();
	};

	class OnCloseRequestedComplete
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long,bool);
		~OnCloseRequestedComplete();
	};

	class OnConnected
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~OnConnected();
	};

	class OnRemoved
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *);
		~OnRemoved();
	};

	class OnRequestApplicationViewSwitcherOperation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long,unsigned long);
		void SwitchAsync<unsigned int &,unsigned int &,unsigned int &>(unsigned int &,unsigned int &,unsigned int &);
		void TryShowAsStandaloneAsync<unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned __int64 &>(unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned __int64 &);
		void TryShowAsViewModeAsync<unsigned int &,unsigned int &,unsigned int &,unsigned int &,float &,float &>(unsigned int &,unsigned int &,unsigned int &,unsigned int &,float &,float &);
		~OnRequestApplicationViewSwitcherOperation();
	};

	class OnRequestBeginPresentView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long,bool);
		~OnRequestBeginPresentView();
	};

	class OnRequestConsolidateView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long);
		~OnRequestConsolidateView();
	};

	class OnRequestEndPresentView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long,bool);
		~OnRequestEndPresentView();
	};

	class OnRequestNavigateToView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long,unsigned long,unsigned long);
		~OnRequestNavigateToView();
	};

	class OnSystemKeyPressedComplete
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long,unsigned long,bool);
		~OnSystemKeyPressedComplete();
	};

	class PdcNotificationCallback
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(int);
		~PdcNotificationCallback();
	};

	class RaiseViewPropertyChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~RaiseViewPropertyChanged();
	};

	class RemoveSessionIdleTaskCompletion
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long);
		~RemoveSessionIdleTaskCompletion();
	};

	class RemoveWindowFromView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long,unsigned long);
		~RemoveWindowFromView();
	};

	class RequestNavigateToView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long,unsigned long,unsigned long,int);
		~RequestNavigateToView();
	};

	class WindowEventDispatcher_AppViewActivationRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~WindowEventDispatcher_AppViewActivationRequested();
	};

protected:
	void Create();
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static void CloseServerWindow<unsigned int &>(unsigned int &);
	static void CommitImportanceVector<unsigned int const &,_RM_ACTIVITY_IMPORTANCE const &>(unsigned int const &,_RM_ACTIVITY_IMPORTANCE const &);
	static void FrameWindowChanged<unsigned int &,HWND__ * &,unsigned long const &,unsigned long &>(unsigned int &,HWND__ * &,unsigned long const &,unsigned long &);
	static void HostedViewClosingTimeoutWaitExceeded<unsigned long &>(unsigned long &);
	static void PendingActivationFind<unsigned __int64 &,unsigned short const (&)[9]>(unsigned __int64 &,unsigned short const (&)[9]);
	static void RequestCloseForView<unsigned int &>(unsigned int &);
	static void SessionIdleStateChange<int &>(int &);
	static void SessionIdleTaskCompletionAdded<unsigned int &,HWND__ * const &,unsigned long &>(unsigned int &,HWND__ * const &,unsigned long &);
	static void SessionIdleTaskCompletionRemoved<unsigned int &>(unsigned int &);
	static void ShellPriorityChanged<unsigned __int64 &>(unsigned __int64 &);
	static void Shutdown();
	static void TryBackForView<unsigned int &>(unsigned int &);
	static void ViewManagerDisconnectClientError();
	static void ViewManagerDisconnectServerError();
	static void ViewManagerDisconnectShutdown();
	static void ViewRecovered<unsigned long const &,int &,unsigned long &>(unsigned long const &,int &,unsigned long &);
	static void ViewWrapperCreated<unsigned int &,unsigned short const * &,unsigned short const * &>(unsigned int &,unsigned short const * &,unsigned short const * &);
	static void WindowCreated<unsigned int &,HWND__ * &,unsigned long const &,unsigned long &>(unsigned int &,HWND__ * &,unsigned long const &,unsigned long &);
	static void WindowDestroyed<unsigned int &,HWND__ * &>(unsigned int &,HWND__ * &);
	static void WindowEventDispatcher_AppViewWatcherStarted();
	static void WindowEventDispatcher_ConnectedToWindowManager();
	static void WindowEventDispatcher_OnAppViewRemoved<unsigned int &>(unsigned int &);
	static void WindowEventDispatcher_OnAppViewShowRequested<unsigned int &,unsigned int &>(unsigned int &,unsigned int &);
	static void WindowEventDispatcher_OnAppViewWatcherStopped();
	static void WindowEventDispatcher_OnHandlingWindowWatcherStopped();
	static void WindowEventDispatcher_OnWindowRemoved<unsigned int &>(unsigned int &);
	static void WindowEventDispatcher_TryShowAsStandaloneAsync<unsigned int &,unsigned int &>(unsigned int &,unsigned int &);
	static void WindowEventDispatcher_TryShowAsViewModeAsync<unsigned int &,unsigned int &>(unsigned int &,unsigned int &);
	static void WindowEventDispatcher_UnregisteringForWindowEvents();
	static void WindowEventDispatcher_WindowManagerWatcherConnected();
	static void WindowEventDispatcher_WindowManagerWatcherDisconnected();
	static void WindowEventDispatcher_WindowWatcherStarted();
	static void WindowReadiness_ExtraPositionAcknowledgment<HWND__ * &>(HWND__ * &);
	static void WindowReadiness_PendingPositionAdded<HWND__ * const &,unsigned __int64 &,long const &,long const &>(HWND__ * const &,unsigned __int64 &,long const &,long const &);
	static void WindowReadiness_PendingPositionRemoved<HWND__ * const &,unsigned __int64 &>(HWND__ * const &,unsigned __int64 &);
	void CommitImportanceVector_(unsigned long,_RM_ACTIVITY_IMPORTANCE const &);
};

namespace ViewModePreferencesHelpers
{
	long SetSizeHintHeight(Windows::Internal::ShellHelpers::PropertySetHelper &,float);
	long SetSizeHintWidth(Windows::Internal::ShellHelpers::PropertySetHelper &,float);
	long SetTargetPresenterKind(Windows::Internal::ShellHelpers::PropertySetHelper &,Windows::Internal::ApplicationModel::WindowingEnvironment::ApplicationWindowPresenterKindInternal);
	long SetTargetViewMode(Windows::Internal::ShellHelpers::PropertySetHelper &,Windows::UI::ViewManagement::ApplicationViewMode);
};

class ViewPresentationMediator
{
	long EnableShellWindowManagementBehavior();
public:
	ViewPresentationMediator();
	long RuntimeClassInitialize();
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long OnShowWindowPolicy(HWND__ *,unsigned int,unsigned long *,tagRECT *);
	virtual long RegisterForShowMoveSizeEvents(IWindowManagementShowMoveSizeEvents *,unsigned long *);
	virtual long RegisterForWindowGroupingEvents(IWindowManagementWindowGroupingEvents *,unsigned long *);
	virtual long SetShellCloak(HWND__ *,__MIDL___MIDL_itf_privilegedoperations_0000_0002_0001);
	virtual long SetShellWindowManagementScenario(WINDOW_MANAGEMENT_BEHAVIOR_SCENARIO,WINDOW_MANAGEMENT_BEHAVIOR_SCENARIO);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterForShowMoveSizeEvents(unsigned long);
	virtual long UnregisterForWindowGroupingEvents(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void OnChannelSever();
	virtual void OnCuratedWindowHidden(HWND__ *);
	virtual void OnGroupWindowTemplateApplied(HWND__ *,unsigned long,unsigned long,tagRECT,tagRECT);
	virtual void OnMoveSizeAttempted(IApplicationView *,unsigned long);
	virtual void OnShellTrackedWindowPosChanged(HWND__ *,IApplicationView *,int,unsigned long,tagRECT);
	virtual ~ViewPresentationMediator();
};

namespace ViewSizePreferenceHelpers
{
	APPLICATION_VIEW_SIZE_PREFERENCE GetTargetViewSizePreferenceOrDefault(IUnknown *);
	bool IsPropertySetEmpty(Windows::Foundation::Collections::IPropertySet *);
	bool TryGetSourceViewSizePreference(IUnknown *,APPLICATION_VIEW_SIZE_PREFERENCE &,HWND__ * &);
	long GetGroupingPreferenceFromPropertySet(Windows::Internal::ShellHelpers::PropertySetHelper &,unsigned int *);
	long GetTargetViewSizePreferenceFromPropertySet(Windows::Foundation::Collections::IPropertySet *,APPLICATION_VIEW_SIZE_PREFERENCE *);
	long GetViewValueSetFromSite(IUnknown *,Windows::Foundation::Collections::IPropertySet * *);
	long SetSourceViewSizePreference(Windows::Internal::ShellHelpers::PropertySetHelper &,HWND__ *,APPLICATION_VIEW_SIZE_PREFERENCE);
	long SetTargetViewSizePreference(Windows::Internal::ShellHelpers::PropertySetHelper &,APPLICATION_VIEW_SIZE_PREFERENCE);
	long SetViewValueSet(IUnknown *,Windows::Foundation::Collections::IPropertySet *);
};

struct ViewSizePreferencesChangedEventArgs
{
	ViewSizePreferencesChangedEventArgs();
	virtual long ResizeAttemptHonored();
	virtual long get_RequestedSize(Windows::Foundation::Size *);
};

class ViewWrapperBase
{
	APPLICATION_VIEW_DATA s_ComputeAggregatedViewData(APPLICATION_VIEW_DATA const &,HostViewStateOverrides const &);
	long _ReconcileSessionIdleTaskCompletion();
	void CommitActivationTimeoutPolicy();
	void NotifyGlobalComponentsForWindowStateChange(HWND__ *,ViewWrapperBase::WindowChange);
	void PropagateViewStateOverridesToComponentsIfNecessary(APPLICATION_VIEW_DATA const &,APPLICATION_VIEW_DATA const &);
	void PushDesiredBoundsToView(APPLICATION_VIEW_DATA const &);
	void PushDesiredNavigationLevelToDerivedClass();
	void PushDesiredPositionToWindow(PositioningTypeFlags);
	void PushDesiredZbidToWindow();
	void SetDesiredPosition(int,int,int,int,PositioningTypeFlags,APPLICATION_VIEW_DATA const *);
protected:
	virtual void v_OnViewCreated();
	virtual void v_OnViewDestroyed();
	virtual void v_OnViewVisibilityChanged(EventPhase,Visibility);
	virtual void v_OnWindowCreated(WindowCreatedType);
	virtual void v_OnWindowDestroyed();
	void CommitImportanceVector();
	void NavigateInternal(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	void NotifyReadyForPresentationChanged(bool);
public:
	ViewWrapperBase();
	long RuntimeClassInitialize(unsigned int,IUnknown *,unsigned short const *,unsigned short const *,ViewEventDispatcher *);
	virtual HWND__ * GetFrameWindow();
	virtual HWND__ * GetWindow();
	virtual HostViewStateOverrides GetHostViewStateOverrides();
	virtual StateChangeResult ChangePopupUIShowingCount(PopupCountOperation,unsigned __int64);
	virtual StateChangeResult ChangeSuppressPopupsCount(PopupCountOperation,unsigned __int64);
	virtual Windows::Internal::Shell::ViewManagerInterop::NavigationLevel GetDesiredNavigationLevel();
	virtual bool IsEqualByAppId(unsigned short const *);
	virtual bool IsEqualByExperienceId(unsigned short const *);
	virtual bool IsEqualByHostId(unsigned __int64);
	virtual bool SetNavigationLevelOverride(NavigationLevelOverride);
	virtual long AddPopupPropertyChangedListener(Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler *,EventRegistrationToken *);
	virtual long ApproveWinRtActivation(Windows::Foundation::Collections::IPropertySet *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	virtual long BeginWinRtActivation(unsigned int);
	virtual long BoostPriority();
	virtual long ChangeBounds(Windows::Internal::Shell::ViewManagerInterop::ViewBounds);
	virtual long ChangeDisplay(unsigned __int64);
	virtual long ChangeIsTitleBarVisible(unsigned char);
	virtual long ChangePropertyAsString(HSTRING__ *,HSTRING__ *);
	virtual long ChangePropertyAsUInt32(HSTRING__ *,unsigned int);
	virtual long ChangeTitleBarHeight(double);
	virtual long ChangeTitleBarInputRoutingHwnd(unsigned int);
	virtual long ChangeTitleBarInputRoutingInfo(Windows::Internal::Shell::ViewManagerInterop::InputRoutingInfo);
	virtual long ChangeTitleBarSystemOverlayLeftInset(double);
	virtual long ChangeTitleBarSystemOverlayRightInset(double);
	virtual long ChangeVisibleBounds(Windows::Foundation::Rect);
	virtual long Consolidate(Windows::Internal::Shell::ViewManagerInterop::ConsolidatedState);
	virtual long EnableInput(unsigned char);
	virtual long EnsurePositionOffset();
	virtual long GetLightweightProperty(unsigned short const *,unsigned long *);
	virtual long GetPropertyAsBoolean(HSTRING__ *,unsigned char *);
	virtual long GetPropertyAsInt(HSTRING__ *,int *);
	virtual long GetPropertyAsString(HSTRING__ *,HSTRING__ * *);
	virtual long GetPropertyAsUInt(HSTRING__ *,unsigned int *);
	virtual long Navigate(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	virtual long PersistPropertyAsUInt32(HSTRING__ *,unsigned int);
	virtual long RemovePopupPropertyChangedListener(EventRegistrationToken);
	virtual long RequestCloseAsync(Windows::Foundation::IAsyncOperation<Windows::Internal::Shell::ViewManagerInterop::AppRequestHandledResult> * *);
	virtual long SetActivationTimeoutPolicy(Windows::Internal::Shell::ViewManagerInterop::ActivationTimeoutPolicy);
	virtual long SetCustomResourceSet(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long SetDehydrationPolicy(Windows::Internal::Shell::ViewManagerInterop::DehydrationPolicy);
	virtual long SetForegroundWindow();
	virtual long SetForegroundWindowWithUipiBypass();
	virtual long SetFrameWindow(HWND__ *,__MIDL___MIDL_itf_ntuserviewmanagerinterop_0000_0002_0001);
	virtual long SetImportanceVector(unsigned int);
	virtual long SetImportanceVectorUsingMask(unsigned int,Windows::Internal::Shell::ViewManagerInterop::ImportanceMaskTypes);
	virtual long SetLightweightProperty(unsigned short const *,unsigned long);
	virtual long SetPosition(tagRECT const *);
	virtual long SetPositionAndViewData(tagRECT const *,APPLICATION_VIEW_DATA const *);
	virtual long SetShellCloak(__MIDL___MIDL_itf_privilegedoperations_0000_0002_0001);
	virtual long SetSize(Windows::Foundation::Size);
	virtual long SetWindowBand(unsigned long);
	virtual long SetWindowOwner(HWND__ *);
	virtual long TryBack(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs *> *);
	virtual long TryRecoverPropertyAsUInt32(HSTRING__ *,unsigned int *,unsigned char *);
	virtual long UnboostPriority();
	virtual long UpdateEngagementFlags(Windows::Internal::Shell::ViewManagerInterop::ViewEngagementFlags,Windows::Internal::Shell::ViewManagerInterop::ViewEngagementFlags);
	virtual long add_ClientWindowLayoutCompleted(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_ClientWindowPrepareForPresentationChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowPrepareForPresentationChangedEventArgs *> *,EventRegistrationToken *);
	virtual long add_ClientWindowReadyForPresentationChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> *,EventRegistrationToken *);
	virtual long add_TouchInputRoutingInfoChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_AppUserModelId(HSTRING__ * *);
	virtual long get_ApplicationDisplayName(HSTRING__ * *);
	virtual long get_Bounds(Windows::Internal::Shell::ViewManagerInterop::ViewBounds *);
	virtual long get_CanHandleCloseRequest(unsigned char *);
	virtual long get_ClientWindow(unsigned int *);
	virtual long get_ClientWindowReadyForPresentation(unsigned char *);
	virtual long get_Consolidated(Windows::Internal::Shell::ViewManagerInterop::ConsolidatedState *);
	virtual long get_CurrentOrientation(Windows::Internal::Shell::ViewManagerInterop::Orientations *);
	virtual long get_ExperienceId(HSTRING__ * *);
	virtual long get_FrameStyle(unsigned int *);
	virtual long get_HostId(unsigned __int64 *);
	virtual long get_IsOccluded(unsigned char *);
	virtual long get_IsStatusBarBackgroundColorSet(unsigned char *);
	virtual long get_IsStatusBarForegroundColorSet(unsigned char *);
	virtual long get_IsTitleBarBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonHoverBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonHoverTextColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonPressedBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonPressedTextColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonTextColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarInactiveBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarInactiveButtonBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarInactiveButtonTextColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarInactiveTextColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarInputVisualSet(unsigned char *);
	virtual long get_IsTitleBarTextColorOverrideSet(unsigned char *);
	virtual long get_IsViewExtendedIntoTitleBar(unsigned char *);
	virtual long get_NavigationLevel(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel *);
	virtual long get_PointerActivationPolicy(Windows::Internal::Shell::ViewManagerInterop::PointerActivationPolicy *);
	virtual long get_PreferredMinSize(Windows::Foundation::Size *);
	virtual long get_ProcessId(unsigned int *);
	virtual long get_StatusBarBackgroundColor(Windows::UI::Color *);
	virtual long get_StatusBarBackgroundOpacity(double *);
	virtual long get_StatusBarForegroundColor(Windows::UI::Color *);
	virtual long get_StatusBarOccludedRect(Windows::Foundation::Rect *);
	virtual long get_SupportedOrientations(Windows::Internal::Shell::ViewManagerInterop::Orientations *);
	virtual long get_TitleBarBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonHoverBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonHoverTextColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonPressedBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonPressedTextColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonTextColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarInactiveBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarInactiveButtonBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarInactiveButtonTextColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarInactiveTextColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarTextColorOverride(Windows::UI::Color *);
	virtual long get_TitlebarVisibilityMode(unsigned int *);
	virtual long get_TouchInputRoutingInfo(Windows::Internal::Shell::ViewManagerInterop::InputRoutingInfo *);
	virtual long get_UserContextToken(unsigned __int64 *);
	virtual long get_ViewFrameworkViewType(Windows::Internal::Shell::ViewManagerInterop::ViewFrameworkViewType *);
	virtual long get_ViewInstanceId(unsigned int *);
	virtual long get_VisibilityRevoked(unsigned char *);
	virtual long get_WindowResizingState(Windows::Internal::Shell::ViewManagerInterop::WindowResizingState *);
	virtual long get_WindowTitle(HSTRING__ * *);
	virtual long put_CurrentOrientation(Windows::Internal::Shell::ViewManagerInterop::Orientations);
	virtual long put_FrameStyle(unsigned int);
	virtual long put_IsOccluded(unsigned char);
	virtual long put_PointerActivationPolicy(Windows::Internal::Shell::ViewManagerInterop::PointerActivationPolicy);
	virtual long put_StatusBarOccludedRect(Windows::Foundation::Rect);
	virtual long put_TitlebarVisibilityMode(unsigned int);
	virtual long put_VisibilityRevoked(unsigned char);
	virtual long put_WindowResizingState(Windows::Internal::Shell::ViewManagerInterop::WindowResizingState);
	virtual long remove_ClientWindowLayoutCompleted(EventRegistrationToken);
	virtual long remove_ClientWindowPrepareForPresentationChanged(EventRegistrationToken);
	virtual long remove_ClientWindowReadyForPresentationChanged(EventRegistrationToken);
	virtual long remove_TouchInputRoutingInfoChanged(EventRegistrationToken);
	virtual unsigned __int64 GetSuppressPopupsCount();
	virtual unsigned int GetHostViewInstanceId();
	virtual unsigned int GetProcessId();
	virtual unsigned int GetViewInstanceId();
	virtual unsigned short const * GetExperienceId();
	virtual void AddSessionIdleTaskCompletion();
	virtual void HandlePresentationReadinessChange(unsigned __int64);
	virtual void HostNavigationLevelChanged(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	virtual void HostViewStateOverridesChanged(HostViewStateOverrides const &);
	virtual void NotifyHostChanged();
	virtual void OperationRequestComplete(ViewOperationRequestType,Windows::Internal::Shell::ViewManagerInterop::AppRequestHandledResult);
	virtual void RemoveSessionIdleTaskCompletion();
	virtual void SetFocusState(FocusState);
	virtual void SetHostViewInstanceId(unsigned int);
	virtual void SetRegistration(ViewEventRegistration *,ViewInitializationScenario);
	virtual void ViewCreated(IUnknown *);
	virtual void ViewDestroyed();
	virtual void ViewUnrecovered();
	virtual void VisibilityChanged(EventPhase,Visibility);
	virtual void WindowCreated(HWND__ *,WindowCreatedType);
	virtual void WindowDestroyed(HWND__ *);
	~ViewWrapperBase();
};

class VirtualDesktop
{
	class VirtualDesktopTelemetry
	{
		class VirtualDesktopCreatedActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(IVirtualDesktop *,IVirtualDesktopCollection *);
			~VirtualDesktopCreatedActivity();
		};

		class VirtualDesktopDestroyedActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(IVirtualDesktop *,IVirtualDesktop *);
			~VirtualDesktopDestroyedActivity();
		};

		class VirtualDesktopPTPGestureActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(PTPGestureEndState);
			~VirtualDesktopPTPGestureActivity();
		};

		class VirtualDesktopPinAppActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(unsigned short const *,IVirtualDesktop *);
			~VirtualDesktopPinAppActivity();
		};

		class VirtualDesktopPinWindowActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(IApplicationView *,IVirtualDesktop *);
			~VirtualDesktopPinWindowActivity();
		};

		class VirtualDesktopSetNameActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(IVirtualDesktop *,bool);
			~VirtualDesktopSetNameActivity();
		};

		class VirtualDesktopSwitchedActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(IVirtualDesktop *,IVirtualDesktop *);
			~VirtualDesktopSwitchedActivity();
		};

		class VirtualDesktopUnpinAppActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(unsigned short const *,IVirtualDesktop *);
			~VirtualDesktopUnpinAppActivity();
		};

		class VirtualDesktopUnpinWindowActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(IApplicationView *,IVirtualDesktop *);
			~VirtualDesktopUnpinWindowActivity();
		};

		class VirtualDesktopViewMovedActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(IApplicationView *,IVirtualDesktop *);
			~VirtualDesktopViewMovedActivity();
		};

		static unsigned short const * CensorAppID(unsigned short const *);
	};

	long CalculateDesktopIndex();
	long UpdateDesktopIndex();
public:
	VirtualDesktop();
	long RuntimeClassInitialize(IVirtualDesktop *,IThumbnailDeviceSource *,IVirtualDesktopManagerInternal *,IVirtualDesktopNotificationService *);
	virtual Microsoft::WRL::ComPtr<IVirtualDesktop> GetDesktop();
	virtual long CreateBackgroundThumbnailVisualFactory(Windows::Foundation::Rect,Windows::Internal::ComposableShell::Multitasking::IThumbnailFactory * *);
	virtual long CreateThumbnailVisualFactory(Windows::Foundation::Rect,Windows::Internal::ComposableShell::Multitasking::IThumbnailFactory * *);
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *,IVirtualDesktop *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ViewVirtualDesktopChanged(IApplicationView *);
	virtual long VirtualDesktopCreated(IVirtualDesktop *);
	virtual long VirtualDesktopDestroyed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopNameChanged(IVirtualDesktop *,HSTRING__ *);
	virtual long add_VirtualDesktopChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Internal::ComposableShell::Multitasking::VirtualDesktopProperty> *,EventRegistrationToken *);
	virtual long get_IsActive(unsigned char *);
	virtual long get_Name(HSTRING__ * *);
	virtual long remove_VirtualDesktopChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~VirtualDesktop();
};

class VirtualDesktopAcessibility
{
	long RecalculateDesktopName();
public:
	VirtualDesktopAcessibility();
	long RuntimeClassInitialize(_TABLETMODESTATE,IVirtualDesktopNotificationServicePrivate *,IVirtualDesktopCollection *,IVirtualDesktopManagerPrivate *,IVirtualDesktopLock *);
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *,IVirtualDesktop *);
	virtual long GetCurrentDesktopName(unsigned short * *);
	virtual long VirtualDesktopCreated(IVirtualDesktop *);
	virtual long VirtualDesktopDestroyed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopNameChanged(IVirtualDesktop *,HSTRING__ *);
	virtual void Shutdown();
};

class VirtualDesktopAddAnimationCoordinator
{
protected:
	virtual bool ShouldAnimateAddForType(AnimationCoordinatorItemType);
	virtual bool ShouldAnimateMoveForType(AnimationCoordinatorItemType,bool *);
	virtual bool ShouldAnimateShowForType(AnimationCoordinatorItemType);
	virtual void AnimateAddedElement(ItemAnimationCoordinatorBase::ComponentInfo const &);
	virtual void AnimatePositionChanged(ItemAnimationCoordinatorBase::PositionChangedInfo const &);
	virtual void AnimateShownElement(ItemAnimationCoordinatorBase::ComponentInfo const &);
};

struct VirtualDesktopAnimationSyncNotificationInstance
{
	VirtualDesktopAnimationSyncNotificationInstance();
	long RuntimeClassInitialize(IVirtualDesktop *,IVirtualDesktop *,IObjectArray *,unsigned long);
	virtual void NotifySuccessfulSwitch();
};

struct VirtualDesktopAnimationSyncNotifications
{
	VirtualDesktopAnimationSyncNotifications();
	virtual long BeginAnimatedSwitch(IVirtualDesktop *,IVirtualDesktop *,IVirtualDesktopAnimationNotificationInstance * *);
	virtual long Register(IVirtualDesktopAnimationSyncNotification *,unsigned long *);
	virtual long Unregister(unsigned long);
};

struct VirtualDesktopCollectionChangedEventArgs
{
	VirtualDesktopCollectionChangedEventArgs();
	virtual long get_Desktop(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop * *);
	virtual long get_EventType(Windows::Internal::ComposableShell::Multitasking::VirtualDesktopCollectionChangedEventType *);
};

class VirtualDesktopController
{
	long GetApplicationViewFromSwitchItem(Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,IApplicationView * *);
	unsigned int NavDirFromFocusNavigationDirection(Windows::UI::Xaml::Input::FocusNavigationDirection);
public:
	VirtualDesktopController();
	virtual long CanSwitchItemMoveDesktops(Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,unsigned char *);
	virtual long CreateDesktopW(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop * *);
	virtual long GetAdjacentDesktop(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::UI::Xaml::Input::FocusNavigationDirection,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Initialize(IVirtualDesktopPinnedApps *,IVirtualDesktopManagerInternal *,IVirtualDesktopNotificationService *,IVirtualDesktopDataSourceInternal *,ITabViewManager *);
	virtual long IsSwitchItemPinnedToAllDesktops(Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,unsigned char *);
	virtual long IsSwitchItemViewPinnedToAllDesktops(Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,unsigned char *);
	virtual long IsSwitchItemVisibleOnDesktop(Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,unsigned char *);
	virtual long MoveSwitchItemToDesktop(Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *);
	virtual long PinUnPinSwitchItemToAllDesktops(Windows::Internal::ComposableShell::Multitasking::ISwitchItem *);
	virtual long PinUnPinSwitchItemViewToAllDesktops(Windows::Internal::ComposableShell::Multitasking::ISwitchItem *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveDesktop(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *);
	virtual long SetDesktopName(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,HSTRING__ *);
	virtual long SwitchToDesktop(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void Uninitialize();
};

class VirtualDesktopDataSource
{
	long GetWinRTDesktopForInternalDesktopInternal(IVirtualDesktop *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop * *);
	void UninitializeInternal();
public:
	VirtualDesktopDataSource();
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *,IVirtualDesktop *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetWinRTDesktopForInternalDesktop(IVirtualDesktop *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop * *);
	virtual long Initialize(IVirtualDesktopManagerInternal *,IVirtualDesktopNotificationService *);
	virtual long PreCreateThumbnailDevice();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long VirtualDesktopCreated(IVirtualDesktop *);
	virtual long VirtualDesktopDestroyed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long add_VirtualDesktopCollectionChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs *> *,EventRegistrationToken *);
	virtual long get_CurrentVirtualDesktop(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop * *);
	virtual long get_VirtualDesktops(Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> * *);
	virtual long remove_VirtualDesktopCollectionChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void Uninitialize();
	virtual ~VirtualDesktopDataSource();
};

struct VirtualDesktopDataSourceComponent
{
	VirtualDesktopDataSourceComponent();
	long RuntimeClassInitialize();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class VirtualDesktopGestureContext
{
	long CreateAdjacentDesktop(bool *,unsigned int,int);
	void AddVelocityToHistory(int);
	void RemoveAdjacentThumbnails(unsigned int);
public:
	VirtualDesktopGestureContext(tagSIZE,IVirtualDesktopManagerInternal *,ISwitchThumbnailDeviceManager *,IApplicationViewCollection *,IImmersiveSettingsCache *,IImmersiveMonitorManager *);
	long Commit(IVirtualDesktopGestureHandlerPrivate *,int);
	long Initialize();
	void Uninitialize();
	void UpdateOffset(int,int);
};

class VirtualDesktopGestureHandler
{
	void DismissContextMenuIfPresent();
public:
	VirtualDesktopGestureHandler();
	virtual int CanBePreempted();
	virtual int CanPreemptOtherGestures();
	virtual long CancelSwipe();
	virtual long ContinueSwipe(int,int,int,int,unsigned int);
	virtual long DelayInitialize(ISwitchThumbnailDeviceManager *,IApplicationViewCollection *,IImmersiveSettingsCache *,IImmersiveMonitorManager *);
	virtual long FinishSwipe(int,int,int,int,unsigned int);
	virtual long StartSwipe(int,int,unsigned int,TOUCHPAD_GESTURE_CONTEXT);
	virtual void Cleanup();
};

class VirtualDesktopGestureWindow
{
	long CreateAdjacentDesktop(bool *,unsigned int,tagRECT);
	long GetTrayBitmapResult(TrayBitmapForVDThumbnailData const &,int,Geometry::CRect const &,CCoSimpleArray<Microsoft::WRL::ComPtr<IDCompThumbnail>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IDCompThumbnail> > > &);
	long MakeBackgroundThumbnail(CCoSimpleArray<Microsoft::WRL::ComPtr<IDCompThumbnail>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IDCompThumbnail> > > &,IDCompThumbnail * *);
	static void s_GetTrayBitmapResult(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	VirtualDesktopGestureWindow(IVirtualDesktopManagerInternal *,ISwitchThumbnailDeviceManager *,IApplicationViewCollection *,IImmersiveSettingsCache *,tagRECT const &,HMONITOR__ *);
	long Commit(IVirtualDesktopGestureHandlerPrivate *,float);
	long Initialize();
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~VirtualDesktopGestureWindow();
	void UpdateOffset(float);
};

class VirtualDesktopGroupedViewsEventListener
{
	long OnViewTabAssociated(Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::IViewTabEventArgs *);
	void TabAdded(winrt::Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher,winrt::Windows::Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs);
public:
	VirtualDesktopGroupedViewsEventListener();
	long RuntimeClassInitialize(ITabViewManager *,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter *,IInspectable *,IVirtualDesktopManagerPrivate *,IVirtualDesktopPinnedAppsPrivate *,IVirtualDesktopGroupedViewsPolicy *,IVirtualDesktopLock *);
	virtual ~VirtualDesktopGroupedViewsEventListener();
};

struct VirtualDesktopGuidFinder
{
	int Compare(Microsoft::WRL::ComPtr<IVirtualDesktop>,Microsoft::WRL::ComPtr<IVirtualDesktop>);
};

namespace VirtualDesktopHelpers
{
	long ConvertDesktopFilter(IObjectArray *,CCoSimpleArray<HWND__ *,4294967294,CSimpleArrayStandardCompareHelper<HWND__ *> > &);
	long GetFilterForDesktop(IVirtualDesktop *,IVirtualDesktopManagerInternal *,CCoSimpleArray<HWND__ *,4294967294,CSimpleArrayStandardCompareHelper<HWND__ *> > &,CCoSimpleArray<HWND__ *,4294967294,CSimpleArrayStandardCompareHelper<HWND__ *> > &);
};

class VirtualDesktopItem
{
	long _IsItemVisible(ISwitchItem *,bool *);
public:
	VirtualDesktopItem();
	virtual Microsoft::WRL::ComPtr<IVirtualDesktop> GetVirtualDesktop();
	virtual ObservableProperty<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > * GetTitle();
	virtual ObservableProperty<bool> * GetIsActive();
	virtual ObservableProperty<unsigned int> * GetIndex();
	virtual bool IsSwitchItemVisibleOnDesktop(ISwitchItem *);
	virtual long Close();
	virtual long SwitchTo();
	virtual ~VirtualDesktopItem();
};

class VirtualDesktopItemCollection
{
	long _AddDesktopItem(IVirtualDesktop *,unsigned int,bool);
	long _RemoveDesktopItem(IVirtualDesktop *);
	void _SetTitle(IVirtualDesktopItem *);
public:
	VirtualDesktopItemCollection();
	long RuntimeClassInitialize(IVirtualDesktopItemFactory *,IVirtualDesktopManagerInternal *,IVirtualDesktopNotificationService *);
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopCreated(IVirtualDesktop *);
	virtual long VirtualDesktopDestroyed(IVirtualDesktop *,IVirtualDesktop *);
	virtual void Destroy();
};

struct VirtualDesktopItemFactory
{
	virtual long CreateVirtualDesktopItem(IVirtualDesktop *,_GUID const &,void * *);
};

struct VirtualDesktopManagerSuspensionToken
{
	VirtualDesktopManagerSuspensionToken();
	long RuntimeClassInitialize(ISuspendableVirtualDesktopManager *);
};

struct VirtualDesktopNotificationBase<IVirtualDesktopNotification>
{
	VirtualDesktopNotificationBase<IVirtualDesktopNotification>();
};

struct VirtualDesktopNotificationForwarderHelper<CVirtualDesktopNotifications>
{
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *,IVirtualDesktop *);
	virtual long ViewVirtualDesktopChanged(IApplicationView *);
	virtual long VirtualDesktopCreated(IVirtualDesktop *);
	virtual long VirtualDesktopDestroyBegin(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyFailed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopNameChanged(IVirtualDesktop *,HSTRING__ *);
};

struct VirtualDesktopNotificationForwarderHelper<VirtualDesktopNotificationBaseHelper<IVirtualDesktopNotification2> >
{
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *,IVirtualDesktop *);
	virtual long ViewVirtualDesktopChanged(IApplicationView *);
	virtual long VirtualDesktopCreated(IVirtualDesktop *);
	virtual long VirtualDesktopDestroyBegin(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyFailed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopNameChanged(IVirtualDesktop *,HSTRING__ *);
};

struct VirtualDesktopNotificationForwarderHelper<VirtualDesktopNotificationBaseHelper<IVirtualDesktopNotification> >
{
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *,IVirtualDesktop *);
	virtual long ViewVirtualDesktopChanged(IApplicationView *);
	virtual long VirtualDesktopCreated(IVirtualDesktop *);
	virtual long VirtualDesktopDestroyBegin(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyFailed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyed(IVirtualDesktop *,IVirtualDesktop *);
};

class VirtualDesktopPersistence
{
	long GetVirtualDesktopRegKeyName(IVirtualDesktop *,unsigned short (&)[49]);
	long ReadPerDesktopData(IVirtualDesktop *,unsigned short const *,unsigned long,void * *,unsigned __int64 *);
	long WritePerDesktopData(IVirtualDesktop *,unsigned short const *,unsigned long,void const *,unsigned __int64);
	static unsigned short const * const s_perDesktopDataKeyName;
public:
	VirtualDesktopPersistence();
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *);
	virtual long RestoreVirtualDesktopState(_TABLETMODESTATE,IVirtualDesktopManagerPrivate *,IVirtualDesktopCollection *,IVirtualDesktopTabletModePolicy *);
	virtual long VirtualDesktopCollectionChanged(IVirtualDesktopCollection *);
	virtual long VirtualDesktopNameChanged(IVirtualDesktop *,HSTRING__ *);
	virtual long VirtualDesktopRemoved(IVirtualDesktop *);
};

struct VirtualDesktopRegistryHelpers
{
	VirtualDesktopRegistryHelpers();
	long RuntimeClassInitialize();
	virtual long EnumKeys(bool,unsigned short const *,CCoSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > > &);
	virtual long EnumValues(bool,unsigned short const *,CCoSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > > &);
	virtual long ReadData(bool,unsigned short const *,unsigned short const *,unsigned long,void * *,unsigned __int64 *);
	virtual long RemoveKey(bool,unsigned short const *);
	virtual long RemoveValue(bool,unsigned short const *,unsigned short const *);
	virtual long WriteData(bool,unsigned short const *,unsigned short const *,unsigned long,void const *,unsigned __int64);
};

class VirtualDesktopRemoveAnimationCoordinator
{
protected:
	virtual bool ShouldAnimateHideForType(AnimationCoordinatorItemType);
	virtual bool ShouldAnimateMoveForType(AnimationCoordinatorItemType,bool *);
	virtual void AnimateHiddenElement(ItemAnimationCoordinatorBase::ComponentInfo const &);
	virtual void AnimatePositionChanged(ItemAnimationCoordinatorBase::PositionChangedInfo const &);
public:
	VirtualDesktopRemoveAnimationCoordinator();
	long RuntimeClassInitialize(VirtualDesktopMetrics const &,int,ISwitchThumbnailFactory *);
};

class VirtualDesktopSwitchAnimator
{
	long AnimateOperation<IVirtualDesktop *,IVirtualDesktop *>(long ( IVirtualDesktopManagerPrivate::*)(IVirtualDesktop *,IVirtualDesktop *),IVirtualDesktop *,VirtualDesktopSwitchDirection,IVirtualDesktop *,IVirtualDesktop *);
	long AnimateOperation<IVirtualDesktop *>(long ( IVirtualDesktopManagerPrivate::*)(IVirtualDesktop *),IVirtualDesktop *,VirtualDesktopSwitchDirection,IVirtualDesktop *);
public:
	VirtualDesktopSwitchAnimator();
	long RuntimeClassInitialize(IVirtualDesktopManagerPrivate *,IVirtualDesktopAnimationSyncNotificationServicePrivate *);
	virtual long RemoveCurrentDesktop(IVirtualDesktop *,IVirtualDesktop *,VirtualDesktopSwitchDirection);
	virtual long SwitchDesktop(IVirtualDesktop *,VirtualDesktopSwitchDirection);
};

struct VirtualDesktopTabletModeNotificationListener
{
	long RuntimeClassInitialize(IVirtualDesktopTabletModePolicy *,IServiceProvider *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
};

class VirtualDesktopTabletModePolicy
{
	long TransitionToDesktopMode(IAppLayout *);
public:
	VirtualDesktopTabletModePolicy();
	virtual long TabletModeChanged(_TABLETMODESTATE,IAppLayout *);
	virtual long TabletModePositionerControlLost(IAppLayout *);
	virtual void PersistedStateRestored(IVirtualDesktop *);
};

class VirtualDesktopThumbnailWindowFilter
{
	void _MaybeDoUpdates();
public:
	VirtualDesktopThumbnailWindowFilter();
	long RuntimeClassInitialize(IVirtualDesktopManagerInternal *,ITabletModeController *,IVirtualDesktopNotificationService *);
	virtual long GetFilterForDesktop(IVirtualDesktop *,CCoSimpleArray<HWND__ *,4294967294,CSimpleArrayStandardCompareHelper<HWND__ *> > &,CCoSimpleArray<HWND__ *,4294967294,CSimpleArrayStandardCompareHelper<HWND__ *> > &);
	virtual long RegisterForFilterChanges(WeakReference::IWeakReference *);
	virtual long UnregisterForFilterChanges(WeakReference::IWeakReference *);
	virtual long ViewVirtualDesktopChanged(IApplicationView *);
	virtual void BeginUpdates();
	virtual void EndUpdates();
	virtual ~VirtualDesktopThumbnailWindowFilter();
};

class VirtualDesktopWindowMoveManager
{
	void TrimPendingMoves(unsigned __int64);
public:
	VirtualDesktopWindowMoveManager();
	long RuntimeClassInitialize(IVirtualDesktopManagerPrivate *,IVirtualDesktopCollection *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopPinnedAppsPrivate *);
	virtual long ApplicationViewShown(IApplicationView *,unsigned __int64);
	virtual long MoveWindow(HWND__ *,_GUID,unsigned __int64);
	virtual long SetViewInterfaces(IApplicationViewCollection *);
};

struct VirtualDesktopsApi
{
	VirtualDesktopsApi();
	long RuntimeClassInitialize(IVirtualDesktopManagerPrivate *,IVirtualDesktopCollection *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopWindowMoveManager *,IVirtualDesktopLock *);
	virtual long GetWindowDesktopId(HWND__ *,_GUID *);
	virtual long IsWindowOnCurrentVirtualDesktop(HWND__ *,int *);
	virtual long MoveWindowToDesktop(HWND__ *,_GUID const &);
	virtual long SetViewInterfaces(IApplicationViewCollection *);
};

class VirtualPinnedAppsHandler
{
	long PinViewInternal(IApplicationView *,bool);
	long PinViewNoGroupPropagateInternal(IApplicationView *,bool);
	void LoadPinnedAppsFromRegistry();
public:
	VirtualPinnedAppsHandler();
	long RuntimeClassInitialize(IVirtualDesktopManagerPrivate *,IVirtualDesktopRegistryHelpers *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopGroupedViewsPolicy *,IVirtualDesktopLock *);
	virtual int IsViewPinnedInternal(IApplicationView *);
	virtual long IsAppIdPinned(unsigned short const *,int *);
	virtual long IsViewPinned(IApplicationView *,int *);
	virtual long PinAppID(unsigned short const *);
	virtual long PinView(IApplicationView *);
	virtual long PinViewInternal(IApplicationView *);
	virtual long PinViewNoGroupPropagateInternal(IApplicationView *);
	virtual long SetViewCollectionInternal(IApplicationViewCollection *);
	virtual long UnpinAppID(unsigned short const *);
	virtual long UnpinView(IApplicationView *);
	virtual long UnpinViewInternal(IApplicationView *,IVirtualDesktop *);
	virtual long UnpinViewNoGroupPropagateInternal(IApplicationView *,IVirtualDesktop *);
	virtual long ViewAddedInternal(IApplicationView *);
	virtual long ViewAppIdChangedInternal(IApplicationView *);
};

struct VirtualTouchpadExperienceManagerFactory
{
	virtual long GetExperienceManager(IServiceProvider *,IInspectable * *);
};

class VirtualTouchpadUriHandler
{
	static long GetExperienceManager(unsigned short const *,Windows::Internal::Shell::Experience::IVirtualTouchpadExperienceManager * *);
	static long GetLaunchLocationForMonitor(HMONITOR__ *,tagPOINT *);
	static long GetPrimaryTouchEnabledMonitorIfAny(HMONITOR__ * *);
public:
	VirtualTouchpadUriHandler();
	virtual long Execute();
};

class VirtualTouchpadUriHandlerFactory
{
	virtual ~VirtualTouchpadUriHandlerFactory();
public:
	VirtualTouchpadUriHandlerFactory();
};

class VoiceAssistantPositioner
{
	long CacheViewToManage(IApplicationView *);
	long ControlLostHelper(IApplicationView *);
	long CreateAppViewOperationToUpdateView(IApplicationView *,IApplicationViewOperation * *);
	long EnableVoicePositionerScenario();
	long GetMonitorInformation(HMONITOR__ *,EDGEUI_TRAYSTUCKPLACE *,tagRECT *,tagRECT *,tagRECT *);
	long HideView(IApplicationView *);
	long SetForegroundOnView(IApplicationView *);
	long UpdateManagedView();
	tagRECT ComputeVoiceAssistantWindowRect(EDGEUI_TRAYSTUCKPLACE,int,int,tagRECT,tagRECT,tagRECT,tagRECT,tagRECT,int);
	void NotifyTrayOfVisibility(bool);
public:
	VoiceAssistantPositioner();
	long RuntimeClassInitialize();
	virtual int ShouldBlockActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleFrameworkViewTypeChange(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual int ShouldHandlePresentationRequest(IApplicationView *,IInspectable *);
	virtual long ControlGainedForActivation(IApplicationView *,SHELL_POSITIONER_TYPE,IUnknown *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long FrameworkViewTypeChangedForView(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual long GetChromeConfigurationForView(IApplicationView *,int *,IApplicationViewTitlebarConfiguration * *);
	virtual long GetCortanaAppDefaultLaunchPosition(tagRECT *);
	virtual long GetPosition(HWND__ *,_GUID const &,void * *);
	virtual long HandleRecoveryForView(IApplicationView *);
	virtual long HandleSwitchToView(IApplicationView *);
	virtual long InitializePosition(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,IApplicationView *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnAppAddedToSwitchers(IImmersiveApplication *,APP_SWITCHER_FLAGS);
	virtual long OnAppRemovedFromSwitchers(IImmersiveApplication *,SWITCHER_REMOVAL_REASON);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnShowWindowPolicy(HWND__ *,unsigned int,unsigned long *,tagRECT *);
	virtual long OnViewClosing(IApplicationView *,int);
	virtual long PerformDelayedInitialization();
	virtual long PositionView(IApplicationView *,tagRECT,TRY_POSITION_VIEW_FLAGS);
	virtual long PresentationChangedForView(IApplicationView *,IInspectable *);
	virtual long ResizeView(IApplicationView *,tagSIZE,tagSIZE);
	virtual long SetCortanaTaskbarButtonRect(tagRECT);
	virtual long SetViewStateForDesiredAppState(IApplicationView *,APPLICATION_DESIRED_STATE);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void ControlGained(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown *,IPresentationRequestedArgs *);
	virtual void ControlLost(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown * *);
	virtual void OnCuratedWindowHidden(HWND__ *);
	virtual void OnMoveSizeAttempted(IApplicationView *,unsigned long);
	virtual void OnShellTrackedWindowPosChanged(HWND__ *,IApplicationView *,int,unsigned long,tagRECT);
	virtual ~VoiceAssistantPositioner();
};

class VoiceAssistantPositionerTelemetry
{
	class VAPositioner_AppAddedToTaskbarActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void VAPositioner_PositionPendingViewBelongsToAppAdded();
		~VAPositioner_AppAddedToTaskbarActivity();
	};

	class VAPositioner_ControlGainedForActivationActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,IUnknown *);
		void VAPositioner_TryPositionPendingView();
		void VAPositioner_ViewHandledByInitializePosition();
		~VAPositioner_ControlGainedForActivationActivity();
	};

	class VAPositioner_ControlLostActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(SHELL_POSITIONER_TYPE);
		void Stop(IApplicationView *);
		~VAPositioner_ControlLostActivity();
	};

	class VAPositioner_DisplaySettingsChangeActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~VAPositioner_DisplaySettingsChangeActivity();
	};

	class VAPositioner_GetCortanaAppDefaultLaunchPositionActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(tagRECT,tagRECT);
		~VAPositioner_GetCortanaAppDefaultLaunchPositionActivity();
	};

	class VAPositioner_HandleSwitchToViewActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *);
		~VAPositioner_HandleSwitchToViewActivity();
	};

	class VAPositioner_InitializePositionActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,IUnknown *);
		~VAPositioner_InitializePositionActivity();
	};

	class VAPositioner_InputHostHidingActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~VAPositioner_InputHostHidingActivity();
	};

	class VAPositioner_InputHostShowingActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~VAPositioner_InputHostShowingActivity();
	};

	class VAPositioner_NotifyTrayOfVisibilityActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(bool);
		~VAPositioner_NotifyTrayOfVisibilityActivity();
	};

	class VAPositioner_OnViewClosingActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *);
		~VAPositioner_OnViewClosingActivity();
	};

	class VAPositioner_ResizeViewActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,tagSIZE);
		~VAPositioner_ResizeViewActivity();
	};

	class VAPositioner_ShouldHandleActivationActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,IUnknown *);
		void Stop(bool);
		~VAPositioner_ShouldHandleActivationActivity();
	};

	static unsigned __int64 GetActivationId(IUnknown *);
	static unsigned short const * GetCensoredAumidFromView(IApplicationView *);
protected:
	void Create();
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static void VAPositioner_CreateAppViewOperationToUpdateView<IApplicationView * &,bool &,tagRECT &,int &,int &,tagSIZE &>(IApplicationView * &,bool &,tagRECT &,int &,int &,tagSIZE &);
	void VAPositioner_AppViewDestroyed_(IApplicationView *);
	void VAPositioner_CacheViewToManage_(IApplicationView *);
	void VAPositioner_ControlLostHelper_(IApplicationView *);
	void VAPositioner_CreateAppViewOperationToUpdateView_(IApplicationView *,bool,tagRECT,int,int,tagSIZE);
	void VAPositioner_HandleRecoveryForView_(IApplicationView *);
	void VAPositioner_HideView_(IApplicationView *);
};

namespace WeakReference
{
	struct CWeakRefSource<CScrollViewerHost>
	{
		long Initialize(CScrollViewerHost *);
	};

	struct CWeakRefSource<CVirtualDesktopBarElement>
	{
		long Initialize(CVirtualDesktopBarElement *);
	};

	struct CWeakRefSource<SwitchItemThumbnailElement>
	{
		long Initialize(SwitchItemThumbnailElement *);
	};

	struct CWeakReference<CAltTabViewHost>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<CMultitaskingViewElementBase>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<CPPIAllUpViewHost>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<CScrollButtonContainer>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<CScrollViewerHost>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<CSnapAssistViewHost>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<CSwitchItemElement>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<CSwitchItemGrid>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<CVirtualDesktopBarElement>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<IUnknown>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<SwitchItemFilteredCollection>
	{
		virtual long Get(_GUID const &,void * *);
	};

	struct CWeakReference<SwitchItemThumbnailElement>
	{
		virtual long Get(_GUID const &,void * *);
	};

};

struct WifiSetting
{
	~WifiSetting();
};

struct Win32AppInfo
{
	bool IsAppActive();
	std::optional<ExeData> FindExeDataForPid(unsigned int);
	void EnumerateAppViews(Windows::Internal::FamilySafety::AppLimits::IAppStateDataReporter *);
	void TerminateApp(bool);
	void UpdateView(unsigned int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,HWND__ *,Windows::Internal::FamilySafety::AppLimits::ViewState);
};

class Win32AppStateManager
{
	bool TerminateAppOnce(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,bool);
	void OnTerminateTimer();
	void RemoveAppFromTerminationTarget(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,bool);
	void UpdateAppViewWorker(HWND__ *,Windows::Internal::FamilySafety::AppLimits::ViewState,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification *);
public:
	Win32AppStateManager();
	virtual bool IsAppActive(unsigned short const *);
	virtual std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetDisplayName(unsigned short const *);
	virtual std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > GetActiveApps();
	virtual void CancelTerminateApp(unsigned short const *);
	virtual void EnumerateAppStateData(Windows::Internal::FamilySafety::AppLimits::IAppStateDataReporter *);
	virtual void Reset();
	virtual void TerminateApp(unsigned short const *,Windows::Internal::FamilySafety::AppLimits::TerminationType);
	virtual void UpdateAppView(IApplicationView *,Windows::Internal::FamilySafety::AppLimits::ViewState,Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification *,bool);
	virtual ~Win32AppStateManager();
};

namespace Win32ApplicationViewHelpers
{
	wil::com_ptr_t<Windows::Foundation::Collections::IPropertySet,wil::err_returncode_policy> TryGetViewPropertySetFromHintsForWin32(IUnknown *,IWin32ApplicationView *,bool);
};

namespace Win32BackedViewHostItemTelemetry
{
	class PortFromHolographic
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IWin32ApplicationView *);
		~PortFromHolographic();
	};

	class PortToHolographic
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IWin32ApplicationView *);
		~PortToHolographic();
	};

	class SendViewToDesktop
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IWin32ApplicationView *);
		~SendViewToDesktop();
	};

	class TakeForeground
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		void Stop(Windows::Internal::ComposableShell::ForegroundPolicyResult);
		~TakeForeground();
	};

};

struct Win32PrimaryAppInformation
{
	bool IsSameAppId(IApplicationView *);
};

struct Win32PrimaryAppProxy
{
	Win32PrimaryAppProxy(unsigned short const *);
	virtual bool HandleView(IApplicationView *,IImmersiveMonitorManager *,std::function<void (IApplicationView *,IImmersiveMonitor *)>);
	virtual bool IsSameAppId(IApplicationView *);
	virtual bool RemoveView(IApplicationView *,IImmersiveMonitorManager *,std::function<void (IApplicationView *,IImmersiveMonitor *)>);
	virtual void RelayoutAppViews(IImmersiveMonitorManager *,std::function<void (IApplicationView *,IImmersiveMonitor *)>);
};

struct Win32ProcessInfo
{
	bool IsProcessActive();
	void EnumerateAppViews(Windows::Internal::FamilySafety::AppLimits::IAppStateDataReporter *);
	void TerminateApp(bool,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	void UpdateView(HWND__ *,Windows::Internal::FamilySafety::AppLimits::ViewState);
};

struct Win32ViewOperationPolicy
{
	bool IsOperableView(IApplicationView *);
};

class WindowArrangementOperation
{
	long QueryArrangeView(IApplicationView *,ARRANGEMENT_ACTION,FinalizeLayoutFlags *);
	long QueryReplaceView(IApplicationView *,ARRANGEMENT_ACTION,FinalizeLayoutFlags *);
	long QuerySnapView(IApplicationView *,ARRANGEMENT_ACTION,FinalizeLayoutFlags *);
public:
	WindowArrangementOperation();
	virtual long ArrangeView(IApplicationView *,ARRANGEMENT_ACTION);
	virtual void SetOldAppLayout(IAppLayout *);
	virtual void SetTempAppVisuals(ITemporaryAppVisualArray *);
};

class WindowArrangementView
{
	ARRANGEMENT_ACTION DropLocationToArrangementAction(WindowArrangementViewDragData::DropLocation);
	Microsoft::WRL::ComPtr<IApplicationView> GetTargetViewFromLayout(WindowArrangementViewDragData::DropLocation);
	long AddTempAppVisualsToLayoutOperation(IAppLayoutOperationBuilder *);
	long CommitPlaceModeTap(WindowArrangementViewDragData::DropLocation);
	long EnablePlaceModeDropFeedback(WindowArrangementView::EnablePlaceModeDropFeedbackMode,PlaceModeFeedbackTarget const *,IDCompBatchAnimationCallback *);
	long EndDrag(bool);
	long GetAppViewCloseOverrideOperation(ITabletModePositioner *,IApplicationView *,IAppLayoutOperation * *);
	long GetPlaceModePoint(WindowArrangementViewDragData::DropLocation,WindowArrangementViewDragData::DropLocation,tagPOINT *);
	long GetPrimaryMonitor(IImmersiveMonitor * *);
	long InitDragData();
	long InitDragVisual(IUnknown *,tagRECT *,tagPOINT const &,tagRECT *);
	long InitDropFeedback(IUnknown *);
	long InitView();
	long ProcessDrop(WindowArrangementViewDragData::DropLocation);
	long QueryArrangeView(IApplicationView *,WindowArrangementViewDragData::DropLocation,IAppLayoutOperation * *);
	long ShowView(tagRECT *,tagPOINT const &,tagRECT *);
	long TickPlaceModeIdleAnimation();
	long UpdateDragVisual(WindowArrangementViewDragData::DropLocation);
	long UpdateDropFeedback(WindowArrangementViewDragData::DropLocation,WindowArrangementViewDragData::DropLocation);
	long UpdateUIADropEffect(ARRANGEMENT_ACTION);
	long UpdateView(Geometry::CPoint const &,UpdateViewFlags);
	void Cleanup();
	void ResetPlaceModeIdleTimer();
	void SetPlaceModeIdleAnimationEnabled(bool);
public:
	WindowArrangementView();
	virtual bool IsPlaceModeCommitAllowed();
	virtual long BeginDragFromPlaceMode(Geometry::CPoint const &);
	virtual long CancelPlacement();
	virtual long CommitCurrentPlacement();
	virtual long GetLayout(IAppLayout * *);
	virtual long Initialize(IApplicationView *,IAppLayout *,SHOW_WINDOW_ARRANGEMENT_VIEW_MODE,SHOW_WINDOW_ARRANGEMENT_VIEW_SOURCE);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnCaptureChanged();
	virtual long OnKeyDown(unsigned long);
	virtual long OnKeyUp(unsigned long);
	virtual long OnPointerCancel();
	virtual long OnPointerDown(unsigned int,tagPOINT *);
	virtual long OnPointerUp(unsigned int,tagPOINT *);
	virtual long OnPointerUpdate(unsigned int,tagPOINT *);
	virtual long PlaceModeTap(tagPOINT);
	virtual long SetSite(IUnknown *);
	virtual long Show(tagRECT *,tagPOINT const &,tagRECT *);
	virtual long ShowPlaceModeFeedback(PlaceModeFeedbackType,tagPOINT *,bool);
	virtual long TryInvokeBack();
	virtual void Hide(bool);
	virtual void MovePlacement(PlaceModeKey);
	virtual ~WindowArrangementView();
};

class WindowEventDispatcher
{
	std::shared_ptr<ViewEventRegistration> GetEventRegistration(unsigned short const *,unsigned short const *);
	std::shared_ptr<ViewEventRegistration> GetSharedListener(wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy>,wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy>);
	void BoostUnboostSiHostProcess(bool);
	void CacheWindowWrapper(wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy>,std::shared_ptr<ViewEventRegistration>,ViewInitializationScenario);
	void EnsureDuplicateViewDestroyed(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,AgileGitPtr);
	void FlushRemovedPendingActivations();
	void HandleForegroundWindow(HWND__ *);
	void QueuePendingActivation(IWindowWrapperInternal *,Windows::Foundation::Collections::IPropertySet *,bool);
	void QueuePendingActivationForDestruction(unsigned __int64);
	void RaiseViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::ViewEventType,AgileGitPtr);
	void RaiseViewEventWithPropertySet(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::ViewEventType,Windows::Foundation::Collections::IPropertySet *,AgileGitPtr);
	void SwitchAsync(unsigned int,unsigned int,Windows::UI::ViewManagement::ApplicationViewSwitchingOptions,IAsyncCallback *);
	void TryShowAsStandaloneAsync(unsigned int,unsigned int,Windows::UI::ViewManagement::ViewSizePreference,Windows::UI::ViewManagement::ViewSizePreference,unsigned __int64,IAsyncCallback *);
	void TryShowAsViewModeAsync(unsigned int,unsigned int,Windows::UI::ViewManagement::ApplicationViewMode,Windows::Internal::ApplicationModel::WindowManagement::ExperienceKind,Windows::UI::ViewManagement::ViewSizePreference,Windows::UI::ViewManagement::ViewSizePreference,Windows::Foundation::Size,Windows::Internal::ApplicationModel::WindowManagement::ViewGroupingPreference,IAsyncCallback *);
	void UpdateAudioState(Windows::Internal::ApplicationModel::WindowManagement::IAppView *,HOSTED_APP_CHANGED);
	wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> GetCachedView(unsigned int);
	wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> RemoveCachedView(Windows::Internal::ApplicationModel::WindowManagement::AppViewId);
	wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> WindowWrapperFromWindow(HWND__ *);
	wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewStatics,wil::err_exception_policy> GetAppViewStatics();
public:
	WindowEventDispatcher();
	long RuntimeClassInitialize();
	virtual long AppViewActivationRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewActivationRequestedEventArgs *);
	virtual long AppViewActivationShowRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewActivationShowRequestedEventArgs *);
	virtual long AppViewClearPersistedStateRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewClearPersistedStateRequestedEventArgs *);
	virtual long AppViewConsolidateRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewRequestEventArgs *);
	virtual long AppViewRemoved(Windows::Internal::ApplicationModel::WindowManagement::IAppView *);
	virtual long AppViewShowRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewShowRequestedEventArgs *);
	virtual long AppViewSwitchRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewSwitchRequestedEventArgs *);
	virtual long AppViewUniversalPropertyChanged(Windows::Internal::ApplicationModel::WindowManagement::IAppViewUniversalPropertyChangedEventArgs *);
	virtual long AppViewVisibilityChanged(Windows::Internal::ApplicationModel::WindowManagement::IAppViewVisibilityChangedEventArgs *);
	virtual long ApplyWindowingEnvironmentSettingsRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewApplyWindowingEnvironmentSettingsRequestedEventArgs *);
	virtual long DecrementPopupCount(unsigned int);
	virtual long GetCanShowPopups(unsigned int,unsigned char *);
	virtual long GetPendingActivationData(unsigned __int64,Windows::Foundation::Collections::IPropertySet * *);
	virtual long GetTopLevelHost(unsigned int,Windows::Internal::Shell::Popups::ClientIdentifier *);
	virtual long GetViewFromHwnd(HWND__ *,INtUserViewWrapper * *);
	virtual long HandleFrameWindowChange(IWindowWrapperInternal *);
	virtual long IncrementPopupCount(unsigned int);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long InitiateUserLogoff(unsigned __int64);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long PerformCrashRecovery();
	virtual long PerformDelayedInitialization();
	virtual long RecoverViews(EventRegistrationToken,IObjectArray * *);
	virtual long RecoverViews(EventRegistrationToken,Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> * *);
	virtual long RegisterForPropertyChangeEvents(unsigned int,Windows::Internal::Shell::Popups::IPopupPropertyChangedEventHandler *,EventRegistrationToken *);
	virtual long RegisterForViewEvents(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> *,HSTRING__ *,HSTRING__ *,EventRegistrationToken *);
	virtual long RegisterForViewEventsWithOptions(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> *,HSTRING__ *,HSTRING__ *,Windows::Internal::Shell::Desktop::ViewManagerInterop::ViewEventRegistrationFlags,EventRegistrationToken *);
	virtual long RemovePendingActivation(unsigned __int64);
	virtual long Shutdown();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TerminateApp(unsigned __int64);
	virtual long TransferForegroundFromComponentToHost(unsigned int);
	virtual long TransferForegroundWithinComponentTree(unsigned int);
	virtual long TryGetViewIdForWindowId(unsigned int,unsigned int *);
	virtual long UnregisterForPropertyChangeEvents(unsigned int,EventRegistrationToken);
	virtual long UnregisterForViewEvents(EventRegistrationToken);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WindowAdded(Windows::Internal::ApplicationModel::WindowManagement::IWindow *,WindowCreatedType);
	virtual long WindowRemoved(Windows::Internal::ApplicationModel::WindowManagement::IWindow *);
	virtual long add_ForegroundViewChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager *,Windows::Internal::Shell::ViewManagerInterop::IForegroundViewChangedEventArgs *> *,EventRegistrationToken *);
	virtual long add_SelectViewToActivateForHitTest(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IForegroundManager *,Windows::Internal::Shell::ViewManagerInterop::ISelectViewToActivateForHitTestEventArgs *> *,EventRegistrationToken *);
	virtual long add_UserLogoffComplete(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher *,Windows::Internal::Shell::ViewManagerInterop::IUserLogoffCompleteEventArgs *> *,EventRegistrationToken *);
	virtual long add_ViewEventDispatcherReadyChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher *,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcherReadyChangedEventArgs *> *,EventRegistrationToken *);
	virtual long get_ForegroundView(unsigned int *);
	virtual long get_ForegroundViewData(Windows::Internal::Shell::ViewManagerInterop::ForegroundViewData *);
	virtual long get_ViewEventDispatcherReady(unsigned char *);
	virtual long remove_ForegroundViewChanged(EventRegistrationToken);
	virtual long remove_SelectViewToActivateForHitTest(EventRegistrationToken);
	virtual long remove_UserLogoffComplete(EventRegistrationToken);
	virtual long remove_ViewEventDispatcherReadyChanged(EventRegistrationToken);
	virtual long v_PublishServices(IServiceProvider *,IProfferService *);
	virtual long v_ShutdownServices(IProfferService *);
	virtual void AssertLockHeld();
	virtual void AssertLockHeldExclusive();
	virtual void BoostShellPriority(BoostOptions);
	virtual void GetViews(std::vector<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,std::allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> > > &);
	virtual void OverrideNavigationLevelForView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,NavigationLevelOverride);
	virtual void UnboostShellPriority();
	virtual wil::com_ptr_t<IHostedApplicationNotification,wil::err_exception_policy> GetPlaybackManager();
	virtual wil::com_ptr_t<IPrivilegedForegroundOperations,wil::err_exception_policy> GetForegroundOperations();
	virtual wil::com_ptr_t<IPrivilegedNotificationOperations,wil::err_exception_policy> GetNotificationOperations();
	virtual wil::com_ptr_t<IPrivilegedPresentationOperations,wil::err_exception_policy> GetPresentationOperations();
	virtual wil::com_ptr_t<IPrivilegedWindowOwnershipOperations,wil::err_exception_policy> GetWindowOwnershipOperations();
	virtual wil::com_ptr_t<IWindowManagerBridge,wil::err_exception_policy> GetBridge();
	virtual wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> GetCachedWindowWrapper(Windows::Internal::ApplicationModel::WindowManagement::AppViewId);
	virtual ~WindowEventDispatcher();
};

class WindowGroup
{
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	WindowGroup(unsigned long);
	virtual HWND__ * GetFallbackWindow();
	virtual bool EnsureFallbackWindow();
	virtual void DestroyFallbackWindow();
};

class WindowGroupManager
{
	wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> TryGetWindowGroupById(unsigned long);
public:
	WindowGroupManager(IPrivilegedWindowGroupingOperations *);
	virtual long AddWindowToGroup(HWND__ *,unsigned long,unsigned int);
	virtual long ApplyWindowGroupTemplateToWindow(unsigned long,HWND__ *,SET_WINDOW_GROUP_OPTIONS);
	virtual long CreateWindowGroup(unsigned long *,IWindowGroup * *);
	virtual long MakeFallbackWindowTemplateForGroup(unsigned long);
	virtual long MakeWindowGroupTemplate(unsigned long,HWND__ *);
	virtual long MoveWindowToDefaultGroup(HWND__ *);
	virtual long RemoveWindowFromWindowGroup(HWND__ *,unsigned int);
	virtual void Shutdown();
};

struct WindowManagementLogging
{
	static _tlgProvider_t const * Provider();
};

class WindowManagerBridge
{
	long OnAppViewActivationRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewActivationRequestedEventArgs *);
	long OnAppViewActivationShowRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewActivationShowRequestedEventArgs *);
	long OnAppViewAdded(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewChangedEventArgs *);
	long OnAppViewClearPersistedStateRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewClearPersistedStateRequestedEventArgs *);
	long OnAppViewConsolidateRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewRequestEventArgs *);
	long OnAppViewEnumerationCompleted(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,IInspectable *);
	long OnAppViewExecutionStateChanged(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewExecutionStateChangedEventArgs *);
	long OnAppViewRemoved(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewChangedEventArgs *);
	long OnAppViewShowRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewShowRequestedEventArgs *);
	long OnAppViewSwitchRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewSwitchRequestedEventArgs *);
	long OnAppViewUniversalPropertyChanged(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewUniversalPropertyChangedEventArgs *);
	long OnAppViewVisibilityChanged(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewVisibilityChangedEventArgs *);
	long OnAppViewWatcherStopped(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,IInspectable *);
	long OnApplyWindowingEnvironmentSettingsRequested(Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IAppViewApplyWindowingEnvironmentSettingsRequestedEventArgs *);
	long OnWindowAdded(Windows::Internal::ApplicationModel::WindowManagement::IWindowWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IWindowChangedEventArgs *);
	long OnWindowEnumerationCompleted(Windows::Internal::ApplicationModel::WindowManagement::IWindowWatcher *,IInspectable *);
	long OnWindowRemoved(Windows::Internal::ApplicationModel::WindowManagement::IWindowWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IWindowChangedEventArgs *);
	long OnWindowTouchInputRoutingInfoChanged(Windows::Internal::ApplicationModel::WindowManagement::IWindowWatcher *,Windows::Internal::ApplicationModel::WindowManagement::IWindowChangedEventArgs *);
	long OnWindowWatcherStopped(Windows::Internal::ApplicationModel::WindowManagement::IWindowWatcher *,IInspectable *);
	long StartAppViewWatcher();
	long StartWindowWatcher();
	long WindowManagerWatcherConnected();
public:
	WindowManagerBridge();
	long RuntimeClassInitialize(IWindowEventDispatcherInternal *);
	virtual long GetNavigationLevelForView(Windows::Internal::ApplicationModel::WindowManagement::IAppView *,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel *);
	virtual long NavigateView(unsigned int,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	virtual long WaitForWindowManagerConnection();
	virtual void Uninitialize();
	virtual wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewStatics,wil::err_exception_policy> GetAppViewStatics();
	virtual wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindowStatics,wil::err_exception_policy> GetWindowStatics();
	virtual ~WindowManagerBridge();
};

class WindowReadyState
{
	struct WaitFlags
	{
		void Clear(WindowReadyState const *,WindowReadinessWaitFlags);
		void Set(WindowReadyState const *,WindowReadinessWaitFlags);
	};

	void _WaitForUnfreezeIfNecessary();
public:
	bool IsReadyForPresentation();
	void HandleShellHook(unsigned __int64);
	void PosChanged(int,int);
	void SetCallback(std::function<void (bool)>);
	void SetWindow(HWND__ *,WindowCreatedType);
	void VisibilityChanged(EventPhase,Visibility);
};

namespace WindowRelativePositioning
{
	tagRECT GetAdjacentPosition(tagRECT const &,tagSIZE const &,tagRECT const &,bool,unsigned short const *,IApplicationViewCollection *,tagRECT const &);
};

class WindowSizeConverter
{
	long ConvertWithViewInfo(tagSIZE,SizeConversionViewInfo *,tagSIZE *);
	long EnsureEntry(IImmersiveMonitor *);
	long EnsurePosition(IImmersiveMonitor *,IApplicationFrame *);
	long GetFrameForMonitor(IImmersiveMonitor *,IApplicationFrame * *);
	long GetMonitorForDpi(unsigned int,IImmersiveMonitor * *);
public:
	WindowSizeConverter();
	long RuntimeClassInitialize();
	virtual long ConvertForDpiAndChromeConfiguration(tagSIZE,unsigned int,int,int,IApplicationViewTitlebarConfiguration *,tagSIZE *);
	virtual long ConvertForDpiAndView(tagSIZE,unsigned int,IApplicationView *,tagSIZE *);
	virtual long ConvertForMonitorAndChromeConfiguration(tagSIZE,IImmersiveMonitor *,int,int,IApplicationViewTitlebarConfiguration *,tagSIZE *);
	virtual long ConvertForMonitorAndView(tagSIZE,IImmersiveMonitor *,IApplicationView *,tagSIZE *);
	virtual long ConvertForView(tagSIZE,IApplicationView *,tagSIZE *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetPhysicalChromeOffsets(IImmersiveMonitor *,tagRECT *);
	virtual long GetPhysicalNonClientAreaOffsets(IImmersiveMonitor *,int,int,int,IApplicationViewTitlebarConfiguration *,tagRECT *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

struct WindowTabHostTelemetry
{
	class WindowTabHostLivePreviewThumbnailRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		WindowTabHostLivePreviewThumbnailRequested();
		static WindowTabHostLivePreviewThumbnailRequested Start<unsigned int &,unsigned int &>(unsigned int &,unsigned int &);
		void StartActivity(unsigned int,unsigned int);
		void Stop(long);
		~WindowTabHostLivePreviewThumbnailRequested();
	};

	class WindowTabHostThumbnailRequested
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		WindowTabHostThumbnailRequested();
		static WindowTabHostThumbnailRequested Start<unsigned int &,unsigned int &>(unsigned int &,unsigned int &);
		void StartActivity(unsigned int,unsigned int);
		void Stop(long);
		~WindowTabHostThumbnailRequested();
	};

	static void WindowTabHostAltTabInvoked<unsigned int &>(unsigned int &);
	static void WindowTabHostTabClosedViaAltTab();
	static void WindowTabHostTabSwitchedToViaAltTab();
	static void WindowTabHostTimestampUpdateCanceled<bool &,bool &,bool &>(bool &,bool &,bool &);
	static void WindowTabHostWindowClosedViaAltTab();
	static void WindowTabHostWindowSwitchedToViaAltTab();
};

class WindowWrapper
{
	virtual Windows::Internal::Shell::ViewManagerInterop::NavigationLevel v_GetDesiredNavigationLevel();
	virtual Windows::UI::Core::AppViewBackButtonVisibility v_GetBackButtonVisibility();
	virtual bool v_CanDirectlySizeWindow();
	virtual bool v_CanHandleCloseRequest();
	virtual bool v_CanPositionWindow();
	virtual bool v_SetDesiredPosition_HasViewDataChanged(APPLICATION_VIEW_DATA const &,APPLICATION_VIEW_DATA const &);
	virtual bool v_SupportsBack();
	virtual void v_ApproveWinRtActivation();
	virtual void v_CloseRequestedAsync(Windows::Foundation::IAsyncOperation<bool> * *);
	virtual void v_OnViewVisibilityChanged(EventPhase,Visibility);
	virtual void v_OnWindowCreated(WindowCreatedType);
	virtual void v_PushBoundsToAppView();
	virtual void v_SendConsolidated(Windows::Internal::Shell::ViewManagerInterop::ConsolidatedState);
	virtual void v_SetDesiredNavigationLevel(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	virtual void v_SetDesiredPosition_OnBeforePositionWindow(bool,bool);
	virtual void v_TryBack(Windows::Foundation::IAsyncOperation<bool> * *);
	void GetBatch(Windows::Internal::ApplicationModel::WindowManagement::IUniversalBatch * *);
	void SetImageLocationNoLock(Windows::Foundation::Rect);
public:
	WindowWrapper(IWindowEventDispatcherInternal *,Windows::Internal::ApplicationModel::WindowManagement::IAppView *,Windows::Internal::ApplicationModel::WindowManagement::IAppModel *,Windows::Internal::ApplicationModel::WindowManagement::AppModelKind,Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Internal::ApplicationModel::WindowManagement::IWindow *,Windows::Internal::ApplicationModel::WindowManagement::WindowId,unsigned short const *,WindowCreatedType);
	virtual long SetImageLocation(Windows::Foundation::Rect);
	virtual long SetIsDismissed(unsigned char);
};

class WindowWrapperBase
{
	long UpdateDisplayRegions(Windows::Internal::ApplicationModel::WindowManagement::IWindow *,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> *);
	void CommitImportanceVector();
	void NotifyGlobalComponentsForWindowStateChange(HWND__ *,WindowWrapperBase::WindowChange);
	void NotifyReadyForPresentationChanged(bool);
	void OnBackComplete(bool);
	void PushBoundsToWindow(PositioningTypeFlags);
	void PushDesiredNavigationLevelToDerivedClass();
	void PushPointerActivationPolicyToWindow();
	void PushZbidToWindow(ZBID);
	void ReconcileSessionIdleTaskCompletion();
	void SetDesiredPosition(Windows::Foundation::Rect,PositioningTypeFlags,APPLICATION_VIEW_DATA const *);
	void SetWindowId(Windows::Internal::ApplicationModel::WindowManagement::WindowId,WindowCreatedType);
protected:
	virtual Windows::UI::Core::AppViewBackButtonVisibility v_GetBackButtonVisibility();
	virtual void v_ApproveWinRtActivation();
	virtual void v_CloseRequestedAsync(Windows::Foundation::IAsyncOperation<bool> * *);
	virtual void v_HandleActivationRequested();
	virtual void v_OnViewVisibilityChanged(EventPhase,Visibility);
	virtual void v_OnWindowCreated(WindowCreatedType);
	virtual void v_OnWindowDestroyed();
	virtual void v_PushBoundsToAppView();
	virtual void v_TryBack(Windows::Foundation::IAsyncOperation<bool> * *);
	void NavigateInternal(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
public:
	WindowWrapperBase();
	long Initialize(IWindowEventDispatcherInternal *,Windows::Internal::ApplicationModel::WindowManagement::IAppView *,Windows::Internal::ApplicationModel::WindowManagement::IAppModel *,Windows::Internal::ApplicationModel::WindowManagement::AppModelKind,Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Internal::ApplicationModel::WindowManagement::IWindow *,Windows::Internal::ApplicationModel::WindowManagement::WindowId,unsigned short const *,WindowCreatedType);
	virtual HWND__ * GetFrameHwnd();
	virtual Windows::Internal::ApplicationModel::WindowManagement::AppModelKind GetAppModelKind();
	virtual bool SetNavigationLevelOverride(NavigationLevelOverride);
	virtual long ApplyPresenter(Windows::Internal::ApplicationModel::WindowingEnvironment::ApplicationWindowPresenterKindInternal);
	virtual long BoostPriority();
	virtual long ChangeBounds(Windows::Internal::Shell::ViewManagerInterop::ViewBounds);
	virtual long ChangeBoundsWithPresenter(Windows::Internal::Shell::ViewManagerInterop::ViewBounds,Windows::Internal::ApplicationModel::WindowingEnvironment::ApplicationWindowPresenterKindInternal);
	virtual long ChangeDisplay(unsigned __int64);
	virtual long ChangeDisplayRegionIds(Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> *);
	virtual long ChangeIsTitleBarVisible(unsigned char);
	virtual long ChangePropertyAsString(HSTRING__ *,HSTRING__ *);
	virtual long ChangePropertyAsUInt32(HSTRING__ *,unsigned int);
	virtual long ChangeTitleBarHeight(double);
	virtual long ChangeTitleBarInputRoutingHwnd(unsigned int);
	virtual long ChangeTitleBarInputRoutingInfo(Windows::Internal::Shell::ViewManagerInterop::InputRoutingInfo);
	virtual long ChangeTitleBarSystemOverlayLeftInset(double);
	virtual long ChangeTitleBarSystemOverlayRightInset(double);
	virtual long ChangeVisibleBounds(Windows::Foundation::Rect);
	virtual long Consolidate(Windows::Internal::Shell::ViewManagerInterop::ConsolidatedState);
	virtual long EnableInput(unsigned char);
	virtual long EndSizingBatch();
	virtual long EnsurePositionOffset();
	virtual long FlushStashedWindowingEnvironmentSettings(Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings * *);
	virtual long GetActivationRequestedArgs(Windows::Internal::ApplicationModel::WindowManagement::IAppViewActivationRequestedEventArgs * *);
	virtual long GetAppView(Windows::Internal::ApplicationModel::WindowManagement::IAppView * *);
	virtual long GetLightweightProperty(unsigned short const *,unsigned long *);
	virtual long GetPropertyAsBoolean(HSTRING__ *,unsigned char *);
	virtual long GetPropertyAsInt(HSTRING__ *,int *);
	virtual long GetPropertyAsString(HSTRING__ *,HSTRING__ * *);
	virtual long GetPropertyAsUInt(HSTRING__ *,unsigned int *);
	virtual long GetWindow(Windows::Internal::ApplicationModel::WindowManagement::IWindow * *);
	virtual long Navigate(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	virtual long NotifyTouchRoutingInfoChanged();
	virtual long PersistLocalProperties();
	virtual long PersistPropertyAsUInt32(HSTRING__ *,unsigned int);
	virtual long RequestCloseAsync(Windows::Foundation::IAsyncOperation<Windows::Internal::Shell::ViewManagerInterop::AppRequestHandledResult> * *);
	virtual long SetActivationRequestedArgs(Windows::Internal::ApplicationModel::WindowManagement::IAppViewActivationRequestedEventArgs *);
	virtual long SetActivationTimeoutPolicy(Windows::Internal::Shell::ViewManagerInterop::ActivationTimeoutPolicy);
	virtual long SetBackButtonVisibility(Windows::UI::Core::AppViewBackButtonVisibility);
	virtual long SetCustomResourceSet(HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long SetDehydrationPolicy(Windows::Internal::Shell::ViewManagerInterop::DehydrationPolicy);
	virtual long SetForegroundWindow();
	virtual long SetForegroundWindowWithUipiBypass();
	virtual long SetFrameWindow(HWND__ *,__MIDL___MIDL_itf_ntuserviewmanagerinterop_0000_0002_0001);
	virtual long SetFrameworkKind(Windows::Internal::ApplicationModel::WindowManagement::AppModelFrameworkKind);
	virtual long SetImportanceVector(unsigned int);
	virtual long SetImportanceVectorUsingMask(unsigned int,Windows::Internal::Shell::ViewManagerInterop::ImportanceMaskTypes);
	virtual long SetLightweightProperty(unsigned short const *,unsigned long);
	virtual long SetPosition(tagRECT const *);
	virtual long SetPositionAndViewData(tagRECT const *,APPLICATION_VIEW_DATA const *);
	virtual long SetShellCloak(__MIDL___MIDL_itf_privilegedoperations_0000_0002_0001);
	virtual long SetSize(Windows::Foundation::Size);
	virtual long SetSplashScreen(Windows::Internal::ApplicationModel::WindowManagement::ISplashScreen *);
	virtual long SetWindowBand(unsigned long);
	virtual long SetWindowOwner(HWND__ *);
	virtual long SetWindowPropagatableProperties(Windows::Foundation::Collections::IPropertySet *);
	virtual long StartSizingBatch();
	virtual long TryBack(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs *> *);
	virtual long TryRecoverPropertyAsUInt32(HSTRING__ *,unsigned int *,unsigned char *);
	virtual long UnboostPriority();
	virtual long UpdateEngagementFlags(Windows::Internal::Shell::ViewManagerInterop::ViewEngagementFlags,Windows::Internal::Shell::ViewManagerInterop::ViewEngagementFlags);
	virtual long UpdateEngagementTelemetryFlags(unsigned __int64,unsigned __int64);
	virtual long WindowAdded(Windows::Internal::ApplicationModel::WindowManagement::IWindow *,Windows::Internal::ApplicationModel::WindowManagement::WindowId,WindowCreatedType);
	virtual long WindowRemoved();
	virtual long add_ClientWindowLayoutCompleted(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_ClientWindowPrepareForPresentationChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowPrepareForPresentationChangedEventArgs *> *,EventRegistrationToken *);
	virtual long add_ClientWindowReadyForPresentationChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> *,EventRegistrationToken *);
	virtual long add_TouchInputRoutingInfoChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_AppUserModelId(HSTRING__ * *);
	virtual long get_ApplicationDisplayName(HSTRING__ * *);
	virtual long get_AppliedPresenterMode(Windows::Internal::ApplicationModel::WindowingEnvironment::ApplicationWindowPresenterKindInternal *);
	virtual long get_Bounds(Windows::Internal::Shell::ViewManagerInterop::ViewBounds *);
	virtual long get_CanHandleCloseRequest(unsigned char *);
	virtual long get_ClientWindow(unsigned int *);
	virtual long get_ClientWindowReadyForPresentation(unsigned char *);
	virtual long get_Consolidated(Windows::Internal::Shell::ViewManagerInterop::ConsolidatedState *);
	virtual long get_CurrentOrientation(Windows::Internal::Shell::ViewManagerInterop::Orientations *);
	virtual long get_DisplayRegionIds(Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> * *);
	virtual long get_ExecutionState(Windows::Internal::ApplicationModel::WindowManagement::AppViewExecutionState *);
	virtual long get_ExperienceId(HSTRING__ * *);
	virtual long get_FrameStyle(unsigned int *);
	virtual long get_HostId(unsigned __int64 *);
	virtual long get_IsOccluded(unsigned char *);
	virtual long get_IsStatusBarBackgroundColorSet(unsigned char *);
	virtual long get_IsStatusBarForegroundColorSet(unsigned char *);
	virtual long get_IsTitleBarBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonHoverBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonHoverTextColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonPressedBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonPressedTextColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarButtonTextColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarInactiveBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarInactiveButtonBackgroundColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarInactiveButtonTextColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarInactiveTextColorOverrideSet(unsigned char *);
	virtual long get_IsTitleBarInputVisualSet(unsigned char *);
	virtual long get_IsTitleBarTextColorOverrideSet(unsigned char *);
	virtual long get_IsViewExtendedIntoTitleBar(unsigned char *);
	virtual long get_IslandTransformsMode(Windows::UI::Internal::Core::IslandTransformsMode *);
	virtual long get_NavigationLevel(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel *);
	virtual long get_PersistingStateName(HSTRING__ * *);
	virtual long get_PointerActivationPolicy(Windows::Internal::Shell::ViewManagerInterop::PointerActivationPolicy *);
	virtual long get_PreferredMinSize(Windows::Foundation::Size *);
	virtual long get_ProcessId(unsigned int *);
	virtual long get_StatusBarBackgroundColor(Windows::UI::Color *);
	virtual long get_StatusBarBackgroundOpacity(double *);
	virtual long get_StatusBarForegroundColor(Windows::UI::Color *);
	virtual long get_StatusBarOccludedRect(Windows::Foundation::Rect *);
	virtual long get_SupportedOrientations(Windows::Internal::Shell::ViewManagerInterop::Orientations *);
	virtual long get_TitleBarBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonHoverBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonHoverTextColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonPressedBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonPressedTextColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarButtonTextColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarInactiveBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarInactiveButtonBackgroundColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarInactiveButtonTextColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarInactiveTextColorOverride(Windows::UI::Color *);
	virtual long get_TitleBarTextColorOverride(Windows::UI::Color *);
	virtual long get_TitlebarVisibilityMode(unsigned int *);
	virtual long get_TouchInputRoutingInfo(Windows::Internal::Shell::ViewManagerInterop::InputRoutingInfo *);
	virtual long get_UserContextToken(unsigned __int64 *);
	virtual long get_ViewFrameworkViewType(Windows::Internal::Shell::ViewManagerInterop::ViewFrameworkViewType *);
	virtual long get_ViewInstanceId(unsigned int *);
	virtual long get_VisibilityRevoked(unsigned char *);
	virtual long get_WindowProperties(Windows::Foundation::Collections::IPropertySet * *);
	virtual long get_WindowResizingState(Windows::Internal::Shell::ViewManagerInterop::WindowResizingState *);
	virtual long get_WindowTitle(HSTRING__ * *);
	virtual long put_CurrentOrientation(Windows::Internal::Shell::ViewManagerInterop::Orientations);
	virtual long put_FrameStyle(unsigned int);
	virtual long put_IsOccluded(unsigned char);
	virtual long put_PointerActivationPolicy(Windows::Internal::Shell::ViewManagerInterop::PointerActivationPolicy);
	virtual long put_StatusBarOccludedRect(Windows::Foundation::Rect);
	virtual long put_TitlebarVisibilityMode(unsigned int);
	virtual long put_VisibilityRevoked(unsigned char);
	virtual long put_WindowResizingState(Windows::Internal::Shell::ViewManagerInterop::WindowResizingState);
	virtual long remove_ClientWindowLayoutCompleted(EventRegistrationToken);
	virtual long remove_ClientWindowPrepareForPresentationChanged(EventRegistrationToken);
	virtual long remove_ClientWindowReadyForPresentationChanged(EventRegistrationToken);
	virtual long remove_TouchInputRoutingInfoChanged(EventRegistrationToken);
	virtual std::shared_ptr<ViewEventRegistration> GetRegistration();
	virtual unsigned __int64 GetHostId();
	virtual unsigned int GetViewInstanceId();
	virtual unsigned int GetWindowId();
	virtual unsigned short const * GetApplicationId();
	virtual unsigned short const * GetExperienceId();
	virtual void AddSessionIdleTaskCompletion();
	virtual void ApproveWinRtActivation();
	virtual void BeginWinRtActivation();
	virtual void HandleActivationRequested();
	virtual void HandlePresentationReadinessChange(unsigned __int64);
	virtual void RemoveSessionIdleTaskCompletion();
	virtual void SetFocusState(FocusState);
	virtual void SetPersistingStateName(HSTRING__ *);
	virtual void SetRegistration(std::shared_ptr<ViewEventRegistration>,ViewInitializationScenario);
	virtual void StashWindowingEnvironmentSettings(Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings *);
	virtual void VisibilityChanged(EventPhase,Visibility);
	virtual void WindowDiscoveredFromShellHook(HWND__ *);
	~WindowWrapperBase();
};

class WindowingEnvironmentConfig
{
	long GetTargetDeviceName(HMONITOR__ *,DISPLAYCONFIG_TARGET_DEVICE_NAME *);
public:
	WindowingEnvironmentConfig(IWindowingEnvironmentManagerInternal *,Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentModel *,WindowingEnvironmentType);
	virtual Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentModel * GetWindowingEnvironmentModel();
	virtual long AddDisplayRegion(IImmersiveMonitor *,tagRECT,int);
	virtual long GetDisplayRegionId(IImmersiveMonitor *,unsigned int *);
	virtual long GetMonitor(unsigned int,IImmersiveMonitor * *);
	virtual long RemoveDisplayRegion(IImmersiveMonitor *);
	virtual long SetPresenterSettings(PresenterTypeMask);
	virtual long SetState(ConfigStateMask);
	virtual long UpdateDisplayRegionVisibility(IImmersiveMonitor *,int);
	virtual long get_Id(unsigned int *);
	virtual long get_Type(WindowingEnvironmentType *);
	virtual unsigned int AddCreatedRef();
	virtual unsigned int ReleaseCreatedRef();
};

class WindowingEnvironmentManager
{
	long ResetWindowingEnvironments();
public:
	WindowingEnvironmentManager();
	long RuntimeClassInitialize();
	virtual Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionModelStatics * GetDisplayRegionModelStatics();
	virtual Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentModelBatchStatics * GetWindowingEnvironmentModelBatchStatics();
	virtual Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentModelStatics * GetWindowingEnvironmentModelStatics();
	virtual long CreateWindowingEnvironmentConfig(WindowingEnvironmentType,IWindowingEnvironmentConfig * *);
	virtual long GetWindowingEnvironmentConfigById(unsigned int,IWindowingEnvironmentConfig * *);
	virtual long GetWindowingEnvironmentConfigByType(WindowingEnvironmentType,IWindowingEnvironmentConfig * *);
	virtual long RemoveWindowingEnvironmentConfig(WindowingEnvironmentType);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long v_PublishServices(IServiceProvider *,IProfferService *);
	virtual long v_ShutdownServices(IProfferService *);
	virtual void EnsureLockHeldExclusive();
	virtual ~WindowingEnvironmentManager();
};

struct WindowingEnvironmentSettings
{
	WindowingEnvironmentSettings();
	virtual long get_AllowDisplayRegionSpanning(unsigned char *);
	virtual long get_ApplyToWindowingEnvironment(unsigned char *);
	virtual long get_BoundsPreference(unsigned int *);
	virtual long get_IncludeSystemChrome(unsigned char *);
	virtual long get_IsAdjacent(unsigned char *);
	virtual long get_IsExclusive(unsigned char *);
	virtual long get_KeepAspectRatio(unsigned char *);
	virtual long get_Offset(Windows::Foundation::Point *);
	virtual long get_PresenterKind(unsigned int *);
	virtual long get_RelativePositionAnchorView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
	virtual long get_RequestedDisplayRegionIds(Windows::Foundation::Collections::IVectorView<unsigned int> * *);
	virtual long get_Size(Windows::Foundation::Size *);
	virtual void AddWindowingEnvironmentSettings(Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *,std::function<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> (unsigned int)> const &);
};

namespace Windows
{
	namespace Foundation
	{
		struct AsyncOperationCompletedHandler<bool>
		{
			AsyncOperationCompletedHandler<bool><<lambda_9c267cdafd8e064f323ec4e1c7ae30d4> >(<lambda_9c267cdafd8e064f323ec4e1c7ae30d4>,Platform::CallbackContext,bool);
			virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
			virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
			virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
			virtual long __abi_QueryInterface(Platform::Guid &,void * *);
			virtual unsigned long __abi_AddRef();
			virtual unsigned long __abi_Release();
			virtual void Invoke(IAsyncOperation<bool> ^,AsyncStatus);
		};

		namespace Collections
		{
			namespace Detail
			{
				long _IteratorGetMany<IIterator_impl<HSTRING__ *,1>,HSTRING__ *>(IIterator_impl<HSTRING__ *,1> *,unsigned int,HSTRING__ * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1>,Internal::ComposableShell::Tabs::IShellTab *>(IIterator_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1> *,unsigned int,Internal::ComposableShell::Tabs::IShellTab * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1>,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>(IIterator_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1> *,unsigned int,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1>,UI::ViewManagement::Core::ICoreInputViewOcclusion *>(IIterator_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1> *,unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::ComposableShell::ITreeNode *,1>,Internal::ComposableShell::ITreeNode *>(IIterator_impl<Internal::ComposableShell::ITreeNode *,1> *,unsigned int,Internal::ComposableShell::ITreeNode * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1>,Internal::ComposableShell::Multitasking::ISwitchItem *>(IIterator_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1> *,unsigned int,Internal::ComposableShell::Multitasking::ISwitchItem * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1>,Internal::ComposableShell::Multitasking::IVirtualDesktop *>(IIterator_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1> *,unsigned int,Internal::ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::Shell::Chaining::IChainLink *,1>,Internal::Shell::Chaining::IChainLink *>(IIterator_impl<Internal::Shell::Chaining::IChainLink *,1> *,unsigned int,Internal::Shell::Chaining::IChainLink * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1>,Internal::Shell::ViewManagerInterop::IViewWrapper *>(IIterator_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1> *,unsigned int,Internal::Shell::ViewManagerInterop::IViewWrapper * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<unsigned int,1>,unsigned int>(IIterator_impl<unsigned int,1> *,unsigned int,unsigned int *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<HSTRING__ *,1>,HSTRING__ *>(IVectorView_impl<HSTRING__ *,1> *,unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1>,Internal::ComposableShell::Tabs::IShellTab *>(IVectorView_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1> *,unsigned int,unsigned int,Internal::ComposableShell::Tabs::IShellTab * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1>,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>(IVectorView_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1> *,unsigned int,unsigned int,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1>,UI::ViewManagement::Core::ICoreInputViewOcclusion *>(IVectorView_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1> *,unsigned int,unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::ComposableShell::ITreeNode *,1>,Internal::ComposableShell::ITreeNode *>(IVectorView_impl<Internal::ComposableShell::ITreeNode *,1> *,unsigned int,unsigned int,Internal::ComposableShell::ITreeNode * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1>,Internal::ComposableShell::Multitasking::ISwitchItem *>(IVectorView_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1> *,unsigned int,unsigned int,Internal::ComposableShell::Multitasking::ISwitchItem * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1>,Internal::ComposableShell::Multitasking::IVirtualDesktop *>(IVectorView_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1> *,unsigned int,unsigned int,Internal::ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::Shell::Chaining::IChainLink *,1>,Internal::Shell::Chaining::IChainLink *>(IVectorView_impl<Internal::Shell::Chaining::IChainLink *,1> *,unsigned int,unsigned int,Internal::Shell::Chaining::IChainLink * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1>,Internal::Shell::ViewManagerInterop::IViewWrapper *>(IVectorView_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1> *,unsigned int,unsigned int,Internal::Shell::ViewManagerInterop::IViewWrapper * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<unsigned int,1>,unsigned int>(IVectorView_impl<unsigned int,1> *,unsigned int,unsigned int,unsigned int *,unsigned int *);
				long _VectorGetMany<IVector_impl<HSTRING__ *,1>,HSTRING__ *>(IVector_impl<HSTRING__ *,1> *,unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1>,Internal::ComposableShell::Tabs::IShellTab *>(IVector_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1> *,unsigned int,unsigned int,Internal::ComposableShell::Tabs::IShellTab * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1>,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>(IVector_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1> *,unsigned int,unsigned int,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1>,UI::ViewManagement::Core::ICoreInputViewOcclusion *>(IVector_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1> *,unsigned int,unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::ComposableShell::ITreeNode *,1>,Internal::ComposableShell::ITreeNode *>(IVector_impl<Internal::ComposableShell::ITreeNode *,1> *,unsigned int,unsigned int,Internal::ComposableShell::ITreeNode * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1>,Internal::ComposableShell::Multitasking::ISwitchItem *>(IVector_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1> *,unsigned int,unsigned int,Internal::ComposableShell::Multitasking::ISwitchItem * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1>,Internal::ComposableShell::Multitasking::IVirtualDesktop *>(IVector_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1> *,unsigned int,unsigned int,Internal::ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::Shell::Chaining::IChainLink *,1>,Internal::Shell::Chaining::IChainLink *>(IVector_impl<Internal::Shell::Chaining::IChainLink *,1> *,unsigned int,unsigned int,Internal::Shell::Chaining::IChainLink * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1>,Internal::Shell::ViewManagerInterop::IViewWrapper *>(IVector_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1> *,unsigned int,unsigned int,Internal::Shell::ViewManagerInterop::IViewWrapper * *,unsigned int *);
				long _VectorGetMany<IVector_impl<unsigned int,1>,unsigned int>(IVector_impl<unsigned int,1> *,unsigned int,unsigned int,unsigned int *,unsigned int *);
				long _VectorReplaceAll<IVector_impl<HSTRING__ *,1>,HSTRING__ *>(IVector_impl<HSTRING__ *,1> *,unsigned int,HSTRING__ * *);
				long _VectorReplaceAll<IVector_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1>,Internal::ComposableShell::Tabs::IShellTab *>(IVector_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1> *,unsigned int,Internal::ComposableShell::Tabs::IShellTab * *);
				long _VectorReplaceAll<IVector_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1>,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>(IVector_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1> *,unsigned int,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * *);
				long _VectorReplaceAll<IVector_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1>,UI::ViewManagement::Core::ICoreInputViewOcclusion *>(IVector_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1> *,unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *);
				long _VectorReplaceAll<IVector_impl<Internal::ComposableShell::ITreeNode *,1>,Internal::ComposableShell::ITreeNode *>(IVector_impl<Internal::ComposableShell::ITreeNode *,1> *,unsigned int,Internal::ComposableShell::ITreeNode * *);
				long _VectorReplaceAll<IVector_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1>,Internal::ComposableShell::Multitasking::ISwitchItem *>(IVector_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1> *,unsigned int,Internal::ComposableShell::Multitasking::ISwitchItem * *);
				long _VectorReplaceAll<IVector_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1>,Internal::ComposableShell::Multitasking::IVirtualDesktop *>(IVector_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1> *,unsigned int,Internal::ComposableShell::Multitasking::IVirtualDesktop * *);
				long _VectorReplaceAll<IVector_impl<Internal::Shell::Chaining::IChainLink *,1>,Internal::Shell::Chaining::IChainLink *>(IVector_impl<Internal::Shell::Chaining::IChainLink *,1> *,unsigned int,Internal::Shell::Chaining::IChainLink * *);
				long _VectorReplaceAll<IVector_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1>,Internal::Shell::ViewManagerInterop::IViewWrapper *>(IVector_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1> *,unsigned int,Internal::Shell::ViewManagerInterop::IViewWrapper * *);
				long _VectorReplaceAll<IVector_impl<unsigned int,1>,unsigned int>(IVector_impl<unsigned int,1> *,unsigned int,unsigned int *);
				void _Cleanup<Internal::ComposableShell::ITreeNode,unsigned int>(Internal::ComposableShell::ITreeNode * * const,unsigned int);
				void _Cleanup<Internal::ComposableShell::Multitasking::ISwitchItem,unsigned int>(Internal::ComposableShell::Multitasking::ISwitchItem * * const,unsigned int);
				void _Cleanup<Internal::ComposableShell::Multitasking::IVirtualDesktop,unsigned int>(Internal::ComposableShell::Multitasking::IVirtualDesktop * * const,unsigned int);
				void _Cleanup<Internal::ComposableShell::Tabs::IShellTab,unsigned int>(Internal::ComposableShell::Tabs::IShellTab * * const,unsigned int);
				void _Cleanup<Internal::Data::Activities::IGetCurrentActivityForViewOperationResults,unsigned int>(Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * * const,unsigned int);
				void _Cleanup<Internal::Shell::Chaining::IChainLink,unsigned int>(Internal::Shell::Chaining::IChainLink * * const,unsigned int);
				void _Cleanup<Internal::Shell::ViewManagerInterop::IViewWrapper,unsigned int>(Internal::Shell::ViewManagerInterop::IViewWrapper * * const,unsigned int);
				void _Cleanup<UI::ViewManagement::Core::ICoreInputViewOcclusion,unsigned int>(UI::ViewManagement::Core::ICoreInputViewOcclusion * * const,unsigned int);
				void _Cleanup<unsigned int>(HSTRING__ * *,unsigned int);
			};

			struct IIterator_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,HSTRING__ * *,unsigned int *);
			};

			struct IIterator_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1>
			{
				virtual long GetMany(unsigned int,Internal::ComposableShell::Tabs::IShellTab * *,unsigned int *);
			};

			struct IIterator_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1>
			{
				virtual long GetMany(unsigned int,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * *,unsigned int *);
			};

			struct IIterator_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1>
			{
				virtual long GetMany(unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int *);
			};

			struct IIterator_impl<Internal::ComposableShell::ITreeNode *,1>
			{
				virtual long GetMany(unsigned int,Internal::ComposableShell::ITreeNode * *,unsigned int *);
			};

			struct IIterator_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1>
			{
				virtual long GetMany(unsigned int,Internal::ComposableShell::Multitasking::ISwitchItem * *,unsigned int *);
			};

			struct IIterator_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1>
			{
				virtual long GetMany(unsigned int,Internal::ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int *);
			};

			struct IIterator_impl<Internal::Shell::Chaining::IChainLink *,1>
			{
				virtual long GetMany(unsigned int,Internal::Shell::Chaining::IChainLink * *,unsigned int *);
			};

			struct IIterator_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1>
			{
				virtual long GetMany(unsigned int,Internal::Shell::ViewManagerInterop::IViewWrapper * *,unsigned int *);
			};

			struct IIterator_impl<unsigned int,1>
			{
				virtual long GetMany(unsigned int,unsigned int *,unsigned int *);
			};

			struct IVector<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^>
			{
				virtual IVectorView<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> ^ GetView();
			};

			struct IVectorView<Internal::ComposableShell::Multitasking::ISwitchItem ^>
			{
				struct Size
				{
					virtual unsigned int get();
				};

				virtual Internal::ComposableShell::Multitasking::ISwitchItem ^ GetAt(unsigned int);
			};

			struct IVectorView<Internal::ComposableShell::Multitasking::IVirtualDesktop ^>
			{
				struct Size
				{
					virtual unsigned int get();
				};

				virtual Internal::ComposableShell::Multitasking::IVirtualDesktop ^ GetAt(unsigned int);
			};

			struct IVectorView<UI::Xaml::Markup::IXamlMetadataProvider ^>
			{
				struct Size
				{
					virtual unsigned int get();
				};

				virtual UI::Xaml::Markup::IXamlMetadataProvider ^ GetAt(unsigned int);
			};

			struct IVectorView_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::ComposableShell::Tabs::IShellTab * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::ComposableShell::ITreeNode *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::ComposableShell::ITreeNode * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::ComposableShell::Multitasking::ISwitchItem * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::Shell::Chaining::IChainLink *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Shell::Chaining::IChainLink * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Shell::ViewManagerInterop::IViewWrapper * *,unsigned int *);
			};

			struct IVectorView_impl<unsigned int,1>
			{
				virtual long GetMany(unsigned int,unsigned int,unsigned int *,unsigned int *);
			};

			struct IVector_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,HSTRING__ * *);
			};

			struct IVector_impl<Internal::AggregateType<Internal::ComposableShell::Tabs::ShellTab *,Internal::ComposableShell::Tabs::IShellTab *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::ComposableShell::Tabs::IShellTab * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Internal::ComposableShell::Tabs::IShellTab * *);
			};

			struct IVector_impl<Internal::AggregateType<Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * *);
			};

			struct IVector_impl<Internal::AggregateType<UI::ViewManagement::Core::CoreInputViewOcclusion *,UI::ViewManagement::Core::ICoreInputViewOcclusion *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *);
			};

			struct IVector_impl<Internal::ComposableShell::ITreeNode *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::ComposableShell::ITreeNode * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Internal::ComposableShell::ITreeNode * *);
			};

			struct IVector_impl<Internal::ComposableShell::Multitasking::ISwitchItem *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::ComposableShell::Multitasking::ISwitchItem * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Internal::ComposableShell::Multitasking::ISwitchItem * *);
			};

			struct IVector_impl<Internal::ComposableShell::Multitasking::IVirtualDesktop *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Internal::ComposableShell::Multitasking::IVirtualDesktop * *);
			};

			struct IVector_impl<Internal::Shell::Chaining::IChainLink *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Shell::Chaining::IChainLink * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Internal::Shell::Chaining::IChainLink * *);
			};

			struct IVector_impl<Internal::Shell::ViewManagerInterop::IViewWrapper *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Shell::ViewManagerInterop::IViewWrapper * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Internal::Shell::ViewManagerInterop::IViewWrapper * *);
			};

			struct IVector_impl<unsigned int,1>
			{
				virtual long GetMany(unsigned int,unsigned int,unsigned int *,unsigned int *);
				virtual long ReplaceAll(unsigned int,unsigned int *);
			};

			namespace Internal
			{
				struct SimpleVectorIterator<ApplicationModel::WindowingEnvironment::DisplayRegionId,Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<ApplicationModel::WindowingEnvironment::DisplayRegionId,Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,XWinRT::IntVersionTag,1>(Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> > *,SimpleVectorIterator<ApplicationModel::WindowingEnvironment::DisplayRegionId,Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> > *,SimpleVectorIterator<ApplicationModel::WindowingEnvironment::DisplayRegionId,Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,ApplicationModel::WindowingEnvironment::DisplayRegionId *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(ApplicationModel::WindowingEnvironment::DisplayRegionId *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<ComposableShell::ITreeNode *,Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<ComposableShell::ITreeNode *,Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,XWinRT::IntVersionTag,1>(Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> > *,SimpleVectorIterator<ComposableShell::ITreeNode *,Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> > *,SimpleVectorIterator<ComposableShell::ITreeNode *,Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,ComposableShell::ITreeNode * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(ComposableShell::ITreeNode * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<ComposableShell::Multitasking::ISwitchItem *,Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<ComposableShell::Multitasking::ISwitchItem *,Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,XWinRT::IntVersionTag,0>(Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> > *,SimpleVectorIterator<ComposableShell::Multitasking::ISwitchItem *,Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,XWinRT::IntVersionTag,0>::permission);
					static long Make(Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> > *,SimpleVectorIterator<ComposableShell::Multitasking::ISwitchItem *,Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,XWinRT::IntVersionTag,0> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,ComposableShell::Multitasking::ISwitchItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(ComposableShell::Multitasking::ISwitchItem * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<ComposableShell::Multitasking::IVirtualDesktop *,Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<ComposableShell::Multitasking::IVirtualDesktop *,Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,XWinRT::IntVersionTag,0>(Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> > *,SimpleVectorIterator<ComposableShell::Multitasking::IVirtualDesktop *,Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,XWinRT::IntVersionTag,0>::permission);
					static long Make(Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> > *,SimpleVectorIterator<ComposableShell::Multitasking::IVirtualDesktop *,Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,XWinRT::IntVersionTag,0> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(ComposableShell::Multitasking::IVirtualDesktop * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<ComposableShell::Tabs::ShellTab *,Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<ComposableShell::Tabs::ShellTab *,Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,XWinRT::IntVersionTag,1>(Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> > *,SimpleVectorIterator<ComposableShell::Tabs::ShellTab *,Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> > *,SimpleVectorIterator<ComposableShell::Tabs::ShellTab *,Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,ComposableShell::Tabs::IShellTab * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(ComposableShell::Tabs::IShellTab * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<Data::Activities::GetCurrentActivityForViewOperationResults *,Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<Data::Activities::GetCurrentActivityForViewOperationResults *,Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,XWinRT::IntVersionTag,1>(Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> > *,SimpleVectorIterator<Data::Activities::GetCurrentActivityForViewOperationResults *,Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> > *,SimpleVectorIterator<Data::Activities::GetCurrentActivityForViewOperationResults *,Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,Data::Activities::IGetCurrentActivityForViewOperationResults * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(Data::Activities::IGetCurrentActivityForViewOperationResults * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(HSTRING__ * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<Shell::Chaining::IChainLink *,Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> >,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<Shell::Chaining::IChainLink *,Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> >,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,XWinRT::IntVersionTag,1>(Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> > *,SimpleVectorIterator<Shell::Chaining::IChainLink *,Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> >,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> > *,SimpleVectorIterator<Shell::Chaining::IChainLink *,Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> >,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,Shell::Chaining::IChainLink * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(Shell::Chaining::IChainLink * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<Shell::ViewManagerInterop::IViewWrapper *,Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<Shell::ViewManagerInterop::IViewWrapper *,Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,XWinRT::IntVersionTag,1>(Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> > *,SimpleVectorIterator<Shell::ViewManagerInterop::IViewWrapper *,Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> > *,SimpleVectorIterator<Shell::ViewManagerInterop::IViewWrapper *,Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,Shell::ViewManagerInterop::IViewWrapper * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(Shell::ViewManagerInterop::IViewWrapper * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,Vector<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,DefaultVectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,Vector<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,DefaultVectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,XWinRT::IntVersionTag,0>(Vector<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,DefaultVectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> > *,SimpleVectorIterator<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,Vector<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,DefaultVectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,XWinRT::IntVersionTag,0>::permission);
					static long Make(Vector<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,DefaultVectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> > *,SimpleVectorIterator<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,Vector<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,DefaultVectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,XWinRT::IntVersionTag,0> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<UI::ViewManagement::Core::CoreInputViewOcclusion *,Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> >,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<UI::ViewManagement::Core::CoreInputViewOcclusion *,Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> >,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,XWinRT::IntVersionTag,0>(Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> > *,SimpleVectorIterator<UI::ViewManagement::Core::CoreInputViewOcclusion *,Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> >,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,XWinRT::IntVersionTag,0>::permission);
					static long Make(Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> > *,SimpleVectorIterator<UI::ViewManagement::Core::CoreInputViewOcclusion *,Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> >,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,XWinRT::IntVersionTag,0> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(UI::ViewManagement::Core::ICoreInputViewOcclusion * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<unsigned int,Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> >,DefaultLifetimeTraits<unsigned int>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<unsigned int,Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> >,DefaultLifetimeTraits<unsigned int>,XWinRT::IntVersionTag,1>(Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> > *,SimpleVectorIterator<unsigned int,Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> >,DefaultLifetimeTraits<unsigned int>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> > *,SimpleVectorIterator<unsigned int,Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> >,DefaultLifetimeTraits<unsigned int>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(unsigned int *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<ApplicationModel::WindowingEnvironment::DisplayRegionId,Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,XWinRT::IntVersionTag,1>
				{
					virtual long First(IIterator<ApplicationModel::WindowingEnvironment::DisplayRegionId> * *);
					virtual long GetAt(unsigned int,ApplicationModel::WindowingEnvironment::DisplayRegionId *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ApplicationModel::WindowingEnvironment::DisplayRegionId *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(ApplicationModel::WindowingEnvironment::DisplayRegionId,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<ComposableShell::ITreeNode *,Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<ComposableShell::ITreeNode *,Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,XWinRT::IntVersionTag,1>(Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> > *,SimpleVectorView<ComposableShell::ITreeNode *,Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<ComposableShell::ITreeNode *> * *);
					virtual long GetAt(unsigned int,ComposableShell::ITreeNode * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ComposableShell::ITreeNode * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(ComposableShell::ITreeNode *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<ComposableShell::Multitasking::ISwitchItem *,Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorView<ComposableShell::Multitasking::ISwitchItem *,Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,XWinRT::IntVersionTag,0>(Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> > *,SimpleVectorView<ComposableShell::Multitasking::ISwitchItem *,Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,XWinRT::IntVersionTag,0>::permission);
					virtual long First(IIterator<ComposableShell::Multitasking::ISwitchItem *> * *);
					virtual long GetAt(unsigned int,ComposableShell::Multitasking::ISwitchItem * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ComposableShell::Multitasking::ISwitchItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(ComposableShell::Multitasking::ISwitchItem *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<ComposableShell::Multitasking::IVirtualDesktop *,Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorView<ComposableShell::Multitasking::IVirtualDesktop *,Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,XWinRT::IntVersionTag,0>(Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> > *,SimpleVectorView<ComposableShell::Multitasking::IVirtualDesktop *,Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> >,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,XWinRT::IntVersionTag,0>::permission);
					virtual long First(IIterator<ComposableShell::Multitasking::IVirtualDesktop *> * *);
					virtual long GetAt(unsigned int,ComposableShell::Multitasking::IVirtualDesktop * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(ComposableShell::Multitasking::IVirtualDesktop *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<ComposableShell::Tabs::ShellTab *,Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<ComposableShell::Tabs::ShellTab *,Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,XWinRT::IntVersionTag,1>(Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> > *,SimpleVectorView<ComposableShell::Tabs::ShellTab *,Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> >,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<ComposableShell::Tabs::ShellTab *> * *);
					virtual long GetAt(unsigned int,ComposableShell::Tabs::IShellTab * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ComposableShell::Tabs::IShellTab * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(ComposableShell::Tabs::IShellTab *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *,Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *,Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,XWinRT::IntVersionTag,1>(Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> > *,SimpleVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *,Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<Data::Activities::GetCurrentActivityForViewOperationResults *> * *);
					virtual long GetAt(unsigned int,Data::Activities::IGetCurrentActivityForViewOperationResults * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Data::Activities::IGetCurrentActivityForViewOperationResults * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(Data::Activities::IGetCurrentActivityForViewOperationResults *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<Shell::Chaining::IChainLink *,Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> >,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<Shell::Chaining::IChainLink *,Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> >,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,XWinRT::IntVersionTag,1>(Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> > *,SimpleVectorView<Shell::Chaining::IChainLink *,Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> >,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<Shell::Chaining::IChainLink *> * *);
					virtual long GetAt(unsigned int,Shell::Chaining::IChainLink * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Shell::Chaining::IChainLink * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(Shell::Chaining::IChainLink *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<Shell::ViewManagerInterop::IViewWrapper *,Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<Shell::ViewManagerInterop::IViewWrapper *,Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,XWinRT::IntVersionTag,1>(Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> > *,SimpleVectorView<Shell::ViewManagerInterop::IViewWrapper *,Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<Shell::ViewManagerInterop::IViewWrapper *> * *);
					virtual long GetAt(unsigned int,Shell::ViewManagerInterop::IViewWrapper * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Shell::ViewManagerInterop::IViewWrapper * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(Shell::ViewManagerInterop::IViewWrapper *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,Vector<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,DefaultVectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,XWinRT::IntVersionTag,0>
				{
					virtual long First(IIterator<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> * *);
					virtual long GetAt(unsigned int,UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<UI::ViewManagement::Core::CoreInputViewOcclusion *,Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> >,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorView<UI::ViewManagement::Core::CoreInputViewOcclusion *,Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> >,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,XWinRT::IntVersionTag,0>(Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> > *,SimpleVectorView<UI::ViewManagement::Core::CoreInputViewOcclusion *,Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> >,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,XWinRT::IntVersionTag,0>::permission);
					virtual long First(IIterator<UI::ViewManagement::Core::CoreInputViewOcclusion *> * *);
					virtual long GetAt(unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(UI::ViewManagement::Core::ICoreInputViewOcclusion *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<unsigned int,Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> >,DefaultLifetimeTraits<unsigned int>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<unsigned int,Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> >,DefaultLifetimeTraits<unsigned int>,XWinRT::IntVersionTag,1>(Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> > *,SimpleVectorView<unsigned int,Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> >,DefaultLifetimeTraits<unsigned int>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<unsigned int> * *);
					virtual long GetAt(unsigned int,unsigned int *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,unsigned int *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(unsigned int,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >
				{
					long IndexOfInternal(ApplicationModel::WindowingEnvironment::DisplayRegionId *,unsigned int,ApplicationModel::WindowingEnvironment::DisplayRegionId,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,ApplicationModel::WindowingEnvironment::DisplayRegionId,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(ApplicationModel::WindowingEnvironment::DisplayRegionId *,unsigned int);
					void _EraseAll(ApplicationModel::WindowingEnvironment::DisplayRegionId * *,unsigned int *);
				protected:
					virtual ~Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >();
				public:
					Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >(ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate const &,Vector<ApplicationModel::WindowingEnvironment::DisplayRegionId,ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0> >::permission);
					virtual long Append(ApplicationModel::WindowingEnvironment::DisplayRegionId);
					virtual long Clear();
					virtual long First(IIterator<ApplicationModel::WindowingEnvironment::DisplayRegionId> * *);
					virtual long GetAt(unsigned int,ApplicationModel::WindowingEnvironment::DisplayRegionId *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ApplicationModel::WindowingEnvironment::DisplayRegionId *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<ApplicationModel::WindowingEnvironment::DisplayRegionId> * *);
					virtual long IndexOf(ApplicationModel::WindowingEnvironment::DisplayRegionId,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,ApplicationModel::WindowingEnvironment::DisplayRegionId);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,ApplicationModel::WindowingEnvironment::DisplayRegionId *);
					virtual long SetAt(unsigned int,ApplicationModel::WindowingEnvironment::DisplayRegionId);
					virtual long add_VectorChanged(VectorChangedEventHandler<ApplicationModel::WindowingEnvironment::DisplayRegionId> *,EventRegistrationToken *);
					virtual long get_Size(unsigned int *);
					virtual long remove_VectorChanged(EventRegistrationToken);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<ComposableShell::ITreeNode> *,unsigned int,ComposableShell::ITreeNode *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,ComposableShell::ITreeNode *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<ComposableShell::ITreeNode> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<ComposableShell::ITreeNode> * *,unsigned int *);
				public:
					Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> >(DefaultEqualityPredicate<ComposableShell::ITreeNode *> const &,Vector<ComposableShell::ITreeNode *,DefaultEqualityPredicate<ComposableShell::ITreeNode *>,DefaultLifetimeTraits<ComposableShell::ITreeNode *>,VectorOptions<ComposableShell::ITreeNode *,0,1,0> >::permission);
					virtual long Append(ComposableShell::ITreeNode *);
					virtual long Clear();
					virtual long First(IIterator<ComposableShell::ITreeNode *> * *);
					virtual long GetAt(unsigned int,ComposableShell::ITreeNode * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ComposableShell::ITreeNode * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<ComposableShell::ITreeNode *> * *);
					virtual long IndexOf(ComposableShell::ITreeNode *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,ComposableShell::ITreeNode *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,ComposableShell::ITreeNode * *);
					virtual long SetAt(unsigned int,ComposableShell::ITreeNode *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> >
				{
					long IndexOfInternal(ComposableShell::Multitasking::ISwitchItem * *,unsigned int,ComposableShell::Multitasking::ISwitchItem *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,ComposableShell::Multitasking::ISwitchItem *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(ComposableShell::Multitasking::ISwitchItem * *,unsigned int);
					void _EraseAll(ComposableShell::Multitasking::ISwitchItem * * *,unsigned int *);
				public:
					Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> >(DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *> const &,Vector<ComposableShell::Multitasking::ISwitchItem *,DefaultEqualityPredicate<ComposableShell::Multitasking::ISwitchItem *>,DefaultLifetimeTraits<ComposableShell::Multitasking::ISwitchItem *>,DefaultVectorOptions<ComposableShell::Multitasking::ISwitchItem *> >::permission);
					virtual long Append(ComposableShell::Multitasking::ISwitchItem *);
					virtual long Clear();
					virtual long First(IIterator<ComposableShell::Multitasking::ISwitchItem *> * *);
					virtual long GetAt(unsigned int,ComposableShell::Multitasking::ISwitchItem * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ComposableShell::Multitasking::ISwitchItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<ComposableShell::Multitasking::ISwitchItem *> * *);
					virtual long IndexOf(ComposableShell::Multitasking::ISwitchItem *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,ComposableShell::Multitasking::ISwitchItem *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,ComposableShell::Multitasking::ISwitchItem * *);
					virtual long SetAt(unsigned int,ComposableShell::Multitasking::ISwitchItem *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> >
				{
					long IndexOfInternal(ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int,ComposableShell::Multitasking::IVirtualDesktop *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,ComposableShell::Multitasking::IVirtualDesktop *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int);
					void _EraseAll(ComposableShell::Multitasking::IVirtualDesktop * * *,unsigned int *);
				public:
					Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> >(DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *> const &,Vector<ComposableShell::Multitasking::IVirtualDesktop *,DefaultEqualityPredicate<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultLifetimeTraits<ComposableShell::Multitasking::IVirtualDesktop *>,DefaultVectorOptions<ComposableShell::Multitasking::IVirtualDesktop *> >::permission);
					virtual long Append(ComposableShell::Multitasking::IVirtualDesktop *);
					virtual long Clear();
					virtual long First(IIterator<ComposableShell::Multitasking::IVirtualDesktop *> * *);
					virtual long GetAt(unsigned int,ComposableShell::Multitasking::IVirtualDesktop * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ComposableShell::Multitasking::IVirtualDesktop * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<ComposableShell::Multitasking::IVirtualDesktop *> * *);
					virtual long IndexOf(ComposableShell::Multitasking::IVirtualDesktop *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,ComposableShell::Multitasking::IVirtualDesktop *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,ComposableShell::Multitasking::IVirtualDesktop * *);
					virtual long SetAt(unsigned int,ComposableShell::Multitasking::IVirtualDesktop *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<ComposableShell::Tabs::IShellTab> *,unsigned int,ComposableShell::Tabs::IShellTab *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,ComposableShell::Tabs::IShellTab *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<ComposableShell::Tabs::IShellTab> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<ComposableShell::Tabs::IShellTab> * *,unsigned int *);
				public:
					Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> >(DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *> const &,Vector<ComposableShell::Tabs::ShellTab *,DefaultEqualityPredicate<ComposableShell::Tabs::ShellTab *>,DefaultLifetimeTraits<ComposableShell::Tabs::ShellTab *>,VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0> >::permission);
					virtual long Append(ComposableShell::Tabs::IShellTab *);
					virtual long Clear();
					virtual long First(IIterator<ComposableShell::Tabs::ShellTab *> * *);
					virtual long GetAt(unsigned int,ComposableShell::Tabs::IShellTab * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ComposableShell::Tabs::IShellTab * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<ComposableShell::Tabs::ShellTab *> * *);
					virtual long IndexOf(ComposableShell::Tabs::IShellTab *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,ComposableShell::Tabs::IShellTab *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,ComposableShell::Tabs::IShellTab * *);
					virtual long SetAt(unsigned int,ComposableShell::Tabs::IShellTab *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<Data::Activities::IGetCurrentActivityForViewOperationResults> *,unsigned int,Data::Activities::IGetCurrentActivityForViewOperationResults *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,Data::Activities::IGetCurrentActivityForViewOperationResults *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<Data::Activities::IGetCurrentActivityForViewOperationResults> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<Data::Activities::IGetCurrentActivityForViewOperationResults> * *,unsigned int *);
				public:
					Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >(DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *> const &,Vector<Data::Activities::GetCurrentActivityForViewOperationResults *,DefaultEqualityPredicate<Data::Activities::GetCurrentActivityForViewOperationResults *>,DefaultLifetimeTraits<Data::Activities::GetCurrentActivityForViewOperationResults *>,VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0> >::permission);
					virtual long Append(Data::Activities::IGetCurrentActivityForViewOperationResults *);
					virtual long Clear();
					virtual long First(IIterator<Data::Activities::GetCurrentActivityForViewOperationResults *> * *);
					virtual long GetAt(unsigned int,Data::Activities::IGetCurrentActivityForViewOperationResults * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Data::Activities::IGetCurrentActivityForViewOperationResults * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *> * *);
					virtual long IndexOf(Data::Activities::IGetCurrentActivityForViewOperationResults *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,Data::Activities::IGetCurrentActivityForViewOperationResults *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,Data::Activities::IGetCurrentActivityForViewOperationResults * *);
					virtual long SetAt(unsigned int,Data::Activities::IGetCurrentActivityForViewOperationResults *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >
				{
					long IndexOfInternal(HSTRING__ * *,unsigned int,HSTRING__ *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,HSTRING__ *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(HSTRING__ * *,unsigned int);
					void _EraseAll(HSTRING__ * * *,unsigned int *);
				public:
					Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >(DefaultEqualityPredicate<HSTRING__ *> const &,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >::permission);
					virtual long Append(HSTRING__ *);
					virtual long Clear();
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<HSTRING__ *> * *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,HSTRING__ *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,HSTRING__ * *);
					virtual long SetAt(unsigned int,HSTRING__ *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<Shell::Chaining::IChainLink> *,unsigned int,Shell::Chaining::IChainLink *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,Shell::Chaining::IChainLink *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<Shell::Chaining::IChainLink> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<Shell::Chaining::IChainLink> * *,unsigned int *);
				public:
					Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> >(DefaultEqualityPredicate<Shell::Chaining::IChainLink *> const &,Vector<Shell::Chaining::IChainLink *,DefaultEqualityPredicate<Shell::Chaining::IChainLink *>,DefaultLifetimeTraits<Shell::Chaining::IChainLink *>,VectorOptions<Shell::Chaining::IChainLink *,0,1,0> >::permission);
					virtual long Append(Shell::Chaining::IChainLink *);
					virtual long Clear();
					virtual long First(IIterator<Shell::Chaining::IChainLink *> * *);
					virtual long GetAt(unsigned int,Shell::Chaining::IChainLink * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Shell::Chaining::IChainLink * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<Shell::Chaining::IChainLink *> * *);
					virtual long IndexOf(Shell::Chaining::IChainLink *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,Shell::Chaining::IChainLink *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,Shell::Chaining::IChainLink * *);
					virtual long SetAt(unsigned int,Shell::Chaining::IChainLink *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<Shell::ViewManagerInterop::IViewWrapper> *,unsigned int,Shell::ViewManagerInterop::IViewWrapper *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,Shell::ViewManagerInterop::IViewWrapper *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<Shell::ViewManagerInterop::IViewWrapper> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<Shell::ViewManagerInterop::IViewWrapper> * *,unsigned int *);
				public:
					Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >(DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *> const &,Vector<Shell::ViewManagerInterop::IViewWrapper *,DefaultEqualityPredicate<Shell::ViewManagerInterop::IViewWrapper *>,DefaultLifetimeTraits<Shell::ViewManagerInterop::IViewWrapper *>,VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0> >::permission);
					virtual long Append(Shell::ViewManagerInterop::IViewWrapper *);
					virtual long Clear();
					virtual long First(IIterator<Shell::ViewManagerInterop::IViewWrapper *> * *);
					virtual long GetAt(unsigned int,Shell::ViewManagerInterop::IViewWrapper * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Shell::ViewManagerInterop::IViewWrapper * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<Shell::ViewManagerInterop::IViewWrapper *> * *);
					virtual long IndexOf(Shell::ViewManagerInterop::IViewWrapper *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,Shell::ViewManagerInterop::IViewWrapper *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,Shell::ViewManagerInterop::IViewWrapper * *);
					virtual long SetAt(unsigned int,Shell::ViewManagerInterop::IViewWrapper *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,DefaultVectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >
				{
					long IndexOfInternal(UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption *,unsigned int,UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption *,unsigned int);
					void _EraseAll(UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption * *,unsigned int *);
				public:
					Vector<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,DefaultVectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >(KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality const &,Vector<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,DefaultVectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> >::permission);
					virtual long Append(UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption);
					virtual long Clear();
					virtual long First(IIterator<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> * *);
					virtual long GetAt(unsigned int,UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> * *);
					virtual long IndexOf(UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption *);
					virtual long SetAt(unsigned int,UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> >
				{
					long IndexOfInternal(UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int);
					void _EraseAll(UI::ViewManagement::Core::ICoreInputViewOcclusion * * *,unsigned int *);
				public:
					Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> >(DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *> const &,Vector<UI::ViewManagement::Core::CoreInputViewOcclusion *,DefaultEqualityPredicate<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultLifetimeTraits<UI::ViewManagement::Core::CoreInputViewOcclusion *>,DefaultVectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *> >::permission);
					virtual long Append(UI::ViewManagement::Core::ICoreInputViewOcclusion *);
					virtual long Clear();
					virtual long First(IIterator<UI::ViewManagement::Core::CoreInputViewOcclusion *> * *);
					virtual long GetAt(unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<UI::ViewManagement::Core::CoreInputViewOcclusion *> * *);
					virtual long IndexOf(UI::ViewManagement::Core::ICoreInputViewOcclusion *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion * *);
					virtual long SetAt(unsigned int,UI::ViewManagement::Core::ICoreInputViewOcclusion *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> >
				{
					long IndexOfInternal(unsigned int *,unsigned int,unsigned int,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,unsigned int,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(unsigned int *,unsigned int);
					void _EraseAll(unsigned int * *,unsigned int *);
				public:
					Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> >(DefaultEqualityPredicate<unsigned int> const &,Vector<unsigned int,DefaultEqualityPredicate<unsigned int>,DefaultLifetimeTraits<unsigned int>,VectorOptions<unsigned int,0,1,0> >::permission);
					virtual long Append(unsigned int);
					virtual long Clear();
					virtual long First(IIterator<unsigned int> * *);
					virtual long GetAt(unsigned int,unsigned int *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,unsigned int *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<unsigned int> * *);
					virtual long IndexOf(unsigned int,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,unsigned int);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,unsigned int *);
					virtual long SetAt(unsigned int,unsigned int);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct VectorChangedEventArgs
				{
					VectorChangedEventArgs(CollectionChange,unsigned int);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_CollectionChange(CollectionChange *);
					virtual long get_Index(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct VectorOptions<ApplicationModel::WindowingEnvironment::DisplayRegionId,1,1,0>
				{
					static long RaiseEvent(XWinRT::detail::ReentrancyGuard<1> &,GitEventSource<VectorChangedEventHandler<ApplicationModel::WindowingEnvironment::DisplayRegionId>,Microsoft::WRL::InvokeModeOptions<-2> > &,IObservableVector<ApplicationModel::WindowingEnvironment::DisplayRegionId> *,CollectionChange,unsigned int);
				};

				struct VectorOptions<ComposableShell::ITreeNode *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<ComposableShell::Multitasking::ISwitchItem *,0,0,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<ComposableShell::Multitasking::IVirtualDesktop *,0,0,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<ComposableShell::Tabs::ShellTab *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<Data::Activities::GetCurrentActivityForViewOperationResults *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<HSTRING__ *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<Shell::Chaining::IChainLink *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<Shell::ViewManagerInterop::IViewWrapper *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,0,0,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<UI::ViewManagement::Core::CoreInputViewOcclusion *,0,0,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<unsigned int,0,1,0>
				{
					static long RaiseEvent(...);
				};

			};

			struct VectorChangedEventHandler<Internal::ComposableShell::Multitasking::ISwitchItem ^>
			{
				virtual long __abi_QueryInterface(Platform::Guid &,void * *);
				virtual unsigned long __abi_AddRef();
				virtual unsigned long __abi_Release();
				virtual void Invoke(IObservableVector<Internal::ComposableShell::Multitasking::ISwitchItem ^> ^,IVectorChangedEventArgs ^);
			};

			struct VectorChangedEventHandler<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^>
			{
				virtual long __abi_QueryInterface(Platform::Guid &,void * *);
				virtual unsigned long __abi_AddRef();
				virtual unsigned long __abi_Release();
				virtual void Invoke(IObservableVector<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> ^,IVectorChangedEventArgs ^);
			};

			Platform::Collections::VectorViewIterator<Internal::ComposableShell::Multitasking::ISwitchItem ^> end<Internal::ComposableShell::Multitasking::ISwitchItem ^>(Collections::IVectorView<Internal::ComposableShell::Multitasking::ISwitchItem ^> ^);
		};

		namespace IAsyncInfo
		{
			struct ErrorCode
			{
				virtual HResult get();
			};

		};

		struct IAsyncOperation<bool>
		{
			virtual bool GetResults();
		};

		struct ITypedEventHandler<Internal::ComposableShell::Tabs::TabDataModelWatcher *,Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *>
		{
			ITypedEventHandler<Internal::ComposableShell::Tabs::TabDataModelWatcher *,Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *>();
		};

		struct TypedEventHandler<Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^>
		{
			TypedEventHandler<Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^><Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl,void ( Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::*)(Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^)>(Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl ^,void ( Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::*)(Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^),Platform::CallbackContext,bool);
			virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
			virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
			virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
			virtual long __abi_QueryInterface(Platform::Guid &,void * *);
			virtual unsigned long __abi_AddRef();
			virtual unsigned long __abi_Release();
			virtual void Invoke(Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^);
		};

		struct TypedEventHandler<Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^>
		{
			TypedEventHandler<Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^><<lambda_dfd4c4fe7dd339db13c17a1e4e5cfd6e> >(<lambda_dfd4c4fe7dd339db13c17a1e4e5cfd6e>,Platform::CallbackContext,bool);
			virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
			virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
			virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
			virtual long __abi_QueryInterface(Platform::Guid &,void * *);
			virtual unsigned long __abi_AddRef();
			virtual unsigned long __abi_Release();
			virtual void Invoke(Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^);
		};

		struct TypedEventHandler<Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource ^,Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs ^>
		{
			virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
			virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
			virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
			virtual long __abi_QueryInterface(Platform::Guid &,void * *);
			virtual unsigned long __abi_AddRef();
			virtual unsigned long __abi_Release();
			virtual void Invoke(Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource ^,Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs ^);
		};

		long ActivateInstance<Data::Json::IJsonObject>(HSTRING__ *,Data::Json::IJsonObject * *);
		long ActivateInstance<Microsoft::WRL::ComPtr<ApplicationModel::Contacts::IContactCardOptions> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ApplicationModel::Contacts::IContactCardOptions> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Collections::IMap<HSTRING__ *,IInspectable *> > >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::Collections::IMap<HSTRING__ *,IInspectable *> > >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Collections::IPropertySet> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::Collections::IPropertySet> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Data::Json::IJsonArray> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Data::Json::IJsonArray> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Globalization::IGeographicRegion> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Globalization::IGeographicRegion> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Internal::Shell::JumpView::IJumpViewParams> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Shell::JumpView::IJumpViewParams> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Internal::Shell::ModalExperience::IModalExperienceDefaultOptions> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Shell::ModalExperience::IModalExperienceDefaultOptions> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Internal::Shell::ShellLauncher::IShellLauncherManager> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Shell::ShellLauncher::IShellLauncherManager> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Management::Deployment::IPackageManager> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Management::Deployment::IPackageManager> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Data::Json::IJsonObjectStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Data::Json::IJsonObjectStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<IPropertyValueStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::IPropertyValueStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<IUriRuntimeClassFactory> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::IUriRuntimeClassFactory> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Internal::Shell::Holographic::IContextIdentifierStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Shell::Holographic::IContextIdentifierStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Internal::StateRepository::IApplicationStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::StateRepository::IApplicationStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Internal::StateRepository::IPackageStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::StateRepository::IPackageStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ICuratedCollectionInitializationStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ICuratedCollectionInitializationStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ICuratedCollectionSelectionHelpers> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::ICuratedCollectionSelectionHelpers> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManagerStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManagerStatics> >);
	};

	namespace Internal
	{
		namespace AssignedAccess
		{
			class AAManagerHelper
			{
				long GetAssignedAccessConfiguration(IAssignedAccessConfiguration * *);
				long GetAssignedAccessTypeForUserWithGroup(unsigned short const *,AssignedAccessType *);
				long GetAssignedAccessTypeForUserWithoutGroup(unsigned short const *,AssignedAccessType *);
			public:
				AAManagerHelper();
			};

			class AssignedAccessConfigStoreHelper
			{
				bool Initialize();
				unsigned long GetStoreVersion();
			};

			class AssignedAccessConfigStoreV0
			{
				bool IsValidProfile(HKEY__ *);
				virtual bool DoesGroupConfigExistInStore();
				virtual bool DoesProfileExistInStore(unsigned short const *);
				virtual bool IsGlobalProfileConfiguredInStore();
				virtual unsigned long GetVersion();
			public:
				static wistd::unique_ptr<AssignedAccessConfigStoreBase,wistd::default_delete<AssignedAccessConfigStoreBase> > CreateInstance();
			};

			class AssignedAccessConfigStoreV1
			{
				virtual bool DoesGroupConfigExistInStore();
				virtual bool DoesProfileExistInStore(unsigned short const *);
				virtual bool IsGlobalProfileConfiguredInStore();
				virtual unsigned long GetVersion();
			protected:
				virtual bool Initialize();
			public:
				static wistd::unique_ptr<AssignedAccessConfigStoreBase,wistd::default_delete<AssignedAccessConfigStoreBase> > CreateInstance();
			};

			class AssignedAccessConfigStoreV2
			{
				virtual bool IsGlobalProfileConfiguredInStore();
				virtual unsigned long GetVersion();
			public:
				static wistd::unique_ptr<AssignedAccessConfigStoreBase,wistd::default_delete<AssignedAccessConfigStoreBase> > CreateInstance();
			};

		};

		struct AsyncCallbackBase<CMarshaledInterfaceResult<Data::Activities::IGetCurrentActivityForViewOperationResults> >
		{
			virtual ~AsyncCallbackBase<CMarshaledInterfaceResult<Data::Activities::IGetCurrentActivityForViewOperationResults> >();
		};

		struct AsyncCallbackBase<CMarshaledInterfaceResult<Foundation::Collections::IVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *> > >
		{
			virtual ~AsyncCallbackBase<CMarshaledInterfaceResult<Foundation::Collections::IVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *> > >();
		};

		struct CMarshaledInterfaceResult<Data::Activities::IGetCurrentActivityForViewOperationResults>
		{
			long Get(Data::Activities::IGetCurrentActivityForViewOperationResults * *);
			void Close();
		};

		struct CMarshaledInterfaceResult<Foundation::Collections::IVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *> >
		{
			long Get(Foundation::Collections::IVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *> * *);
			long Set(Foundation::Collections::IVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *> *);
			void Close();
		};

		class ComTaskPool
		{
			struct CTaskWrapper<<lambda_08bdecb53d2454d61d2a3b3bfe9078f8> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_26b87ca59359fe239e5114e68fb2ebc3> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_28273f6668f79f5db2d6a9fae521721a> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_2982927e39568cdd3df99df702aa65a9> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_42dce70c870a3964e7319458b8bf7bca> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_4c0281b189a4f50ab192cc99e41387bc> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_7d4fab6c161d4dc93915730d1208882c> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_ba612c6bfe63a6e8fafaf220a28082f2> &>
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_c2fd7731c5ae0d37e65ea73be67c0f1b> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_c8b199a0feb076873244f725fed1af37> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_de7a847248f7e9ff51c83bca1460305a> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_dff7b450e7eee25fd5a246545de8ddb9> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_e02303751d4e49a7e603e0304fd9978e> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_edcf8a708a912462aa4ae38346069636> >
			{
				virtual void Run();
			};

			static long _MakeAndInitializeOnSTAThread<CLaunchActivatedEventArgs,ApplicationModel::Activation::IActivatedEventArgs,<lambda_999dc00085dcb4e97168c8687495f75d> >(TaskOptions,unsigned long,ApplicationModel::Activation::IActivatedEventArgs * *,<lambda_999dc00085dcb4e97168c8687495f75d> const &);
		public:
			static ComTaskPool::SThreadData tls_threadData;
			static long QueueTask<<lambda_ba612c6bfe63a6e8fafaf220a28082f2> &>(TaskApartment,TaskOptions,unsigned long,<lambda_ba612c6bfe63a6e8fafaf220a28082f2> &);
		};

		struct ComTaskPoolHandler
		{
			long Start(IComPoolTask *);
			static long _FireCompletion(IAsyncFireCompletion *);
		};

		namespace ComposableShell
		{
			namespace Multitasking
			{
				struct EvaluateItemEventArgs
				{
					EvaluateItemEventArgs(ISwitchItem ^,SwitchItemInclusion);
				};

				namespace IEvaluateItemEventArgs
				{
					struct Item
					{
						virtual ISwitchItem ^ get();
					};

				};

				namespace ISwitchItem
				{
					struct Data
					{
						virtual Platform::Object ^ get();
					};

					struct GroupingState
					{
						virtual SwitchItemGroupingState get();
					};

					struct IsClosable
					{
						virtual bool get();
					};

					struct SwitchItemChanged
					{
						virtual Foundation::EventRegistrationToken add(Foundation::TypedEventHandler<ISwitchItem ^,SwitchItemProperty> ^);
					};

				};

				namespace ISwitchItemCollectionChangedEventArgs
				{
					struct EventType
					{
						virtual SwitchItemCollectionChangedEventType get();
					};

					struct Item
					{
						virtual ISwitchItem ^ get();
					};

				};

				struct ISwitchItemDataSource
				{
					struct SwitchItemCollectionChanged
					{
						virtual Foundation::EventRegistrationToken add(Foundation::TypedEventHandler<ISwitchItemDataSource ^,ISwitchItemCollectionChangedEventArgs ^> ^);
					};

					struct SwitchItems
					{
						virtual Foundation::Collections::IVectorView<ISwitchItem ^> ^ get();
					};

					struct ZOrderSort
					{
						virtual ISwitchItemSort ^ get();
					};

					virtual SwitchItemDataView ^ CreateView();
				};

				namespace ISwitchItemDataView
				{
					struct EvaluateItem
					{
						virtual Foundation::EventRegistrationToken add(Foundation::TypedEventHandler<ISwitchItemDataView ^,IEvaluateItemEventArgs ^> ^);
					};

				};

				namespace IVirtualDesktop
				{
					struct Name
					{
						virtual Platform::String ^ get();
					};

				};

				namespace IVirtualDesktopCollectionChangedEventArgs
				{
					struct EventType
					{
						virtual VirtualDesktopCollectionChangedEventType get();
					};

				};

				struct IVirtualDesktopController
				{
					virtual IVirtualDesktop ^ CreateDesktop();
					virtual bool CanSwitchItemMoveDesktops(ISwitchItem ^);
					virtual bool IsSwitchItemPinnedToAllDesktops(ISwitchItem ^);
					virtual bool IsSwitchItemViewPinnedToAllDesktops(ISwitchItem ^);
				};

				namespace IVirtualDesktopDataSource
				{
					struct CurrentVirtualDesktop
					{
						virtual IVirtualDesktop ^ get();
					};

					struct VirtualDesktopCollectionChanged
					{
						virtual Foundation::EventRegistrationToken add(Foundation::TypedEventHandler<IVirtualDesktopDataSource ^,IVirtualDesktopCollectionChangedEventArgs ^> ^);
					};

					struct VirtualDesktops
					{
						virtual Foundation::Collections::IVectorView<IVirtualDesktop ^> ^ get();
					};

				};

				struct SwitchItemCollectionChangedEventArgs
				{
					SwitchItemCollectionChangedEventArgs(ISwitchItem ^,SwitchItemCollectionChangedEventType);
				};

				class SwitchItemDataViewImpl
				{
					struct EvaluateItem
					{
						virtual void raise(ISwitchItemDataView ^,IEvaluateItemEventArgs ^);
					};

					class SwitchItemCollectionChanged
					{
					protected:
						virtual void raise(ISwitchItemDataSource ^,ISwitchItemCollectionChangedEventArgs ^);
					};

					SwitchItemInclusion InternalEvaluateItem(ISwitchItem ^);
					void AddSwitchItem(ISwitchItem ^);
					void ConnectToDataSource(ISwitchItemDataSource ^);
					void DisconnectFromDataSource();
					void OnSourceCollectionChanged(ISwitchItemDataSource ^,ISwitchItemCollectionChangedEventArgs ^);
					void OnSwitchItemChanged(ISwitchItem ^,SwitchItemProperty);
					void RemoveSwitchItem(ISwitchItem ^);
					void UpdateAllItemState();
					void UpdateItemState(SwitchItemDataViewImpl::DataViewItemState *);
					~SwitchItemDataViewImpl();
				public:
					SwitchItemDataViewImpl();
					virtual void SetDataSource(ISwitchItemDataSource ^);
				};

			};

			struct NodeChangedEventArgs
			{
				NodeChangedEventArgs();
				virtual long get_Node(ITreeNode * *);
			};

			namespace Tabs
			{
				namespace IShellTab
				{
					struct Group
					{
						virtual ShellTabGroup ^ get();
					};

				};

				struct ITabController
				{
					virtual Foundation::IAsyncOperation<bool> ^ RequestSelectTabAsync(ShellTabGroup ^,ShellTab ^);
				};

				struct TabDroppedEventArgs
				{
					TabDroppedEventArgs();
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_DropIndex(int *);
					virtual long get_GroupId(ShellTabGroupId *);
					virtual long get_TabId(ShellTabId *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class TabSetMediator
				{
					static void TraceLogTabWindowSnapped(IApplicationView *,IShellTab *,WINDOW_SNAP_STATE);
					wil::com_ptr_t<IShellTab,wil::err_exception_policy> TryGetSelectedTabForView(IApplicationView *);
				public:
					TabSetMediator();
					long RuntimeClassInitialize();
					virtual long IsViewCompanionRestoreApp(ApplicationModel::WindowManagement::WindowId,unsigned char *);
					virtual long SubscribeToServices(IServiceProvider *);
					virtual long UnsubscribeFromServices(IServiceProvider *);
					virtual long WindowSnapStateChanged(IApplicationView *,WINDOW_SNAP_STATE);
					virtual long add_TabWindowSnappedWithOthers(Foundation::ITypedEventHandler<TabSetMediator *,TabWindowSnappedWithOthersEventArgs *> *,EventRegistrationToken *);
					virtual long remove_TabWindowSnappedWithOthers(EventRegistrationToken);
					virtual ~TabSetMediator();
				};

				struct TabSetMediatorStatics
				{
					static TrustLevel InternalGetTrustLevelStatic();
					static unsigned short const * InternalGetRuntimeClassNameStatic();
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(ITabSetMediator * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct TabTransferEventBroker
				{
					TabTransferEventBroker();
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RaiseTabDropped(ShellTabGroupId,ShellTabId,int);
					virtual long RaiseTabTransferCanceled(ShellTabId);
					virtual long RaiseTabTransferCompleted(ShellTabId);
					virtual long RaiseTabTransferReceiving(ShellTabId);
					virtual long RaiseTabTransferStarting(ShellTabId);
					virtual long RaiseTabViewProvided(ShellTabId,int);
					virtual long add_TabDropped(Foundation::ITypedEventHandler<TabTransferEventBroker *,TabDroppedEventArgs *> *,EventRegistrationToken *);
					virtual long add_TabTransferCanceled(Foundation::ITypedEventHandler<TabTransferEventBroker *,ShellTabId> *,EventRegistrationToken *);
					virtual long add_TabTransferCompleted(Foundation::ITypedEventHandler<TabTransferEventBroker *,ShellTabId> *,EventRegistrationToken *);
					virtual long add_TabTransferReceiving(Foundation::ITypedEventHandler<TabTransferEventBroker *,ShellTabId> *,EventRegistrationToken *);
					virtual long add_TabTransferStarting(Foundation::ITypedEventHandler<TabTransferEventBroker *,ShellTabId> *,EventRegistrationToken *);
					virtual long add_TabViewProvided(Foundation::ITypedEventHandler<TabTransferEventBroker *,TabViewProvidedEventArgs *> *,EventRegistrationToken *);
					virtual long remove_TabDropped(EventRegistrationToken);
					virtual long remove_TabTransferCanceled(EventRegistrationToken);
					virtual long remove_TabTransferCompleted(EventRegistrationToken);
					virtual long remove_TabTransferReceiving(EventRegistrationToken);
					virtual long remove_TabTransferStarting(EventRegistrationToken);
					virtual long remove_TabViewProvided(EventRegistrationToken);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
					virtual ~TabTransferEventBroker();
				};

				struct TabViewProvidedEventArgs
				{
					TabViewProvidedEventArgs();
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_TabId(ShellTabId *);
					virtual long get_ViewId(int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct TabWindowSnappedWithOthersEventArgs
				{
					TabWindowSnappedWithOthersEventArgs(IShellTab *,Foundation::Collections::IVectorView<ShellTab *> *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_OtherSnappedTabs(Foundation::Collections::IVectorView<ShellTab *> * *);
					virtual long get_SnappedTab(IShellTab * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct ViewTabEventArgs
				{
					ViewTabEventArgs(IApplicationView *,IShellTab *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Tab(IShellTab * *);
					virtual long get_View(ApplicationModel::WindowManagement::WindowId *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

			};

			class TreeNodeBase
			{
			protected:
				virtual void OnAddingChild(ITreeNode *);
				virtual void OnChildAdded(ITreeNode *);
				virtual void OnChildRemoved(ITreeNode *);
				virtual void OnParentDestroyed(ITreeNode *);
			public:
				TreeNodeBase();
				virtual long AddChild(ITreeNode *,unsigned int *);
				virtual long RemoveChild(unsigned int);
				virtual long add_NodeEvent(Foundation::ITypedEventHandler<ITreeNode *,ITreeNodeEventArgs *> *,EventRegistrationToken *);
				virtual long get_Children(Foundation::Collections::IVectorView<ITreeNode *> * *);
				virtual long get_Parent(ITreeNode * *);
				virtual long remove_NodeEvent(EventRegistrationToken);
				~TreeNodeBase();
			};

			struct TreeNodeEventArgsBase
			{
				virtual long get_EventType(TreeNodeEventType *);
			};

		};

		namespace Details
		{
			struct Git
			{
				Git();
				long Acquire();
			};

			struct GitInvokeHelper<Foundation::Collections::VectorChangedEventHandler<ApplicationModel::WindowingEnvironment::DisplayRegionId>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::Collections::VectorChangedEventHandler<ApplicationModel::WindowingEnvironment::DisplayRegionId>,GitPtr,2>();
				virtual long Invoke(Foundation::Collections::IObservableVector<ApplicationModel::WindowingEnvironment::DisplayRegionId> *,Foundation::Collections::IVectorChangedEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *>,GitPtr,2>();
				virtual long Invoke(ApplicationModel::Activation::ISplashScreen *,IInspectable *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<FamilySafety::AppLimits::FamilyAppUsageManager *,FamilySafety::AppLimits::AppUsageStateChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<FamilySafety::AppLimits::FamilyAppUsageManager *,FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> >,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<FamilySafety::AppLimits::FamilyAppUsageManager *,FamilySafety::AppLimits::AppUsageStateChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<FamilySafety::AppLimits::FamilyAppUsageManager *,FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> >,2>();
				virtual long Invoke(FamilySafety::AppLimits::IFamilyAppUsageManager *,FamilySafety::AppLimits::IAppUsageStateChangedEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,IInspectable *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,IInspectable *> >,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,IInspectable *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,IInspectable *> >,2>();
				virtual long Invoke(Shell::Holographic::IViewHostItem *,IInspectable *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IFrameworkViewTypeSetEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IFrameworkViewTypeSetEventArgs *> >,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IFrameworkViewTypeSetEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IFrameworkViewTypeSetEventArgs *> >,2>();
				virtual long Invoke(Shell::Holographic::IViewHostItem *,Shell::Holographic::IFrameworkViewTypeSetEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IPresentationReadyChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IPresentationReadyChangedEventArgs *> >,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IPresentationReadyChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IPresentationReadyChangedEventArgs *> >,2>();
				virtual long Invoke(Shell::Holographic::IViewHostItem *,Shell::Holographic::IPresentationReadyChangedEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::ITitleBarChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::ITitleBarChangedEventArgs *> >,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::ITitleBarChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::ITitleBarChangedEventArgs *> >,2>();
				virtual long Invoke(Shell::Holographic::IViewHostItem *,Shell::Holographic::ITitleBarChangedEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostItemEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostItemEventArgs *> >,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostItemEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostItemEventArgs *> >,2>();
				virtual long Invoke(Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostItemEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> >,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> >,2>();
				virtual long Invoke(Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewSizePreferencesChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewSizePreferencesChangedEventArgs *> >,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewSizePreferencesChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewSizePreferencesChangedEventArgs *> >,2>();
				virtual long Invoke(Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewSizePreferencesChangedEventArgs *);
			};

			Details::Git _git;
			long CreateGitHelper<Foundation::Collections::VectorChangedEventHandler<ApplicationModel::WindowingEnvironment::DisplayRegionId>,GitPtr>(Foundation::Collections::VectorChangedEventHandler<ApplicationModel::WindowingEnvironment::DisplayRegionId> *,Foundation::Collections::VectorChangedEventHandler<ApplicationModel::WindowingEnvironment::DisplayRegionId> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *>,GitPtr>(Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *> *,Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<FamilySafety::AppLimits::FamilyAppUsageManager *,FamilySafety::AppLimits::AppUsageStateChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<FamilySafety::AppLimits::FamilyAppUsageManager *,FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> > >(Foundation::ITypedEventHandler<FamilySafety::AppLimits::FamilyAppUsageManager *,FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> *,Foundation::ITypedEventHandler<FamilySafety::AppLimits::FamilyAppUsageManager *,FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,IInspectable *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,IInspectable *> > >(Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,IInspectable *> *,Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,IInspectable *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IFrameworkViewTypeSetEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IFrameworkViewTypeSetEventArgs *> > >(Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IFrameworkViewTypeSetEventArgs *> *,Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IFrameworkViewTypeSetEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IPresentationReadyChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IPresentationReadyChangedEventArgs *> > >(Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IPresentationReadyChangedEventArgs *> *,Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IPresentationReadyChangedEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::ITitleBarChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::ITitleBarChangedEventArgs *> > >(Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::ITitleBarChangedEventArgs *> *,Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::ITitleBarChangedEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostItemEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostItemEventArgs *> > >(Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostItemEventArgs *> *,Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostItemEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> > >(Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *,Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewSizePreferencesChangedEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewSizePreferencesChangedEventArgs *> > >(Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *,Foundation::ITypedEventHandler<Shell::Holographic::IViewHostItem *,Shell::Holographic::IViewSizePreferencesChangedEventArgs *> * *);
		};

		namespace FamilySafety
		{
			namespace AppLimits
			{
				struct FamilyAppUsageManager
				{
					FamilyAppUsageManager();
					long RuntimeClassInitialize();
					virtual long GetActiveApps(Foundation::Collections::IVectorView<HSTRING__ *> * *);
					virtual long GetAppDisplayName(HSTRING__ *,HSTRING__ * *);
					virtual long GetExplorerProcessId(unsigned int *);
					virtual long IsAppActive(HSTRING__ *,unsigned char *);
					virtual long PerformDelayedInitialization();
					virtual long StartUsageTracking();
					virtual long StopUsageTracking();
					virtual long SubscribeToServices(IServiceProvider *);
					virtual long TerminateApplication(HSTRING__ *,unsigned char,AppLimitsTerminationType);
					virtual long UnsubscribeFromServices(IServiceProvider *);
					virtual long add_AppUsageStateChanged(Foundation::ITypedEventHandler<FamilyAppUsageManager *,AppUsageStateChangedEventArgs *> *,EventRegistrationToken *);
					virtual long remove_AppUsageStateChanged(EventRegistrationToken);
					virtual void ReportAppStateChange(unsigned short const *,bool);
				};

				bool IsPackagedApp(unsigned short const *);
				std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > AumidToAppId(unsigned short const *);
				std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > ComposeWin32AppId(unsigned short const *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
				std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > PackageFamilyNameToAppId(unsigned short const *);
			};

		};

		struct GitPtr
		{
			GitPtr();
		};

		class GitPtrImpl<GitPtr>
		{
		protected:
			long Localize(_GUID const &,void * *);
		public:
			long Revoke();
			virtual bool IsInitialized();
		};

		struct GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<Data::Activities::GetCurrentActivityForViewOperationResults *> >
		{
			long Initialize<Foundation::IAsyncOperationCompletedHandler<Data::Activities::GetCurrentActivityForViewOperationResults *> >(Foundation::IAsyncOperationCompletedHandler<Data::Activities::GetCurrentActivityForViewOperationResults *> *);
		};

		struct GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<Foundation::Collections::IVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *> *> >
		{
			long Initialize<Foundation::IAsyncOperationCompletedHandler<Foundation::Collections::IVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *> *> >(Foundation::IAsyncOperationCompletedHandler<Foundation::Collections::IVectorView<Data::Activities::GetCurrentActivityForViewOperationResults *> *> *);
		};

		struct GitPtrSupportsAgile<INilDelegate>
		{
			long CopyLocal<INilDelegate>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<INilDelegate> >);
			long Initialize<INilDelegate>(INilDelegate *);
			long Revoke();
		};

		class NativeString<CoTaskMemPolicy<unsigned short> >
		{
			bool _IsOnlyWhitespace();
			long _Concat(unsigned short const *,unsigned __int64);
			long _EnsureCapacity(unsigned __int64);
			long _Initialize(unsigned short const *,unsigned __int64);
			long _InitializeFromRegistry(HKEY__ *,unsigned short const *,bool);
			long _InitializeHelper<<lambda_255728157cf8e92998065ff06efe801f> >(unsigned short const *,char *,<lambda_255728157cf8e92998065ff06efe801f> const &);
			long _InitializeHelper<<lambda_fe718337787c493ce2d833414db25eba> >(unsigned short const *,char *,<lambda_fe718337787c493ce2d833414db25eba> const &);
			void _EnsureCount();
			void _Free();
		public:
			int CompareOrdinal(unsigned short const *,unsigned __int64);
			long Concat(NativeString<CoTaskMemPolicy<unsigned short> > const &);
			long Concat(unsigned short const *);
			long ConcatFormat(unsigned short const *,...);
			long CopyTo(unsigned short * *);
			long Initialize(HKEY__ *,unsigned short const *,unsigned short const *);
			long Initialize(NativeString<CoTaskMemPolicy<unsigned short> > const &);
			long InitializeFormat(unsigned short const *,...);
			long InitializeMessage(unsigned short const *,...);
			long InitializeResFormat(HINSTANCE__ *,int,...);
			long InitializeResMessage(HINSTANCE__ *,int,...);
			void ReplaceChars(unsigned short,unsigned short);
			~NativeString<CoTaskMemPolicy<unsigned short> >();
		};

		class NativeString<LocalMemPolicy<unsigned short> >
		{
			void _EnsureCount();
			void _Free();
		public:
			~NativeString<LocalMemPolicy<unsigned short> >();
		};

		struct ResourceString
		{
			static bool FindAndSize(HINSTANCE__ *,unsigned int,unsigned short,unsigned short const * *,unsigned short *);
		};

		namespace Shell
		{
			namespace Chaining
			{
				class ChainLink<ObjectWithIamLock>
				{
					struct ChainLinkNotifier
					{
						struct InternalPayload
						{
							InternalPayload();
						};

						struct Payload
						{
							Payload();
							~Payload();
						};

						ChainLinkNotifier();
						void AddNotification(ChainLink<ObjectWithIamLock> *,ChainLinkEventTypeInternal);
						void AddNotification(ChainLink<ObjectWithIamLock> *,IChainLink *,IChainLink *,ChainLinkEventType);
						void Notify();
						~ChainLinkNotifier();
					};

					long ClearNextIfMatch(IChainLink *);
					long RemoveFromChainIfPreviousMatches(IChainLink *);
					void DeliverChainLinkEventInternal(ChainLink<ObjectWithIamLock>::ChainLinkEventTypeInternal);
				protected:
					long AppendChainLinkInternal(IChainLink *,ChainLink<ObjectWithIamLock>::ChainLinkNotifier &);
					long GetNextChainLinks(Foundation::Collections::IVectorView<IChainLink *> * *);
					virtual long AppendChainLink(IChainLink *);
					virtual long HandleChainLinkEvent(IChainLink *,IChainLinkEventArgs *);
					virtual void HandleChainLinkEventInternal(IChainLink *,ChainLink<ObjectWithIamLock>::ChainLinkEventTypeInternal);
					void RemoveFromChainInternal(ChainLink<ObjectWithIamLock>::ChainLinkNotifier &);
				public:
					virtual long get_NextChainLink(IChainLink * *);
					virtual long get_PrevChainLink(IChainLink * *);
					virtual long get_Type(ChainLinkType *);
				};

				struct ChainLinkEventArgs
				{
					ChainLinkEventArgs(ChainLinkEventType);
					virtual long get_EventType(ChainLinkEventType *);
				};

			};

			namespace CustomShell
			{
				class CustomShellExperienceRepository
				{
					static std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > const c_knownExperienceIds;
				public:
					CustomShellExperienceRepository();
					static TrustLevel InternalGetTrustLevel();
					static unsigned short const * InternalGetRuntimeClassName();
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_ActiveExperience(ICustomShellExperience * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				Microsoft::WRL::Details::CreatorMap const __object_CustomShellExperienceRepository;
				Microsoft::WRL::Details::FactoryCache __objectFactory__CustomShellExperienceRepository;
			};

			namespace Desktop
			{
				namespace ViewManagerInterop
				{
					struct ObjectWithVisibility
					{
						virtual long add_VisibilityChanged(Foundation::ITypedEventHandler<IObjectWithVisibility *,IVisibilityChangedEventArgs *> *,EventRegistrationToken *);
						virtual long remove_VisibilityChanged(EventRegistrationToken);
					};

					struct VisibilityChangedEventArgs
					{
						virtual long get_Visible(unsigned char *);
					};

					long GetActivationId(ShellHelpers::PropertySetHelper &,unsigned __int64 *);
					long GetActivationVirtualDesktopId(ShellHelpers::PropertySetHelper &,_GUID *);
					long GetAppActivationPolicy(ShellHelpers::PropertySetHelper &,unsigned char *);
					long SetActivationVirtualDesktopId(ShellHelpers::PropertySetHelper &,_GUID const &);
					long SetAppActivationPolicy(ShellHelpers::PropertySetHelper &,unsigned char);
				};

			};

			namespace Holographic
			{
				namespace ViewHostItemFactory
				{
					wil::com_ptr_t<IViewHostItem,wil::err_exception_policy> CreateForView(IApplicationView *,wil::AsyncEventSerialInvocationContextToken &,IServiceProvider *);
				};

				class Win32BackedViewHostItem
				{
					bool _CheckWindowTextChanged();
					bool _GetIsSlate();
					long _ApplySizeConstraints(IApplicationView *);
					long _CalculateCurrentLogicalWindowSize(Foundation::Size *);
					long _FirePresentationReadinessOrRetryAfterDelay(unsigned __int64,std::chrono::duration<__int64,std::ratio<1,1000> >);
					long _GetVirtualMonitorSlateHost(IVirtualMonitorSlateHost * *);
					long _HandleHolographicPortingAsync(bool,Foundation::IAsyncAction * *);
					long _MoveViewToDesktopAfterDelayIfSlate(bool);
					long _OnShellFullscreenStateChanged(bool);
					long _RaisePresentationReadyEvent(bool);
					long _RaiseTitleBarChangedEvent();
					long _SetLogicalSize(Foundation::Size);
					static long _SendViewToDesktop(IWin32ApplicationView *,bool);
					static std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > _GenerateAumIdForView(IWin32ApplicationView *);
				public:
					Win32BackedViewHostItem(wil::AsyncEventSerialInvocationContextToken &);
					long RuntimeClassInitialize(IApplicationView *,IServiceProvider *);
					virtual long Activate();
					virtual long BindSizeToRectangle(Foundation::Rect);
					virtual long ChangeBounds(ViewManagerInterop::ViewBounds);
					virtual long DisconnectFromPresentationLayer();
					virtual long EnterFullScreen();
					virtual long ExitFullScreen();
					virtual long GetActivationPropertySet(Foundation::Collections::IPropertySet * *);
					virtual long IsEqualByApplicationView(IApplicationView *,int *);
					virtual long NotifySplashScreenDismissed();
					virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
					virtual long OnShellHookMessage(unsigned __int64,__int64);
					virtual long PortFromHolographic(unsigned char *);
					virtual long PortToHolographic(unsigned char *);
					virtual long RaiseFrameworkViewTypeSet();
					virtual long RaisePresentationNotReady();
					virtual long RaiseSizePreferencesChanged(Foundation::Size);
					virtual long SetActivationPropertySet(Foundation::Collections::IPropertySet *);
					virtual long TakeForeground(ComposableShell::ForegroundPolicyResult *);
					virtual long TryBack();
					virtual long TryClose(unsigned char);
					virtual long add_BackButtonVisibilityChanged(Foundation::ITypedEventHandler<IViewHostItem *,IInspectable *> *,EventRegistrationToken *);
					virtual long add_FrameworkViewTypeSet(Foundation::ITypedEventHandler<IViewHostItem *,IFrameworkViewTypeSetEventArgs *> *,EventRegistrationToken *);
					virtual long add_PresentationReadyChanged(Foundation::ITypedEventHandler<IViewHostItem *,IPresentationReadyChangedEventArgs *> *,EventRegistrationToken *);
					virtual long add_SizePreferencesChanged(Foundation::ITypedEventHandler<IViewHostItem *,IViewSizePreferencesChangedEventArgs *> *,EventRegistrationToken *);
					virtual long add_TitleBarChanged(Foundation::ITypedEventHandler<IViewHostItem *,ITitleBarChangedEventArgs *> *,EventRegistrationToken *);
					virtual long add_ViewModeChangeRequested(Foundation::ITypedEventHandler<IViewHostItem *,IViewHostViewModeChangeRequestedEventArgs *> *,EventRegistrationToken *);
					virtual long get_AppUserModelId(HSTRING__ * *);
					virtual long get_CompositionId(unsigned int *);
					virtual long get_CoreWindowId(unsigned int *);
					virtual long get_FrameworkViewType(int *);
					virtual long get_IsBackButtonVisible(unsigned char *);
					virtual long get_ProcessId(unsigned int *);
					virtual long get_ReadyToPresent(unsigned char *);
					virtual long get_Size(Foundation::Size *);
					virtual long get_UniqueId(unsigned int *);
					virtual long get_ViewMode(ViewMode *);
					virtual long get_Visibility(unsigned char *);
					virtual long put_Visibility(unsigned char);
					virtual long remove_BackButtonVisibilityChanged(EventRegistrationToken);
					virtual long remove_FrameworkViewTypeSet(EventRegistrationToken);
					virtual long remove_PresentationReadyChanged(EventRegistrationToken);
					virtual long remove_SizePreferencesChanged(EventRegistrationToken);
					virtual long remove_TitleBarChanged(EventRegistrationToken);
					virtual long remove_ViewModeChangeRequested(EventRegistrationToken);
					virtual ~Win32BackedViewHostItem();
				};

				long CopyPropertySet(Foundation::Collections::IPropertySet *,Foundation::Collections::IPropertySet *);
				long GetUserDisplayContext(Holographic::UserDisplayContext *);
				long GetUserInputContext(Holographic::UserInputContext *);
				long GetWindowDisplayContext(HWND__ *,Holographic::ContextInspectionOptions,Holographic::UserDisplayContext *);
				long RemoveClientRequestedNavigationTypeFromPropertySet(Foundation::Collections::IPropertySet *);
			};

			struct IImmersiveWindowMessageNotificationHandler
			{
				IImmersiveWindowMessageNotificationHandler();
				long RuntimeClassInitialize<CortanaSharedExperienceManager>(CortanaSharedExperienceManager *,long ( CortanaSharedExperienceManager::*)(unsigned int,unsigned __int64,__int64));
				long RuntimeClassInitialize<SearchAppExperienceManager>(SearchAppExperienceManager *,long ( SearchAppExperienceManager::*)(unsigned int,unsigned __int64,__int64));
				long RuntimeClassInitialize<ShellFeedsExperienceManagerImpl>(ShellFeedsExperienceManagerImpl *,long ( ShellFeedsExperienceManagerImpl::*)(unsigned int,unsigned __int64,__int64));
				virtual long OnMessage(unsigned int,unsigned __int64,__int64);
			};

			namespace Multitasking
			{
				namespace Desktop
				{
					struct DesktopThumbnailDevice
					{
						DesktopThumbnailDevice();
					};

					struct IDesktopThumbnailDevice
					{
						virtual DesktopBackgroundThumbnailFactory ^ CreateThumbnailFactoryForDesktopBackground(Foundation::Rect);
					};

				};

			};

			namespace TaskFlow
			{
				namespace DataEngine
				{
					struct AppViewInfoCache
					{
						void Remove(IApplicationView *);
					};

					class AppViewListener
					{
						Data::Activities::AppIdKind DetermineAppIdKind(unsigned short const *);
						wil::com_ptr_t<IAppViewExecutionData,wil::err_exception_policy> TryCreateAppExecutionDataForAppState(AppViewExecutionState,IApplicationView *);
						wil::com_ptr_t<ISnapSignalData,wil::err_exception_policy> TryCreateSnapSignalData(SnapEventType,IApplicationView *);
					public:
						AppViewListener();
						long RuntimeClassInitialize(ITaskDataArbiter *);
						static TrustLevel InternalGetTrustLevel();
						static unsigned short const * InternalGetRuntimeClassName();
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetInFocusViewData(IAppViewExecutionData * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long Start();
						virtual long Stop();
						virtual long WindowSnapStateChanged(IApplicationView *,WINDOW_SNAP_STATE);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					struct AppViewListenerFactory
					{
						AppViewListenerFactory();
						virtual long ActivateInstance(IInspectable * *);
						virtual long Create(ITaskDataArbiter *,ITaskDataListener * *);
					};

					class AppViewTitleChangeListener
					{
						void ReportTitleChange(unsigned __int64,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
						void TryUpdateAndReportTitleChange(unsigned __int64);
					protected:
						virtual std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetAppViewTitle(unsigned __int64);
					public:
						AppViewTitleChangeListener();
						static TrustLevel InternalGetTrustLevel();
						static unsigned short const * InternalGetRuntimeClassName();
						virtual long GetAppViewTitle(unsigned __int64,HSTRING__ * *);
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long OnShellHookMessage(unsigned __int64,__int64);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long SetInFocusAppView(unsigned __int64);
						virtual long Start();
						virtual long Stop();
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					struct AppViewTitleChangeListenerFactory
					{
						AppViewTitleChangeListenerFactory();
						virtual long Create(ITaskDataArbiter *,ITaskDataListener * *);
					};

					struct SnapSignalData
					{
						SnapSignalData(SnapEventType,Foundation::DateTime,unsigned __int64);
						virtual long get_AppViewId(unsigned __int64 *);
						virtual long get_Timestamp(Foundation::DateTime *);
						virtual long get_Type(SnapEventType *);
					};

					struct UserPresenceListener
					{
						UserPresenceListener();
						static TrustLevel InternalGetTrustLevel();
						static unsigned short const * InternalGetRuntimeClassName();
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long OnIdleStateChanged(int);
						virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long Start();
						virtual long Stop();
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					struct UserPresenceListenerFactory
					{
						UserPresenceListenerFactory();
						virtual long Create(ITaskDataArbiter *,ITaskDataListener * *);
					};

					Microsoft::WRL::Details::CreatorMap const __object_AppViewListener;
					Microsoft::WRL::Details::CreatorMap const __object_AppViewTitleChangeListener;
					Microsoft::WRL::Details::CreatorMap const __object_UserPresenceListener;
					Microsoft::WRL::Details::FactoryCache __objectFactory__AppViewListener;
					Microsoft::WRL::Details::FactoryCache __objectFactory__AppViewTitleChangeListener;
					Microsoft::WRL::Details::FactoryCache __objectFactory__UserPresenceListener;
					wil::com_ptr_t<DataEngine::ISnapSignalData,wil::err_exception_policy> CreateSnapSignalData(DataEngine::SnapEventType,Foundation::DateTime,unsigned __int64);
				};

			};

		};

		namespace ShellHelpers
		{
			class PropertySetHelper
			{
				long GetPropSetMap(Foundation::Collections::IMap<HSTRING__ *,IInspectable *> * *);
				long GetPropVal(HSTRING__ *,Foundation::IPropertyValue * *);
				long GetPropertyValueFactory(Foundation::IPropertyValueStatics * *);
				long GetValue<Foundation::Size>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(Foundation::Size *),Foundation::Size *);
				long GetValue<HSTRING__ *>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(HSTRING__ * *),HSTRING__ * *);
				long GetValue<_GUID>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(_GUID *),_GUID *);
				long GetValue<unsigned char>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(unsigned char *),unsigned char *);
				long GetValue<unsigned int>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(unsigned int *),unsigned int *);
				long SetPropVal(HSTRING__ *,Foundation::IPropertyValue *);
				long SetValue<Foundation::Size>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(Foundation::Size,IInspectable * *),Foundation::Size);
				long SetValue<HSTRING__ *>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(HSTRING__ *,IInspectable * *),HSTRING__ *);
				long SetValue<_GUID>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(_GUID,IInspectable * *),_GUID);
				long SetValue<double>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(double,IInspectable * *),double);
				long SetValue<float>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(float,IInspectable * *),float);
				long SetValue<int>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(int,IInspectable * *),int);
				long SetValue<unsigned char>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(unsigned char,IInspectable * *),unsigned char);
				long SetValue<unsigned int>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(unsigned int,IInspectable * *),unsigned int);
			public:
				Microsoft::WRL::Wrappers::HString GetStringWithDefault(HSTRING__ *,unsigned short const *);
				PropertySetHelper(Foundation::Collections::IPropertySet *);
				bool HasKey(HSTRING__ *);
				long GetDouble(HSTRING__ *,double *);
				long GetUInt32(HSTRING__ *,unsigned int *);
				long Remove(unsigned short const *);
				static long CreateFromPropertySet(PropertySetHelper &);
				static long CreateFromValueSet(PropertySetHelper &);
				~PropertySetHelper();
			};

		};

		class String
		{
			long _InitializeHelper(unsigned short const *);
		public:
			long Initialize(HSTRING__ * const &);
			~String();
		};

		struct StringReference
		{
			StringReference<15>(unsigned short const (&)[15]);
			StringReference<20>(unsigned short const (&)[20]);
			StringReference<21>(unsigned short const (&)[21]);
			StringReference<22>(unsigned short const (&)[22]);
			StringReference<23>(unsigned short const (&)[23]);
			StringReference<50>(unsigned short const (&)[50]);
			StringReference<51>(unsigned short const (&)[51]);
			StringReference<53>(unsigned short const (&)[53]);
			StringReference<58>(unsigned short const (&)[58]);
			StringReference<59>(unsigned short const (&)[59]);
			StringReference<60>(unsigned short const (&)[60]);
			StringReference<62>(unsigned short const (&)[62]);
		};

		_RTL_RUN_ONCE s_bIsEnvironmentCheckDone;
	};

	namespace Storage
	{
		namespace Streams
		{
			struct CBuffer<void (*)(void *),DefaultMarshaler>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class CBuffer_Impl<void (*)(void *),DefaultMarshaler>
			{
			protected:
				virtual ~CBuffer_Impl<void (*)(void *),DefaultMarshaler>();
			public:
				CBuffer_Impl<void (*)(void *),DefaultMarshaler>(unsigned int,unsigned int,unsigned char *,void (*)(void *));
				virtual long Buffer(unsigned char * *);
				virtual long DisconnectObject(unsigned long);
				virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
				virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
				virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
				virtual long ReleaseMarshalData(IStream *);
				virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
				virtual long get_Capacity(unsigned int *);
				virtual long get_Length(unsigned int *);
				virtual long put_Length(unsigned int);
			};

			class DefaultMarshaler
			{
				long _EnsureInit();
			};

			long MakeCBuffer<void (*)(void *)>(unsigned int,unsigned int,unsigned char *,void (*)(void *),Streams::IBuffer * *);
		};

	};

	namespace UI
	{
		namespace Core
		{
			struct CoreWindow
			{
				static CoreWindow ^ GetForCurrentThread();
			};

			struct DispatchedHandler
			{
				DispatchedHandler<<lambda_0b0ea29adb38baec39914485464e8775> >(<lambda_0b0ea29adb38baec39914485464e8775>,Platform::CallbackContext,bool);
				DispatchedHandler<<lambda_5e3471c756f87189046196c55c94088a> >(<lambda_5e3471c756f87189046196c55c94088a>,Platform::CallbackContext,bool);
				DispatchedHandler<<lambda_6c8b5f6772d3e01ba2a5e8ade53ff1ef> >(<lambda_6c8b5f6772d3e01ba2a5e8ade53ff1ef>,Platform::CallbackContext,bool);
				virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
				virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
				virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
				virtual long __abi_QueryInterface(Platform::Guid &,void * *);
				virtual unsigned long __abi_AddRef();
				virtual unsigned long __abi_Release();
				virtual void Invoke();
			};

			struct ICoreDispatcher
			{
				struct HasThreadAccess
				{
					virtual bool get();
				};

				virtual Foundation::IAsyncAction ^ RunAsync(CoreDispatcherPriority,DispatchedHandler ^);
			};

			struct ICoreWindow
			{
				struct Dispatcher
				{
					virtual CoreDispatcher ^ get();
				};

				virtual CoreVirtualKeyStates GetAsyncKeyState(System::VirtualKey);
			};

			struct ICoreWindowFactory
			{
				ICoreWindowFactory();
			};

			struct ICoreWindowStatic
			{
				virtual CoreWindow ^ GetForCurrentThread();
			};

			namespace IWindowActivatedEventArgs
			{
				struct WindowActivationState
				{
					virtual CoreWindowActivationState get();
				};

			};

		};

		namespace Immersive
		{
			bool CanPositionRelativeOnSide(Immersive::CConstraint const &,tagRECT const &,FLYOUT_PLACEMENT,Immersive::CConstraint const &);
			tagRECT HorizontallyCenterRect(Immersive::CConstraint const &,tagRECT const &);
			tagRECT MoveNearRect(tagRECT const &,tagRECT const &,FLYOUT_PLACEMENT);
			tagRECT PositionRelativeOnSide(Immersive::CConstraint const &,tagRECT const &,FLYOUT_PLACEMENT,Immersive::CConstraint const &);
			tagRECT QueryRelativePosition(Immersive::CConstraint const &,tagSIZE const &,tagRECT const &,FLYOUT_PLACEMENT,FLYOUT_PLACEMENT *);
			tagRECT ShiftRectIntoContainer(Immersive::CConstraint const &,tagRECT const &);
			tagRECT VerticallyCenterRect(Immersive::CConstraint const &,tagRECT const &);
		};

		namespace Xaml
		{
			class Application
			{
				struct Current
				{
					static Application ^ get();
				};

			protected:
				~Application();
			public:
				Application();
			};

			struct ApplicationInitializationCallback
			{
				virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
				virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
				virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
				virtual long __abi_QueryInterface(Platform::Guid &,void * *);
				virtual unsigned long __abi_AddRef();
				virtual unsigned long __abi_Release();
				virtual void Invoke(ApplicationInitializationCallbackParams ^);
			};

			struct IApplicationFactory
			{
				virtual Application ^ CreateInstance(Platform::Object ^,Platform::Object ^ *);
			};

			namespace IApplicationStatics
			{
				struct Current
				{
					virtual Application ^ get();
				};

			};

			struct IFrameworkApplicationStaticsPrivate
			{
				virtual void StartInCoreWindowHostingMode(WindowCreationParameters,ApplicationInitializationCallback ^);
			};

			namespace IWindow
			{
				struct Activated
				{
					virtual Foundation::EventRegistrationToken add(WindowActivatedEventHandler ^);
				};

				struct Content
				{
					virtual UIElement ^ get();
				};

				struct CoreWindow
				{
					virtual Core::CoreWindow ^ get();
				};

				struct Dispatcher
				{
					virtual Core::CoreDispatcher ^ get();
				};

			};

			namespace IWindowStatics
			{
				struct Current
				{
					virtual Window ^ get();
				};

			};

			namespace Interop
			{
				struct BindableVectorChangedEventHandler
				{
					virtual long __abi_QueryInterface(Platform::Guid &,void * *);
					virtual unsigned long __abi_AddRef();
					virtual unsigned long __abi_Release();
					virtual void Invoke(IBindableObservableVector ^,Platform::Object ^);
				};

				namespace IBindableVector
				{
					struct Size
					{
						virtual unsigned int get();
					};

				};

				struct TypeName
				{
					~TypeName();
				};

			};

			namespace Markup
			{
				struct IXamlMetadataProvider
				{
					virtual IXamlType ^ GetXamlType(Interop::TypeName);
					virtual IXamlType ^ GetXamlType(Platform::String ^);
				};

			};

			struct RoutedEventHandler
			{
				RoutedEventHandler<IXamlSwitcherWindowInteractionEvents,void ( IXamlSwitcherWindowInteractionEvents::*)(Platform::Object ^,RoutedEventArgs ^)>(IXamlSwitcherWindowInteractionEvents ^,void ( IXamlSwitcherWindowInteractionEvents::*)(Platform::Object ^,RoutedEventArgs ^),Platform::CallbackContext,bool);
				RoutedEventHandler<XamlAltTabViewController,void ( IXamlSwitcherWindowInteractionEvents::*)(Platform::Object ^,RoutedEventArgs ^)>(XamlAltTabViewController ^,void ( IXamlSwitcherWindowInteractionEvents::*)(Platform::Object ^,RoutedEventArgs ^),Platform::CallbackContext,bool);
				virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
				virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
				virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
				virtual long __abi_QueryInterface(Platform::Guid &,void * *);
				virtual unsigned long __abi_AddRef();
				virtual unsigned long __abi_Release();
				virtual void Invoke(Platform::Object ^,RoutedEventArgs ^);
			};

			namespace Window
			{
				struct Current
				{
					static Window ^ get();
				};

			};

			struct WindowActivatedEventHandler
			{
				WindowActivatedEventHandler<IXamlSwitcherWindowInteractionEvents,void ( IXamlSwitcherWindowInteractionEvents::*)(Platform::Object ^,Core::WindowActivatedEventArgs ^)>(IXamlSwitcherWindowInteractionEvents ^,void ( IXamlSwitcherWindowInteractionEvents::*)(Platform::Object ^,Core::WindowActivatedEventArgs ^),Platform::CallbackContext,bool);
				WindowActivatedEventHandler<XamlAltTabViewController,void ( IXamlSwitcherWindowInteractionEvents::*)(Platform::Object ^,Core::WindowActivatedEventArgs ^)>(XamlAltTabViewController ^,void ( IXamlSwitcherWindowInteractionEvents::*)(Platform::Object ^,Core::WindowActivatedEventArgs ^),Platform::CallbackContext,bool);
				virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
				virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
				virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
				virtual long __abi_QueryInterface(Platform::Guid &,void * *);
				virtual unsigned long __abi_AddRef();
				virtual unsigned long __abi_Release();
				virtual void Invoke(Platform::Object ^,Core::WindowActivatedEventArgs ^);
			};

		};

	};

};

namespace WindowsInternal
{
	namespace ComposableShell
	{
		namespace Desktop
		{
			namespace NativeHostingXamlMetadataProvider
			{
				struct MetadataProviders
				{
					static Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Markup::IXamlMetadataProvider ^> ^ get();
				};

			};

			class XamlExplorerHostApp
			{
				~XamlExplorerHostApp();
			public:
				XamlExplorerHostApp(Windows::UI::Xaml::Markup::IXamlMetadataProvider ^,IPrivilegedPresentationOperations *);
				void CreateView(Windows::UI::Xaml::WindowCreationParameters,XamlExplorerHostLaunchHandler ^);
			};

			struct XamlExplorerHostLaunchHandler
			{
				struct __abi_IDelegate
				{
					virtual void Invoke(Windows::UI::Xaml::Window ^,HWND__ *);
				};

				virtual Platform::Details::IWeakReference ^ GetWeakReference();
				virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
				virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
				virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
				virtual long __abi_QueryInterface(Platform::Guid &,void * *);
				virtual unsigned long __abi_AddRef();
				virtual unsigned long __abi_Release();
				virtual void Invoke(Windows::UI::Xaml::Window ^,HWND__ *);
			};

			namespace __INativeHostingXamlMetadataProviderStatics
			{
				struct MetadataProviders
				{
					virtual Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Markup::IXamlMetadataProvider ^> ^ get();
				};

			};

		};

		namespace Experiences
		{
			namespace Switcher
			{
				struct AltTab
				{
					AltTab();
				};

				struct AltTabViewModel
				{
					AltTabViewModel(SwitchItemListViewModel ^);
				};

				struct AnimationCompletedEventHandler
				{
					AnimationCompletedEventHandler<<lambda_7d544a6ebe9fabad27cf83ed972508d6> >(<lambda_7d544a6ebe9fabad27cf83ed972508d6>,Platform::CallbackContext,bool);
					virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
					virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
					virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
					virtual long __abi_QueryInterface(Platform::Guid &,void * *);
					virtual unsigned long __abi_AddRef();
					virtual unsigned long __abi_Release();
					virtual void Invoke();
				};

				struct BecameEmptyEventHandler
				{
					BecameEmptyEventHandler<XamlAltTabViewController,void ( IXamlSwitcherWindowInteractionEvents::*)()>(XamlAltTabViewController ^,void ( IXamlSwitcherWindowInteractionEvents::*)(),Platform::CallbackContext,bool);
					virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
					virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
					virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
					virtual long __abi_QueryInterface(Platform::Guid &,void * *);
					virtual unsigned long __abi_AddRef();
					virtual unsigned long __abi_Release();
					virtual void Invoke();
				};

				namespace ISwitchItemContextMenuMetadata
				{
					struct CommandId
					{
						virtual unsigned int get();
					};

				};

				namespace ISwitcherViewModel
				{
					struct LightDismiss
					{
						virtual Windows::Foundation::EventRegistrationToken add(LightDismissEventHandler ^);
					};

					struct SwitchItemCloseInvoked
					{
						virtual Windows::Foundation::EventRegistrationToken add(ItemCloseInvokedEventHandler ^);
					};

					struct SwitchItemContextMenuInvoked
					{
						virtual Windows::Foundation::EventRegistrationToken add(ItemContextMenuInvokedHandler ^);
					};

					struct SwitchItemContextMenuRequested
					{
						virtual Windows::Foundation::EventRegistrationToken add(ItemContextMenuRequestedHandler ^);
					};

					struct SwitchItemInvoked
					{
						virtual Windows::Foundation::EventRegistrationToken add(ItemInvokedEventHandler ^);
					};

					struct TaskViewContainerNavigation
					{
						virtual Windows::Foundation::EventRegistrationToken add(TaskViewContainerNavigationEventHandler ^);
					};

				};

				struct ItemCloseInvokedEventHandler
				{
					ItemCloseInvokedEventHandler<IXamlMultitaskingViewController,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^)>(IXamlMultitaskingViewController ^,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^),Platform::CallbackContext,bool);
					ItemCloseInvokedEventHandler<XamlAltTabViewController,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^)>(XamlAltTabViewController ^,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^),Platform::CallbackContext,bool);
					virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
					virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
					virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
					virtual long __abi_QueryInterface(Platform::Guid &,void * *);
					virtual unsigned long __abi_AddRef();
					virtual unsigned long __abi_Release();
					virtual void Invoke(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^);
				};

				struct ItemContextMenuInvokedHandler
				{
					ItemContextMenuInvokedHandler<IXamlMultitaskingViewController,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,ISwitchItemContextMenuMetadata ^)>(IXamlMultitaskingViewController ^,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,ISwitchItemContextMenuMetadata ^),Platform::CallbackContext,bool);
					virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
					virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
					virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
					virtual long __abi_QueryInterface(Platform::Guid &,void * *);
					virtual unsigned long __abi_AddRef();
					virtual unsigned long __abi_Release();
					virtual void Invoke(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,ISwitchItemContextMenuMetadata ^);
				};

				struct ItemContextMenuRequestedHandler
				{
					ItemContextMenuRequestedHandler<IXamlMultitaskingViewController,void ( IXamlMultitaskingViewController::*)(SwitchItemContextMenuArgs ^,ISwitcherViewModel ^)>(IXamlMultitaskingViewController ^,void ( IXamlMultitaskingViewController::*)(SwitchItemContextMenuArgs ^,ISwitcherViewModel ^),Platform::CallbackContext,bool);
					virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
					virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
					virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
					virtual long __abi_QueryInterface(Platform::Guid &,void * *);
					virtual unsigned long __abi_AddRef();
					virtual unsigned long __abi_Release();
					virtual void Invoke(SwitchItemContextMenuArgs ^,ISwitcherViewModel ^);
				};

				struct ItemInvokedEventHandler
				{
					ItemInvokedEventHandler<IXamlMultitaskingViewController,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^)>(IXamlMultitaskingViewController ^,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^),Platform::CallbackContext,bool);
					ItemInvokedEventHandler<XamlAltTabViewController,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^)>(XamlAltTabViewController ^,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^),Platform::CallbackContext,bool);
					virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
					virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
					virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
					virtual long __abi_QueryInterface(Platform::Guid &,void * *);
					virtual unsigned long __abi_AddRef();
					virtual unsigned long __abi_Release();
					virtual void Invoke(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^);
				};

				struct LightDismissEventHandler
				{
					LightDismissEventHandler<IXamlSwitcherWindowInteractionEvents,void ( IXamlSwitcherWindowInteractionEvents::*)()>(IXamlSwitcherWindowInteractionEvents ^,void ( IXamlSwitcherWindowInteractionEvents::*)(),Platform::CallbackContext,bool);
					LightDismissEventHandler<XamlAltTabViewController,void ( IXamlSwitcherWindowInteractionEvents::*)()>(XamlAltTabViewController ^,void ( IXamlSwitcherWindowInteractionEvents::*)(),Platform::CallbackContext,bool);
					virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
					virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
					virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
					virtual long __abi_QueryInterface(Platform::Guid &,void * *);
					virtual unsigned long __abi_AddRef();
					virtual unsigned long __abi_Release();
					virtual void Invoke();
				};

				struct RowHeight
				{
					RowHeight(double);
					RowHeight(double,int);
				};

				struct SwitchItemListViewModel
				{
					SwitchItemListViewModel(SwitchItemListViewModelArgs ^);
					SwitchItemListViewModel(Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^);
					SwitchItemListViewModel(Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,bool,SwitchItemCloseButtonBehavior);
				};

				struct SwitchItemListViewModelArgs
				{
					SwitchItemListViewModelArgs();
				};

				struct SwitcherContextMenuItem
				{
					SwitcherContextMenuItem(Platform::String ^,unsigned int,Windows::Foundation::Collections::IVector<ISwitchItemContextMenuMetadata ^> ^);
				};

				struct TaskView
				{
					TaskView();
				};

				struct TaskViewContainerNavigationEventHandler
				{
					TaskViewContainerNavigationEventHandler<IXamlSwitcherWindowInteractionEvents,void ( IXamlSwitcherWindowInteractionEvents::*)(unsigned int)>(IXamlSwitcherWindowInteractionEvents ^,void ( IXamlSwitcherWindowInteractionEvents::*)(unsigned int),Platform::CallbackContext,bool);
					virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
					virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
					virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
					virtual long __abi_QueryInterface(Platform::Guid &,void * *);
					virtual unsigned long __abi_AddRef();
					virtual unsigned long __abi_Release();
					virtual void Invoke(unsigned int);
				};

				struct TaskViewTimeline
				{
					TaskViewTimeline();
				};

				struct TaskViewTimelineViewModel
				{
					TaskViewTimelineViewModel(SwitchItemListViewModel ^,Platform::Object ^);
					TaskViewTimelineViewModel(SwitchItemListViewModel ^,VirtualDesktopBarElementViewModel ^,Platform::Object ^);
				};

				struct TaskViewViewModel
				{
					TaskViewViewModel(SwitchItemListViewModel ^);
				};

				struct VirtualDesktopBarElementViewModel
				{
					VirtualDesktopBarElementViewModel(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource ^,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController ^,SwitchItemCloseButtonBehavior,Windows::Foundation::Rect);
				};

				struct VirtualDesktopInvokedEventHandler
				{
					VirtualDesktopInvokedEventHandler<IXamlMultitaskingViewController,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop ^,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop ^)>(IXamlMultitaskingViewController ^,void ( IXamlMultitaskingViewController::*)(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop ^,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop ^),Platform::CallbackContext,bool);
					virtual long __abi_GetIids(unsigned long *,Platform::Guid * *);
					virtual long __abi_GetRuntimeClassName(HSTRING__ * *);
					virtual long __abi_GetTrustLevel(__abi_TrustLevel *);
					virtual long __abi_QueryInterface(Platform::Guid &,void * *);
					virtual unsigned long __abi_AddRef();
					virtual unsigned long __abi_Release();
					virtual void Invoke(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop ^,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop ^);
				};

				namespace __IAltTabPublicNonVirtuals
				{
					struct ViewModel
					{
						virtual AltTabViewModel ^ get();
					};

				};

				struct __IAltTabViewModelFactory
				{
					virtual AltTabViewModel ^ CreateInstance(SwitchItemListViewModel ^);
				};

				struct __IRowHeightFactory
				{
					virtual RowHeight ^ CreateInstance(double);
					virtual RowHeight ^ CreateInstance(double,int);
				};

				namespace __ISwitchItemContextMenuArgsPublicNonVirtuals
				{
					struct SwitchItem
					{
						virtual Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ get();
					};

				};

				struct __ISwitchItemListViewModelFactory
				{
					virtual SwitchItemListViewModel ^ CreateInstance(SwitchItemListViewModelArgs ^);
					virtual SwitchItemListViewModel ^ CreateInstance(Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^);
					virtual SwitchItemListViewModel ^ CreateInstance(Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,bool,SwitchItemCloseButtonBehavior);
				};

				namespace __ISwitchItemListViewModelPublicNonVirtuals
				{
					struct SwitchItemElements
					{
						virtual Windows::UI::Xaml::Interop::IBindableObservableVector ^ get();
					};

				};

				struct __ISwitcherContextMenuItemFactory
				{
					virtual SwitcherContextMenuItem ^ CreateInstance(Platform::String ^,unsigned int,Windows::Foundation::Collections::IVector<ISwitchItemContextMenuMetadata ^> ^);
				};

				namespace __ISwitcherControlBasePublicNonVirtuals
				{
					struct FirstFrameRendered
					{
						virtual Windows::Foundation::EventRegistrationToken add(Windows::UI::Xaml::RoutedEventHandler ^);
					};

					struct InvokeAnimationCoordinator
					{
						virtual IAnimationCoordinator ^ get();
					};

				};

				namespace __ITaskViewTimelinePublicNonVirtuals
				{
					struct ViewModel
					{
						virtual TaskViewTimelineViewModel ^ get();
					};

				};

				struct __ITaskViewTimelineViewModelFactory
				{
					virtual TaskViewTimelineViewModel ^ CreateInstance(SwitchItemListViewModel ^,Platform::Object ^);
					virtual TaskViewTimelineViewModel ^ CreateInstance(SwitchItemListViewModel ^,VirtualDesktopBarElementViewModel ^,Platform::Object ^);
				};

				namespace __ITaskViewTimelineViewModelPublicNonVirtuals
				{
					struct VirtualDesktopViewModel
					{
						virtual VirtualDesktopBarElementViewModel ^ get();
					};

				};

				struct __ITaskViewViewModelFactory
				{
					virtual TaskViewViewModel ^ CreateInstance(SwitchItemListViewModel ^);
				};

				namespace __ITaskViewViewModelPublicNonVirtuals
				{
					struct VirtualDesktopViewModel
					{
						virtual VirtualDesktopBarElementViewModel ^ get();
					};

				};

				struct __IVirtualDesktopBarElementViewModelFactory
				{
					virtual VirtualDesktopBarElementViewModel ^ CreateInstance(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource ^,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController ^,SwitchItemCloseButtonBehavior,Windows::Foundation::Rect);
				};

				namespace __IVirtualDesktopBarElementViewModelPublicNonVirtuals
				{
					struct VirtualDesktopElements
					{
						virtual Windows::UI::Xaml::Interop::IBindableObservableVector ^ get();
					};

					struct VirtualDesktopInvoked
					{
						virtual Windows::Foundation::EventRegistrationToken add(VirtualDesktopInvokedEventHandler ^);
					};

				};

			};

		};

	};

	namespace Shell
	{
		namespace UnifiedTile
		{
			namespace CuratedTileCollections
			{
				namespace CollectionConstants
				{
					unsigned short const * const c_allAppsCollectionId;
				};

				namespace RegionHelpers
				{
					long GetCurrentRegionCode(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,RegionLookupFallbackOptions);
				};

				namespace Schemas
				{
					unsigned short const * const FullDefaultLayoutSchema;
					unsigned short const * const LayoutModificationSchema;
					unsigned short const * const StartLayoutSchema;
					unsigned short const * const TaskbarLayoutSchema;
				};

				class SelectionData
				{
					int GetSelectionScore(SelectionData const &);
					void CompareStringVector(std::vector<unsigned short *,std::allocator<unsigned short *> >,bool,std::vector<unsigned short *,std::allocator<unsigned short *> >,bool,int &);
					void Copy(SelectionData const &);
				public:
					SelectionData(SelectionData const &);
					bool ContainsOfficeSKU(CollectionOfficeSKU);
					void AddRegionCode(unsigned short const *);
					~SelectionData();
				};

				class SelectionDataParser
				{
					long ParseOfficeSKUAttributeValue(unsigned short const *,SelectionData &);
					long ParseSKUAttributeValue(unsigned short const *,SelectionData &);
				public:
					SelectionDataParser();
					virtual long ParseSelectionAttributes(Microsoft::WRL::ComPtr<IXMLDOMNode> &,SelectionData &);
				};

				long AddSchemaToCollection(unsigned short const *,unsigned short const *,IXMLDOMSchemaCollection *);
				long GetBoolAttributeValue(IXMLDOMElement *,_bstr_t const &,bool *);
				long GetSelectedItem<ParsedPenWorkspaceLayout>(std::vector<ParsedPenWorkspaceLayout,std::allocator<ParsedPenWorkspaceLayout> > const &,CuratedTileCollections::SelectionData,std::function<CuratedTileCollections::SelectionData (ParsedPenWorkspaceLayout const &)>,ParsedPenWorkspaceLayout *);
				long GetSelectedItem<ParsedTaskbarLayout>(std::vector<ParsedTaskbarLayout,std::allocator<ParsedTaskbarLayout> > const &,CuratedTileCollections::SelectionData,std::function<CuratedTileCollections::SelectionData (ParsedTaskbarLayout const &)>,ParsedTaskbarLayout *);
				long GetStringAttributeValue(IXMLDOMElement *,_bstr_t const &,std::shared_ptr<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > &);
				long GetTokenizedStringAttributeValue(IXMLDOMElement *,_bstr_t const &,std::function<void (unsigned short *)> const &);
				long GetUintAttributeValue(IXMLDOMElement *,_bstr_t const &,unsigned int *);
				long LoadSchema(std::vector<std::pair<unsigned short const *,unsigned short const *>,std::allocator<std::pair<unsigned short const *,unsigned short const *> > >,IXMLDOMSchemaCollection * *);
				long ValidateLayoutFile(std::vector<std::pair<unsigned short const *,unsigned short const *>,std::allocator<std::pair<unsigned short const *,unsigned short const *> > >,IXMLDOMDocument *);
			};

		};

	};

};

class WnfHelper
{
	static long s_WnfCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
public:
	long Subscribe(IWnfCallback *);
};

namespace XWinRT
{
	struct AutoValue<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> >
	{
		AutoValue<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> ><HSTRING__ *>(HSTRING__ * const &,long *);
	};

	struct AutoValue<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *> >
	{
		~AutoValue<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *> >();
	};

	struct AutoValue<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >
	{
		AutoValue<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> ><Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>(Windows::Internal::ComposableShell::Multitasking::ISwitchItem * const &,long *);
		~AutoValue<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >();
	};

	struct AutoValue<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >
	{
		AutoValue<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> ><Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *>(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop * const &,long *);
		~AutoValue<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *> >();
	};

	struct AutoValue<Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *> >
	{
		~AutoValue<Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *> >();
	};

	struct AutoValue<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >
	{
		~AutoValue<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >();
	};

	struct AutoValue<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *> >
	{
		~AutoValue<Windows::Internal::Shell::Chaining::IChainLink *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *> >();
	};

	struct AutoValue<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> >
	{
		~AutoValue<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> >();
	};

	struct AutoValue<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >
	{
		AutoValue<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> ><Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion *>(Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion * const &,long *);
		~AutoValue<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion *> >();
	};

	struct AutoValue<detail::GitStorageType<Windows::Internal::ComposableShell::ITreeNode>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *> >
	{
		AutoValue<detail::GitStorageType<Windows::Internal::ComposableShell::ITreeNode>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *> ><Windows::Internal::ComposableShell::ITreeNode *>(Windows::Internal::ComposableShell::ITreeNode * const &,long *);
		~AutoValue<detail::GitStorageType<Windows::Internal::ComposableShell::ITreeNode>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *> >();
	};

	struct AutoValue<detail::GitStorageType<Windows::Internal::ComposableShell::Tabs::IShellTab>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *> >
	{
		AutoValue<detail::GitStorageType<Windows::Internal::ComposableShell::Tabs::IShellTab>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *> ><Windows::Internal::ComposableShell::Tabs::IShellTab *>(Windows::Internal::ComposableShell::Tabs::IShellTab * const &,long *);
		~AutoValue<detail::GitStorageType<Windows::Internal::ComposableShell::Tabs::IShellTab>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *> >();
	};

	struct AutoValue<detail::GitStorageType<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >
	{
		AutoValue<detail::GitStorageType<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> ><Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *>(Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * const &,long *);
		~AutoValue<detail::GitStorageType<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >();
	};

	struct AutoValue<detail::GitStorageType<Windows::Internal::Shell::Chaining::IChainLink>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *> >
	{
		AutoValue<detail::GitStorageType<Windows::Internal::Shell::Chaining::IChainLink>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *> ><Windows::Internal::Shell::Chaining::IChainLink *>(Windows::Internal::Shell::Chaining::IChainLink * const &,long *);
		~AutoValue<detail::GitStorageType<Windows::Internal::Shell::Chaining::IChainLink>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *> >();
	};

	struct AutoValue<detail::GitStorageType<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> >
	{
		AutoValue<detail::GitStorageType<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> ><Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * const &,long *);
		~AutoValue<detail::GitStorageType<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> >();
	};

	struct ComLock
	{
		ComLock(bool);
	};

	struct InterfaceEquals
	{
		long operator()<Windows::Internal::ComposableShell::ITreeNode>(Windows::Internal::ComposableShell::ITreeNode *,Windows::Internal::ComposableShell::ITreeNode *,bool *);
		long operator()<Windows::Internal::ComposableShell::Multitasking::ISwitchItem>(Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,bool *);
		long operator()<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop>(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *,bool *);
		long operator()<Windows::Internal::ComposableShell::Tabs::IShellTab>(Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Internal::ComposableShell::Tabs::IShellTab *,bool *);
		long operator()<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>(Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *,Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *,bool *);
		long operator()<Windows::Internal::Shell::Chaining::IChainLink>(Windows::Internal::Shell::Chaining::IChainLink *,Windows::Internal::Shell::Chaining::IChainLink *,bool *);
		long operator()<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,bool *);
		long operator()<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion>(Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion *,Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion *,bool *);
	};

	struct InterfaceLifetimeTraits
	{
		static long Construct<Windows::Internal::ComposableShell::ITreeNode>(detail::GitStorageType<Windows::Internal::ComposableShell::ITreeNode> *,detail::GitStorageType<Windows::Internal::ComposableShell::ITreeNode>);
		static long Construct<Windows::Internal::ComposableShell::Multitasking::ISwitchItem>(Windows::Internal::ComposableShell::Multitasking::ISwitchItem * *,Windows::Internal::ComposableShell::Multitasking::ISwitchItem *);
		static long Construct<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop>(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop * *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop *);
		static long Construct<Windows::Internal::ComposableShell::Tabs::IShellTab>(detail::GitStorageType<Windows::Internal::ComposableShell::Tabs::IShellTab> *,detail::GitStorageType<Windows::Internal::ComposableShell::Tabs::IShellTab>);
		static long Construct<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>(detail::GitStorageType<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults> *,detail::GitStorageType<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>);
		static long Construct<Windows::Internal::Shell::Chaining::IChainLink>(detail::GitStorageType<Windows::Internal::Shell::Chaining::IChainLink> *,detail::GitStorageType<Windows::Internal::Shell::Chaining::IChainLink>);
		static long Construct<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>(detail::GitStorageType<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> *,detail::GitStorageType<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>);
		static long Construct<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion>(Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion * *,Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion *);
		static void Destroy<Windows::Internal::ComposableShell::ITreeNode>(Windows::Internal::ComposableShell::ITreeNode * *);
		static void Destroy<Windows::Internal::ComposableShell::Multitasking::ISwitchItem>(Windows::Internal::ComposableShell::Multitasking::ISwitchItem * *);
		static void Destroy<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop>(Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop * *);
		static void Destroy<Windows::Internal::ComposableShell::Tabs::IShellTab>(Windows::Internal::ComposableShell::Tabs::IShellTab * *);
		static void Destroy<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>(Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * *);
		static void Destroy<Windows::Internal::Shell::Chaining::IChainLink>(Windows::Internal::Shell::Chaining::IChainLink * *);
		static void Destroy<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
		static void Destroy<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion>(Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion * *);
	};

	struct SerializingLockPolicy
	{
		static detail::LockHolder<ComLock,detail::AcquireRead> Read(ComLock &,long *);
		static detail::LockHolder<ComLock,detail::AcquireWrite> Write(ComLock &,long *);
	};

	namespace detail
	{
		struct AbiReference<Windows::Internal::ComposableShell::ITreeNode *,GitStorageType<Windows::Internal::ComposableShell::ITreeNode>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *> >
		{
			~AbiReference<Windows::Internal::ComposableShell::ITreeNode *,GitStorageType<Windows::Internal::ComposableShell::ITreeNode>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *> >();
		};

		struct AbiReference<Windows::Internal::ComposableShell::Tabs::IShellTab *,GitStorageType<Windows::Internal::ComposableShell::Tabs::IShellTab>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *> >
		{
			~AbiReference<Windows::Internal::ComposableShell::Tabs::IShellTab *,GitStorageType<Windows::Internal::ComposableShell::Tabs::IShellTab>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *> >();
		};

		struct AbiReference<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *,GitStorageType<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >
		{
			~AbiReference<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *,GitStorageType<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> >();
		};

		struct AbiReference<Windows::Internal::Shell::Chaining::IChainLink *,GitStorageType<Windows::Internal::Shell::Chaining::IChainLink>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *> >
		{
			~AbiReference<Windows::Internal::Shell::Chaining::IChainLink *,GitStorageType<Windows::Internal::Shell::Chaining::IChainLink>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::Chaining::IChainLink *> >();
		};

		struct AbiReference<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,GitStorageType<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> >
		{
			~AbiReference<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,GitStorageType<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *> >();
		};

		struct AtomicUpdater<0>
		{
			AtomicUpdater<0>();
		};

		struct GitStorageType<Windows::Internal::ComposableShell::ITreeNode>
		{
			struct ReferencedGitCookie
			{
				long Localize(Windows::Internal::ComposableShell::ITreeNode * *);
				unsigned long Release();
			};

			GitStorageType<Windows::Internal::ComposableShell::ITreeNode>();
			long Initialize(Windows::Internal::ComposableShell::ITreeNode *);
		};

		struct GitStorageType<Windows::Internal::ComposableShell::Tabs::IShellTab>
		{
			struct ReferencedGitCookie
			{
				long Localize(Windows::Internal::ComposableShell::Tabs::IShellTab * *);
				unsigned long Release();
			};

			GitStorageType<Windows::Internal::ComposableShell::Tabs::IShellTab>();
			long Initialize(Windows::Internal::ComposableShell::Tabs::IShellTab *);
		};

		struct GitStorageType<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>
		{
			struct ReferencedGitCookie
			{
				long Localize(Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults * *);
				unsigned long Release();
			};

			GitStorageType<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults>();
			long Initialize(Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults *);
		};

		struct GitStorageType<Windows::Internal::Shell::Chaining::IChainLink>
		{
			struct ReferencedGitCookie
			{
				long Localize(Windows::Internal::Shell::Chaining::IChainLink * *);
				unsigned long Release();
			};

			GitStorageType<Windows::Internal::Shell::Chaining::IChainLink>();
			long Initialize(Windows::Internal::Shell::Chaining::IChainLink *);
		};

		struct GitStorageType<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>
		{
			struct ReferencedGitCookie
			{
				long Localize(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
				unsigned long Release();
			};

			GitStorageType<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>();
			long Initialize(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
		};

		struct LockHolder<ComLock,AcquireRead>
		{
			~LockHolder<ComLock,AcquireRead>();
		};

		struct LockHolder<ComLock,AcquireWrite>
		{
			~LockHolder<ComLock,AcquireWrite>();
		};

		struct ReentrancyGuard<0>
		{
			ReentrancyGuard<0>(...);
		};

		struct ReentrancyGuard<1>
		{
			ReentrancyGuard<1> & operator=(ReentrancyGuard<1>);
			ReentrancyGuard<1>(long,long volatile *);
			long const hr();
		};

	};

};

class XamlAllUpViewController
{
	Platform::String ^ GetResourceString(unsigned int);
	long GetApplicationViewsFromLayout(IAppLayout *,unsigned int *,IApplicationView * *,IApplicationView * *);
	void CreateAndAppendSwitcherContextMenuItem(unsigned int,Platform::String ^,Windows::Foundation::Collections::IVector<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> ^);
	void CreateAndAppendSwitcherContextMenuItem(unsigned int,Windows::Foundation::Collections::IVector<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> ^);
	void CreateVirtualDesktopContextMenuItems(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,Windows::Foundation::Collections::IVector<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> ^);
	void GetTabletModeContextMenuItemString(IApplicationView *,unsigned int,Platform::String ^ *);
	void HandlePinningCommand(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,unsigned int);
	void HandleSnappingCommands(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,unsigned int);
	~XamlAllUpViewController();
public:
	XamlAllUpViewController(IAllUpViewHost *,IApplicationViewSwitcher *,IImmersiveAppCrusher *,ISnapServiceProvider *,IMultitaskingViewManager *,IInspectable *,ITabViewManager *,IAppLayoutCache *,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource ^,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopController ^);
};

class XamlAllUpViewHost
{
	long CreateFrameForMonitor(IImmersiveMonitor *);
	long CreateFrames();
	long GetFrameForMonitor(IImmersiveMonitor *,MonitorFrame * *);
	long GetImmersiveMonitorForNavigate(IImmersiveMonitor *,unsigned int,IImmersiveMonitor * *);
	long GetMonitorForHWND(HWND__ *,IImmersiveMonitor * *);
	void AnimateDismissFrames();
protected:
	virtual void v_DismissView();
public:
	XamlAllUpViewHost();
	long RuntimeClassInitialize();
	virtual bool IsFrameWindowForHost(HWND__ *);
	virtual long DismissViewAnimated();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long Initialize(XamlViewHostInitializeArgs *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnMonitorFrameDismissAnimationCompleted();
	virtual long Show(IImmersiveMonitorManager *,IImmersiveMonitor *,ALL_UP_VIEW_FLAGS);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long ToggleAllUpView();
	virtual long ViewLoaded();
	virtual long ViewVirtualDesktopChanged(IApplicationView *);
	virtual long VirtualDesktopDestroyBegin(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyFailed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyed(IVirtualDesktop *,IVirtualDesktop *);
	virtual void HandleCrossMonitorTabbing(HWND__ *,unsigned int);
	virtual ~XamlAllUpViewHost();
};

class XamlAltTabViewController
{
	~XamlAltTabViewController();
public:
	XamlAltTabViewController(IAltTabViewHost *,IApplicationViewSwitcher *,IImmersiveAppCrusher *,IMultitaskingViewManager *,IInspectable *,ITabViewManager *);
	void OnAltKeyUp();
	void RegisterForEvents(Windows::UI::Xaml::Window ^,WindowsInternal::ComposableShell::Experiences::Switcher::AltTab ^,WindowsInternal::ComposableShell::Experiences::Switcher::AltTabViewModel ^);
	void RegisterKeyboardHook();
	void UnregisterForEvents();
};

class XamlAltTabViewHost
{
	WindowsInternal::ComposableShell::Experiences::Switcher::AltTab ^ CreateAltTabControl(Windows::Internal::ComposableShell::Multitasking::SwitchItemDataView ^);
protected:
	virtual void v_DismissView();
public:
	XamlAltTabViewHost();
	long RuntimeClassInitialize();
	virtual long Initialize(XamlViewHostInitializeArgs *);
	virtual long MoveVirtualCursor(tagPOINT *);
	virtual long Navigate(unsigned int);
	virtual long Show(IImmersiveMonitor *,ALT_TAB_VIEW_FLAGS,IApplicationView *);
	virtual long SwitchToSelectedItemAndDismiss();
	virtual ~XamlAltTabViewHost();
};

class XamlBaseViewController
{
protected:
	XamlBaseViewController();
	bool TryCloseTabGroupItem(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^);
	long GetAppViewFromSwitchItem(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,IApplicationView * *);
	void DismissView();
	~XamlBaseViewController();
};

class XamlExplorerHost
{
	Microsoft::WRL::ComPtr<IObjMgr> GetRuntimeSiteAggregator();
	static long s_LoadResources();
protected:
	~XamlExplorerHost();
public:
	XamlExplorerHost();
	void CreateXamlExplorerHostWindowInBand(IXamlExplorerHostWindowCreatedCallback *,tagRECT,unsigned long,IPrivilegedPresentationOperations *,IXamlExplorerHost *,_GUID const &,void * *);
	void EnsureHostAppCreated();
	void EnsureMetadataRegistered();
};

class XamlExplorerHostShellComponent
{
	long GrabAvailableWindowForSize(tagRECT,bool *,_GUID const &,void * *);
	long InitializeWindows();
public:
	XamlExplorerHostShellComponent();
	long RuntimeClassInitialize();
	virtual long CreateXamlExplorerHostWindow(IXamlExplorerHostWindowCreatedCallback *,tagRECT,_GUID const &,void * *);
	virtual long CreateXamlExplorerHostWindowInBand(IXamlExplorerHostWindowCreatedCallback *,tagRECT,unsigned long,_GUID const &,void * *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long PerformDelayedInitialization();
	virtual long RecycleXamlExplorerWindow(IXamlExplorerHostWindow *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~XamlExplorerHostShellComponent();
};

namespace XamlExplorerHostTelemetry
{
	class CreateXamlExplorerHostWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		CreateXamlExplorerHostWindow Split();
		void StartActivity();
		~CreateXamlExplorerHostWindow();
	};

	class RunWindowCallback
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~RunWindowCallback();
	};

	class XamlExplorerHostWindowCache
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned __int64);
		~XamlExplorerHostWindowCache();
	};

};

class XamlExplorerHostWindow
{
	void ChangeVisibility(bool);
	void ChangeVisibilityHelper(bool);
	void Cloak();
public:
	XamlExplorerHostWindow();
	long RuntimeClassInitialize(IXamlExplorerHostWindowCreatedCallback *,unsigned long,IPrivilegedPresentationOperations *,IXamlExplorerHost *);
	virtual HWND__ * GetWindow();
	virtual long AsyncDestroy();
	virtual long SetActive();
	virtual long SetPosition(tagRECT const *);
	virtual void Hide();
	virtual void RunCallback(IXamlExplorerHostWindowCreatedCallback *);
	virtual void SetWindowBand(unsigned long);
	virtual void Show();
	virtual void WindowCreated();
	virtual ~XamlExplorerHostWindow();
};

class XamlLauncher
{
	bool AllowAutoAppRestartOnCrash();
	bool DidHolographicHandleHotKey();
	bool ShouldLaunchCortanaOnPPI(HSTRING__ *);
	long InitializeCortanaExperienceManager(Windows::Internal::Shell::Experience::IShellExperienceManagerFactory *);
	long InitializeHolographicContextIdentifier();
	long InitializeJumpViewExperienceManager(Windows::Internal::Shell::Experience::IShellExperienceManagerFactory *);
	long InitializeStartExperienceManager(Windows::Internal::Shell::Experience::IShellExperienceManagerFactory *);
	static XamlLauncher * s_pLauncher;
	static void LogErrorIfStartOrCortanaArentInstalled();
	static void s_LauncherDesktopSwitchEventProc(HWINEVENTHOOK__ *,unsigned long,HWND__ *,long,long,unsigned long,unsigned long);
	void HandleInitialHShellEvent();
	void LinkUIATrees(bool);
	void PublishLauncherVisibilityState(bool);
	void UninitializeCortanaExperienceManager();
	void UninitializeStartExperienceManager();
public:
	XamlLauncher();
	virtual long ConnectToMonitor(IImmersiveMonitor *);
	virtual long Dismiss(IMMERSIVELAUNCHERDISMISSMETHOD);
	virtual long DismissSynchronouslyWithoutTransition();
	virtual long DismissToLastDesktopApplication(IMMERSIVELAUNCHERDISMISSMETHOD);
	virtual long GetCortanaVisibleMonitor(HMONITOR__ * *);
	virtual long GetMonitor(IImmersiveMonitor * *);
	virtual long Hide();
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long IsCortanaShowing(int *);
	virtual long IsVisible(int *);
	virtual long OnFirstSignAnimationFinished();
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long OnStartButtonPressed(IMMERSIVELAUNCHERSHOWMETHOD,IMMERSIVELAUNCHERDISMISSMETHOD);
	virtual long PearlRectMayHaveChanged(HMONITOR__ *);
	virtual long PerformDelayedInitialization();
	virtual long Prelaunch();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ResetCortanaRelaunchCount();
	virtual long SetForeground();
	virtual long SetPositioningAnchorRect(tagRECT,tagRECT);
	virtual long Show(HSTRING__ *);
	virtual long ShowStartView(IMMERSIVELAUNCHERSHOWMETHOD,IMMERSIVELAUNCHERSHOWFLAGS);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long Toggle(HSTRING__ *);
	virtual long TrayEdgeMayHaveChanged(EDGEUI_TRAYSTUCKPLACE,HMONITOR__ *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WorkAreaMayHaveChanged(HMONITOR__ *);
	virtual void OnCortanaWithoutStartShowing();
	virtual void OnDeviceLockedWithLauncherAndCortanaShowing();
	virtual void OnDeviceUnlockedWithLauncherAndCortanaShowing();
	virtual void OnLauncherAndCortanaShowing();
	virtual void OnLauncherHide();
	virtual void OnLauncherShow();
	virtual ~XamlLauncher();
};

struct XamlLauncherFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

class XamlLauncherState
{
	bool IsCortanaNotInstalledOrDisabledByPolicy();
	long OnStartFailedToGetForegroundImpl();
	long ProcessCortanaShownEventArgs(Windows::Internal::Shell::Experience::ICortanaShownEventArgs *);
	long ShowCortanaFromOpenStart(HSTRING__ *);
	long ShowSearchOrCortana(HSTRING__ *);
	long ShowSearchWithStart(bool);
	long SnapshotCpuCyclesUsedByCortana(unsigned __int64 *);
	long SnapshotCpuCyclesUsedBySiHost(unsigned __int64 *);
	long SnapshotCpuCyclesUsedByStartMenu(unsigned __int64 *);
	void BeginCortanaReadinessCutoff();
	void BeginCortanaTelemetryTimeout();
	void BeginStartTelemetryTimeout();
	void CancelCortanaReadinessCutoff();
	void CancelCortanaTelemetryTimeout();
	void CancelStartTelemetryTimeout(bool);
	void CompleteStartShowTelemetry(long,CommonStartTelemetry::LauncherInvokeActivity *);
	void PostCortanaOrSearchVisibility(bool,HMONITOR__ *);
	void PrepareStartReadinessListener();
	void StartTrackingCpuUsageOfCriticalProcesses();
	void StopTrackingCpuUsageOfCriticalProcesses();
	void TryToCompleteStartShowWithoutCortana();
public:
	XamlLauncherState();
	long OnCortanaAppTransitionCompleted(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,IInspectable *);
	long OnCortanaCutoffTimerFired();
	long OnCortanaDestroyed(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,IInspectable *);
	long OnCortanaDeviceLocked(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,IInspectable *);
	long OnCortanaDeviceUnlocked(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,IInspectable *);
	long OnCortanaDismissRequested(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,IInspectable *);
	long OnCortanaFailedToGetForeground(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,IInspectable *);
	long OnCortanaHidden(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,IInspectable *);
	long OnCortanaLaunchResult(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,int);
	long OnCortanaNotifyRelaunch(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,Windows::Foundation::Rect);
	long OnCortanaShown(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *);
	long OnCortanaTransitionRequested(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,IInspectable *);
	long OnSessionBecameIdle();
	long OnStartDestroyed(Windows::Internal::Shell::Experience::IStartExperienceManager *,IInspectable *);
	long OnStartExitTransitionToCortanaCompleted(Windows::Internal::Shell::Experience::IStartExperienceManager *,IInspectable *);
	long OnStartFailedToGetForeground(Windows::Internal::Shell::Experience::IStartExperienceManager *,IInspectable *);
	long OnStartHidden(Windows::Internal::Shell::Experience::IStartExperienceManager *,IInspectable *);
	long OnStartLaunchResult(Windows::Internal::Shell::Experience::IStartExperienceManager *,int);
	long OnStartShown(Windows::Internal::Shell::Experience::IStartExperienceManager *,IInspectable *);
	virtual bool DoesCortanaHaveForeground();
	virtual bool IsCortanaExplicitDismissEnabled();
	virtual bool IsCortanaVisible();
	virtual bool IsStartExperienceManagerInitialized();
	virtual bool IsStartVisible();
	virtual bool IsStartWindowVisible();
	virtual long GetCortanaVisibleMonitor(HMONITOR__ * *);
	virtual long Hide();
	virtual long Initialize(Windows::Internal::Shell::Experience::IStartExperienceManager *,Windows::Internal::Shell::Experience::ICortanaExperienceManager *,IRealmActivationHistory *,IXamlLauncherStateCallback *);
	virtual long IsCortanaShowing(int *);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long ResetCortanaRelaunchCount();
	virtual long SetPositioningAnchorRect(tagRECT,tagRECT);
	virtual long SetSite(IUnknown *);
	virtual long Show(HSTRING__ *);
	virtual long ShowStartView(IMMERSIVELAUNCHERSHOWMETHOD,IMMERSIVELAUNCHERSHOWFLAGS);
	virtual long Toggle(HSTRING__ *);
	virtual long Uninitialize();
	virtual void ClaimForeground();
	virtual void DismissStartAndCortana(IMMERSIVELAUNCHERDISMISSMETHOD);
	virtual void HideCortana();
	virtual void HideStartAndCortana(IMMERSIVELAUNCHERDISMISSMETHOD);
	virtual void MinimizeCortanaToBoxMode();
	virtual void NotifyDismissalPolicy(IStartDismissalPolicy *);
	virtual void WorkAreaMayHaveChanged();
	virtual ~XamlLauncherState();
};

struct XamlSnapAssistViewController
{
	XamlSnapAssistViewController(ISnapAssistViewHost *,ISnapAssistCallback *,Geometry::CRect const &,IMultitaskingViewManager *,IImmersiveAppCrusher *);
};

class XamlSnapAssistViewHost
{
protected:
	virtual void v_DismissView();
public:
	XamlSnapAssistViewHost();
	long RuntimeClassInitialize();
	virtual long Initialize(XamlViewHostInitializeArgs *);
	virtual long SetCallback(ISnapAssistCallback *);
	virtual long Show(tagRECT *,SNAP_ASSIST_VIEW_FLAGS);
	virtual ~XamlSnapAssistViewHost();
};

struct XamlSwitcherTelemetry
{
	class CreateAltTabControl
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CreateAltTabControl();
	};

	class NavigateAltTab
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(bool);
		~NavigateAltTab();
	};

	class OnAltKeyUp
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(bool);
		~OnAltKeyUp();
	};

	class ShowAltTab
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		void Stop(bool);
		~ShowAltTab();
	};

	class ShowXamlTaskView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(unsigned int,bool,bool);
		~ShowXamlTaskView();
	};

	class SwitchToSelectedItemAndDismiss
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(bool);
		~SwitchToSelectedItemAndDismiss();
	};

	class WindowCreatedCallback
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~WindowCreatedCallback();
	};

	static bool IsEnabled(unsigned char,unsigned __int64);
	void MonitorFrameCreated_(bool,unsigned int,unsigned int,tagRECT);
	void TaskViewContextMenuInvoked_(unsigned int,bool);
};

namespace ZBandHelpers
{
	bool IsBelowImmersiveLauncher(ZBID);
};

class _TlgActivityBase<wil::ActivityBase<CAppManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType>,35184372088832,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<CAppManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType>,35184372088832,5>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<CAppManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<CAppManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>();
};

class _TlgActivityBase<wil::ActivityBase<CortanaProactiveLogging,1,0,0,4,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>,0,0>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<CortanaProactiveLogging,1,0,0,4,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>,0,0>();
public:
	void zInternalStart();
};

struct _TlgActivityBase<wil::ActivityBase<CortanaProactiveLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>
{
	void zInternalStart();
};

struct _TlgActivityBase<wil::ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>
{
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<NotificationCenterLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType>,35184372088832,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<NotificationCenterLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType>,35184372088832,5>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<NotificationCenterLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<NotificationCenterLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<TaskFlowDataEngineTelemetry,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TaskFlowDataEngineTelemetry,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<TaskFlowDataEngineTelemetry,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TaskFlowDataEngineTelemetry,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,0,4,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,0,4>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,0,4,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,0,4>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,0,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,0,5>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,0,5,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,0,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,0,5,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,0,5>();
};

class _TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,35184372088832,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,35184372088832,5>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,70368744177664,4,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,4>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,70368744177664,4,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,4>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,70368744177664,4,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,4>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,70368744177664,4,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,4>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<WindowManagementLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>();
public:
	void zInternalStart();
};

struct __abi_FTMWeakRefData
{
	__abi_FTMWeakRefData(Platform::Object ^);
	__abi_FTMWeakRefData(Platform::Object ^,Platform::CallbackContext);
	long Get();
	long __abi_QueryInterface(Platform::Guid &,void * *);
	unsigned long Decrement();
	unsigned long Increment();
	void __abi_dtor();
};

struct __abi_dtor_helper
{
	~__abi_dtor_helper();
};

namespace __winRT
{
	long __getActivationFactoryByPCWSTR(void *,Platform::Guid &,void * *);
	long __getIids(int,unsigned long *,__s_GUID const *,Platform::Guid * *);
	long __windowsCreateString(wchar_t const *,int,HSTRING__ * *);
};

class _bstr_t
{
	struct Data_t
	{
		Data_t(unsigned short const *);
		unsigned long Release();
	};

	void _Free();
public:
	_bstr_t & operator=(unsigned short const *);
	_bstr_t(unsigned short const *);
	~_bstr_t();
};

struct _variant_t
{
	_variant_t(IDispatch *,bool);
	_variant_t(unsigned short const *);
	void ChangeType(unsigned short,_variant_t const *);
	~_variant_t();
};

struct com_ptr_with_timeout<Windows::Internal::ComposableShell::Tabs::IApplicationViewTabManagerPrivate>
{
	~com_ptr_with_timeout<Windows::Internal::ComposableShell::Tabs::IApplicationViewTabManagerPrivate>();
};

namespace cshell
{
	wil::com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,0>,wil::err_exception_policy> make_agile_vector<Windows::Internal::ComposableShell::ITreeNode *>();
	wil::com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,0>,wil::err_exception_policy> make_agile_vector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>();
	wil::com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<unsigned int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<unsigned int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,0>,wil::err_exception_policy> make_agile_vector<unsigned int>();
};

namespace details
{
	struct ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Microsoft::WRL::ComPtr<IApplicationView> operator*();
			~Iterator();
		};

		ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> >(IObjectArray *);
		ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> >::Iterator begin();
		ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> >::Iterator end();
		~ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> >();
	};

	struct ObjectArrayAdapterImpl<IApplicationView,wil::com_ptr_t<IApplicationView,wil::err_returncode_policy> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IApplicationView,wil::com_ptr_t<IApplicationView,wil::err_returncode_policy> > * const,unsigned int);
			~Iterator();
		};

		ObjectArrayAdapterImpl<IApplicationView,wil::com_ptr_t<IApplicationView,wil::err_returncode_policy> >(IObjectArray *);
		~ObjectArrayAdapterImpl<IApplicationView,wil::com_ptr_t<IApplicationView,wil::err_returncode_policy> >();
	};

	struct ObjectArrayAdapterImpl<IApplicationViewChangeListener,Microsoft::WRL::ComPtr<IApplicationViewChangeListener> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IApplicationViewChangeListener,Microsoft::WRL::ComPtr<IApplicationViewChangeListener> > * const,unsigned int);
			~Iterator();
		};

		~ObjectArrayAdapterImpl<IApplicationViewChangeListener,Microsoft::WRL::ComPtr<IApplicationViewChangeListener> >();
	};

	struct ObjectArrayAdapterImpl<IHolographicViewTransitionNotification,Microsoft::WRL::ComPtr<IHolographicViewTransitionNotification> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IHolographicViewTransitionNotification,Microsoft::WRL::ComPtr<IHolographicViewTransitionNotification> > * const,unsigned int);
			~Iterator();
		};

		~ObjectArrayAdapterImpl<IHolographicViewTransitionNotification,Microsoft::WRL::ComPtr<IHolographicViewTransitionNotification> >();
	};

	struct ObjectArrayAdapterImpl<IImmersiveApplicationInternal,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IImmersiveApplicationInternal,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> > * const,unsigned int);
			~Iterator();
		};

		ObjectArrayAdapterImpl<IImmersiveApplicationInternal,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> >(IObjectArray *);
		~ObjectArrayAdapterImpl<IImmersiveApplicationInternal,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> >();
	};

	struct ObjectArrayAdapterImpl<IImmersiveMonitor,Microsoft::WRL::ComPtr<IImmersiveMonitor> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IImmersiveMonitor,Microsoft::WRL::ComPtr<IImmersiveMonitor> > * const,unsigned int);
			~Iterator();
		};

		ObjectArrayAdapterImpl<IImmersiveMonitor,Microsoft::WRL::ComPtr<IImmersiveMonitor> >(IObjectArray *);
		~ObjectArrayAdapterImpl<IImmersiveMonitor,Microsoft::WRL::ComPtr<IImmersiveMonitor> >();
	};

	namespace ObjectArrayAdapterImpl<IMultitaskingViewVisibilityNotification,Microsoft::WRL::ComPtr<IMultitaskingViewVisibilityNotification> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

	};

	namespace ObjectArrayAdapterImpl<IObservableObjectArrayChanged,Microsoft::WRL::ComPtr<IObservableObjectArrayChanged> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

	};

	struct ObjectArrayAdapterImpl<IObservableObjectArrayChangedBeginEnd,Microsoft::WRL::ComPtr<IObservableObjectArrayChangedBeginEnd> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

		ObjectArrayAdapterImpl<IObservableObjectArrayChangedBeginEnd,Microsoft::WRL::ComPtr<IObservableObjectArrayChangedBeginEnd> >(IObjectArray *);
	};

	struct ObjectArrayAdapterImpl<IPenWorkspaceLayoutItem,Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IPenWorkspaceLayoutItem,Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> > * const,unsigned int);
			~Iterator();
		};

		ObjectArrayAdapterImpl<IPenWorkspaceLayoutItem,Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> >(IObjectArray *);
		~ObjectArrayAdapterImpl<IPenWorkspaceLayoutItem,Microsoft::WRL::ComPtr<IPenWorkspaceLayoutItem> >();
	};

	struct ObjectArrayAdapterImpl<ISwitchItemElement,Microsoft::WRL::ComPtr<ISwitchItemElement> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

		ObjectArrayAdapterImpl<ISwitchItemElement,Microsoft::WRL::ComPtr<ISwitchItemElement> >(IObjectArray *);
	};

	struct ObjectArrayAdapterImpl<ISwitchItemInternal,Microsoft::WRL::ComPtr<ISwitchItemInternal> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<ISwitchItemInternal,Microsoft::WRL::ComPtr<ISwitchItemInternal> > * const,unsigned int);
		};

		ObjectArrayAdapterImpl<ISwitchItemInternal,Microsoft::WRL::ComPtr<ISwitchItemInternal> >(IObjectArray *);
	};

	namespace ObjectArrayAdapterImpl<ITabletModePositionerManagerNotification,Microsoft::WRL::ComPtr<ITabletModePositionerManagerNotification> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

	};

	struct ObjectArrayAdapterImpl<IVirtualDesktop,Microsoft::WRL::ComPtr<IVirtualDesktop> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IVirtualDesktop,Microsoft::WRL::ComPtr<IVirtualDesktop> > * const,unsigned int);
			~Iterator();
		};

		ObjectArrayAdapterImpl<IVirtualDesktop,Microsoft::WRL::ComPtr<IVirtualDesktop> >(IObjectArray *);
		~ObjectArrayAdapterImpl<IVirtualDesktop,Microsoft::WRL::ComPtr<IVirtualDesktop> >();
	};

	struct ObjectArrayAdapterImpl<IWindowManagementShowMoveSizeEvents,Microsoft::WRL::ComPtr<IWindowManagementShowMoveSizeEvents> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IWindowManagementShowMoveSizeEvents,Microsoft::WRL::ComPtr<IWindowManagementShowMoveSizeEvents> > * const,unsigned int);
			~Iterator();
		};

		ObjectArrayAdapterImpl<IWindowManagementShowMoveSizeEvents,Microsoft::WRL::ComPtr<IWindowManagementShowMoveSizeEvents> >(IObjectArray *);
		~ObjectArrayAdapterImpl<IWindowManagementShowMoveSizeEvents,Microsoft::WRL::ComPtr<IWindowManagementShowMoveSizeEvents> >();
	};

	struct ObjectArrayAdapterImpl<IWindowManagementWindowGroupingEvents,Microsoft::WRL::ComPtr<IWindowManagementWindowGroupingEvents> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IWindowManagementWindowGroupingEvents,Microsoft::WRL::ComPtr<IWindowManagementWindowGroupingEvents> > * const,unsigned int);
			~Iterator();
		};

		ObjectArrayAdapterImpl<IWindowManagementWindowGroupingEvents,Microsoft::WRL::ComPtr<IWindowManagementWindowGroupingEvents> >(IObjectArray *);
		~ObjectArrayAdapterImpl<IWindowManagementWindowGroupingEvents,Microsoft::WRL::ComPtr<IWindowManagementWindowGroupingEvents> >();
	};

};

struct pointer_with_rpc_timeout<Windows::Internal::ComposableShell::Tabs::IApplicationViewTabManagerPrivate>
{
	~pointer_with_rpc_timeout<Windows::Internal::ComposableShell::Tabs::IApplicationViewTabManagerPrivate>();
};

struct positioningOperationInfo
{
	~positioningOperationInfo();
};

namespace std
{
	struct _Alloc_construct_ptr<allocator<_List_node<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<pair<unsigned __int64 const ,winrt::guid>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<pair<unsigned __int64 const ,winrt::guid>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<pair<unsigned int const ,KeyboardHosting::ViewState>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<pair<unsigned int const ,KeyboardHosting::ViewState>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<pair<unsigned int const ,bool>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<pair<unsigned int const ,bool>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<pair<winrt::guid const ,unsigned __int64>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<pair<winrt::guid const ,unsigned __int64>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<unsigned __int64,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<unsigned __int64,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<unsigned int,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<unsigned int,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<wil::com_ptr_t<IImmersiveMonitor,wil::err_exception_policy>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<wil::com_ptr_t<IImmersiveMonitor,wil::err_exception_policy>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_List_node<winrt::guid,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_List_node<winrt::guid,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<HWND__ * const,ExeData>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<HWND__ * const,ExeData>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> > >();
	};

	struct _Alloc_construct_ptr<allocator<_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> > >
	{
		~_Alloc_construct_ptr<allocator<_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> > >();
	};

	struct _Atomic_bool
	{
		operator bool();
	};

	struct _Compressed_pair<allocator<unsigned short>,_String_val<_Simple_types<unsigned short> >,1>
	{
		~_Compressed_pair<allocator<unsigned short>,_String_val<_Simple_types<unsigned short> >,1>();
	};

	struct _Container_proxy_ptr12<allocator<_Container_proxy> >
	{
		~_Container_proxy_ptr12<allocator<_Container_proxy> >();
	};

	struct _Deque_const_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >
	{
		_Deque_const_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >(_Deque_const_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > const &);
		~_Deque_const_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >();
	};

	struct _Deque_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >
	{
		_Deque_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > > operator+(__int64);
	};

	struct _Deque_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > >
	{
		_Deque_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > > operator+(__int64);
	};

	struct _Func_class<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionData,ParsedPenWorkspaceLayout const &>
	{
		WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionData operator()(ParsedPenWorkspaceLayout const &);
	};

	struct _Func_class<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionData,ParsedTaskbarLayout const &>
	{
		WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionData operator()(ParsedTaskbarLayout const &);
	};

	class _Func_class<bool,HMONITOR__ *>
	{
	protected:
		void _Tidy();
	public:
		~_Func_class<bool,HMONITOR__ *>();
	};

	struct _Func_class<unsigned char,Concurrency::task<bool> >
	{
		~_Func_class<unsigned char,Concurrency::task<bool> >();
	};

	struct _Func_class<void,Concurrency::task<bool> >
	{
		~_Func_class<void,Concurrency::task<bool> >();
	};

	struct _Func_class<void,IApplicationView *,IImmersiveMonitor *>
	{
		~_Func_class<void,IApplicationView *,IImmersiveMonitor *>();
	};

	class _Func_class<void,bool>
	{
	protected:
		void _Tidy();
	public:
		void operator()(bool);
		~_Func_class<void,bool>();
	};

	struct _Func_class<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,unsigned int>
	{
		wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> operator()(unsigned int);
	};

	class _Hash<_Umap_traits<Microsoft::WRL::ComPtr<IVirtualDesktop>,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop>,_Uhash_compare<Microsoft::WRL::ComPtr<IVirtualDesktop>,hash<Microsoft::WRL::ComPtr<IVirtualDesktop> >,equal_to<Microsoft::WRL::ComPtr<IVirtualDesktop> > >,allocator<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > >,bool> _Insert_unverified<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > > >(pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > >);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Forced_rehash(unsigned __int64);
	public:
		_Hash<_Umap_traits<Microsoft::WRL::ComPtr<IVirtualDesktop>,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop>,_Uhash_compare<Microsoft::WRL::ComPtr<IVirtualDesktop>,hash<Microsoft::WRL::ComPtr<IVirtualDesktop> >,equal_to<Microsoft::WRL::ComPtr<IVirtualDesktop> > >,allocator<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > >,0> >(_Uhash_compare<Microsoft::WRL::ComPtr<IVirtualDesktop>,hash<Microsoft::WRL::ComPtr<IVirtualDesktop> >,equal_to<Microsoft::WRL::ComPtr<IVirtualDesktop> > > const &,allocator<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > const &);
		_List_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > > lower_bound(Microsoft::WRL::ComPtr<IVirtualDesktop> const &);
	};

	class _Hash<_Umap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<PenWorkspace::Discover::AppUsageData>,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > >,0> >
	{
	protected:
		pair<_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > >,bool> _Insert_unverified<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > > >(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > >);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Forced_rehash(unsigned __int64);
	public:
		_Hash<_Umap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<PenWorkspace::Discover::AppUsageData>,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > >,0> >(_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const &,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > const &);
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > > erase<_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > >,void>(_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > > lower_bound(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > >,bool> emplace<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &,shared_ptr<PenWorkspace::Discover::AppUsageData> &>(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &,shared_ptr<PenWorkspace::Discover::AppUsageData> &);
	};

	class _Hash<_Umap_traits<unsigned __int64,winrt::Windows::Internal::Shell::implementation::WindowData,_Uhash_compare<unsigned __int64,hash<unsigned __int64>,equal_to<unsigned __int64> >,allocator<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >,bool> _Insert_unverified<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > >(pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Destroy_if_node(_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >);
		void _Forced_rehash(unsigned __int64);
	public:
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > _Make_iter(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > >,_Iterator_base0>);
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > end();
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >,_List_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > erase<_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >,void>(_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > find(unsigned __int64 const &);
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > lower_bound(unsigned __int64 const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >,_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > > equal_range(unsigned __int64 const &);
		~_Hash<_Umap_traits<unsigned __int64,winrt::Windows::Internal::Shell::implementation::WindowData,_Uhash_compare<unsigned __int64,hash<unsigned __int64>,equal_to<unsigned __int64> >,allocator<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> >,0> >();
	};

	class _Hash<_Umap_traits<unsigned __int64,winrt::guid,_Uhash_compare<unsigned __int64,hash<unsigned __int64>,equal_to<unsigned __int64> >,allocator<pair<unsigned __int64 const ,winrt::guid> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > >,bool> _Insert_unverified<pair<unsigned __int64 const ,winrt::guid> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > >(pair<unsigned __int64 const ,winrt::guid> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > >);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Destroy_if_node(_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > >);
		void _Forced_rehash(unsigned __int64);
	public:
		_Hash<_Umap_traits<unsigned __int64,winrt::guid,_Uhash_compare<unsigned __int64,hash<unsigned __int64>,equal_to<unsigned __int64> >,allocator<pair<unsigned __int64 const ,winrt::guid> >,0> >(_Uhash_compare<unsigned __int64,hash<unsigned __int64>,equal_to<unsigned __int64> > const &,allocator<pair<unsigned __int64 const ,winrt::guid> > const &);
		_List_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > lower_bound(unsigned __int64 const &);
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > _Make_iter(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > >,_Iterator_base0>);
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > erase<_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > >,void>(_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > >);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > >,bool> emplace<unsigned __int64 &,winrt::guid const &>(unsigned __int64 &,winrt::guid const &);
	};

	class _Hash<_Umap_traits<unsigned int,KeyboardHosting::ViewState,_Uhash_compare<unsigned int,hash<unsigned int>,equal_to<unsigned int> >,allocator<pair<unsigned int const ,KeyboardHosting::ViewState> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > >,bool> _Insert_unverified<pair<unsigned int const ,KeyboardHosting::ViewState> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > > >(pair<unsigned int const ,KeyboardHosting::ViewState> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > >);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Forced_rehash(unsigned __int64);
	public:
		_Hash<_Umap_traits<unsigned int,KeyboardHosting::ViewState,_Uhash_compare<unsigned int,hash<unsigned int>,equal_to<unsigned int> >,allocator<pair<unsigned int const ,KeyboardHosting::ViewState> >,0> >(_Uhash_compare<unsigned int,hash<unsigned int>,equal_to<unsigned int> > const &,allocator<pair<unsigned int const ,KeyboardHosting::ViewState> > const &);
		_List_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > > erase<_List_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > >,void>(_List_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > >);
	};

	class _Hash<_Umap_traits<unsigned int,bool,_Uhash_compare<unsigned int,hash<unsigned int>,equal_to<unsigned int> >,allocator<pair<unsigned int const ,bool> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > >,bool> _Insert_unverified<pair<unsigned int const ,bool> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > > >(pair<unsigned int const ,bool> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > >);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Forced_rehash(unsigned __int64);
	public:
		_Hash<_Umap_traits<unsigned int,bool,_Uhash_compare<unsigned int,hash<unsigned int>,equal_to<unsigned int> >,allocator<pair<unsigned int const ,bool> >,0> >(_Uhash_compare<unsigned int,hash<unsigned int>,equal_to<unsigned int> > const &,allocator<pair<unsigned int const ,bool> > const &);
		_List_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > > erase<_List_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > >,void>(_List_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > >);
	};

	class _Hash<_Umap_traits<winrt::guid,unsigned __int64,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<pair<winrt::guid const ,unsigned __int64> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >,bool> _Insert_unverified<pair<winrt::guid const ,unsigned __int64> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > >(pair<winrt::guid const ,unsigned __int64> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Destroy_if_node(_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >);
		void _Forced_rehash(unsigned __int64);
	public:
		_Hash<_Umap_traits<winrt::guid,unsigned __int64,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<pair<winrt::guid const ,unsigned __int64> >,0> >(_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> > const &,allocator<pair<winrt::guid const ,unsigned __int64> > const &);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > _Make_iter(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > >,_Iterator_base0>);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >,_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > erase<_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >,void>(_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > lower_bound(winrt::guid const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >,_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > > equal_range(winrt::guid const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >,bool> emplace<winrt::guid const &,unsigned __int64 &>(winrt::guid const &,unsigned __int64 &);
		~_Hash<_Umap_traits<winrt::guid,unsigned __int64,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<pair<winrt::guid const ,unsigned __int64> >,0> >();
	};

	class _Hash<_Umap_traits<winrt::guid,winrt::Windows::Internal::UI::Shell::WindowTabView,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >,bool> _Insert_unverified<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > >(pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Destroy_if_node(_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >);
		void _Forced_rehash(unsigned __int64);
	public:
		_Hash<_Umap_traits<winrt::guid,winrt::Windows::Internal::UI::Shell::WindowTabView,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> >,0> >(_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> > const &,allocator<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > const &);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > _Make_iter(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > >,_Iterator_base0>);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >,_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > erase<_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >,void>(_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > lower_bound(winrt::guid const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >,_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > > equal_range(winrt::guid const &);
		~_Hash<_Umap_traits<winrt::guid,winrt::Windows::Internal::UI::Shell::WindowTabView,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> >,0> >();
	};

	class _Hash<_Umap_traits<winrt::guid,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow>,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >,bool> _Insert_unverified<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > >(pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Destroy_if_node(_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >);
		void _Forced_rehash(unsigned __int64);
	public:
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > _Make_iter(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > >,_Iterator_base0>);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >,_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > erase<_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >,void>(_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > lower_bound(winrt::guid const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >,_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > > equal_range(winrt::guid const &);
		~_Hash<_Umap_traits<winrt::guid,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow>,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > >,0> >();
	};

	class _Hash<_Uset_traits<unsigned __int64,_Uhash_compare<unsigned __int64,hash<unsigned __int64>,equal_to<unsigned __int64> >,allocator<unsigned __int64>,0> >
	{
	protected:
		_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0> _End(unsigned __int64);
		pair<_List_const_iterator<_List_val<_List_simple_types<unsigned __int64> > >,bool> _Insert_unverified<unsigned __int64 const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0> >(unsigned __int64 const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0>);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Destroy_if_node(_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0>);
		void _Forced_rehash(unsigned __int64);
	public:
		_List_const_iterator<_List_val<_List_simple_types<unsigned __int64> > > _Make_iter(_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0>);
		_List_const_iterator<_List_val<_List_simple_types<unsigned __int64> > > erase(_List_const_iterator<_List_val<_List_simple_types<unsigned __int64> > >);
	};

	class _Hash<_Uset_traits<unsigned int,_Uhash_compare<unsigned int,hash<unsigned int>,equal_to<unsigned int> >,allocator<unsigned int>,0> >
	{
	protected:
		_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned int> >,_Iterator_base0> _End(unsigned __int64);
		pair<_List_const_iterator<_List_val<_List_simple_types<unsigned int> > >,bool> _Insert_unverified<unsigned int const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned int> >,_Iterator_base0> >(unsigned int const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned int> >,_Iterator_base0>);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Forced_rehash(unsigned __int64);
	public:
		_Hash<_Uset_traits<unsigned int,_Uhash_compare<unsigned int,hash<unsigned int>,equal_to<unsigned int> >,allocator<unsigned int>,0> >(_Uhash_compare<unsigned int,hash<unsigned int>,equal_to<unsigned int> > const &,allocator<unsigned int> const &);
		_List_const_iterator<_List_val<_List_simple_types<unsigned int> > > erase(_List_const_iterator<_List_val<_List_simple_types<unsigned int> > >);
	};

	class _Hash<_Uset_traits<winrt::guid,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<winrt::guid>,0> >
	{
	protected:
		_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> _End(unsigned __int64);
		pair<_List_const_iterator<_List_val<_List_simple_types<winrt::guid> > >,bool> _Insert_unverified<winrt::guid const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> >(winrt::guid const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0>);
		unsigned __int64 _Desired_grow_bucket_count();
		void _Check_size();
		void _Destroy_if_node(_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0>);
		void _Forced_rehash(unsigned __int64);
	public:
		_Hash<_Uset_traits<winrt::guid,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<winrt::guid>,0> >(_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> > const &,allocator<winrt::guid> const &);
		_List_const_iterator<_List_val<_List_simple_types<winrt::guid> > > _Make_iter(_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0>);
		_List_const_iterator<_List_val<_List_simple_types<winrt::guid> > > erase(_List_const_iterator<_List_val<_List_simple_types<winrt::guid> > >);
		_List_const_iterator<_List_val<_List_simple_types<winrt::guid> > > lower_bound(winrt::guid const &);
		~_Hash<_Uset_traits<winrt::guid,_Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >,allocator<winrt::guid>,0> >();
	};

	struct _List_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >
	{
		bool operator==(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > const &);
	};

	struct _List_node<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> >,void *>
	{
		static void _Free_non_head<allocator<_List_node<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> >,void *> > >(allocator<_List_node<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> >,void *> > &,_List_node<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> >,void *> *);
	};

	struct _List_node<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,void *>
	{
		static void _Free_non_head<allocator<_List_node<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,void *> > >(allocator<_List_node<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,void *> > &,_List_node<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,void *> *);
		static void _Freenode<allocator<_List_node<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,void *> > >(allocator<_List_node<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,void *> > &,_List_node<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,void *> *);
	};

	struct _List_node<pair<unsigned int const ,KeyboardHosting::ViewState>,void *>
	{
		static void _Free_non_head<allocator<_List_node<pair<unsigned int const ,KeyboardHosting::ViewState>,void *> > >(allocator<_List_node<pair<unsigned int const ,KeyboardHosting::ViewState>,void *> > &,_List_node<pair<unsigned int const ,KeyboardHosting::ViewState>,void *> *);
	};

	struct _List_node<pair<winrt::guid const ,unsigned __int64>,void *>
	{
		static void _Free_non_head<allocator<_List_node<pair<winrt::guid const ,unsigned __int64>,void *> > >(allocator<_List_node<pair<winrt::guid const ,unsigned __int64>,void *> > &,_List_node<pair<winrt::guid const ,unsigned __int64>,void *> *);
	};

	struct _List_node<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,void *>
	{
		static void _Free_non_head<allocator<_List_node<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,void *> > >(allocator<_List_node<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,void *> > &,_List_node<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,void *> *);
		static void _Freenode<allocator<_List_node<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,void *> > >(allocator<_List_node<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,void *> > &,_List_node<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,void *> *);
	};

	struct _List_node<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,void *>
	{
		static void _Free_non_head<allocator<_List_node<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,void *> > >(allocator<_List_node<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,void *> > &,_List_node<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,void *> *);
		static void _Freenode<allocator<_List_node<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,void *> > >(allocator<_List_node<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,void *> > &,_List_node<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,void *> *);
	};

	struct _List_node<wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy>,void *>
	{
		static void _Free_non_head<allocator<_List_node<wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy>,void *> > >(allocator<_List_node<wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy>,void *> > &,_List_node<wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy>,void *> *);
	};

	class _Ref_count<DDAScreenCapture>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	struct _Ref_count_base
	{
		bool _Incref_nz();
		virtual void * _Get_deleter(type_info const &);
		virtual ~_Ref_count_base();
		void _Decref();
		void _Decwref();
	};

	class _Ref_count_obj<AltTabWindowHookData>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<AltTabWindowHookData><XamlAltTabViewController ^ &,HHOOK__ * &>(XamlAltTabViewController ^ &,HHOOK__ * &);
	};

	class _Ref_count_obj<Concurrency::details::_ExceptionHolder>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<Concurrency::details::_Task_impl<bool> >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<Concurrency::details::_Task_impl<bool> ><Concurrency::details::_CancellationTokenState * &,Concurrency::scheduler_ptr &>(Concurrency::details::_CancellationTokenState * &,Concurrency::scheduler_ptr &);
	};

	class _Ref_count_obj<Concurrency::details::_Task_impl<unsigned char> >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<Concurrency::details::_Task_impl<unsigned char> ><Concurrency::details::_CancellationTokenState * &,Concurrency::scheduler_ptr &>(Concurrency::details::_CancellationTokenState * &,Concurrency::scheduler_ptr &);
	};

	class _Ref_count_obj<ConnectedStandbyHelper>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<KBViewInfo>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<PenWorkspace::Discover::AppUsageData>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<PeoplePaneViewInfo>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<TwinUI::Lighting::AssistantLightBlock>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<TwinUI::Lighting::AssistantLightBlock><Microsoft::WRL::ComPtr<Windows::Devices::Lights::ILampArray> &>(Microsoft::WRL::ComPtr<Windows::Devices::Lights::ILampArray> &);
	};

	class _Ref_count_obj<TwinUI::Lighting::AssistantLightStrip>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<TwinUI::Lighting::AssistantLightStrip><Microsoft::WRL::ComPtr<Windows::Devices::Lights::ILampArray> &,vector<int,allocator<int> > &,vector<int,allocator<int> > &>(Microsoft::WRL::ComPtr<Windows::Devices::Lights::ILampArray> &,vector<int,allocator<int> > &,vector<int,allocator<int> > &);
	};

	class _Ref_count_obj<UwpAppPackageInfo>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<UwpAppPackageInfo><basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &>(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
	};

	class _Ref_count_obj<UwpAppViewInfo>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<ViewEventRegistration>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<Win32AppInfo>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<Win32AppInfo><basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &>(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &);
	};

	class _Ref_count_obj<Win32AppViewInfo>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<Win32ProcessInfo>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<Win32ProcessInfo><unsigned int &,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &>(unsigned int &,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
	};

	class _Ref_count_obj<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<WnfHelper>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<unsigned int>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<vector<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>,allocator<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<vector<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>,allocator<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	struct _Tidy_guard<deque<unsigned __int64,allocator<unsigned __int64> > >
	{
		~_Tidy_guard<deque<unsigned __int64,allocator<unsigned __int64> > >();
	};

	struct _Tidy_guard<vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > > > >
	{
		~_Tidy_guard<vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > > > >();
	};

	struct _Tidy_guard<vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > > > >
	{
		~_Tidy_guard<vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > > > >();
	};

	struct _Tidy_guard<vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		~_Tidy_guard<vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >();
	};

	struct _Tidy_guard<vector<vector<Windows::UI::Color,allocator<Windows::UI::Color> >,allocator<vector<Windows::UI::Color,allocator<Windows::UI::Color> > > > >
	{
		~_Tidy_guard<vector<vector<Windows::UI::Color,allocator<Windows::UI::Color> >,allocator<vector<Windows::UI::Color,allocator<Windows::UI::Color> > > > >();
	};

	class _Tree<_Tmap_traits<HMONITOR__ *,KeyboardHosting::ScreenSizeAndDpi,less<HMONITOR__ *>,allocator<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> > > > _Insert_at<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> &,_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> *>(bool,_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> *,pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> &,_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> > > > _Insert_hint<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> &,_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> > > >,pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> &,_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> > > >,bool> _Insert_nohint<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> &,_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> *>(bool,pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> &,_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> *);
	};

	class _Tree<_Tmap_traits<HSTRING__ *,shared_ptr<TwinUI::Lighting::IAssistantLight>,less<HSTRING__ *>,allocator<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > > > _Insert_at<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > &,_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *>(bool,_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *,pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > &,_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > > > _Insert_hint<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > &,_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > > >,pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > &,_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > > >,bool> _Insert_nohint<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > &,_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *>(bool,pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > &,_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > > > find(HSTRING__ * const &);
	};

	class _Tree<_Tmap_traits<HWND__ *,CDesktopPositioner::WindowCloakInfo,less<HWND__ *>,allocator<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > > > _Insert_at<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> &,_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *>(bool,_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *,pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> &,_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > > > _Insert_hint<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> &,_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > > >,pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> &,_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > > >,bool> _Insert_nohint<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> &,_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *>(bool,pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> &,_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > > > find(HWND__ * const &);
		unsigned __int64 erase(HWND__ * const &);
	};

	class _Tree<_Tmap_traits<HWND__ *,ExeData,less<HWND__ *>,allocator<pair<HWND__ * const,ExeData> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,ExeData> > > > _Insert_at<pair<HWND__ * const,ExeData> &,_Tree_node<pair<HWND__ * const,ExeData>,void *> *>(bool,_Tree_node<pair<HWND__ * const,ExeData>,void *> *,pair<HWND__ * const,ExeData> &,_Tree_node<pair<HWND__ * const,ExeData>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,ExeData> > > > _Insert_hint<pair<HWND__ * const,ExeData> &,_Tree_node<pair<HWND__ * const,ExeData>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,ExeData> > > >,pair<HWND__ * const,ExeData> &,_Tree_node<pair<HWND__ * const,ExeData>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,ExeData> > > >,bool> _Insert_nohint<pair<HWND__ * const,ExeData> &,_Tree_node<pair<HWND__ * const,ExeData>,void *> *>(bool,pair<HWND__ * const,ExeData> &,_Tree_node<pair<HWND__ * const,ExeData>,void *> *);
		void _Destroy_if_node(_Tree_node<pair<HWND__ * const,ExeData>,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,ExeData> > > > find(HWND__ * const &);
	};

	class _Tree<_Tmap_traits<HWND__ *,shared_ptr<Win32AppViewInfo>,less<HWND__ *>,allocator<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > > > > _Insert_at<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > &,_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> *>(bool,_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> *,pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > &,_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > > > >,bool> _Insert_nohint<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > &,_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> *>(bool,pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > &,_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> *);
	public:
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > > > >,bool> emplace<HWND__ * &,shared_ptr<Win32AppViewInfo> &>(HWND__ * &,shared_ptr<Win32AppViewInfo> &);
	};

	class _Tree<_Tmap_traits<HWND__ *,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy>,less<HWND__ *>,allocator<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > > > > _Insert_at<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *,pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > > > > _Insert_hint<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > > > >,pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *>(bool,pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *);
	};

	class _Tree<_Tmap_traits<Microsoft::WRL::ComPtr<IApplicationView>,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition>,less<Microsoft::WRL::ComPtr<IApplicationView> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > > > > _Insert_at<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *>(bool,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *,pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > > > > _Insert_hint<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > > > >,pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > > > >,bool> _Insert_nohint<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *>(bool,pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > > > >);
	};

	class _Tree<_Tmap_traits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState>,Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::SwitchItemComparator,allocator<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > > > > _Insert_at<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *>(bool,_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *,pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > > > > _Insert_hint<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > > > >,pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > > > >,bool> _Insert_nohint<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *>(bool,pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > > > > find(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const &);
	};

	class _Tree<_Tmap_traits<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId,Microsoft::WRL::ComPtr<IViewGroup>,less<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,allocator<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > > > > _Insert_at<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> *>(bool,_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> *,pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > > > >,bool> _Insert_nohint<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> *>(bool,pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > > > > find(Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &);
	};

	class _Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > _Insert_at<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *>(bool,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,bool> _Insert_nohint<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *>(bool,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
	public:
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,bool> emplace<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &>(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
	};

	class _Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<UwpAppPackageInfo>,less<void>,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > > > > _Insert_at<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *>(bool,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > > > >,bool> _Insert_nohint<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *>(bool,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > > > > find<unsigned short const *,less<void>,int>(unsigned short const * const &);
	};

	class _Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<Win32AppInfo>,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > > > > _Insert_at<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> *>(bool,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> *,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > > > >,bool> _Insert_nohint<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> *>(bool,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > > > > find(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
	};

	class _Tree<_Tmap_traits<unsigned int,KeyboardHosting::RelativePositionOnScreen,less<unsigned int>,allocator<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> > > > _Insert_at<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> &,_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> *>(bool,_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> *,pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> &,_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> > > > _Insert_hint<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> &,_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> > > >,pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> &,_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> > > >,bool> _Insert_nohint<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> &,_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> *>(bool,pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> &,_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> *);
	};

	class _Tree<_Tmap_traits<unsigned int,Windows::Foundation::Size,less<unsigned int>,allocator<pair<unsigned int const ,Windows::Foundation::Size> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,Windows::Foundation::Size> > > > _Insert_at<pair<unsigned int const ,Windows::Foundation::Size> &,_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> *>(bool,_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> *,pair<unsigned int const ,Windows::Foundation::Size> &,_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,Windows::Foundation::Size> > > > _Insert_hint<pair<unsigned int const ,Windows::Foundation::Size> &,_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,Windows::Foundation::Size> > > >,pair<unsigned int const ,Windows::Foundation::Size> &,_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,Windows::Foundation::Size> > > >,bool> _Insert_nohint<pair<unsigned int const ,Windows::Foundation::Size> &,_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> *>(bool,pair<unsigned int const ,Windows::Foundation::Size> &,_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> *);
	};

	class _Tree<_Tmap_traits<unsigned int,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,less<unsigned int>,allocator<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > _Insert_at<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *>(bool,_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *,pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > _Insert_hint<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,bool> _Insert_nohint<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *>(bool,pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > find(unsigned int const &);
	};

	class _Tree<_Tmap_traits<unsigned int,shared_ptr<Win32ProcessInfo>,less<unsigned int>,allocator<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> > > > > _Insert_at<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> > &,_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> *>(bool,_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> *,pair<unsigned int const ,shared_ptr<Win32ProcessInfo> > &,_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> > > > >,bool> _Insert_nohint<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> > &,_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> *>(bool,pair<unsigned int const ,shared_ptr<Win32ProcessInfo> > &,_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> > > > > find(unsigned int const &);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> > > > >,bool> emplace<unsigned int &,shared_ptr<Win32ProcessInfo> &>(unsigned int &,shared_ptr<Win32ProcessInfo> &);
	};

	class _Tree<_Tmap_traits<unsigned int,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy>,less<unsigned int>,allocator<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > > > > _Insert_at<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > &,_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *,pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > &,_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > > > > _Insert_hint<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > &,_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > > > >,pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > &,_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > &,_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *>(bool,pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > &,_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > > > > find(unsigned int const &);
	};

	class _Tree<_Tmap_traits<unsigned long,DisplayRegionInfo,less<unsigned long>,allocator<pair<unsigned long const ,DisplayRegionInfo> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,DisplayRegionInfo> > > > _Insert_at<pair<unsigned long const ,DisplayRegionInfo> &,_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> *>(bool,_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> *,pair<unsigned long const ,DisplayRegionInfo> &,_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,DisplayRegionInfo> > > >,bool> _Insert_nohint<pair<unsigned long const ,DisplayRegionInfo> &,_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> *>(bool,pair<unsigned long const ,DisplayRegionInfo> &,_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,DisplayRegionInfo> > > > find(unsigned long const &);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,DisplayRegionInfo> > > >,bool> emplace<unsigned long &,DisplayRegionInfo &>(unsigned long &,DisplayRegionInfo &);
	};

	class _Tree<_Tmap_traits<unsigned long,Microsoft::WRL::ComPtr<IApplicationFrame>,less<unsigned long>,allocator<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > > > _Insert_at<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *>(bool,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *,pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > > > _Insert_hint<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > > >,pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > > >,bool> _Insert_nohint<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *>(bool,pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > > >);
		unsigned __int64 erase(unsigned long const &);
	};

	class _Tree<_Tmap_traits<unsigned long,Microsoft::WRL::ComPtr<IObjectCollection>,less<unsigned long>,allocator<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > > > > _Insert_at<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *>(bool,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *,pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > > > > _Insert_hint<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > > > >,pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > > > >,bool> _Insert_nohint<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *>(bool,pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *);
	};

	class _Tree<_Tmap_traits<unsigned long,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId,less<unsigned long>,allocator<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> > > > _Insert_at<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> &,_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> *>(bool,_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> *,pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> &,_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> > > > _Insert_hint<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> &,_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> > > >,pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> &,_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> > > >,bool> _Insert_nohint<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> &,_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> *>(bool,pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> &,_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> *);
	};

	class _Tree<_Tmap_traits<unsigned long,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy>,less<unsigned long>,allocator<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > > > _Insert_at<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > &,_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> *,pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > &,_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > &,_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> *>(bool,pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > &,_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > > >);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > > >,bool> emplace<unsigned long &,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> &>(unsigned long &,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> &);
		unsigned __int64 erase(unsigned long const &);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::ApplicationViewComparator,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> > > > _Insert_at<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> > > > _Insert_hint<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> > > >,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *>(bool,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *);
	public:
		unsigned __int64 erase(wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const &);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > > _Insert_at<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *>(bool,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy>,less<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > > _Insert_at<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > > _Insert_hint<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > >,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *>(bool,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > >);
		unsigned __int64 erase(wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const &);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > _Insert_at<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > _Insert_hint<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *>(bool,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > find<IApplicationView *,less<void>,int>(IApplicationView * const &);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > >,1> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > _Insert_at<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > > _Eqrange<IApplicationView *>(IApplicationView * const &);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > > _Eqrange<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >(wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const &);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *>(bool,pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > find<IApplicationView *,less<void>,int>(IApplicationView * const &);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >,bool> emplace<IApplicationView * &,Windows::Internal::ComposableShell::Tabs::IShellTab * &>(IApplicationView * &,Windows::Internal::ComposableShell::Tabs::IShellTab * &);
		unsigned __int64 erase(wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const &);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > > > > _Insert_at<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> *,pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> *>(bool,pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > > > > find<IWin32ApplicationView *,less<void>,int>(IWin32ApplicationView * const &);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > > > >,bool> emplace<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> &,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> &>(wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> &,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> &);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy>,shared_ptr<UwpAppViewInfo>,less<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> > > > > _Insert_at<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> > &,_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> *,pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> > &,_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> > &,_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> *>(bool,pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> > &,_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> *);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > > _Insert_at<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *>(bool,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > > find<Windows::Internal::ComposableShell::Tabs::IShellTab *,less<void>,int>(Windows::Internal::ComposableShell::Tabs::IShellTab * const &);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >,bool> emplace<Windows::Internal::ComposableShell::Tabs::IShellTab * &,IApplicationView * &>(Windows::Internal::ComposableShell::Tabs::IShellTab * &,IApplicationView * &);
		unsigned __int64 erase(wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const &);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,less<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > > _Insert_at<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > > _Insert_hint<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *>(bool,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >);
		unsigned __int64 erase(wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const &);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy>,less<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > > _Insert_at<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > > _Insert_hint<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > >,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *>(bool,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > > find(wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const &);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > _Insert_at<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > _Insert_hint<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *>(bool,pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >);
		unsigned __int64 erase(wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const &);
	};

	class _Tree<_Tmap_traits<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > > > _Insert_at<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *>(bool,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *,pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > > > _Insert_hint<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > > >,pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *);
		_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> * _Copy_nodes<_Tree<_Tmap_traits<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > >,0> >::_Copy_tag>(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *,_Tree<_Tmap_traits<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > >,0> >::_Copy_tag);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > > >,bool> _Insert_nohint<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *>(bool,pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *);
		void _Copy<_Tree<_Tmap_traits<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > >,0> >::_Copy_tag>(_Tree<_Tmap_traits<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > >,0> > const &,_Tree<_Tmap_traits<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > >,0> >::_Copy_tag);
		void _Destroy_if_node(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *);
	public:
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > > >,bool> emplace<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > const &>(pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > const &);
	};

	class _Tree<_Tset_traits<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,less<void>,allocator<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,0> >
	{
	protected:
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > _Insert_at<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> &,_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> *>(bool,_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> *,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> &,_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> *);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >,bool> _Insert_nohint<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> &,_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> *>(bool,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> &,_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> *);
		void _Destroy_if_node(_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> *);
	public:
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >);
		unsigned __int64 erase(wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const &);
	};

	class _Tree<_Tset_traits<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,less<void>,allocator<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> >,0> >
	{
	protected:
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> > > > _Insert_at<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> &,_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> *>(bool,_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> *,wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> &,_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> *);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> > > >,bool> _Insert_nohint<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> &,_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> *>(bool,wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> &,_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> *);
		void _Destroy_if_node(_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> *);
	};

	struct _Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *>
	{
		static _Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> * _Buynode<allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,shared_ptr<UwpAppPackageInfo> &>(allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,shared_ptr<UwpAppPackageInfo> &);
	};

	struct _Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *>
	{
		static _Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> * _Buyheadnode<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> > &);
	};

	struct _Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *>
	{
		static _Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> * _Buynode<allocator<_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> >,IWinRTApplicationView * &,shared_ptr<UwpAppViewInfo> &>(allocator<_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> *,IWinRTApplicationView * &,shared_ptr<UwpAppViewInfo> &);
	};

	struct _Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *>
	{
		static _Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> * _Buyheadnode<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> > &);
	};

	struct _Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *>
	{
		static _Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> * _Buyheadnode<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> > &);
	};

	struct _Tree_node_scoped_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> >,_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > > >
	{
		~_Tree_node_scoped_ptr<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> >,_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > > >();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,ExeData> > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,ExeData> > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> > >,_Iterator_base0> & operator++();
	};

	struct _Tree_val<_Tree_simple_types<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi> > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> > >(allocator<_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> > &,_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> *);
		void _Lrotate(_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> *);
		void _Rrotate(_Tree_node<pair<HMONITOR__ * const,KeyboardHosting::ScreenSizeAndDpi>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > >
	{
		_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > > >);
		static _Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> * _Min(_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> > >(allocator<_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> > &,_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *);
		void _Lrotate(_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *);
		void _Rrotate(_Tree_node<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > >
	{
		_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > > >);
		static _Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> * _Min(_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> > >(allocator<_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> > &,_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *);
		void _Lrotate(_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *);
		void _Rrotate(_Tree_node<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<HWND__ * const,ExeData> > >
	{
		_Tree_node<pair<HWND__ * const,ExeData>,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,ExeData> > > >);
		static _Tree_node<pair<HWND__ * const,ExeData>,void *> * _Min(_Tree_node<pair<HWND__ * const,ExeData>,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<HWND__ * const,ExeData>,void *> > >(allocator<_Tree_node<pair<HWND__ * const,ExeData>,void *> > &,_Tree_node<pair<HWND__ * const,ExeData>,void *> *);
		void _Lrotate(_Tree_node<pair<HWND__ * const,ExeData>,void *> *);
		void _Rrotate(_Tree_node<pair<HWND__ * const,ExeData>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> > >(allocator<_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> > &,_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> *);
		void _Lrotate(_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> *);
		void _Rrotate(_Tree_node<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > > >
	{
		_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > > > >);
		static _Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> * _Min(_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> > >(allocator<_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *);
		void _Lrotate(_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *);
		void _Rrotate(_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > > >
	{
		_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> > > > >);
		static _Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> * _Min(_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> > >(allocator<_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *);
		void _Lrotate(_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *);
		void _Rrotate(_Tree_node<pair<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ const,shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > > >
	{
		_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > > > >);
		static _Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> * _Min(_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> > >(allocator<_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> > &,_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> *);
		void _Lrotate(_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> *);
		void _Rrotate(_Tree_node<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> > >(allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Lrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Rrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > > >
	{
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> > > > >);
		static _Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> * _Min(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> > >(allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *);
		void _Lrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *);
		void _Rrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<UwpAppPackageInfo> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > > >
	{
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > > > >);
		static _Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> * _Min(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> > >(allocator<_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> *);
		void _Lrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> *);
		void _Rrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> > >(allocator<_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> > &,_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned int const ,Windows::Foundation::Size> > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> > >(allocator<_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> > &,_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned int const ,Windows::Foundation::Size>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> > >(allocator<_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> > &,_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> > > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> > >(allocator<_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> > &,_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned int const ,shared_ptr<Win32ProcessInfo> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > > >
	{
		_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> > > > >);
		static _Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> * _Min(_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned int const ,wil::com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned long const ,DisplayRegionInfo> > >
	{
		_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,DisplayRegionInfo> > > >);
		static _Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> * _Min(_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> > >(allocator<_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> > &,_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned long const ,DisplayRegionInfo>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > >
	{
		_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> > > > >);
		static _Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> * _Min(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> > >(allocator<_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IApplicationFrame> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> > >(allocator<_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> > >(allocator<_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> > &,_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > >
	{
		_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > > >);
		static _Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> * _Min(_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> > >
	{
		_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue> > > >);
		static _Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> * _Min(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *);
		void _Lrotate(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *);
		void _Rrotate(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,Windows::Internal::Shell::TaskFlow::DataEngine::AppViewInfoCache::AppViewInfoValue>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >
	{
		_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >);
		static _Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> * _Min(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > >
	{
		_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > >);
		static _Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> * _Min(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >
	{
		_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >);
		static _Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> * _Min(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > > >
	{
		_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> > > > >);
		static _Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> * _Min(_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> > > >
	{
		void _Erase_tree<allocator<_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> *);
		void _Lrotate(_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> *);
		void _Rrotate(_Tree_node<pair<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const ,shared_ptr<UwpAppViewInfo> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >
	{
		_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >);
		static _Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> * _Min(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > >
	{
		_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > > >);
		static _Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> * _Min(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >
	{
		_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >);
		static _Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> * _Min(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > >
	{
		static _Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> * _Min(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *);
		void _Erase_tree<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *);
		void _Erase_tree_and_orphan<allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> > >(allocator<_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> > &,_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *);
		void _Lrotate(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *);
		void _Rrotate(_Tree_node<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >
	{
		_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >);
		static _Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> * _Min(_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> *);
		void _Erase_tree<allocator<_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> > >(allocator<_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> > &,_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> *);
		void _Lrotate(_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> *);
		void _Rrotate(_Tree_node<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> > >
	{
		_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> * _Extract(_Tree_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> > > >);
		static _Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> * _Min(_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> *);
		void _Erase_tree<allocator<_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> > >(allocator<_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> > &,_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> *);
		void _Lrotate(_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> *);
		void _Rrotate(_Tree_node<wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy>,void *> *);
	};

	struct _Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >
	{
		bool operator()(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
	};

	struct _Uhash_compare<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid> >
	{
		unsigned __int64 operator()(winrt::guid const &);
	};

	struct _Uninitialized_backout_al<ParsedPenWorkspaceLayout *,allocator<ParsedPenWorkspaceLayout> >
	{
		~_Uninitialized_backout_al<ParsedPenWorkspaceLayout *,allocator<ParsedPenWorkspaceLayout> >();
	};

	struct _Uninitialized_backout_al<ParsedTaskbarLayout *,allocator<ParsedTaskbarLayout> >
	{
		~_Uninitialized_backout_al<ParsedTaskbarLayout *,allocator<ParsedTaskbarLayout> >();
	};

	struct _Uninitialized_backout_al<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >
	{
		~_Uninitialized_backout_al<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >();
	};

	struct _Uninitialized_backout_al<vector<Windows::UI::Color,allocator<Windows::UI::Color> > *,allocator<vector<Windows::UI::Color,allocator<Windows::UI::Color> > > >
	{
		~_Uninitialized_backout_al<vector<Windows::UI::Color,allocator<Windows::UI::Color> > *,allocator<vector<Windows::UI::Color,allocator<Windows::UI::Color> > > >();
	};

	struct _WChar_traits<unsigned short>
	{
		static unsigned short const * find(unsigned short const *,unsigned __int64,unsigned short const &);
	};

	struct allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0> >
	{
		void deallocate(_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0> * const,unsigned __int64);
	};

	struct allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> >
	{
		void deallocate(_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> * const,unsigned __int64);
	};

	struct allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > >
	{
		void deallocate(_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > * const,unsigned __int64);
	};

	struct allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > >
	{
		void deallocate(_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > * const,unsigned __int64);
	};

	struct allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > >
	{
		void deallocate(_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > * const,unsigned __int64);
	};

	struct allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > >
	{
		void deallocate(_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > * const,unsigned __int64);
	};

	struct allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > >
	{
		void deallocate(_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > * const,unsigned __int64);
	};

	struct allocator<winrt::guid>
	{
		void deallocate(winrt::guid * const,unsigned __int64);
		winrt::guid * allocate(unsigned __int64);
	};

	struct atomic<bool>
	{
		bool operator=(bool);
	};

	struct bad_alloc
	{
		bad_alloc();
		bad_alloc(bad_alloc const &);
		virtual ~bad_alloc();
	};

	struct bad_array_new_length
	{
		bad_array_new_length();
		bad_array_new_length(bad_array_new_length const &);
		virtual ~bad_array_new_length();
	};

	struct bad_optional_access
	{
		bad_optional_access(bad_optional_access const &);
		virtual char const * what();
		virtual ~bad_optional_access();
	};

	struct bad_weak_ptr
	{
		bad_weak_ptr(bad_weak_ptr const &);
		virtual char const * what();
		virtual ~bad_weak_ptr();
	};

	namespace basic_ostream<unsigned short,char_traits<unsigned short> >
	{
		struct _Sentry_base
		{
			~_Sentry_base();
		};

		struct sentry
		{
			sentry(basic_ostream<unsigned short,char_traits<unsigned short> > &);
			~sentry();
		};

	};

	class basic_streambuf<unsigned short,char_traits<unsigned short> >
	{
	protected:
		virtual __int64 showmanyc();
		virtual __int64 xsgetn(unsigned short *,__int64);
		virtual __int64 xsputn(unsigned short const *,__int64);
		virtual basic_streambuf<unsigned short,char_traits<unsigned short> > * setbuf(unsigned short *,__int64);
		virtual int sync();
		virtual unsigned short uflow();
		virtual void imbue(locale const &);
	public:
		virtual void _Lock();
		virtual void _Unlock();
	};

	class basic_string<char,char_traits<char>,allocator<char> >
	{
		basic_string<char,char_traits<char>,allocator<char> > & _Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const *,unsigned __int64>(unsigned __int64,<lambda_65e615be2a453ca0576c979606f46740>,char const *,unsigned __int64);
		static void _Xlen();
	public:
		basic_string<char,char_traits<char>,allocator<char> > & append(char const * const,unsigned __int64);
		~basic_string<char,char_traits<char>,allocator<char> >();
	};

	class basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >
	{
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & _Reallocate_for<<lambda_05cef1f6fdf474c9f3ed207deba0f73b>,unsigned short const *>(unsigned __int64,<lambda_05cef1f6fdf474c9f3ed207deba0f73b>,unsigned short const *);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & _Reallocate_for<<lambda_8317d86ccc4fc543e8e6132f798c706e>,unsigned short>(unsigned __int64,<lambda_8317d86ccc4fc543e8e6132f798c706e>,unsigned short);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & _Reallocate_grow_by<<lambda_156f8c05752017390d6185e99ef4c093>,unsigned __int64,unsigned short const *,unsigned __int64>(unsigned __int64,<lambda_156f8c05752017390d6185e99ef4c093>,unsigned __int64,unsigned short const *,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & _Reallocate_grow_by<<lambda_7030d12a21dba11210293044e97fe9c7>,unsigned short const *,unsigned __int64>(unsigned __int64,<lambda_7030d12a21dba11210293044e97fe9c7>,unsigned short const *,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & _Reallocate_grow_by<<lambda_b70241e9b5ebaad244db3e52d52cab17>,unsigned __int64,unsigned short>(unsigned __int64,<lambda_b70241e9b5ebaad244db3e52d52cab17>,unsigned __int64,unsigned short);
		static void _Xlen();
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Tidy_deallocate();
	public:
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & append(unsigned __int64,unsigned short);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & append(unsigned short const * const,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & assign(unsigned short const * const,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & insert(unsigned __int64,unsigned short const * const,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & operator=(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > substr(unsigned __int64,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(unsigned __int64,unsigned short);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(unsigned short const * const);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(unsigned short const * const,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> ><unsigned short *,void>(unsigned short *,unsigned short *,allocator<unsigned short> const &);
		int compare(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		int compare(unsigned short const * const);
		unsigned __int64 find(unsigned short const * const,unsigned __int64);
		unsigned short const * c_str();
		void _Construct_lv_contents(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		void resize(unsigned __int64,unsigned short);
		~basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >();
	};

	class basic_string<wchar_t,char_traits<wchar_t>,allocator<wchar_t> >
	{
		basic_string<wchar_t,char_traits<wchar_t>,allocator<wchar_t> > & _Reallocate_for<<lambda_3fa8b2c8193a0f3144fc4b1b8f243931>,wchar_t const *>(unsigned __int64,<lambda_3fa8b2c8193a0f3144fc4b1b8f243931>,wchar_t const *);
	};

	class basic_stringbuf<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >
	{
	protected:
		virtual fpos<_Mbstatet> seekoff(__int64,int,int);
		virtual fpos<_Mbstatet> seekpos(fpos<_Mbstatet>,int);
		virtual unsigned short overflow(unsigned short);
		virtual unsigned short pbackfail(unsigned short);
		virtual unsigned short underflow();
		void _Tidy();
	public:
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > str();
		virtual ~basic_stringbuf<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >();
	};

	struct basic_stringstream<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >
	{
		basic_stringstream<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(int);
		virtual ~basic_stringstream<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >();
	};

	namespace chrono
	{
		struct duration<__int64,ratio<1,10000000> >
		{
			duration<__int64,ratio<1,10000000> ><__int64,ratio<1,1000>,void>(duration<__int64,ratio<1,1000> > const &);
			duration<__int64,ratio<1,10000000> ><__int64,ratio<1,1>,void>(duration<__int64,ratio<1,1> > const &);
		};

		struct duration<__int64,ratio<1,1000> >
		{
			duration<__int64,ratio<1,1000> ><int,void>(int const &);
		};

		struct steady_clock
		{
			static time_point<steady_clock,duration<__int64,ratio<1,1000000000> > > now();
		};

	};

	struct condition_variable
	{
		void wait<<lambda_a1eabba02874cbf8cbb226c45133fc37> >(unique_lock<mutex> &,<lambda_a1eabba02874cbf8cbb226c45133fc37>);
	};

	struct default_delete<PrimaryAppProxyBase>
	{
		void operator()(PrimaryAppProxyBase *);
	};

	class deque<KeyboardHosting::TabTipAdapter::PendingShowHideViewData,allocator<KeyboardHosting::TabTipAdapter::PendingShowHideViewData> >
	{
		void _Growmap(unsigned __int64);
		void _Push_back_internal(KeyboardHosting::TabTipAdapter::PendingShowHideViewData const &);
	};

	class deque<PenWorkspace::Discover::ForegroundSwitchData,allocator<PenWorkspace::Discover::ForegroundSwitchData> >
	{
		void _Growmap(unsigned __int64);
	};

	class deque<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^,allocator<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> >
	{
		void _Growmap(unsigned __int64);
		void _Push_back_internal(WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^ const &);
	public:
		_Deque_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > erase(_Deque_const_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,_Deque_const_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >);
		void pop_back();
		void pop_front();
		~deque<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^,allocator<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> >();
	};

	class deque<positioningOperationInfo,allocator<positioningOperationInfo> >
	{
		void _Tidy();
	};

	class deque<unsigned __int64,allocator<unsigned __int64> >
	{
		void _Growmap(unsigned __int64);
		void _Move_assign(deque<unsigned __int64,allocator<unsigned __int64> > &,_Equal_allocators);
		void _Push_back_internal(unsigned __int64 const &);
		void _Tidy();
		void _Xlen();
	public:
		_Deque_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > > erase(_Deque_const_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >);
		_Deque_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > > erase(_Deque_const_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >,_Deque_const_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >);
		deque<unsigned __int64,allocator<unsigned __int64> >();
		deque<unsigned __int64,allocator<unsigned __int64> >(unsigned __int64,unsigned __int64 const &);
		unsigned __int64 & emplace_back<unsigned __int64 const &>(unsigned __int64 const &);
		unsigned __int64 & operator[](unsigned __int64);
		void assign<_Deque_unchecked_const_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >,void>(_Deque_unchecked_const_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >,_Deque_unchecked_const_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >);
		void push_front(unsigned __int64 const &);
		~deque<unsigned __int64,allocator<unsigned __int64> >();
	};

	class deque<winrt::guid,allocator<winrt::guid> >
	{
		void _Growmap(unsigned __int64);
		void _Xlen();
		void _Xran();
	public:
		_Deque_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > > erase(_Deque_const_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > >);
		_Deque_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > > erase(_Deque_const_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > >,_Deque_const_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > >);
		void push_front(winrt::guid const &);
		winrt::guid & at(unsigned __int64);
		winrt::guid & front();
		~deque<winrt::guid,allocator<winrt::guid> >();
	};

	struct enable_shared_from_this<ConnectedStandbyHelper>
	{
		shared_ptr<ConnectedStandbyHelper> shared_from_this();
	};

	struct exception
	{
		exception(exception const &);
		virtual char const * what();
	};

	struct exception_ptr
	{
		exception_ptr & operator=(exception_ptr const &);
		exception_ptr(exception_ptr const &);
		static exception_ptr _Copy_exception(void *,void const *);
		~exception_ptr();
	};

	namespace experimental
	{
		struct _Resumable_helper_traits<winrt::Windows::Foundation::IAsyncOperation<unsigned int>,winrt::Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>
		{
			static coroutine_handle<coroutine_traits<winrt::Windows::Foundation::IAsyncOperation<unsigned int>,winrt::Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type> _Handle_from_frame(void *);
			static coroutine_traits<winrt::Windows::Foundation::IAsyncOperation<unsigned int>,winrt::Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type * _Promise_from_frame(void *);
			static void _ConstructPromise(void *,void *,int);
			static void _DestructPromise(void *);
		};

		struct _Resumable_helper_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher *>
		{
			static coroutine_handle<coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher *>::promise_type> _Handle_from_frame(void *);
			static coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher *>::promise_type * _Promise_from_frame(void *);
			static void _ConstructPromise(void *,void *,int);
			static void _DestructPromise(void *);
		};

		struct _Resumable_helper_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::TabProxyWindow *,unsigned int,unsigned int,bool>
		{
			static coroutine_handle<coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::TabProxyWindow *,unsigned int,unsigned int,bool>::promise_type> _Handle_from_frame(void *);
			static coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::TabProxyWindow *,unsigned int,unsigned int,bool>::promise_type * _Promise_from_frame(void *);
			static void _ConstructPromise(void *,void *,int);
			static void _DestructPromise(void *);
		};

		struct _Resumable_helper_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::TabProxyWindow *>
		{
			static coroutine_handle<coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::TabProxyWindow *>::promise_type> _Handle_from_frame(void *);
			static coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::TabProxyWindow *>::promise_type * _Promise_from_frame(void *);
			static void _ConstructPromise(void *,void *,int);
			static void _DestructPromise(void *);
		};

		struct _Resumable_helper_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::WindowTabHost *,unsigned __int64>
		{
			static coroutine_handle<coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::WindowTabHost *,unsigned __int64>::promise_type> _Handle_from_frame(void *);
			static coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::WindowTabHost *,unsigned __int64>::promise_type * _Promise_from_frame(void *);
			static void _ConstructPromise(void *,void *,int);
			static void _DestructPromise(void *);
		};

		namespace coroutine_traits<winrt::Windows::Foundation::IAsyncOperation<unsigned int>,winrt::Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>
		{
			struct promise_type
			{
				void return_value(unsigned int const &);
			};

		};

		namespace coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher *>
		{
			struct promise_type
			{
				suspend_never final_suspend();
				suspend_never initial_suspend();
				void return_void();
				void unhandled_exception();
				winrt::fire_and_forget get_return_object();
			};

		};

		namespace coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::TabProxyWindow *,unsigned int,unsigned int,bool>
		{
			struct promise_type
			{
				suspend_never final_suspend();
				suspend_never initial_suspend();
				void return_void();
				void unhandled_exception();
				winrt::fire_and_forget get_return_object();
			};

		};

		namespace coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::TabProxyWindow *>
		{
			struct promise_type
			{
				suspend_never final_suspend();
				suspend_never initial_suspend();
				void return_void();
				void unhandled_exception();
				winrt::fire_and_forget get_return_object();
			};

		};

		namespace coroutine_traits<winrt::fire_and_forget,winrt::Windows::Internal::Shell::implementation::WindowTabHost *,unsigned __int64>
		{
			struct promise_type
			{
				suspend_never final_suspend();
				suspend_never initial_suspend();
				void return_void();
				void unhandled_exception();
				winrt::fire_and_forget get_return_object();
			};

		};

		struct suspend_never
		{
			bool await_ready();
			void await_resume();
			void await_suspend(coroutine_handle<void>);
		};

	};

	struct function<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionData (ParsedPenWorkspaceLayout const &)>
	{
		~function<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionData (ParsedPenWorkspaceLayout const &)>();
	};

	struct function<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionData (ParsedTaskbarLayout const &)>
	{
		~function<WindowsInternal::Shell::UnifiedTile::CuratedTileCollections::SelectionData (ParsedTaskbarLayout const &)>();
	};

	struct function<bool (HMONITOR__ *)>
	{
		~function<bool (HMONITOR__ *)>();
	};

	struct function<unsigned char (Concurrency::task<bool>)>
	{
		~function<unsigned char (Concurrency::task<bool>)>();
	};

	struct function<void ()>
	{
		function<void ()>(function<void ()> const &);
		function<void ()><<lambda_f25c37099038263181b5186a3fa41b37>,void>(<lambda_f25c37099038263181b5186a3fa41b37>);
		~function<void ()>();
	};

	struct function<void (Concurrency::task<bool>)>
	{
		function<void (Concurrency::task<bool>)>(function<void (Concurrency::task<bool>)> const &);
		~function<void (Concurrency::task<bool>)>();
	};

	struct function<void (IApplicationView *,IImmersiveMonitor *)>
	{
		function<void (IApplicationView *,IImmersiveMonitor *)>(function<void (IApplicationView *,IImmersiveMonitor *)> const &);
		~function<void (IApplicationView *,IImmersiveMonitor *)>();
	};

	struct function<void (Windows::Internal::OneCore::ViewEventHandlers::tagHostIdentifier const &)>
	{
		~function<void (Windows::Internal::OneCore::ViewEventHandlers::tagHostIdentifier const &)>();
	};

	struct function<void (bool)>
	{
		function<void (bool)> & operator=(function<void (bool)> const &);
		~function<void (bool)>();
	};

	struct function<void (unsigned short *)>
	{
		~function<void (unsigned short *)>();
	};

	struct function<wil::com_ptr_t<IApplicationViewTitlebarConfiguration,wil::err_exception_policy> ()>
	{
		~function<wil::com_ptr_t<IApplicationViewTitlebarConfiguration,wil::err_exception_policy> ()>();
	};

	struct function<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> (unsigned int)>
	{
		~function<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> (unsigned int)>();
	};

	struct list<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> >,allocator<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > >);
		void _Insert<IVirtualDesktop * &,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> &>(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > >,_Iterator_base0>,IVirtualDesktop * &,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> &);
		void _Insert<Microsoft::WRL::ComPtr<IVirtualDesktop> &,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> &>(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > >,_Iterator_base0>,Microsoft::WRL::ComPtr<IVirtualDesktop> &,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> &);
		~list<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> >,allocator<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > >();
	};

	struct list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > >);
		void _Insert<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &,shared_ptr<PenWorkspace::Discover::AppUsageData> &>(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > >,_Iterator_base0>,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &,shared_ptr<PenWorkspace::Discover::AppUsageData> &);
		~list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > >();
	};

	struct list<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,allocator<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >);
		~list<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData>,allocator<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > >();
	};

	struct list<pair<unsigned __int64 const ,winrt::guid>,allocator<pair<unsigned __int64 const ,winrt::guid> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > >);
		void _Insert<unsigned __int64 &,winrt::guid const &>(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > >,_Iterator_base0>,unsigned __int64 &,winrt::guid const &);
		~list<pair<unsigned __int64 const ,winrt::guid>,allocator<pair<unsigned __int64 const ,winrt::guid> > >();
	};

	struct list<pair<unsigned int const ,KeyboardHosting::ViewState>,allocator<pair<unsigned int const ,KeyboardHosting::ViewState> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > >);
		~list<pair<unsigned int const ,KeyboardHosting::ViewState>,allocator<pair<unsigned int const ,KeyboardHosting::ViewState> > >();
	};

	struct list<pair<unsigned int const ,bool>,allocator<pair<unsigned int const ,bool> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > >);
		~list<pair<unsigned int const ,bool>,allocator<pair<unsigned int const ,bool> > >();
	};

	struct list<pair<winrt::guid const ,unsigned __int64>,allocator<pair<winrt::guid const ,unsigned __int64> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >);
		void _Insert<winrt::guid const &,unsigned __int64 &>(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > >,_Iterator_base0>,winrt::guid const &,unsigned __int64 &);
		~list<pair<winrt::guid const ,unsigned __int64>,allocator<pair<winrt::guid const ,unsigned __int64> > >();
	};

	struct list<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,allocator<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >);
		~list<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView>,allocator<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > >();
	};

	struct list<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,allocator<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >);
		~list<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> >,allocator<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > >();
	};

	struct list<unsigned __int64,allocator<unsigned __int64> >
	{
		_List_iterator<_List_val<_List_simple_types<unsigned __int64> > > erase(_List_const_iterator<_List_val<_List_simple_types<unsigned __int64> > >);
		~list<unsigned __int64,allocator<unsigned __int64> >();
	};

	struct list<unsigned int,allocator<unsigned int> >
	{
		_List_iterator<_List_val<_List_simple_types<unsigned int> > > erase(_List_const_iterator<_List_val<_List_simple_types<unsigned int> > >);
		~list<unsigned int,allocator<unsigned int> >();
	};

	struct list<wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy>,allocator<wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy> > >
	{
		void _Insert<wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy> const &>(_List_unchecked_const_iterator<_List_val<_List_simple_types<wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy> > >,_Iterator_base0>,wil::com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,wil::err_exception_policy> const &);
	};

	class list<wil::com_ptr_t<IImmersiveMonitor,wil::err_exception_policy>,allocator<wil::com_ptr_t<IImmersiveMonitor,wil::err_exception_policy> > >
	{
		void _Alloc_sentinel_and_proxy();
	public:
		void _Insert<Microsoft::WRL::ComPtr<IImmersiveMonitor> const &>(_List_unchecked_const_iterator<_List_val<_List_simple_types<wil::com_ptr_t<IImmersiveMonitor,wil::err_exception_policy> > >,_Iterator_base0>,Microsoft::WRL::ComPtr<IImmersiveMonitor> const &);
		~list<wil::com_ptr_t<IImmersiveMonitor,wil::err_exception_policy>,allocator<wil::com_ptr_t<IImmersiveMonitor,wil::err_exception_policy> > >();
	};

	struct list<winrt::guid,allocator<winrt::guid> >
	{
		_List_iterator<_List_val<_List_simple_types<winrt::guid> > > erase(_List_const_iterator<_List_val<_List_simple_types<winrt::guid> > >);
		void _Insert<winrt::guid const &>(_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0>,winrt::guid const &);
		~list<winrt::guid,allocator<winrt::guid> >();
	};

	struct lock_guard<mutex>
	{
		~lock_guard<mutex>();
	};

	struct map<HSTRING__ *,shared_ptr<TwinUI::Lighting::IAssistantLight>,less<HSTRING__ *>,allocator<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > >
	{
		~map<HSTRING__ *,shared_ptr<TwinUI::Lighting::IAssistantLight>,less<HSTRING__ *>,allocator<pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > > >();
	};

	struct map<HWND__ *,CDesktopPositioner::WindowCloakInfo,less<HWND__ *>,allocator<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > >
	{
		~map<HWND__ *,CDesktopPositioner::WindowCloakInfo,less<HWND__ *>,allocator<pair<HWND__ * const,CDesktopPositioner::WindowCloakInfo> > >();
	};

	struct map<HWND__ *,shared_ptr<Win32AppViewInfo>,less<HWND__ *>,allocator<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > > >
	{
		~map<HWND__ *,shared_ptr<Win32AppViewInfo>,less<HWND__ *>,allocator<pair<HWND__ * const,shared_ptr<Win32AppViewInfo> > > >();
	};

	struct map<HWND__ *,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy>,less<HWND__ *>,allocator<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > > >
	{
		~map<HWND__ *,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy>,less<HWND__ *>,allocator<pair<HWND__ * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,wil::err_exception_policy> > > >();
	};

	struct map<Microsoft::WRL::ComPtr<IApplicationView>,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition>,less<Microsoft::WRL::ComPtr<IApplicationView> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > > >
	{
		~map<Microsoft::WRL::ComPtr<IApplicationView>,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition>,less<Microsoft::WRL::ComPtr<IApplicationView> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,Microsoft::WRL::ComPtr<IOcclusionBasedApplicationViewPosition> > > >();
	};

	struct map<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId,Microsoft::WRL::ComPtr<IViewGroup>,less<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,allocator<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > > >
	{
		~map<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId,Microsoft::WRL::ComPtr<IViewGroup>,less<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId>,allocator<pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> > > >();
	};

	struct map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<Win32AppInfo>,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > > >
	{
		~map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<Win32AppInfo>,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<Win32AppInfo> > > >();
	};

	struct map<unsigned int,KeyboardHosting::RelativePositionOnScreen,less<unsigned int>,allocator<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> > >
	{
		~map<unsigned int,KeyboardHosting::RelativePositionOnScreen,less<unsigned int>,allocator<pair<unsigned int const ,KeyboardHosting::RelativePositionOnScreen> > >();
	};

	struct map<unsigned int,Windows::Foundation::Size,less<unsigned int>,allocator<pair<unsigned int const ,Windows::Foundation::Size> > >
	{
		~map<unsigned int,Windows::Foundation::Size,less<unsigned int>,allocator<pair<unsigned int const ,Windows::Foundation::Size> > >();
	};

	struct map<unsigned int,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,less<unsigned int>,allocator<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		~map<unsigned int,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,less<unsigned int>,allocator<pair<unsigned int const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >();
	};

	struct map<unsigned long,DisplayRegionInfo,less<unsigned long>,allocator<pair<unsigned long const ,DisplayRegionInfo> > >
	{
		~map<unsigned long,DisplayRegionInfo,less<unsigned long>,allocator<pair<unsigned long const ,DisplayRegionInfo> > >();
	};

	struct map<unsigned long,Microsoft::WRL::ComPtr<IObjectCollection>,less<unsigned long>,allocator<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > > >
	{
		~map<unsigned long,Microsoft::WRL::ComPtr<IObjectCollection>,less<unsigned long>,allocator<pair<unsigned long const ,Microsoft::WRL::ComPtr<IObjectCollection> > > >();
	};

	struct map<unsigned long,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId,less<unsigned long>,allocator<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> > >
	{
		~map<unsigned long,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId,less<unsigned long>,allocator<pair<unsigned long const ,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId> > >();
	};

	struct map<unsigned long,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy>,less<unsigned long>,allocator<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > >
	{
		~map<unsigned long,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy>,less<unsigned long>,allocator<pair<unsigned long const ,wil::com_ptr_t<IWindowGroup,wil::err_exception_policy> > > >();
	};

	struct map<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy>,less<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > >
	{
		~map<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy>,less<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,wil::err_exception_policy> > > >();
	};

	struct map<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >
	{
		~map<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >();
	};

	struct map<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >
	{
		~map<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >();
	};

	struct map<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >
	{
		~map<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >();
	};

	struct map<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > >
	{
		~map<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy>,less<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> >,allocator<pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> > > >();
	};

	struct multimap<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >
	{
		~multimap<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,less<void>,allocator<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > >();
	};

	struct mutex
	{
		~mutex();
	};

	struct optional<APPLICATION_FRAME_CHROME_CHANGE_DATA>
	{
		unsigned char & value( ?? ::Z APPLICATION_FRAME_CHROME_CHANGE_DATA::&, ?? );
	};

	struct optional<AppTitlebarConfiguration>
	{
		unsigned char & value( ?? ::Z AppTitlebarConfiguration::&, ?? );
	};

	struct optional<ExeData>
	{
		~optional<ExeData>();
	};

	struct optional<KioskPositioner::KioskPositionerConfiguration>
	{
		~optional<KioskPositioner::KioskPositionerConfiguration>();
	};

	struct pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >
	{
		pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> >(pair<HSTRING__ * const,shared_ptr<TwinUI::Lighting::IAssistantLight> > const &);
	};

	struct pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >
	{
		~pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const ,Microsoft::WRL::ComPtr<IViewGroup> >();
	};

	struct pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId,Microsoft::WRL::ComPtr<IViewGroup> >
	{
		~pair<Windows::Internal::ComposableShell::Tabs::ShellTabGroupId,Microsoft::WRL::ComPtr<IViewGroup> >();
	};

	struct pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >
	{
		~pair<wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,wil::err_exception_policy>,wil::com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,wil::err_exception_policy> >();
	};

	struct queue<PenWorkspace::Discover::ForegroundSwitchData,deque<PenWorkspace::Discover::ForegroundSwitchData,allocator<PenWorkspace::Discover::ForegroundSwitchData> > >
	{
		~queue<PenWorkspace::Discover::ForegroundSwitchData,deque<PenWorkspace::Discover::ForegroundSwitchData,allocator<PenWorkspace::Discover::ForegroundSwitchData> > >();
	};

	struct queue<positioningOperationInfo,deque<positioningOperationInfo,allocator<positioningOperationInfo> > >
	{
		~queue<positioningOperationInfo,deque<positioningOperationInfo,allocator<positioningOperationInfo> > >();
	};

	struct runtime_error
	{
		runtime_error(runtime_error const &);
		virtual ~runtime_error();
	};

	struct set<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,less<void>,allocator<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >
	{
		~set<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,less<void>,allocator<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >();
	};

	struct shared_ptr<AltTabWindowHookData>
	{
		~shared_ptr<AltTabWindowHookData>();
	};

	struct shared_ptr<Concurrency::details::_ExceptionHolder>
	{
		shared_ptr<Concurrency::details::_ExceptionHolder> & operator=(shared_ptr<Concurrency::details::_ExceptionHolder> const &);
		~shared_ptr<Concurrency::details::_ExceptionHolder>();
	};

	struct shared_ptr<Concurrency::details::_Task_impl<bool> >
	{
		~shared_ptr<Concurrency::details::_Task_impl<bool> >();
	};

	struct shared_ptr<Concurrency::details::_Task_impl_base>
	{
		~shared_ptr<Concurrency::details::_Task_impl_base>();
	};

	struct shared_ptr<Concurrency::scheduler_interface>
	{
		~shared_ptr<Concurrency::scheduler_interface>();
	};

	struct shared_ptr<ConnectedStandbyHelper>
	{
		~shared_ptr<ConnectedStandbyHelper>();
	};

	class shared_ptr<DDAScreenCapture>
	{
		void _Setp<DDAScreenCapture>(DDAScreenCapture *,integral_constant<bool,0>);
	public:
		void reset<DDAScreenCapture>(DDAScreenCapture *);
	};

	struct shared_ptr<KBViewInfo>
	{
		shared_ptr<KBViewInfo> & operator=(shared_ptr<KBViewInfo> const &);
		~shared_ptr<KBViewInfo>();
	};

	struct shared_ptr<PenWorkspace::Discover::AppUsageData>
	{
		shared_ptr<PenWorkspace::Discover::AppUsageData> & operator=(shared_ptr<PenWorkspace::Discover::AppUsageData> const &);
		~shared_ptr<PenWorkspace::Discover::AppUsageData>();
	};

	struct shared_ptr<PeoplePaneViewInfo>
	{
		shared_ptr<PeoplePaneViewInfo> & operator=(shared_ptr<PeoplePaneViewInfo> const &);
		void reset();
		~shared_ptr<PeoplePaneViewInfo>();
	};

	struct shared_ptr<TwinUI::Lighting::IAssistantLight>
	{
		~shared_ptr<TwinUI::Lighting::IAssistantLight>();
	};

	struct shared_ptr<UwpAppPackageInfo>
	{
		shared_ptr<UwpAppPackageInfo>(shared_ptr<UwpAppPackageInfo> const &);
		~shared_ptr<UwpAppPackageInfo>();
	};

	struct shared_ptr<UwpAppViewInfo>
	{
		~shared_ptr<UwpAppViewInfo>();
	};

	struct shared_ptr<ViewEventRegistration>
	{
		shared_ptr<ViewEventRegistration> & operator=(shared_ptr<ViewEventRegistration> const &);
		~shared_ptr<ViewEventRegistration>();
	};

	struct shared_ptr<Win32AppInfo>
	{
		~shared_ptr<Win32AppInfo>();
	};

	struct shared_ptr<Win32AppViewInfo>
	{
		~shared_ptr<Win32AppViewInfo>();
	};

	struct shared_ptr<Win32ProcessInfo>
	{
		~shared_ptr<Win32ProcessInfo>();
	};

	struct shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState>
	{
		~shared_ptr<Windows::Internal::ComposableShell::Multitasking::SwitchItemDataViewImpl::DataViewItemState>();
	};

	struct shared_ptr<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >
	{
		~shared_ptr<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >();
	};

	struct shared_ptr<unsigned int>
	{
		~shared_ptr<unsigned int>();
	};

	struct shared_ptr<vector<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>,allocator<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > >
	{
		~shared_ptr<vector<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>,allocator<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > >();
	};

	struct shared_ptr<vector<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>,allocator<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > >
	{
		~shared_ptr<vector<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>,allocator<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > >();
	};

	struct tuple<Microsoft::WRL::ComPtr<IApplicationView> >
	{
		~tuple<Microsoft::WRL::ComPtr<IApplicationView> >();
	};

	struct tuple<Microsoft::WRL::ComPtr<IVirtualDesktop> >
	{
		~tuple<Microsoft::WRL::ComPtr<IVirtualDesktop> >();
	};

	struct tuple<Microsoft::WRL::ComPtr<IVirtualDesktop>,Microsoft::WRL::ComPtr<IVirtualDesktop> >
	{
		~tuple<Microsoft::WRL::ComPtr<IVirtualDesktop>,Microsoft::WRL::ComPtr<IVirtualDesktop> >();
	};

	struct tuple<Microsoft::WRL::ComPtr<IVirtualDesktop>,Microsoft::WRL::Wrappers::HString>
	{
		~tuple<Microsoft::WRL::ComPtr<IVirtualDesktop>,Microsoft::WRL::Wrappers::HString>();
	};

	struct tuple<wil::com_ptr_t<IPrivDragDrop,wil::err_exception_policy>,wil::com_ptr_t<IDropTarget,wil::err_exception_policy>,HWND__ *>
	{
		~tuple<wil::com_ptr_t<IPrivDragDrop,wil::err_exception_policy>,wil::com_ptr_t<IDropTarget,wil::err_exception_policy>,HWND__ *>();
	};

	struct unique_lock<mutex>
	{
		unique_lock<mutex>(mutex &);
		~unique_lock<mutex>();
	};

	struct unique_ptr<AltTabWindowHook,default_delete<AltTabWindowHook> >
	{
		~unique_ptr<AltTabWindowHook,default_delete<AltTabWindowHook> >();
	};

	struct unique_ptr<CCrashDetector,default_delete<CCrashDetector> >
	{
		~unique_ptr<CCrashDetector,default_delete<CCrashDetector> >();
	};

	struct unique_ptr<Concurrency::details::_DefaultPPLTaskScheduler::_PPLTaskChore,default_delete<Concurrency::details::_DefaultPPLTaskScheduler::_PPLTaskChore> >
	{
		~unique_ptr<Concurrency::details::_DefaultPPLTaskScheduler::_PPLTaskChore,default_delete<Concurrency::details::_DefaultPPLTaskScheduler::_PPLTaskChore> >();
	};

	struct unique_ptr<Concurrency::details::_TaskProcHandle,default_delete<Concurrency::details::_TaskProcHandle> >
	{
		~unique_ptr<Concurrency::details::_TaskProcHandle,default_delete<Concurrency::details::_TaskProcHandle> >();
	};

	struct unique_ptr<DDAScreenCapture,default_delete<DDAScreenCapture> >
	{
		~unique_ptr<DDAScreenCapture,default_delete<DDAScreenCapture> >();
	};

	struct unique_ptr<SmartCookie,default_delete<SmartCookie> >
	{
		~unique_ptr<SmartCookie,default_delete<SmartCookie> >();
	};

	struct unique_ptr<unique_animation_clock,default_delete<unique_animation_clock> >
	{
		~unique_ptr<unique_animation_clock,default_delete<unique_animation_clock> >();
	};

	struct unique_ptr<unsigned short [0],default_delete<unsigned short [0]> >
	{
		~unique_ptr<unsigned short [0],default_delete<unsigned short [0]> >();
	};

	struct unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<PenWorkspace::Discover::AppUsageData>,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > >
	{
		~unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<PenWorkspace::Discover::AppUsageData>,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > >();
	};

	struct unordered_map<unsigned __int64,winrt::Windows::Internal::Shell::implementation::WindowData,hash<unsigned __int64>,equal_to<unsigned __int64>,allocator<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > >
	{
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >,bool> _Try_emplace<unsigned __int64 const &,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindowFactory> &,winrt::Windows::Internal::UI::Shell::WindowTabDataModel &,winrt::event_token &,winrt::event_token &>(unsigned __int64 const &,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindowFactory> &,winrt::Windows::Internal::UI::Shell::WindowTabDataModel &,winrt::event_token &,winrt::event_token &);
		winrt::Windows::Internal::Shell::implementation::WindowData & at(unsigned __int64 const &);
		~unordered_map<unsigned __int64,winrt::Windows::Internal::Shell::implementation::WindowData,hash<unsigned __int64>,equal_to<unsigned __int64>,allocator<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > >();
	};

	struct unordered_map<unsigned __int64,winrt::guid,hash<unsigned __int64>,equal_to<unsigned __int64>,allocator<pair<unsigned __int64 const ,winrt::guid> > >
	{
		unordered_map<unsigned __int64,winrt::guid,hash<unsigned __int64>,equal_to<unsigned __int64>,allocator<pair<unsigned __int64 const ,winrt::guid> > >();
		~unordered_map<unsigned __int64,winrt::guid,hash<unsigned __int64>,equal_to<unsigned __int64>,allocator<pair<unsigned __int64 const ,winrt::guid> > >();
	};

	struct unordered_map<unsigned int,KeyboardHosting::ViewState,hash<unsigned int>,equal_to<unsigned int>,allocator<pair<unsigned int const ,KeyboardHosting::ViewState> > >
	{
		~unordered_map<unsigned int,KeyboardHosting::ViewState,hash<unsigned int>,equal_to<unsigned int>,allocator<pair<unsigned int const ,KeyboardHosting::ViewState> > >();
	};

	struct unordered_map<winrt::guid,unsigned __int64,hash<winrt::guid>,equal_to<winrt::guid>,allocator<pair<winrt::guid const ,unsigned __int64> > >
	{
		unsigned __int64 & operator[](winrt::guid const &);
		~unordered_map<winrt::guid,unsigned __int64,hash<winrt::guid>,equal_to<winrt::guid>,allocator<pair<winrt::guid const ,unsigned __int64> > >();
	};

	struct unordered_map<winrt::guid,winrt::Windows::Internal::UI::Shell::WindowTabView,hash<winrt::guid>,equal_to<winrt::guid>,allocator<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > >
	{
		~unordered_map<winrt::guid,winrt::Windows::Internal::UI::Shell::WindowTabView,hash<winrt::guid>,equal_to<winrt::guid>,allocator<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > >();
	};

	struct unordered_map<winrt::guid,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow>,hash<winrt::guid>,equal_to<winrt::guid>,allocator<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > >
	{
		winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> & at(winrt::guid const &);
		~unordered_map<winrt::guid,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow>,hash<winrt::guid>,equal_to<winrt::guid>,allocator<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > >();
	};

	struct unordered_set<unsigned __int64,hash<unsigned __int64>,equal_to<unsigned __int64>,allocator<unsigned __int64> >
	{
		~unordered_set<unsigned __int64,hash<unsigned __int64>,equal_to<unsigned __int64>,allocator<unsigned __int64> >();
	};

	struct unordered_set<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid>,allocator<winrt::guid> >
	{
		unordered_set<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid>,allocator<winrt::guid> >();
		~unordered_set<winrt::guid,hash<winrt::guid>,equal_to<winrt::guid>,allocator<winrt::guid> >();
	};

	class vector<ActivationHints::Hint,allocator<ActivationHints::Hint> >
	{
		void _Change_array(ActivationHints::Hint * const,unsigned __int64,unsigned __int64);
		void _Destroy(ActivationHints::Hint *,ActivationHints::Hint *);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<ActivationHints::Hint> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<ActivationHints::Hint> > >);
	};

	class vector<AgileRegistrationList::Item,allocator<AgileRegistrationList::Item> >
	{
		void _Change_array(AgileRegistrationList::Item * const,unsigned __int64,unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<AgileRegistrationList::Item> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<AgileRegistrationList::Item> > >);
	};

	class vector<IApplicationView *,allocator<IApplicationView *> >
	{
		void _Change_array(IApplicationView * * const,unsigned __int64,unsigned __int64);
	public:
		~vector<IApplicationView *,allocator<IApplicationView *> >();
	};

	class vector<Microsoft::WRL::ComPtr<IApplicationView>,allocator<Microsoft::WRL::ComPtr<IApplicationView> > >
	{
		void _Change_array(Microsoft::WRL::ComPtr<IApplicationView> * const,unsigned __int64,unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<Microsoft::WRL::ComPtr<IApplicationView> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<Microsoft::WRL::ComPtr<IApplicationView> > > >);
	};

	class vector<Microsoft::WRL::ComPtr<IDiscoverRecentItem>,allocator<Microsoft::WRL::ComPtr<IDiscoverRecentItem> > >
	{
		void _Change_array(Microsoft::WRL::ComPtr<IDiscoverRecentItem> * const,unsigned __int64,unsigned __int64);
	public:
		Microsoft::WRL::ComPtr<IDiscoverRecentItem> * _Emplace_reallocate<Microsoft::WRL::ComPtr<IDiscoverRecentItem> &>(Microsoft::WRL::ComPtr<IDiscoverRecentItem> * const,Microsoft::WRL::ComPtr<IDiscoverRecentItem> &);
		~vector<Microsoft::WRL::ComPtr<IDiscoverRecentItem>,allocator<Microsoft::WRL::ComPtr<IDiscoverRecentItem> > >();
	};

	class vector<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal>,allocator<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> > >
	{
		void _Change_array(Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> * const,unsigned __int64,unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> > > >);
	};

	class vector<Microsoft::WRL::ComPtr<IUnknown>,allocator<Microsoft::WRL::ComPtr<IUnknown> > >
	{
		void _Change_array(Microsoft::WRL::ComPtr<IUnknown> * const,unsigned __int64,unsigned __int64);
	};

	class vector<Microsoft::WRL::ComPtr<IXamlExplorerHostWindow>,allocator<Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> > >
	{
		void _Change_array(Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> * const,unsigned __int64,unsigned __int64);
	public:
		Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> * _Emplace_reallocate<Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> const &>(Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> * const,Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> const &);
		_Vector_iterator<_Vector_val<_Simple_types<Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> > > >);
	};

	class vector<Microsoft::WRL::ComPtr<MonitorFrame>,allocator<Microsoft::WRL::ComPtr<MonitorFrame> > >
	{
		void _Change_array(Microsoft::WRL::ComPtr<MonitorFrame> * const,unsigned __int64,unsigned __int64);
	public:
		Microsoft::WRL::ComPtr<MonitorFrame> * _Emplace_reallocate<Microsoft::WRL::ComPtr<MonitorFrame> const &>(Microsoft::WRL::ComPtr<MonitorFrame> * const,Microsoft::WRL::ComPtr<MonitorFrame> const &);
	};

	class vector<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink>,allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > >
	{
		void _Change_array(Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> * const,unsigned __int64,unsigned __int64);
	public:
		Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> * _Emplace_reallocate<Windows::Internal::Shell::Chaining::IChainLink * &>(Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> * const,Windows::Internal::Shell::Chaining::IChainLink * &);
		_Vector_iterator<_Vector_val<_Simple_types<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > > >);
	};

	class vector<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> > >
	{
		void _Change_array(Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void reserve(unsigned __int64);
		~vector<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> > >();
	};

	class vector<ParsedPenWorkspaceLayout,allocator<ParsedPenWorkspaceLayout> >
	{
		void _Change_array(ParsedPenWorkspaceLayout * const,unsigned __int64,unsigned __int64);
	public:
		~vector<ParsedPenWorkspaceLayout,allocator<ParsedPenWorkspaceLayout> >();
	};

	class vector<ParsedTaskbarLayout,allocator<ParsedTaskbarLayout> >
	{
		void _Change_array(ParsedTaskbarLayout * const,unsigned __int64,unsigned __int64);
	public:
		~vector<ParsedTaskbarLayout,allocator<ParsedTaskbarLayout> >();
	};

	class vector<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1>,allocator<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > >
	{
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Assign_range<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ *>(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ *,Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ *,forward_iterator_tag);
		void _Change_array(Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> * const,unsigned __int64,unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
	public:
		Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> * _Emplace_reallocate<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ &>(Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> * const,Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ &);
		_Vector_iterator<_Vector_val<_Simple_types<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > > emplace<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ &>(_Vector_const_iterator<_Vector_val<_Simple_types<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > > >,Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ &);
	};

	class vector<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1>,allocator<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > >
	{
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Assign_range<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ *>(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ *,WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ *,forward_iterator_tag);
		void _Change_array(Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> * const,unsigned __int64,unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
	public:
		Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> * _Emplace_reallocate<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ &>(Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> * const,WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ &);
		_Vector_iterator<_Vector_val<_Simple_types<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > > emplace<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ &>(_Vector_const_iterator<_Vector_val<_Simple_types<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > > >,WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ &);
	};

	class vector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,allocator<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId> >
	{
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Change_array(Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId * const,unsigned __int64,unsigned __int64);
	public:
		Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId * _Emplace_reallocate<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId const &>(Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId * const,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId const &);
	};

	class vector<Windows::UI::Color,allocator<Windows::UI::Color> >
	{
		void _Buy_nonzero(unsigned __int64);
		void _Buy_raw(unsigned __int64);
		void _Tidy();
	public:
		vector<Windows::UI::Color,allocator<Windows::UI::Color> >(initializer_list<Windows::UI::Color>,allocator<Windows::UI::Color> const &);
		vector<Windows::UI::Color,allocator<Windows::UI::Color> >(vector<Windows::UI::Color,allocator<Windows::UI::Color> > const &);
		~vector<Windows::UI::Color,allocator<Windows::UI::Color> >();
	};

	class vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0>,allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0> > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void assign(unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0> const &);
	};

	class vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned int> >,_Iterator_base0>,allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned int> >,_Iterator_base0> > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void assign(unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned int> >,_Iterator_base0> const &);
	};

	class vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0>,allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0>,allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> > >(unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> const &,allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> > const &);
		void assign(unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> const &);
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > > > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IVirtualDesktop> const ,Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktop> > > > > const &);
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > > > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<PenWorkspace::Discover::AppUsageData> > > > > const &);
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > const &);
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > > >(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > const &,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > > const &);
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > const &);
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > > > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,KeyboardHosting::ViewState> > > > const &);
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > > > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned int const ,bool> > > > const &);
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > > >(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > const &,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > > const &);
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > const &);
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > > >(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > const &,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > > const &);
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > const &);
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > > >
	{
		static void _Xlength();
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > const &);
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > >,allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > > >();
	};

	class vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >
	{
		static void _Xlength();
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Change_array(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > * const,unsigned __int64,unsigned __int64);
		void _Insert_range<move_iterator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *> >(_Vector_const_iterator<_Vector_val<_Simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,move_iterator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *>,move_iterator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *>,forward_iterator_tag);
		void _Range_construct_or_tidy<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const *>(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const *,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const *,forward_iterator_tag);
		void _Tidy();
	public:
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > * _Emplace_reallocate<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &>(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > * const,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		~vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >();
	};

	class vector<int,allocator<int> >
	{
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Change_array(int * const,unsigned __int64,unsigned __int64);
		void _Tidy();
	public:
		int * _Emplace_reallocate<int const &>(int * const,int const &);
		vector<int,allocator<int> >(vector<int,allocator<int> > const &);
		~vector<int,allocator<int> >();
	};

	class vector<pair<float,int>,allocator<pair<float,int> > >
	{
		void _Change_array(pair<float,int> * const,unsigned __int64,unsigned __int64);
	public:
		~vector<pair<float,int>,allocator<pair<float,int> > >();
	};

	class vector<pair<unsigned short const *,unsigned short const *>,allocator<pair<unsigned short const *,unsigned short const *> > >
	{
		void _Buy_raw(unsigned __int64);
		void _Change_array(pair<unsigned short const *,unsigned short const *> * const,unsigned __int64,unsigned __int64);
		void _Tidy();
	public:
		vector<pair<unsigned short const *,unsigned short const *>,allocator<pair<unsigned short const *,unsigned short const *> > >(initializer_list<pair<unsigned short const *,unsigned short const *> >,allocator<pair<unsigned short const *,unsigned short const *> > const &);
		vector<pair<unsigned short const *,unsigned short const *>,allocator<pair<unsigned short const *,unsigned short const *> > >(vector<pair<unsigned short const *,unsigned short const *>,allocator<pair<unsigned short const *,unsigned short const *> > > const &);
		~vector<pair<unsigned short const *,unsigned short const *>,allocator<pair<unsigned short const *,unsigned short const *> > >();
	};

	class vector<shared_ptr<AltTabWindowHookData>,allocator<shared_ptr<AltTabWindowHookData> > >
	{
		void _Change_array(shared_ptr<AltTabWindowHookData> * const,unsigned __int64,unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<shared_ptr<AltTabWindowHookData> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<shared_ptr<AltTabWindowHookData> > > >,_Vector_const_iterator<_Vector_val<_Simple_types<shared_ptr<AltTabWindowHookData> > > >);
		shared_ptr<AltTabWindowHookData> * _Emplace_reallocate<shared_ptr<AltTabWindowHookData> &>(shared_ptr<AltTabWindowHookData> * const,shared_ptr<AltTabWindowHookData> &);
	};

	class vector<shared_ptr<KBViewInfo>,allocator<shared_ptr<KBViewInfo> > >
	{
		void _Change_array(shared_ptr<KBViewInfo> * const,unsigned __int64,unsigned __int64);
	public:
		shared_ptr<KBViewInfo> * _Emplace_reallocate<shared_ptr<KBViewInfo> &>(shared_ptr<KBViewInfo> * const,shared_ptr<KBViewInfo> &);
		~vector<shared_ptr<KBViewInfo>,allocator<shared_ptr<KBViewInfo> > >();
	};

	class vector<shared_ptr<PenWorkspace::Discover::AppUsageData>,allocator<shared_ptr<PenWorkspace::Discover::AppUsageData> > >
	{
		void _Change_array(shared_ptr<PenWorkspace::Discover::AppUsageData> * const,unsigned __int64,unsigned __int64);
	public:
		shared_ptr<PenWorkspace::Discover::AppUsageData> * _Emplace_reallocate<shared_ptr<PenWorkspace::Discover::AppUsageData> const &>(shared_ptr<PenWorkspace::Discover::AppUsageData> * const,shared_ptr<PenWorkspace::Discover::AppUsageData> const &);
		~vector<shared_ptr<PenWorkspace::Discover::AppUsageData>,allocator<shared_ptr<PenWorkspace::Discover::AppUsageData> > >();
	};

	class vector<shared_ptr<PeoplePaneViewInfo>,allocator<shared_ptr<PeoplePaneViewInfo> > >
	{
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Change_array(shared_ptr<PeoplePaneViewInfo> * const,unsigned __int64,unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<shared_ptr<PeoplePaneViewInfo> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<shared_ptr<PeoplePaneViewInfo> > > >);
		shared_ptr<PeoplePaneViewInfo> * _Emplace_reallocate<shared_ptr<PeoplePaneViewInfo> const &>(shared_ptr<PeoplePaneViewInfo> * const,shared_ptr<PeoplePaneViewInfo> const &);
		~vector<shared_ptr<PeoplePaneViewInfo>,allocator<shared_ptr<PeoplePaneViewInfo> > >();
	};

	class vector<shared_ptr<ViewEventRegistration>,allocator<shared_ptr<ViewEventRegistration> > >
	{
		void _Change_array(shared_ptr<ViewEventRegistration> * const,unsigned __int64,unsigned __int64);
	public:
		shared_ptr<ViewEventRegistration> * _Emplace_reallocate<shared_ptr<ViewEventRegistration> const &>(shared_ptr<ViewEventRegistration> * const,shared_ptr<ViewEventRegistration> const &);
	};

	class vector<tagPOINT,allocator<tagPOINT> >
	{
		void _Change_array(tagPOINT * const,unsigned __int64,unsigned __int64);
	public:
		tagPOINT * _Emplace_reallocate<tagPOINT const &>(tagPOINT * const,tagPOINT const &);
		~vector<tagPOINT,allocator<tagPOINT> >();
	};

	class vector<tagRECT,allocator<tagRECT> >
	{
		void _Change_array(tagRECT * const,unsigned __int64,unsigned __int64);
	public:
		tagRECT * _Emplace_reallocate<tagRECT const &>(tagRECT * const,tagRECT const &);
		~vector<tagRECT,allocator<tagRECT> >();
	};

	class vector<unsigned short *,allocator<unsigned short *> >
	{
		void _Change_array(unsigned short * * const,unsigned __int64,unsigned __int64);
		void _Tidy();
	public:
		unsigned short * * _Emplace_reallocate<unsigned short * const &>(unsigned short * * const,unsigned short * const &);
		vector<unsigned short *,allocator<unsigned short *> >(vector<unsigned short *,allocator<unsigned short *> > const &);
		~vector<unsigned short *,allocator<unsigned short *> >();
	};

	class vector<unsigned short,allocator<unsigned short> >
	{
		void _Tidy();
	public:
		vector<unsigned short,allocator<unsigned short> >(unsigned __int64,allocator<unsigned short> const &);
		~vector<unsigned short,allocator<unsigned short> >();
	};

	class vector<vector<Windows::UI::Color,allocator<Windows::UI::Color> >,allocator<vector<Windows::UI::Color,allocator<Windows::UI::Color> > > >
	{
		void _Assign_range<vector<Windows::UI::Color,allocator<Windows::UI::Color> > *>(vector<Windows::UI::Color,allocator<Windows::UI::Color> > *,vector<Windows::UI::Color,allocator<Windows::UI::Color> > *,forward_iterator_tag);
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Range_construct_or_tidy<vector<Windows::UI::Color,allocator<Windows::UI::Color> > const *>(vector<Windows::UI::Color,allocator<Windows::UI::Color> > const *,vector<Windows::UI::Color,allocator<Windows::UI::Color> > const *,forward_iterator_tag);
		void _Tidy();
	public:
		vector<vector<Windows::UI::Color,allocator<Windows::UI::Color> >,allocator<vector<Windows::UI::Color,allocator<Windows::UI::Color> > > >(initializer_list<vector<Windows::UI::Color,allocator<Windows::UI::Color> > >,allocator<vector<Windows::UI::Color,allocator<Windows::UI::Color> > > const &);
	};

	class vector<void *,allocator<void *> >
	{
		void _Buy_raw(unsigned __int64);
		void _Clear_and_reserve_geometric(unsigned __int64);
		void _Tidy();
	};

	class vector<wil::com_ptr_t<IAgileReference,wil::err_exception_policy>,allocator<wil::com_ptr_t<IAgileReference,wil::err_exception_policy> > >
	{
		void _Change_array(wil::com_ptr_t<IAgileReference,wil::err_exception_policy> * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		wil::com_ptr_t<IAgileReference,wil::err_exception_policy> * _Emplace_reallocate<wil::com_ptr_t<IAgileReference,wil::err_exception_policy> const &>(wil::com_ptr_t<IAgileReference,wil::err_exception_policy> * const,wil::com_ptr_t<IAgileReference,wil::err_exception_policy> const &);
		~vector<wil::com_ptr_t<IAgileReference,wil::err_exception_policy>,allocator<wil::com_ptr_t<IAgileReference,wil::err_exception_policy> > >();
	};

	class vector<wil::com_ptr_t<IApplicationView,wil::err_exception_policy>,allocator<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >
	{
		void _Change_array(wil::com_ptr_t<IApplicationView,wil::err_exception_policy> * const,unsigned __int64,unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >);
		wil::com_ptr_t<IApplicationView,wil::err_exception_policy> & emplace_back<IApplicationView * &>(IApplicationView * &);
		wil::com_ptr_t<IApplicationView,wil::err_exception_policy> * _Emplace_reallocate<IApplicationView * &>(wil::com_ptr_t<IApplicationView,wil::err_exception_policy> * const,IApplicationView * &);
	};

	class vector<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy>,allocator<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> > >
	{
		void _Change_array(wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> * const,unsigned __int64,unsigned __int64);
		void _Tidy();
	public:
		wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> * _Emplace_reallocate<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const &>(wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> * const,wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> const &);
		~vector<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy>,allocator<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> > >();
	};

	class vector<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy>,allocator<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> > >
	{
		void _Change_array(wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> * const,unsigned __int64,unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> > > >);
		void clear();
		wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> * _Emplace_reallocate<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> const &>(wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> * const,wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> const &);
		~vector<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy>,allocator<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> > >();
	};

	class vector<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,allocator<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > >
	{
		void _Change_array(wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> * const,unsigned __int64,unsigned __int64);
	public:
		wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> * _Emplace_reallocate<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const &>(wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const &);
		~vector<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy>,allocator<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > >();
	};

	class vector<wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy>,allocator<wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> > >
	{
		void _Change_array(wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> * const,unsigned __int64,unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> > > >);
		wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> * _Emplace_reallocate<Windows::Internal::Shell::Holographic::IViewHostItem * &>(wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> * const,Windows::Internal::Shell::Holographic::IViewHostItem * &);
	};

	class vector<winrt::guid,allocator<winrt::guid> >
	{
		static void _Xlength();
		void _Change_array(winrt::guid * const,unsigned __int64,unsigned __int64);
	public:
		winrt::guid * _Emplace_reallocate<winrt::guid const &>(winrt::guid * const,winrt::guid const &);
		~vector<winrt::guid,allocator<winrt::guid> >();
	};

	class vector<winrt::immersive_shell_component::service_description,allocator<winrt::immersive_shell_component::service_description> >
	{
		void _Change_array(winrt::immersive_shell_component::service_description * const,unsigned __int64,unsigned __int64);
		void _Insert_range<winrt::immersive_shell_component::service_description const *>(_Vector_const_iterator<_Vector_val<_Simple_types<winrt::immersive_shell_component::service_description> > >,winrt::immersive_shell_component::service_description const *,winrt::immersive_shell_component::service_description const *,forward_iterator_tag);
		void _Tidy();
	public:
		void swap(vector<winrt::immersive_shell_component::service_description,allocator<winrt::immersive_shell_component::service_description> > &);
		~vector<winrt::immersive_shell_component::service_description,allocator<winrt::immersive_shell_component::service_description> >();
	};

	struct weak_ptr<Concurrency::details::_Task_impl_base>
	{
		~weak_ptr<Concurrency::details::_Task_impl_base>();
	};

	ActivationHints::Hint * _Move_unchecked<ActivationHints::Hint *,ActivationHints::Hint *>(ActivationHints::Hint *,ActivationHints::Hint *,ActivationHints::Hint *);
	ActivationHints::Hint * _Uninitialized_move<ActivationHints::Hint *,ActivationHints::Hint *,allocator<ActivationHints::Hint> >(ActivationHints::Hint * const,ActivationHints::Hint * const,ActivationHints::Hint *,std::allocator<ActivationHints::Hint> &);
	AgileRegistrationList::Item * _Uninitialized_move<AgileRegistrationList::Item *,AgileRegistrationList::Item *,allocator<AgileRegistrationList::Item> >(AgileRegistrationList::Item * const,AgileRegistrationList::Item * const,AgileRegistrationList::Item *,std::allocator<AgileRegistrationList::Item> &);
	Microsoft::WRL::ComPtr<IApplicationView> * _Uninitialized_move<Microsoft::WRL::ComPtr<IApplicationView> *,Microsoft::WRL::ComPtr<IApplicationView> *,allocator<Microsoft::WRL::ComPtr<IApplicationView> > >(Microsoft::WRL::ComPtr<IApplicationView> * const,Microsoft::WRL::ComPtr<IApplicationView> * const,Microsoft::WRL::ComPtr<IApplicationView> *,std::allocator<Microsoft::WRL::ComPtr<IApplicationView> > &);
	Microsoft::WRL::ComPtr<IDiscoverRecentItem> * _Uninitialized_move<Microsoft::WRL::ComPtr<IDiscoverRecentItem> *,Microsoft::WRL::ComPtr<IDiscoverRecentItem> *,allocator<Microsoft::WRL::ComPtr<IDiscoverRecentItem> > >(Microsoft::WRL::ComPtr<IDiscoverRecentItem> * const,Microsoft::WRL::ComPtr<IDiscoverRecentItem> * const,Microsoft::WRL::ComPtr<IDiscoverRecentItem> *,std::allocator<Microsoft::WRL::ComPtr<IDiscoverRecentItem> > &);
	Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> * _Uninitialized_move<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> *,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> *,allocator<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> > >(Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> * const,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> * const,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> *,std::allocator<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> > &);
	Microsoft::WRL::ComPtr<ITaskWindow> * _Uninitialized_move<Microsoft::WRL::ComPtr<ITaskWindow> *,Microsoft::WRL::ComPtr<ITaskWindow> *,allocator<Microsoft::WRL::ComPtr<ITaskWindow> > >(Microsoft::WRL::ComPtr<ITaskWindow> * const,Microsoft::WRL::ComPtr<ITaskWindow> * const,Microsoft::WRL::ComPtr<ITaskWindow> *,std::allocator<Microsoft::WRL::ComPtr<ITaskWindow> > &);
	Microsoft::WRL::ComPtr<IUnknown> * _Uninitialized_move<Microsoft::WRL::ComPtr<IUnknown> *,Microsoft::WRL::ComPtr<IUnknown> *,allocator<Microsoft::WRL::ComPtr<IUnknown> > >(Microsoft::WRL::ComPtr<IUnknown> * const,Microsoft::WRL::ComPtr<IUnknown> * const,Microsoft::WRL::ComPtr<IUnknown> *,std::allocator<Microsoft::WRL::ComPtr<IUnknown> > &);
	Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> * _Uninitialized_move<Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> *,Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> *,allocator<Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> > >(Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> * const,Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> * const,Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> *,std::allocator<Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> > &);
	Microsoft::WRL::ComPtr<MonitorFrame> * _Uninitialized_move<Microsoft::WRL::ComPtr<MonitorFrame> *,Microsoft::WRL::ComPtr<MonitorFrame> *,allocator<Microsoft::WRL::ComPtr<MonitorFrame> > >(Microsoft::WRL::ComPtr<MonitorFrame> * const,Microsoft::WRL::ComPtr<MonitorFrame> * const,Microsoft::WRL::ComPtr<MonitorFrame> *,std::allocator<Microsoft::WRL::ComPtr<MonitorFrame> > &);
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> * _Uninitialized_move<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > >(Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> * const,Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> * const,Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,std::allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > &);
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> * _Uninitialized_move<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> *,Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> *,allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> > >(Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> * const,Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> * const,Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> *,std::allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> > &);
	ParsedPenWorkspaceLayout * _Uninitialized_move<ParsedPenWorkspaceLayout *,ParsedPenWorkspaceLayout *,allocator<ParsedPenWorkspaceLayout> >(ParsedPenWorkspaceLayout * const,ParsedPenWorkspaceLayout * const,ParsedPenWorkspaceLayout *,std::allocator<ParsedPenWorkspaceLayout> &);
	ParsedTaskbarLayout * _Uninitialized_move<ParsedTaskbarLayout *,ParsedTaskbarLayout *,allocator<ParsedTaskbarLayout> >(ParsedTaskbarLayout * const,ParsedTaskbarLayout * const,ParsedTaskbarLayout *,std::allocator<ParsedTaskbarLayout> &);
	Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> * _Copy_unchecked<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ *,Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> *>(Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ *,Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^ *,Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> *);
	Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> * _Uninitialized_move<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> *,Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> *,allocator<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > >(Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> * const,Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> * const,Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> *,std::allocator<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > &);
	Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> * _Copy_unchecked<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ *,Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> *>(WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ *,WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^ *,Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> *);
	Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> * _Uninitialized_move<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> *,Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> *,allocator<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > >(Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> * const,Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> * const,Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> *,std::allocator<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > &);
	__int64 distance<_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > > >(std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> const ,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > > > >);
	__int64 distance<_Tree_const_iterator<_Tree_val<_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >(std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > >);
	__int64 distance<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > > >(std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> const ,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > > > >);
	bool _Traits_equal<char_traits<unsigned short> >(unsigned short const * const,unsigned __int64,unsigned short const * const,unsigned __int64);
	int _Atomic_compare_exchange_strong_4(unsigned long volatile *,unsigned long *,unsigned long,std::memory_order,std::memory_order);
	int _Traits_compare<char_traits<unsigned short> >(unsigned short const * const,unsigned __int64,unsigned short const * const,unsigned __int64);
	nothrow_t const std::nothrow;
	std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > move<_Deque_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,_Deque_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > >(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >);
	std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > move_backward<_Deque_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,_Deque_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > >(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >);
	std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > remove<_Deque_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^>(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^ const &);
	std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > > move<_Deque_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >,_Deque_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > > >(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >);
	std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > > move_backward<_Deque_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >,_Deque_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > > >(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >);
	std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<winrt::guid> > > move<_Deque_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > >,_Deque_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > > >(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<winrt::guid> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<winrt::guid> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<winrt::guid> > >);
	std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<winrt::guid> > > move_backward<_Deque_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > >,_Deque_iterator<_Deque_val<_Deque_simple_types<winrt::guid> > > >(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<winrt::guid> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<winrt::guid> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<winrt::guid> > >);
	std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > _Move_backward_unchecked<_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > >(std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >);
	std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > _Move_unchecked<_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > > >(std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler ^> > >);
	std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > > _Move_backward_unchecked<_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >,_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > > >(std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >);
	std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > > _Move_unchecked<_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > >,_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<unsigned __int64> > > >(std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned __int64> > >);
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::shared_ptr<AltTabWindowHookData> > > > remove<_Vector_iterator<_Vector_val<_Simple_types<shared_ptr<AltTabWindowHookData> > > >,shared_ptr<AltTabWindowHookData> >(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::shared_ptr<AltTabWindowHookData> > > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::shared_ptr<AltTabWindowHookData> > > >,std::shared_ptr<AltTabWindowHookData> const &);
	std::basic_ostream<unsigned short,std::char_traits<unsigned short> > & operator<<<unsigned short,char_traits<unsigned short> >(std::basic_ostream<unsigned short,std::char_traits<unsigned short> > &,unsigned short const *);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > * _Move_backward_unchecked<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *>(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > * _Move_unchecked<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *>(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > * _Uninitialized_move<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > * const,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > * const,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > &);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > _Floating_to_wstring<double>(unsigned short const *,double);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > to_wstring(int);
	std::exception_ptr current_exception();
	std::exception_ptr make_exception_ptr<Platform::Exception ^>(Platform::Exception ^);
	std::exception_ptr make_exception_ptr<winrt::hresult_canceled>(winrt::hresult_canceled);
	std::ios_base & hex(std::ios_base &);
	std::pair<float,int> * _Insertion_sort_unchecked<pair<float,int> *,less<void> >(std::pair<float,int> *,std::pair<float,int> * const,std::less<void>);
	std::pair<float,int> * _Uninitialized_move<pair<float,int> *,pair<float,int> *,allocator<pair<float,int> > >(std::pair<float,int> * const,std::pair<float,int> * const,std::pair<float,int> *,std::allocator<std::pair<float,int> > &);
	std::pair<std::pair<float,int> *,std::pair<float,int> *> _Partition_by_median_guess_unchecked<pair<float,int> *,less<void> >(std::pair<float,int> *,std::pair<float,int> *,std::less<void>);
	std::pair<std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *> _Partition_by_median_guess_unchecked<shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(shared_ptr<PenWorkspace::Discover::AppUsageData> &,shared_ptr<PenWorkspace::Discover::AppUsageData> &)>(std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(std::shared_ptr<PenWorkspace::Discover::AppUsageData> &,std::shared_ptr<PenWorkspace::Discover::AppUsageData> &));
	std::shared_ptr<AltTabWindowHookData> * _Uninitialized_move<shared_ptr<AltTabWindowHookData> *,shared_ptr<AltTabWindowHookData> *,allocator<shared_ptr<AltTabWindowHookData> > >(std::shared_ptr<AltTabWindowHookData> * const,std::shared_ptr<AltTabWindowHookData> * const,std::shared_ptr<AltTabWindowHookData> *,std::allocator<std::shared_ptr<AltTabWindowHookData> > &);
	std::shared_ptr<KBViewInfo> * _Uninitialized_move<shared_ptr<KBViewInfo> *,shared_ptr<KBViewInfo> *,allocator<shared_ptr<KBViewInfo> > >(std::shared_ptr<KBViewInfo> * const,std::shared_ptr<KBViewInfo> * const,std::shared_ptr<KBViewInfo> *,std::allocator<std::shared_ptr<KBViewInfo> > &);
	std::shared_ptr<KBViewInfo> make_shared<KBViewInfo,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * &>(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * &);
	std::shared_ptr<PenWorkspace::Discover::AppUsageData> * _Insertion_sort_unchecked<shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(shared_ptr<PenWorkspace::Discover::AppUsageData> &,shared_ptr<PenWorkspace::Discover::AppUsageData> &)>(std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> * const,bool (*)(std::shared_ptr<PenWorkspace::Discover::AppUsageData> &,std::shared_ptr<PenWorkspace::Discover::AppUsageData> &));
	std::shared_ptr<PenWorkspace::Discover::AppUsageData> * _Uninitialized_move<shared_ptr<PenWorkspace::Discover::AppUsageData> *,shared_ptr<PenWorkspace::Discover::AppUsageData> *,allocator<shared_ptr<PenWorkspace::Discover::AppUsageData> > >(std::shared_ptr<PenWorkspace::Discover::AppUsageData> * const,std::shared_ptr<PenWorkspace::Discover::AppUsageData> * const,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::allocator<std::shared_ptr<PenWorkspace::Discover::AppUsageData> > &);
	std::shared_ptr<PeoplePaneViewInfo> * _Uninitialized_move<shared_ptr<PeoplePaneViewInfo> *,shared_ptr<PeoplePaneViewInfo> *,allocator<shared_ptr<PeoplePaneViewInfo> > >(std::shared_ptr<PeoplePaneViewInfo> * const,std::shared_ptr<PeoplePaneViewInfo> * const,std::shared_ptr<PeoplePaneViewInfo> *,std::allocator<std::shared_ptr<PeoplePaneViewInfo> > &);
	std::shared_ptr<TwinUI::Lighting::AssistantLightBlock> make_shared<TwinUI::Lighting::AssistantLightBlock,Microsoft::WRL::ComPtr<Windows::Devices::Lights::ILampArray> &>(Microsoft::WRL::ComPtr<Windows::Devices::Lights::ILampArray> &);
	std::shared_ptr<TwinUI::Lighting::AssistantLightStrip> make_shared<TwinUI::Lighting::AssistantLightStrip,Microsoft::WRL::ComPtr<Windows::Devices::Lights::ILampArray> &,vector<int,allocator<int> > &,vector<int,allocator<int> > &>(Microsoft::WRL::ComPtr<Windows::Devices::Lights::ILampArray> &,std::vector<int,std::allocator<int> > &,std::vector<int,std::allocator<int> > &);
	std::shared_ptr<ViewEventRegistration> * _Uninitialized_move<shared_ptr<ViewEventRegistration> *,shared_ptr<ViewEventRegistration> *,allocator<shared_ptr<ViewEventRegistration> > >(std::shared_ptr<ViewEventRegistration> * const,std::shared_ptr<ViewEventRegistration> * const,std::shared_ptr<ViewEventRegistration> *,std::allocator<std::shared_ptr<ViewEventRegistration> > &);
	std::shared_ptr<Win32ProcessInfo> make_shared<Win32ProcessInfo,unsigned int &,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &>(unsigned int &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	std::shared_ptr<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > make_shared<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,unsigned short * &>(unsigned short * &);
	std::tuple<HWND__ * &,tagRECT &> tie<HWND__ *,tagRECT>(HWND__ * &,tagRECT &);
	std::tuple<tagRECT &,HWND__ * &> tie<tagRECT,HWND__ *>(tagRECT &,HWND__ * &);
	std::tuple<wil::com_ptr_t<IPrivDragDrop,wil::err_exception_policy> &,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> &,HWND__ * &> tie<wil::com_ptr_t<IPrivDragDrop,wil::err_exception_policy>,wil::com_ptr_t<IDropTarget,wil::err_exception_policy>,HWND__ *>(wil::com_ptr_t<IPrivDragDrop,wil::err_exception_policy> &,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> &,HWND__ * &);
	std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > * _Copy_unchecked<vector<Windows::UI::Color,allocator<Windows::UI::Color> > *,vector<Windows::UI::Color,allocator<Windows::UI::Color> > *>(std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > *,std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > *,std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > *);
	unsigned __int64 _Fnv1a_append_bytes(unsigned __int64,unsigned char const * const,unsigned __int64);
	unsigned __int64 _Traits_find<char_traits<unsigned short> >(unsigned short const * const,unsigned __int64,unsigned __int64,unsigned short const * const,unsigned __int64);
	unsigned __int64 _Traits_rfind<char_traits<unsigned short> >(unsigned short const * const,unsigned __int64,unsigned __int64,unsigned short const * const,unsigned __int64);
	unsigned long stoul(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,unsigned __int64 *,int);
	unsigned short * _UIntegral_to_buff<unsigned short,unsigned int>(unsigned short *,unsigned int);
	void * _Allocate<16,_Default_allocate_traits,0>(unsigned __int64);
	void _Adjust_manually_vector_aligned(void * &,unsigned __int64 &);
	void _Deallocate<16,0>(void *,unsigned __int64);
	void _Destroy_range<allocator<AgileRegistrationList::Item> >(AgileRegistrationList::Item *,AgileRegistrationList::Item *,std::allocator<AgileRegistrationList::Item> &);
	void _Destroy_range<allocator<Microsoft::WRL::ComPtr<IApplicationView> > >(Microsoft::WRL::ComPtr<IApplicationView> *,Microsoft::WRL::ComPtr<IApplicationView> *,std::allocator<Microsoft::WRL::ComPtr<IApplicationView> > &);
	void _Destroy_range<allocator<Microsoft::WRL::ComPtr<IDiscoverRecentItem> > >(Microsoft::WRL::ComPtr<IDiscoverRecentItem> *,Microsoft::WRL::ComPtr<IDiscoverRecentItem> *,std::allocator<Microsoft::WRL::ComPtr<IDiscoverRecentItem> > &);
	void _Destroy_range<allocator<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> > >(Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> *,Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> *,std::allocator<Microsoft::WRL::ComPtr<IImmersiveApplicationInternal> > &);
	void _Destroy_range<allocator<Microsoft::WRL::ComPtr<ITaskWindow> > >(Microsoft::WRL::ComPtr<ITaskWindow> *,Microsoft::WRL::ComPtr<ITaskWindow> *,std::allocator<Microsoft::WRL::ComPtr<ITaskWindow> > &);
	void _Destroy_range<allocator<Microsoft::WRL::ComPtr<IUnknown> > >(Microsoft::WRL::ComPtr<IUnknown> *,Microsoft::WRL::ComPtr<IUnknown> *,std::allocator<Microsoft::WRL::ComPtr<IUnknown> > &);
	void _Destroy_range<allocator<Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> > >(Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> *,Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> *,std::allocator<Microsoft::WRL::ComPtr<IXamlExplorerHostWindow> > &);
	void _Destroy_range<allocator<Microsoft::WRL::ComPtr<MonitorFrame> > >(Microsoft::WRL::ComPtr<MonitorFrame> *,Microsoft::WRL::ComPtr<MonitorFrame> *,std::allocator<Microsoft::WRL::ComPtr<MonitorFrame> > &);
	void _Destroy_range<allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > >(Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,std::allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > &);
	void _Destroy_range<allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> > >(Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> *,Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> *,std::allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> > &);
	void _Destroy_range<allocator<ParsedPenWorkspaceLayout> >(ParsedPenWorkspaceLayout *,ParsedPenWorkspaceLayout *,std::allocator<ParsedPenWorkspaceLayout> &);
	void _Destroy_range<allocator<ParsedTaskbarLayout> >(ParsedTaskbarLayout *,ParsedTaskbarLayout *,std::allocator<ParsedTaskbarLayout> &);
	void _Destroy_range<allocator<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > >(Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> *,Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> *,std::allocator<Platform::Agile<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^,1> > &);
	void _Destroy_range<allocator<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > >(Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> *,Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> *,std::allocator<Platform::Agile<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^,1> > &);
	void _Destroy_range<allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > &);
	void _Destroy_range<allocator<shared_ptr<AltTabWindowHookData> > >(std::shared_ptr<AltTabWindowHookData> *,std::shared_ptr<AltTabWindowHookData> *,std::allocator<std::shared_ptr<AltTabWindowHookData> > &);
	void _Destroy_range<allocator<shared_ptr<KBViewInfo> > >(std::shared_ptr<KBViewInfo> *,std::shared_ptr<KBViewInfo> *,std::allocator<std::shared_ptr<KBViewInfo> > &);
	void _Destroy_range<allocator<shared_ptr<PenWorkspace::Discover::AppUsageData> > >(std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::allocator<std::shared_ptr<PenWorkspace::Discover::AppUsageData> > &);
	void _Destroy_range<allocator<shared_ptr<PeoplePaneViewInfo> > >(std::shared_ptr<PeoplePaneViewInfo> *,std::shared_ptr<PeoplePaneViewInfo> *,std::allocator<std::shared_ptr<PeoplePaneViewInfo> > &);
	void _Destroy_range<allocator<shared_ptr<ViewEventRegistration> > >(std::shared_ptr<ViewEventRegistration> *,std::shared_ptr<ViewEventRegistration> *,std::allocator<std::shared_ptr<ViewEventRegistration> > &);
	void _Destroy_range<allocator<vector<Windows::UI::Color,allocator<Windows::UI::Color> > > >(std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > *,std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > *,std::allocator<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > > &);
	void _Destroy_range<allocator<wil::com_ptr_t<IAgileReference,wil::err_exception_policy> > >(wil::com_ptr_t<IAgileReference,wil::err_exception_policy> *,wil::com_ptr_t<IAgileReference,wil::err_exception_policy> *,std::allocator<wil::com_ptr_t<IAgileReference,wil::err_exception_policy> > &);
	void _Destroy_range<allocator<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >(wil::com_ptr_t<IApplicationView,wil::err_exception_policy> *,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> *,std::allocator<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &);
	void _Destroy_range<allocator<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> > >(wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> *,wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> *,std::allocator<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> > &);
	void _Destroy_range<allocator<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> > >(wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> *,wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> *,std::allocator<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> > &);
	void _Destroy_range<allocator<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > >(wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> *,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> *,std::allocator<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &);
	void _Destroy_range<allocator<wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> > >(wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> *,wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> *,std::allocator<wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> > &);
	void _Destroy_range<allocator<winrt::immersive_shell_component::service_description> >(winrt::immersive_shell_component::service_description *,winrt::immersive_shell_component::service_description *,std::allocator<winrt::immersive_shell_component::service_description> &);
	void _Destroy_range<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Internal::UI::Shell::IWindowTabExtension,winrt::Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> *>(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Internal::UI::Shell::IWindowTabExtension,winrt::Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> *,winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Internal::UI::Shell::IWindowTabExtension,winrt::Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> *);
	void _Fill_unchecked<_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0> *,_List_unchecked_const_iterator<_List_val<_List_simple_types<unsigned __int64> >,_Iterator_base0> >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned __int64> >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned __int64> >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned __int64> >,std::_Iterator_base0> const &);
	void _Fill_unchecked<_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> *,_List_unchecked_const_iterator<_List_val<_List_simple_types<winrt::guid> >,_Iterator_base0> >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<winrt::guid> >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<winrt::guid> >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<winrt::guid> >,std::_Iterator_base0> const &);
	void _Fill_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,winrt::Windows::Internal::Shell::implementation::WindowData> > > > const &);
	void _Fill_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,winrt::guid> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,winrt::guid> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,winrt::guid> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,winrt::guid> > > > const &);
	void _Fill_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,unsigned __int64> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<winrt::guid const ,unsigned __int64> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<winrt::guid const ,unsigned __int64> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<winrt::guid const ,unsigned __int64> > > > const &);
	void _Fill_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<winrt::guid const ,winrt::Windows::Internal::UI::Shell::WindowTabView> > > > const &);
	void _Fill_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<winrt::guid const ,winrt::com_ptr<winrt::Windows::Internal::Shell::implementation::TabProxyWindow> > > > > const &);
	void _Guess_median_unchecked<shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(shared_ptr<PenWorkspace::Discover::AppUsageData> &,shared_ptr<PenWorkspace::Discover::AppUsageData> &)>(std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(std::shared_ptr<PenWorkspace::Discover::AppUsageData> &,std::shared_ptr<PenWorkspace::Discover::AppUsageData> &));
	void _Make_heap_unchecked<pair<float,int> *,less<void> >(std::pair<float,int> *,std::pair<float,int> *,std::less<void>);
	void _Make_heap_unchecked<shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(shared_ptr<PenWorkspace::Discover::AppUsageData> &,shared_ptr<PenWorkspace::Discover::AppUsageData> &)>(std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(std::shared_ptr<PenWorkspace::Discover::AppUsageData> &,std::shared_ptr<PenWorkspace::Discover::AppUsageData> &));
	void _Med3_unchecked<pair<float,int> *,less<void> >(std::pair<float,int> *,std::pair<float,int> *,std::pair<float,int> *,std::less<void>);
	void _Med3_unchecked<shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(shared_ptr<PenWorkspace::Discover::AppUsageData> &,shared_ptr<PenWorkspace::Discover::AppUsageData> &)>(std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(std::shared_ptr<PenWorkspace::Discover::AppUsageData> &,std::shared_ptr<PenWorkspace::Discover::AppUsageData> &));
	void _Sort_heap_unchecked<pair<float,int> *,less<void> >(std::pair<float,int> *,std::pair<float,int> *,std::less<void>);
	void _Sort_heap_unchecked<shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(shared_ptr<PenWorkspace::Discover::AppUsageData> &,shared_ptr<PenWorkspace::Discover::AppUsageData> &)>(std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(std::shared_ptr<PenWorkspace::Discover::AppUsageData> &,std::shared_ptr<PenWorkspace::Discover::AppUsageData> &));
	void _Sort_unchecked<pair<float,int> *,less<void> >(std::pair<float,int> *,std::pair<float,int> *,__int64,std::less<void>);
	void _Sort_unchecked<shared_ptr<PenWorkspace::Discover::AppUsageData> *,bool (*)(shared_ptr<PenWorkspace::Discover::AppUsageData> &,shared_ptr<PenWorkspace::Discover::AppUsageData> &)>(std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,std::shared_ptr<PenWorkspace::Discover::AppUsageData> *,__int64,bool (*)(std::shared_ptr<PenWorkspace::Discover::AppUsageData> &,std::shared_ptr<PenWorkspace::Discover::AppUsageData> &));
	void rethrow_exception(std::exception_ptr);
	void swap<Microsoft::WRL::ComPtr<IUnknown>,void>(Microsoft::WRL::ComPtr<IUnknown> &,Microsoft::WRL::ComPtr<IUnknown> &);
	wil::com_ptr_t<IAgileReference,wil::err_exception_policy> * _Uninitialized_move<wil::com_ptr_t<IAgileReference,wil::err_exception_policy> *,wil::com_ptr_t<IAgileReference,wil::err_exception_policy> *,allocator<wil::com_ptr_t<IAgileReference,wil::err_exception_policy> > >(wil::com_ptr_t<IAgileReference,wil::err_exception_policy> * const,wil::com_ptr_t<IAgileReference,wil::err_exception_policy> * const,wil::com_ptr_t<IAgileReference,wil::err_exception_policy> *,std::allocator<wil::com_ptr_t<IAgileReference,wil::err_exception_policy> > &);
	wil::com_ptr_t<IApplicationView,wil::err_exception_policy> * _Uninitialized_move<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> *,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> *,allocator<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > >(wil::com_ptr_t<IApplicationView,wil::err_exception_policy> * const,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> * const,wil::com_ptr_t<IApplicationView,wil::err_exception_policy> *,std::allocator<wil::com_ptr_t<IApplicationView,wil::err_exception_policy> > &);
	wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> * _Uninitialized_move<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> *,wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> *,allocator<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> > >(wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> * const,wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> * const,wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> *,std::allocator<wil::com_ptr_t<IWinRTApplicationView,wil::err_exception_policy> > &);
	wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> * _Uninitialized_move<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> *,wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> *,allocator<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> > >(wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> * const,wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> * const,wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> *,std::allocator<wil::com_ptr_t<IWindowWrapperInternal,wil::err_exception_policy> > &);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> * _Uninitialized_move<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> *,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> *,allocator<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > >(wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> * const,wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> *,std::allocator<wil::com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,wil::err_exception_policy> > &);
	wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> * _Uninitialized_move<wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> *,wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> *,allocator<wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> > >(wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> * const,wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> * const,wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> *,std::allocator<wil::com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,wil::err_returncode_policy> > &);
	winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Internal::UI::Shell::IWindowTabExtension,winrt::Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> * copy_n<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Internal::UI::Shell::IWindowTabExtension,winrt::Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> *,unsigned int,winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Internal::UI::Shell::IWindowTabExtension,winrt::Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> *>(winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Internal::UI::Shell::IWindowTabExtension,winrt::Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> *,unsigned int,winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Internal::UI::Shell::IWindowTabExtension,winrt::Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> *);
	winrt::immersive_shell_component::service_description * _Move_backward_unchecked<winrt::immersive_shell_component::service_description *,winrt::immersive_shell_component::service_description *>(winrt::immersive_shell_component::service_description *,winrt::immersive_shell_component::service_description *,winrt::immersive_shell_component::service_description *);
	winrt::immersive_shell_component::service_description * _Move_unchecked<winrt::immersive_shell_component::service_description *,winrt::immersive_shell_component::service_description *>(winrt::immersive_shell_component::service_description *,winrt::immersive_shell_component::service_description *,winrt::immersive_shell_component::service_description *);
	winrt::immersive_shell_component::service_description * _Uninitialized_move<winrt::immersive_shell_component::service_description *,winrt::immersive_shell_component::service_description *,allocator<winrt::immersive_shell_component::service_description> >(winrt::immersive_shell_component::service_description * const,winrt::immersive_shell_component::service_description * const,winrt::immersive_shell_component::service_description *,std::allocator<winrt::immersive_shell_component::service_description> &);
};

class unique_animation_clock
{
	long Initialize(unsigned long,unsigned long);
public:
	unique_animation_clock(_GUID const &,unsigned long,unsigned long);
	~unique_animation_clock();
};

namespace wil
{
	class ActivityBase<AppCloselogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AppCloselogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<AppCloselogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<AppCloselogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<AppUsageTelemetry,1,70368744177664,5,33554432,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AppUsageTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<AppUsageTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<AppUsageTelemetry,1,70368744177664,5,33554432,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<ApplicationViewManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ApplicationViewManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<ApplicationViewManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<CAppManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<CAppManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<CAppManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<CAppManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<CAppManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<CAppManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<CAppManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<CAppManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<CAppManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<CAppManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<CAppManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<CAppManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<CAppManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<CAppManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<CAppManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<CommonPeopleTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CommonPeopleTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CommonPeopleTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
		void IncrementExpectedStopCount();
	public:
		ActivityBase<CommonPeopleTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<CommonPeopleTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<CommonPeopleTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<CommonPeopleTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<CommonPeopleTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<CommonPeopleTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<CortanaProactiveLogging,0,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<CortanaProactiveLogging,0,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<CortanaProactiveLogging,0,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<CortanaProactiveLogging,1,0,0,4,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<CortanaProactiveLogging,1,0,0,4,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<CortanaProactiveLogging,1,0,4,16777216,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<CortanaProactiveLogging,1,0,4,16777216,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<CortanaProactiveLogging,1,0,4,16777216,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<CortanaProactiveLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<CortanaProactiveLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<CortanaProactiveLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<DragDropSimulatorTraceLogging,1,70368744177664,5,33554432,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<DragDropSimulatorTraceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<DragDropSimulatorTraceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<DragDropSimulatorTraceLogging,1,70368744177664,5,33554432,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<HolographicPositionerProvider,0,0,4,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<HolographicPositionerProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<HolographicPositionerProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<HolographicPositionerProvider,0,0,4,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<HolographicPositionerProvider,0,0,4,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<HolographicPositionerProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<HolographicPositionerProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<HolographicPositionerProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<HolographicPositionerProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<HolographicPositionerProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<ImmersiveIconsLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ImmersiveIconsLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<ImmersiveIconsLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<ImmersiveIconsLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<JumpViewProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<JumpViewProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<JumpViewProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<JumpViewProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<JumpViewProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<JumpViewProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<JumpViewProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<JumpViewProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<LauncherTelemetryLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<LauncherTelemetryLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<LauncherTelemetryLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<LockScreenServiceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<LockScreenServiceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<LockScreenServiceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<LockScreenServiceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<LockScreenServiceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<MeetNowTelemetryLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<MeetNowTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<MeetNowTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<MeetNowTelemetryLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<NotificationCenterLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<NotificationCenterLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<NotificationCenterLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<NotificationCenterLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<NotificationCenterLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<NotificationCenterLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<NotificationCenterLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<NotificationCenterLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<NotificationCenterLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<PenWorkspaceBrokerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<PenWorkspaceBrokerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<PenWorkspaceBrokerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<PenWorkspaceBrokerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<QuickConnectLoggingProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<QuickConnectLoggingProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<QuickConnectLoggingProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<QuickConnectLoggingProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<QuickConnectLoggingProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<QuickConnectLoggingProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<QuickConnectLoggingProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<QuickConnectLoggingProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<QuickConnectLoggingProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<StartMenuExperienceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<StartMenuExperienceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<StartMenuExperienceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	public:
		ActivityBase<StartMenuExperienceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStart();
		void zInternalStop();
	};

	class ActivityBase<TabShellTelemetryProvider,0,0,3,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<TabShellTelemetryProvider,0,0,3,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TabShellTelemetryProvider,0,0,3,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TabShellTelemetryProvider,0,0,4,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<TabShellTelemetryProvider,0,0,4,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<TabShellTelemetryProvider,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<TabShellTelemetryProvider,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TabShellTelemetryProvider,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TabShellTelemetryProvider,1,0,3,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<TabShellTelemetryProvider,1,0,3,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<TabShellTelemetryProvider,1,0,4,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<TabShellTelemetryProvider,1,0,4,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TabShellTelemetryProvider,1,0,4,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TabShellTelemetryProvider,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<TabShellTelemetryProvider,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TabShellTelemetryProvider,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TabShellTelemetryProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<TabShellTelemetryProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TabShellTelemetryProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TabShellTelemetryProvider,1,70368744177664,4,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<TabShellTelemetryProvider,1,70368744177664,4,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<TabShellTelemetryProvider,1,70368744177664,4,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<TabShellTelemetryProvider,1,70368744177664,4,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<TabShellTelemetryProvider,1,70368744177664,4,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<TabShellTelemetryProvider,1,70368744177664,4,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TabShellTelemetryProvider,1,70368744177664,4,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TabShellTelemetryProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<TabShellTelemetryProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TabShellTelemetryProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TaskFlowDataEngineTelemetry,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TaskFlowDataEngineTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TaskFlowDataEngineTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<TaskFlowDataEngineTelemetry,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<TaskbarLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TaskbarLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TaskbarLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<TaskbarLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TaskbarLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void SetMessage(char const *,...);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,16777216,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,16777216,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,16777216,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void SetMessage(char const *,...);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TouchKeyboardExperienceTraceLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<TouchKeyboardExperienceTraceLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void SetMessage(char const *,...);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<TouchKeyboardExperienceTraceLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<TouchpadControllerExperienceManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TouchpadControllerExperienceManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TouchpadControllerExperienceManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<TouchpadControllerExperienceManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<TrayNotificationAreaLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<TrayNotificationAreaLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<TrayNotificationAreaLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<TrayNotificationAreaLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<ViewManagerInteropLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ViewManagerInteropLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<ViewManagerInteropLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<ViewManagerInteropLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<ViewManagerInteropLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<ViewManagerInteropLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<ViewManagerInteropLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<ViewManagerInteropLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<ViewManagerInteropLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<Win32BackedViewHostItemTelemetryProvider,0,0,4,33554432,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<Win32BackedViewHostItemTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<Win32BackedViewHostItemTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<Win32BackedViewHostItemTelemetryProvider,0,0,4,33554432,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<Win32BackedViewHostItemTelemetryProvider,1,35184372088832,5,33554432,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<Win32BackedViewHostItemTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<Win32BackedViewHostItemTelemetryProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<Win32BackedViewHostItemTelemetryProvider,1,35184372088832,5,33554432,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<Win32BackedViewHostItemTelemetryProvider,1,35184372088832,5,33554432,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<Win32BackedViewHostItemTelemetryProvider,1,35184372088832,5,33554432,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<Win32BackedViewHostItemTelemetryProvider,1,35184372088832,5,33554432,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<Win32BackedViewHostItemTelemetryProvider,1,35184372088832,5,33554432,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<Win32BackedViewHostItemTelemetryProvider,1,35184372088832,5,33554432,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<WindowManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<WindowManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<WindowManagementLogging,1,0,4,50331648,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,1,0,4,50331648,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<WindowManagementLogging,1,0,5,50331648,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	public:
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<WindowManagementLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<WindowManagementLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<WindowManagementLogging,1,70368744177664,4,16777216,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,1,70368744177664,4,16777216,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<WindowManagementLogging,1,70368744177664,4,50331648,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,1,70368744177664,4,50331648,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<WindowManagementLogging,1,70368744177664,4,50331648,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<WindowManagementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<WindowManagementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<WindowManagementLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
		void EnsureWatchingCurrentThread();
	public:
		ActivityBase<WindowManagementLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void IgnoreCurrentThread();
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<WindowManagementLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<WindowManagementLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<XamlSwitcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<XamlSwitcherLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<XamlSwitcherLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<XamlSwitcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<XamlSwitcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<XamlSwitcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<XamlSwitcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<XamlSwitcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<XamlSwitcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<XamlSwitcherLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<XamlSwitcherLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<XamlSwitcherLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<XamlSwitcherLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<XamlSwitcherLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	struct ActivityThreadWatcher
	{
		ActivityThreadWatcher(details::IFailureCallback *,char const *);
		ActivityThreadWatcher(details::IFailureCallback *,details::StoredCallContextInfo const &);
		~ActivityThreadWatcher();
	};

	class AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_exception_policy>
	{
		struct AsyncEventWorkItem
		{
			virtual void RaiseEvent();
			virtual ~AsyncEventWorkItem();
		};

		long Initialize();
	public:
		~AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_exception_policy>();
	};

	class AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>
	{
		struct AsyncEventWorkItem
		{
			virtual void RaiseEvent();
			virtual ~AsyncEventWorkItem();
		};

		long Initialize();
	public:
		AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>(AsyncEventSerialInvocationContextToken const &);
		~AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>();
	};

	class AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>
	{
		struct AsyncEventWorkItem
		{
			virtual void RaiseEvent();
			virtual ~AsyncEventWorkItem();
		};

		long Initialize();
	public:
		long AsyncInvokeAll<ApplicationViewBackedViewHostItem *,FrameworkViewTypeSetEventArgs *>(ApplicationViewBackedViewHostItem * const &,FrameworkViewTypeSetEventArgs * const &);
		~AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>();
	};

	class AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>
	{
		struct AsyncEventWorkItem
		{
			virtual void RaiseEvent();
			virtual ~AsyncEventWorkItem();
		};

		long Initialize();
	public:
		AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>(AsyncEventSerialInvocationContextToken const &);
		long AsyncInvokeAll<ApplicationViewBackedViewHostItem *,PresentationReadyChangedEventArgs *>(ApplicationViewBackedViewHostItem * const &,PresentationReadyChangedEventArgs * const &);
		long AsyncInvokeAll<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem *,PresentationReadyChangedEventArgs *>(Windows::Internal::Shell::Holographic::Win32BackedViewHostItem * const &,PresentationReadyChangedEventArgs * const &);
		~AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>();
	};

	class AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>
	{
		struct AsyncEventWorkItem
		{
			virtual void RaiseEvent();
			virtual ~AsyncEventWorkItem();
		};

		long Initialize();
	public:
		long AsyncInvokeAll<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *>(Windows::Internal::Shell::Holographic::Win32BackedViewHostItem * const &,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs * const &);
		~AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>();
	};

	class AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>
	{
		struct AsyncEventWorkItem
		{
			virtual void RaiseEvent();
			virtual ~AsyncEventWorkItem();
		};

		long Initialize();
	public:
		long AsyncInvokeAll<Windows::Internal::Shell::Holographic::IViewHostItem *,ViewHostItemEventArgs *>(Windows::Internal::Shell::Holographic::IViewHostItem * const &,ViewHostItemEventArgs * const &);
		long AsyncInvokeAll<Windows::Internal::Shell::Holographic::IViewHostItem *,ViewHostItemPropertyChangedArgs *>(Windows::Internal::Shell::Holographic::IViewHostItem * const &,ViewHostItemPropertyChangedArgs * const &);
		~AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>();
	};

	class AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>
	{
		struct AsyncEventWorkItem
		{
			virtual void RaiseEvent();
			virtual ~AsyncEventWorkItem();
		};

		long Initialize();
	public:
		AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>(AsyncEventSerialInvocationContextToken const &);
		long AsyncInvokeAll<ApplicationViewBackedViewHostItem *,ViewHostViewModeChangeRequestedEventArgs *>(ApplicationViewBackedViewHostItem * const &,ViewHostViewModeChangeRequestedEventArgs * const &);
		long AsyncInvokeAll<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem *,ViewHostViewModeChangeRequestedEventArgs *>(Windows::Internal::Shell::Holographic::Win32BackedViewHostItem * const &,ViewHostViewModeChangeRequestedEventArgs * const &);
		~AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>();
	};

	class AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>
	{
		struct AsyncEventWorkItem
		{
			virtual void RaiseEvent();
			virtual ~AsyncEventWorkItem();
		};

		long Initialize();
	public:
		AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>(AsyncEventSerialInvocationContextToken const &);
		long AsyncInvokeAll<ApplicationViewBackedViewHostItem *,ViewSizePreferencesChangedEventArgs *>(ApplicationViewBackedViewHostItem * const &,ViewSizePreferencesChangedEventArgs * const &);
		long AsyncInvokeAll<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem *,ViewSizePreferencesChangedEventArgs *>(Windows::Internal::Shell::Holographic::Win32BackedViewHostItem * const &,ViewSizePreferencesChangedEventArgs * const &);
		~AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>();
	};

	struct ErrorHandlingHelpers
	{
		static void FallbackTelemetryCallback(bool,FailureInfo const &);
	};

	struct Feature<__WilFeatureTraits_Feature_EyeTracking>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_FeedsCore>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_GifSuggestionOnDesktop>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_HolographicUserExperiences>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_LockExpMgr_AppHostingModel>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_LockReliability_LongLiveLockApp>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_SignalManager>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_StartInWin32Host>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_TouchKeyboardExperienceManager>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_UseNewSearchAndCortanaApps>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_VoiceAssistantPositioner>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_WindowManagerDesktop>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_WindowingEnvironmentsDesktop>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_XamlAllUpView>
	{
		static bool IsEnabled();
	};

	struct Feature<__WilFeatureTraits_Feature_XamlExplorerHost>
	{
		static bool IsEnabled();
	};

	struct PropertyStoreHelper
	{
		PropertyStoreHelper(IPropertyStore *);
		~PropertyStoreHelper();
	};

	struct PropertyStoreHelperBase<IPropertyStore>
	{
		long GetFailIfEmpty<_tagpropertykey>(_tagpropertykey,tagPROPVARIANT *);
		long GetString<_tagpropertykey>(_tagpropertykey,unsigned short * *);
		long InitFromItem(IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const *,unsigned int);
	};

	struct ResultException
	{
		ResultException(ResultException const &);
		virtual char const * what();
		virtual ~ResultException();
	};

	struct StoredFailureInfo
	{
		void SetFailureInfo(FailureInfo const &);
	};

	struct ThreadErrorContext
	{
		ThreadErrorContext();
		bool GetCaughtExceptionError(FailureInfo &,DiagnosticsInfo const *,long);
		bool GetLastError(FailureInfo &,long);
		~ThreadErrorContext();
	};

	class TraceLoggingProvider
	{
		virtual bool NotifyFailure(FailureInfo const &);
	protected:
		TraceLoggingProvider();
		bool IsEnabled_(unsigned char,unsigned __int64);
		virtual void Initialize();
		virtual void OnErrorReported(bool,FailureInfo const &);
		virtual ~TraceLoggingProvider();
		void Register(_tlgProvider_t const * const,void (*)(_GUID const *,unsigned long,unsigned char,unsigned __int64,unsigned __int64,_EVENT_FILTER_DESCRIPTOR *,void *));
		void ReportTraceLoggingFailure(FailureInfo const &);
	};

	struct com_ptr_t<AppRequestOperation,err_exception_policy>
	{
		~com_ptr_t<AppRequestOperation,err_exception_policy>();
	};

	struct com_ptr_t<ApplicationViewBackedViewHostItem,err_failfast_policy>
	{
		com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,err_failfast_policy> query<Windows::Internal::Shell::Holographic::IViewHostItem>();
		~com_ptr_t<ApplicationViewBackedViewHostItem,err_failfast_policy>();
	};

	struct com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,err_exception_policy>
	{
		~com_ptr_t<CRefCountedObject<WindowEventDispatcher::PendingActivationData>,err_exception_policy>();
	};

	struct com_ptr_t<CreationThreadDispatcher,err_exception_policy>
	{
		~com_ptr_t<CreationThreadDispatcher,err_exception_policy>();
	};

	struct com_ptr_t<DesktopBlueLightReductionManager,err_exception_policy>
	{
		com_ptr_t<DesktopBlueLightReductionManager,err_exception_policy>(com_ptr_t<DesktopBlueLightReductionManager,err_exception_policy> const &);
	};

	struct com_ptr_t<IActivationHints,err_exception_policy>
	{
		~com_ptr_t<IActivationHints,err_exception_policy>();
	};

	struct com_ptr_t<IAgileReference,err_exception_policy>
	{
		void reset();
		~com_ptr_t<IAgileReference,err_exception_policy>();
	};

	struct com_ptr_t<IAgileReference,err_returncode_policy>
	{
		void reset();
		~com_ptr_t<IAgileReference,err_returncode_policy>();
	};

	struct com_ptr_t<IAllUpViewHost,err_exception_policy>
	{
		~com_ptr_t<IAllUpViewHost,err_exception_policy>();
	};

	struct com_ptr_t<IAllUpViewHostInternal,err_exception_policy>
	{
		~com_ptr_t<IAllUpViewHostInternal,err_exception_policy>();
	};

	struct com_ptr_t<IAltTabViewHost,err_exception_policy>
	{
		~com_ptr_t<IAltTabViewHost,err_exception_policy>();
	};

	struct com_ptr_t<IAppViewManager,err_exception_policy>
	{
		~com_ptr_t<IAppViewManager,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationFrame,err_exception_policy>
	{
		~com_ptr_t<IApplicationFrame,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationFrameTitleBar,err_exception_policy>
	{
		~com_ptr_t<IApplicationFrameTitleBar,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationFrameWrapper,err_exception_policy>
	{
		void reset();
	};

	struct com_ptr_t<IApplicationPresentationLayer,err_exception_policy>
	{
		~com_ptr_t<IApplicationPresentationLayer,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationResolver,err_exception_policy>
	{
		~com_ptr_t<IApplicationResolver,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationResolver2,err_exception_policy>
	{
		~com_ptr_t<IApplicationResolver2,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationView,err_exception_policy>
	{
		bool try_copy_to<IApplicationView>(IApplicationView * *);
		com_ptr_t<IApplicationView,err_exception_policy> & operator=(IApplicationView *);
		com_ptr_t<IApplicationView,err_exception_policy>(IApplicationView *);
		void reset();
		~com_ptr_t<IApplicationView,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationView,err_failfast_policy>
	{
		~com_ptr_t<IApplicationView,err_failfast_policy>();
	};

	struct com_ptr_t<IApplicationView,err_returncode_policy>
	{
		void reset();
		~com_ptr_t<IApplicationView,err_returncode_policy>();
	};

	struct com_ptr_t<IApplicationView2,err_exception_policy>
	{
		~com_ptr_t<IApplicationView2,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationViewArrangePosition,err_exception_policy>
	{
		~com_ptr_t<IApplicationViewArrangePosition,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationViewBackedViewHostItemPrivate,err_returncode_policy>
	{
		~com_ptr_t<IApplicationViewBackedViewHostItemPrivate,err_returncode_policy>();
	};

	struct com_ptr_t<IApplicationViewChangeListener,err_exception_policy>
	{
		~com_ptr_t<IApplicationViewChangeListener,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationViewCollection,err_exception_policy>
	{
		com_ptr_t<IApplicationViewCollection,err_exception_policy> & operator=(IApplicationViewCollection *);
		void reset();
		~com_ptr_t<IApplicationViewCollection,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationViewCollection,err_returncode_policy>
	{
		void reset();
		~com_ptr_t<IApplicationViewCollection,err_returncode_policy>();
	};

	struct com_ptr_t<IApplicationViewIconLoader,err_exception_policy>
	{
		com_ptr_t<IApplicationViewIconLoader,err_exception_policy> & operator=(IApplicationViewIconLoader *);
		~com_ptr_t<IApplicationViewIconLoader,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationViewIconLoaderNotifications,err_returncode_policy>
	{
		~com_ptr_t<IApplicationViewIconLoaderNotifications,err_returncode_policy>();
	};

	struct com_ptr_t<IApplicationViewOperation,err_exception_policy>
	{
		~com_ptr_t<IApplicationViewOperation,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationViewPosition,err_exception_policy>
	{
		~com_ptr_t<IApplicationViewPosition,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationViewSwitcher,err_exception_policy>
	{
		com_ptr_t<IApplicationViewSwitcher,err_exception_policy> & operator=(IApplicationViewSwitcher *);
		~com_ptr_t<IApplicationViewSwitcher,err_exception_policy>();
	};

	struct com_ptr_t<IApplicationViewTitlebarConfiguration,err_exception_policy>
	{
		~com_ptr_t<IApplicationViewTitlebarConfiguration,err_exception_policy>();
	};

	struct com_ptr_t<ICDPUserActivitySettings,err_exception_policy>
	{
		void reset();
		~com_ptr_t<ICDPUserActivitySettings,err_exception_policy>();
	};

	struct com_ptr_t<IDCompositionDevice2,err_exception_policy>
	{
		~com_ptr_t<IDCompositionDevice2,err_exception_policy>();
	};

	struct com_ptr_t<IDCompositionVisual2,err_exception_policy>
	{
		~com_ptr_t<IDCompositionVisual2,err_exception_policy>();
	};

	struct com_ptr_t<IDataObject,err_exception_policy>
	{
		IDataObject * * operator&();
		IDataObject * get();
		com_ptr_t<IDataObject,err_exception_policy>();
		com_ptr_t<IDataObject,err_exception_policy>(com_ptr_t<IDataObject,err_exception_policy> const &);
		~com_ptr_t<IDataObject,err_exception_policy>();
	};

	struct com_ptr_t<IDragDropExtensionForOLE,err_exception_policy>
	{
		~com_ptr_t<IDragDropExtensionForOLE,err_exception_policy>();
	};

	struct com_ptr_t<IDropTarget,err_exception_policy>
	{
		IDropTarget * operator->();
		com_ptr_t<IDropTarget,err_exception_policy>();
		com_ptr_t<IDropTarget,err_exception_policy>(com_ptr_t<IDropTarget,err_exception_policy> const &);
		operator bool();
		~com_ptr_t<IDropTarget,err_exception_policy>();
	};

	struct com_ptr_t<IHostedApplicationNotification,err_exception_policy>
	{
		void reset();
		~com_ptr_t<IHostedApplicationNotification,err_exception_policy>();
	};

	struct com_ptr_t<IHostedViewDeferClose,err_exception_policy>
	{
		~com_ptr_t<IHostedViewDeferClose,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveAppCrusher,err_exception_policy>
	{
		com_ptr_t<IImmersiveAppCrusher,err_exception_policy> & operator=(IImmersiveAppCrusher *);
		~com_ptr_t<IImmersiveAppCrusher,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveApplication,err_exception_policy>
	{
		~com_ptr_t<IImmersiveApplication,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveApplicationInternal,err_exception_policy>
	{
		com_ptr_t<IImmersiveApplication,err_exception_policy> query<IImmersiveApplication>();
		~com_ptr_t<IImmersiveApplicationInternal,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveMonitor,err_exception_policy>
	{
		~com_ptr_t<IImmersiveMonitor,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveMonitor,err_returncode_policy>
	{
		~com_ptr_t<IImmersiveMonitor,err_returncode_policy>();
	};

	struct com_ptr_t<IImmersiveMonitorManager,err_exception_policy>
	{
		void reset();
		~com_ptr_t<IImmersiveMonitorManager,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveMonitorNotificationService,err_exception_policy>
	{
		~com_ptr_t<IImmersiveMonitorNotificationService,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveSessionIdleDetector,err_exception_policy>
	{
		~com_ptr_t<IImmersiveSessionIdleDetector,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveSettingsCache,err_exception_policy>
	{
		~com_ptr_t<IImmersiveSettingsCache,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveShellHookNotification,err_exception_policy>
	{
		~com_ptr_t<IImmersiveShellHookNotification,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveShellHookService,err_exception_policy>
	{
		~com_ptr_t<IImmersiveShellHookService,err_exception_policy>();
	};

	struct com_ptr_t<IImmersiveWindowMessageService,err_exception_policy>
	{
		void reset();
		~com_ptr_t<IImmersiveWindowMessageService,err_exception_policy>();
	};

	struct com_ptr_t<IInspectable,err_exception_policy>
	{
		com_ptr_t<IInspectable,err_exception_policy> & operator=(IInspectable *);
		com_ptr_t<IInspectable,err_exception_policy>(IInspectable *);
		com_ptr_t<IPresentationRequestedArgs,err_exception_policy> query<IPresentationRequestedArgs>();
		com_ptr_t<IServiceHostComponent,err_exception_policy> query<IServiceHostComponent>();
		com_ptr_t<Windows::Foundation::Collections::IPropertySet,err_exception_policy> query<Windows::Foundation::Collections::IPropertySet>();
		com_ptr_t<Windows::Foundation::Collections::IVectorView<unsigned int>,err_exception_policy> query<Windows::Foundation::Collections::IVectorView<unsigned int> >();
		com_ptr_t<Windows::Foundation::IReference<HSTRING__ *>,err_exception_policy> query<Windows::Foundation::IReference<HSTRING__ *> >();
		com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSink,err_exception_policy> query<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSink>();
		com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,err_exception_policy> copy<Windows::Internal::ComposableShell::Tabs::IShellTab>();
		com_ptr_t<Windows::Internal::Data::Activities::IActivityIndexer,err_exception_policy> query<Windows::Internal::Data::Activities::IActivityIndexer>();
		com_ptr_t<Windows::Internal::Shell::CustomShell::ICustomShellExperienceRepository,err_exception_policy> query<Windows::Internal::Shell::CustomShell::ICustomShellExperienceRepository>();
		com_ptr_t<Windows::Internal::Shell::Experience::ITabExperienceManager,err_exception_policy> query<Windows::Internal::Shell::Experience::ITabExperienceManager>();
		com_ptr_t<Windows::Internal::Shell::ShellLauncher::IShellLauncherManager,err_exception_policy> query<Windows::Internal::Shell::ShellLauncher::IShellLauncherManager>();
		~com_ptr_t<IInspectable,err_exception_policy>();
	};

	struct com_ptr_t<IInspectable,err_failfast_policy>
	{
		~com_ptr_t<IInspectable,err_failfast_policy>();
	};

	struct com_ptr_t<IInspectable,err_returncode_policy>
	{
		~com_ptr_t<IInspectable,err_returncode_policy>();
	};

	struct com_ptr_t<IMultitaskingViewForegroundStaging,err_exception_policy>
	{
		~com_ptr_t<IMultitaskingViewForegroundStaging,err_exception_policy>();
	};

	struct com_ptr_t<IMultitaskingViewHost,err_exception_policy>
	{
		com_ptr_t<IAllUpViewHost,err_exception_policy> query<IAllUpViewHost>();
		com_ptr_t<IAllUpViewHostInternal,err_exception_policy> query<IAllUpViewHostInternal>();
		com_ptr_t<IAltTabViewHost,err_exception_policy> query<IAltTabViewHost>();
		com_ptr_t<IMultitaskingViewHost,err_exception_policy> & operator=(IMultitaskingViewHost *);
		~com_ptr_t<IMultitaskingViewHost,err_exception_policy>();
	};

	struct com_ptr_t<INtUserViewWrapper,err_exception_policy>
	{
		~com_ptr_t<INtUserViewWrapper,err_exception_policy>();
	};

	struct com_ptr_t<IOSTaskCompletion,err_exception_policy>
	{
		~com_ptr_t<IOSTaskCompletion,err_exception_policy>();
	};

	struct com_ptr_t<IObjectArray,err_exception_policy>
	{
		~com_ptr_t<IObjectArray,err_exception_policy>();
	};

	struct com_ptr_t<IObjectArray,err_returncode_policy>
	{
		~com_ptr_t<IObjectArray,err_returncode_policy>();
	};

	struct com_ptr_t<IObjectCollection,err_exception_policy>
	{
		~com_ptr_t<IObjectCollection,err_exception_policy>();
	};

	struct com_ptr_t<IObjectWithSite,err_exception_policy>
	{
		~com_ptr_t<IObjectWithSite,err_exception_policy>();
	};

	struct com_ptr_t<IObjectWithSite,err_failfast_policy>
	{
		~com_ptr_t<IObjectWithSite,err_failfast_policy>();
	};

	struct com_ptr_t<IPositionerApplicationClosePolicy,err_exception_policy>
	{
		~com_ptr_t<IPositionerApplicationClosePolicy,err_exception_policy>();
	};

	struct com_ptr_t<IPresentationRequestedArgs,err_exception_policy>
	{
		com_ptr_t<IInspectable,err_exception_policy> query<IInspectable>();
		~com_ptr_t<IPresentationRequestedArgs,err_exception_policy>();
	};

	struct com_ptr_t<IPrivDragDrop,err_exception_policy>
	{
		com_ptr_t<IPrivDragDrop,err_exception_policy>();
		operator bool();
		~com_ptr_t<IPrivDragDrop,err_exception_policy>();
	};

	struct com_ptr_t<IPrivilegedArrangementOperations,err_exception_policy>
	{
		~com_ptr_t<IPrivilegedArrangementOperations,err_exception_policy>();
	};

	struct com_ptr_t<IPrivilegedForegroundOperations,err_exception_policy>
	{
		com_ptr_t<IPrivilegedForegroundOperations,err_exception_policy> & operator=(IPrivilegedForegroundOperations *);
		com_ptr_t<IPrivilegedForegroundOperations,err_exception_policy>(IPrivilegedForegroundOperations *);
		~com_ptr_t<IPrivilegedForegroundOperations,err_exception_policy>();
	};

	struct com_ptr_t<IPrivilegedNotificationOperations,err_exception_policy>
	{
		~com_ptr_t<IPrivilegedNotificationOperations,err_exception_policy>();
	};

	struct com_ptr_t<IPrivilegedPresentationOperations,err_exception_policy>
	{
		~com_ptr_t<IPrivilegedPresentationOperations,err_exception_policy>();
	};

	struct com_ptr_t<IPrivilegedWindowGroupingOperations,err_exception_policy>
	{
		~com_ptr_t<IPrivilegedWindowGroupingOperations,err_exception_policy>();
	};

	struct com_ptr_t<IPrivilegedWindowOwnershipOperations,err_exception_policy>
	{
		~com_ptr_t<IPrivilegedWindowOwnershipOperations,err_exception_policy>();
	};

	struct com_ptr_t<IProcessLifetimeManagerControl,err_exception_policy>
	{
		void reset();
	};

	struct com_ptr_t<IPropertyStore,err_exception_policy>
	{
		~com_ptr_t<IPropertyStore,err_exception_policy>();
	};

	struct com_ptr_t<IServiceHostComponent,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::Shell::BlueLightReduction::IBlueLightReductionManager,err_exception_policy> query<Windows::Internal::Shell::BlueLightReduction::IBlueLightReductionManager>();
		~com_ptr_t<IServiceHostComponent,err_exception_policy>();
	};

	struct com_ptr_t<IServiceProvider,err_exception_policy>
	{
		com_ptr_t<IServiceProvider,err_exception_policy> & operator=(IServiceProvider *);
		void reset();
		~com_ptr_t<IServiceProvider,err_exception_policy>();
	};

	struct com_ptr_t<IServiceProvider,err_returncode_policy>
	{
		~com_ptr_t<IServiceProvider,err_returncode_policy>();
	};

	struct com_ptr_t<IShellItem,err_exception_policy>
	{
		~com_ptr_t<IShellItem,err_exception_policy>();
	};

	struct com_ptr_t<IShellItem2,err_exception_policy>
	{
		~com_ptr_t<IShellItem2,err_exception_policy>();
	};

	struct com_ptr_t<IShellPositionerActivationHandler,err_returncode_policy>
	{
		~com_ptr_t<IShellPositionerActivationHandler,err_returncode_policy>();
	};

	struct com_ptr_t<IShellPositionerManager,err_exception_policy>
	{
		void reset();
		~com_ptr_t<IShellPositionerManager,err_exception_policy>();
	};

	struct com_ptr_t<IShellPositionerManager,err_returncode_policy>
	{
		~com_ptr_t<IShellPositionerManager,err_returncode_policy>();
	};

	struct com_ptr_t<IShellPositionerPresentationRequestedHandler,err_exception_policy>
	{
		~com_ptr_t<IShellPositionerPresentationRequestedHandler,err_exception_policy>();
	};

	struct com_ptr_t<IShellPositionerPriority,err_exception_policy>
	{
		~com_ptr_t<IShellPositionerPriority,err_exception_policy>();
	};

	struct com_ptr_t<ISnapAssistCallback,err_exception_policy>
	{
		~com_ptr_t<ISnapAssistCallback,err_exception_policy>();
	};

	struct com_ptr_t<ISnapComponent,err_exception_policy>
	{
		~com_ptr_t<ISnapComponent,err_exception_policy>();
	};

	struct com_ptr_t<IStream,err_exception_policy>
	{
		~com_ptr_t<IStream,err_exception_policy>();
	};

	struct com_ptr_t<ITabControllerThumbnailEventArgsInternal,err_exception_policy>
	{
		~com_ptr_t<ITabControllerThumbnailEventArgsInternal,err_exception_policy>();
	};

	struct com_ptr_t<ITabDragHandler,err_exception_policy>
	{
		~com_ptr_t<ITabDragHandler,err_exception_policy>();
	};

	struct com_ptr_t<ITabShellHotKeyHandler,err_exception_policy>
	{
		void reset();
	};

	struct com_ptr_t<ITabTransferManager,err_exception_policy>
	{
		com_ptr_t<ITabTransferManager,err_exception_policy>(ITabTransferManager *);
		~com_ptr_t<ITabTransferManager,err_exception_policy>();
	};

	struct com_ptr_t<ITabViewManager,err_exception_policy>
	{
		com_ptr_t<ITabViewManager,err_exception_policy> & operator=(ITabViewManager *);
		com_ptr_t<ITabViewManager,err_exception_policy>(ITabViewManager *);
		void reset();
		~com_ptr_t<ITabViewManager,err_exception_policy>();
	};

	struct com_ptr_t<ITabbingAwarePositioner,err_exception_policy>
	{
		~com_ptr_t<ITabbingAwarePositioner,err_exception_policy>();
	};

	struct com_ptr_t<ITabbingAwarePositioner,err_returncode_policy>
	{
		~com_ptr_t<ITabbingAwarePositioner,err_returncode_policy>();
	};

	struct com_ptr_t<ITaskbarList4,err_exception_policy>
	{
		~com_ptr_t<ITaskbarList4,err_exception_policy>();
	};

	struct com_ptr_t<ITextInputHostInfoProvider,err_exception_policy>
	{
		~com_ptr_t<ITextInputHostInfoProvider,err_exception_policy>();
	};

	struct com_ptr_t<ITitleBarController,err_exception_policy>
	{
		com_ptr_t<ITitleBarController,err_exception_policy>(ITitleBarController *);
		~com_ptr_t<ITitleBarController,err_exception_policy>();
	};

	struct com_ptr_t<ITitleBarRecovery,err_exception_policy>
	{
		~com_ptr_t<ITitleBarRecovery,err_exception_policy>();
	};

	struct com_ptr_t<ITitleBarRecovery,err_returncode_policy>
	{
		~com_ptr_t<ITitleBarRecovery,err_returncode_policy>();
	};

	struct com_ptr_t<ITouchKeyboardExperienceManager,err_exception_policy>
	{
		com_ptr_t<ITextInputHostInfoProvider,err_exception_policy> query<ITextInputHostInfoProvider>();
		~com_ptr_t<ITouchKeyboardExperienceManager,err_exception_policy>();
	};

	struct com_ptr_t<ITrayAppIdentityResolver,err_exception_policy>
	{
		~com_ptr_t<ITrayAppIdentityResolver,err_exception_policy>();
	};

	struct com_ptr_t<ITrayNotify,err_exception_policy>
	{
		~com_ptr_t<ITrayNotify,err_exception_policy>();
	};

	struct com_ptr_t<IUnknown,err_exception_policy>
	{
		com_ptr_t<IUnknown,err_exception_policy>(IUnknown *);
		void copy_to(_GUID const &,void * *);
		void reset();
		~com_ptr_t<IUnknown,err_exception_policy>();
	};

	struct com_ptr_t<IViewGroupInternal,err_exception_policy>
	{
		com_ptr_t<ITitleBarRecovery,err_exception_policy> query<ITitleBarRecovery>();
		~com_ptr_t<IViewGroupInternal,err_exception_policy>();
	};

	struct com_ptr_t<IViewGroupManagerInternal,err_exception_policy>
	{
		com_ptr_t<ITitleBarRecovery,err_exception_policy> query<ITitleBarRecovery>();
		~com_ptr_t<IViewGroupManagerInternal,err_exception_policy>();
	};

	struct com_ptr_t<IViewPresentationMediator,err_exception_policy>
	{
		void reset();
		~com_ptr_t<IViewPresentationMediator,err_exception_policy>();
	};

	struct com_ptr_t<IVirtualDesktop,err_exception_policy>
	{
		~com_ptr_t<IVirtualDesktop,err_exception_policy>();
	};

	struct com_ptr_t<IVirtualDesktopManager,err_exception_policy>
	{
		~com_ptr_t<IVirtualDesktopManager,err_exception_policy>();
	};

	struct com_ptr_t<IVirtualDesktopManagerInternal,err_exception_policy>
	{
		~com_ptr_t<IVirtualDesktopManagerInternal,err_exception_policy>();
	};

	struct com_ptr_t<IVirtualDesktopManagerInternal3,err_exception_policy>
	{
		~com_ptr_t<IVirtualDesktopManagerInternal3,err_exception_policy>();
	};

	struct com_ptr_t<IVirtualDesktopNotificationService,err_exception_policy>
	{
		~com_ptr_t<IVirtualDesktopNotificationService,err_exception_policy>();
	};

	struct com_ptr_t<IWICBitmap,err_exception_policy>
	{
		com_ptr_t<IWICBitmapSource,err_exception_policy> query<IWICBitmapSource>();
		~com_ptr_t<IWICBitmap,err_exception_policy>();
	};

	struct com_ptr_t<IWICBitmapSource,err_exception_policy>
	{
		IWICBitmapSource * * operator&();
		IWICBitmapSource * get();
		com_ptr_t<IWICBitmapSource,err_exception_policy>();
		~com_ptr_t<IWICBitmapSource,err_exception_policy>();
	};

	struct com_ptr_t<IWICImagingFactory,err_exception_policy>
	{
		IWICImagingFactory * get();
		~com_ptr_t<IWICImagingFactory,err_exception_policy>();
	};

	struct com_ptr_t<IWeakReference,err_exception_policy>
	{
		com_ptr_t<IInspectable,err_exception_policy> query<IInspectable>();
		com_ptr_t<ITabDragHandler,err_exception_policy> query<ITabDragHandler>();
		com_ptr_t<ITabViewManager,err_exception_policy> query<ITabViewManager>();
		com_ptr_t<IWeakReference,err_exception_policy>(com_ptr_t<IWeakReference,err_exception_policy> const &);
		void reset();
		~com_ptr_t<IWeakReference,err_exception_policy>();
	};

	struct com_ptr_t<IWeakReference,err_failfast_policy>
	{
		com_ptr_t<IInspectable,err_failfast_policy> try_query<IInspectable>();
		void reset();
		~com_ptr_t<IWeakReference,err_failfast_policy>();
	};

	struct com_ptr_t<IWeakReference,err_returncode_policy>
	{
		~com_ptr_t<IWeakReference,err_returncode_policy>();
	};

	struct com_ptr_t<IWeakReferenceSource,err_returncode_policy>
	{
		~com_ptr_t<IWeakReferenceSource,err_returncode_policy>();
	};

	struct com_ptr_t<IWin32ApplicationView,err_exception_policy>
	{
		com_ptr_t<IWin32ApplicationView,err_exception_policy>(IWin32ApplicationView *);
		~com_ptr_t<IWin32ApplicationView,err_exception_policy>();
	};

	struct com_ptr_t<IWin32ApplicationView,err_failfast_policy>
	{
		~com_ptr_t<IWin32ApplicationView,err_failfast_policy>();
	};

	struct com_ptr_t<IWin32ApplicationView,err_returncode_policy>
	{
		~com_ptr_t<IWin32ApplicationView,err_returncode_policy>();
	};

	struct com_ptr_t<IWinRTApplicationView,err_exception_policy>
	{
		com_ptr_t<IWinRTApplicationView,err_exception_policy>(IWinRTApplicationView *);
		com_ptr_t<IWinRTApplicationView,err_exception_policy><IApplicationView>(IApplicationView *,wistd::integral_constant<char,0>);
		~com_ptr_t<IWinRTApplicationView,err_exception_policy>();
	};

	struct com_ptr_t<IWinRTApplicationView,err_returncode_policy>
	{
		~com_ptr_t<IWinRTApplicationView,err_returncode_policy>();
	};

	struct com_ptr_t<IWindowEventDispatcherInternal,err_exception_policy>
	{
		com_ptr_t<IWindowEventDispatcherInternal,err_exception_policy> & operator=(IWindowEventDispatcherInternal *);
		~com_ptr_t<IWindowEventDispatcherInternal,err_exception_policy>();
	};

	struct com_ptr_t<IWindowGroup,err_exception_policy>
	{
		~com_ptr_t<IWindowGroup,err_exception_policy>();
	};

	struct com_ptr_t<IWindowGroupManager,err_exception_policy>
	{
		~com_ptr_t<IWindowGroupManager,err_exception_policy>();
	};

	struct com_ptr_t<IWindowManagerBridge,err_exception_policy>
	{
		~com_ptr_t<IWindowManagerBridge,err_exception_policy>();
	};

	struct com_ptr_t<IWindowWrapperInternal,err_exception_policy>
	{
		com_ptr_t<IWindowWrapperInternal,err_exception_policy> query<IWindowWrapperInternal>();
		com_ptr_t<IWindowWrapperInternal,err_exception_policy>(com_ptr_t<IWindowWrapperInternal,err_exception_policy> const &);
		com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,err_exception_policy> query<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>();
		void reset();
		~com_ptr_t<IWindowWrapperInternal,err_exception_policy>();
	};

	struct com_ptr_t<IWindowingEnvironmentConfig,err_exception_policy>
	{
		~com_ptr_t<IWindowingEnvironmentConfig,err_exception_policy>();
	};

	struct com_ptr_t<IWindowingEnvironmentConfigInternal,err_exception_policy>
	{
		com_ptr_t<IWindowingEnvironmentConfig,err_exception_policy> query<IWindowingEnvironmentConfig>();
		~com_ptr_t<IWindowingEnvironmentConfigInternal,err_exception_policy>();
	};

	struct com_ptr_t<IWindowingEnvironmentManagerInternal,err_exception_policy>
	{
		~com_ptr_t<IWindowingEnvironmentManagerInternal,err_exception_policy>();
	};

	struct com_ptr_t<IWindowingEnvironmentSettingsInternal,err_exception_policy>
	{
		~com_ptr_t<IWindowingEnvironmentSettingsInternal,err_exception_policy>();
	};

	struct com_ptr_t<RetailDemoExperienceManager,err_exception_policy>
	{
		~com_ptr_t<RetailDemoExperienceManager,err_exception_policy>();
	};

	struct com_ptr_t<SystemTray::TrayInfoTipDisplayInfo,err_exception_policy>
	{
		void copy_to<Windows::ApplicationModel::IAppDisplayInfo>(Windows::ApplicationModel::IAppDisplayInfo * *);
	};

	struct com_ptr_t<SystemTray::TrayNotifyCallback,err_exception_policy>
	{
		~com_ptr_t<SystemTray::TrayNotifyCallback,err_exception_policy>();
	};

	struct com_ptr_t<TabShellHotKeyHandler,err_exception_policy>
	{
		void copy_to(_GUID const &,void * *);
		~com_ptr_t<TabShellHotKeyHandler,err_exception_policy>();
	};

	struct com_ptr_t<TitleBarController,err_exception_policy>
	{
		com_ptr_t<TitleBarController,err_exception_policy>(TitleBarController *);
	};

	struct com_ptr_t<ViewEventArgs,err_exception_policy>
	{
		~com_ptr_t<ViewEventArgs,err_exception_policy>();
	};

	struct com_ptr_t<ViewEventArgsForSelectTargetView,err_exception_policy>
	{
		~com_ptr_t<ViewEventArgsForSelectTargetView,err_exception_policy>();
	};

	struct com_ptr_t<ViewEventArgsForWindowingSettings,err_exception_policy>
	{
		~com_ptr_t<ViewEventArgsForWindowingSettings,err_exception_policy>();
	};

	struct com_ptr_t<WindowGroupManager,err_exception_policy>
	{
		~com_ptr_t<WindowGroupManager,err_exception_policy>();
	};

	struct com_ptr_t<Windows::ApplicationModel::Activation::IMultiviewActivationProperties,err_exception_policy>
	{
		~com_ptr_t<Windows::ApplicationModel::Activation::IMultiviewActivationProperties,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::Detail::IMarshalingBehaviorControl,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::Detail::IMarshalingBehaviorControl,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *> *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *> *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *>,err_returncode_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *>,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IMapView<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *>,err_exception_policy>
	{
		com_ptr_t<Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *> *>,err_exception_policy> query<Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *> *> >();
		~com_ptr_t<Windows::Foundation::Collections::IMapView<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IPropertySet,err_exception_policy>
	{
		com_ptr_t<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *>,err_exception_policy> query<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> >();
		~com_ptr_t<Windows::Foundation::Collections::IPropertySet,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IPropertySet,err_returncode_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IPropertySet,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Tabs::ShellTabCommand *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVector<Windows::Internal::ComposableShell::Tabs::ShellTabCommand *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionModel *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionModel *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::WindowingEnvironmentModel *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::WindowingEnvironmentModel *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::AssignedAccess::AssignedAccessApplication *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::AssignedAccess::AssignedAccessApplication *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::AssignedAccess::AssignedAccessUserInfo *>,err_returncode_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::AssignedAccess::AssignedAccessUserInfo *>,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::ITreeNode *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::ITreeNode *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTab *>,err_exception_policy>
	{
		com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTab *>,err_exception_policy>(Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTab *> *);
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTab *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTabGroup *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTabGroup *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<unsigned int>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<unsigned int>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,0>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::ComposableShell::ITreeNode *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::ITreeNode *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::ITreeNode *>,0>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,0>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::ComposableShell::Tabs::ShellTab *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Tabs::ShellTab *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Tabs::ShellTab *>,0>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,0>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,0>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,0>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,0>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<unsigned int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<unsigned int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,0>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<unsigned int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<unsigned int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<unsigned int>,0>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::Internal::ObservableVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,1>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::Internal::ObservableVector<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdEqualityPredicate,Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionIdLifetimeTraits,1>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::ComposableShell::Multitasking::ISwitchItem *> >,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IAsyncAction,err_returncode_policy>
	{
		~com_ptr_t<Windows::Foundation::IAsyncAction,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IAsyncOperation<Windows::Internal::Shell::Experience::TitleBarFactory *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::IAsyncOperation<Windows::Internal::Shell::Experience::TitleBarFactory *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IAsyncOperation<bool>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::IAsyncOperation<bool>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IAsyncOperation<bool>,err_returncode_policy>
	{
		~com_ptr_t<Windows::Foundation::IAsyncOperation<bool>,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IDeferral,err_exception_policy>
	{
		com_ptr_t<Windows::Foundation::IDeferral,err_exception_policy>(com_ptr_t<Windows::Foundation::IDeferral,err_exception_policy> const &);
		~com_ptr_t<Windows::Foundation::IDeferral,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IPropertyValueStatics,err_returncode_policy>
	{
		~com_ptr_t<Windows::Foundation::IPropertyValueStatics,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IReference<HSTRING__ *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::IReference<HSTRING__ *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IUriRuntimeClass,err_returncode_policy>
	{
		~com_ptr_t<Windows::Foundation::IUriRuntimeClass,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IUriRuntimeClassFactory,err_returncode_policy>
	{
		~com_ptr_t<Windows::Foundation::IUriRuntimeClassFactory,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppModel,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IImmersiveAppModel,err_exception_policy> query<Windows::Internal::ApplicationModel::WindowManagement::IImmersiveAppModel>();
		com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalAppModel,err_exception_policy> query<Windows::Internal::ApplicationModel::WindowManagement::IUniversalAppModel>();
		com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalAppModelPreview,err_exception_policy> query<Windows::Internal::ApplicationModel::WindowManagement::IUniversalAppModelPreview>();
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppModel,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppView,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewPreview,err_exception_policy> query<Windows::Internal::ApplicationModel::WindowManagement::IAppViewPreview>();
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppView,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewActivationRequestedEventArgsPreview,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewActivationRequestedEventArgsPreview,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewBehaviorStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewBehaviorStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewChangedEventArgs,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewChangedEventArgs,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewPreview,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewPreview,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewRequestEventArgs,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewRequestEventArgs,err_exception_policy>(com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewRequestEventArgs,err_exception_policy> const &);
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewRequestEventArgs,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewStatics,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewBehaviorStatics,err_exception_policy> query<Windows::Internal::ApplicationModel::WindowManagement::IAppViewBehaviorStatics>();
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IAppViewWatcher,err_exception_policy>
	{
		void reset();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IImmersiveAppModel,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IImmersiveAppModel,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::ISplashScreen,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::ISplashScreen,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalAppModel,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalAppModel,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalAppModelPreview,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalAppModelPreview,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalBatch,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalBatch,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalFrame,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalFrame,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalTitleBar,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IUniversalTitleBar,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindow,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindow,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindowBehaviorStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindowBehaviorStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindowStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindowStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindowWatcher,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindowWatcher_Input,err_exception_policy> query<Windows::Internal::ApplicationModel::WindowManagement::IWindowWatcher_Input>();
		void reset();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindowWatcher_Input,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowManagement::IWindowWatcher_Input,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionModel,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionModel,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionRelativePositionSetting,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionRelativePositionSetting,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionsSetting,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionsSetting,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IFullscreenPresenterSetting,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IFullscreenPresenterSetting,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::ISizeSetting,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::ISizeSetting,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::ISupportedPresenterSettings,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::ISupportedPresenterSettings,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IViewAdjacentPositionSetting,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IViewAdjacentPositionSetting,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IViewRelativePositionPreferences,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IViewRelativePositionPreferences,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IViewRelativePositionSetting,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IViewRelativePositionSetting,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentModel,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentModel,err_exception_policy>(Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentModel *);
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentModel,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentModelBatch,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentModelBatch,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessApplication,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessApplication,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessConfiguration,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessConfiguration,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessConfiguration,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessConfiguration,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessManager,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessManager,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessProfile,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessProfile,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessUserInfo,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessUserInfo,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::CapabilityAccess::IAppLaunchCapabilityAccess,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::CapabilityAccess::IAppLaunchCapabilityAccess,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::CapabilityAccess::IAppLaunchCapabilityAccessStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::CapabilityAccess::IAppLaunchCapabilityAccessStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,err_exception_policy> & operator=(Windows::Internal::ComposableShell::ITreeNode *);
		~com_ptr_t<Windows::Internal::ComposableShell::ITreeNode,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IIconFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IIconFactory,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IIconFactoryStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IIconFactoryStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IRootSwitchItem,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItem,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSink,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSink,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItemSort,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItemSort,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IThumbnailFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IThumbnailFactory,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::IBrokeredTabAppPolicySettings,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::IBrokeredTabAppPolicySettings,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,err_exception_policy> & operator=(Windows::Internal::ComposableShell::Tabs::IShellTab *);
		com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,err_exception_policy>(Windows::Internal::ComposableShell::Tabs::IShellTab *);
		com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,err_exception_policy><IInspectable>(IInspectable *,wistd::integral_constant<char,0>);
		void copy_to<IInspectable>(IInspectable * *);
		void copy_to<Windows::Internal::ComposableShell::Tabs::IShellTab>(Windows::Internal::ComposableShell::Tabs::IShellTab * *);
		void reset();
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTab,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabCommand,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabCommand,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,err_exception_policy>(Windows::Internal::ComposableShell::Tabs::IShellTabGroup *);
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabGroup,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabImage,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::IShellTabImage,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabController,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabController,err_exception_policy> & operator=(Windows::Internal::ComposableShell::Tabs::ITabController *);
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabController,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabDataModel,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabDataModel,err_exception_policy> & operator=(Windows::Internal::ComposableShell::Tabs::ITabDataModel *);
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabDataModel,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher,err_exception_policy>
	{
		void reset();
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabDroppedEventArgs,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabDroppedEventArgs,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::TreeNodeBase::ParentEdge,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::TreeNodeBase::ParentEdge,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Data::Activities::IActivityIndexer,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Data::Activities::IActivityIndexer,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResultsFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResultsFactory,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Data::Activities::ITaskDataCacheBroker,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Data::Activities::ITaskDataCacheBroker,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Data::Activities::IViewActiveActivityManager,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Data::Activities::IViewActiveActivityManager,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,err_exception_policy>(Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification *);
		~com_ptr_t<Windows::Internal::FamilySafety::AppLimits::IAppStateChangeNotification,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::FamilySafety::AppLimits::IAppStateManager,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::FamilySafety::AppLimits::IAppStateManager,err_exception_policy>(Windows::Internal::FamilySafety::AppLimits::IAppStateManager *);
		~com_ptr_t<Windows::Internal::FamilySafety::AppLimits::IAppStateManager,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::FamilySafety::AppLimits::IAppUsageTracker,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::FamilySafety::AppLimits::IAppUsageTracker,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::BlueLightReduction::IBlueLightReductionManager,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::BlueLightReduction::IBlueLightReductionManager,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::CustomShell::ICustomShellExperience,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::CustomShell::ICustomShellExperience,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::CustomShell::ICustomShellExperienceRepository,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::CustomShell::ICustomShellExperienceRepository,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Experience::IShellExperienceManagerFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Experience::IShellExperienceManagerFactory,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Experience::IShellFeedsExperienceManager,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Experience::IShellFeedsExperienceManager,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Experience::ITabExperienceManager,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Experience::ITabExperienceManager,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Experience::ITitleBar,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Experience::ITitleBarFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Experience::ITitleBarFactory,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Holographic::IHolographicForegroundAssistant,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Holographic::IHolographicForegroundAssistant,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Holographic::IHolographicViewHostItemHistory,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Holographic::IHolographicViewHostItemHistory,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,err_failfast_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,err_failfast_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,err_returncode_policy>
	{
		void attach(Windows::Internal::Shell::Holographic::IViewHostItem *);
		~com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Holographic::IVirtualMonitorSlateHost,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Holographic::IVirtualMonitorSlateHost,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem,err_failfast_policy>
	{
		com_ptr_t<Windows::Internal::Shell::Holographic::IViewHostItem,err_failfast_policy> query<Windows::Internal::Shell::Holographic::IViewHostItem>();
		~com_ptr_t<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem,err_failfast_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Multitasking::Desktop::IDesktopIconFactoryStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Multitasking::Desktop::IDesktopIconFactoryStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::ShellLauncher::IShellLauncherManager,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::ShellLauncher::IShellLauncherManager,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewTitleChangeListener,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::AppViewTitleChangeListener,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewExecutionData,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewExecutionData,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewExecutionDataFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewExecutionDataFactory,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeData,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeData,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeDataFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeDataFactory,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IClipboardSignalListenerFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IClipboardSignalListenerFactory,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::ISnapSignalData,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::ISnapSignalData,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter,err_exception_policy> & operator=(Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter *);
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataArbiter,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,err_exception_policy>
	{
		void reset();
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::ITaskDataListener,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceData,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceData,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceDataFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceDataFactory,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::UserPresenceListener,err_exception_policy>
	{
		void copy_to(_GUID const &,void * *);
		~com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::UserPresenceListener,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs,err_exception_policy><ViewEventArgsForWindowingSettings>(ViewEventArgsForWindowingSettings *,wistd::integral_constant<char,0>);
		~com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState,err_exception_policy> query<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>();
		com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,err_exception_policy>(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
		void copy_to<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
		void reset();
		~com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowWrapper,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowWrapper,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,err_exception_policy> & operator=(Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings *);
		com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,err_exception_policy>(com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,err_exception_policy> const &);
		~com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettings,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettingsArgs,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Shell::ViewManagerInterop::IWindowingEnvironmentSettingsArgs,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::ShellLauncher::IShellLauncherProfile,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::ShellLauncher::IShellLauncherProfile,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::StateRepository::IApplication,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::StateRepository::IApplication,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::StateRepository::IApplicationResourceResolver,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::StateRepository::IApplicationResourceResolver,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::StateRepository::IApplicationResourceResolverStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::StateRepository::IApplicationResourceResolverStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::StateRepository::IApplicationStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::StateRepository::IApplicationStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy>
	{
		com_ptr_t<Windows::Storage::Streams::IBufferByteAccess,err_exception_policy> query<Windows::Storage::Streams::IBufferByteAccess>();
		~com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Storage::Streams::IBufferByteAccess,err_exception_policy>
	{
		~com_ptr_t<Windows::Storage::Streams::IBufferByteAccess,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Storage::Streams::IRandomAccessStream,err_exception_policy>
	{
		~com_ptr_t<Windows::Storage::Streams::IRandomAccessStream,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Storage::Streams::IRandomAccessStreamReferenceStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Storage::Streams::IRandomAccessStreamReferenceStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::System::ILauncherOptions2,err_failfast_policy>
	{
		com_ptr_t<IObjectWithSite,err_failfast_policy> query<IObjectWithSite>();
		~com_ptr_t<Windows::System::ILauncherOptions2,err_failfast_policy>();
	};

	struct com_ptr_t<Windows::System::ILauncherStatics,err_returncode_policy>
	{
		~com_ptr_t<Windows::System::ILauncherStatics,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::System::Threading::IThreadPoolTimer,err_exception_policy>
	{
		void reset();
	};

	struct com_ptr_t<Windows::System::Threading::IThreadPoolTimerStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::System::Threading::IThreadPoolTimerStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::UI::Composition::ICompositionBrush,err_exception_policy>
	{
		~com_ptr_t<Windows::UI::Composition::ICompositionBrush,err_exception_policy>();
	};

	struct com_ptr_t<Windows::UI::Composition::ICompositionSurfaceBrush,err_exception_policy>
	{
		com_ptr_t<Windows::UI::Composition::ICompositionBrush,err_exception_policy> query<Windows::UI::Composition::ICompositionBrush>();
		~com_ptr_t<Windows::UI::Composition::ICompositionSurfaceBrush,err_exception_policy>();
	};

	struct com_ptr_t<Windows::UI::Composition::ICompositor,err_exception_policy>
	{
		~com_ptr_t<Windows::UI::Composition::ICompositor,err_exception_policy>();
	};

	struct com_ptr_t<Windows::UI::Composition::ISpriteVisual,err_exception_policy>
	{
		com_ptr_t<Windows::UI::Composition::IVisual,err_exception_policy> query<Windows::UI::Composition::IVisual>();
		~com_ptr_t<Windows::UI::Composition::ISpriteVisual,err_exception_policy>();
	};

	struct com_ptr_t<Windows::UI::Composition::IVisual,err_exception_policy>
	{
		~com_ptr_t<Windows::UI::Composition::IVisual,err_exception_policy>();
	};

	struct com_ptr_t<Windows::UI::Xaml::Media::ILoadedImageSurface,err_exception_policy>
	{
		~com_ptr_t<Windows::UI::Xaml::Media::ILoadedImageSurface,err_exception_policy>();
	};

	struct com_ptr_t<Windows::UI::Xaml::Media::ILoadedImageSurfaceStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::UI::Xaml::Media::ILoadedImageSurfaceStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::UI::Xaml::Media::Imaging::IWriteableBitmap,err_exception_policy>
	{
		~com_ptr_t<Windows::UI::Xaml::Media::Imaging::IWriteableBitmap,err_exception_policy>();
	};

	struct com_ptr_t<Windows::UI::Xaml::Media::Imaging::IWriteableBitmapFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::UI::Xaml::Media::Imaging::IWriteableBitmapFactory,err_exception_policy>();
	};

	struct critical_section
	{
		~critical_section();
	};

	namespace details
	{
		class AsyncEventInvocationPolicy<1>
		{
		protected:
			void HandleAsyncEventInvoke(srwlock &,AsyncEventWorkQueue &);
		};

		struct DestroyThreadPoolTimer<SystemThreadPoolMethods,0>
		{
			static void Destroy(_TP_TIMER *);
		};

		struct DestroyThreadPoolTimer<SystemThreadPoolMethods,1>
		{
			static void Destroy(_TP_TIMER *);
		};

		struct DestroyThreadPoolWait<0>
		{
			static void Destroy(_TP_WAIT *);
		};

		struct DestroyThreadPoolWork<2>
		{
			static void Destroy(_TP_WORK *);
		};

		struct DummyUnknown
		{
			DummyUnknown();
			virtual long ContextSensitiveHelp(int);
			virtual long GetClassID(_GUID *);
			virtual long GetWindow(HWND__ * *);
		};

		class EnabledStateManager
		{
			unsigned int EnsureSubscribedToFeatureConfigurationChangesImpl();
			void RecordCachedUsageUnderLock();
			void RecordCachedUsageUnderLock(EnabledStateManager::CachedUsageData const &);
		public:
			void EnsureSubscribedToUsageFlush(void (*)(void *));
			void OnStateChange();
			void OnTimer();
			void SubscribeFeatureStateCacheToConfigurationChanges(wil_details_FeatureStateCache *,wil_FeatureChangeTime,unsigned int);
		};

		class EventInvocationContext<1>
		{
			static void AsyncEventWorkCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_WORK *);
		public:
			EventInvocationContext<1>();
			long RuntimeClassInitialize();
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
			virtual ~EventInvocationContext<1>();
		};

		struct EventInvocationContextProvider<1>
		{
			EventInvocationContextProvider<1>();
			virtual long GetEventInvocationContext(IEventInvocationContext * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct FeatureFunctorHost
		{
			FeatureFunctorHost(unsigned int,DiagnosticsInfo const &);
			virtual long ExceptionThrown(void *);
			virtual long Run(IFunctor &);
			~FeatureFunctorHost();
		};

		class FeatureImpl<__WilFeatureTraits_Feature_20H2_Enablement>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled(ReportingKind);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_20H2_Rollback>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled(ReportingKind);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ActionCenterFlyoutHeight>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ActivitiesInShell>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ActivitiesInTaskView>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AddFullScreenOptionalHandlingToPositioners>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AddSourceWindowFromViewNavigationRequested>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AddSwitchAsyncContextToPositionerActivations>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ApplicationContent>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AppsFolderTaskbarIconLoading>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_BoostPriorityAlwaysOnViewCreation>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_BrowserReplacement>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_CUIPopupHelper>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ClipboardSignalsForActivities>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_CloseWin32ExclusivesOnHide>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_CortanaOnLockOutProcModel>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_DXGI_FullscreenProxyWindowPromotion>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_DesktopGazeXAMLKeyboard>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_DesktopSplashScreenSuppression>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_DesktopSplashScreenSuppression_AllApps>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_DesktopSplashScreenSuppression_WhenWindowExists>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_DesktopTouchImprovementForTabletPosture>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled(ReportingKind);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_EICinTIConDesktop>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_EdgePinnedSecondaryTiles>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_EnableControlOfShowWindowBehavior>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_EyeTracking>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_FamilyAppUsageTracking>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_FamilyAppUsageTrackingAutoStart>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_FeedsCore>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			bool __private_IsEnabled(ReportingKind);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_FeedsTaskbarHeadline>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCachedVariantState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
			wil_details_FeatureStateCache GetCurrentVariantState(int *);
		public:
			Variant_FeedsTaskbarHeadline __private_GetVariant(VariantReportingKind,bool);
			bool __private_IsEnabled(ReportingKind);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
			void ReportVariantUsage(bool,Variant_FeedsTaskbarHeadline,VariantReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_FixZBandChangeRaceCondition>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_FullScreenAnimation>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_FullScreenLightweightDefault>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_GestureCursorMovement>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_GifSuggestionOnDesktop>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_HolographicCoreShellTLAVMOnOasis>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_HolographicDesktopHotkeyFunctionalityHiding>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_HolographicDesktopMultitaskingUXHiding>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_HolographicHShellTaskmanOverride>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_HolographicUserExperiences>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_HolographicWin32Slates>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_IngestInputApp>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_InputAppConsumesUdk>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_JumpListCenntennialActivationForegroundFix>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_JumpListV3>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_KioskPositioner>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LIACoreNavigationClient>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LazyApplyWindowGroupTemplate>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LightingWhenLidClosed>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LightweightWindows>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LivePreviewForTabs>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void AssertEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LockExpMgr_AppHostingModel>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LockReliability_LongLiveLockApp>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LowAnimationsOnBatterySaver>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_MdmSupportForEdu>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_MeetNow>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_NightLightOnWCOS>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_NormalizeTitlebarHeight>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_OEMWebsitePinning>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_PDCShellPhaseUseWNF>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_PeopleBar>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_PresentationStateBugFix>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ProgrammableTaskbarDefaultPins>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_RealtimeEnticement>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ResizeShellExperienceViews>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ResizeWin32SlatesOnStart>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_RespectEdgeAllowFullScreenPolicy>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SearchAndCortanaSplit>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCachedVariantState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
			wil_details_FeatureStateCache GetCurrentVariantState(int *);
		public:
			Variant_SearchAndCortanaSplit __private_GetVariant(VariantReportingKind,bool);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
			void ReportVariantUsage(bool,Variant_SearchAndCortanaSplit,VariantReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SearchInAllMarkets>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Servicing_AltTabChangesOrder_29847756>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			bool __private_IsEnabledPreCheck();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Servicing_BrowserReplacement_SpartanDeprecation>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Servicing_CoreInputViewAPIKeyboardInvocation_29705285>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Servicing_CortanaButtonFix_28998388>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Servicing_CortanaStoreOffer_28998340>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Servicing_ExplorerHang_31007923>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Servicing_ProxyWindowsToDesktop_29787237>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Servicing_RestartManager_25418678>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Servicing_SkipInitializationIfDestroyed_30958024>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SettingsSearchCFR>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ShellUndockedPackage>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SiHostLessExplorer>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SignalManager>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SmartInsights>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_StartInWin32Host>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SuggestionUIOnDesktop>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SurfaceHubProximalAppLaunch>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SurfaceHubRemoveSidebars_Shell>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SystemLightTheme>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TSF3CHSIME>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TabIdStability>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TabShell>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TabShellAutoTabbingPreference>
		{
			wil_details_FeatureStateCache GetCachedVariantState();
			wil_details_FeatureStateCache GetCurrentVariantState(int *);
		public:
			void ReportVariantUsage(bool,Variant_TabShellAutoTabbingPreference,VariantReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TabShellSearch>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TabShellWinRtApi>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TabThumbnailsRefreshedOnDemand>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TaskViewWarmLaunch>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TaskbarSuggestions>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TouchKeyboardExperienceManager>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_UseNewSearchAndCortanaApps>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_UseStoreECApp>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_VAILInitialPositioning>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ViewClosingAPIs_CloseRequested_Desktop>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ViewClosingAPIs_TryConsolidate_Desktop>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ViewPresentationMode>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_VirtualDesktopCustomNames>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_VisionReactive_OnScreen>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_VoiceAssistantPositioner>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WindowManagerDesktop>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WindowSnapSignalsForActivities>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WindowTabHost>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			bool __private_IsEnabled(ReportingKind);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WindowingEnvironmentsDesktop>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WindowsInkWorkspaceImprovements>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WthTaskbarTabs>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			bool __private_IsEnabled(ReportingKind);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_XamlAllUpView>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_XamlAltTabView>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_XamlAltTabWin32>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_XamlExplorerHost>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_XamlShowHideAnimations>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_XamlSnapAssistView>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_XamlTaskbar>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureStateManager
		{
			bool EnsureStateData();
			bool EnsureSubscribedToStateChangesUnderLock();
			void EnsureSubscribedToProcessWideUsageFlushUnderLock();
		public:
			void OnStateChange();
			void QueueBackgroundSRUMUsageReporting(unsigned int,unsigned short,unsigned int);
			void RecordFeatureError(unsigned int,FEATURE_ERROR const &);
			void RecordFeatureUsage(unsigned int,wil_details_ServiceReportingKind,unsigned __int64);
			void SubscribeToEnabledStateChanges(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
			void SubscribeToUsageFlush(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *));
			~FeatureStateManager();
		};

		struct MakeSafelyCopyablTraitsIUnknown<PresentationReadyChangedEventArgs *>
		{
			static MakeSafelyCopyableResult<Microsoft::WRL::ComPtr<PresentationReadyChangedEventArgs>,PresentationReadyChangedEventArgs *> MakeSafelyCopyable(PresentationReadyChangedEventArgs *);
		};

		struct MakeSafelyCopyablTraitsIUnknown<ViewHostViewModeChangeRequestedEventArgs *>
		{
			static MakeSafelyCopyableResult<Microsoft::WRL::ComPtr<ViewHostViewModeChangeRequestedEventArgs>,ViewHostViewModeChangeRequestedEventArgs *> MakeSafelyCopyable(ViewHostViewModeChangeRequestedEventArgs *);
		};

		struct MakeSafelyCopyablTraitsIUnknown<ViewSizePreferencesChangedEventArgs *>
		{
			static MakeSafelyCopyableResult<Microsoft::WRL::ComPtr<ViewSizePreferencesChangedEventArgs>,ViewSizePreferencesChangedEventArgs *> MakeSafelyCopyable(ViewSizePreferencesChangedEventArgs *);
		};

		struct MakeSafelyCopyableResult<Microsoft::WRL::ComPtr<StateChangedEventArgsImpl>,StateChangedEventArgsImpl *>
		{
			MakeSafelyCopyableResult<Microsoft::WRL::ComPtr<StateChangedEventArgsImpl>,StateChangedEventArgsImpl *>(MakeSafelyCopyableResult<Microsoft::WRL::ComPtr<StateChangedEventArgsImpl>,StateChangedEventArgsImpl *> const &);
		};

		struct RequiredFeatures<Feature<__WilFeatureTraits_Feature_20H2_Enablement> >
		{
			static bool IsEnabled();
		};

		struct ScopeExitFn<<lambda_3c6b3245d56e94aa13f25a05674a2632> >
		{
			~ScopeExitFn<<lambda_3c6b3245d56e94aa13f25a05674a2632> >();
		};

		struct ScopeExitFn<<lambda_6d3cf3456c3ee4f01c09ac84ae934c65> >
		{
			~ScopeExitFn<<lambda_6d3cf3456c3ee4f01c09ac84ae934c65> >();
		};

		struct ScopeExitFn<<lambda_88ed6296b11675e8a4b332e98eebf27c> >
		{
			~ScopeExitFn<<lambda_88ed6296b11675e8a4b332e98eebf27c> >();
		};

		struct ScopeExitFn<<lambda_8f7c4272537cd39965ba6040b29ee2e3> >
		{
			~ScopeExitFn<<lambda_8f7c4272537cd39965ba6040b29ee2e3> >();
		};

		struct ScopeExitFn<<lambda_bf0c31f178687dd5d0af47a31b5c5700> >
		{
			~ScopeExitFn<<lambda_bf0c31f178687dd5d0af47a31b5c5700> >();
		};

		struct ScopeExitFn<<lambda_dd8f4aabae2ca26411facba6a281aa4a> >
		{
			~ScopeExitFn<<lambda_dd8f4aabae2ca26411facba6a281aa4a> >();
		};

		struct StagingFailureInformation
		{
			StagingFailureInformation(FailureInfo const &,DiagnosticsInfo const &,void *);
		};

		class StoredCallContextInfo
		{
			void AssignMessage(unsigned short const *);
		public:
			void ClearMessage();
			void SetMessage(char const *,char *);
		};

		class ThreadFailureCallbackHolder
		{
			static long volatile s_telemetryId;
		public:
			ThreadFailureCallbackHolder(IFailureCallback *,CallContextInfo *,bool);
			static bool GetThreadContext(FailureInfo *,ThreadFailureCallbackHolder *,char *,unsigned __int64);
			void SetWatching(bool);
			void StartWatching();
			void StopWatching();
		};

		namespace in1diag3
		{
			bool Log_HrIfMsg(void *,unsigned int,char const *,long,bool,char const *,...);
			long Log_CaughtException(void *,unsigned int,char const *);
			long Log_Hr(void *,unsigned int,char const *,long);
			long Log_IfFailedMsg(void *,unsigned int,char const *,long,char const *,...);
			long Log_IfFailedWithExpected(void *,unsigned int,char const *,long,unsigned int,...);
			long Return_CaughtException(void *,unsigned int,char const *);
			long Return_GetLastError(void *,unsigned int,char const *);
			long Return_NtStatus(void *,unsigned int,char const *,long);
			long Return_Win32(void *,unsigned int,char const *,unsigned long);
			unsigned long Log_Win32(void *,unsigned int,char const *,unsigned long);
			void FailFastImmediate_Unexpected();
			void FailFast_Hr(void *,unsigned int,char const *,long);
			void FailFast_Unexpected(void *,unsigned int,char const *);
			void Return_Hr(void *,unsigned int,char const *,long);
			void Return_HrMsg(void *,unsigned int,char const *,long,char const *,...);
			void Throw_GetLastError(void *,unsigned int,char const *);
			void Throw_Hr(void *,unsigned int,char const *,long);
			void _FailFastImmediate_Unexpected();
			void _FailFast_GetLastError(void *,unsigned int,char const *);
			void _FailFast_Hr(void *,unsigned int,char const *,long);
			void _FailFast_Unexpected(void *,unsigned int,char const *);
			void _Log_GetLastError(void *,unsigned int,char const *);
			void _Log_Hr(void *,unsigned int,char const *,long);
			void _Log_NtStatus(void *,unsigned int,char const *,long);
			void _Log_NullAlloc(void *,unsigned int,char const *);
			void _Log_Win32(void *,unsigned int,char const *,unsigned long);
			void _Throw_GetLastError(void *,unsigned int,char const *);
			void _Throw_Hr(void *,unsigned int,char const *,long);
			void _Throw_NullAlloc(void *,unsigned int,char const *);
			void _Throw_Win32(void *,unsigned int,char const *,unsigned long);
		};

		struct registry_watcher_state
		{
			void ReleaseFromCallback(bool);
		};

		class shared_buffer
		{
			void assign(long *,unsigned __int64);
		public:
			bool create(void const *,unsigned __int64);
			void reset();
		};

		struct shared_object<ActivityBase<AppCloselogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppCloselogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<AppUsageTelemetry,1,70368744177664,5,33554432,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppUsageTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<ApplicationViewManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ApplicationViewManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<ApplicationViewManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ApplicationViewManagementLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<ApplicationViewManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ApplicationViewManagementLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<CAppManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<CAppManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<CAppManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<CAppManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<CAppManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<CAppManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<CAppManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CAppManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<CommonPeopleTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CommonPeopleTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<CommonPeopleTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CommonPeopleTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<CommonPeopleTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CommonPeopleTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<CortanaProactiveLogging,0,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<CortanaProactiveLogging,1,0,0,4,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<CortanaProactiveLogging,1,0,4,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<CortanaProactiveLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CortanaProactiveLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<DragDropSimulatorTraceLogging,1,70368744177664,5,33554432,_TlgReflectorTag_Param0IsProviderType>::ActivityData<DragDropSimulatorTraceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<HolographicPositionerProvider,0,0,4,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<HolographicPositionerProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<HolographicPositionerProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<HolographicPositionerProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<ImmersiveIconsLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ImmersiveIconsLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<JumpViewProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<JumpViewProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<JumpViewProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<JumpViewProvider,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<JumpViewProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<JumpViewProvider,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<LauncherTelemetryLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<LockScreenServiceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LockScreenServiceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<MeetNowTelemetryLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<MeetNowTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<NotificationCenterLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<NotificationCenterLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<NotificationCenterLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<NotificationCenterLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<PenWorkspaceBrokerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<PenWorkspaceBrokerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<QuickConnectLoggingProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<QuickConnectLoggingProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<QuickConnectLoggingProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<QuickConnectLoggingProvider,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<QuickConnectLoggingProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<QuickConnectLoggingProvider,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<StartMenuExperienceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<StartMenuExperienceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TabShellTelemetryProvider,0,0,3,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TabShellTelemetryProvider,0,0,4,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TabShellTelemetryProvider,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TabShellTelemetryProvider,1,0,3,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TabShellTelemetryProvider,1,0,4,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TabShellTelemetryProvider,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TabShellTelemetryProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TabShellTelemetryProvider,1,70368744177664,4,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<TabShellTelemetryProvider,1,70368744177664,4,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<TabShellTelemetryProvider,1,70368744177664,4,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<TabShellTelemetryProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TabShellTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TaskFlowDataEngineTelemetry,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TaskFlowDataEngineTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TaskbarLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TaskbarLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<TouchKeyboardExperienceTraceLogging,1,0,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<TouchKeyboardExperienceTraceLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TouchKeyboardExperienceTraceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TouchpadControllerExperienceManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TouchpadControllerExperienceManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<TrayNotificationAreaLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<TrayNotificationAreaLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<ViewManagerInteropLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ViewManagerInteropLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<ViewManagerInteropLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ViewManagerInteropLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<ViewManagerInteropLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ViewManagerInteropLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<Win32BackedViewHostItemTelemetryProvider,0,0,4,33554432,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Win32BackedViewHostItemTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<Win32BackedViewHostItemTelemetryProvider,1,35184372088832,5,33554432,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Win32BackedViewHostItemTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<Win32BackedViewHostItemTelemetryProvider,1,35184372088832,5,33554432,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Win32BackedViewHostItemTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<Win32BackedViewHostItemTelemetryProvider,1,35184372088832,5,33554432,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Win32BackedViewHostItemTelemetryProvider,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,0,4,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<WindowManagementLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,0,5,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,70368744177664,4,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,70368744177664,4,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,70368744177664,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<XamlSwitcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<XamlSwitcherLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<XamlSwitcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<XamlSwitcherLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<XamlSwitcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<XamlSwitcherLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<XamlSwitcherLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<XamlSwitcherLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		namespace static_lazy<AppCloseTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<AppCloselogging>
		{
			AppCloselogging * get(void (*)());
		};

		struct static_lazy<AppUsageTelemetry>
		{
			AppUsageTelemetry * get(void (*)());
		};

		struct static_lazy<BlueLightReductionLogging>
		{
			BlueLightReductionLogging * get(void (*)());
		};

		struct static_lazy<CAppLifeCycle_UILogging>
		{
			CAppLifeCycle_UILogging * get(void (*)());
		};

		struct static_lazy<CAppManagerTelemetry>
		{
			CAppManagerTelemetry * get(void (*)());
		};

		struct static_lazy<CCriticalFailureLogging>
		{
			CCriticalFailureLogging * get(void (*)());
		};

		struct static_lazy<CCriticalFailureTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			CCriticalFailureTelemetry * get(void (*)());
		};

		namespace static_lazy<CommonPeopleTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<CommonPeopleTelemetryLogging>
		{
			CommonPeopleTelemetryLogging * get(void (*)());
		};

		struct static_lazy<CustomShellHostTelemetry>
		{
			CustomShellHostTelemetry * get(void (*)());
		};

		struct static_lazy<DesktopPositionerTelemetry>
		{
			DesktopPositionerTelemetry * get(void (*)());
		};

		struct static_lazy<DragDropSimulatorTraceLogging>
		{
			DragDropSimulatorTraceLogging * get(void (*)());
		};

		struct static_lazy<FeedsMicrosoftTelemetryProvider>
		{
			FeedsMicrosoftTelemetryProvider * get(void (*)());
		};

		namespace static_lazy<FullScreenPositionerLogging>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<FullScreenPositionerTraceLogging>
		{
			FullScreenPositionerTraceLogging * get(void (*)());
		};

		struct static_lazy<HolographicPositionerProvider>
		{
			HolographicPositionerProvider * get(void (*)());
		};

		struct static_lazy<IamTraceLogging>
		{
			IamTraceLogging * get(void (*)());
		};

		struct static_lazy<ImmersiveIconsLogging>
		{
			ImmersiveIconsLogging * get(void (*)());
		};

		struct static_lazy<JumpViewProvider>
		{
			JumpViewProvider * get(void (*)());
		};

		struct static_lazy<LockScreenServiceLogging>
		{
			LockScreenServiceLogging * get(void (*)());
		};

		struct static_lazy<MeetNowTelemetryLogging>
		{
			MeetNowTelemetryLogging * get(void (*)());
		};

		struct static_lazy<MultitaskingViewTelemetry>
		{
			MultitaskingViewTelemetry * get(void (*)());
		};

		struct static_lazy<PenWorkspaceBrokerLogging>
		{
			PenWorkspaceBrokerLogging * get(void (*)());
		};

		namespace static_lazy<PenWorkspaceBrokerTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		namespace static_lazy<PerfTrack::AppLaunchTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<PerfTrack::AppSwitchTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			PerfTrack::AppSwitchTelemetry * get(void (*)());
		};

		struct static_lazy<QuickConnectLoggingProvider>
		{
			QuickConnectLoggingProvider * get(void (*)());
		};

		struct static_lazy<ScalingCompatLogging>
		{
			ScalingCompatLogging * get(void (*)());
		};

		namespace static_lazy<ScalingCompatTelemetry::CScalingCompatTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<ShellScreenClippingLogging>
		{
			ShellScreenClippingLogging * get(void (*)());
		};

		struct static_lazy<ShoulderTapExperienceManagerLogging>
		{
			ShoulderTapExperienceManagerLogging * get(void (*)());
		};

		namespace static_lazy<ShoulderTapExperienceManagerTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<StartWindowTelemetry>
		{
			StartWindowTelemetry * get(void (*)());
		};

		struct static_lazy<TabCompanionLogger>
		{
			TabCompanionLogger * get(void (*)());
		};

		struct static_lazy<TabShellTelemetryProvider>
		{
			TabShellTelemetryProvider * get(void (*)());
		};

		namespace static_lazy<TabViewManagerMeasures>
		{
			struct Completer
			{
				~Completer();
			};

		};

		namespace static_lazy<TabViewManagerTraceLogging>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<TabletModeTelemetry>
		{
			TabletModeTelemetry * get(void (*)());
		};

		struct static_lazy<TaskbarLogging>
		{
			TaskbarLogging * get(void (*)());
		};

		namespace static_lazy<TouchKeyboardExperienceTelemetryLogger>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<TouchKeyboardExperienceTraceLogging>
		{
			TouchKeyboardExperienceTraceLogging * get(void (*)());
		};

		struct static_lazy<TouchpadControllerExperienceManagerLogging>
		{
			TouchpadControllerExperienceManagerLogging * get(void (*)());
		};

		struct static_lazy<TrayNotificationAreaLogging>
		{
			TrayNotificationAreaLogging * get(void (*)());
		};

		struct static_lazy<ViewManagerInteropLogging>
		{
			ViewManagerInteropLogging * get(void (*)());
		};

		namespace static_lazy<ViewManagerInteropTabTraceLogging>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<VoiceAssistantPositionerTelemetry>
		{
			VoiceAssistantPositionerTelemetry * get(void (*)());
		};

		struct static_lazy<Win32BackedViewHostItemTelemetryProvider>
		{
			Win32BackedViewHostItemTelemetryProvider * get(void (*)());
		};

		struct static_lazy<Windows::Internal::Shell::Chaining::ChainLinkTraceLogging>
		{
			Windows::Internal::Shell::Chaining::ChainLinkTraceLogging * get(void (*)());
		};

		struct static_lazy<XamlSwitcherLogging>
		{
			XamlSwitcherLogging * get(void (*)());
		};

		namespace static_lazy<XamlSwitcherTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct string_maker<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >
		{
			long make(unsigned short const *,unsigned __int64);
		};

		struct weak_query_policy
		{
			static long query(IWeakReference *,_GUID const &,void * *);
		};

		struct wnf_subscription_state<_SEB_EVENT_HEADER>
		{
			virtual ~wnf_subscription_state<_SEB_EVENT_HEADER>();
		};

		struct wnf_subscription_state<empty_wnf_state>
		{
			virtual ~wnf_subscription_state<empty_wnf_state>();
		};

		struct wnf_subscription_state<unsigned char [32]>
		{
			virtual ~wnf_subscription_state<unsigned char [32]>();
		};

		struct wnf_subscription_state<unsigned char>
		{
			virtual ~wnf_subscription_state<unsigned char>();
		};

		struct wnf_subscription_state<unsigned long>
		{
			virtual ~wnf_subscription_state<unsigned long>();
			void InternalCallback<unsigned long>(unsigned long const *,unsigned long);
		};

		struct wnf_subscription_state_base
		{
			virtual ~wnf_subscription_state_base();
		};

		FEATURE_ENABLED_STATE WilApiImpl_GetFeatureEnabledState(unsigned int,FEATURE_CHANGE_TIME,int *);
		Platform::String ^ GetPlatformExceptionMessage(Platform::Exception ^);
		bool (* g_pfnGetModuleInformation)(void *,unsigned int *,char *,unsigned __int64);
		bool GetModuleInformation(void *,unsigned int *,char *,unsigned __int64);
		bool GetModuleInformationFromAddress(void *,unsigned int *,char *,unsigned __int64);
		bool IsFeatureConfigured(wil_FeatureState *,unsigned int,bool,wil_FeatureStore,int *);
		bool g_processShutdownInProgress;
		bool g_resultMessageCallbackSet;
		char const * (* g_pfnGetModuleName)();
		char const * GetCurrentModuleName();
		details_abi::ProcessLocalStorage<details_abi::ProcessLocalData> g_processLocalData;
		details_abi::ThreadLocalStorage<details::ThreadFailureCallbackHolder *> * g_pThreadFailureCallbacks;
		details_abi::ThreadLocalStorage<details::ThreadFailureCallbackHolder *> g_threadFailureCallbacks;
		int RecordException(long);
		int RecordFailFast(long);
		int RecordLog(long);
		int RecordReturn(long);
		long (* g_pfnRtlDisownModuleHeapAllocation)(void *,void *);
		long (* g_pfnRunFunctorWithExceptionFilter)(details::IFunctor &,details::IFunctorHost &,void *);
		long GetLastErrorFailHr();
		long GetWeakReference<AppViewDataSourceAdapter>(AppViewDataSourceAdapter *,IWeakReference * *);
		long GetWeakReference<TabViewManager>(TabViewManager *,IWeakReference * *);
		long GetWeakReference<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem>(Windows::Internal::Shell::Holographic::Win32BackedViewHostItem *,IWeakReference * *);
		long NtStatusToHr(long);
		long RecognizeCaughtExceptionFromCallback(unsigned short *,unsigned __int64);
		long RecognizeCaughtExceptionFromCallback(wchar_t *,unsigned __int64);
		long ReportFailure_CaughtException(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,SupportedExceptions);
		long ReportFailure_CaughtExceptionCommon(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,unsigned short *,unsigned __int64,SupportedExceptions);
		long ReportFailure_GetLastErrorHr(void *,unsigned int,char const *,char const *,char const *,void *,FailureType);
		long ReportFailure_NtStatus(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long);
		long ReportFailure_Win32(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,unsigned long);
		long ResultFromCaughtExceptionInternal(unsigned short *,unsigned __int64,bool *);
		long ResultFromCaughtException_CppWinRt(unsigned short *,unsigned __int64,bool *);
		long ResultFromCaughtException_WinRt(wchar_t *,unsigned __int64,bool *);
		long RtlDisownModuleHeapAllocation(void *,void *);
		long RunFunctor(details::IFunctor &,details::IFunctorHost &);
		long RunFunctorWithExceptionFilter(details::IFunctor &,details::IFunctorHost &,void *);
		long StringCchPrintfA(char *,unsigned __int64,char const *,...);
		long WaitForCompletion<Windows::Foundation::IAsyncOperation<Windows::Devices::Lights::LampArray *> *>(Windows::Foundation::IAsyncOperation<Windows::Devices::Lights::LampArray *> *,tagCOWAIT_FLAGS,unsigned long,bool *);
		long WaitForCompletion<Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *>(Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *,tagCOWAIT_FLAGS,unsigned long,bool *);
		long WaitForCompletion<Windows::Foundation::IAsyncOperation<Windows::Internal::Shell::Experience::TitleBarFactory *> *>(Windows::Foundation::IAsyncOperation<Windows::Internal::Shell::Experience::TitleBarFactory *> *,tagCOWAIT_FLAGS,unsigned long,bool *);
		long WaitForCompletion<Windows::Foundation::IAsyncOperation<bool> *>(Windows::Foundation::IAsyncOperation<bool> *,tagCOWAIT_FLAGS,unsigned long,bool *);
		long make_unique_winrt_event_token<err_returncode_policy,Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker,long ( Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> *>(Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker *,long ( Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::ShellTabId> *,unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker> *);
		long make_unique_winrt_event_token<err_returncode_policy,Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker,long ( Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *> *>(Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker *,long ( Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabTransferEventBroker *,Windows::Internal::ComposableShell::Tabs::TabDroppedEventArgs *> *,unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker> *);
		long str_vprintf_nothrow<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > &,unsigned short const *,char * &);
		shutdown_aware_object<details::EnabledStateManager> g_enabledStateManager;
		shutdown_aware_object<details::FeatureStateManager> g_featureStateManager;
		unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter> make_unique_winrt_event_token<err_exception_policy,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter,long ( Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *>(Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter *,long ( Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::BrokeredViewTabConverter *,Windows::Internal::ComposableShell::Tabs::ViewTabEventArgs *> *);
		unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher> make_unique_winrt_event_token<err_exception_policy,Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher,long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabHostedAppChangedEventArgs *> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabHostedAppChangedEventArgs *> *>(Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher *,long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabHostedAppChangedEventArgs *> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabHostedAppChangedEventArgs *> *);
		unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher> make_unique_winrt_event_token<err_exception_policy,Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher,long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *> *>(Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher *,long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabPropertyChangedEventArgs *> *);
		unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher> make_unique_winrt_event_token<err_exception_policy,Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher,long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs *> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs *> *>(Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher *,long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs *> *,EventRegistrationToken *),long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(EventRegistrationToken),Windows::Foundation::ITypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher *,Windows::Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs *> *);
		unique_winrt_event_token<Windows::Internal::Shell::Experience::ITitleBarFactoryWatcher> make_unique_winrt_event_token<err_exception_policy,Windows::Internal::Shell::Experience::ITitleBarFactoryWatcher,long ( Windows::Internal::Shell::Experience::ITitleBarFactoryWatcher::*)(Windows::Foundation::IEventHandler<IInspectable *> *,EventRegistrationToken *),long ( Windows::Internal::Shell::Experience::ITitleBarFactoryWatcher::*)(EventRegistrationToken),Windows::Foundation::IEventHandler<IInspectable *> *>(Windows::Internal::Shell::Experience::ITitleBarFactoryWatcher *,long ( Windows::Internal::Shell::Experience::ITitleBarFactoryWatcher::*)(Windows::Foundation::IEventHandler<IInspectable *> *,EventRegistrationToken *),long ( Windows::Internal::Shell::Experience::ITitleBarFactoryWatcher::*)(EventRegistrationToken),Windows::Foundation::IEventHandler<IInspectable *> *);
		unsigned __int64 ResultStringSize(char const *);
		unsigned __int64 ResultStringSize(unsigned short const *);
		unsigned char (* g_pfnDllShutdownInProgress)();
		unsigned char * WriteResultString<char const *>(unsigned char *,unsigned char *,char const *,char const * *);
		unsigned char * WriteResultString<unsigned short const *>(unsigned char *,unsigned char *,unsigned short const *,unsigned short const * *);
		unsigned char RtlDllShutdownInProgress();
		unsigned int EnsureSubscribedToFeatureConfigurationChanges();
		unsigned int WilApiImpl_GetFeatureVariant(unsigned int,FEATURE_CHANGE_TIME,unsigned int *,int *,int *);
		unsigned int WilApi_GetFeatureVariant(unsigned int,FEATURE_CHANGE_TIME,unsigned int *,int *,int *);
		unsigned long (* g_pfnRtlNtStatusToDosErrorNoTeb)(long);
		unsigned long GetLastErrorFail(void *,unsigned int,char const *,char const *,char const *,void *);
		unsigned long ReportFailure_GetLastError(void *,unsigned int,char const *,char const *,char const *,void *,FailureType);
		unsigned long RtlNtStatusToDosErrorNoTeb(long);
		unsigned short * LogStringPrintf(unsigned short *,unsigned short const *,unsigned short const *,...);
		void (* g_pfnDebugBreak)();
		void (* g_pfnGetContextAndNotifyFailure)(FailureInfo *,char *,unsigned __int64);
		void (* g_pfnLoggingCallback)(FailureInfo const &);
		void (* g_pfnOriginateCallback)(FailureInfo const &);
		void (* g_pfnRaiseFailFastException)(_EXCEPTION_RECORD *,_CONTEXT *,unsigned long);
		void (* g_pfnRethrow)();
		void (* g_pfnTelemetryCallback)(bool,FailureInfo const &);
		void (* g_pfnThrowResultException)(FailureInfo const &);
		void * ProcessHeapAlloc(unsigned long,unsigned __int64);
		void CertCloseStoreNoParam(void *);
		void CloseHandle(void *);
		void CryptReleaseContextNoParam(unsigned __int64);
		void DebugBreak();
		void FeatureLoggingHook(unsigned int,FEATURE_LOGGED_TRAITS const *,FEATURE_ERROR const *,int,wil_ReportingKind const *,wil_VariantReportingKind const *,unsigned char,unsigned __int64);
		void FreeProcessHeap(void *);
		void GetContextAndNotifyFailure(FailureInfo *,char *,unsigned __int64);
		void LogFailure(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,unsigned short const *,bool,unsigned short *,unsigned __int64,char *,unsigned __int64,FailureInfo *);
		void MaybeGetExceptionString(Platform::Exception ^,wchar_t *,unsigned __int64);
		void MaybeGetExceptionString(ResultException const &,unsigned short *,unsigned __int64);
		void MaybeGetExceptionString(ResultException const &,wchar_t *,unsigned __int64);
		void MaybeGetExceptionString(std::exception const &,unsigned short *,unsigned __int64);
		void MaybeGetExceptionString(std::exception const &,wchar_t *,unsigned __int64);
		void MaybeGetExceptionString(winrt::hresult_error const &,unsigned short *,unsigned __int64);
		void PrintLoggingMessage(unsigned short *,unsigned __int64,char const *,char *);
		void RecordFeatureUsageCallback(unsigned int,wil_details_ServiceReportingKind,unsigned int,wil_details_FeatureReportingCache *,wil_details_RecordUsageResult *);
		void RecordSRUMFeatureUsage(unsigned int,unsigned int,unsigned int);
		void ReleaseMutex(void *);
		void ReportFailure(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,unsigned short const *,details::ReportFailureOptions);
		void ReportFailure_Hr(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long);
		void ReportFailure_HrMsg(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,char const *,char *);
		void ReportFailure_Msg(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,char const *,char *);
		void ReportFeatureCaughtException(ThreadErrorContext &,unsigned int,DiagnosticsInfo const &,void *);
		void ReportFeatureError(long,ThreadErrorContext &,unsigned int,DiagnosticsInfo const &);
		void ResetEvent(void *);
		void Rethrow();
		void SetEvent(void *);
		void ThrowPlatformException(FailureInfo const &,wchar_t const *);
		void ThrowResultExceptionInternal(FailureInfo const &);
		void UnregisterWilFeatureConfigurationChange(void *);
		void UnsubscribeProcessWideUsageFlush(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
		void UnsubscribeWilWnf(__WIL__WNF_USER_SUBSCRIPTION *);
		void WilApiImpl_RecordFeatureError(unsigned int,FEATURE_ERROR const *);
		void WilApiImpl_RecordFeatureUsage(unsigned int,unsigned int,unsigned int,char const *);
		void WilApiImpl_SubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
		void WilApiImpl_UnsubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
		void WilApi_RecordFeatureUsage(unsigned int,unsigned int,unsigned int,char const *);
		void WilApi_SubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
		void WilApi_UnsubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
		void WilDynamicLoadRaiseFailFastException(_EXCEPTION_RECORD *,_CONTEXT *,unsigned long);
		void WilFailFast(FailureInfo const &);
		void WilRaiseFailFastException(_EXCEPTION_RECORD *,_CONTEXT *,unsigned long);
		void delete_event_watcher_state(details::event_watcher_state *);
		void delete_registry_watcher_state(details::registry_watcher_state *);
		void delete_wnf_subscription_state(details::wnf_subscription_state_base *);
		void release_operation_guard_reference(operation_guard *);
		wchar_t * LogStringPrintf(wchar_t *,wchar_t const *,wchar_t const *,...);
	};

	namespace details_abi
	{
		class FeatureStateData
		{
			void RetrieveUsageUnderLock(UsageIndexes &);
		public:
			bool RecordFeatureError(unsigned int,FEATURE_ERROR const &);
			bool RecordFeatureUsage(unsigned int,wil_details_ServiceReportingKind,unsigned __int64);
			void ProcessShutdown();
			void RecordUsage();
		};

		struct ProcessLocalStorage<ProcessLocalData>
		{
			~ProcessLocalStorage<ProcessLocalData>();
		};

		struct ProcessLocalStorageData<FeatureStateData>
		{
			static long Acquire(char const *,ProcessLocalStorageData<FeatureStateData> * *);
			void Release();
		};

		struct ProcessLocalStorageData<ProcessLocalData>
		{
			static long Acquire(char const *,ProcessLocalStorageData<ProcessLocalData> * *);
			void Release();
			~ProcessLocalStorageData<ProcessLocalData>();
		};

		class RawUsageIndex
		{
			bool RecordUsageInternal(void *,unsigned __int64,void *,unsigned __int64,unsigned int);
			unsigned char * FindInsertionPointOrIncrement(UsageIndexProperty &,unsigned char *,void *,unsigned __int64,unsigned int);
			unsigned char * LowerBound(unsigned char *,unsigned __int64,void *,unsigned __int64);
			unsigned char * SkipValues(UsageIndexProperty &,unsigned char *);
		public:
			RawUsageIndex(unsigned short,unsigned short,CountSize,unsigned short,CountSize);
			bool Iterate(wistd::function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>);
			bool RecordUsage(void *,unsigned __int64,void *,unsigned __int64,unsigned int);
			void SetBuffer(void *,unsigned __int64,unsigned __int64);
			void Swap(RawUsageIndex &);
			~RawUsageIndex();
		};

		class SemaphoreValue
		{
			long CreateFromValueInternal(unsigned short const *,bool,unsigned __int64);
			static long GetValueFromSemaphore(void *,long *);
			static long TryGetValueInternal(unsigned short const *,bool,unsigned __int64 *,bool *);
		public:
			static long TryGetPointer(unsigned short const *,void * *);
			void Destroy();
		};

		struct SerializedFailure
		{
			static bool Serialize(FEATURE_ERROR const &,unsigned __int64 *,void *,unsigned __int64);
		};

		struct SubscriptionList
		{
			SubscriptionList();
			void OnSignaled(srwlock &);
			void SubscribeUnderLock(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
			void Unsubscribe(srwlock &,FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
		};

		struct ThreadLocalData
		{
			bool GetCaughtExceptionError(FailureInfo &,unsigned int,DiagnosticsInfo const *,long,void *);
			bool GetLastError(FailureInfo &,unsigned int,long);
			void Clear();
			void SetLastError(FailureInfo const &);
		};

		struct ThreadLocalFailureInfo
		{
			void Get(FailureInfo &);
			void Set(FailureInfo const &,unsigned int);
		};

		struct ThreadLocalStorage<details::ThreadFailureCallbackHolder *>
		{
			details::ThreadFailureCallbackHolder * * GetLocal(bool);
			~ThreadLocalStorage<details::ThreadFailureCallbackHolder *>();
		};

		struct UsageIndexProperty
		{
			bool Read(unsigned char * &,unsigned char *);
			bool Write(unsigned char * &,unsigned char *);
			int Compare(void *,unsigned __int64);
			unsigned __int64 GetSize();
			void UpdateCount(unsigned int);
		};

		struct UsageIndexes
		{
			UsageIndexes();
			void Record();
			~UsageIndexes();
		};

		struct heap_buffer
		{
			bool ensure(unsigned __int64);
			bool push_back(void const *,unsigned __int64);
			bool reserve(unsigned __int64);
			~heap_buffer();
		};

		details_abi::ProcessLocalStorage<details_abi::ProcessLocalData> * g_pProcessLocalData;
		details_abi::ThreadLocalData * GetThreadLocalDataCache(bool);
		void RecordWnfUsageIndex(__WIL__WNF_STATE_NAME const *,unsigned __int64,details_abi::RawUsageIndex const &);
	};

	namespace iterable_range<Windows::Foundation::Collections::IKeyValuePair<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *> *,err_exception_policy>
	{
		struct iterable_iterator
		{
			iterable_iterator(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<Windows::Internal::ApplicationModel::WindowManagement::AppViewId,Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *> *> *> *);
			~iterable_iterator();
		};

	};

	struct iterable_range_nothrow<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>
	{
		struct iterable_iterator_nothrow
		{
			iterable_range_nothrow<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>::iterable_iterator_nothrow & operator++();
		};

		iterable_range_nothrow<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> *,long *);
	};

	struct last_error_context
	{
		~last_error_context();
	};

	struct manually_managed_shutdown_aware_object<details::EnabledStateManager>
	{
		void construct();
		void destroy();
	};

	struct manually_managed_shutdown_aware_object<details::FeatureStateManager>
	{
		void construct();
		void destroy();
	};

	struct operation_guard
	{
		~operation_guard();
	};

	struct select_result
	{
		static void close(select_result);
	};

	struct slim_event_t<1>
	{
		bool wait();
	};

	struct unique_any_t<cert_context_t>
	{
		~unique_any_t<cert_context_t>();
	};

	struct unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter>
	{
		void reset();
	};

	struct unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher>
	{
		unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher>(EventRegistrationToken,Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher *,long ( Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher::*)(EventRegistrationToken));
		void reset();
		~unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher>();
	};

	struct unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker>
	{
		unique_winrt_event_token<Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker>(EventRegistrationToken,Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker *,long ( Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker::*)(EventRegistrationToken));
		void reset();
	};

	struct unique_winrt_event_token<Windows::Internal::Shell::Experience::ITitleBarFactoryWatcher>
	{
		void reset();
	};

	struct vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,err_exception_policy>
	{
		vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::DisplayRegionId>,err_exception_policy>::vector_iterator end();
	};

	struct vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *>,err_exception_policy>
	{
		struct vector_iterator
		{
			~vector_iterator();
		};

		vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting *>,err_exception_policy>::vector_iterator end();
	};

	struct vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTab *>,err_exception_policy>
	{
		struct vector_iterator
		{
			Microsoft::WRL::ComPtr<Windows::Internal::ComposableShell::Tabs::IShellTab> const & operator*();
			~vector_iterator();
		};

		vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTab *>,err_exception_policy>::vector_iterator end();
	};

	struct vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTabGroup *>,err_exception_policy>
	{
		struct vector_iterator
		{
			~vector_iterator();
		};

		vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::ComposableShell::Tabs::ShellTabGroup *>,err_exception_policy>::vector_iterator end();
	};

	struct vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,err_exception_policy>
	{
		struct vector_iterator
		{
			Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const & operator*();
			~vector_iterator();
		};

		vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *>,err_exception_policy>::vector_iterator end();
	};

	struct vector_range_nothrow<Windows::Foundation::Collections::IVectorView<Windows::Internal::AssignedAccess::AssignedAccessUserInfo *> >
	{
		void get_at_current(unsigned int);
	};

	Microsoft::WRL::ComPtr<AppViewEventHelpers::details::ApplicationViewEventRegistration> MakeAndInitializeOrThrow<AppViewEventHelpers::details::ApplicationViewEventRegistration,IApplicationViewChangeListener * &>(IApplicationViewChangeListener * &);
	Microsoft::WRL::ComPtr<AppViewEventHelpers::details::ShellHookRegistration> MakeAndInitializeOrThrow<AppViewEventHelpers::details::ShellHookRegistration,IImmersiveShellHookNotification * &>(IImmersiveShellHookNotification * &);
	Microsoft::WRL::ComPtr<AppViewIconFactory> MakeAndInitializeOrThrow<AppViewIconFactory,IApplicationView * &,IApplicationViewIconLoader * &>(IApplicationView * &,IApplicationViewIconLoader * &);
	Microsoft::WRL::ComPtr<ApplicationViewBackedViewHostItem> MakeOrThrow<ApplicationViewBackedViewHostItem,AsyncEventSerialInvocationContextToken &>(wil::AsyncEventSerialInvocationContextToken &);
	Microsoft::WRL::ComPtr<ApplicationViewWrapper> MakeOrThrow<ApplicationViewWrapper,IApplicationView * &>(IApplicationView * &);
	Microsoft::WRL::ComPtr<CCommonApplicationViewPosition> MakeAndInitializeOrThrow<CCommonApplicationViewPosition,Geometry::CRect &>(Geometry::CRect &);
	Microsoft::WRL::ComPtr<ClientWindowReadyForPresentationEventArgs> MakeOrThrow<ClientWindowReadyForPresentationEventArgs,bool const &>(bool const &);
	Microsoft::WRL::ComPtr<StateChangedEventArgsImpl> MakeOrThrow<StateChangedEventArgsImpl,unsigned short const * &,bool &>(unsigned short const * &,bool &);
	Microsoft::WRL::ComPtr<ViewEventArgsForPropertyChanged> MakeAndInitializeOrThrow<ViewEventArgsForPropertyChanged,unsigned short const (&)[12]>(unsigned short const (&)[12]);
	Microsoft::WRL::ComPtr<ViewEventArgsForPropertyChanged> MakeAndInitializeOrThrow<ViewEventArgsForPropertyChanged,unsigned short const (&)[18]>(unsigned short const (&)[18]);
	Microsoft::WRL::ComPtr<ViewEventArgsForPropertyChanged> MakeAndInitializeOrThrow<ViewEventArgsForPropertyChanged,unsigned short const * const &>(unsigned short const * const &);
	Microsoft::WRL::ComPtr<ViewGroup> MakeOrThrow<ViewGroup,IWindowGroupManager * &,ITitleBarController * &,ITabViewManager * &,Windows::Foundation::IEventHandler<IInspectable *> * &,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &,IPrivilegedForegroundOperations * &>(IWindowGroupManager * &,ITitleBarController * &,ITabViewManager * &,Windows::Foundation::IEventHandler<IInspectable *> * &,Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &,IPrivilegedForegroundOperations * &);
	Microsoft::WRL::ComPtr<ViewGroupManager> MakeOrThrow<ViewGroupManager,ITitleBarController * &,ITabViewManager * &>(ITitleBarController * &,ITabViewManager * &);
	Microsoft::WRL::ComPtr<ViewHandledEventArgs> MakeOrThrow<ViewHandledEventArgs,bool &>(bool &);
	Microsoft::WRL::ComPtr<WindowGroup> MakeOrThrow<WindowGroup,unsigned long &>(unsigned long &);
	Microsoft::WRL::ComPtr<WindowGroupManager> MakeOrThrow<WindowGroupManager,IPrivilegedWindowGroupingOperations * &>(IPrivilegedWindowGroupingOperations * &);
	Microsoft::WRL::ComPtr<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults> wait_for_completion<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *,Microsoft::WRL::ComPtr<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResults> >(Windows::Foundation::IAsyncOperation<Windows::Internal::Data::Activities::GetCurrentActivityForViewOperationResults *> *,tagCOWAIT_FLAGS);
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::Experience::ITitleBarFactory> wait_for_completion<Windows::Internal::Shell::Experience::TitleBarFactory *,Microsoft::WRL::ComPtr<Windows::Internal::Shell::Experience::ITitleBarFactory> >(Windows::Foundation::IAsyncOperation<Windows::Internal::Shell::Experience::TitleBarFactory *> *,tagCOWAIT_FLAGS);
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem> MakeOrThrow<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem,AsyncEventSerialInvocationContextToken &>(wil::AsyncEventSerialInvocationContextToken &);
	Microsoft::WRL::ComPtr<XamlExplorerHostWindow> MakeAndInitializeOrThrow<XamlExplorerHostWindow,IXamlExplorerHostWindowCreatedCallback * &,unsigned long &,IPrivilegedPresentationOperations * &,IXamlExplorerHost * &>(IXamlExplorerHostWindowCreatedCallback * &,unsigned long &,IPrivilegedPresentationOperations * &,IXamlExplorerHost * &);
	bool (* g_pfnIsDebuggerPresent)();
	bool (* g_pfnWilFailFast)(wil::FailureInfo const &);
	bool ProcessShutdownInProgress();
	bool g_fBreakOnFailure;
	bool g_fIsDebuggerPresent;
	bool handle_wait(void *,unsigned long);
	bool try_wnf_query<unsigned long>(_WNF_STATE_NAME const &,unsigned long *,wil::WNF_CHANGE_STAMP_STRUCT *);
	int winrt_to_hresult(void *);
	long (* g_pfnResultFromCaughtException)();
	long GetFailureLogString(unsigned short *,unsigned __int64,wil::FailureInfo const &);
	long GetFailureLogString(wchar_t *,unsigned __int64,wil::FailureInfo const &);
	long ResultFromCaughtException();
	long get_token_information_nothrow<_TOKEN_USER,0>(wistd::unique_ptr<_TOKEN_USER,wistd::default_delete<_TOKEN_USER> > &,void *);
	long init_once_nothrow<<lambda_e21be6ce7c3ebc8b73b7211c05c7ecf4> >(_RTL_RUN_ONCE &,<lambda_e21be6ce7c3ebc8b73b7211c05c7ecf4>,bool *);
	long verify_hresult<long>(long);
	long wnf_query_nothrow(_WNF_STATE_NAME const &,bool *,wil::WNF_CHANGE_STAMP_STRUCT *);
	long wnf_query_nothrow<_SEB_EVENT_HEADER>(_WNF_STATE_NAME const &,bool *,_SEB_EVENT_HEADER *,wil::WNF_CHANGE_STAMP_STRUCT *);
	long wnf_query_nothrow<bool>(_WNF_STATE_NAME const &,bool *,bool *,wil::WNF_CHANGE_STAMP_STRUCT *);
	long wnf_query_nothrow<int>(_WNF_STATE_NAME const &,bool *,int *,wil::WNF_CHANGE_STAMP_STRUCT *);
	long wnf_query_nothrow<unsigned int>(_WNF_STATE_NAME const &,bool *,unsigned int *,wil::WNF_CHANGE_STAMP_STRUCT *);
	long wnf_query_nothrow<unsigned long>(_WNF_STATE_NAME const &,bool *,unsigned long *,wil::WNF_CHANGE_STAMP_STRUCT *);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > str_printf<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short const *,...);
	unsigned short const * find_last_path_segment(unsigned short const *);
	void RethrowCaughtException();
	void SetLastError(wil::FailureInfo const &);
	void SetResultLoggingCallback(void (*)(wil::FailureInfo const &));
	void SetResultTelemetryFallback(void (*)(bool,wil::FailureInfo const &));
	void ThrowResultException(wil::FailureInfo const &);
	wil::com_ptr_t<IAgileReference,wil::err_exception_policy> com_agile_query<IApplicationViewChangeListener * &>(IApplicationViewChangeListener * &,AgileReferenceOptions);
	wil::com_ptr_t<IAgileReference,wil::err_exception_policy> com_agile_query<IUnknown * &>(IUnknown * &,AgileReferenceOptions);
	wil::com_ptr_t<IAgileReference,wil::err_failfast_policy> com_agile_query_failfast<IUnknown * &>(IUnknown * &,AgileReferenceOptions);
	wil::com_ptr_t<IApplicationView,wil::err_exception_policy> com_query<IApplicationView,IUnknown * &>(IUnknown * &);
	wil::com_ptr_t<IApplicationView,wil::err_exception_policy> com_query<IApplicationView,IWin32ApplicationView * &>(IWin32ApplicationView * &);
	wil::com_ptr_t<IApplicationView,wil::err_exception_policy> com_query<IApplicationView,IWinRTApplicationView * &>(IWinRTApplicationView * &);
	wil::com_ptr_t<IApplicationView,wil::err_failfast_policy> com_query_failfast<IApplicationView,IWin32ApplicationView * &>(IWin32ApplicationView * &);
	wil::com_ptr_t<IDCompositionDevice2,wil::err_exception_policy> com_query<IDCompositionDevice2,Windows::UI::Composition::ICompositor * &>(Windows::UI::Composition::ICompositor * &);
	wil::com_ptr_t<IServiceHostComponent,wil::err_exception_policy> ActivateInstance<IServiceHostComponent>(unsigned short const *);
	wil::com_ptr_t<IServiceProvider,wil::err_exception_policy> CoCreateInstance<ImmersiveShell,IServiceProvider,err_exception_policy>(unsigned long);
	wil::com_ptr_t<ITabControllerThumbnailEventArgsInternal,wil::err_exception_policy> com_query<ITabControllerThumbnailEventArgsInternal,Windows::Internal::ComposableShell::Tabs::ITabControllerThumbnailEventArgs * &>(Windows::Internal::ComposableShell::Tabs::ITabControllerThumbnailEventArgs * &);
	wil::com_ptr_t<ITabViewManager,wil::err_exception_policy> com_copy<ITabViewManager,IInspectable * &>(IInspectable * &);
	wil::com_ptr_t<IViewGroupInternal,wil::err_exception_policy> com_query<IViewGroupInternal,IViewGroup * &>(IViewGroup * &);
	wil::com_ptr_t<IWeakReference,wil::err_exception_policy> com_weak_query<IApplicationViewChangeListener * &>(IApplicationViewChangeListener * &);
	wil::com_ptr_t<IWeakReference,wil::err_exception_policy> com_weak_query<IImmersiveShellHookNotification * &>(IImmersiveShellHookNotification * &);
	wil::com_ptr_t<IWeakReference,wil::err_failfast_policy> com_weak_query_failfast<Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter * &>(Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter * &);
	wil::com_ptr_t<IWeakReference,wil::err_failfast_policy> com_weak_query_failfast<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher * &>(Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher * &);
	wil::com_ptr_t<IWeakReference,wil::err_failfast_policy> com_weak_query_failfast<Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker * &>(Windows::Internal::ComposableShell::Tabs::ITabTransferEventBroker * &);
	wil::com_ptr_t<IWeakReference,wil::err_failfast_policy> com_weak_query_failfast<Windows::Internal::Shell::Experience::ITitleBarFactoryWatcher * &>(Windows::Internal::Shell::Experience::ITitleBarFactoryWatcher * &);
	wil::com_ptr_t<IWeakReference,wil::err_failfast_policy> com_weak_query_failfast<Windows::Internal::Shell::Holographic::Win32BackedViewHostItem * &>(Windows::Internal::Shell::Holographic::Win32BackedViewHostItem * &);
	wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> com_query<IWin32ApplicationView,IApplicationView * &>(IApplicationView * &);
	wil::com_ptr_t<IWin32ApplicationView,wil::err_exception_policy> try_com_query<IWin32ApplicationView,IApplicationView * &>(IApplicationView * &);
	wil::com_ptr_t<IWin32ApplicationView,wil::err_failfast_policy> com_query_failfast<IWin32ApplicationView,IApplicationView * &>(IApplicationView * &);
	wil::com_ptr_t<Windows::Foundation::Collections::Detail::IMarshalingBehaviorControl,wil::err_exception_policy> com_query<Windows::Foundation::Collections::Detail::IMarshalingBehaviorControl,IUnknown * &>(IUnknown * &);
	wil::com_ptr_t<Windows::Foundation::Collections::IPropertySet,wil::err_exception_policy> ActivateInstance<Windows::Foundation::Collections::IPropertySet>(unsigned short const *);
	wil::com_ptr_t<Windows::Foundation::Collections::IPropertySet,wil::err_exception_policy> com_copy<Windows::Foundation::Collections::IPropertySet,IUnknown * &>(IUnknown * &);
	wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::ICompactOverlayPresenterSetting,wil::err_exception_policy> com_query<Windows::Internal::ApplicationModel::WindowingEnvironment::ICompactOverlayPresenterSetting,Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &>(Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &);
	wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionRelativePositionSetting,wil::err_exception_policy> com_query<Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionRelativePositionSetting,Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &>(Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &);
	wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionsSetting,wil::err_exception_policy> com_query<Windows::Internal::ApplicationModel::WindowingEnvironment::IDisplayRegionsSetting,Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &>(Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &);
	wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IFullscreenPresenterSetting,wil::err_exception_policy> com_query<Windows::Internal::ApplicationModel::WindowingEnvironment::IFullscreenPresenterSetting,Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &>(Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &);
	wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::ISizeSetting,wil::err_exception_policy> com_query<Windows::Internal::ApplicationModel::WindowingEnvironment::ISizeSetting,Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &>(Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &);
	wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IViewAdjacentPositionSetting,wil::err_exception_policy> com_query<Windows::Internal::ApplicationModel::WindowingEnvironment::IViewAdjacentPositionSetting,Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &>(Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &);
	wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IViewRelativePositionSetting,wil::err_exception_policy> com_query<Windows::Internal::ApplicationModel::WindowingEnvironment::IViewRelativePositionSetting,Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &>(Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &);
	wil::com_ptr_t<Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentSetting,wil::err_exception_policy> com_query<Windows::Internal::ApplicationModel::WindowingEnvironment::IWindowingEnvironmentSetting,Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &>(Microsoft::WRL::ComPtr<Windows::Internal::ApplicationModel::WindowingEnvironment::ISetting> const &);
	wil::com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessManager,wil::err_exception_policy> ActivateInstance<Windows::Internal::AssignedAccess::IAssignedAccessManager>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::IIconFactoryStatics,wil::err_exception_policy> GetActivationFactory<Windows::Internal::ComposableShell::Multitasking::IIconFactoryStatics>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSink,wil::err_exception_policy> ActivateInstance<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSink>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::Data::Activities::IActivityIndexer,wil::err_exception_policy> ActivateInstance<Windows::Internal::Data::Activities::IActivityIndexer>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResultsFactory,wil::err_exception_policy> GetActivationFactory<Windows::Internal::Data::Activities::IGetCurrentActivityForViewOperationResultsFactory>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::Shell::CustomShell::ICustomShellExperienceRepository,wil::err_exception_policy> ActivateInstance<Windows::Internal::Shell::CustomShell::ICustomShellExperienceRepository>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::Shell::Experience::IShellFeedsExperienceManager,wil::err_exception_policy> com_query<Windows::Internal::Shell::Experience::IShellFeedsExperienceManager,com_ptr_t<IAgileReference,err_exception_policy> &>(wil::com_ptr_t<IAgileReference,wil::err_exception_policy> &);
	wil::com_ptr_t<Windows::Internal::Shell::Multitasking::Desktop::IDesktopIconFactoryStatics,wil::err_exception_policy> GetActivationFactory<Windows::Internal::Shell::Multitasking::Desktop::IDesktopIconFactoryStatics>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice,wil::err_exception_policy> com_copy<Windows::Internal::Shell::Multitasking::Desktop::IDesktopThumbnailDevice,IInspectable * &>(IInspectable * &);
	wil::com_ptr_t<Windows::Internal::Shell::ShellLauncher::IShellLauncherManager,wil::err_exception_policy> ActivateInstance<Windows::Internal::Shell::ShellLauncher::IShellLauncherManager>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewExecutionDataFactory,wil::err_exception_policy> GetActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewExecutionDataFactory>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeDataFactory,wil::err_exception_policy> GetActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::IAppViewTitleChangeDataFactory>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IClipboardSignalListenerFactory,wil::err_exception_policy> GetActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::IClipboardSignalListenerFactory>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceDataFactory,wil::err_exception_policy> GetActivationFactory<Windows::Internal::Shell::TaskFlow::DataEngine::IUserPresenceDataFactory>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::StateRepository::IApplicationResourceResolverStatics,wil::err_exception_policy> GetActivationFactory<Windows::Internal::StateRepository::IApplicationResourceResolverStatics>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::StateRepository::IApplicationStatics,wil::err_exception_policy> GetActivationFactory<Windows::Internal::StateRepository::IApplicationStatics>(unsigned short const *);
	wil::com_ptr_t<Windows::Storage::Streams::IRandomAccessStreamReferenceStatics,wil::err_exception_policy> GetActivationFactory<Windows::Storage::Streams::IRandomAccessStreamReferenceStatics>(unsigned short const *);
	wil::com_ptr_t<Windows::System::Threading::IThreadPoolTimerStatics,wil::err_exception_policy> GetActivationFactory<Windows::System::Threading::IThreadPoolTimerStatics>(unsigned short const *);
	wil::com_ptr_t<Windows::UI::Composition::IVisual,wil::err_exception_policy> com_query<Windows::UI::Composition::IVisual,com_ptr_t<IDCompositionVisual2,err_exception_policy> &>(wil::com_ptr_t<IDCompositionVisual2,wil::err_exception_policy> &);
	wil::com_ptr_t<Windows::UI::Xaml::Media::ILoadedImageSurfaceStatics,wil::err_exception_policy> GetActivationFactory<Windows::UI::Xaml::Media::ILoadedImageSurfaceStatics>(unsigned short const *);
	wistd::unique_ptr<tagPOINTER_DEVICE_INFO [0],wil::function_deleter<void * (*)(void *),&void * LocalFree(void *)> > make_unique_hlocal_nothrow<tagPOINTER_DEVICE_INFO [0]>(unsigned __int64);
};

namespace winrt
{
	namespace Windows
	{
		namespace ApplicationModel
		{
			struct AppInfo
			{
				~AppInfo();
			};

			struct IAppInfoStatics
			{
				~IAppInfoStatics();
			};

		};

		namespace Foundation
		{
			struct AsyncOperationCompletedHandler<Internal::UI::Shell::WindowTabDataModel>
			{
				~AsyncOperationCompletedHandler<Internal::UI::Shell::WindowTabDataModel>();
			};

			struct AsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStreamReference>
			{
				~AsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStreamReference>();
			};

			struct AsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStreamWithContentType>
			{
				~AsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStreamWithContentType>();
			};

			struct AsyncOperationCompletedHandler<bool>
			{
				void operator()(IAsyncOperation<bool> const &,AsyncStatus const &);
				~AsyncOperationCompletedHandler<bool>();
			};

			struct AsyncOperationCompletedHandler<hstring>
			{
				~AsyncOperationCompletedHandler<hstring>();
			};

			struct AsyncOperationCompletedHandler<unsigned int>
			{
				void operator()(IAsyncOperation<unsigned int> const &,AsyncStatus const &);
				~AsyncOperationCompletedHandler<unsigned int>();
			};

			namespace Collections
			{
				struct IVectorView<Internal::Tiles::ITile>
				{
					~IVectorView<Internal::Tiles::ITile>();
				};

				struct IVectorView<Internal::Tiles::TileNotification>
				{
					~IVectorView<Internal::Tiles::TileNotification>();
				};

				struct IVectorView<Internal::UI::Shell::WindowTabView>
				{
					~IVectorView<Internal::UI::Shell::WindowTabView>();
				};

				struct IVectorView<hstring>
				{
					~IVectorView<hstring>();
				};

			};

			struct IActivationFactory
			{
				UI::ViewManagement::UISettings ActivateInstance<UI::ViewManagement::UISettings>();
				~IActivationFactory();
			};

			struct IAsyncInfo
			{
				~IAsyncInfo();
			};

			struct IAsyncOperation<Internal::UI::Shell::WindowTabDataModel>
			{
				~IAsyncOperation<Internal::UI::Shell::WindowTabDataModel>();
			};

			struct IAsyncOperation<Storage::Streams::IRandomAccessStreamReference>
			{
				~IAsyncOperation<Storage::Streams::IRandomAccessStreamReference>();
			};

			struct IAsyncOperation<Storage::Streams::IRandomAccessStreamWithContentType>
			{
				~IAsyncOperation<Storage::Streams::IRandomAccessStreamWithContentType>();
			};

			struct IAsyncOperation<bool>
			{
				~IAsyncOperation<bool>();
			};

			struct IAsyncOperation<hstring>
			{
				~IAsyncOperation<hstring>();
			};

			struct IAsyncOperation<unsigned int>
			{
				~IAsyncOperation<unsigned int>();
			};

			struct IInspectable
			{
				IInspectable(IInspectable const &);
				~IInspectable();
			};

			class IUnknown
			{
				void add_ref();
				void unconditional_release_ref();
			public:
				IAsyncInfo try_as<IAsyncInfo>();
				com_ptr<impl::IAgileObject> try_as<impl::IAgileObject>();
				~IUnknown();
			};

			struct TypedEventHandler<Internal::ComposableShell::Tabs::TabDataModelWatcher,Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs>
			{
				~TypedEventHandler<Internal::ComposableShell::Tabs::TabDataModelWatcher,Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs>();
			};

			struct TypedEventHandler<Internal::Tiles::TileStore,Internal::Tiles::TileStoreChangedEventArgs>
			{
				TypedEventHandler<Internal::Tiles::TileStore,Internal::Tiles::TileStoreChangedEventArgs><Internal::Shell::implementation::WindowTabHost,void ( Internal::Shell::implementation::WindowTabHost::*)(Internal::Tiles::ITileStore const &,Internal::Tiles::ITileStoreChangedEventArgs const &)>(Internal::Shell::implementation::WindowTabHost *,void ( Internal::Shell::implementation::WindowTabHost::*)(Internal::Tiles::ITileStore const &,Internal::Tiles::ITileStoreChangedEventArgs const &));
				~TypedEventHandler<Internal::Tiles::TileStore,Internal::Tiles::TileStoreChangedEventArgs>();
			};

			struct TypedEventHandler<Internal::UI::Shell::IWindowTabExtension,Internal::UI::Shell::WindowTabsChangedEventArgs>
			{
				void operator()(Internal::UI::Shell::IWindowTabExtension const &,Internal::UI::Shell::WindowTabsChangedEventArgs const &);
				~TypedEventHandler<Internal::UI::Shell::IWindowTabExtension,Internal::UI::Shell::WindowTabsChangedEventArgs>();
			};

			struct TypedEventHandler<Internal::UI::Shell::WindowTabDataModel,Internal::UI::Shell::WindowTabDataModelActiveTabChangedEventArgs>
			{
				TypedEventHandler<Internal::UI::Shell::WindowTabDataModel,Internal::UI::Shell::WindowTabDataModelActiveTabChangedEventArgs><Internal::Shell::implementation::WindowTabHost,void ( Internal::Shell::implementation::WindowTabHost::*)(Internal::UI::Shell::WindowTabDataModel const &,Internal::UI::Shell::WindowTabDataModelActiveTabChangedEventArgs const &)>(Internal::Shell::implementation::WindowTabHost *,void ( Internal::Shell::implementation::WindowTabHost::*)(Internal::UI::Shell::WindowTabDataModel const &,Internal::UI::Shell::WindowTabDataModelActiveTabChangedEventArgs const &));
				~TypedEventHandler<Internal::UI::Shell::WindowTabDataModel,Internal::UI::Shell::WindowTabDataModelActiveTabChangedEventArgs>();
			};

			struct TypedEventHandler<Internal::UI::Shell::WindowTabDataModel,Internal::UI::Shell::WindowTabDataModelTabsChangedEventArgs>
			{
				TypedEventHandler<Internal::UI::Shell::WindowTabDataModel,Internal::UI::Shell::WindowTabDataModelTabsChangedEventArgs><Internal::Shell::implementation::WindowTabHost,void ( Internal::Shell::implementation::WindowTabHost::*)(Internal::UI::Shell::WindowTabDataModel const &,Internal::UI::Shell::WindowTabDataModelTabsChangedEventArgs const &)>(Internal::Shell::implementation::WindowTabHost *,void ( Internal::Shell::implementation::WindowTabHost::*)(Internal::UI::Shell::WindowTabDataModel const &,Internal::UI::Shell::WindowTabDataModelTabsChangedEventArgs const &));
				~TypedEventHandler<Internal::UI::Shell::WindowTabDataModel,Internal::UI::Shell::WindowTabDataModelTabsChangedEventArgs>();
			};

			struct TypedEventHandler<Internal::UI::Shell::WindowTabView,Internal::UI::Shell::WindowTabViewPropertyChangedEventArgs>
			{
				TypedEventHandler<Internal::UI::Shell::WindowTabView,Internal::UI::Shell::WindowTabViewPropertyChangedEventArgs><Internal::Shell::implementation::TabProxyWindow,void ( Internal::Shell::implementation::TabProxyWindow::*)(Internal::UI::Shell::WindowTabView const &,Internal::UI::Shell::WindowTabViewPropertyChangedEventArgs const &)>(Internal::Shell::implementation::TabProxyWindow *,void ( Internal::Shell::implementation::TabProxyWindow::*)(Internal::UI::Shell::WindowTabView const &,Internal::UI::Shell::WindowTabViewPropertyChangedEventArgs const &));
				~TypedEventHandler<Internal::UI::Shell::WindowTabView,Internal::UI::Shell::WindowTabViewPropertyChangedEventArgs>();
			};

			struct TypedEventHandler<WindowsUdk::UI::Shell::ViewCoordinator,WindowsUdk::UI::Shell::HideViewRequestedEventArgs>
			{
				~TypedEventHandler<WindowsUdk::UI::Shell::ViewCoordinator,WindowsUdk::UI::Shell::HideViewRequestedEventArgs>();
			};

			bool operator==(Foundation::IUnknown const &,Foundation::IUnknown const &);
		};

		namespace Graphics
		{
			namespace Capture
			{
				struct GraphicsCaptureItem
				{
					~GraphicsCaptureItem();
				};

			};

		};

		namespace Internal
		{
			namespace ComposableShell
			{
				namespace Tabs
				{
					struct ShellTab
					{
						~ShellTab();
					};

					struct TabDataModelTabsChangedEventArgs
					{
						~TabDataModelTabsChangedEventArgs();
					};

					struct TabDataModelWatcher
					{
						~TabDataModelWatcher();
					};

				};

			};

			namespace Shell
			{
				namespace DragDropSimulator
				{
					namespace implementation
					{
						class DragDropSimulatorComponent
						{
							Foundation::IAsyncOperation<bool> SimulateDrop(Foundation::IInspectable const &,DragDropSimulatorDropPoint,bool);
							Foundation::IAsyncOperation<unsigned int> DropDataOnUwpEndPointAsync(wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool);
							HWND__ * GetInitialTargetWindowFromPoint(tagPOINT const &,HWND__ *,HWND__ *);
							_GUID GetDragDropExtensionClsId();
							std::tuple<HWND__ *,tagRECT> GetCaretPointFromWindowThread(HWND__ *);
							std::tuple<HWND__ *,tagRECT> GetWindowIdAndTextSelectionRect();
							std::tuple<tagRECT,HWND__ *> GetForegroundApplicationRect();
							std::tuple<wil::com_ptr_t<IPrivDragDrop,wil::err_exception_policy>,wil::com_ptr_t<IDropTarget,wil::err_exception_policy>,HWND__ *> GetDropEndPointByTraversingParentChain(HWND__ *);
							unsigned long DropDataOnWin32EndPoint(wil::com_ptr_t<IPrivDragDrop,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,HWND__ *,tagPOINT const &,bool);
							wil::com_ptr_t<IDragDropExtensionForOLE,wil::err_exception_policy> GetDragDropExtensionPoint();
						public:
							Foundation::IAsyncOperation<bool> InsertAsync(Foundation::IInspectable const &,DragDropSimulatorDropPoint const &);
							Foundation::IAsyncOperation<bool> IsSupportedAsync(Foundation::IInspectable const &,DragDropSimulatorDropPoint const &);
							virtual void perform_delayed_initialization();
							virtual void subscribe_to_services(IServiceProvider *);
							virtual void unsubscribe_from_services(IServiceProvider *);
							virtual ~DragDropSimulatorComponent();
						};

						Microsoft::WRL::Details::CreatorMap const __object_DragDropSimulatorComponent_COM;
						Microsoft::WRL::Details::FactoryCache __objectFactory__DragDropSimulatorComponent_COM;
					};

				};

				namespace ShellFeeds
				{
					namespace implementation
					{
						struct ShellFeedsLauncher
						{
							fire_and_forget RetryNetworkAvailabilityChecks();
							virtual long GetIids(unsigned long *,_GUID * *);
							virtual long GetRuntimeClassName(HSTRING__ * *);
							virtual long GetTrustLevel(TrustLevel *);
							virtual long NotifyFeedsButtonVisibilityChanged(unsigned char);
							virtual long NotifyTaskbarButtonInteraction(Experience::ShellFeedsButtonType,Experience::ShellFeedsButtonInteraction,HSTRING__ *);
							virtual long Poke(HSTRING__ *);
							virtual long SetPositioningAnchorRect(Experience::ShellFeedsButtonType,Foundation::Rect);
							virtual void perform_delayed_initialization();
							virtual void unsubscribe_from_services(IServiceProvider *);
							virtual ~ShellFeedsLauncher();
						};

						Microsoft::WRL::Details::CreatorMap const __object_ShellFeedsLauncher_COM;
						Microsoft::WRL::Details::FactoryCache __objectFactory__ShellFeedsLauncher_COM;
					};

				};

				struct WindowTabHost
				{
					~WindowTabHost();
				};

				namespace implementation
				{
					class TabProxyWindow
					{
						HICON__ * GetIconFromBitmap(HBITMAP__ *);
						fire_and_forget SetAndCreateIconFromGlyphAsync();
						fire_and_forget SetWindowIconAsync();
						fire_and_forget SetWindowThumbnailAsync(unsigned int,unsigned int,bool);
						static unsigned int s_tabSwitchMessageId;
						virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
						void OnTabChanged(UI::Shell::WindowTabView const &,UI::Shell::WindowTabViewPropertyChangedEventArgs const &);
						void RegisterTaskbarGlom(hstring const &);
						void SetWindowAppUserModelId(hstring const &);
						void SwitchToTab();
						void TileId(hstring const &);
						void UpdateTileGuid();
					public:
						TabProxyWindow(IWICImagingFactory *,ITaskbarList4 *,Tiles::ITileStore const &,UI::Shell::WindowTabDataModel const &,UI::Shell::WindowTabView const &,unsigned __int64);
						hstring TileId();
						long CreateWindow();
						static unsigned short RegisterClass();
						virtual long DestroyWindowInternal();
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetOwnerWindowInternal(unsigned __int64 *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long GetWindow(unsigned __int64 *);
						virtual long ToggleAltTabVisibility();
						virtual ~TabProxyWindow();
						void DestroyWindow();
						void HideFromAltTab(bool);
					};

					struct TabProxyWindowFactory
					{
						com_ptr<TabProxyWindow> CreateTabProxyWindow(UI::Shell::WindowTabDataModel const &,UI::Shell::WindowTabView const &,unsigned __int64);
						long Initialize();
						virtual long CreateTabProxyWindowInternal(unsigned __int64,ITabProxyWindowInternal * *);
						virtual long DestroyTabProxyWindowInternal(ITabProxyWindowInternal *);
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long SetTestTabProxyWindowFactoryInternal(ITestTabProxyWindowFactoryInternal *);
						virtual ~TabProxyWindowFactory();
						void DestroyTabProxyWindow(com_ptr<TabProxyWindow> const &);
					};

					class WindowData
					{
						void ActivateTabUnderLock(guid);
						void AddTab(UI::Shell::WindowTabView const &);
						void AddTabProxyWindow(UI::Shell::WindowTabView const &);
						void RemoveTab(guid);
						void RemoveTabProxyWindow(guid);
						void SyncTabProxyWindows(SystemSettings::MultiTasking::AltTabFilterScope,unsigned __int64);
					public:
						HWND__ * GetTabProxyWindowHwnd(guid);
						HWND__ * GetTabProxyWindowOwnerWindow(guid);
						WindowData(com_ptr<TabProxyWindowFactory> const &,UI::Shell::WindowTabDataModel const &,event_token,event_token);
						bool TabProxyWindowExists(guid);
						guid GetActiveTabId();
						unsigned __int64 SyncWindowTabDataModel(SystemSettings::MultiTasking::AltTabFilterScope,unsigned __int64);
						void GetPendingTabChanges(std::vector<guid,std::allocator<guid> > &,std::vector<guid,std::allocator<guid> > &);
						void HideTabProxyWindowFromAltTab(guid,bool);
						void MoveProxyWindowsToDesktop(IApplicationViewCollection *,IVirtualDesktopManagerInternal3 *,IApplicationView *);
						void UnregisterTileIfExists(guid const &);
						~WindowData();
					};

					class WindowTabHost
					{
						bool ActivateTab(unsigned __int64,guid);
						fire_and_forget DelayedUpdateActivationTimestamp(unsigned __int64);
						unsigned __int64 GetWindowTabAllotment(unsigned __int64);
						unsigned __int64 SyncWindowTabDataModel(unsigned __int64);
						void EnsureTileRemoved(Tiles::ITileNotification const &);
						void FindAllTileNotifications();
						void FindExistingWindows();
						void OnActiveTabChanged(UI::Shell::WindowTabDataModel const &,UI::Shell::WindowTabDataModelActiveTabChangedEventArgs const &);
						void OnTabsChanged(UI::Shell::WindowTabDataModel const &,UI::Shell::WindowTabDataModelTabsChangedEventArgs const &);
						void RemoveTabsFromWindowOrder(std::vector<guid,std::allocator<guid> > const &,std::unordered_map<unsigned __int64,guid,std::hash<unsigned __int64>,std::equal_to<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,guid> > > const &);
						void RemoveWindowTabDataModel(unsigned __int64);
						void SyncGlobalTabOrder(unsigned __int64,std::vector<guid,std::allocator<guid> > const &,std::vector<guid,std::allocator<guid> > const &);
						void UpdateActivationTimestamps(HWND__ *,HWND__ *);
						void UpdateAltTabFilterSetting();
					public:
						WindowTabHost();
						bool IsSupported();
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTabProxyWindowFactory(ITabProxyWindowFactoryInternal * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
						virtual long OnSettingChanged(SETTING_IDENTIFIER);
						virtual long ViewVirtualDesktopChanged(IApplicationView *);
						virtual void perform_delayed_initialization();
						virtual void subscribe_to_services(IServiceProvider *);
						virtual void unsubscribe_from_services(IServiceProvider *);
						virtual ~WindowTabHost();
						void TileStoreChanged(Tiles::ITileStore const &,Tiles::ITileStoreChangedEventArgs const &);
						void UpdateTabsForWindow(unsigned __int64);
						void WindowTabsChanged(event_token const &);
					};

					struct WindowTabHost_base<WindowTabHost,immersive_shell_component,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,cloaked<IWindowTabHostInternal> >
					{
						virtual hstring GetRuntimeClassName();
						virtual ~WindowTabHost_base<WindowTabHost,immersive_shell_component,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,cloaked<IWindowTabHostInternal> >();
					};

					Microsoft::WRL::Details::CreatorMap const __object_WindowTabHost_COM;
					Microsoft::WRL::Details::FactoryCache __objectFactory__WindowTabHost_COM;
				};

			};

			namespace Tiles
			{
				struct ITile
				{
					~ITile();
				};

				struct ITileStore
				{
					~ITileStore();
				};

				struct ITileStoreFactory
				{
					~ITileStoreFactory();
				};

				struct TileNotification
				{
					~TileNotification();
				};

				struct TileQueryFilter
				{
					~TileQueryFilter();
				};

				struct TileStore
				{
					TileStore(System::User const &);
					~TileStore();
				};

			};

			namespace UI
			{
				namespace Shell
				{
					struct IWindowTabBrokerStatics
					{
						~IWindowTabBrokerStatics();
					};

					struct IWindowTabDataModelStatics
					{
						~IWindowTabDataModelStatics();
					};

					struct IWindowTabManagerServices
					{
						~IWindowTabManagerServices();
					};

					struct IWindowTabsChangedEventArgsFactory
					{
						~IWindowTabsChangedEventArgsFactory();
					};

					struct WindowTabDataModel
					{
						~WindowTabDataModel();
					};

					struct WindowTabView
					{
						~WindowTabView();
					};

					struct WindowTabsChangedEventArgs
					{
						~WindowTabsChangedEventArgs();
					};

				};

			};

		};

		namespace Networking
		{
			namespace Connectivity
			{
				struct ConnectionProfile
				{
					~ConnectionProfile();
				};

				struct INetworkInformationStatics
				{
					~INetworkInformationStatics();
				};

				struct NetworkInformation
				{
					static NetworkStatusChanged(event_token const &);
				};

				struct NetworkStatusChangedEventHandler
				{
					~NetworkStatusChangedEventHandler();
				};

			};

		};

		namespace Storage
		{
			namespace Streams
			{
				struct IRandomAccessStreamReference
				{
					~IRandomAccessStreamReference();
				};

				struct IRandomAccessStreamWithContentType
				{
					~IRandomAccessStreamWithContentType();
				};

			};

		};

		namespace System
		{
			struct User
			{
				~User();
			};

		};

		namespace UI
		{
			namespace ViewManagement
			{
				struct IUISettings3
				{
					~IUISettings3();
				};

			};

		};

	};

	namespace WindowsUdk
	{
		namespace ApplicationModel
		{
			namespace AppExtensions
			{
				struct AppExtensionCatalog
				{
					~AppExtensionCatalog();
				};

				struct IAppExtensionCatalogStatics
				{
					~IAppExtensionCatalogStatics();
				};

			};

			namespace OnScreenInput
			{
				struct IKnownOnScreenInputUriSchemesStatics
				{
					~IKnownOnScreenInputUriSchemesStatics();
				};

			};

		};

		namespace UI
		{
			namespace Shell
			{
				struct HideViewRequestedEventArgs
				{
					~HideViewRequestedEventArgs();
				};

				struct IViewCoordinatorStatics
				{
					~IViewCoordinatorStatics();
				};

				struct ViewCoordinator
				{
					~ViewCoordinator();
				};

			};

		};

	};

	class com_ptr<IClassicWindowManager>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<IClassicWindowManager>();
	};

	class com_ptr<IGraphicsCaptureItemInterop>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<IGraphicsCaptureItemInterop>();
	};

	class com_ptr<IInspectable>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<IInspectable>();
	};

	class com_ptr<IObjectWithSite>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<IObjectWithSite>();
	};

	class com_ptr<IServiceProvider>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<IServiceProvider>();
	};

	class com_ptr<IStream>
	{
		void unconditional_release_ref();
	public:
		IStream * get();
		IStream * operator->();
		~com_ptr<IStream>();
	};

	class com_ptr<IUnknown>
	{
		void add_ref();
		void unconditional_release_ref();
	public:
		~com_ptr<IUnknown>();
	};

	class com_ptr<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent>();
	};

	class com_ptr<Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>();
	};

	class com_ptr<Windows::Internal::Shell::ITabProxyWindowFactoryInternal>
	{
		void unconditional_release_ref();
	};

	class com_ptr<Windows::Internal::Shell::ITabProxyWindowInternal>
	{
		void unconditional_release_ref();
	};

	class com_ptr<Windows::Internal::Shell::ITestTabProxyWindowFactoryInternal>
	{
		void unconditional_release_ref();
	};

	class com_ptr<Windows::Internal::Shell::implementation::TabProxyWindow>
	{
		void add_ref();
		void unconditional_release_ref();
	public:
		Windows::Internal::Shell::implementation::TabProxyWindow * operator->();
		~com_ptr<Windows::Internal::Shell::implementation::TabProxyWindow>();
	};

	class com_ptr<Windows::Internal::Shell::implementation::TabProxyWindowFactory>
	{
		void add_ref();
		void unconditional_release_ref();
	public:
		~com_ptr<Windows::Internal::Shell::implementation::TabProxyWindowFactory>();
	};

	class com_ptr<immersive_shell_component>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<immersive_shell_component>();
	};

	class com_ptr<impl::IAgileObject>
	{
		void unconditional_release_ref();
	};

	class com_ptr<impl::IAgileReference>
	{
		void unconditional_release_ref();
	};

	class com_ptr<impl::IContextCallback>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<impl::IContextCallback>();
	};

	class com_ptr<impl::ILanguageExceptionErrorInfo2>
	{
		void unconditional_release_ref();
	};

	class com_ptr<impl::IMarshal>
	{
		void unconditional_release_ref();
	};

	class com_ptr<impl::IRestrictedErrorInfo>
	{
		void add_ref();
		void unconditional_release_ref();
	};

	class com_ptr<impl::IWeakReference>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<impl::IWeakReference>();
	};

	class com_ptr<impl::IWeakReferenceSource>
	{
		void unconditional_release_ref();
	public:
		~com_ptr<impl::IWeakReferenceSource>();
	};

	class com_ptr<impl::abi<Windows::Foundation::IUnknown,void>::type>
	{
		void unconditional_release_ref();
	};

	class com_ptr<impl::event_array<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> > >
	{
		void unconditional_release_ref();
	public:
		~com_ptr<impl::event_array<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> > >();
	};

	class com_ptr<impl::weak_ref<1> >
	{
		void unconditional_release_ref();
	};

	namespace details
	{
		struct module_count_wrapper<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent>
		{
			module_count_wrapper<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent>();
			virtual ~module_count_wrapper<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent>();
		};

		struct module_count_wrapper<Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher>
		{
			module_count_wrapper<Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher>();
			virtual ~module_count_wrapper<Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher>();
		};

		struct module_count_wrapper<Windows::Internal::Shell::implementation::WindowTabHost>
		{
			module_count_wrapper<Windows::Internal::Shell::implementation::WindowTabHost>();
			virtual ~module_count_wrapper<Windows::Internal::Shell::implementation::WindowTabHost>();
		};

	};

	struct event<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> >
	{
		event_token add(Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> const &);
		void operator()<Windows::Internal::Shell::implementation::WindowTabHost,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs>(Windows::Internal::Shell::implementation::WindowTabHost const &,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs const &);
		void remove(event_token);
		~event<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> >();
	};

	struct event_revoker<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher>
	{
		void revoke();
	};

	struct event_revoker<WindowsUdk::UI::Shell::IViewCoordinator>
	{
		void revoke();
	};

	struct handle_type<handle_traits>
	{
		~handle_type<handle_traits>();
	};

	struct handle_type<impl::hstring_traits>
	{
		void close();
	};

	struct hresult
	{
		operator int();
	};

	struct hresult_access_denied
	{
		hresult_access_denied(hresult_access_denied const &);
		~hresult_access_denied();
	};

	struct hresult_canceled
	{
		hresult_canceled();
		hresult_canceled(hresult_canceled const &);
		~hresult_canceled();
	};

	struct hresult_changed_state
	{
		hresult_changed_state(hresult_changed_state const &);
		~hresult_changed_state();
	};

	struct hresult_class_not_available
	{
		hresult_class_not_available(hresult_class_not_available const &);
		~hresult_class_not_available();
	};

	class hresult_error
	{
		void originate(hresult,void *);
	public:
		hresult to_abi();
		hresult_error(hresult);
		hresult_error(hresult,param::hstring const &);
		hresult_error(hresult,take_ownership_from_abi_t);
		hresult_error(hresult_error const &);
		hstring message();
		~hresult_error();
	};

	struct hresult_illegal_delegate_assignment
	{
		hresult_illegal_delegate_assignment();
		hresult_illegal_delegate_assignment(hresult_illegal_delegate_assignment const &);
		~hresult_illegal_delegate_assignment();
	};

	struct hresult_illegal_method_call
	{
		hresult_illegal_method_call();
		hresult_illegal_method_call(hresult_illegal_method_call const &);
		~hresult_illegal_method_call();
	};

	struct hresult_illegal_state_change
	{
		hresult_illegal_state_change(hresult_illegal_state_change const &);
		~hresult_illegal_state_change();
	};

	struct hresult_invalid_argument
	{
		hresult_invalid_argument(hresult_invalid_argument const &);
		~hresult_invalid_argument();
	};

	struct hresult_no_interface
	{
		hresult_no_interface(hresult_no_interface const &);
		~hresult_no_interface();
	};

	struct hresult_not_implemented
	{
		hresult_not_implemented();
		hresult_not_implemented(hresult_not_implemented const &);
		~hresult_not_implemented();
	};

	struct hresult_out_of_bounds
	{
		hresult_out_of_bounds(hresult_out_of_bounds const &);
		~hresult_out_of_bounds();
	};

	struct hresult_wrong_thread
	{
		hresult_wrong_thread(hresult_wrong_thread const &);
		~hresult_wrong_thread();
	};

	struct hstring
	{
		hstring & operator=(hstring const &);
		hstring(std::basic_string_view<unsigned short,std::char_traits<unsigned short> > const &);
		hstring(unsigned short const *);
		operator std::basic_string_view<unsigned short,std::char_traits<unsigned short> >();
		~hstring();
	};

	class immersive_shell_component
	{
		struct service_description
		{
			~service_description();
		};

		virtual long GetSite(_GUID const &,void * *);
		virtual long PerformDelayedInitialization();
		virtual long PublishServices(IServiceProvider *,IProfferService *);
		virtual long QueryService(_GUID const &,_GUID const &,void * *);
		virtual long SetSite(IUnknown *);
		virtual long ShutdownServices(IProfferService *);
		virtual long SubscribeToServices(IServiceProvider *);
		virtual long UnsubscribeFromServices(IServiceProvider *);
	protected:
		com_ptr<IServiceProvider> get_site<IServiceProvider>();
		virtual bool try_query_service(_GUID const &,_GUID const &,void * *);
		virtual void publish_services(IServiceProvider *,IProfferService *);
		virtual void shutdown_services(IProfferService *);
		void register_service_information(array_view<immersive_shell_component::service_description const >);
		void register_service_information<_GUID const >(_GUID const &);
	public:
		immersive_shell_component();
		virtual void perform_delayed_initialization();
		virtual void subscribe_to_services(IServiceProvider *);
		virtual void unsubscribe_from_services(IServiceProvider *);
		virtual ~immersive_shell_component();
	};

	namespace impl
	{
		struct await_adapter<Windows::Foundation::IAsyncOperation<bool> >
		{
			bool await_ready();
			bool await_resume();
			void await_suspend(std::experimental::coroutine_handle<void>);
		};

		struct await_adapter<Windows::Foundation::IAsyncOperation<unsigned int> >
		{
			bool await_ready();
			unsigned int await_resume();
			void await_suspend(std::experimental::coroutine_handle<void>);
		};

		struct consume_WindowsUdk_ApplicationModel_AppExtensions_IAppExtensionCatalog<WindowsUdk::ApplicationModel::AppExtensions::IAppExtensionCatalog>
		{
			Windows::Foundation::IAsyncOperation<hstring> FindApplicationUserModelIdAsync();
		};

		struct consume_WindowsUdk_ApplicationModel_AppExtensions_IAppExtensionCatalogStatics<WindowsUdk::ApplicationModel::AppExtensions::IAppExtensionCatalogStatics>
		{
			WindowsUdk::ApplicationModel::AppExtensions::AppExtensionCatalog Open(param::hstring const &);
			WindowsUdk::ApplicationModel::AppExtensions::AppExtensionCatalog Open(param::hstring const &,WindowsUdk::ApplicationModel::AppExtensions::AppExtensionCatalogOptions const &);
		};

		struct consume_WindowsUdk_ApplicationModel_OnScreenInput_IKnownOnScreenInputUriSchemesStatics<WindowsUdk::ApplicationModel::OnScreenInput::IKnownOnScreenInputUriSchemesStatics>
		{
			hstring Candidates();
			hstring Clipboard();
			hstring Default();
			hstring Dictation();
			hstring Emoji();
			hstring EmojiOnKeyboard();
			hstring Handwriting();
			hstring InputCompanion();
			hstring LanguageBar();
			hstring OnScreenKeyboard();
			hstring Other();
			hstring Symbols();
		};

		struct consume_WindowsUdk_UI_Shell_IViewCoordinatorStatics<WindowsUdk::UI::Shell::IViewCoordinatorStatics>
		{
			WindowsUdk::UI::Shell::ViewCoordinator Current();
		};

		struct consume_Windows_ApplicationModel_IAppInfoStatics<Windows::ApplicationModel::IAppInfoStatics>
		{
			Windows::ApplicationModel::AppInfo GetFromAppUserModelId(param::hstring const &);
		};

		struct consume_Windows_Foundation_Collections_IVectorView<Windows::Foundation::Collections::IVectorView<Windows::Internal::UI::Shell::WindowTabView>,Windows::Internal::UI::Shell::WindowTabView>
		{
			unsigned int Size();
		};

		struct consume_Windows_Foundation_IAsyncOperation<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference>,Windows::Storage::Streams::IRandomAccessStreamReference>
		{
			Windows::Storage::Streams::IRandomAccessStreamReference get();
		};

		struct consume_Windows_Foundation_IAsyncOperation<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType>,Windows::Storage::Streams::IRandomAccessStreamWithContentType>
		{
			Windows::Storage::Streams::IRandomAccessStreamWithContentType get();
		};

		struct consume_Windows_Foundation_IAsyncOperation<Windows::Foundation::IAsyncOperation<hstring>,hstring>
		{
			hstring GetResults();
		};

		struct consume_Windows_Internal_ComposableShell_Tabs_ITabDataModel<Windows::Internal::ComposableShell::Tabs::ITabDataModel>
		{
			Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher CreateWatcher();
		};

		struct consume_Windows_Internal_ComposableShell_Tabs_ITabDataModelTabsChangedEventArgs<Windows::Internal::ComposableShell::Tabs::ITabDataModelTabsChangedEventArgs>
		{
			Windows::Internal::ComposableShell::Tabs::ShellTab AddedTab();
		};

		struct consume_Windows_Internal_Tiles_ITile<Windows::Internal::Tiles::ITile>
		{
			Windows::Internal::Tiles::TileTypes Type();
		};

		struct consume_Windows_Internal_Tiles_ITileNotification<Windows::Internal::Tiles::ITileNotification>
		{
			Windows::Internal::Tiles::ITile Tile();
		};

		struct consume_Windows_Internal_Tiles_ITileStoreFactory<Windows::Internal::Tiles::ITileStoreFactory>
		{
			Windows::Internal::Tiles::TileStore Create(Windows::System::User const &);
		};

		struct consume_Windows_Internal_UI_Shell_IWindowTabDataModel<Windows::Internal::UI::Shell::IWindowTabDataModel>
		{
			Windows::Foundation::Collections::IVectorView<Windows::Internal::UI::Shell::WindowTabView> Tabs();
			Windows::Internal::UI::Shell::WindowTabView ActiveTab();
			unsigned int WindowId();
		};

		struct consume_Windows_Internal_UI_Shell_IWindowTabDataModelStatics<Windows::Internal::UI::Shell::IWindowTabDataModelStatics>
		{
			Windows::Foundation::IAsyncOperation<Windows::Internal::UI::Shell::WindowTabDataModel> TryGetForWindowAsync(unsigned int,Windows::System::User const &);
		};

		struct consume_Windows_Internal_UI_Shell_IWindowTabView<Windows::Internal::UI::Shell::IWindowTabView>
		{
			Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> GetIconAsync();
			Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> GetThumbnailAsync(Windows::Graphics::Imaging::BitmapSize const &,bool);
			guid Id();
			hstring IconFontFamily();
			hstring IconGlyph();
			hstring Title();
			hstring TreatAsSecondaryTileId();
			void TabChanged(event_token const &);
		};

		struct consume_Windows_Internal_UI_Shell_IWindowTabViewPropertyChangedEventArgs<Windows::Internal::UI::Shell::IWindowTabViewPropertyChangedEventArgs>
		{
			Windows::Internal::UI::Shell::WindowTabView Tab();
		};

		struct consume_Windows_Internal_UI_Shell_IWindowTabsChangedEventArgsFactory<Windows::Internal::UI::Shell::IWindowTabsChangedEventArgsFactory>
		{
			Windows::Internal::UI::Shell::WindowTabsChangedEventArgs CreateInstance(unsigned __int64);
		};

		struct consume_Windows_Networking_Connectivity_INetworkInformationStatics<Windows::Networking::Connectivity::INetworkInformationStatics>
		{
			Windows::Networking::Connectivity::ConnectionProfile GetInternetConnectionProfile();
			event_token NetworkStatusChanged(Windows::Networking::Connectivity::NetworkStatusChangedEventHandler const &);
			void NetworkStatusChanged(event_token const &);
		};

		struct consume_Windows_Storage_Streams_IRandomAccessStreamReference<Windows::Storage::Streams::IRandomAccessStreamReference>
		{
			Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> OpenReadAsync();
		};

		struct consume_Windows_UI_ViewManagement_IUISettings3<Windows::UI::ViewManagement::UISettings>
		{
			Windows::UI::Color GetColorValue(Windows::UI::ViewManagement::UIColorType const &);
		};

		struct delegate<Windows::Foundation::AsyncOperationCompletedHandler<bool>,<lambda_9783efd0cf9a4011a5fefd366cc6ea27> >
		{
			virtual int Invoke(void *,int);
		};

		struct delegate<Windows::Foundation::AsyncOperationCompletedHandler<unsigned int>,<lambda_6db4ebbdf38e00e5e14b8dc39eeb8db6> >
		{
			virtual int Invoke(void *,int);
		};

		struct delegate<Windows::Foundation::TypedEventHandler<Windows::Internal::Tiles::TileStore,Windows::Internal::Tiles::TileStoreChangedEventArgs>,<lambda_ae2144ca514bc0fccfa4c87b511bcbf7> >
		{
			virtual int Invoke(void *,void *);
		};

		struct delegate<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::WindowTabDataModel,Windows::Internal::UI::Shell::WindowTabDataModelActiveTabChangedEventArgs>,<lambda_bd0895ad6d8416644174f66c64660633> >
		{
			virtual int Invoke(void *,void *);
		};

		struct delegate<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::WindowTabDataModel,Windows::Internal::UI::Shell::WindowTabDataModelTabsChangedEventArgs>,<lambda_69f91e77421940a58b7abb1c2dc0e920> >
		{
			virtual int Invoke(void *,void *);
		};

		struct delegate<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::WindowTabView,Windows::Internal::UI::Shell::WindowTabViewPropertyChangedEventArgs>,<lambda_183baf27b090b4cfecd741efea205505> >
		{
			virtual int Invoke(void *,void *);
		};

		struct delegate<Windows::Networking::Connectivity::NetworkStatusChangedEventHandler,<lambda_3ef85c4d1ebd821e1b68fbafce108a81> >
		{
			virtual int Invoke(void *);
		};

		struct factory_cache_entry<Windows::ApplicationModel::AppInfo,Windows::ApplicationModel::IAppInfoStatics>
		{
			struct count_guard
			{
				~count_guard();
			};

			Windows::ApplicationModel::AppInfo call<<lambda_38c729b784d0ceaabb1b176d3af54f15> &>(<lambda_38c729b784d0ceaabb1b176d3af54f15> &);
		};

		struct factory_cache_entry<Windows::Internal::Tiles::TileStore,Windows::Internal::Tiles::ITileStoreFactory>
		{
			struct count_guard
			{
				~count_guard();
			};

			Windows::Internal::Tiles::TileStore call<<lambda_31f126833dad2da04de7641ee9fe3453> &>(<lambda_31f126833dad2da04de7641ee9fe3453> &);
		};

		struct factory_cache_entry<Windows::Internal::UI::Shell::WindowTabDataModel,Windows::Internal::UI::Shell::IWindowTabDataModelStatics>
		{
			struct count_guard
			{
				~count_guard();
			};

			Windows::Foundation::IAsyncOperation<Windows::Internal::UI::Shell::WindowTabDataModel> call<<lambda_1901c9f891705b2d33e723e5fa102f44> &>(<lambda_1901c9f891705b2d33e723e5fa102f44> &);
		};

		struct factory_cache_entry<Windows::Internal::UI::Shell::WindowTabsChangedEventArgs,Windows::Internal::UI::Shell::IWindowTabsChangedEventArgsFactory>
		{
			struct count_guard
			{
				~count_guard();
			};

			Windows::Internal::UI::Shell::WindowTabsChangedEventArgs call<<lambda_ed1a0a1124bc0bd6e2829c576bea0b94> &>(<lambda_ed1a0a1124bc0bd6e2829c576bea0b94> &);
		};

		struct factory_cache_entry<Windows::Networking::Connectivity::NetworkInformation,Windows::Networking::Connectivity::INetworkInformationStatics>
		{
			struct count_guard
			{
				~count_guard();
			};

			Windows::Networking::Connectivity::ConnectionProfile call<<lambda_c33160ded50b557154f45d43ca471d98> &>(<lambda_c33160ded50b557154f45d43ca471d98> &);
			event_token call<<lambda_079b32de1bcc0433bc32547eed68dcb6> &>(<lambda_079b32de1bcc0433bc32547eed68dcb6> &);
			void call<<lambda_43fb67edc03a13e09baac6523e5cae48> &>(<lambda_43fb67edc03a13e09baac6523e5cae48> &);
		};

		struct factory_cache_entry<Windows::UI::ViewManagement::UISettings,Windows::Foundation::IActivationFactory>
		{
			struct count_guard
			{
				~count_guard();
			};

			Windows::UI::ViewManagement::UISettings call<<lambda_f92aa4e0a61c3892856266e5a8e834f7> &>(<lambda_f92aa4e0a61c3892856266e5a8e834f7> &);
		};

		struct factory_cache_entry<WindowsUdk::ApplicationModel::AppExtensions::AppExtensionCatalog,WindowsUdk::ApplicationModel::AppExtensions::IAppExtensionCatalogStatics>
		{
			struct count_guard
			{
				~count_guard();
			};

			WindowsUdk::ApplicationModel::AppExtensions::AppExtensionCatalog call<<lambda_3174d6f28dd4ff66a1abe0cc6653db52> &>(<lambda_3174d6f28dd4ff66a1abe0cc6653db52> &);
			WindowsUdk::ApplicationModel::AppExtensions::AppExtensionCatalog call<<lambda_722bf15f14af49770b27fb8f87b12f2a> &>(<lambda_722bf15f14af49770b27fb8f87b12f2a> &);
		};

		struct factory_cache_entry<WindowsUdk::ApplicationModel::OnScreenInput::KnownOnScreenInputUriSchemes,WindowsUdk::ApplicationModel::OnScreenInput::IKnownOnScreenInputUriSchemesStatics>
		{
			struct count_guard
			{
				~count_guard();
			};

			hstring call<<lambda_00b3774f9078045c1aa70b56771c2efa> &>(<lambda_00b3774f9078045c1aa70b56771c2efa> &);
			hstring call<<lambda_05e39fdbbd0784dad012bd949204650c> &>(<lambda_05e39fdbbd0784dad012bd949204650c> &);
			hstring call<<lambda_1ffd59018855fb89b3c56dc6f41cf375> &>(<lambda_1ffd59018855fb89b3c56dc6f41cf375> &);
			hstring call<<lambda_219ba87fda1bc26eb509e12aa5e8d64e> &>(<lambda_219ba87fda1bc26eb509e12aa5e8d64e> &);
			hstring call<<lambda_3926c876df9a6804a7d45e4f2f4de4a5> &>(<lambda_3926c876df9a6804a7d45e4f2f4de4a5> &);
			hstring call<<lambda_57def334eb806b831ae6b502ff695a61> &>(<lambda_57def334eb806b831ae6b502ff695a61> &);
			hstring call<<lambda_5bfd7240c422490eee7f7142828ab1e5> &>(<lambda_5bfd7240c422490eee7f7142828ab1e5> &);
			hstring call<<lambda_7d7240396637d52ed50a5121d23cbd61> &>(<lambda_7d7240396637d52ed50a5121d23cbd61> &);
			hstring call<<lambda_82c99ec4d19f9d15ecf1f83b9d813b96> &>(<lambda_82c99ec4d19f9d15ecf1f83b9d813b96> &);
			hstring call<<lambda_88745e007dfedd379b55b7a9f3b54353> &>(<lambda_88745e007dfedd379b55b7a9f3b54353> &);
			hstring call<<lambda_c524c4e93bfc74da6a9af6924e8d20d5> &>(<lambda_c524c4e93bfc74da6a9af6924e8d20d5> &);
			hstring call<<lambda_ed637fd168f1f4f3045ed0bc13ffbd05> &>(<lambda_ed637fd168f1f4f3045ed0bc13ffbd05> &);
		};

		struct factory_cache_entry<WindowsUdk::UI::Shell::ViewCoordinator,WindowsUdk::UI::Shell::IViewCoordinatorStatics>
		{
			struct count_guard
			{
				~count_guard();
			};

			WindowsUdk::UI::Shell::ViewCoordinator call<<lambda_711c13f4a08a1e89e6ea62835a20ef04> &>(<lambda_711c13f4a08a1e89e6ea62835a20ef04> &);
		};

		struct fast_iterator<Windows::Foundation::Collections::IVectorView<Windows::Internal::UI::Shell::WindowTabView> >
		{
			Windows::Internal::UI::Shell::WindowTabView operator*();
		};

		struct guid_storage<IAgileObject>
		{
			static guid const value;
		};

		struct guid_storage<IApplicationViewChangeListener>
		{
			static guid const value;
		};

		struct guid_storage<ICallbackWithNoReentrancyToApplicationSTA>
		{
			static guid const value;
		};

		struct guid_storage<IContextCallback>
		{
			static guid const value;
		};

		struct guid_storage<IGraphicsCaptureItemInterop>
		{
			static guid const value;
		};

		struct guid_storage<IImmersiveSettingsCacheNotification>
		{
			static guid const value;
		};

		struct guid_storage<IImmersiveShellComponent>
		{
			static guid const value;
		};

		struct guid_storage<IInspectable>
		{
			static guid const value;
		};

		struct guid_storage<ILanguageExceptionErrorInfo2>
		{
			static guid const value;
		};

		struct guid_storage<IMarshal>
		{
			static guid const value;
		};

		struct guid_storage<IObjectWithSite>
		{
			static guid const value;
		};

		struct guid_storage<IServiceProvider>
		{
			static guid const value;
		};

		struct guid_storage<IStream>
		{
			static guid const value;
		};

		struct guid_storage<IUnknown>
		{
			static guid const value;
		};

		struct guid_storage<IWeakReference>
		{
			static guid const value;
		};

		struct guid_storage<IWeakReferenceSource>
		{
			static guid const value;
		};

		struct guid_storage<VirtualDesktopNotificationBase<IVirtualDesktopNotification> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::ApplicationModel::IAppInfoStatics>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::AsyncOperationCompletedHandler<Windows::Internal::UI::Shell::WindowTabDataModel> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::AsyncOperationCompletedHandler<Windows::Storage::Streams::IRandomAccessStreamReference> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::AsyncOperationCompletedHandler<Windows::Storage::Streams::IRandomAccessStreamWithContentType> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::AsyncOperationCompletedHandler<bool> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::AsyncOperationCompletedHandler<hstring> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::AsyncOperationCompletedHandler<unsigned int> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::IActivationFactory>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::IAsyncInfo>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::IAsyncOperation<bool> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::IAsyncOperation<unsigned int> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::IInspectable>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::IUnknown>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Tabs::TabDataModelWatcher,Windows::Internal::ComposableShell::Tabs::TabDataModelTabsChangedEventArgs> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::TypedEventHandler<Windows::Internal::Tiles::TileStore,Windows::Internal::Tiles::TileStoreChangedEventArgs> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::WindowTabDataModel,Windows::Internal::UI::Shell::WindowTabDataModelActiveTabChangedEventArgs> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::WindowTabDataModel,Windows::Internal::UI::Shell::WindowTabDataModelTabsChangedEventArgs> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::WindowTabView,Windows::Internal::UI::Shell::WindowTabViewPropertyChangedEventArgs> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Foundation::TypedEventHandler<WindowsUdk::UI::Shell::ViewCoordinator,WindowsUdk::UI::Shell::HideViewRequestedEventArgs> >
		{
			static guid const value;
		};

		struct guid_storage<Windows::Graphics::Capture::IGraphicsCaptureItem>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::ComposableShell::Tabs::ITabDataModel>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::Shell::DragDropSimulator::IDragDropSimulator>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::Shell::ITabProxyWindowFactoryInternal>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::Shell::ITabProxyWindowInternal>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::Shell::IWindowTabHost>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::Shell::IWindowTabHostInternal>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::Shell::ShellFeeds::IShellFeedsLauncher>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::Tiles::ITileStoreFactory>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::UI::Shell::IWindowTabBrokerStatics>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::UI::Shell::IWindowTabDataModelStatics>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::UI::Shell::IWindowTabExtension>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Internal::UI::Shell::IWindowTabsChangedEventArgsFactory>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Networking::Connectivity::INetworkInformationStatics>
		{
			static guid const value;
		};

		struct guid_storage<Windows::Networking::Connectivity::NetworkStatusChangedEventHandler>
		{
			static guid const value;
		};

		struct guid_storage<Windows::UI::ViewManagement::IUISettings3>
		{
			static guid const value;
		};

		struct guid_storage<Windows::UI::ViewManagement::IUISettings>
		{
			static guid const value;
		};

		struct guid_storage<WindowsUdk::ApplicationModel::AppExtensions::IAppExtensionCatalogStatics>
		{
			static guid const value;
		};

		struct guid_storage<WindowsUdk::ApplicationModel::OnScreenInput::IKnownOnScreenInputUriSchemesStatics>
		{
			static guid const value;
		};

		struct guid_storage<WindowsUdk::UI::Shell::IViewCoordinator>
		{
			static guid const value;
		};

		struct guid_storage<WindowsUdk::UI::Shell::IViewCoordinatorStatics>
		{
			static guid const value;
		};

		struct heap_implements<details::module_count_wrapper<Windows::Internal::Shell::implementation::WindowTabHost> >
		{
			heap_implements<details::module_count_wrapper<Windows::Internal::Shell::implementation::WindowTabHost> >();
		};

		struct hstring_builder
		{
			hstring to_hstring();
			~hstring_builder();
		};

		struct implements_delegate<Windows::Foundation::AsyncOperationCompletedHandler<bool>,<lambda_9783efd0cf9a4011a5fefd366cc6ea27> >
		{
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct implements_delegate<Windows::Foundation::AsyncOperationCompletedHandler<unsigned int>,<lambda_6db4ebbdf38e00e5e14b8dc39eeb8db6> >
		{
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct implements_delegate<Windows::Foundation::TypedEventHandler<Windows::Internal::Tiles::TileStore,Windows::Internal::Tiles::TileStoreChangedEventArgs>,<lambda_ae2144ca514bc0fccfa4c87b511bcbf7> >
		{
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct implements_delegate<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::WindowTabDataModel,Windows::Internal::UI::Shell::WindowTabDataModelActiveTabChangedEventArgs>,<lambda_bd0895ad6d8416644174f66c64660633> >
		{
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct implements_delegate<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::WindowTabDataModel,Windows::Internal::UI::Shell::WindowTabDataModelTabsChangedEventArgs>,<lambda_69f91e77421940a58b7abb1c2dc0e920> >
		{
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct implements_delegate<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::WindowTabView,Windows::Internal::UI::Shell::WindowTabViewPropertyChangedEventArgs>,<lambda_183baf27b090b4cfecd741efea205505> >
		{
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct implements_delegate<Windows::Networking::Connectivity::NetworkStatusChangedEventHandler,<lambda_3ef85c4d1ebd821e1b68fbafce108a81> >
		{
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct interface_list<IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,Windows::Internal::Shell::IWindowTabHostInternal>
		{
			static void * find<Windows::Internal::Shell::implementation::WindowTabHost,iid_finder>(Windows::Internal::Shell::implementation::WindowTabHost const *,iid_finder const &);
		};

		struct interface_list<IImmersiveShellComponent,Windows::Foundation::IInspectable,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,Windows::Internal::Shell::IWindowTabHostInternal>
		{
			static void * find<Windows::Internal::Shell::implementation::WindowTabHost,iid_finder>(Windows::Internal::Shell::implementation::WindowTabHost const *,iid_finder const &);
		};

		struct interface_list<IImmersiveShellComponent,Windows::Foundation::IInspectable,Windows::Internal::Shell::ShellFeeds::IShellFeedsLauncher>
		{
			static void * find<Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher,iid_finder>(Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher const *,iid_finder const &);
		};

		struct interface_list<IImmersiveShellComponent,Windows::Foundation::IInspectable>
		{
			static void * find<immersive_shell_component,iid_finder>(immersive_shell_component const *,iid_finder const &);
		};

		struct interface_list<IObjectWithSite,IServiceProvider,IImmersiveShellComponent,Windows::Foundation::IInspectable,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,Windows::Internal::Shell::IWindowTabHostInternal>
		{
			static void * find<Windows::Internal::Shell::implementation::WindowTabHost,iid_finder>(Windows::Internal::Shell::implementation::WindowTabHost const *,iid_finder const &);
		};

		struct interface_list<IServiceProvider,IImmersiveShellComponent,Windows::Foundation::IInspectable,Windows::Internal::Shell::DragDropSimulator::IDragDropSimulator>
		{
			static void * find<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent,iid_finder>(Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent const *,iid_finder const &);
		};

		struct interface_list<VirtualDesktopNotificationBase<IVirtualDesktopNotification>,Windows::Internal::Shell::IWindowTabHostInternal>
		{
			static void * find<Windows::Internal::Shell::implementation::WindowTabHost,iid_finder>(Windows::Internal::Shell::implementation::WindowTabHost const *,iid_finder const &);
		};

		struct interface_list<Windows::Foundation::IInspectable,Windows::Internal::Shell::DragDropSimulator::IDragDropSimulator>
		{
			static void * find<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent,iid_finder>(Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent const *,iid_finder const &);
		};

		struct name<IObjectWithSite>
		{
			static std::array<unsigned short,39> const value;
		};

		struct name<Windows::Foundation::IAsyncOperation<bool> >
		{
			static std::array<unsigned short,46> const value;
		};

		struct name<Windows::Foundation::IAsyncOperation<unsigned int> >
		{
			static std::array<unsigned short,45> const value;
		};

		struct name<Windows::Internal::Shell::ITabProxyWindowFactoryInternal>
		{
			static std::array<unsigned short,39> const value;
		};

		struct name<Windows::Internal::Shell::ITabProxyWindowInternal>
		{
			static std::array<unsigned short,39> const value;
		};

		struct produce<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent,Windows::Internal::Shell::DragDropSimulator::IDragDropSimulator>
		{
			virtual int InsertAsync(void *,int,void * *);
			virtual int IsSupportedAsync(void *,int,void * *);
		};

		struct produce<Windows::Internal::Shell::implementation::WindowTabHost,Windows::Internal::UI::Shell::IWindowTabExtension>
		{
			virtual int IsSupported(bool *);
			virtual int UpdateTabsForWindow(unsigned __int64);
			virtual int WindowTabsChanged(void *,event_token *);
			virtual int WindowTabsChanged2(event_token);
		};

		struct produce<std::experimental::coroutine_traits<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type,Windows::Foundation::IAsyncInfo>
		{
			virtual int Cancel();
			virtual int Close();
			virtual int get_ErrorCode(hresult *);
			virtual int get_Id(unsigned int *);
			virtual int get_Status(int *);
		};

		struct produce<std::experimental::coroutine_traits<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type,Windows::Foundation::IAsyncOperation<unsigned int> >
		{
			virtual int GetResults(unsigned int *);
			virtual int get_Completed(void * *);
			virtual int put_Completed(void *);
		};

		struct produce_base<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent,Windows::Internal::Shell::DragDropSimulator::IDragDropSimulator,void>
		{
			virtual int GetIids(unsigned int *,guid * *);
			virtual int GetRuntimeClassName(void * *);
			virtual int GetTrustLevel(Windows::Foundation::TrustLevel *);
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct produce_base<Windows::Internal::Shell::implementation::WindowTabHost,Windows::Internal::Shell::IWindowTabHost,void>
		{
			virtual int GetIids(unsigned int *,guid * *);
			virtual int GetRuntimeClassName(void * *);
			virtual int GetTrustLevel(Windows::Foundation::TrustLevel *);
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct produce_base<Windows::Internal::Shell::implementation::WindowTabHost,Windows::Internal::UI::Shell::IWindowTabExtension,void>
		{
			Windows::Internal::Shell::implementation::WindowTabHost & shim();
			virtual int GetIids(unsigned int *,guid * *);
			virtual int GetRuntimeClassName(void * *);
			virtual int GetTrustLevel(Windows::Foundation::TrustLevel *);
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct produce_base<immersive_shell_component,Windows::Foundation::IInspectable,void>
		{
			virtual int GetIids(unsigned int *,guid * *);
			virtual int GetRuntimeClassName(void * *);
			virtual int GetTrustLevel(Windows::Foundation::TrustLevel *);
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct produce_base<std::experimental::coroutine_traits<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type,Windows::Foundation::IAsyncInfo,void>
		{
			virtual int GetIids(unsigned int *,guid * *);
			virtual int GetRuntimeClassName(void * *);
			virtual int GetTrustLevel(Windows::Foundation::TrustLevel *);
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct produce_base<std::experimental::coroutine_traits<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type,Windows::Foundation::IAsyncOperation<unsigned int>,void>
		{
			virtual int GetIids(unsigned int *,guid * *);
			virtual int GetRuntimeClassName(void * *);
			virtual int GetTrustLevel(Windows::Foundation::TrustLevel *);
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct producer_ref<Windows::Foundation::IAsyncOperation<bool> >
		{
			~producer_ref<Windows::Foundation::IAsyncOperation<bool> >();
		};

		struct producer_ref<Windows::Foundation::IAsyncOperation<unsigned int> >
		{
			~producer_ref<Windows::Foundation::IAsyncOperation<unsigned int> >();
		};

		struct producer_ref<Windows::Internal::Shell::WindowTabHost>
		{
			~producer_ref<Windows::Internal::Shell::WindowTabHost>();
		};

		struct producers_base<Windows::Internal::Shell::implementation::WindowTabHost,std::tuple<Windows::Internal::Shell::WindowTabHost,Windows::Internal::Shell::IWindowTabHost,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,Windows::Internal::Shell::IWindowTabHostInternal> >
		{
			producers_base<Windows::Internal::Shell::implementation::WindowTabHost,std::tuple<Windows::Internal::Shell::WindowTabHost,Windows::Internal::Shell::IWindowTabHost,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,Windows::Internal::Shell::IWindowTabHostInternal> >();
		};

		class promise_base<std::experimental::coroutine_traits<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type,Windows::Foundation::IAsyncOperation<unsigned int>,void>
		{
			struct final_suspend_awaiter
			{
				bool await_ready();
				bool await_suspend(std::experimental::coroutine_handle<void>);
				void await_resume();
			};

		protected:
			void rethrow_if_failed();
		public:
			Windows::Foundation::AsyncStatus Status();
			Windows::Foundation::IAsyncOperation<unsigned int> get_return_object();
			final_suspend_awaiter promise_base<std::experimental::coroutine_traits<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type,Windows::Foundation::IAsyncOperation<unsigned int>,void>::final_suspend();
			hresult ErrorCode();
			std::experimental::suspend_never initial_suspend();
			unsigned long Release();
			virtual ~promise_base<std::experimental::coroutine_traits<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type,Windows::Foundation::IAsyncOperation<unsigned int>,void>();
			void Cancel();
			void Completed(Windows::Foundation::AsyncOperationCompletedHandler<unsigned int> const &);
			void unhandled_exception();
		};

		class root_implements<Windows::Internal::Shell::implementation::TabProxyWindow,Windows::Internal::Shell::ITabProxyWindowInternal>
		{
			int query_interface(guid const &,void * *);
			virtual Windows::Foundation::TrustLevel GetTrustLevel();
		protected:
			int NonDelegatingGetIids(unsigned int *,guid * *);
			int NonDelegatingGetRuntimeClassName(void * *);
			int NonDelegatingGetTrustLevel(Windows::Foundation::TrustLevel *);
			virtual int query_interface_tearoff(guid const &,void * *);
		};

		class root_implements<Windows::Internal::Shell::implementation::TabProxyWindowFactory,Windows::Internal::Shell::ITabProxyWindowFactoryInternal>
		{
			int query_interface(guid const &,void * *);
			virtual Windows::Foundation::TrustLevel GetTrustLevel();
		protected:
			int NonDelegatingGetIids(unsigned int *,guid * *);
			int NonDelegatingGetRuntimeClassName(void * *);
			int NonDelegatingGetTrustLevel(Windows::Foundation::TrustLevel *);
			virtual int query_interface_tearoff(guid const &,void * *);
		};

		class root_implements<immersive_shell_component,IObjectWithSite,IServiceProvider,IImmersiveShellComponent,Windows::Foundation::IInspectable>
		{
			struct abi_guard
			{
				abi_guard(immersive_shell_component &);
			};

			IWeakReferenceSource * make_weak_ref();
			int query_interface(guid const &,void * *);
			virtual Windows::Foundation::TrustLevel GetTrustLevel();
		protected:
			int NonDelegatingGetIids(unsigned int *,guid * *);
			int NonDelegatingGetRuntimeClassName(void * *);
			int NonDelegatingGetTrustLevel(Windows::Foundation::TrustLevel *);
			unsigned int subtract_reference();
			virtual int query_interface_tearoff(guid const &,void * *);
			virtual ~root_implements<immersive_shell_component,IObjectWithSite,IServiceProvider,IImmersiveShellComponent,Windows::Foundation::IInspectable>();
		public:
			unsigned int AddRef();
			unsigned int Release();
		};

		class root_implements<std::experimental::coroutine_traits<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type,Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Foundation::IAsyncInfo>
		{
			IWeakReferenceSource * make_weak_ref();
			int query_interface(guid const &,void * *);
			virtual Windows::Foundation::TrustLevel GetTrustLevel();
		protected:
			int NonDelegatingGetRuntimeClassName(void * *);
			int NonDelegatingGetTrustLevel(Windows::Foundation::TrustLevel *);
			unsigned int subtract_reference();
			virtual int query_interface_tearoff(guid const &,void * *);
			virtual ~root_implements<std::experimental::coroutine_traits<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type,Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Foundation::IAsyncInfo>();
		};

		struct runtime_class_name<IObjectWithSite,void>
		{
			static hstring get();
		};

		struct runtime_class_name<Windows::Foundation::IAsyncOperation<bool>,void>
		{
			static hstring get();
		};

		struct runtime_class_name<Windows::Foundation::IAsyncOperation<unsigned int>,void>
		{
			static hstring get();
		};

		struct uncloaked_iids<interface_list<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncInfo> >
		{
			static std::array<guid,2> const value;
		};

		struct uncloaked_iids<interface_list<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Foundation::IAsyncInfo> >
		{
			static std::array<guid,2> const value;
		};

		struct uncloaked_iids<interface_list<Windows::Internal::Shell::DragDropSimulator::IDragDropSimulator> >
		{
			static std::array<guid,1> const value;
		};

		struct uncloaked_iids<interface_list<Windows::Internal::Shell::WindowTabHost,Windows::Internal::Shell::IWindowTabHost> >
		{
			static std::array<guid,2> const value;
		};

		struct weak_ref<1>
		{
			unsigned int decrement_strong();
			virtual int QueryInterface(guid const &,void * *);
			virtual int Resolve(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		struct weak_source<1>
		{
			virtual int GetWeakReference(IWeakReference * *);
			virtual int QueryInterface(guid const &,void * *);
			virtual unsigned int AddRef();
			virtual unsigned int Release();
		};

		Windows::Foundation::AsyncOperationCompletedHandler<bool> make_agile_delegate<Windows::Foundation::AsyncOperationCompletedHandler<bool> >(Windows::Foundation::AsyncOperationCompletedHandler<bool> const &);
		Windows::Foundation::AsyncOperationCompletedHandler<unsigned int> make_agile_delegate<Windows::Foundation::AsyncOperationCompletedHandler<unsigned int> >(Windows::Foundation::AsyncOperationCompletedHandler<unsigned int> const &);
		Windows::Foundation::IActivationFactory try_get_activation_factory<WindowsUdk::ApplicationModel::AppExtensions::AppExtensionCatalog,Windows::Foundation::IActivationFactory>(hresult_error *);
		Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> make_agile_delegate<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> >(Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> const &);
		Windows::Internal::ComposableShell::Tabs::TabDataModel as<Windows::Internal::ComposableShell::Tabs::TabDataModel,IInspectable>(IInspectable *);
		Windows::Internal::UI::Shell::WindowTabDataModel wait_get<Windows::Foundation::IAsyncOperation<Windows::Internal::UI::Shell::WindowTabDataModel> >(Windows::Foundation::IAsyncOperation<Windows::Internal::UI::Shell::WindowTabDataModel> const &);
		Windows::Storage::Streams::IRandomAccessStreamReference wait_get<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> >(Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> const &);
		Windows::Storage::Streams::IRandomAccessStreamWithContentType wait_get<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> >(Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> const &);
		bool invoke<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs>,Windows::Internal::Shell::implementation::WindowTabHost,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs>(Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> const &,Windows::Internal::Shell::implementation::WindowTabHost const &,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs const &);
		com_ptr<IInspectable> as<IInspectable,abi<Windows::Foundation::IUnknown,void>::type>(impl::abi<Windows::Foundation::IUnknown,void>::type *);
		com_ptr<IServiceProvider> as<IServiceProvider,immersive_shell_component>(immersive_shell_component *);
		com_ptr<IUnknown> as<IUnknown,IObjectWithSite>(IObjectWithSite *);
		com_ptr<impl::IWeakReferenceSource> as<IWeakReferenceSource,abi<Windows::Foundation::IUnknown,void>::type>(impl::abi<Windows::Foundation::IUnknown,void>::type *);
		com_ptr<impl::event_array<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> > > make_event_array<Windows::Foundation::TypedEventHandler<Windows::Internal::UI::Shell::IWindowTabExtension,Windows::Internal::UI::Shell::WindowTabsChangedEventArgs> >(unsigned int);
		hresult const error_access_denied;
		hresult const error_canceled;
		hresult const error_changed_state;
		hresult const error_class_not_available;
		hresult const error_fail;
		hresult const error_illegal_delegate_assignment;
		hresult const error_illegal_method_call;
		hresult const error_illegal_state_change;
		hresult const error_invalid_argument;
		hresult const error_no_interface;
		hresult const error_not_implemented;
		hresult const error_out_of_bounds;
		hresult const error_wrong_thread;
		hstring trim_hresult_message(unsigned short const * const,unsigned int);
		hstring wait_get<Windows::Foundation::IAsyncOperation<hstring> >(Windows::Foundation::IAsyncOperation<hstring> const &);
		impl::fast_iterator<Windows::Foundation::Collections::IVectorView<Windows::Internal::UI::Shell::WindowTabView> > end<Windows::Foundation::Collections::IVectorView<Windows::Internal::UI::Shell::WindowTabView>,0>(Windows::Foundation::Collections::IVectorView<Windows::Internal::UI::Shell::WindowTabView> const &);
		int make_marshaler(impl::abi<Windows::Foundation::IUnknown,void>::type *,void * *);
		void * duplicate_string(void *);
		void wait_for_completed<Windows::Foundation::IAsyncOperation<Windows::Internal::UI::Shell::WindowTabDataModel> >(Windows::Foundation::IAsyncOperation<Windows::Internal::UI::Shell::WindowTabDataModel> const &,unsigned int);
		void wait_for_completed<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> >(Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> const &,unsigned int);
		void wait_for_completed<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> >(Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> const &,unsigned int);
		void wait_for_completed<Windows::Foundation::IAsyncOperation<hstring> >(Windows::Foundation::IAsyncOperation<hstring> const &,unsigned int);
	};

	class implements<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent,immersive_shell_component,Windows::Internal::Shell::DragDropSimulator::IDragDropSimulator>
	{
		virtual hstring GetRuntimeClassName();
		virtual impl::abi<Windows::Foundation::IUnknown,void>::type * get_unknown();
	public:
		com_ptr<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent> get_strong();
		virtual impl::abi<Windows::Foundation::IInspectable,void>::type * find_inspectable();
		virtual long QueryInterface(_GUID const &,void * *);
		virtual std::pair<unsigned int,guid const *> get_local_iids();
		virtual unsigned long AddRef();
		virtual unsigned long Release();
		virtual void * find_interface(guid const &);
		virtual ~implements<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent,immersive_shell_component,Windows::Internal::Shell::DragDropSimulator::IDragDropSimulator>();
	};

	class implements<Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher,immersive_shell_component,Windows::Internal::Shell::ShellFeeds::IShellFeedsLauncher>
	{
		virtual hstring GetRuntimeClassName();
		virtual impl::abi<Windows::Foundation::IUnknown,void>::type * get_unknown();
	public:
		virtual impl::abi<Windows::Foundation::IInspectable,void>::type * find_inspectable();
		virtual long QueryInterface(_GUID const &,void * *);
		virtual std::pair<unsigned int,guid const *> get_local_iids();
		virtual unsigned long AddRef();
		virtual unsigned long Release();
		virtual void * find_interface(guid const &);
		virtual ~implements<Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher,immersive_shell_component,Windows::Internal::Shell::ShellFeeds::IShellFeedsLauncher>();
	};

	class implements<Windows::Internal::Shell::implementation::TabProxyWindow,Windows::Internal::Shell::ITabProxyWindowInternal>
	{
		virtual hstring GetRuntimeClassName();
		virtual impl::abi<Windows::Foundation::IUnknown,void>::type * get_unknown();
	public:
		com_ptr<Windows::Internal::Shell::implementation::TabProxyWindow> get_strong();
		virtual impl::abi<Windows::Foundation::IInspectable,void>::type * find_inspectable();
		virtual long QueryInterface(_GUID const &,void * *);
		virtual std::pair<unsigned int,guid const *> get_local_iids();
		virtual unsigned long AddRef();
		virtual unsigned long Release();
		virtual void * find_interface(guid const &);
		virtual ~implements<Windows::Internal::Shell::implementation::TabProxyWindow,Windows::Internal::Shell::ITabProxyWindowInternal>();
	};

	class implements<Windows::Internal::Shell::implementation::TabProxyWindowFactory,Windows::Internal::Shell::ITabProxyWindowFactoryInternal>
	{
		virtual hstring GetRuntimeClassName();
		virtual impl::abi<Windows::Foundation::IUnknown,void>::type * get_unknown();
	public:
		virtual impl::abi<Windows::Foundation::IInspectable,void>::type * find_inspectable();
		virtual long QueryInterface(_GUID const &,void * *);
		virtual std::pair<unsigned int,guid const *> get_local_iids();
		virtual unsigned long AddRef();
		virtual unsigned long Release();
		virtual void * find_interface(guid const &);
	};

	class implements<Windows::Internal::Shell::implementation::WindowTabHost,Windows::Internal::Shell::WindowTabHost,Windows::Internal::Shell::IWindowTabHost,immersive_shell_component,IApplicationViewChangeListener,IImmersiveSettingsCacheNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,cloaked<Windows::Internal::Shell::IWindowTabHostInternal> >
	{
		virtual hstring GetRuntimeClassName();
		virtual impl::abi<Windows::Foundation::IUnknown,void>::type * get_unknown();
	public:
		virtual impl::abi<Windows::Foundation::IInspectable,void>::type * find_inspectable();
		virtual long QueryInterface(_GUID const &,void * *);
		virtual std::pair<unsigned int,guid const *> get_local_iids();
		virtual unsigned long AddRef();
		virtual unsigned long Release();
		virtual void * find_interface(guid const &);
	};

	class implements<immersive_shell_component,IObjectWithSite,IServiceProvider,IImmersiveShellComponent,Windows::Foundation::IInspectable>
	{
		virtual hstring GetRuntimeClassName();
		virtual impl::abi<Windows::Foundation::IUnknown,void>::type * get_unknown();
	public:
		virtual impl::abi<Windows::Foundation::IInspectable,void>::type * find_inspectable();
		virtual long QueryInterface(_GUID const &,void * *);
		virtual std::pair<unsigned int,guid const *> get_local_iids();
		virtual unsigned long AddRef();
		virtual unsigned long Release();
		virtual void * find_interface(guid const &);
	};

	class implements<std::experimental::coroutine_traits<Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent *,wil::com_ptr_t<IDropTarget,wil::err_exception_policy> const &,wil::com_ptr_t<IDataObject,wil::err_exception_policy> const &,tagPOINT const &,bool>::promise_type,Windows::Foundation::IAsyncOperation<unsigned int>,Windows::Foundation::IAsyncInfo>
	{
		virtual hstring GetRuntimeClassName();
		virtual impl::abi<Windows::Foundation::IUnknown,void>::type * get_unknown();
	public:
		virtual impl::abi<Windows::Foundation::IInspectable,void>::type * find_inspectable();
		virtual std::pair<unsigned int,guid const *> get_local_iids();
		virtual void * find_interface(guid const &);
	};

	namespace param
	{
		struct hstring
		{
			hstring(std::basic_string_view<unsigned short,std::char_traits<unsigned short> > const &);
		};

	};

	struct slim_lock_guard
	{
		slim_lock_guard(slim_mutex &);
		~slim_lock_guard();
	};

	struct weak_ref<Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher>
	{
		Windows::Internal::ComposableShell::Tabs::ITabDataModelWatcher get();
	};

	struct wrl_class_factory<Windows::Internal::Shell::DragDropSimulator::implementation::DragDropSimulatorComponent>
	{
		virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	};

	struct wrl_class_factory<Windows::Internal::Shell::ShellFeeds::implementation::ShellFeedsLauncher>
	{
		virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	};

	struct wrl_class_factory<Windows::Internal::Shell::implementation::WindowTabHost>
	{
		virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	};

	IUnknown * get_unknown(winrt::Windows::Foundation::IUnknown const &);
	bool operator==(winrt::guid const &,winrt::guid const &);
	bool operator==(winrt::hstring const &,unsigned short const *);
	bool operator==(winrt::hstring const &,winrt::hstring const &);
	resume_after(std::chrono::duration<__int64,std::ratio<1,10000000> >);
	resume_background();
	void * * put_abi(winrt::Windows::Foundation::IUnknown &);
	void * check_pointer<void>(void *);
	void check_hresult(winrt::hresult);
	void terminate();
	void throw_hresult(winrt::hresult);
	void throw_last_error();
	winrt::Windows::ApplicationModel::IAppInfoStatics get_activation_factory<Windows::ApplicationModel::IAppInfoStatics>(winrt::param::hstring const &);
	winrt::Windows::Foundation::IActivationFactory get_activation_factory<Windows::Foundation::IActivationFactory>(winrt::param::hstring const &);
	winrt::Windows::Internal::Tiles::ITileStoreFactory get_activation_factory<Windows::Internal::Tiles::ITileStoreFactory>(winrt::param::hstring const &);
	winrt::Windows::Internal::UI::Shell::IWindowTabBrokerStatics get_activation_factory<Windows::Internal::UI::Shell::IWindowTabBrokerStatics>(winrt::param::hstring const &);
	winrt::Windows::Internal::UI::Shell::IWindowTabDataModelStatics get_activation_factory<Windows::Internal::UI::Shell::IWindowTabDataModelStatics>(winrt::param::hstring const &);
	winrt::Windows::Internal::UI::Shell::IWindowTabsChangedEventArgsFactory get_activation_factory<Windows::Internal::UI::Shell::IWindowTabsChangedEventArgsFactory>(winrt::param::hstring const &);
	winrt::Windows::Networking::Connectivity::INetworkInformationStatics get_activation_factory<Windows::Networking::Connectivity::INetworkInformationStatics>(winrt::param::hstring const &);
	winrt::WindowsUdk::ApplicationModel::AppExtensions::IAppExtensionCatalogStatics get_activation_factory<WindowsUdk::ApplicationModel::AppExtensions::IAppExtensionCatalogStatics>(winrt::param::hstring const &);
	winrt::WindowsUdk::ApplicationModel::OnScreenInput::IKnownOnScreenInputUriSchemesStatics get_activation_factory<WindowsUdk::ApplicationModel::OnScreenInput::IKnownOnScreenInputUriSchemesStatics>(winrt::param::hstring const &);
	winrt::WindowsUdk::UI::Shell::IViewCoordinatorStatics get_activation_factory<WindowsUdk::UI::Shell::IViewCoordinatorStatics>(winrt::param::hstring const &);
	winrt::com_ptr<IGraphicsCaptureItemInterop> get_activation_factory<IGraphicsCaptureItemInterop>(winrt::param::hstring const &);
	winrt::hresult to_hresult();
	winrt::hstring to_hstring<char const *,void>(char const * const &);
};

namespace wistd
{
	namespace __function
	{
		struct __func<<lambda_0563a7498fa2099a7b0ac41648387e01>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_0fb969ea06db6495f91b0a5c05424999>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_13f52b9bbd6220b5ec5a9fd0808bc3fb>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_16c8187833c32606f3a44e94a5de32d3>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_1ab6ecd2f11dbe314e24c93c5bbe4a29>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_21967ee68d91b6fb0a0061610099019a>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_2532e8ff3850da9d761cbeb5a695a89f>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_2895e3bc2eadb71e7ea7bb4ffbe5a81f>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_295bd67ea2737b84b8cde5acfb2098a4>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_29f9b277c0e8279453faedac4a3ae410>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_2e28d516d95ca4e043bfbdb51595c70f>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_31fdfe1c04cb083c0b4c330f2bc219b0>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_3277ae5ec87fa85a2812407b34573390>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_3a15094655f0ad4f0122318438fc0cb9>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_3e8503622b4ebf611e6106347384cd87>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_4ea0b100659b49e250c4c20a6c651340>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_4f03d7c838c7c578cb43a692ccadb750>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_53d8c0fe9629641bd6aa37828aa5051b>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_548464be655e837fe70a6c635a8d08fa>,long (unsigned int,unsigned __int64,__int64)>
		{
			virtual void __clone(__base<long (unsigned int,unsigned __int64,__int64)> *);
			virtual void __move(__base<long (unsigned int,unsigned __int64,__int64)> *);
			virtual void destroy();
		};

		struct __func<<lambda_553a21490f169ffccc4a6de501e172bf>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_5672878332238225f65002b03f0817fd>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_59671855908fcf7d69f871ce983bcc7f>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_66f8cb2e4a745a42959e69ed39c49775>,long (unsigned int,unsigned __int64,__int64)>
		{
			virtual void __clone(__base<long (unsigned int,unsigned __int64,__int64)> *);
			virtual void __move(__base<long (unsigned int,unsigned __int64,__int64)> *);
			virtual void destroy();
		};

		struct __func<<lambda_6ecd27473e34d2c85ed5580b4b0cf56a>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_745a74014ea7d91fd18217dc5c864f34>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_82aa5f2d4b5f706e5568013be286c283>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_85f1821028f17a02db8122490c611f99>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_8b644478485393c9488f371d45ae8650>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_8db0ce862824541f40dfb767113f1e28>,bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>
		{
			virtual void __clone(__base<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)> *);
			virtual void __move(__base<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)> *);
			virtual void destroy();
		};

		struct __func<<lambda_8fb2622e9c399703a82f01481760af57>,long (unsigned int,unsigned __int64,__int64)>
		{
			virtual void __clone(__base<long (unsigned int,unsigned __int64,__int64)> *);
			virtual void __move(__base<long (unsigned int,unsigned __int64,__int64)> *);
			virtual void destroy();
		};

		struct __func<<lambda_90700428e7d05fbf95fa47d7bb07d14d>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_92c73f9535b0bc89577393b3541b9388>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_953690fdd96b541a6b63e7c206c51204>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_981d6f8b111e5fca3cbe4796bc87df4f>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_99ba3b9c33d985ca735a1a650d7db78e>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_9b3b8efadeae9b80f07c6789ded69a07>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_a3c90f3158cf6e02b32fafe85114b472>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_a9359ba1b3912c4237c6d32c3fbe7c28>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_a9aab8c56b31a08184618571b29ff169>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_ba8d26c60c9492540100e9d7fecf1321>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_bb8fbd677a66ce2f78cf5c6141b3460b>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_bd949d55cc9ec63e01ac4519c3d80796>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_bf5a31c6389a9a2e404680e018796d07>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_bff3641bf26a86aeb082b5bf5ec0081b>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_c2d6be381209f34dacbc2b1862b266e6>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_c77ebd57e75c5492ee747e3492d1d178>,long (unsigned short *,unsigned __int64,unsigned __int64 *)>
		{
			virtual void __clone(__base<long (unsigned short *,unsigned __int64,unsigned __int64 *)> *);
			virtual void __move(__base<long (unsigned short *,unsigned __int64,unsigned __int64 *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_c7db662dc10f15ba0700952d7b491e95>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_c96b6ed1c89637c60df1102a97355de3>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_ca3e972f3c17faa2e2ae023e25ad456b>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_cbb8aaa49d81df274072e54fa35a7719>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_d3551e8cbe95b5414828677bf83e520f>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_d3932215aefb1ae67aa84af1aba65e8a>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_d3eb828bd1a14f7fd2ad7ce4e25a01fd>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_da70b27b6f4bdadf52485f386e3241be>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_de045954d4a733453dc0d3e81e2a9431>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_e998bfa0f4464a812f7f330aa81ca6f1>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_f6971094aed337c398db6b84d0e01c7e>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

	};

	struct function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>
	{
		~function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>();
	};

	struct function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> *)>
	{
		~function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::FamilySafety::AppLimits::FamilyAppUsageManager *,Windows::Internal::FamilySafety::AppLimits::AppUsageStateChangedEventArgs *> *)>();
	};

	struct function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *> *)>
	{
		~function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,IInspectable *> *)>();
	};

	struct function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *> *)>
	{
		~function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IFrameworkViewTypeSetEventArgs *> *)>();
	};

	struct function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> *)>
	{
		~function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IPresentationReadyChangedEventArgs *> *)>();
	};

	struct function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> *)>
	{
		~function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::ITitleBarChangedEventArgs *> *)>();
	};

	struct function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> *)>
	{
		~function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostItemEventArgs *> *)>();
	};

	struct function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *)>
	{
		~function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewHostViewModeChangeRequestedEventArgs *> *)>();
	};

	struct function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *)>
	{
		~function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Holographic::IViewHostItem *,Windows::Internal::Shell::Holographic::IViewSizePreferencesChangedEventArgs *> *)>();
	};

	struct function<long (unsigned long)>
	{
		function<long (unsigned long)> & operator=(function<long (unsigned long)> const &);
		~function<long (unsigned long)>();
	};

	struct function<long (unsigned short *,unsigned __int64,unsigned __int64 *)>
	{
		long operator()(unsigned short *,unsigned __int64,unsigned __int64 *);
		~function<long (unsigned short *,unsigned __int64,unsigned __int64 *)>();
	};

	struct function<void ()>
	{
		void operator()();
		~function<void ()>();
	};

	struct function<void (_SEB_EVENT_HEADER const &)>
	{
		~function<void (_SEB_EVENT_HEADER const &)>();
	};

	struct function<void (unsigned char const &)>
	{
		~function<void (unsigned char const &)>();
	};

	struct function<void (unsigned char const (&)[32])>
	{
		~function<void (unsigned char const (&)[32])>();
	};

	struct function<void (unsigned long const &)>
	{
		~function<void (unsigned long const &)>();
	};

	struct unique_ptr<LockScreenDirectorServiceProviderImpl::INIT_THREAD_DATA,default_delete<LockScreenDirectorServiceProviderImpl::INIT_THREAD_DATA> >
	{
		~unique_ptr<LockScreenDirectorServiceProviderImpl::INIT_THREAD_DATA,default_delete<LockScreenDirectorServiceProviderImpl::INIT_THREAD_DATA> >();
	};

	struct unique_ptr<TwinUI::Cortana::CCortanaWNFService,default_delete<TwinUI::Cortana::CCortanaWNFService> >
	{
		~unique_ptr<TwinUI::Cortana::CCortanaWNFService,default_delete<TwinUI::Cortana::CCortanaWNFService> >();
	};

	struct unique_ptr<TwinUI::Cortana::ICortanaWNFService,default_delete<TwinUI::Cortana::ICortanaWNFService> >
	{
		void reset(TwinUI::Cortana::ICortanaWNFService *);
		~unique_ptr<TwinUI::Cortana::ICortanaWNFService,default_delete<TwinUI::Cortana::ICortanaWNFService> >();
	};

	struct unique_ptr<TwinUI::Cortana::IPositionerSelector,default_delete<TwinUI::Cortana::IPositionerSelector> >
	{
		~unique_ptr<TwinUI::Cortana::IPositionerSelector,default_delete<TwinUI::Cortana::IPositionerSelector> >();
	};

	struct unique_ptr<TwinUI::Lighting::AssistantLightManager,default_delete<TwinUI::Lighting::AssistantLightManager> >
	{
		~unique_ptr<TwinUI::Lighting::AssistantLightManager,default_delete<TwinUI::Lighting::AssistantLightManager> >();
	};

	struct unique_ptr<VirtualDesktopGestureContext,default_delete<VirtualDesktopGestureContext> >
	{
		~unique_ptr<VirtualDesktopGestureContext,default_delete<VirtualDesktopGestureContext> >();
	};

	struct unique_ptr<_TOKEN_USER,default_delete<_TOKEN_USER> >
	{
		void reset(_TOKEN_USER *);
		~unique_ptr<_TOKEN_USER,default_delete<_TOKEN_USER> >();
	};

	void __throw_bad_function_call();
	void swap_wil<wil::com_ptr_t<IWeakReference,wil::err_failfast_policy> >(wil::com_ptr_t<IWeakReference,wil::err_failfast_policy> &,wil::com_ptr_t<IWeakReference,wil::err_failfast_policy> &);
};

;
?FindMonitor@@YAPEAUHMONITOR__@@$$QEAV?$function@$$A6A_NPEAUHMONITOR__@@@Z@std@@@Z;
AppInventoryData GetAppInventoryData(unsigned short const *);
DEVICE_SCALE_FACTOR GetLegacyModernScaleFactor(unsigned long);
DEVICE_SCALE_FACTOR GetScaleFactorForRect(tagRECT const &);
DEVICE_SCALE_FACTOR g_legacyCompatScalingOverride;
DPI_AWARENESS_CONTEXT__ * (* s_pfnGetWindowDpiAwarenessContext)(HWND__ *);
FEATURE_ENABLED_STATE (* g_wil_details_apiGetFeatureEnabledState)(unsigned int,FEATURE_CHANGE_TIME,int *);
FEATURE_ENABLED_STATE (* g_wil_details_internalGetFeatureEnabledState)(unsigned int,FEATURE_CHANGE_TIME,int *);
Geometry::CRect MapRelativeRect(Geometry::CRect const &,Geometry::CRect const &,Geometry::CRect const &);
HFONT__ * JointDivider_LoadGlyphFont(DEVICE_SCALE_FACTOR);
HINSTANCE__ * g_wil_details_ntdllModuleHandle;
HINSTANCE__ * wil_details_GetNtDllModuleHandle();
HSTRING__ * GetValueHelper<HSTRING__ *>(IInspectable *);
HWND__ * GetTopLevelTabEligibleWindowFromProcess(unsigned long,HWND__ *,IVirtualDesktopManager *);
Microsoft::WRL::Details::CreatorMap const __object_AccessibilityExperienceManagerComponent_COM;
Microsoft::WRL::Details::CreatorMap const __object_AcrylicPolicyManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_ActionCenterExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_ActivationHints_COM;
Microsoft::WRL::Details::CreatorMap const __object_AllUpViewUriHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_BrokeredViewTabConverterStatics;
Microsoft::WRL::Details::CreatorMap const __object_CAppTransitionManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CApplicationManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CApplicationViewBroker_COM;
Microsoft::WRL::Details::CreatorMap const __object_CApplicationViewManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CDesktopPositioner_COM;
Microsoft::WRL::Details::CreatorMap const __object_CFullScreenManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveShellBuilder_COM;
Microsoft::WRL::Details::CreatorMap const __object_CMultitaskingViewServiceProvider_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPerMonitorDesktopVisibilityService_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSwitchController_COM;
Microsoft::WRL::Details::CreatorMap const __object_CVirtualDesktopComponent_COM;
Microsoft::WRL::Details::CreatorMap const __object_ControlCenterExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_CortanaExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_CortanaSharedExperienceManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CortanaStoreAppExperienceManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CustomShellManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_DesktopBlueLightReductionManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_EmulatedFullScreenManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_FamilyAppUsageManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_FullScreenPositioner_COM;
Microsoft::WRL::Details::CreatorMap const __object_HolographicForegroundAssistant_COM;
Microsoft::WRL::Details::CreatorMap const __object_HolographicPositioner_COM;
Microsoft::WRL::Details::CreatorMap const __object_HolographicViewHostItemLedger_COM;
Microsoft::WRL::Details::CreatorMap const __object_ImeStatusNotificationExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_ImmersiveShellStressTool_COM;
Microsoft::WRL::Details::CreatorMap const __object_InsightsExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_JointResize_COM;
Microsoft::WRL::Details::CreatorMap const __object_JumpViewExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_KioskPositioner_COM;
Microsoft::WRL::Details::CreatorMap const __object_LockScreenDirectorServiceProviderImpl_COM;
Microsoft::WRL::Details::CreatorMap const __object_PCShellImmersiveComponentCreator_COM;
Microsoft::WRL::Details::CreatorMap const __object_PWSLayoutPolicyManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_PenWorkspaceDiscoverBrokerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_PenWorkspaceScreenCaptureBroker_COM;
Microsoft::WRL::Details::CreatorMap const __object_PeopleBarFlyoutExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_PeopleBarJumpViewExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_PeoplePaneViewManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_PerMonitorShellPositionerManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_PrivilegedOperationsService_COM;
Microsoft::WRL::Details::CreatorMap const __object_QuickConnectExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_RemoteLauncherForegroundHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_RetailDemoExperienceManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_ScreenClippingExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_SearchAppExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_ShellFeedsExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_ShellPositionerManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_ShoulderTapExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_StartExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_SurfaceHubPositioner_COM;
Microsoft::WRL::Details::CreatorMap const __object_TabSetMediatorStatics;
Microsoft::WRL::Details::CreatorMap const __object_TabSetMediator_COM;
Microsoft::WRL::Details::CreatorMap const __object_TabViewManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_TabletModePositionerManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_TabletModePositioner_COM;
Microsoft::WRL::Details::CreatorMap const __object_TabletModeViewManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_TaskContinuityActivitiesExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_TaskFlowImmersiveShellBroker_COM;
Microsoft::WRL::Details::CreatorMap const __object_TaskbarLayoutPolicyManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_ToastCenterExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_TouchKeyboardExperienceManagerComponent_COM;
Microsoft::WRL::Details::CreatorMap const __object_TrayInfoTipActivator;
Microsoft::WRL::Details::CreatorMap const __object_TrayInfoTipAppInfoProvider;
Microsoft::WRL::Details::CreatorMap const __object_ViewEventDispatcher_COM;
Microsoft::WRL::Details::CreatorMap const __object_ViewPresentationMediator_COM;
Microsoft::WRL::Details::CreatorMap const __object_VirtualDesktopDataSourceComponent_COM;
Microsoft::WRL::Details::CreatorMap const __object_VirtualTouchpadExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_VirtualTouchpadUriHandlerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_VirtualTouchpadUriHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_VoiceAssistantPositioner_COM;
Microsoft::WRL::Details::CreatorMap const __object_WindowEventDispatcher_COM;
Microsoft::WRL::Details::CreatorMap const __object_WindowSizeConverter_COM;
Microsoft::WRL::Details::CreatorMap const __object_WindowingEnvironmentManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_XamlAllUpViewHost_COM;
Microsoft::WRL::Details::CreatorMap const __object_XamlAltTabViewHost_COM;
Microsoft::WRL::Details::CreatorMap const __object_XamlExplorerHostShellComponent_COM;
Microsoft::WRL::Details::CreatorMap const __object_XamlLauncher_COM;
Microsoft::WRL::Details::CreatorMap const __object_XamlSnapAssistViewHost_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__AccessibilityExperienceManagerComponent_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__AcrylicPolicyManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ActionCenterExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ActivationHints_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__AllUpViewUriHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__BrokeredViewTabConverterStatics;
Microsoft::WRL::Details::FactoryCache __objectFactory__CAppTransitionManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CApplicationManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CApplicationViewBroker_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CApplicationViewManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CDesktopPositioner_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CFullScreenManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveShellBuilder_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CMultitaskingViewServiceProvider_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPerMonitorDesktopVisibilityService_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSwitchController_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CVirtualDesktopComponent_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ControlCenterExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CortanaExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CortanaSharedExperienceManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CortanaStoreAppExperienceManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CustomShellManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__DesktopBlueLightReductionManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__EmulatedFullScreenManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__FamilyAppUsageManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__FullScreenPositioner_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__HolographicForegroundAssistant_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__HolographicPositioner_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__HolographicViewHostItemLedger_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ImeStatusNotificationExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ImmersiveShellStressTool_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__InsightsExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__JointResize_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__JumpViewExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__KioskPositioner_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__LockScreenDirectorServiceProviderImpl_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PCShellImmersiveComponentCreator_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PWSLayoutPolicyManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PenWorkspaceDiscoverBrokerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PenWorkspaceScreenCaptureBroker_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PeopleBarFlyoutExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PeopleBarJumpViewExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PeoplePaneViewManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PerMonitorShellPositionerManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PrivilegedOperationsService_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__QuickConnectExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__RemoteLauncherForegroundHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__RetailDemoExperienceManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ScreenClippingExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__SearchAppExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ShellFeedsExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ShellPositionerManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ShoulderTapExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__StartExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__SurfaceHubPositioner_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TabSetMediatorStatics;
Microsoft::WRL::Details::FactoryCache __objectFactory__TabSetMediator_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TabViewManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TabletModePositionerManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TabletModePositioner_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TabletModeViewManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TaskContinuityActivitiesExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TaskFlowImmersiveShellBroker_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TaskbarLayoutPolicyManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ToastCenterExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TouchKeyboardExperienceManagerComponent_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TrayInfoTipActivator;
Microsoft::WRL::Details::FactoryCache __objectFactory__TrayInfoTipAppInfoProvider;
Microsoft::WRL::Details::FactoryCache __objectFactory__ViewEventDispatcher_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ViewPresentationMediator_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__VirtualDesktopDataSourceComponent_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__VirtualTouchpadExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__VirtualTouchpadUriHandlerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__VirtualTouchpadUriHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__VoiceAssistantPositioner_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__WindowEventDispatcher_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__WindowSizeConverter_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__WindowingEnvironmentManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__XamlAllUpViewHost_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__XamlAltTabViewHost_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__XamlExplorerHostShellComponent_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__XamlLauncher_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__XamlSnapAssistViewHost_COM;
Microsoft::WRL::Wrappers::HString GetAumid(IApplicationView *);
MicrosoftTelemetryAssertTriggeredNode * g_MicrosoftTelemetryAssertsTriggeredList;
MultitaskingViewHostKind GetMTVHostKind(MULTITASKING_VIEW_TYPES);
Platform::Object ^ __abi_winrt_cast_to(bool,Platform::Object ^,_GUID const &);
SHELL_POSITIONER_TYPE * g_exclusivePositioners;
SJpegQuantizationTable const * const JpegQuantizationTables;
SearchboxTaskbarMode GetSearchboxTaskbarMode();
StateChangeResult ChangeRefcountedBooleanValue(unsigned __int64 &,PopupCountOperation,unsigned __int64);
TabShellGroupPolicy GetTabShellGroupPolicy();
ViewOptions GetViewOptions(Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeRequest const &);
_GUID const * const c_positionersSIDs;
_GUID const GUID_CAUSALITY_WINDOWS_PLATFORM_ID;
_GUID const SID_ForegroundViewManager;
_GUID const SID_ViewEventDispatcher;
_GUID const SID_WindowEventDispatcher;
_RTL_RUN_ONCE s_InitOnce;
_RTL_SRWLOCK g_MicrosoftTelemetryAssertLock;
__abi_Module * __abi_module;
__int64 GetProcessStartTime(void *);
__int64 KBEMWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 _AccessibilityEMWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__type_info_node __type_info_root_node;
bool DismissPopupMenu();
bool GetInstalledBrowserChannelInfo(BrowserChannels::ChannelId,BrowserChannels::InstallationLevel,BrowserChannels::Info *);
bool GetSizeOverride(double *);
bool IsActiveSessionCountLimited();
bool IsAgile(IUnknown *);
bool IsAnyOOBE();
bool IsAuditMode();
bool IsBackgroundExtensionContract(unsigned short const *);
bool IsBatterySaverEnabled();
bool IsCortanaApp(IApplicationView *);
bool IsCredentialReset();
bool IsDesktopInputContext();
bool IsDeviceAcrylicCapable();
bool IsEqualByHwnd(HWND__ *,IApplicationView *);
bool IsFeature_WindowManagerDesktopDisabled();
bool IsFullscreenCXHRunning();
bool IsHolographicOOBE();
bool IsHolographicWin32SlatesFeatureEnabled();
bool IsJavawExe(unsigned short const *);
bool IsMobileOOBE();
bool IsPPIEdition();
bool IsPPIFullFrameUI();
bool IsPeopleExperienceHostView(IApplicationView *);
bool IsPlaceModeEnabled();
bool IsShellInfraHostRunning();
bool IsShellLauncherEnabledForCurrentUser();
bool IsUIThread();
bool IsUserOOBE();
bool IsUserOOBEOrCredentialReset();
bool IsValidWindow(HWND__ *);
bool IsVerbRegistered(IQueryAssociations *,unsigned short const *);
bool IsVerbRegistered(IShellItem *,unsigned short const *);
bool IsWindowEligibleForTabbing(HWND__ *,HWND__ *);
bool ReducedVisualEffects();
bool TryGetDominantColorFromHBITMAP(HBITMAP__ *,bool,bool,unsigned long *,bool *);
bool WICIsOrientationSupported(IWICBitmapDecoder *);
bool _GetNthMostDominantColorFromBits(tagRGBQUAD *,int,int,int,unsigned int,bool,bool,unsigned long *);
bool _ShouldCheckApartments(ApartmentCheckEnum);
bool _tlgGuidIsZero(_GUID const &);
com_ptr_with_timeout<Windows::Internal::ComposableShell::Tabs::IApplicationViewTabManagerPrivate> TryGetApplicationViewTabManager(HWND__ *,char const *);
com_ptr_with_timeout<Windows::Internal::ComposableShell::Tabs::IApplicationViewTabManagerPrivate> TryGetApplicationViewTabManager(IApplicationView *,char const *);
double CalculateColorLuminosity(unsigned long);
double CalculateSharedArea(tagRECT const &,tagRECT const &);
double LinearizeRGBColorValue(double);
int (* s_pfnAreDpiAwarenessContextsEqual)(DPI_AWARENESS_CONTEXT__ *,DPI_AWARENESS_CONTEXT__ *);
int (* s_pfnGetDpiForWindow)(HWND__ *);
int (* s_pfnGetSystemMetricsForDpi)(int,int);
int (* winrt_to_hresult_handler)(void *);
int ApplicationViewTitleEnum(HWND__ *,unsigned short *,void *,unsigned __int64);
int GetCortanaHeightForImmersiveSearch();
int GetDefaultCortanaWidthWithoutGutter(tagRECT const *,int);
int GetDefaultTitlebarHeightInLogicalPixels();
int GetThreadDesktopName(wchar_t *,unsigned long);
int InitializeUserAPIs(_RTL_RUN_ONCE *,void *,void * *);
int InlineIsEqualGUID(_GUID const &,_GUID const &);
int IsBiDiLocale(unsigned long);
int IsHighContrast();
int Mirror_IsThreadRTL();
int SHIsSameObject(IUnknown *,IUnknown *);
int _SHIsMenuSeparator2(HMENU__ *,int,int *);
int __abi___threading_model;
int wil_QueryFeatureState(wil_FeatureState *,unsigned int,int,wil_FeatureStore,int *,int *);
int wil_RtlStagingConfig_QueryFeatureState(wil_FeatureState *,unsigned int,int,int *);
int wil_StagingConfig_QueryFeatureState(wil_FeatureStore,wil_FeatureState *,unsigned int,int,int *);
int wil_details_FeatureReporting_ReportUsageToServiceDirect(wil_details_FeatureReportingCache *,unsigned int,int,int,wil_details_ServiceReportingKind,unsigned int,unsigned __int64);
int wil_details_StagingConfigFeature_HasUniqueState(wil_details_StagingConfigFeature const *);
int wil_details_StagingConfig_AreAnyFeaturesConfigured_Callback(wil_details_StagingConfigFeature *,void *);
int wil_details_StagingConfig_QueryFeatureState(wil_details_StagingConfig *,wil_FeatureState *,unsigned int,int);
long (* g_wil_details_pfnNtQueryWnfStateData)(__WIL__WNF_STATE_NAME const *,__WIL__WNF_TYPE_ID const *,void const *,unsigned long *,void *,unsigned long *);
long (* g_wil_details_pfnNtUpdateWnfStateData)(__WIL__WNF_STATE_NAME const *,void const *,unsigned long,__WIL__WNF_TYPE_ID const *,void const *,unsigned long,unsigned long);
long (* g_wil_details_pfnRtlNotifyFeatureUsage)(_RTL_FEATURE_USAGE_REPORT *);
long (* g_wil_details_pfnRtlQueryFeatureConfiguration)(unsigned int,_RTL_FEATURE_CONFIGURATION_TYPE,unsigned __int64 *,_RTL_FEATURE_CONFIGURATION *);
long (* g_wil_details_pfnRtlRegisterFeatureConfigurationChangeNotification)(void (*)(void *),void *,unsigned __int64 *,void * *);
long (* g_wil_details_pfnRtlSubscribeWnfStateChangeNotification)(__WIL__WNF_USER_SUBSCRIPTION * *,__WIL__WNF_STATE_NAME,unsigned long,long (*)(__WIL__WNF_STATE_NAME,unsigned long,__WIL__WNF_TYPE_ID *,void *,void const *,unsigned long),void *,__WIL__WNF_TYPE_ID *,unsigned long,unsigned long);
long (* g_wil_details_pfnRtlUnsubscribeWnfNotificationWaitForCompletion)(__WIL__WNF_USER_SUBSCRIPTION *);
long AccessibleElement_CreateInstance(WeakReference::IWeakReference *,AccessibleElementFlags,long,_GUID const &,void * *);
long ActivateApplicationForExperienceWithPropertySet(unsigned short const *,unsigned short const *,unsigned short const *,Windows::Foundation::Collections::IPropertySet *,ActivateApplicationForExperienceOptions,unsigned long *);
long ActivateApplicationForLaunch(unsigned short const *,unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,HMONITOR__ *,unsigned long *);
long ActivateApplicationForLaunchWithManager(IApplicationActivationManagerPriv *,unsigned short const *,unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,ISplashScreen *,HMONITOR__ *,unsigned long *);
long AddFrameToWICBitmap(IWICImagingFactory *,IWICBitmapEncoder *,IWICBitmapSource *,_GUID,EncodingOptions);
long AddOptionsRelativeToInside(Windows::UI::Internal::Text::Core::CoreKeyboardPositionType,Windows::Foundation::Rect,Windows::Foundation::Rect,KeyboardHosting::KeyboardSize,bool,Microsoft::WRL::ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption,KeyboardHosting::CoreKeyboardPositionAndSizeOptionEquality,KeyboardHosting::CoreKeyboardPositionAndSizeOptionLifetimeTraits,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::UI::Internal::Text::Core::CoreKeyboardPositionAndSizeOption> > >);
long AddRefCountWrappers<IVirtualDesktop *,HSTRING__ *>(std::tuple<IVirtualDesktop *,HSTRING__ *>,std::tuple<Microsoft::WRL::ComPtr<IVirtualDesktop>,Microsoft::WRL::Wrappers::HString> *);
long AddRefCountWrappers<IVirtualDesktop *,IVirtualDesktop *>(std::tuple<IVirtualDesktop *,IVirtualDesktop *>,std::tuple<Microsoft::WRL::ComPtr<IVirtualDesktop>,Microsoft::WRL::ComPtr<IVirtualDesktop> > *);
long AddRefCountWrappers<IVirtualDesktop *>(std::tuple<IVirtualDesktop *>,std::tuple<Microsoft::WRL::ComPtr<IVirtualDesktop> > *);
long AltEscHotkeyHandler_CreateInstance(WeakReference::IWeakReference *,_GUID const &,void * *);
long AppLayoutCache_CreateInstance(_GUID const &,void * *);
long AppResizeAcc_CreateInstance(_GUID const &,void * *);
long AppResizeData_CreateInstance(IAppLayout *,_GUID const &,void * *);
long AppResizeOperation_CreateInstance(_GUID const &,void * *);
long AppResizeView_CreateInstance(bool,_GUID const &,void * *);
long AppSizeConstraintsCache_CreateInstance(_GUID const &,void * *);
long AppSwitchOperation_CreateInstance(_GUID const &,void * *);
long AppViewDataSourceAdapter_CreateInstance(AppViewDataSourceScope,IApplicationViewCollection *,IApplicationViewIconLoader *,IImmersiveShellHookService *,IInspectable *,IInspectable *,IInspectable *,ITabViewManager *,IAppViewDataSourceAdapter * *);
long AppViewDataSourceAdapter_CreateInstance(IApplicationViewCollection *,IApplicationViewIconLoader *,IImmersiveShellHookService *,IInspectable *,IAppViewDataSourceAdapter * *);
long AppViewSwitchItemZOrderSort_CreateInstance(_GUID const &,void * *);
long ApplicationViewManagerVisibilityDebouncer_CreateInstance(IApplicationViewCollection *,_GUID const &,void * *);
long BackOperation_CreateInstance(_GUID const &,void * *);
long CAllUpViewService_CreateInstance(IMultitaskingViewTaskScheduler *,_GUID const &,void * *);
long CAltTabViewController_CreateInstance(WeakReference::IWeakReference *,IMultitaskingViewManagerInternal *,IApplicationViewSwitcher *,IImmersiveAppCrusher *,IApplicationViewCollection *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITabViewManager *,_GUID const &,void * *);
long CAltTabViewHost_CreateInstance(IMultitaskingData *,IMultitaskingViewManagerInternal *,IApplicationViewSwitcher *,IImmersiveAppCrusher *,IMultitaskingViewVisibilityServiceInternal *,IMultitaskingViewGestureState *,IApplicationViewCollection *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITabViewManager *,_GUID const &,void * *);
long CAppLayoutAnimationData_CreateInstance(IApplicationView *,APP_LAYOUT_ANIMATION_TYPE,_GUID const &,void * *);
long CAppLayout_CreateInstance(LAYOUT_ENVIRONMENT_DETAILS const *,_GUID const &,void * *);
long CApplicationFrameService_CreateInstance(IImmersiveApplicationManagerInternal *,_GUID const &,void * *);
long CCv6s_HeapAllocArray<unsigned short>(void *,unsigned long,unsigned __int64,unsigned __int64,unsigned short * *);
long CCv6s_HeapFree(void *,void *);
long CCv6s_HeapReallocArray<void *>(void *,unsigned long,void *,unsigned __int64,unsigned __int64,void * * *);
long CDelayedTileActivation_CreateInstance(IImmersiveApplication *,IUnknown *,ACTIVATEOPTIONSINTERNAL,_GUID const &,void * *);
long CDelayedTileActivation_CreateInstance(unsigned short const *,unsigned short const *,unsigned short const *,IUnknown *,ACTIVATEOPTIONSINTERNAL,_GUID const &,void * *);
long CDragVisualAcc_CreateInstance(IDragVisual *,_GUID const &,void * *);
long CDropFeedbackItem_CreateInstance(unsigned long,DROP_FEEDBACK_ACTION,IApplicationView *,DROP_FEEDBACK_TYPE,tagRECT const *,tagRECT const *,double,DROP_FEEDBACK_FLAGS,_GUID const &,void * *);
long CDropFeedbackList_CreateInstance(_GUID const &,void * *);
long CDropFeedback_CreateInstance(IUnknown *,LAYOUT_ENVIRONMENT_DETAILS const &,DROP_FEEDBACK_INIT_FLAGS,_GUID const &,void * *);
long CGlyphButtonElement_CreateInstance(unsigned short,GlyphButtonFlags,GlyphButtonMetrics const &,unsigned int,WeakReference::IWeakReference *,IDWriteTextFormat *,ISwitchThumbnailFactory *,_GUID const &,void * *);
long CGridTelemetryController_CreateInstance(WeakReference::IWeakReference *,ISwitchItemController *,_GUID const &,void * *);
long CIconLoaderInternal_CreateInstance(IApplicationViewIconLoader *,_GUID const &,void * *);
long CIconLoader_CreateInstance(_GUID const &,void * *);
long CIconLoadingFunctions_CreateInstance(_GUID const &,void * *);
long CImmersiveApplicationWindow_CreateInstance(HWND__ *,_GUID const &,void * *);
long CMultitaskingViewFrameElement_CreateInstance(FrameMetrics const &,HWND__ *,AsyncFrameEvents const &,ISwitchThumbnailFactory *,IMultitaskingViewElement *,IMultitaskingViewElement *,IAnimationCoordinator *,IMultitaskingViewElement * *);
long CMultitaskingViewFrame_CreateInstance(MultitaskingViewControlFlags,MultitaskingViewConfig const &,ISwitchThumbnailDeviceManager *,IElementFactory *,ISwitchItemController *,IVirtualDesktopElementFactory *,IFrameLevelAnimationCoordinator *,_GUID const &,void * *);
long CMultitaskingViewHotKeyHandler_CreateInstance(IImmersiveWindowMessageService *,IImmersiveMonitorManager *,IApplicationTargetingTracker *,IMultitaskingViewTaskScheduler *,IApplicationViewCollection *,_GUID const &,void * *);
long CMultitaskingViewManager_CreateInstance(IMultitaskingViewServiceProvider *,IApplicationViewCollection *,IApplicationViewVisibilityDebouncedNotificationService *,IApplicationViewSwitcher *,IVirtualDesktopManagerInternal *,IVirtualDesktopPinnedApps *,ITabletModeController *,IVirtualDesktopNotificationService *,IImmersiveAppCrusher *,IMultitaskingViewVisibilityServiceInternal *,IMultitaskingViewGestureState *,IImmersiveSettingsCache *,ITabletModeViewManager *,IShellTargetingContractManager *,ISnapServiceProvider *,IApplicationViewIconLoader *,IInspectable *,IInspectable *,IImmersiveMonitorManager *,IXamlExplorerHost *,Windows::Internal::ComposableShell::Tabs::ITabDataModel *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITabViewManager *,_GUID const &,void * *);
long CPPIAllUpViewController_CreateInstance(WeakReference::IWeakReference *,IMultitaskingViewManagerInternal *,IApplicationViewSwitcher *,IImmersiveAppCrusher *,ITabletModeViewManager *,_GUID const &,void * *);
long CPPIAllUpViewHost_CreateInstance(IMultitaskingData *,IMultitaskingViewManagerInternal *,IApplicationViewSwitcher *,IImmersiveAppCrusher *,IMultitaskingViewVisibilityServiceInternal *,ITabletModeViewManager *,_GUID const &,void * *);
long CPPIAllUpViewService_CreateInstance(IMultitaskingViewTaskScheduler *,_GUID const &,void * *);
long CScrollButtonContainer_CreateInstance(ScrollViewerHostMetrics const &,ScrollButtonContainerFlags,WeakReference::IWeakReference *,IDWriteTextFormat *,ISwitchThumbnailFactory *,_GUID const &,void * *);
long CScrollViewerHost_CreateInstance(ScrollViewerHostFlags,ScrollViewerHostMetrics const &,_MARGINS const &,RelativeMargins const &,unsigned int,IMultitaskingViewElement *,ISwitchThumbnailFactory *,_GUID const &,void * *);
long CScrollViewer_CreateInstance(_MARGINS const &,double,unsigned int,ScrollViewerFlags,IMultitaskingViewElement *,ISwitchThumbnailFactory *,_GUID const &,void * *);
long CSimpleTempAppVisual_CreateAndAddToArray(ITemporaryAppVisual *,ITemporaryAppVisualArray *);
long CSimpleTempAppVisual_CreateInstance(tagRECT const &,tagRECT const &,TEMPORARY_APP_VISUAL_TYPE const &,HWND__ * const &,HWND__ * const &,IApplicationView *,ITemporaryAppVisual * *);
long CSnapAssistViewController_CreateInstance(WeakReference::IWeakReference *,IMultitaskingViewManager *,IImmersiveAppCrusher *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITabViewManager *,_GUID const &,void * *);
long CSnapAssistViewHost_CreateInstance(IMultitaskingData *,IMultitaskingViewManagerInternal *,IMultitaskingViewVisibilityServiceInternal *,IImmersiveAppCrusher *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITabViewManager *,_GUID const &,void * *);
long CSwitchItemElementFactory_CreateInstance(SwitchItemElementFactoryCreateParams const &,IApplicationViewIconLoader *,_GUID const &,void * *);
long CSwitchItemGrid_CreateInstance(GridMetrics const &,Geometry::CSize const &,IElementFactory *,ISwitchThumbnailFactory *,ISwitchItemController *,IObservableObjectArray *,_GUID const &,void * *);
long CVirtualDesktopApplicationViewEventListener_CreateInstance(IVirtualDesktopManagerPrivate *,IVirtualDesktopSwitchAnimator *,IVirtualDesktopForegroundPolicy *,IVirtualDesktopWindowMoveManager *,IVirtualDesktopPinnedAppsPrivate *,IVirtualDesktopLock *,_GUID const &,void * *);
long CVirtualDesktopCollection_CreateInstance(IVirtualDesktopFactory *,IVirtualDesktopPersistence *,bool,_GUID const &,void * *);
long CVirtualDesktopDefaultForegroundHandler_CreateInstance(_GUID const &,void * *);
long CVirtualDesktopFactory_CreateInstance(IVirtualDesktopVisibilityPolicy *,IVirtualDesktopLock *,_GUID const &,void * *);
long CVirtualDesktopForegroundPolicy_CreateInstance(IVirtualDesktopCollection *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopDefaultForegroundHandler *,_GUID const &,void * *);
long CVirtualDesktopHolographicViewTransitionNotification_CreateInstance(IVirtualDesktopManagerPrivate *,IVirtualDesktopLock *,_GUID const &,void * *);
long CVirtualDesktopHotkeyHandler_CreateInstance(IVirtualDesktopManagerPrivate *,IVirtualDesktopSwitchAnimator *,IVirtualDesktopLock *,_GUID const &,void * *);
long CVirtualDesktopLock_CreateInstance(_GUID const &,void * *);
long CVirtualDesktopManager_CreateInstance(IVirtualDesktopCollection *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopNotification2 *,IVirtualDesktopForegroundPolicy *,IVirtualDesktopPersistence2 *,IVirtualDesktopGroupedViewsPolicy *,IVirtualDesktopLock *,_GUID const &,void * *);
long CVirtualDesktopNotifications_CreateInstance(unsigned long,IVirtualDesktopLock *,_GUID const &,void * *);
long CVirtualDesktopVisibilityPolicy_CreateInstance(IVirtualDesktopNotification *,_GUID const &,void * *);
long CVirtualDesktop_CreateInstance(IVirtualDesktopVisibilityPolicy *,IVirtualDesktopLock *,_GUID const &,void * *);
long CVirtualDesktop_CreateInstance(_GUID const &,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopLock *,_GUID const &,void * *);
long CanChangeForeground();
long ChromeManager_CreateInstance(IUnknown *,_GUID const &,void * *);
long CoCreateActivationManagerAndSetProperties(Windows::Storage::Streams::IBuffer *,IApplicationActivationManagerPriv * *);
long Convert32bppIWICBitmapSourceToHBITMAP(IWICBitmapSource *,HBITMAP__ * *);
long Convert32bppWICBitmapSourceToHBITMAP(IWICBitmapSource *,HBITMAP__ * *);
long ConvertHBITMAPToWICBitmap(IWICImagingFactory *,HBITMAP__ *,WICBitmapAlphaChannelOption,IWICBitmapSource * *);
long ConvertIWICBitmapSourcePixelFormat(IWICBitmapSource *,_GUID,IWICImagingFactory *,IWICBitmapSource * *);
long ConvertIWICBitmapSourceTo32bppHBITMAP(IWICBitmapSource *,IWICImagingFactory *,HBITMAP__ * *);
long ConvertWICBitmapPixelFormat(IWICImagingFactory *,IWICBitmapSource *,_GUID,WICBitmapDitherType,IWICBitmapSource * *);
long ConvertWICBitmapToHBITMAP(IWICImagingFactory *,IWICBitmapSource *,HBITMAP__ * *);
long CoverWindowAcc_CreateInstance(HWND__ *,unsigned short const *,IRawElementProviderFragment *,_GUID const &,void * *);
long CoverWindow_CreateInstance(IUnknown *,_GUID const &,void * *);
long Create32BitHBITMAP(HDC__ *,tagSIZE const *,void * *,HBITMAP__ * *);
long CreateBitmapFromIconWithAlpha(HICON__ *,int,HBITMAP__ * *);
long CreateEventWithSDDL(unsigned short const *,unsigned short const *,int,void * *);
long CreateHideWallpaperIconsObject(IUnknown * *);
long CreateIconFromBitmap(unsigned int,HBITMAP__ *,HICON__ * *);
long CreateIconFromStreamWithWIC(IWICImagingFactory *,IStream *,unsigned int,bool,HICON__ * *);
long CreateScreenClippingBroker(Microsoft::WRL::ComPtr<IScreenClippingBroker> &);
long CreateShellSessionKey(unsigned long,HKEY__ * *);
long CreateSurfaceBrushFromIWICBitmapSource(Windows::UI::Composition::ICompositor *,IUnknown *,IWICBitmapSource *,Windows::UI::Composition::ICompositionSurfaceBrush * *);
long CreateWrapperForRecoveredView(MsgString *,RecoveredViewInfo,RecoveredWindowForViewWrapper,ViewEventDispatcher *,IViewWrapperInternal * *);
long DecodeRelativePath(wchar_t *,unsigned __int64,wchar_t const *);
long DefaultLaunchPositionOverride_CreateInstance(_GUID const &,void * *);
long DeserializePropertySet(MsgBlob *,Windows::Foundation::Collections::IPropertySet * *);
long DesktopOperation_CreateInstance(_GUID const &,void * *);
long DragData_CreateInstance(IUnknown *,IAppLayout *,IApplicationView *,WindowArrangementViewDragData::DragDataFlags,_GUID const &,void * *);
long DragInputHandler_CreateInstance(IExternalDragHost *,_GUID const &,void * *);
long ElementDragData_CreateInstance(ISwitchThumbnailFactory *,IMultitaskingViewElement *,IMultitaskingViewElement *,IUnknown *,DragMetrics const &,DragEffects,_GUID const &,void * *);
long GenerateDropEffectPlaceMode(unsigned short const *,PlaceModeEvent,unsigned short * *);
long GetActivationFactoryByPCWSTR(void *,Platform::Guid &,void * *);
long GetAppStateKey(unsigned short const *,unsigned long,HKEY__ * *);
long GetIidsFn(int,unsigned long *,__s_GUID const *,Platform::Guid * *);
long GetInfoFor32BitHBITMAP(HBITMAP__ *,int *,int *,tagRGBQUAD * *,int *);
long GetLauncherOptions(Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &,Windows::System::ILauncherOptions2 * *);
long GetLocalizedDisplayNameForApp(Windows::Internal::StateRepository::IApplication *,HSTRING__ * *);
long GetLockAppHost(ILockAppHost * *);
long GetPackageActivationSettings(unsigned short const *,PACKAGEACTIVATIONSETTINGS *);
long GetPathInfo(unsigned short const *,bool,DISPLAYCONFIG_PATH_INFO *);
long GetScaleFactorForWindow(HWND__ *,unsigned int *);
long GetSeralizedPropertysetAndActivateOptions(unsigned short const *,Windows::Foundation::Collections::IPropertySet *,ActivateApplicationForExperienceOptions,Windows::Storage::Streams::IBuffer * *,ACTIVATEOPTIONSINTERNAL *);
long GetSiHostProcessHandle(unsigned long,void * *);
long GetSingleAppFromLayout(IAppLayout *,IImmersiveApplication * *);
long GetStreamOfWICBitmapSourceWithOptions(IWICImagingFactory *,IWICBitmapSource *,_GUID const &,_GUID,EncodingOptions,IStream * *);
long GetThreadThumbnailCache(_GUID const &,void * *);
long GetViewLayoutBehaviorFlags(IApplicationView *,APP_LAYOUT_ITEM_BEHAVIOR_FLAGS *);
long GhostDivider_CreateInstance(IPriviledgedPositioner *,IApplicationView *,GhostDividerPlacement,_GUID const &,void * *);
long HolographicPositioner_CreateInstance(_GUID const &,void * *);
long IAMPrivate_QueryObject(IUnknown *,_GUID const &,_GUID const &,void * *);
long IImmersiveApplication_GetNormalDisplayNameWithTitleSafe(IImmersiveApplication *,IImmersiveApplicationManagerSafeForSyncCallouts *,unsigned short * *);
long IUnknown_GetScaleFactor(IUnknown *,DEVICE_SCALE_FACTOR *);
long IUnknown_GetServerProcessHandle(IUnknown *,unsigned long,void * *);
long InitVariantFromString(unsigned short const *,tagVARIANT *);
long InitializePrivilegedOperationsForIam(IPrivilegedOperationsConsumer *);
long InitializePrivilegedOperationsHelper<Microsoft::WRL::ComPtr<IPrivilegedArrangementOperations>,Microsoft::WRL::ComPtr<IPrivilegedTabletModeOperations> >(_GUID const &,IUnknown *,Microsoft::WRL::ComPtr<IPrivilegedArrangementOperations> &,Microsoft::WRL::ComPtr<IPrivilegedTabletModeOperations> &);
long InitializePrivilegedOperationsHelper<Microsoft::WRL::ComPtr<IPrivilegedArrangementOperations>,Microsoft::WRL::ComPtr<IPrivilegedTabletModeOperations>,Microsoft::WRL::ComPtr<IPrivilegedForegroundOperations> >(_GUID const &,IUnknown *,Microsoft::WRL::ComPtr<IPrivilegedArrangementOperations> &,Microsoft::WRL::ComPtr<IPrivilegedTabletModeOperations> &,Microsoft::WRL::ComPtr<IPrivilegedForegroundOperations> &);
long InitializePrivilegedOperationsHelper<Microsoft::WRL::ComPtr<IPrivilegedNotificationOperations>,Microsoft::WRL::ComPtr<IPrivilegedArrangementOperations>,Microsoft::WRL::ComPtr<IPrivilegedTabletModeOperations>,Microsoft::WRL::ComPtr<IPrivilegedForegroundOperations> >(_GUID const &,IUnknown *,Microsoft::WRL::ComPtr<IPrivilegedNotificationOperations> &,Microsoft::WRL::ComPtr<IPrivilegedArrangementOperations> &,Microsoft::WRL::ComPtr<IPrivilegedTabletModeOperations> &,Microsoft::WRL::ComPtr<IPrivilegedForegroundOperations> &);
long InitializePrivilegedOperationsHelper<Microsoft::WRL::ComPtr<IPrivilegedPresentationOperations>,Microsoft::WRL::ComPtr<IPrivilegedNotificationOperations>,Microsoft::WRL::ComPtr<IPrivilegedArrangementOperations>,Microsoft::WRL::ComPtr<IPrivilegedTabletModeOperations>,Microsoft::WRL::ComPtr<IPrivilegedForegroundOperations> >(_GUID const &,IUnknown *,Microsoft::WRL::ComPtr<IPrivilegedPresentationOperations> &,Microsoft::WRL::ComPtr<IPrivilegedNotificationOperations> &,Microsoft::WRL::ComPtr<IPrivilegedArrangementOperations> &,Microsoft::WRL::ComPtr<IPrivilegedTabletModeOperations> &,Microsoft::WRL::ComPtr<IPrivilegedForegroundOperations> &);
long InitializePrivilegedOperationsHelper<Microsoft::WRL::ComPtr<IPrivilegedTabletModeOperations>,Microsoft::WRL::ComPtr<IPrivilegedForegroundOperations> >(_GUID const &,IUnknown *,Microsoft::WRL::ComPtr<IPrivilegedTabletModeOperations> &,Microsoft::WRL::ComPtr<IPrivilegedForegroundOperations> &);
long InputEaterElement_CreateInstance(IInputEaterElementNotifications *,_GUID const &,void * *);
long InsertExperienceIdAndSerialize(Windows::Foundation::Collections::IPropertySet *,unsigned short const *,Windows::Storage::Streams::IBuffer * *);
long IsLegacyApp(unsigned short const *,bool *);
long JointDivider_CreateInstance(HWND__ *,_GUID const &,void * *);
long JointResizeAcc_CreateInstance(_GUID const &,void * *);
long LaunchCortanaApp(unsigned short const *,CortanaAppLaunchType,bool);
long LaunchNewTabPage(Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &,_GUID const &);
long LightDismissElement_CreateInstance(ILightDismissElementHost *,unsigned int,_GUID const &,void * *);
long LoadDataFromStateRepository(unsigned short const *,PER_APPLICATION_DATA *);
long LoadImageWithWIC(IWICImagingFactory *,IStream *,LOAD_IMAGE_WITH_WIC_OPTION,IWICBitmapSource * *,IWICBitmapFrameDecode * *,_GUID *);
long LoadWinRTIcon(IWinRTApplicationView *,tagSIZE const &,tagSIZE const &,tagSIZE const &,unsigned int,IApplicationViewIconLoaderNotifications *);
long MoveTryPositionPropertiesToPropertySet(HWND__ *,Windows::Internal::ShellHelpers::PropertySetHelper &);
long MultitaskingData_CreateInstance(IApplicationViewCollection *,IApplicationViewVisibilityDebouncedNotificationService *,IVirtualDesktopThumbnailWindowFilter *,IVirtualDesktopManagerInternal *,IVirtualDesktopPinnedApps *,IVirtualDesktopNotificationService *,IImmersiveSettingsCache *,ISnapServiceProvider *,IApplicationViewIconLoader *,Windows::Internal::ComposableShell::Tabs::ITabDataModel *,ITabViewManager *,SwitchItemFilterBehavior,_GUID const &,void * *);
long MultitaskingViewDragVisual_CreateInstance(ISwitchThumbnailFactory *,IMultitaskingViewElement *,IMultitaskingViewElement *,Geometry::CSize const &,double,_GUID const &,void * *);
long MultitaskingViewGestureHandler_CreateInstance(IMultitaskingViewTaskScheduler *,IMultitaskingViewVisibilityService *,_GUID const &,void * *);
long MultitaskingViewVisibilityService_CreateInstance(_GUID const &,void * *);
long PPILayoutOperation_CreateInstance(_GUID const &,void * *);
long PWSLayoutItem_CreateInstance(_GUID const &,void * *);
long PWSLayoutParser_CreateInstance(_GUID const &,void * *);
long ParseAppUserModelId(unsigned short const *,unsigned short * *,unsigned short * *);
long ParseAppUserModelId(unsigned short const *,unsigned short *,unsigned __int64,unsigned short *,unsigned __int64);
long PopulateSwitchAsyncPropertySet(HWND__ *,HWND__ *,VIEW_SWITCH_PREFERENCES,Windows::Foundation::Collections::IPropertySet *);
long PositionAdjustmentHistory_CreateInstance(_GUID const &,void * *);
long PositionerPriority_CreateInstance(_TABLETMODESTATE,_GUID const &,void * *);
long PositionerPriority_CreateInstance(unsigned long,_GUID const &,void * *);
long QueryCpuCyclesUsedByWindow(HWND__ *,unsigned __int64 *);
long RecoverApplicationWindows(IImmersiveShellHookNotification *);
long ResultFromKnownLastError();
long ResultFromWin32Bool(int);
long SHCoGetApartmentId(unsigned long *);
long SHCreateDUIThreadRef(long *,IUnknown * *);
long SHRegGetBOOLWithREGSAM(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,int *);
long SHRegGetDWORD(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long *);
long SHRegSetBOOL(HKEY__ *,unsigned short const *,unsigned short const *,int);
long SHRegSetString(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const *);
long ScaleImageWithWIC(IWICImagingFactory *,HBITMAP__ *,tagSIZE,bool,HBITMAP__ * *);
long ScaleImageWithWIC(IWICImagingFactory *,IWICBitmapSource *,tagSIZE,bool,IWICBitmapSource * *);
long ScaleWICBitmapSource(IWICImagingFactory *,IWICBitmapSource *,WICBitmapInterpolationMode,tagSIZE,bool,IWICBitmapSource * *);
long ScreenManager_CreateInstance(_GUID const &,void * *);
long SetActivationPropertySet(IUnknown *,Windows::Storage::Streams::IBuffer *);
long SetJpegQuantizationTableOptions(JpegQuantizationTableTypes,IPropertyBag2 *);
long ShowLauncherOnMonitor(IImmersiveMonitor *,IMMERSIVELAUNCHERSHOWMETHOD,IMMERSIVELAUNCHERSHOWFLAGS);
long SnapAssistViewDismissalAnimationCoordinator_CreateInstance(WeakReference::IWeakReference *,IMultitaskingViewAnimation *,_GUID const &,void * *);
long SnapAssistViewInvocationAnimationCoordinator_CreateInstance(WeakReference::IWeakReference *,_GUID const &,void * *);
long SplitActionAndServiceId(HSTRING__ *,HSTRING__ * *,HSTRING__ * *);
long StringCchCatW(unsigned short *,unsigned __int64,unsigned short const *);
long StringCchCopyA(char *,unsigned __int64,char const *);
long StringCchCopyNExW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64,unsigned short * *,unsigned __int64 *,unsigned long);
long StringCchCopyNW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
long StringCchCopyW(unsigned short *,unsigned __int64,unsigned short const *);
long StringCchCopyW(wchar_t *,unsigned __int64,wchar_t const *);
long StringCchPrintfW(unsigned short *,unsigned __int64,unsigned short const *,...);
long StringCchPrintfW(wchar_t *,unsigned __int64,wchar_t const *,...);
long StringCchVPrintfExW(unsigned short *,unsigned __int64,unsigned short * *,unsigned __int64 *,unsigned long,unsigned short const *,char *);
long StringCchVPrintfW(unsigned short *,unsigned __int64,unsigned short const *,char *);
long SwitchItemCloseAnimationCoordinator_CreateInstance(ISwitchThumbnailFactory *,_GUID const &,void * *);
long SwitchItemCollection_CreateInstance(ISwitchItemFactory *,IApplicationViewCollection *,IApplicationViewVisibilityDebouncedNotificationService *,Windows::Internal::ComposableShell::Tabs::ITabDataModel *,ITabViewManager *,SwitchItemFilterBehavior,_GUID const &,void * *);
long SwitchItemFactory_CreateInstance(_GUID const &,void * *);
long SwitchItemFilteredCollection_CreateInstance(IObservableObjectArray *,_GUID const &,void * *);
long SwitchItem_CreateInstance(IApplicationView *,GroupingType,_GUID const &,void * *);
long TabShellHotKeyHandler_CreateInstance(IImmersiveWindowMessageService *,IApplicationViewCollection *,ITabViewManager *,Windows::Internal::ComposableShell::Tabs::ITabDataModel *,Windows::Internal::ComposableShell::Tabs::ITabController *,ITitleBarController *,_GUID const &,void * *);
long TabletModeInputHandler_CreateInstance(SHOW_WINDOW_ARRANGEMENT_VIEW_SOURCE,ITabletModeInputCallback *,_GUID const &,void * *);
long TabletModePositionerHandoffContext_CreateInstance(IAppLayout *,bool,_GUID const &,void * *);
long TabletModePositionerOperation_CreateInstance(_GUID const &,void * *);
long TabletModeViewManagerProxy_CreateInstance(_GUID const &,void * *);
long TaskbarLayoutItem_CreateInstance(_GUID const &,void * *);
long TaskbarLayoutParser_CreateInstance(_GUID const &,void * *);
long TryGetUndockedShellAppId(unsigned short const *,HSTRING__ * *);
long UAFireEvent(_GUID const *,tagUAEVENT,unsigned short const *,unsigned long);
long VirtualDesktopAcessibility_CreateInstance(_TABLETMODESTATE,IVirtualDesktopNotificationServicePrivate *,IVirtualDesktopCollection *,IVirtualDesktopManagerPrivate *,IVirtualDesktopLock *,_GUID const &,void * *);
long VirtualDesktopAddAnimationCoordinator_CreateInstance(ISwitchThumbnailFactory *,int,_GUID const &,void * *);
long VirtualDesktopAnimationSyncNotifications_CreateInstance(unsigned long,_GUID const &,void * *);
long VirtualDesktopController_CreateInstance(_GUID const &,void * *);
long VirtualDesktopDataSource_CreateInstance(_GUID const &,void * *);
long VirtualDesktopGestureHandler_CreateInstance(IVirtualDesktopManagerInternal *,_GUID const &,void * *);
long VirtualDesktopGroupedViewsEventListener_CreateInstance(ITabViewManager *,Windows::Internal::ComposableShell::Tabs::IBrokeredViewTabConverter *,IInspectable *,IVirtualDesktopManagerPrivate *,IVirtualDesktopPinnedAppsPrivate *,IVirtualDesktopGroupedViewsPolicy *,IVirtualDesktopLock *,_GUID const &,void * *);
long VirtualDesktopItemCollection_CreateInstance(IVirtualDesktopItemFactory *,IVirtualDesktopManagerInternal *,IVirtualDesktopNotificationService *,_GUID const &,void * *);
long VirtualDesktopItemFactory_CreateInstance(IVirtualDesktopManagerInternal *,_GUID const &,void * *);
long VirtualDesktopItem_CreateInstance(IVirtualDesktopManagerInternal *,IVirtualDesktop *,_GUID const &,void * *);
long VirtualDesktopPersistence_CreateInstance(IVirtualDesktopRegistryHelpers *,_GUID const &,void * *);
long VirtualDesktopPinnedAppsHandler_CreateInstance(IVirtualDesktopManagerPrivate *,IVirtualDesktopRegistryHelpers *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopGroupedViewsPolicy *,IVirtualDesktopLock *,_GUID const &,void * *);
long VirtualDesktopRegistryHelpers_CreateInstance(_GUID const &,void * *);
long VirtualDesktopRemoveAnimationCoordinator_CreateInstance(ISwitchThumbnailFactory *,VirtualDesktopMetrics const &,int,_GUID const &,void * *);
long VirtualDesktopSwitchAnimator_CreateInstance(IVirtualDesktopManagerPrivate *,IVirtualDesktopAnimationSyncNotificationServicePrivate *,_GUID const &,void * *);
long VirtualDesktopTabletModeNotificationListener_CreateInstance(IVirtualDesktopTabletModePolicy *,IServiceProvider *,_GUID const &,void * *);
long VirtualDesktopTabletModePolicy_CreateInstance(_TABLETMODESTATE,IVirtualDesktopCollection *,IVirtualDesktopManagerPrivate *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopLock *,_GUID const &,void * *);
long VirtualDesktopThumbnailWindowFilter_CreateInstance(IVirtualDesktopManagerInternal *,ITabletModeController *,IVirtualDesktopNotificationService *,_GUID const &,void * *);
long VirtualDesktopWindowMoveManager_CreateInstance(IVirtualDesktopManagerPrivate *,IVirtualDesktopCollection *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopPinnedAppsPrivate *,_GUID const &,void * *);
long VirtualDesktop_CreateInstance(IVirtualDesktop *,IThumbnailDeviceSource *,IVirtualDesktopManagerInternal *,IVirtualDesktopNotificationService *,_GUID const &,void * *);
long VirtualDesktopsApi_CreateInstance(IVirtualDesktopManagerPrivate *,IVirtualDesktopCollection *,IVirtualDesktopVisibilityPolicy *,IVirtualDesktopWindowMoveManager *,IVirtualDesktopLock *,_GUID const &,void * *);
long WICCreateCachedOrientedBitmapSource(IWICImagingFactory *,IWICBitmapSource *,IWICMetadataQueryReader *,IWICBitmapSource * *);
long WICCreateOrientedBitmapSource(IWICImagingFactory *,IWICBitmapSource *,IWICMetadataQueryReader *,IWICBitmapSource * *);
long WICGetTransformOptionFromMetadata(IWICMetadataQueryReader *,WICBitmapTransformOptions *);
long WICOrientateFrame(IWICImagingFactory *,IWICBitmapDecoder *,IWICBitmapFrameDecode *,bool,IWICBitmapSource * *);
long WaitForCompletion<Windows::Foundation::IAsyncActionCompletedHandler,Windows::Foundation::IAsyncAction>(Windows::Foundation::IAsyncAction *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Storage::Streams::IRandomAccessStream *>,Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream *> >(Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *>,Windows::Foundation::IAsyncOperation<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *> >(Windows::Foundation::IAsyncOperation<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *> *,tagCOWAIT_FLAGS,void *);
long WaitOnAddressHelper<bool>(bool *,bool,unsigned long);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IDWMStoryboardListener> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IDWMStoryboardListener> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IInspectable> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IInspectable> >);
long WindowArrangementOperation_CreateInstance(_GUID const &,void * *);
long WindowArrangementView_CreateInstance(_GUID const &,void * *);
long WindowFromViewWrapper(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,HWND__ * *);
long XamlAllUpViewHost_CreateInstance(_GUID const &,void * *);
long _ActivateApplicationForLaunchHelperWithWindowFactory(IApplicationActivationManagerPriv *,unsigned short const *,unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,HMONITOR__ *,Windows::UI::Core::ICoreWindowFactory *,unsigned long *);
long _AllocStringWorker<CTCoAllocPolicy>(void *,unsigned long,unsigned short const *,unsigned __int64,unsigned __int64,unsigned short * *);
long _CreatePropertyBagBindCtx<unsigned short const *>(IBindCtx *,unsigned short const *,unsigned short const *,IBindCtx * *);
long _DoesBitmapHaveAlpha(HBITMAP__ *,bool *);
long _LUAIsElevatedToken(void *,bool *,bool *);
long _ScaleBitmap(HBITMAP__ *,unsigned int,HBITMAP__ * *);
long __abi_translateCurrentException(bool);
long wil_RtlStagingConfig_RecordFeatureUsage(unsigned int,unsigned int,int);
long wil_StagingConfig_RecordFeatureUsage(unsigned int,unsigned int,int);
long wil_details_NtQueryWnfStateData(__WIL__WNF_STATE_NAME const *,__WIL__WNF_TYPE_ID const *,void const *,unsigned long *,void *,unsigned long *);
long wil_details_NtUpdateWnfStateData(__WIL__WNF_STATE_NAME const *,void const *,unsigned long,__WIL__WNF_TYPE_ID const *,void const *,unsigned long,unsigned long);
long wil_details_RtlRegisterFeatureConfigurationChangeNotification(void (*)(void *),void *,unsigned __int64 *,void * *);
long wil_details_RtlSubscribeWnfStateChangeNotification(__WIL__WNF_USER_SUBSCRIPTION * *,__WIL__WNF_STATE_NAME,unsigned long,long (*)(__WIL__WNF_STATE_NAME,unsigned long,__WIL__WNF_TYPE_ID *,void *,void const *,unsigned long),void *,__WIL__WNF_TYPE_ID *,unsigned long,unsigned long);
long wil_details_StagingConfig_FireNotification(wil_details_StagingConfig *,unsigned int,unsigned short,int);
long wil_details_StagingConfig_Load(wil_details_StagingConfig *,wil_FeatureStore,unsigned __int64,void *,int);
long wil_details_WriteSRUMWnfUsageBuffer(wil::details_abi::heap_vector<wil_details_FeatureUsageSRUM> *);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > Base32Encode(unsigned char *,unsigned long);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > ComposeWin32AppIdForJavaApp(unsigned short const *,std::basic_string_view<unsigned short,std::char_traits<unsigned short> > const &);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > ComputeAppIdFromExePath(unsigned short const *);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetAppIdForSpecialCategoryApp(unsigned short const *,unsigned int);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetCertSignerHashFromExe(unsigned short const *);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetDisplayNameFromExePath(unsigned short const *);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetDisplayNameFromWindow(HWND__ *);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > HashAndBase32Encode(unsigned short const *);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > TryExtractJavaMainClassNameFromCommandLine(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > TryGetCertSubjectName(unsigned short const *);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > TryGetMainClassNameFromJavaEngineProcess(unsigned int);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > TryGetProcessCommandLine(unsigned int);
std::optional<APPLICATION_FRAME_CHROME_CHANGE_DATA> GetAppChromeData(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
std::optional<AppTitlebarConfiguration> GetAppTitleBarConfig(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > TryGetProcessExePathAndAppId(unsigned int);
std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > BlockError;
std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > BlockIdle;
std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > BlockListening;
std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > BlockResponding;
std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > BlockThinking;
std::vector<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> >,std::allocator<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > > > error;
std::vector<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> >,std::allocator<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > > > idle;
std::vector<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> >,std::allocator<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > > > listening;
std::vector<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> >,std::allocator<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > > > responding;
std::vector<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> >,std::allocator<std::vector<Windows::UI::Color,std::allocator<Windows::UI::Color> > > > thinking;
unsigned __int64 GetExperienceIdPersistenceIndex(unsigned short const *);
unsigned __int64 UnbiasedInterruptTimeFromFileTime(_FILETIME const &);
unsigned char IsComponentAppViewAndGetKindAndModel(Windows::Internal::ApplicationModel::WindowManagement::IAppView *,Windows::Internal::ApplicationModel::WindowManagement::AppModelKind *,Windows::Internal::ApplicationModel::WindowManagement::IAppModel * *);
unsigned char IsReducedSearchBoxWidthEnabled();
unsigned char IsSearchAndCortanaSplitEnabled();
unsigned char IsWideAtStartupEnabled(int);
unsigned int (* g_wil_details_apiGetFeatureVariant)(unsigned int,FEATURE_CHANGE_TIME,unsigned int *,int *,int *);
unsigned int (* g_wil_details_internalGetFeatureVariant)(unsigned int,FEATURE_CHANGE_TIME,unsigned int *,int *,int *);
unsigned int RectHeight(tagRECT const &);
unsigned int RectWidth(tagRECT const &);
unsigned int g_windowOverride;
unsigned long GetSessionID();
unsigned long SHProcessMessagesUntilEventsEx(HWND__ *,void * *,unsigned long,unsigned long,unsigned long,unsigned long);
unsigned long _RegSetKeyValueWithSDDL(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,void const *,unsigned long,_SECURITY_ATTRIBUTES *);
unsigned short const * MsgStringGetData(MsgString *);
unsigned short const * const * const c_wszMessagePortNames;
unsigned short const * const RuntimeClass_WindowsInternal_Shell_UnifiedTile_CuratedTileCollections_CuratedCollectionInitializationStatics;
unsigned short const * const RuntimeClass_WindowsInternal_Shell_UnifiedTile_CuratedTileCollections_CuratedCollectionSelectionHelpers;
unsigned short const * const RuntimeClass_WindowsInternal_Shell_UnifiedTile_PackagedUnifiedTileIdentifier;
unsigned short const * const RuntimeClass_WindowsInternal_Shell_UnifiedTile_UnifiedTileManager;
unsigned short const * const RuntimeClass_WindowsInternal_Shell_UnifiedTile_Win32UnifiedTileIdentifier;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_LaunchActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_SplashScreen;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Contacts_ContactCardOptions;
unsigned short const * const RuntimeClass_Windows_Data_Json_JsonArray;
unsigned short const * const RuntimeClass_Windows_Data_Json_JsonObject;
unsigned short const * const RuntimeClass_Windows_Data_Json_JsonValue;
unsigned short const * const RuntimeClass_Windows_Devices_Enumeration_DeviceInformation;
unsigned short const * const RuntimeClass_Windows_Devices_Lights_LampArray;
unsigned short const * const RuntimeClass_Windows_Foundation_Collections_PropertySet;
unsigned short const * const RuntimeClass_Windows_Foundation_Collections_ValueSet;
unsigned short const * const RuntimeClass_Windows_Foundation_Diagnostics_AsyncCausalityTracer;
unsigned short const * const RuntimeClass_Windows_Foundation_PropertyValue;
unsigned short const * const RuntimeClass_Windows_Foundation_Uri;
unsigned short const * const RuntimeClass_Windows_Globalization_GeographicRegion;
unsigned short const * const RuntimeClass_Windows_Graphics_Holographic_HolographicSpace;
unsigned short const * const RuntimeClass_Windows_Internal_ApplicationModel_WindowManagement_AppView;
unsigned short const * const RuntimeClass_Windows_Internal_ApplicationModel_WindowManagement_Window;
unsigned short const * const RuntimeClass_Windows_Internal_ApplicationModel_WindowingEnvironment_DisplayRegionModel;
unsigned short const * const RuntimeClass_Windows_Internal_ApplicationModel_WindowingEnvironment_WindowingEnvironmentModel;
unsigned short const * const RuntimeClass_Windows_Internal_ApplicationModel_WindowingEnvironment_WindowingEnvironmentModelBatch;
unsigned short const * const RuntimeClass_Windows_Internal_AssignedAccess_AssignedAccessManager;
unsigned short const * const RuntimeClass_Windows_Internal_AssignedAccess_AssignedAccessShellExperience;
unsigned short const * const RuntimeClass_Windows_Internal_CapabilityAccess_AppLaunchCapabilityAccess;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_Multitasking_IconFactory;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_Multitasking_SwitchItemDataSource;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_Tabs_BrokeredTabAppPolicySettings;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_Tabs_BrokeredViewTabConverter;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_Tabs_TabDroppedEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_Tabs_TabSetMediator;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_Tabs_TabTransferEventBroker;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_Tabs_TabViewProvidedEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_Tabs_TabWindowSnappedWithOthersEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_Tabs_ViewTabEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_Data_Activities_ActivityIndexer;
unsigned short const * const RuntimeClass_Windows_Internal_Data_Activities_GetCurrentActivityForViewOperationResults;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_BlueLightReduction_BlueLightReductionManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_CustomShell_CustomShellExperienceRepository;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ActionCenterExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ControlCenterExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_CortanaExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_CortanaShownEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_FocusNavigateEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ImeStatusNotificationExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_InsightsExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_JumpViewExperienceEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_JumpViewExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_NetworkFlyoutExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_PeopleBarFlyoutExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_PeopleBarJumpViewExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_QuickConnectExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ScreenClippingExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ShellFeedsExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ShoulderTapExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_StartExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_TaskContinuityActivitiesExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_TitleBarFactory;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ToastCenterExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_VirtualTouchpadExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_VisibilityChangedEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Holographic_ContextIdentifier;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Holographic_HolographicViewHostItemSource;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_JumpView_JumpViewParams;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceOptions;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Multitasking_Desktop_DesktopIconFactory;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Multitasking_Desktop_DesktopThumbnailDevice;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Popups_PopupClient;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_ShellLauncher_ShellLauncherExperience;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_ShellLauncher_ShellLauncherManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_TaskFlow_DataEngine_ActivityArbiter;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_TaskFlow_DataEngine_AppActivitySessionListener;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_TaskFlow_DataEngine_AppViewExecutionData;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_TaskFlow_DataEngine_AppViewListener;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_TaskFlow_DataEngine_AppViewTitleChangeData;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_TaskFlow_DataEngine_AppViewTitleChangeListener;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_TaskFlow_DataEngine_ClipboardSignalListener;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_TaskFlow_DataEngine_FileActivityListener;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_TaskFlow_DataEngine_UserPresenceData;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_TaskFlow_DataEngine_UserPresenceListener;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_Application;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_ApplicationResourceResolver;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_Package;
unsigned short const * const RuntimeClass_Windows_Management_Deployment_PackageManager;
unsigned short const * const RuntimeClass_Windows_Storage_Streams_RandomAccessStreamReference;
unsigned short const * const RuntimeClass_Windows_System_Internal_UserManager;
unsigned short const * const RuntimeClass_Windows_System_Launcher;
unsigned short const * const RuntimeClass_Windows_System_LauncherOptions;
unsigned short const * const RuntimeClass_Windows_System_Threading_ThreadPoolTimer;
unsigned short const * const RuntimeClass_Windows_UI_Core_ImmersiveCoreWindowFactory;
unsigned short const * const RuntimeClass_Windows_UI_Internal_Text_Core_CoreInputViewManager;
unsigned short const * const RuntimeClass_Windows_UI_Internal_Text_Core_CoreKeyboardManager;
unsigned short const * const RuntimeClass_Windows_UI_Internal_ViewManagement_ApplicationViewTabInsertionContext;
unsigned short const * const RuntimeClass_Windows_UI_ViewManagement_UISettings;
unsigned short const * const RuntimeClass_Windows_UI_Xaml_Media_Imaging_WriteableBitmap;
unsigned short const * const RuntimeClass_Windows_UI_Xaml_Media_LoadedImageSurface;
unsigned short const * const RuntimeClass_lockframework_LockAppBroker;
unsigned short const * const c_szActionServiceDelimiter;
void (* g_wil_details_RecordSRUMFeatureUsage)(unsigned int,unsigned int,unsigned int);
void (* g_wil_details_apiRecordFeatureError)(unsigned int,FEATURE_ERROR const *);
void (* g_wil_details_apiRecordFeatureUsage)(unsigned int,unsigned int,unsigned int,char const *);
void (* g_wil_details_apiSubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
void (* g_wil_details_apiUnsubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
void (* g_wil_details_internalRecordFeatureError)(unsigned int,FEATURE_ERROR const *);
void (* g_wil_details_internalRecordFeatureUsage)(unsigned int,unsigned int,unsigned int,char const *);
void (* g_wil_details_internalSubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
void (* g_wil_details_internalUnsubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
void (* g_wil_details_pfnFeatureLoggingHook)(unsigned int,FEATURE_LOGGED_TRAITS const *,FEATURE_ERROR const *,int,wil_ReportingKind const *,wil_VariantReportingKind const *,unsigned char,unsigned __int64);
void (* g_wil_details_pfnRtlUnregisterFeatureConfigurationChangeNotification)(void *);
void (* g_wil_details_recordFeatureUsage)(unsigned int,wil_details_ServiceReportingKind,unsigned int,wil_details_FeatureReportingCache *,wil_details_RecordUsageResult *);
void * * IID_PPV_ARGS_Helper<IDataObject>(IDataObject * *);
void * * IID_PPV_ARGS_Helper<Microsoft::WRL::ComPtr<IInputHostLayout> >(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IInputHostLayout> >);
void * * IID_PPV_ARGS_Helper<Microsoft::WRL::ComPtr<ISwitchItemInternal> >(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ISwitchItemInternal> >);
void * MemoryAlloc(unsigned __int64);
void * __abi_winrt_ptr_assign(void * *,Platform::Object const volatile ^);
void * __abi_winrt_ptr_ctor(Platform::Object const volatile ^ const);
void * __abi_winrt_ptrto_string_assign(void * *,Platform::String const volatile ^);
void * __abi_winrt_ptrto_string_ctor(Platform::String const volatile ^);
void * operator new(unsigned __int64);
void * operator new(unsigned __int64,std::nothrow_t const &);
void * operator new[](unsigned __int64);
void * operator new[](unsigned __int64,std::nothrow_t const &);
void AdjustSourceRectForNonClientArea(HWND__ *,tagRECT const *,tagRECT *);
void CalcTouchDragRect(tagPOINT const &,tagRECT *);
void CloseWinRTApplicationView(IWinRTApplicationView *);
void ComputeSystemDPI(int *,int *);
void EncodeCommonRelativePath(unsigned short *,unsigned __int64,unsigned short const *);
void EncodeRelativePath(unsigned short *,unsigned __int64,_GUID const *,unsigned int,unsigned short const *);
void FailFastWithHR(long,unsigned __int64,unsigned __int64);
void GetDesktopUniqueName(wchar_t const *,wchar_t *,unsigned long);
void JointDivider_Paint(HDC__ *,Geometry::CRect const &,Geometry::CRect const &,DEVICE_SCALE_FACTOR,HFONT__ *);
void LambdaCustomPaintProc<<lambda_3620ca84e17db7610b457f2d5c27bd2d>,ID2D1DeviceContext *>(ID2D1DeviceContext *,tagSIZE const &,__int64);
void LambdaCustomPaintProc<<lambda_688f7da27bd069ce265bc30902a9ac85>,HDC__ *>(HDC__ *,tagSIZE const &,__int64);
void LambdaCustomPaintProc<<lambda_75d12933469d574ec35b52b770ab7fc4>,ID2D1DeviceContext *>(ID2D1DeviceContext *,tagSIZE const &,__int64);
void LambdaCustomPaintProc<<lambda_96edf2fb798d729d000c76ff579fff9f>,HDC__ *>(HDC__ *,tagSIZE const &,__int64);
void LambdaCustomPaintProc<<lambda_a818a4d1196700db3f726f95e02b7ab7>,ID2D1DeviceContext *>(ID2D1DeviceContext *,tagSIZE const &,__int64);
void LambdaCustomPaintProc<<lambda_d4ecc39225c689e00a2543e0316a9fb0>,HDC__ *>(HDC__ *,tagSIZE const &,__int64);
void LoadScalingOverrides();
void MatchRectAspectRatio(tagRECT *,tagRECT const *);
void MatchRectPillarBoxState(tagRECT const *,tagRECT const *,tagRECT const *,tagRECT *,tagRECT *);
void MemoryFree(void *);
void PostTaskbarMessage(unsigned int,unsigned __int64,__int64);
void PushWindowTransparencyModeToWindow(HWND__ *,WindowTransparencyMode,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
void RaiseApplicationViewChangeNotification(IClassicWindow *,APPLICATION_VIEW_CHANGE);
void RelaunchExperienceWithDelay<Windows::Internal::Shell::Experience::ICortanaExperienceManager>(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,void (*)());
void RelaunchExperienceWithDelay<Windows::Internal::Shell::Experience::IStartExperienceManager>(Windows::Internal::Shell::Experience::IStartExperienceManager *,void (*)());
void SHComputeDPI(HWND__ *,int *,int *);
void SafeRelease<IQuerySource>(IQuerySource * *);
void SafeRelease<IShellItemArray>(IShellItemArray * *);
void SafeUnsubscribeWnf(_WNF_USER_SUBSCRIPTION * *);
void SetExistingEvent(unsigned short const *);
void SetWindowTitleToResource(HWND__ *,unsigned int);
void SettingsPaneAnimationDwmTransition(HWND__ *,bool);
void TerminateApp(unsigned int,unsigned short const *);
void TlgAggregateInternalProviderCallback(_GUID const *,unsigned long,unsigned char,unsigned __int64,unsigned __int64,_EVENT_FILTER_DESCRIPTOR *,void *);
void TlgAggregateInternalRegisteredProviderEtwCallback(_GUID const *,unsigned long,unsigned char,unsigned __int64,unsigned __int64,_EVENT_FILTER_DESCRIPTOR *,void *);
void TransformApplicationViewError(long *);
void ZoomRect(Geometry::CRect const &,Geometry::CPointFloat const &,int,tagRECT *);
void _SHPrettyMenu(HMENU__ *);
void __ArrayUnwind(void *,unsigned __int64,unsigned __int64,void (*)(void *));
void __abi_FailFast();
void __abi_WinRTraiseException(long);
void __abi_winrt_ptr_dtor(Platform::Object const volatile ^ const);
void __abi_winrt_ptrto_delegate_dtor<Windows::Foundation::AsyncOperationCompletedHandler<bool> >(Windows::Foundation::AsyncOperationCompletedHandler<bool> const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^> >(Windows::Foundation::Collections::VectorChangedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItem ^> const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<Windows::Foundation::Collections::VectorChangedEventHandler<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> >(Windows::Foundation::Collections::VectorChangedEventHandler<WindowsInternal::ComposableShell::Experiences::Switcher::ISwitchItemContextMenuMetadata ^> const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Windows::Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^> >(Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataSource ^,Windows::Internal::ComposableShell::Multitasking::ISwitchItemCollectionChangedEventArgs ^> const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Windows::Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^> >(Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Multitasking::ISwitchItemDataView ^,Windows::Internal::ComposableShell::Multitasking::IEvaluateItemEventArgs ^> const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource ^,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs ^> >(Windows::Foundation::TypedEventHandler<Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopDataSource ^,Windows::Internal::ComposableShell::Multitasking::IVirtualDesktopCollectionChangedEventArgs ^> const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<Windows::UI::Core::DispatchedHandler>(Windows::UI::Core::DispatchedHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<Windows::UI::Xaml::ApplicationInitializationCallback>(Windows::UI::Xaml::ApplicationInitializationCallback const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<Windows::UI::Xaml::Interop::BindableVectorChangedEventHandler>(Windows::UI::Xaml::Interop::BindableVectorChangedEventHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<Windows::UI::Xaml::RoutedEventHandler>(Windows::UI::Xaml::RoutedEventHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<Windows::UI::Xaml::WindowActivatedEventHandler>(Windows::UI::Xaml::WindowActivatedEventHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler>(WindowsInternal::ComposableShell::Desktop::XamlExplorerHostLaunchHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<WindowsInternal::ComposableShell::Experiences::Switcher::AnimationCompletedEventHandler>(WindowsInternal::ComposableShell::Experiences::Switcher::AnimationCompletedEventHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<WindowsInternal::ComposableShell::Experiences::Switcher::BecameEmptyEventHandler>(WindowsInternal::ComposableShell::Experiences::Switcher::BecameEmptyEventHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<WindowsInternal::ComposableShell::Experiences::Switcher::ItemCloseInvokedEventHandler>(WindowsInternal::ComposableShell::Experiences::Switcher::ItemCloseInvokedEventHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<WindowsInternal::ComposableShell::Experiences::Switcher::ItemContextMenuInvokedHandler>(WindowsInternal::ComposableShell::Experiences::Switcher::ItemContextMenuInvokedHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<WindowsInternal::ComposableShell::Experiences::Switcher::ItemContextMenuRequestedHandler>(WindowsInternal::ComposableShell::Experiences::Switcher::ItemContextMenuRequestedHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<WindowsInternal::ComposableShell::Experiences::Switcher::ItemInvokedEventHandler>(WindowsInternal::ComposableShell::Experiences::Switcher::ItemInvokedEventHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<WindowsInternal::ComposableShell::Experiences::Switcher::LightDismissEventHandler>(WindowsInternal::ComposableShell::Experiences::Switcher::LightDismissEventHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<WindowsInternal::ComposableShell::Experiences::Switcher::TaskViewContainerNavigationEventHandler>(WindowsInternal::ComposableShell::Experiences::Switcher::TaskViewContainerNavigationEventHandler const volatile ^);
void __abi_winrt_ptrto_delegate_dtor<WindowsInternal::ComposableShell::Experiences::Switcher::VirtualDesktopInvokedEventHandler>(WindowsInternal::ComposableShell::Experiences::Switcher::VirtualDesktopInvokedEventHandler const volatile ^);
void __abi_winrt_ptrto_string_dtor(Platform::String const volatile ^ const);
void __scrt_initialize_type_info();
void __scrt_throw_std_bad_alloc();
void __scrt_throw_std_bad_array_new_length();
void __scrt_uninitialize_type_info();
void _com_issue_error(long);
void _tlgWriteActivityAutoStop<0,0>(_tlgProvider_t const *,_GUID const *);
void _tlgWriteActivityAutoStop<0,3>(_tlgProvider_t const *,_GUID const *);
void _tlgWriteActivityAutoStop<0,4>(_tlgProvider_t const *,_GUID const *);
void _tlgWriteActivityAutoStop<0,5>(_tlgProvider_t const *,_GUID const *);
void _tlgWriteActivityAutoStop<35184372088832,5>(_tlgProvider_t const *,_GUID const *);
void _tlgWriteActivityAutoStop<70368744177664,4>(_tlgProvider_t const *,_GUID const *);
void _tlgWriteActivityAutoStop<70368744177664,5>(_tlgProvider_t const *,_GUID const *);
void operator delete(void *);
void operator delete(void *,std::nothrow_t const &);
void operator delete(void *,unsigned __int64);
void operator delete(void *,void *);
void operator delete[](void *);
void operator delete[](void *,std::nothrow_t const &);
void operator delete[](void *,unsigned __int64);
void wil_details_FeatureReporting_IncrementOpportunityInCache(wil_details_FeatureReportingCache *,wil_details_ServiceReportingKind,unsigned int,wil_details_RecordUsageResult *);
void wil_details_FeatureReporting_IncrementUsageInCache(wil_details_FeatureReportingCache *,wil_details_ServiceReportingKind,unsigned int,wil_details_RecordUsageResult *);
void wil_details_FeatureReporting_ReportUsageToService(wil_details_FeatureReportingCache *,unsigned int,int,int,FEATURE_LOGGED_TRAITS const *,int,wil_ReportingKind,unsigned __int64);
void wil_details_FeatureReporting_ReportVariantUsageToService(wil_details_FeatureReportingCache *,unsigned int,int,int,FEATURE_LOGGED_TRAITS const *,int,unsigned char,unsigned int,wil_VariantReportingKind,unsigned __int64);
void wil_details_StagingConfig_EnumerateFeatures(wil_details_StagingConfig *,int (*)(wil_details_StagingConfigFeature *,void *),void *);
void wil_details_StagingConfig_Free(wil_details_StagingConfig *);
wchar_t const * const RuntimeClass_Windows_ApplicationModel_Resources_Core_ResourceManager;
wchar_t const * const RuntimeClass_Windows_Foundation_Collections_PropertySet;
wchar_t const * const RuntimeClass_Windows_Foundation_PropertyValue;
wchar_t const * const RuntimeClass_Windows_Internal_Shell_SystemTray_TrayInfoTipActivator;
wchar_t const * const RuntimeClass_Windows_Internal_Shell_SystemTray_TrayNotificationAppInfoProvider;
wchar_t const * const RuntimeClass_Windows_Storage_Streams_RandomAccessStreamReference;
wil::com_ptr_t<IApplicationViewTitlebarConfiguration,wil::err_exception_policy> CloneTitleBarConfiguration(IApplicationViewTitlebarConfiguration *);
wil::com_ptr_t<IApplicationViewTitlebarConfiguration,wil::err_exception_policy> ReconcileTitleBarconfiguration(AppTitlebarConfiguration const &,IApplicationViewTitlebarConfiguration *,APP_CHROME_CONFIGURATION_POLICY);
wil::com_ptr_t<IObjectWithSite,wil::err_exception_policy> GetLaunchOptionSite(Windows::Internal::ComposableShell::Tabs::ShellTabGroupId const &);
wil_details_RecordUsageResult wil_details_FeatureReporting_RecordUsageInCache(wil_details_FeatureReportingCache *,wil_details_ServiceReportingKind,unsigned int,unsigned int);
