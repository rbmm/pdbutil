struct <lambda_02c3fa579a3c95d320234dc8d91770ac>
{
	void operator()();
};

class <lambda_02cd3f08fb01f043a1e444c90e659e79>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_052e919cc0e5399df76dff3972c0cac1>
{
	~<lambda_052e919cc0e5399df76dff3972c0cac1>();
};

struct <lambda_057488ec2a114cea6fb77af5c8c7453a>
{
	void operator()(char const *,unsigned short &,unsigned short);
};

class <lambda_05c9c055f346c811931ff15dfaa17386>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_0684b42d408370a41e35966251551308>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_0690ba3dc5a693a519373734918931dd>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_06f5e94c872aa149ebfb08f8c984f403>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_0729d2b71d9e8b03406be0143ca113e6>
{
	~<lambda_0729d2b71d9e8b03406be0143ca113e6>();
};

class <lambda_08f1c82b29815a719613edbe5441fd5f>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_0a2d047b332e6101fd54da92b14d0a67>
{
	<lambda_0a2d047b332e6101fd54da92b14d0a67>(CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal *,IInspectable *,CFileSavePickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> > const &,CMarshaledInterface const &,void * const &);
};

class <lambda_0ae89f7ca77040da3af7dd229dfecfb4>
{
	static long <lambda_invoker_cdecl>(__WIL__WNF_STATE_NAME,unsigned long,__WIL__WNF_TYPE_ID *,void *,void const *,unsigned long);
};

struct <lambda_0b131e519c905aff681ecf29b084c983>
{
	long operator()(bool &);
};

class <lambda_120d0c6b51dc644cb63ed5c7fc62f6c3>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_152aa9d2a3a0648fa2fa7fcef514b376>
{
	static void <lambda_invoker_cdecl>(void *);
};

struct <lambda_15c072501ebdb4e1219ae8575a8606e9>
{
	<lambda_15c072501ebdb4e1219ae8575a8606e9>(Windows::Internal::MoveOnCopy<Microsoft::WRL::Wrappers::HString> const &,Windows::Internal::MoveOnCopy<Microsoft::WRL::Wrappers::HString> const &,Microsoft::WRL::ComPtr<Windows::Internal::UI::WindowsTip::WindowsTipNotificationActivationCallback> const &,SoftLandingTelemetry::NotificationInvoke const &);
	long operator()();
	~<lambda_15c072501ebdb4e1219ae8575a8606e9>();
};

class <lambda_15efdcdc02dcce07b3179f5b4d1fe0a3>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_1ad7ecfab602a777ecf020873216a663>
{
	static void <lambda_invoker_cdecl>(void *);
};

class <lambda_1ed4f7076864bd0286432932670f3ec9>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_1ed552633946a27b818d04b3bf9896b5>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_1f106ff2af023a2a0f745063f7884c9d>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_20f2a82e85f233a886e7ba6ba9664aba>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_22b29394cce4f5b532d8017d9ea441e0>
{
	~<lambda_22b29394cce4f5b532d8017d9ea441e0>();
};

class <lambda_22c4dee52b75c6f29a72f819f272a64f>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_233c39743297002cdf3755857b2c1972>
{
	long operator()(Windows::Internal::PlatformExtensions::Details::ExtensionRegistration const *,bool,bool *);
};

class <lambda_23ce349ad8b1303b9752fca832f8f7b0>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_24b97ecbfe38ab0aee408a4705882b7f>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_2724967c04a6d25fb2f8b1f8efe1fc5a>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_28102fe7380e04fe5f334166db1e1e61>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_28acb87489551a820b16ad4caa530280>
{
	~<lambda_28acb87489551a820b16ad4caa530280>();
};

class <lambda_297a286f831baa642edc8499ff4b3ff7>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_2ba8abda6f2a4c5834755431f5f6ef9a>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_30bfe5059f6b039907141bbab87933a6>
{
	~<lambda_30bfe5059f6b039907141bbab87933a6>();
};

struct <lambda_319e580b8c8fe99d3abe75e08ddebadc>
{
	<lambda_319e580b8c8fe99d3abe75e08ddebadc>(CInvoker<Windows::Storage::Provider::ICachedFileUpdaterUI *,IInspectable *,CCachedFileUpdaterUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *> > const &,CMarshaledInterface const &,void * const &);
};

class <lambda_31c68e6e7fe6304ff24fb5a0b337fe11>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_3442a9d6c0a6f0a8d43c13feb2a6d4f2>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_3985698d72c080382b38ab1d00b66293>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_3a0ae175e15b5b42d79e5d39f6a32223>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_3be3b2e63ca7ca28954ad74bc491bf30>
{
	long operator()();
};

class <lambda_3e26dcec44775d43d9dfc79dea49f939>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_3e99779ae024b4cc2633b5bd58c680c2>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_3f38bce8aed2347495e77c774b16575f>
{
	long operator()(Windows::Internal::CBasicResult<unsigned char,0> &);
};

struct <lambda_41c7fba4bd8188813bef26ecf17f6da1>
{
	long operator()();
};

struct <lambda_42a319d466c03f646eff84ae9c7edd7a>
{
	long operator()(IDCompositionAnimation * *,int);
	~<lambda_42a319d466c03f646eff84ae9c7edd7a>();
};

struct <lambda_466f052378d1758faf07b0052541d127>
{
	long operator()(IDCompositionAnimation * *,int);
	~<lambda_466f052378d1758faf07b0052541d127>();
};

class <lambda_47d2d14a6d1fcb8d7586003d7680f44e>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_48f03e61741d85dde7999758d1807eca>
{
	long operator()(Windows::UI::Popups::IUICommand *);
};

class <lambda_4be4737641146cd16eada94a96a21f38>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_53715bea0934c8e4224e6c7e9c855490>
{
	<lambda_53715bea0934c8e4224e6c7e9c855490>(CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,IInspectable *,CFileSavePickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> > const &,CMarshaledInterface const &,void * const &);
};

class <lambda_584cda8e7422c977f6c737c4385915ca>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_59417f5883afab7ae77057a8266662f6>
{
	~<lambda_59417f5883afab7ae77057a8266662f6>();
};

class <lambda_5a0013c50c148aff44cd9cb1457108f6>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_5a6e09720a77e16e18f4303ea0a3b3e3>
{
	long operator()(Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs *);
};

struct <lambda_5ca10be2184c00a8498991bb789c6d13>
{
	~<lambda_5ca10be2184c00a8498991bb789c6d13>();
};

class <lambda_5f1dd388c03885d19ee806198d2ac5ef>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

struct <lambda_61f6224c0980ca8388a5a985b192704f>
{
	long operator()();
	~<lambda_61f6224c0980ca8388a5a985b192704f>();
};

struct <lambda_63cba2399be7b7ddfb0cc6753f4319db>
{
	~<lambda_63cba2399be7b7ddfb0cc6753f4319db>();
};

class <lambda_6579dfac04c0b569577c5f78e2b96d83>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_67a4077a10b7c017ab26ed22531248f2>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_692b62e119e69287558415adb7754127>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_69de1e5f4af9339dc6517a8fecd7d8da>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_6c4cc57c5f15153226539c2f4fc5fdd3>
{
	~<lambda_6c4cc57c5f15153226539c2f4fc5fdd3>();
};

class <lambda_75f51455afdd6deeb34ec28b1e80a524>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_7c0dbebcf8d9109fc3825079753ae60e>
{
	<lambda_7c0dbebcf8d9109fc3825079753ae60e>(CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,IInspectable *,CFileOpenPickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> > const &,CMarshaledInterface const &,void * const &);
};

class <lambda_7c6f95392d1fa211f578d6d8eb47d107>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_7d47696adb3c506dad77b6b0f3bb8e0c>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_7d7192d2aa37bb1bb7a7cc0f5edb00d8>
{
	~<lambda_7d7192d2aa37bb1bb7a7cc0f5edb00d8>();
};

class <lambda_7d96ac0ee66ba536cee93ca71a136a4c>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_7de15694039c0fb0c9a5338c14c783f4>
{
	~<lambda_7de15694039c0fb0c9a5338c14c783f4>();
};

struct <lambda_7e2d11f4dd7a2db6acde96370f594ac9>
{
	long operator()(CFilePickerInvoker * *);
};

struct <lambda_7f24983b1a83aaccdf04480eb4aca37b>
{
	~<lambda_7f24983b1a83aaccdf04480eb4aca37b>();
};

struct <lambda_7f2ecfb9a57b06503ba87c21043a2e3a>
{
	<lambda_7f2ecfb9a57b06503ba87c21043a2e3a>(Microsoft::WRL::ComPtr<CRefCountedObject<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > > const &,CMarshaledInterface const &,Microsoft::WRL::ComPtr<CRefCountedObject<CAutoHandle<void *> > > const &);
	void operator()();
	~<lambda_7f2ecfb9a57b06503ba87c21043a2e3a>();
};

struct <lambda_7f891267008f91857a71cd52d09bf81e>
{
	void operator()();
};

class <lambda_830a858705f438bc5eb56dc5316ebd68>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_834c0077cad59c9dc0a3a987d1005045>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_838fd1621ad6edf2cd1d223fa5046c55>
{
	~<lambda_838fd1621ad6edf2cd1d223fa5046c55>();
};

class <lambda_846079e23c0257884385df0931f00d2a>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_848f026c7cdcfe47855eb2a40281f753>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_8525b814e3f03e57e1585ff149162539>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_85ce8dc69fb31a5df73cef2b402bbb84>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_862499b61e6b9d955eaf8ecd0954aa47>
{
	~<lambda_862499b61e6b9d955eaf8ecd0954aa47>();
};

class <lambda_88beadff021f35af0d50422f1c3b8308>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_8953064669881ca70d793b55efcfa517>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

class <lambda_8d12eda671b34bf5085e2723ef573c16>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_8d5ca15cf69e69dee1fdb0dcddeb1e66>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_93c3f069a9fb90641732f45cb7193a43>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_9782e08ff7c5d221085b730426ac4a24>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_9a97155497ff9d6cb16133a776b9af00>
{
	void operator()();
};

class <lambda_9bfd2660e85279f4ad4f192c6a195cd6>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_9f0b54745c9d4d1fdf6b76e6ef479bb0>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_9fad4907241141dd7653dcd0fa4ba47d>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_a07167602b08f8bc750b691724e5e902>
{
	~<lambda_a07167602b08f8bc750b691724e5e902>();
};

struct <lambda_a1e75da4ef2c3c065ffeb9f08cddd285>
{
	long operator()(Windows::Internal::CHSTRINGResult &);
	~<lambda_a1e75da4ef2c3c065ffeb9f08cddd285>();
};

class <lambda_a2004cb63247ae8f4d877f1cd9f10402>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_a2cfd64541af8b208f83b916384b7570>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_a4e116048591eb4bf1c48ebc3241e8c5>
{
	void operator()();
};

class <lambda_a51e1503973a49f82e89838d18921ef3>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_a7f0a761e664b789011006ea52c1fb72>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_a95fec8a84d9c093855208333b00377e>
{
	long operator()(SEARCH_TYPEAHEAD_ITEM *,unsigned int);
};

struct <lambda_a9fe90e13b5ecb63644ffc6ec3ae9b1c>
{
	~<lambda_a9fe90e13b5ecb63644ffc6ec3ae9b1c>();
};

class <lambda_aa194dc0bf891154933407eb98fb868a>
{
	static void <lambda_invoker_cdecl>(void *);
};

struct <lambda_ac3b5fcda5e5b67d1d176401f9ad5d2c>
{
	~<lambda_ac3b5fcda5e5b67d1d176401f9ad5d2c>();
};

class <lambda_adf414d4816eb8287e92eb4757d6d00d>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_aec159daf75c9a566e43618f77172940>
{
	long operator()(SEARCH_TYPEAHEAD_ITEM *,unsigned int);
};

class <lambda_b0ff8fe1e7249911c18491e6a7e630af>
{
	static int <lambda_invoker_cdecl>(_RTL_RUN_ONCE *,void *,void * *);
};

struct <lambda_b3150c1118875fb42faa06308da66c49>
{
	long operator()(Windows::Internal::CNoResult &);
};

struct <lambda_beb4fad464f10757ed59469ee0ae8c52>
{
	long operator()(Windows::Internal::PlatformExtensions::Details::ExtensionRegistration const *,bool,bool *);
};

class <lambda_bf0cab7e367b92d194d9a1ba31b40746>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_bf3cb08b7efb8776891318e15e10cbef>
{
	<lambda_bf3cb08b7efb8776891318e15e10cbef>(CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs *,CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> > const &,CMarshaledInterface const &,void * const &);
};

class <lambda_c3f155553e6b35b2bf2efd08c4a75a2e>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_c8b199a0feb076873244f725fed1af37>
{
	void operator()();
};

struct <lambda_cef3ba3aafd407a2f9e0d318707d4b0d>
{
	long operator()(Windows::Internal::AsyncStage,long,IPickerInitializationInfo *,CUpdateFilesAsyncVectorViewResult &);
	~<lambda_cef3ba3aafd407a2f9e0d318707d4b0d>();
};

class <lambda_d2036a821cdbc640366c85c9b2e11873>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_d9ed74986d622421f103481b7099a5f2>
{
	long operator()(Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile *> *,ABI::Windows::Foundation::AsyncStatus);
};

struct <lambda_dc728b106c3cd02111e132170fdb9489>
{
	long operator()(Windows::Internal::CHSTRINGResult &);
};

class <lambda_dcf3e66f54dec85b91ad139d3613292a>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_dfe0dc155f0b4bf464ba5f4adc634e91>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_e5575181439bb1ee68c2355887a77cb6>
{
	~<lambda_e5575181439bb1ee68c2355887a77cb6>();
};

class <lambda_e5958bd695d49d89bfaa0b277999f63a>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_e67574827254f63e989f24f4081bc649>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_e955e288030a3ffc947ee5c021b65380>
{
	long operator()();
};

class <lambda_ee38b9d7056d0b273ce2b9b483012c24>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_eed8c0ae914be24852732a43a103fd0e>
{
	~<lambda_eed8c0ae914be24852732a43a103fd0e>();
};

class <lambda_ef118433b3637342f6c5dfe6692936b5>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_ef88ee175924e345a725c273155fec66>
{
	long operator()(Windows::UI::Notifications::IToastNotification *,IInspectable *);
};

struct <lambda_f2f1ec438f92b4d7225219722568e6b2>
{
	void operator()();
};

struct <lambda_f514b7d7a4bf1295c9808fb12a890baa>
{
	long operator()(unsigned short const *,unsigned short * *);
};

class <lambda_f79d5b8d2c405e687024ad1f66b4c06d>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_f7d0ff108a5240709b99e3d8a4431199>
{
	long operator()();
};

class <lambda_f8aecc173107acd1c48966a4b04e60c6>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_f91caad204f685e449df192ad7a6bc04>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_fccbbbb2c685e9b3e163dd0f2148e13f>
{
	static void <lambda_invoker_cdecl>();
};

class <lambda_fee8cea507d2413a58be13acfb66740a>
{
	static void <lambda_invoker_cdecl>(void *);
};

class <lambda_ff1cb61a894a675aef28afa9d97db49a>
{
	static void <lambda_invoker_cdecl>();
};

struct <lambda_ff70f74070915e8cfc7d0f5db4d674e7>
{
	void operator()();
};

namespace AGMHooks
{
	AGMHooks::TestHooks * g_pTestHooks;
};

namespace ARI
{
	namespace ProcessToken
	{
		namespace SysAppId
		{
			long GetAppUserModelId(_TOKEN_SECURITY_ATTRIBUTE_V1 const *,unsigned int,unsigned int *,unsigned short *);
			long GetPackageRelativeApplicationId(_TOKEN_SECURITY_ATTRIBUTE_V1 const *,unsigned int,unsigned int *,unsigned short *);
			long Open(void *,_TOKEN_SECURITY_ATTRIBUTES_INFORMATION * *,_TOKEN_SECURITY_ATTRIBUTE_V1 const * *,bool *);
			long OpenTokenForProcess(void *,void * *);
		};

	};

	void Free(void *);
};

namespace ATL
{
	class CAtlArray<CAtlRegExp<CAtlRECharTraitsW>::INSTRUCTION,CElementTraits<CAtlRegExp<CAtlRECharTraitsW>::INSTRUCTION> >
	{
		bool GrowBuffer(unsigned __int64);
	public:
		CAtlRegExp<CAtlRECharTraitsW>::INSTRUCTION & operator[](unsigned __int64);
		bool SetCount(unsigned __int64,int);
	};

	class CAtlArray<void *,CElementTraits<void *> >
	{
		bool GrowBuffer(unsigned __int64);
	public:
		bool SetCount(unsigned __int64,int);
	};

	class CAtlREMatchContext<CAtlRECharTraitsW>
	{
	protected:
		int Initialize(unsigned int,unsigned int);
		int Push(void *);
		void * Pop();
	};

	class CAtlRegExp<CAtlRECharTraitsW>
	{
	protected:
		int AddInstruction(CAtlRegExp<CAtlRECharTraitsW>::REInstructionType);
		int AddMemInstruction(CAtlRegExp<CAtlRECharTraitsW>::REInstructionType);
		int MatchToken(unsigned short const * *,int);
		int ParseAbbrev(unsigned short const * *,bool &);
		int ParseAltE(unsigned short const * *,bool &);
		int ParseArg(unsigned short const * *,bool &);
		int ParseCharClass(unsigned short const * *,bool &);
		int ParseCharItem(unsigned short const * *,unsigned short *,unsigned short *);
		int ParseCharSet(unsigned short const * *,int);
		int ParseE(unsigned short const * *,bool &);
		int ParseGroup(unsigned short const * *,bool &);
		int ParseNot(unsigned short const * *,bool &);
		int ParseRE(unsigned short const * *,bool &);
		int ParseSE(unsigned short const * *,bool &);
		void FixupMatchContext(CAtlREMatchContext<CAtlRECharTraitsW> *,unsigned short const *,unsigned short const *);
	public:
		REParseError Parse(unsigned short const *,int);
		int Match(unsigned short const *,CAtlREMatchContext<CAtlRECharTraitsW> *,unsigned short const * *);
	};

	struct CComPtr<IMMDevice>
	{
		~CComPtr<IMMDevice>();
	};

	int AtlCrtErrorCheck(int);
	void AtlThrowImpl(long);
	void _AtlRaiseException(unsigned long,unsigned long);
};

namespace AccessibilityDockTelemetry
{
	class DockWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class GetAvailableSize
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class ReserveDockingSpace
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	class UndockWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

};

class AccountActionsUI
{
	long _EnableActionButton(unsigned short const *,DirectUI::Element * *);
	long _EnableActionButtons(ACCOUNT_ACTION);
	static DirectUI::IClassInfo * s_pClassInfo;
	static long _DeleteCredential(HWND__ *,ACCOUNT_CMD_TYPE,unsigned short const *,unsigned short const *);
	void _HandleHomeAndEndKeys(DirectUI::KeyboardEvent *);
	void _PerformAction(ACCOUNT_ACTION);
	void _RefreshScale();
	void _RefreshShowKeyFocusState(bool);
protected:
	long Initialize(AppInfo *,ACCOUNT_CMD_TYPE,IPopupWindow *,unsigned int,unsigned short const *,unsigned short const *,ACCOUNT_ACTION);
	virtual void OnDestroy();
public:
	AccountActionsUI();
	long Show();
	static long Create(AppInfo *,ACCOUNT_CMD_TYPE,IPopupBase *,unsigned int,unsigned short const *,unsigned short const *,ACCOUNT_ACTION,AccountActionsUI * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnHosted(DirectUI::Element *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnUnHosted(DirectUI::Element *);
	virtual ~AccountActionsUI();
};

class AccountsCommandsLink
{
	long _InitItem(unsigned short const *,unsigned short const *,IPopupBase *,ICommandInvoker *);
public:
	static DirectUI::IClassInfo * Class;
	static long Create(unsigned short const *,unsigned short const *,IPopupBase *,ICommandInvoker *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
};

class AccountsSettingsButton
{
	long _InitItem(unsigned short const *,unsigned short const *,_tagICON_DETAILS,unsigned short const *,tagACCOUNTSTATE,ACCOUNT_ACTION,ACCOUNT_CMD_TYPE,AppInfo *,unsigned int,IPopupBase *,ICommandInvoker *);
	long _PopulateIcon(_tagICON_DETAILS);
	long _UpdateIcon();
public:
	AccountsSettingsButton();
	static DirectUI::IClassInfo * Class;
	static long Create(unsigned short const *,unsigned short const *,_tagICON_DETAILS,unsigned short const *,tagACCOUNTSTATE,ACCOUNT_ACTION,ACCOUNT_CMD_TYPE,AppInfo *,unsigned int,IPopupBase *,ICommandInvoker *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class AccountsSettingsController
{
	long _RetrieveAppAccountSettings();
	long _ScheduleLoadAppAccountSettings();
	long _StartTimers();
	void _AddAccountCommandElements();
	void _AddAppAccountProviderElements();
	void _AddAppCredentialElements();
	void _AddProviderAddAccountLink();
	void _CleanUp();
	void _FireTimerEvent(UID);
	void _HandleHomeAndEndKeys(DirectUI::KeyboardEvent *);
	void _ShowAppAccountSettings(bool);
	void _ShowProgressUI();
	void _StopTimers();
	void _TransitionApplicationPaneContent(DirectUI::Element *,TRANSITION_CONTENT_TYPE);
protected:
	AccountsSettingsController();
	long Initialize(AccountsSettingsUI *,AppInfo *,bool);
	virtual ~AccountsSettingsController();
public:
	long OnDismissCommand(IPopupWindow *);
	static long Create(AccountsSettingsUI *,AppInfo *,bool,AccountsSettingsController * *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
};

class AccountsSettingsUI
{
	static DirectUI::IClassInfo * s_pClassInfo;
	void _RefreshScale();
protected:
	long Initialize(AppInfo *,IPopupWindow *,bool,unsigned short const *);
public:
	AccountsSettingsUI();
	long AddAccountCommandLink(DirectUI::Element *);
	long AddDescription(unsigned short const *);
	long AddProgressUI(unsigned short const *,bool);
	long Show(IImmersiveMonitor *);
	long ShowProviderAddAccountLink(DirectUI::Element * *);
	static long Create(AppInfo *,IPopupBase *,bool,AccountsSettingsUI * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnHosted(DirectUI::Element *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnUnHosted(DirectUI::Element *);
	virtual ~AccountsSettingsUI();
	void AddErrorHeaderInfo(unsigned long);
	void RefreshShowKeyFocusState();
	void SetDefaultFocusableElement();
};

struct AccountsSettingsUIEvent
{
	static UID AppAccountSettingError;
	static UID AppAccountSettingsRetrieved;
	static UID MaxProgressComplete;
	static UID MinProgressComplete;
	static UID ShowProgress;
};

struct AgileGitPtr
{
	long CopyLocal<IAudioFlyoutController>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IAudioFlyoutController> >);
	long CopyLocal<IImmersiveAppCrusher>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IImmersiveAppCrusher> >);
	long CopyLocal<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> > >);
	long Revoke();
	~AgileGitPtr();
};

struct AgileProfferServiceImpl
{
	struct ServiceItem
	{
		~ServiceItem();
	};

	long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ProfferService(_GUID const &,IServiceProvider *,unsigned long *);
	virtual long RevokeService(unsigned long);
};

class AnimatedTouchButton
{
	long _SetThemedIcon();
	static DirectUI::IClassInfo * s_pClassInfo;
	void _FireClickDone();
public:
	AnimatedTouchButton();
	static UID ClickDone();
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class AppBarInvoker
{
	long FireEvent(EdgeGestureEventToTrigger,EDGEGESTURE_INVOCATION_KIND);
	long InitializeScheduler();
	void DismissAllLightDismiss();
public:
	AppBarInvoker();
	virtual long CancelSwipe();
	virtual long CommitSwipe(unsigned int,tagPOINT);
	virtual long ContinueSwipe(unsigned int,tagPOINT);
	virtual long InvokeForApp(IImmersiveApplication *);
	virtual long SetSite(IUnknown *);
	virtual long StartExtendedSwipe(tagPOINT,unsigned int,tagPOINT);
	virtual long StartSwipe(unsigned int,tagPOINT);
};

namespace AppCloseTelemetry
{
	class ShellAppCrusherCloseApp
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void Stop(long,bool);
	};

	class ShellConfirmCloseRequest
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long);
	};

};

class AppCrashUI
{
	long ConfigureCrashText();
	long GetClassNameForPickerType(PICKER_TYPE,unsigned short const * *);
	long SetClassAndForegroundColor(DirectUI::Element *,unsigned short const *,unsigned long);
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	static long CreateFromMarkup(IComponentUIHostedAppFrame *,HWND__ *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class AppCustomizedMenuMap
{
	bool _GetSectionAndItemIdFromViewIndex(std::vector<std::shared_ptr<MenuSection>,std::allocator<std::shared_ptr<MenuSection> > > const &,unsigned int,unsigned int *,unsigned int *);
	bool _GetSectionAndItemIndexFromViewIndex(std::vector<std::shared_ptr<MenuSection>,std::allocator<std::shared_ptr<MenuSection> > > const &,unsigned int,unsigned int *,unsigned int *);
	bool _GetViewIndexFromSectionIdAndItemId(std::vector<std::shared_ptr<MenuSection>,std::allocator<std::shared_ptr<MenuSection> > > &,unsigned int,unsigned int,unsigned int *);
	bool _IsActionInDefaultTools(InputDialCommon::InputDialMenuGlobalTool);
	long _AddAndRemoveDynamicGlobalTools(std::vector<InputDialCommon::InputDialMenuGlobalTool,std::allocator<InputDialCommon::InputDialMenuGlobalTool> > &);
	long _AddPerAppCustomTools(std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > const &,std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > *);
	long _CreateAndSetGlobalToolSection(HWND__ *,std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > const &);
	long _CreateGlobalInputDialMenuItemListFromToolIdList(std::vector<InputDialCommon::InputDialMenuGlobalTool,std::allocator<InputDialCommon::InputDialMenuGlobalTool> > const &,std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > *);
	long _GetGlobalToolsForApp(unsigned short const *,int *,std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > *);
	long _GetGlobalToolsFromSettingsWithDefault(unsigned short const *,int *,std::vector<InputDialCommon::InputDialMenuGlobalTool,std::allocator<InputDialCommon::InputDialMenuGlobalTool> > *);
	long _ResetActiveToolIndex(InputDialCustomizedAppToolsInfo &);
	long _SetAppId(unsigned short const *);
	long _SetCustomActions();
	std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > > > _GetAppInfoForForegroundApp(HWND__ *);
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::shared_ptr<MenuSection> > > > _GetMenuSectionById(std::vector<std::shared_ptr<MenuSection>,std::allocator<std::shared_ptr<MenuSection> > > &,unsigned int,bool *);
	unsigned int _GetViewIndexFromSectionAndItemIndex(std::vector<std::shared_ptr<MenuSection>,std::allocator<std::shared_ptr<MenuSection> > > const &,unsigned int,unsigned int);
public:
	AppCustomizedMenuMap();
	long AddMenuSection(HWND__ *,HWND__ *,Windows::Foundation::IEventHandler<IInspectable *> *,EventRegistrationToken *,unsigned int *);
	long AddToolToMenuSection(HWND__ *,unsigned int,unsigned int,InputDialMenuItem const &);
	long EnsureGlobalToolsEntry(HWND__ *);
	long GetActiveTool(HWND__ *,unsigned int *,unsigned int *);
	long GetActiveToolInfo(HWND__ *,unsigned int *,InputDialToolInfo *,bool *);
	long GetAggregateMenuItemsForView(HWND__ *,InputDialAppToolsInfo *);
	long GetAppToolsIdCollection(HWND__ *,std::vector<unsigned int,std::allocator<unsigned int> > *);
	long Initialize(std::shared_ptr<InputGlobalToolHandler>);
	long LoadSettingsDataOnDemand();
	long LookupAndSetAppId(HWND__ *);
	long RemoveAllToolsFromMenuSection(HWND__ *,unsigned int);
	long RemoveMenuSection(HWND__ *,unsigned int,EventRegistrationToken);
	long RemoveToolFromMenuSection(HWND__ *,unsigned int,unsigned int);
	long SelectPreviouslyActiveMenuItem(HWND__ *,HWND__ *,bool *);
	long SelectSystemTool(HWND__ *,InputDialCommon::InputDialMenuGlobalTool const &,bool *);
	long SendCustomToolActivationToApp(HWND__ *,unsigned int);
	long SetActiveToolForMenuSection(HWND__ *,HWND__ *,unsigned int,unsigned int);
	long SetActiveToolIndex(HWND__ *,unsigned int);
	long SetGlobalTools(HWND__ *,std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > const &);
	long StoreAppToolsIdCollection(HWND__ *,std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > const &);
	void ResetGlobalTools(HWND__ *);
	~AppCustomizedMenuMap();
};

class AppInfo
{
	AppInfo();
	long _InitContext(IUnknown *,IImmersiveMonitor *);
	long _InitFromHWND();
	void _InitAppStoreCheck();
	void _InitFromShellItem();
	void _Initialize(IUnknown *,IImmersiveMonitor *);
public:
	static long Create(IUnknown *,IImmersiveMonitor *,AppInfo * *);
};

class AppItemList
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	virtual DirectUI::Element * GetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long);
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class AppItemListContainer
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	DirectUI::Element * GetSelection();
	static DirectUI::PropertyInfo const * SelectionProp();
	static UID SelectionChange();
	virtual DirectUI::Element * GetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long SetSelection(DirectUI::Element *);
	virtual void OnKeyFocusMoved(DirectUI::Element *,DirectUI::Element *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

struct AppListTilePinnedEvent
{
	static UID EventType;
};

struct ApplicationHostTelemetry
{
	class ActivationWorkerThread
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ActivationWorkerThread();
	};

	class HandleViewCreated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~HandleViewCreated();
	};

	class HandleViewDestroyed
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~HandleViewDestroyed();
	};

	class OnClientWindowReadyForPresentationChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~OnClientWindowReadyForPresentationChanged();
	};

	static void ActivateApplicationForExperienceWithPropertySetAndWindowFactory<long &>(long &);
	static void ApplicationHost_AppWindowActivated();
	static void ApplicationHost_SignalToSplashScreenAppReady();
	static void DelayingSplashScrenTimerDueToCS();
	static void ResumingSplashScrenTimerDueToCSExit();
};

struct ApplicationIdentityInfo
{
	ApplicationIdentityInfo(HSTRING__ *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,IInspectable *);
	Microsoft::WRL::Wrappers::HString GetManifestedExecutable();
	Microsoft::WRL::Wrappers::HString GetPackagePath();
	Microsoft::WRL::Wrappers::HString GetProcessPath(unsigned short const *);
	Microsoft::WRL::Wrappers::HString const & PackageFullName();
	static Microsoft::WRL::ComPtr<ApplicationIdentityInfo> Create(HSTRING__ *,unsigned long,unsigned long,IInspectable *);
	virtual long GetActivatedEventArgs(IInspectable * *);
	virtual long GetIdentityInfo(unsigned short * *,unsigned short * *);
	virtual long GetOptions(unsigned long *);
	virtual long GetParentProcessId(unsigned long *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual ~ApplicationIdentityInfo();
};

struct ApplicationViewCollectionBase
{
	virtual long GetViewForAppUserModelId(unsigned short const *,IApplicationView * *);
	virtual long GetViewForApplication(IImmersiveApplication *,IApplicationView * *);
	virtual long GetViewForHwnd(HWND__ *,IApplicationView * *);
	virtual long GetViewInFocus(IApplicationView * *);
	virtual long GetViews(IObjectArray * *);
	virtual long GetViewsByAppUserModelId(unsigned short const *,IObjectArray * *);
	virtual long GetViewsByZOrder(IObjectArray * *);
	virtual long RefreshCollection();
	virtual long RegisterForApplicationViewChanges(IApplicationViewChangeListener *,unsigned long *);
	virtual long UnregisterForApplicationViewChanges(unsigned long);
};

struct ApplicationViewCollectionRegistration
{
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long Register(IApplicationViewVisibilityDebouncedNotificationService *);
	virtual void Unregister();
};

class ApplicationViewFilteredCollection
{
	long FireApplicationViewChangeNotification(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
public:
	ApplicationViewFilteredCollection();
	long RuntimeClassInitialize(IApplicationViewCollection *,IApplicationViewVisibilityDebouncedNotificationService *,IObjectCollection *);
	virtual long GetViews(IObjectArray * *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long RegisterForApplicationViewChanges(IApplicationViewChangeListener *,unsigned long *);
	virtual long TryGetLastActiveVisibleView(IApplicationView * *);
	virtual long UnregisterForApplicationViewChanges(unsigned long);
	virtual ~ApplicationViewFilteredCollection();
};

namespace ApplicationViewHelpers
{
	HWND__ * GetWindowForView(IApplicationView *);
	IImmersiveApplication * GetApplicationFromView(IApplicationView *);
	bool CanMaximizeView(IApplicationView *);
	bool CanResizeView(IApplicationView *);
	bool HasRootSwitchableOwner(IApplicationView *);
	bool IsViewOnMonitor(IApplicationView *,IImmersiveMonitor *);
	long GetApplicationFromView(IApplicationView *,IImmersiveApplication * *);
	long GetViewForApplication(IUnknown *,IImmersiveApplication *,IApplicationView * *);
};

struct ApplicationViewOperation
{
	ApplicationViewOperation();
	virtual long GetAppChromePolicy(APP_CHROME_CONFIGURATION_POLICY *);
	virtual long GetChromeOptions(APPLICATION_FRAME_CHROME_OPTIONS *,APPLICATION_FRAME_CHROME_OPTIONS *);
	virtual long GetPosition(IApplicationViewPosition * *);
	virtual long GetPreferredAspectRatioHint(tagSIZE *);
	virtual long GetSizeConstraintOverridesLogical(tagSIZE *,tagSIZE *);
	virtual long GetSizeConstraintOverridesPhysical(tagSIZE *,tagSIZE *);
	virtual long GetTitlebarConfiguration(IApplicationViewTitlebarConfiguration * *);
	virtual long GetTouchBehavior(APPLICATION_FRAME_TOUCH_BEHAVIOR *);
	virtual long GetViewStateData(APPLICATION_VIEW_DATA_UPDATE *);
	virtual long GetVisibility(int *);
	virtual long GetWindowingEnvironmentConfig(IWindowingEnvironmentConfig * *);
	virtual long GetZOrderBand(unsigned long *);
	virtual long SetAppChromePolicy(APP_CHROME_CONFIGURATION_POLICY);
	virtual long SetArrangeOptions(ARRANGEMENT_BASED_VIEW_STATE_OPTIONS);
	virtual long SetArrangeState(ARRANGEMENT_BASED_VIEW_STATE);
	virtual long SetChromeOptions(APPLICATION_FRAME_CHROME_OPTIONS,APPLICATION_FRAME_CHROME_OPTIONS);
	virtual long SetPosition(IApplicationViewPosition *);
	virtual long SetPreferredAspectRatioHint(tagSIZE *);
	virtual long SetRestoreRect(tagRECT);
	virtual long SetSizeConstraintOverridesLogical(tagSIZE *,tagSIZE *);
	virtual long SetSizeConstraintOverridesPhysical(tagSIZE *,tagSIZE *);
	virtual long SetSnapOptions(unsigned long);
	virtual long SetTitlebarConfiguration(IApplicationViewTitlebarConfiguration *);
	virtual long SetTouchBehavior(APPLICATION_FRAME_TOUCH_BEHAVIOR);
	virtual long SetViewStateData(APPLICATION_VIEW_DATA_UPDATE const *);
	virtual long SetVisibility(int);
	virtual long SetWindowingEnvironmentConfig(IWindowingEnvironmentConfig *);
	virtual long SetZOrderBand(unsigned long);
	virtual long get_ShouldReconnectTitleBar(unsigned char *);
	virtual long get_ShouldRecreateTitleBar(unsigned char *);
	virtual long get_TabGroupId(Windows::Internal::ComposableShell::Tabs::ShellTabGroupId *);
	virtual long put_ShouldReconnectTitleBar(unsigned char);
	virtual long put_ShouldRecreateTitleBar(unsigned char);
	virtual long put_TabGroupId(Windows::Internal::ComposableShell::Tabs::ShellTabGroupId);
};

struct ApplicationViewTitlebarConfiguration
{
	ApplicationViewTitlebarConfiguration();
	virtual long GetDragOptions(TITLE_BAR_DRAG_OPTIONS *);
	virtual long GetEnabledSystemMenuItems(TITLE_BAR_SYSTEM_MENU_ITEMS *);
	virtual long GetHideOptions(TITLE_BAR_HIDE_OPTIONS *);
	virtual long GetShowOptions(TITLE_BAR_SHOW_OPTIONS *,TITLE_BAR_SHOW_OPTIONS *);
	virtual long GetSuppressedButtons(TITLE_BAR_SUPPRESSIBLE_BUTTONS *,TITLE_BAR_SUPPRESSIBLE_BUTTONS *);
	virtual long GetVisibility(int *);
	virtual long GetVisibleButtons(TITLE_BAR_BUTTONS *,TITLE_BAR_BUTTONS *);
	virtual long SetDragOptions(TITLE_BAR_DRAG_OPTIONS);
	virtual long SetEnabledSystemMenuItems(TITLE_BAR_SYSTEM_MENU_ITEMS);
	virtual long SetHideOptions(TITLE_BAR_HIDE_OPTIONS);
	virtual long SetShowOptions(TITLE_BAR_SHOW_OPTIONS,TITLE_BAR_SHOW_OPTIONS);
	virtual long SetSuppressedButtons(TITLE_BAR_SUPPRESSIBLE_BUTTONS,TITLE_BAR_SUPPRESSIBLE_BUTTONS);
	virtual long SetVisibility(int);
	virtual long SetVisibleButtons(TITLE_BAR_BUTTONS,TITLE_BAR_BUTTONS);
};

namespace ApplicationViewTraceLoggingHelpers
{
	long GetViewName(IApplicationView *,unsigned short * *);
};

namespace AssignedAccessTelemetry
{
	class AssignedAccessControllerProxy_ApplyAssignedAccessIfNeeded
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~AssignedAccessControllerProxy_ApplyAssignedAccessIfNeeded();
	};

};

struct AsynchronousCancelEvent
{
	static UID AsynchronousCancel;
};

struct AsynchronousRearrangeEvent
{
	static UID AsynchronousRearrange;
};

namespace AutoGameProfile
{
	bool IsAMDCpu();
	long GetGameProfileFromAttribute(KnownGameList::AttributeValue *,unsigned long,unsigned long *,unsigned __int64 *,unsigned long *,bool *,bool *);
	long GetGameProfileFromRawData(unsigned long,unsigned long,unsigned char const *,unsigned long,unsigned long *,unsigned __int64 *,unsigned long *,bool *,bool *);
	long GetGameRelatedFromGcsData(unsigned short const *,unsigned long,unsigned long *,KnownGameList::GMRelatedProcess * *);
	long _Tokenize(unsigned short const *,unsigned short const *,std::function<long (unsigned short *,int)>);
};

class AutoPlayTile
{
	long _GetIconFromPath(unsigned short const *,HBITMAP__ * *);
	long _Init(IAutoplayHandler *,unsigned short const *);
	long _InitializeColor();
	long _OnDownloadComplete();
	long _OnDownloadError(int);
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	AutoPlayTile();
	long GetID(unsigned short * *);
	long InitUI(unsigned short const *,unsigned short const *,unsigned short const *);
	static long CreateAndInit(CDUIResourceManager const &,DirectUI::Element *,IAutoplayHandler *,unsigned short const *,tag_GROUPIDS,DirectUI::Element * *);
	static long CreateAndInitInProgress(CDUIResourceManager const &,CAutoPlayHandlerChooser *,DirectUI::Element *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,DirectUI::Element * *);
	static long Register();
	static void DownloadStateChange(HDEVQUERY__ *,void *,_DEV_QUERY_RESULT_ACTION_DATA const *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnInvoke(unsigned int,void *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual ~AutoPlayTile();
	void GetHandler(IAutoplayHandler * *);
};

struct AutoStubBias<IUnknown,Windows::Internal::INilDelegate>
{
	AutoStubBias<IUnknown,Windows::Internal::INilDelegate>(IRpcOptions *,IUnknown *,Windows::Internal::INilDelegate *);
	~AutoStubBias<IUnknown,Windows::Internal::INilDelegate>();
};

struct AutoStubBias<Windows::Foundation::IAsyncAction,Windows::Foundation::IAsyncActionCompletedHandler>
{
	AutoStubBias<Windows::Foundation::IAsyncAction,Windows::Foundation::IAsyncActionCompletedHandler>(IRpcOptions *,Windows::Foundation::IAsyncAction *,Windows::Foundation::IAsyncActionCompletedHandler *);
	~AutoStubBias<Windows::Foundation::IAsyncAction,Windows::Foundation::IAsyncActionCompletedHandler>();
};

struct AutoStubBias<Windows::Foundation::IAsyncOperation<HSTRING__ *>,Windows::Foundation::IAsyncOperationCompletedHandler<HSTRING__ *> >
{
	AutoStubBias<Windows::Foundation::IAsyncOperation<HSTRING__ *>,Windows::Foundation::IAsyncOperationCompletedHandler<HSTRING__ *> >(IRpcOptions *,Windows::Foundation::IAsyncOperation<HSTRING__ *> *,Windows::Foundation::IAsyncOperationCompletedHandler<HSTRING__ *> *);
	~AutoStubBias<Windows::Foundation::IAsyncOperation<HSTRING__ *>,Windows::Foundation::IAsyncOperationCompletedHandler<HSTRING__ *> >();
};

struct AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >
{
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >(IRpcOptions *,Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> *,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> *);
	~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >();
};

struct AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> >
{
	AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> >(IRpcOptions *,Windows::Foundation::IAsyncOperation<bool> *,Windows::Foundation::IAsyncOperationCompletedHandler<bool> *);
	~AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> >();
};

struct AutoplayUITelemetry
{
	class InvokeAutoplayHandler
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		void Stop(unsigned short const *,long,bool,bool);
	};

	class NonvolumeAutoplay
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		void Stop(unsigned short const *,bool,bool);
	};

	class VolumeAutoplayInitiated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,bool,unsigned long);
		void Stop(bool,bool);
	};

	class VolumeAutoplaySniffComplete
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		void Stop(unsigned short const *,bool,bool);
		void StopWithResult<unsigned short * &,bool &,bool &>(long,unsigned short * &,bool &,bool &);
	};

	static void AutoplayHandlerPostDialogShownCounts<_GUID &,unsigned long &,unsigned long &>(_GUID &,unsigned long &,unsigned long &);
	static void AutoplayHandlerPreDialogShownCounts<_GUID &,unsigned long &,unsigned long &>(_GUID &,unsigned long &,unsigned long &);
};

class AvailableMiracastDeviceEnumerator
{
	struct EnumeratedMiracastDeviceInfo
	{
		EnumeratedMiracastDeviceInfo & operator=(EnumeratedMiracastDeviceInfo const &);
		EnumeratedMiracastDeviceInfo(DeviceDisplayItem *,IMiracastDeviceChallenge *,bool);
	};

	int FindEnumeratedMiracastDeviceUnderLock(unsigned short const *);
	void CheckInitialAvailableEnumerationCompleteAndNotifyUnderLock();
	void HandlePairedMiracastDeviceAdded(DeviceDisplayItem *);
	void HandlePairedMiracastDeviceChallengeComplete(unsigned short const *,MiracastDeviceChallengeState);
	void HandlePairedMiracastDeviceRemoved(unsigned short const *);
	void HandlePairedMiracastDeviceUpdated(DeviceDisplayItem *);
	void HandlePairedMiracastDevicesEnumerationComplete();
public:
	AvailableMiracastDeviceEnumerator();
	long RuntimeClassInitialize(IAvailableMiracastDeviceEnumeratorListener *);
	virtual long OnDeviceElementSourceNotification(_DeviceElementSourceNotificationType,DeviceDisplayItem *);
	virtual long StartEnumeration();
	virtual void OnChallengeComplete(IMiracastDeviceChallenge *);
	virtual void Shutdown();
};

struct AvailableNetworksExperienceFlow
{
	virtual long Execute();
};

class AvailableNetworksExperienceFlowCF
{
	virtual ~AvailableNetworksExperienceFlowCF();
public:
	AvailableNetworksExperienceFlowCF();
};

struct BUCKET
{
	BUCKET();
	~BUCKET();
};

class BackStack
{
	long AddLayoutChangeStackEntry(IAppLayoutOperation *);
	long AddTargetEntry(StackEntryType);
	long DedupeApplicationViewsBasedOnTopMostLayout();
	long EvictMostRecentlyActivatedAppHelper(ITabletModePositioner *,IAppLayout *,IAppLayoutOperation * *);
	long FlattenPreviousLayouts(ITabletModePositioner *);
	long MakeAppFullScreenAndGetLayoutHelper(ITabletModePositioner *,IApplicationView *,BackOperationFlags,IAppLayout * *);
	long MakeAppFullScreenHelper(ITabletModePositioner *,IApplicationView *,BackOperationFlags,IAppLayoutOperation * *);
	long OnBackStackUpdated();
	long SwitchToCustomLayoutHelper(ITabletModePositioner *,IAppLayout *,SwitchToCustomLayoutFlags,IAppLayoutOperation * *);
public:
	long HandleInAppBackOnTarget(SHELL_TARGET_IDENTIFIER);
	long HandleLayoutChanged(IAppLayoutOperation *,ITabletModePositioner *);
	long PopBackActionResult(IApplicationView *,ITabletModePositioner *,Action *,IAppLayoutOperation * *);
	void GetInAppBackOnTargetOverrideAction(SHELL_TARGET_IDENTIFIER,bool,OverrideAction *);
};

class BackTelemetry
{
	class HandlingInvocation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		HandlingInvocation TransferToCurrentThread();
		void AttemptingDismissBackContractHandler(SHELL_TARGET_IDENTIFIER);
		void AttemptingInAppBack(IApplicationView *);
		void AttemptingSystemBack();
		void DesktopModeInAppNotHandled(IApplicationView *);
		void DismissBackContractHandlerOverridden(SHELL_TARGET_IDENTIFIER,OverrideAction);
		void DismissedBackContractHandler(SHELL_TARGET_IDENTIFIER);
		void IgnoreDueToActiveRequest();
		void IgnoreInAppResponse();
		void InAppBack(IApplicationView *);
		void NoActionDueToStartVisibleOnEmptyBackstack();
		void StartActivity(SHELL_TARGET_IDENTIFIER,IApplicationView *,BACK_INVOKE_FLAGS);
		void SytemBackResultAppLayout();
		void SytemBackResultDismissLauncher();
		void SytemBackResultShowLauncher();
		void SytemBackResultShowLauncherNoop();
		void TabletModeInAppNotHandled(IApplicationView *);
		void TryInAppFailed(IApplicationView *);
		void UnexpectedAppResponse(IApplicationView *);
		~HandlingInvocation();
	};

	class InAppBackInvocation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *);
		void Stop(InAppBackResponse);
		~InAppBackInvocation();
	};

	static unsigned short const * CensorAppID(unsigned short const *);
};

class BackTracker
{
	long InvokeSystemBack();
	void Destroy();
	void Reset(BackTracker::State);
public:
	BackTracker();
	long RuntimeClassInitialize();
	virtual long AppLayoutChanged(IImmersiveMonitor *,IAppLayoutOperation *);
	virtual long InAppBackResult(IApplicationView *,InAppBackResponse);
	virtual long InvokeBack(BACK_INVOKE_FLAGS);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long PerformDelayedInitialization();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long TargetChanged(SHELL_TARGET_IDENTIFIER,IApplicationView *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~BackTracker();
};

namespace BackstackHelpers
{
	_FILETIME const s_FILETIME_MAX;
	_FILETIME const s_FILETIME_MIN;
	bool IsBackstackTimestampForApp(IImmersiveApplication *,_FILETIME const *);
	long GetBackstackTimestampForApp(IImmersiveApplication *,_FILETIME *);
	long SetActivationTimestampForApp(IImmersiveApplication *,_FILETIME const &);
	long SetBackstackTimestampForApp(IImmersiveApplication *,_FILETIME const &);
};

class BadgeWindow
{
	__int64 OnGetObject(unsigned __int64,__int64,bool *);
	long EnsureWindow();
	long LoadFonts(unsigned int);
	long SetRectInternal(Geometry::CRect const &);
	long SetVisibility(bool);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void EndDrag();
	void GetBadgeColors(unsigned long *,unsigned long *,unsigned long *);
	void OnLButtonUp();
	void OnMouseLeave();
	void OnMouseMove(Geometry::CPoint const &);
	void OnPaint(HDC__ *);
	void RegisterWindowClass();
public:
	BadgeWindow();
	long RuntimeClassInitialize();
	virtual BadgeExpansionType GetExpansionType();
	virtual BadgeState GetWindowState();
	virtual BadgeWindowMetrics GetMetrics();
	virtual Geometry::CRect GetRect();
	virtual bool HasForeground();
	virtual bool IsMoving();
	virtual bool IsVisible();
	virtual long ComputeExpandedWindowSize(int,Geometry::CSize *);
	virtual long Hide();
	virtual long SetEnterpriseId(unsigned short const *);
	virtual long SetPosition(BadgePosition const &);
	virtual long SetRect(Geometry::CRect const &);
	virtual long Show();
	virtual long TakeForeground();
	virtual void CancelDrag();
	virtual void Destroy();
	virtual void SetInteractionHandler(IBadgeWindowInteractionHandler *);
	virtual ~BadgeWindow();
};

class BadgeWindowAccessibility
{
	long RaiseNamePropertyChangedEvent();
public:
	BadgeWindowAccessibility();
	virtual long ElementProviderFromPoint(double,double,IRawElementProviderFragment * *);
	virtual long GetEmbeddedFragmentRoots(tagSAFEARRAY * *);
	virtual long GetFocus(IRawElementProviderFragment * *);
	virtual long GetPatternProvider(int,IUnknown * *);
	virtual long GetPropertyValue(int,tagVARIANT *);
	virtual long GetRuntimeId(tagSAFEARRAY * *);
	virtual long Navigate(NavigateDirection,IRawElementProviderFragment * *);
	virtual long SetEnterpriseId(unsigned short const *);
	virtual long SetFocus();
	virtual long get_BoundingRectangle(UiaRect *);
	virtual long get_FragmentRoot(IRawElementProviderFragmentRoot * *);
	virtual long get_HostRawElementProvider(IRawElementProviderSimple * *);
	virtual long get_ProviderOptions(ProviderOptions *);
	virtual void BadgeWindowHidden();
	virtual void BadgeWindowShown();
	virtual void ViewEnterpriseStatusLost();
};

class BadgeWindowController
{
	bool IsForegroundViewOwnedToView(IApplicationView *);
	bool IsTargetView(IApplicationView *);
	bool IsViewOwnedByTargetView(IApplicationView *);
	bool ShouldAttachToView(IApplicationView *);
	bool ShouldDetachFromTargetView();
	long AttachToView(IApplicationView *);
	long DetachFromTargetView();
	long EnsureValidBadgeRect(IApplicationView *,Geometry::CRect,Geometry::CRect *);
	long RefreshViewAttachment(IApplicationView *,bool);
	long StartCollapseTimer();
	long UpdateBadgePositionAndShowCollapsed();
	long UpdateBadgeState(BadgeState);
	void ReevaluateTargetView();
public:
	BadgeWindowController();
	long RuntimeClassInitialize(IEnterpriseChromeManagerInternal *,IBadgeWindow *);
	virtual long ComputeCollapsedBadgePositionForView(IApplicationView *,BadgePosition *);
	virtual long ComputeExpandedBadgePositionForView(IApplicationView *,BadgePosition *);
	virtual long GetAccessibleObject(HWND__ *,IRawElementProviderSimple * *);
	virtual long GetTargetView(IApplicationView * *);
	virtual long OnDragEnd(Geometry::CRect const &);
	virtual long OnInvoked();
	virtual long OnKeyDown(unsigned int);
	virtual long OnMoving(Geometry::CRect const &,Geometry::CRect *);
	virtual long PersistBadgeOffsetForView(IApplicationView *,unsigned int,PersistPositionFlags);
	virtual void Destroy();
	virtual void ImmersiveAppPresentedWindowChanged(IApplicationView *);
	virtual void MoveSizeEnd();
	virtual void MoveSizeStart(IApplicationView *);
	virtual void OnForegroundLost();
	virtual void TryMoveForegroundToBadgeWindow();
	virtual void ViewEnterpriseChromePreferenceChanged(IApplicationView *);
	virtual void ViewEnterpriseStatusChanged(IApplicationView *);
	virtual void ViewForgotten(IApplicationView *);
	virtual void ViewGainedForeground(IApplicationView *);
	virtual void ViewLostForeground(IApplicationView *);
	virtual void WindowPositionChanged(IApplicationView *);
};

struct BadgeWindowMetrics
{
	void ConvertToPhysicalMetrics(unsigned int);
};

class BadgeWindowPositionCache
{
	long UpdateOrCreatePersistedBadgeWindowPosition<Microsoft::WRL::ComPtr<IApplicationView> >(std::unordered_map<Microsoft::WRL::ComPtr<IApplicationView>,BadgeWindowPositionCache::PersistedBadgePosition,std::hash<Microsoft::WRL::ComPtr<IApplicationView> >,std::equal_to<Microsoft::WRL::ComPtr<IApplicationView> >,std::allocator<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > &,Microsoft::WRL::ComPtr<IApplicationView> const &,unsigned int,unsigned int);
	long UpdateOrCreatePersistedBadgeWindowPosition<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(std::unordered_map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,BadgeWindowPositionCache::PersistedBadgePosition,std::hash<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::equal_to<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,unsigned int,unsigned int);
public:
	BadgeWindowPositionCache();
	virtual long GetPhysicalPersistedOffsetForView(IApplicationView *,BadgeWindowUtils::WindowPosition const &,unsigned int *);
	virtual long PersistBadgeOffsetForView(IApplicationView *,unsigned int,PersistPositionFlags);
	virtual long ViewDestroyed(IApplicationView *);
	virtual ~BadgeWindowPositionCache();
};

namespace BadgeWindowUtils
{
	DEVICE_SCALE_FACTOR GetNearestSupportedScaleFactor(DEVICE_SCALE_FACTOR);
	Geometry::CRect MapExpandedRectToCollapsedRect(unsigned int,bool,BadgeExpansionType,BadgeWindowMetrics const &,Geometry::CRect const &);
	long ComputeBadgeOffsetForView(IApplicationView *,BadgeWindowMetrics const &,Geometry::CRect const &,BadgeState,BadgeExpansionType,unsigned int *);
	long GetFormattedEnterpriseId(unsigned short const *,unsigned short * *);
	long GetTargetViewPosition(IApplicationView *,BadgeWindowUtils::WindowPosition *);
};

class BehaviorEngineHelper
{
protected:
	long EnsureObject();
public:
	long CreateBehavior(unsigned short const *,unsigned short const *,DirectUI::Value *,IDuiBehavior * *);
	~BehaviorEngineHelper();
};

class BroadcastDVRComponent
{
	bool HandleHolographicHotkey(IMMERSIVE_HOT_KEY_ID);
	bool IsGameDVREnabled();
	bool IsGameDVRGroupPolicyEnabled();
	bool IsGameModeGame(GameConfigInfo *,GameModeReason *);
	bool IsMRPInstalled();
	bool IsNewKGLVersionAvailable(unsigned long *);
	bool IsUsingPowerProfile(_GUID const &);
	long GetDifferenceInMinutes(_SYSTEMTIME const *,_FILETIME const *,unsigned __int64 *);
	long InitializeGameBarWatchDog();
	long IsExclusiveNexusEnabledInRegistry(bool *);
	long IsExpandedResources(IApplicationView *,bool *);
	long LaunchGameOverlayWithStartupTipsFlag(HWND__ *,BroadcastDVRActiveAppInfo *);
	long LaunchGameOverlayWithUri(Windows::Internal::StringReference,Microsoft::WRL::ComPtr<Windows::Foundation::IUriRuntimeClassFactory>);
	long NotifyGameBarToUpdateKGL();
	long NotifyNexusExclusivity();
	long QueueNotifyGameBarForKGLUpdateIfNecessary(unsigned long *,unsigned long *);
	long RegisterForKGLOneSettingsUpdates();
	long RegisterHotkeysCurrentThread(bool,bool);
	long RegistryChangeNotificationCallback();
	long ResetGameControllerFocus();
	static long StaticDisplayStateChangeWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	static long StaticShellReadyWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	static unsigned long StaticPowerNotificationCallback(void *,unsigned long,void *);
	static void KGLRefreshedCallback(void *);
	static void StaticGameBarRegistryChangeNotificationCallback(void *,unsigned char);
	static void StaticKGLSettingsRegistryChangeNotificationCallback(void *,unsigned char);
	static void StaticRegistryChangeNotificationCallback(void *,unsigned char);
	unsigned long MakeAppNotificationFlagsFromAppInfo(BroadcastDVRActiveAppInfo *);
	unsigned short const * MapHotKeyToString(IMMERSIVE_HOT_KEY_ID);
	void ApplicationChangedTask(IImmersiveApplication *,IMM_APP_CHANGED);
	void ApplyGameRelatedForGameModeProcess(unsigned long,std::vector<std::pair<unsigned long,Windows::Internal::String>,std::allocator<std::pair<unsigned long,Windows::Internal::String> > > const &);
	void ApplyGameRelatedForRelatedProcess(unsigned long,unsigned short,unsigned long);
	void CompleteInitializationTask();
	void DisplayStateChangeWNFCallback(_NETWORK_DISPLAY_STATE_CHANGE_NOTIFICATION const *);
	void EvaluateAppForGameMode(IApplicationView *,BroadcastDVRActiveAppInfo *);
	void EvaluateIfViewIsGame(IApplicationView *,GameConfigInfo *,bool *,HWND__ * *,HWND__ * *);
	void GameDVRConfigChangedTask(bool);
	void GameDVREnabledChangedTask();
	void GetGameModeRequest(GameModeReason,GameConfigInfo *,_RM_GAME_MODE_RESOURCE_REQUEST *);
	void GetNonServiceProcessListAndIds(std::vector<std::pair<unsigned long,Windows::Internal::String>,std::allocator<std::pair<unsigned long,Windows::Internal::String> > > &);
	void GetSortedUniqueProcessList(std::vector<std::pair<unsigned long,Windows::Internal::String>,std::allocator<std::pair<unsigned long,Windows::Internal::String> > > const &,std::vector<Windows::Internal::String,std::allocator<Windows::Internal::String> > &);
	void NotifyGameFocusChanged(bool);
	void OnAddRemoveGameTask(HWND__ *,unsigned char,Windows::Media::Capture::Internal::ShellNotificationType,unsigned char);
	void OnApplicationViewChangedGameMode(IApplicationView *,APPLICATION_VIEW_CHANGE);
	void OnApplicationViewChangedTask(IApplicationView *,APPLICATION_VIEW_CHANGE);
	void OnGameBarInitCompleteTask(HWND__ *,unsigned long);
	void OnGameModeEnableChangeTask(HWND__ *,bool);
	void OnMessageTask(IMMERSIVE_HOT_KEY_ID);
	void OnShellHookMessageTask(short);
	void ProcessCommandTask(_BCASTDVR_COMMAND);
	void ProcessShowBroadcastUIForDeveloperTask(unsigned long);
	void ProcessUpdateCapturingEnabledForProcess(unsigned long,unsigned char);
	void RefreshGameListsTask(bool);
	void RegisterExclusiveNexusRegistryChangeNotification();
	void RegisterHotkeys(bool,bool);
	void RemoveKnownProcessesFromProcessList(std::vector<Windows::Internal::String,std::allocator<Windows::Internal::String> > const &,std::vector<Windows::Internal::String,std::allocator<Windows::Internal::String> > &);
	void SendNewNotificationTask(HWND__ *,Windows::Media::Capture::Internal::ShellNotificationType);
	void TelemetryLogProcessesLaunchedAfterGame(std::vector<Windows::Internal::String,std::allocator<Windows::Internal::String> > const &);
	void TelemetryLogProcessesLaunchedWithGame(std::vector<Windows::Internal::String,std::allocator<Windows::Internal::String> > const &);
	void TriggerGameBarOnLastFocusedWindowTask();
	void UnregisterExclusiveNexusRegistryChangeNotification();
	void UnregisterHotkeysCurrentThread();
public:
	BroadcastDVRComponent();
	long RuntimeClassInitialize();
	long SendNotificationIfGameAppInFocusTask(Windows::Media::Capture::Internal::ShellNotificationType);
	long SendShellNotificationToDVR(Windows::Media::Capture::Internal::ShellNotificationType,HWND__ *,unsigned long,bool,bool *,BroadcastDVRActiveAppInfo *);
	long SendShellNotificationToDVR2(Windows::Media::Capture::Internal::ShellNotificationType,BroadcastDVRActiveAppInfo *,unsigned long,bool,bool *);
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long EnterBroadcastMode(unsigned char);
	virtual long ExitBroadcastMode();
	virtual long GetCapturingDisabledForAnyProcess(unsigned char *);
	virtual long GetCapturingEnabledForProcess(unsigned int,unsigned char *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long IsRestrictedAppActive(unsigned char *);
	virtual long OnAddRemoveGame(HWND__ *,unsigned char,unsigned int);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnGameBarInitComplete(HWND__ *,unsigned long);
	virtual long OnGameBarTerminated();
	virtual long OnGameModeEnableChange(HWND__ *,unsigned char);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long ProcessCommand(_BCASTDVR_COMMAND);
	virtual long Register(IGameFocusEvents *,unsigned long *);
	virtual long SendNewNotification(HWND__ *,unsigned int);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long SetCameraCaptureState(HWND__ *,unsigned char,unsigned char);
	virtual long SetMicrophoneCaptureState(HWND__ *,unsigned char,unsigned char);
	virtual long ShowBroadcastUIForCoStreaming();
	virtual long ShowBroadcastUIForDeveloper(unsigned int);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TriggerGameBarOnLastFocusedWindow();
	virtual long Unregister(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long UpdateCapturingEnabledForProcess(unsigned int,unsigned char);
	virtual ~BroadcastDVRComponent();
	void RegisterNotifications();
	void UnregisterNotifications();
};

struct BroadcastDVRTraceProvider
{
	static void GameExit();
};

namespace BrowserChannels
{
	namespace Private
	{
		bool ReadExePath(HKEY__ *,unsigned short *,unsigned long);
		bool ReadRegStringValue(HKEY__ *,unsigned short const *,unsigned short *,unsigned long);
	};

};

namespace BrowserReplacementVariant
{
	namespace Private
	{
		bool IsBrowserReplacementActivated();
	};

};

class CAccessibilityDock
{
	long _EnsureLayoutManager();
	static long _s_WindowBelongsToCallingProcess(HWND__ *);
	static unsigned long _s_ForceUndockProc(void *);
	void _DoUndockWork();
	void _ForceUndock(UNDOCK_REASON);
public:
	CAccessibilityDock();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long DockWindow(HWND__ *,HMONITOR__ *,unsigned int,IAccessibilityDockingServiceCallback *);
	virtual long GetAvailableSize(HMONITOR__ *,unsigned int *,unsigned int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long QueryWorkArea(tagRECT const *,tagRECT *);
	virtual long ReserveDockingSpace(HWND__ *,HMONITOR__ *,unsigned int);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UndockWindow(HWND__ *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
};

class CAccountItemWidget
{
protected:
	long Initialize(AppInfo *,CIconCache *,ACCOUNT_CMD_TYPE,unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,tagACCOUNTSTATE,ACCOUNT_ACTION);
public:
	static long CreateAccount(AppInfo *,CIconCache *,unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,tagACCOUNTSTATE,ACCOUNT_ACTION,CSettingsWidget * *);
	static long CreateAccountProvider(AppInfo *,CIconCache *,unsigned int,unsigned short const *,unsigned short const *,CSettingsWidget * *);
	static long CreateCredential(AppInfo *,CIconCache *,unsigned int,ACCOUNT_CMD_TYPE,unsigned short const *,unsigned short const *,CSettingsWidget * *);
	virtual void Destroy();
};

class CAccountWidget
{
protected:
	long Initialize(CIconCache *,unsigned int,AppInfo *,ACCOUNT_CMD_TYPE,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,tagACCOUNTSTATE,ACCOUNT_ACTION);
	virtual ~CAccountWidget();
public:
	virtual long CreateElement(IPopupBase *,HWND__ *,DirectUI::Element * *);
};

class CActionExecutionBroker
{
	long _ExecuteAction(HSTRING__ *,HSTRING__ *,Windows::ApplicationModel::Activation::IActivatedEventArgs *,Windows::ApplicationModel::Actions::IActionActivationInfo *,HSTRING__ *);
	long _ExecuteDefault(HSTRING__ *,Windows::ApplicationModel::Activation::IActivatedEventArgs *,Windows::ApplicationModel::Actions::IActionActivationInfo *,HSTRING__ *);
	long _FileActivateInBackStack(unsigned short const *,HSTRING__ *,Windows::ApplicationModel::Activation::IActivatedEventArgs *,Windows::ApplicationModel::Actions::IActionActivationInfo *);
	static long s_EnsureUserChosenAssociation(unsigned short const *,HWND__ *,unsigned short const *,IMMERSIVE_OPENWITH_FLAGS,unsigned short * *);
	static long s_GetProgIdFromAssoc(unsigned short const *,unsigned short * *);
	static long s_GetProgIdFromRegistration(unsigned short const *,unsigned short * *);
	static long s_ShowOpenWith(unsigned short const *,HWND__ *,IMMERSIVE_OPENWITH_FLAGS,unsigned short * *);
public:
	CActionExecutionBroker();
	long RuntimeClassInitialize();
	virtual long Execute(Windows::ApplicationModel::Actions::IActionArgs *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SyncAssoc(HSTRING__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CActionExecutionBrokerCF
{
	virtual ~CActionExecutionBrokerCF();
public:
	CActionExecutionBrokerCF();
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

class CActionWidget
{
protected:
	virtual ~CActionWidget();
public:
	virtual long CreateElement(IPopupBase *,HWND__ *,DirectUI::Element * *);
};

class CActivatedEventArgsBase
{
	virtual long v_GetActivationKind(HSTRING__ *,Windows::ApplicationModel::Activation::ActivationKind *);
protected:
	virtual ~CActivatedEventArgsBase();
public:
	CActivatedEventArgsBase();
	long MarshalObjectToPropertySet(Windows::Foundation::Collections::IPropertySet *);
	virtual long Initialize(unsigned __int64,HSTRING__ *,Windows::ApplicationModel::Activation::ApplicationExecutionState,unsigned char,unsigned char);
	virtual long InitializeViewDependent(Windows::ApplicationModel::Activation::ApplicationExecutionState,int,Windows::ApplicationModel::Activation::ISplashScreen *,unsigned char);
	virtual long get_ActivationValueSetReference(IInspectable * *);
	virtual long get_IsForegroundActivation(unsigned char *);
	virtual long get_IsHolographic(unsigned char *);
	virtual long get_Kind(Windows::ApplicationModel::Activation::ActivationKind *);
	virtual long get_PreviousExecutionState(Windows::ApplicationModel::Activation::ApplicationExecutionState *);
	virtual long get_SplashScreen(Windows::ApplicationModel::Activation::ISplashScreen * *);
	virtual long get_User(Windows::System::IUser * *);
	virtual long get_UserContext(unsigned __int64 *);
	virtual long put_ActivationValueSetReference(IInspectable *);
	virtual long put_UserContext(unsigned __int64);
};

class CActivatedEventArgsWithPrelaunchAndViewIdBase
{
protected:
	virtual ~CActivatedEventArgsWithPrelaunchAndViewIdBase();
public:
	long MarshalObjectToPropertySet(Windows::Foundation::Collections::IPropertySet *);
	virtual long get_PrelaunchActivated(unsigned char *);
};

class CActivatedEventArgsWithViewIdBase
{
protected:
	virtual ~CActivatedEventArgsWithViewIdBase();
public:
	CActivatedEventArgsWithViewIdBase();
	long MarshalObjectToPropertySet(Windows::Foundation::Collections::IPropertySet *);
	virtual long get_ActivationViewSwitcher(Windows::UI::ViewManagement::IActivationViewSwitcher * *);
	virtual long get_CurrentlyShownApplicationViewId(int *);
	virtual long get_Properties(Windows::ApplicationModel::Activation::MultiviewActivationProperties *);
	virtual long get_ViewSwitcher(Windows::UI::ViewManagement::IActivationViewSwitcher * *);
	virtual long put_ActivationViewSwitcher(Windows::UI::ViewManagement::IActivationViewSwitcher *);
	virtual long put_Properties(Windows::ApplicationModel::Activation::MultiviewActivationProperties);
};

class CActivationErrorPopup
{
	long _CreateAndFillPopup();
	long _CreateCommand(unsigned int,IPopupCommand * *);
	long _SetDUIContentHelper(IPopupWindow *);
	long _SetPopupCommandsHelper(IPopupWindow *);
	void _Close();
public:
	CActivationErrorPopup(ACTIVATIONERROR const *,ACTIVATION_PHASE,long);
	long CreateAndShowModal(unsigned short const *,ACTIVATIONERROR_DISMISS_METHOD *);
	long OnCommand(IPopupWindow *,IPopupCommand *);
	long _GetErrorMessage(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
};

struct CActivationErrorPopupCommand
{
	virtual long get_Handler(IPopupCommandHandler * *);
	virtual long get_ID(unsigned int *);
	virtual long get_Label(unsigned short * *);
};

struct CActivationErrorPopupFactory
{
	CActivationErrorPopupFactory();
	virtual long CreateActivationErrorPopup(IActivationErrorPopup * *);
};

struct CActivationErrorPopupHost
{
	CActivationErrorPopupHost();
	virtual long MaybeShowIfCriticalError(long,unsigned long,unsigned short const *,ACTIVATION_PHASE,ACTIVATIONERROR_DISMISS_METHOD *);
};

struct CActivationStoreHelper
{
	virtual long TryLaunchStoreForLauncherAppState(unsigned int,long,unsigned short const *,unsigned short const *);
};

class CAddAppointmentOperation
{
	long _CompleteAction();
public:
	CAddAppointmentOperation();
	virtual long DismissUI();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReportCanceled();
	virtual long ReportCompleted(HSTRING__ *);
	virtual long ReportError(HSTRING__ *);
	virtual long get_AppointmentInformation(Windows::ApplicationModel::Appointments::IAppointment * *);
	virtual long get_SourcePackageFamilyName(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAddFolderSuggestionActivatedArgs
{
	CAddFolderSuggestionActivatedArgs();
	long RuntimeClassInitialize(Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageFolder *> *,Windows::Internal::AddFolderSuggestion::AddFolderSuggestionLibraryType,void *,HSTRING__ *);
	virtual long Complete(Windows::Internal::AddFolderSuggestion::AddFolderSuggestionCompleteType);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Arguments(HSTRING__ * *);
	virtual long get_CallingAppPackageFullName(HSTRING__ * *);
	virtual long get_CompleteAction(Windows::Internal::AddFolderSuggestion::AddFolderSuggestionCompleteType *);
	virtual long get_FolderSuggestions(Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageFolder *> * *);
	virtual long get_LibraryType(Windows::Internal::AddFolderSuggestion::AddFolderSuggestionLibraryType *);
	virtual long get_SelectedFolders(Windows::Foundation::Collections::IVector<Windows::Storage::IStorageFolder *> * *);
	virtual long get_TileId(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAddToLockScreenOperation
{
	long _AddToLockScreen(int);
	long _AlarmSlotFull(int *,unsigned short * *);
	long _GetDisplayName(unsigned short *,unsigned short * *);
	long _LockScreenFull(int *);
	long _RemoveFromLockScreen();
	long _SetAsAlarmApp(int);
	long _SetConsentShownFlag(int);
	long _ShowContentionDialog(unsigned short const *,int *);
	long _UpgradeToNCB(unsigned short const *,int *);
public:
	long AddToLockScreen(Windows::ApplicationModel::Background::BackgroundAccessStatus *);
	long SetAsAlarm(Windows::ApplicationModel::Background::AlarmAccessStatus *);
};

struct CAgileEnumerableObjectCollection
{
	CAgileEnumerableObjectCollection();
	virtual long AddFromArray(IObjectArray *);
	virtual long AddObject(IUnknown *);
	virtual long Clear();
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long RemoveObjectAt(unsigned int);
};

class CAgileObjectContainer
{
protected:
	CAgileObjectContainer(IUnknown *,unsigned long);
	static long s_GetCurrentApartmentId(unsigned long *);
public:
	long AutoQueryInterface(_GUID const &,void * *);
	static long CreateInstance<ISettingsCollection>(ISettingsCollection *,CAgileObjectContainer * *);
	static long CreateInstance<ISettingsFlowController>(ISettingsFlowController *,CAgileObjectContainer * *);
	static long CreateInstance<ISettingsProvider>(ISettingsProvider *,CAgileObjectContainer * *);
	static long CreateInstance<ISplashScreenUI>(ISplashScreenUI *,CAgileObjectContainer * *);
	static long CreateInstance<IUnknown>(IUnknown *,CAgileObjectContainer * *);
	unsigned long Release();
};

struct CAlarmApplicationManager
{
	static TrustLevel InternalGetTrustLevel();
	static unsigned short const * InternalGetRuntimeClassName();
};

class CAlarmApplicationManagerStatics
{
	long _CheckAlarmCapable(unsigned short const *);
	long _CreateAsyncOperation(HWND__ *,unsigned short const *,Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::AlarmAccessStatus> * *);
	long _RequestAccessAsync(unsigned short const *,Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::AlarmAccessStatus> * *);
public:
	CAlarmApplicationManagerStatics();
	virtual long ActivateInstance(IInspectable * *);
	virtual long GetAccessStatus(Windows::ApplicationModel::Background::AlarmAccessStatus *);
	virtual long RequestAccessAsync(Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::AlarmAccessStatus> * *);
};

struct CAppBarTask
{
	CAppBarTask(HWND__ *,EdgeGestureEventToTrigger,EDGEGESTURE_INVOCATION_KIND);
	virtual long InternalResumeRT();
};

class CAppCrusher
{
	bool _HasConfirmAppCloseCapability(IImmersiveApplication *);
	long _CollapseAllViewsForApp(IImmersiveMonitorManager *,IImmersiveApplication *);
	long _GetImmersiveApplicationArray(IImmersiveApplicationArray * *);
	long _HandleConfirmAppClose(IImmersiveApplication *,APPCRUSHER_CLOSE_OPTIONS,unsigned long);
	long _NotifyApplicationViaCloseRequest(IImmersiveApplication *);
	long _NotifyApplicationViaWindowService(IImmersiveApplication *,bool,bool,unsigned long);
	long _NotifyListeners(CAppCrusher::AC_NOTIFY,IImmersiveApplication *);
	long _ProcessAppClosing(AC_CLOSE_INFO &);
	long _ShowPopup(PLM_TASKCOMPLETION_CATEGORY_FLAGS,AC_CLOSE_INFO const &);
	void _PerformPostTerminationTasks(IImmersiveApplication *,Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension *);
	void _PreAppClosing(IImmersiveApplication *,APPCRUSHER_CLOSE_OPTIONS,AppCrusherCloseResult *,bool *);
public:
	CAppCrusher();
	long RuntimeClassInitialize();
	virtual long CloseAllApps();
	virtual long CloseApp(IImmersiveApplication *,APPCRUSHER_INPUT,APPCRUSHER_SOURCE,APPCRUSHER_CLOSE_OPTIONS);
	virtual long CloseAppWithTelemetryCookie(IImmersiveApplication *,APPCRUSHER_INPUT,APPCRUSHER_SOURCE,APPCRUSHER_CLOSE_OPTIONS,unsigned long);
	virtual long CloseApps(IObjectArray *,APPCRUSHER_INPUT,APPCRUSHER_SOURCE,APPCRUSHER_CLOSE_OPTIONS);
	virtual long GetTaskCompletionFormatString(unsigned __int64,HSTRING__ * *);
	virtual long MinimizeApp(IImmersiveApplication *,APPCRUSHER_MINIMIZE_FLAGS);
	virtual long PerformDelayedInitialization();
	virtual long Register(IImmersiveAppCrusherNotification *,unsigned long *);
	virtual long Unregister(unsigned long);
	virtual void PopupCloseCommandInvoked();
	virtual void PopupDismissed(int);
	virtual ~CAppCrusher();
};

struct CAppCrusherCloseRequestedEventArgs
{
	CAppCrusherCloseRequestedEventArgs();
	virtual long Switch(int);
};

class CAppCrusherPopup
{
	long _CreateCommand(unsigned int,IPopupCommand * *);
	long _SetDUIContent(IPopupWindow *);
	long _SetDUIInfoText(DirectUI::Element *);
	long _SetPopupCommands(IPopupWindow *);
public:
	CAppCrusherPopup();
	long InvokeCommand(IPopupWindow *,IPopupCommand *);
	long OnDismiss(IPopupWindow *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Initialize(HWND__ *,IImmersiveApplication *,PLM_TASKCOMPLETION_CATEGORY_FLAGS,tagRECT const &);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
	virtual long Show();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAppCrusherPopupCommand
{
	virtual long get_Handler(IPopupCommandHandler * *);
	virtual long get_ID(unsigned int *);
	virtual long get_Label(unsigned short * *);
};

class CAppInstanceFolder
{
	long _AddContactProperties(IPropertyStore *,unsigned short const *);
	long _BindToLocalCopy(_ITEMID_CHILD const *,IBindCtx *,bool,_GUID const &,void * *);
	long _GetDelegateItem(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	long _GetDelegateParentAndItem(_ITEMIDLIST_RELATIVE const *,IShellFolder * *,_ITEMID_CHILD * *);
	long _GetPropertyStore(_ITEMID_CHILD const *,IBindCtx *,_GUID const &,void * *);
	long _ParseAsBarricadePage(unsigned short const *,_ITEMID_CHILD * *);
	long _ParseAsContact(unsigned short const *,IBindCtx *,_ITEMID_CHILD * *);
	long _ParseWithStorageItem(unsigned short const *,IBindCtx *,_ITEMID_CHILD * *);
public:
	CAppInstanceFolder();
	virtual long BindToObject(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long BindToStorage(_ITEMIDLIST_RELATIVE const *,IBindCtx *,_GUID const &,void * *);
	virtual long CompareIDs(__int64,_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *);
	virtual long CreateViewObject(HWND__ *,_GUID const &,void * *);
	virtual long EnumObjects(HWND__ *,unsigned long,IEnumIDList * *);
	virtual long EnumSearches(IEnumExtraSearch * *);
	virtual long GetAttributesOf(unsigned int,_ITEMID_CHILD const * const *,unsigned long *);
	virtual long GetClassID(_GUID *);
	virtual long GetCurFolder(_ITEMIDLIST_ABSOLUTE * *);
	virtual long GetDefaultColumn(unsigned long,unsigned long *,unsigned long *);
	virtual long GetDefaultColumnState(unsigned int,unsigned long *);
	virtual long GetDefaultSearchGUID(_GUID *);
	virtual long GetDetailsEx(_ITEMID_CHILD const *,_tagpropertykey const *,tagVARIANT *);
	virtual long GetDetailsOf(_ITEMID_CHILD const *,unsigned int,_SHELLDETAILS *);
	virtual long GetDisplayNameOf(_ITEMID_CHILD const *,unsigned long,_STRRET *);
	virtual long GetUIObjectOf(HWND__ *,unsigned int,_ITEMID_CHILD const * const *,_GUID const &,unsigned int *,void * *);
	virtual long Initialize(_ITEMIDLIST_ABSOLUTE const *);
	virtual long MapColumnToSCID(unsigned int,_tagpropertykey *);
	virtual long ParseDisplayName(HWND__ *,IBindCtx *,unsigned short *,unsigned long *,_ITEMIDLIST_RELATIVE * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetNameOf(HWND__ *,_ITEMID_CHILD const *,unsigned short const *,unsigned long,_ITEMID_CHILD * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CAppInstanceView
{
	bool IsWinRTPickerUsingCFD();
	bool _IsFileItemSelected(unsigned short const *,unsigned __int64 *);
	bool _IsVisible();
	bool _LocalFileUpdatesAllowed();
	long CreateAppViewWindow(IShellBrowser *,tagRECT *);
	long GetGlobalDCompDevice(IDCompositionDesktopDevice * *);
	long GetGlobalDXGIDevice(IDXGIDevice1 * *);
	long GetSelectedItems(IObjectCollection * *);
	long HandlePostActivationTasksCFD(IHostedApplicationFrameWindow *);
	long InitializeContractEventArgs(PICKER_TYPE,unsigned short const * *,IInspectable * *);
	long _CreateDelegateAppItem(unsigned short const *,IBindCtx *,IShellItem * *);
	long _DeselectFileItem(unsigned short const *);
	long _EnsureApplicationActivated(HWND__ *,unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,tagRECT const &,IInspectable *,bool *);
	long _EnsureCallbackHashTable();
	long _GetTaskCompletionCategoryFlag(PLM_TASKCOMPLETION_CATEGORY_FLAGS *);
	long _OnHostedApplicationReactivated();
	long _OnItemActivated(unsigned short const *,IBindCtx *,TOUCHVIEW_VIEW_RESPONSE);
	long _SelectFileItem(unsigned short const *,IShellItem *);
	long _SetPickerLocationTitle(Windows::Internal::String const &,bool);
	void _OnApplicationActivationComplete(SAVEBAR_FOCUS_DEFERRAL_DISPOSITION,IPickerInternal *);
public:
	CAppInstanceView(HWND__ *,IShellFolder2 *);
	long SendFocusToApp();
	static __int64 s_AppInstWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual bool DoesItemMatchViewFilter(IShellItem *);
	virtual int EqualsViewIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long AddItemByTogglingSelection(unsigned short const *,IBindCtx *);
	virtual long AddPropertySheetPages(unsigned long,int (*)(_PSP *,__int64),__int64);
	virtual long CacheCallbackForItem(_ITEMID_CHILD const *,IStreamedFileDataRequestedCallback *);
	virtual long ClearCurrentLocation();
	virtual long CompleteFileUpdate(Windows::Storage::Provider::IFileUpdateRequest *,IBindCtx *);
	virtual long ContextSensitiveHelp(int);
	virtual long CreateViewWindow(IShellView *,FOLDERSETTINGS const *,IShellBrowser *,tagRECT *,HWND__ * *);
	virtual long DestroyViewWindow();
	virtual long DoRename();
	virtual long EnableModeless(int);
	virtual long FilterByCondition(IFilterCondition *);
	virtual long FilterByText(unsigned short const *,unsigned short const *);
	virtual long FilterContent();
	virtual long GetAllowedFileTypes(Windows::Foundation::Collections::IVectorView<HSTRING__ *> * *);
	virtual long GetAppName(HSTRING__ * *);
	virtual long GetAutoArrange();
	virtual long GetCachedCallbackForItem(_ITEMID_CHILD const *,void * *,IStreamedFileDataRequestedCallback * *);
	virtual long GetCurrentFolderFlags(unsigned long *);
	virtual long GetCurrentInfo(FOLDERSETTINGS *);
	virtual long GetCurrentViewMode(unsigned int *);
	virtual long GetDefaultSpacing(tagPOINT *);
	virtual long GetFocusedItem(int *);
	virtual long GetFolder(_GUID const &,void * *);
	virtual long GetFolderMode(unsigned char *);
	virtual long GetGroupBy(_tagpropertykey *,int *);
	virtual long GetGroupSubsetCount(unsigned int *);
	virtual long GetHandle(void * *);
	virtual long GetHandlerFlags(DIALOG_RESULT_HANDLER_FLAGS *);
	virtual long GetHostedApplicationId(unsigned short * *);
	virtual long GetItem(int,_GUID const &,void * *);
	virtual long GetItemObject(unsigned int,_GUID const &,void * *);
	virtual long GetItemPosition(_ITEMID_CHILD const *,tagPOINT *);
	virtual long GetPackageFullNameAndAppUserModelId(unsigned short * *,unsigned short * *);
	virtual long GetPreviousWindowForTransition(HWND__ * *);
	virtual long GetSaveFileName(HSTRING__ * *);
	virtual long GetSelectedItem(int,int *);
	virtual long GetSelection(int,IShellItemArray * *);
	virtual long GetSelectionMarkedItem(int *);
	virtual long GetSelectionMode(Windows::Storage::Pickers::Provider::FileSelectionMode *);
	virtual long GetSelectionState(_ITEMID_CHILD const *,unsigned long *);
	virtual long GetSettingsIdentifier(HSTRING__ * *);
	virtual long GetSortColumnCount(int *);
	virtual long GetSortColumns(SORTCOLUMN *,int);
	virtual long GetSpacing(tagPOINT *);
	virtual long GetStartLocation(Windows::Storage::Pickers::Provider::StartLocation *);
	virtual long GetStartLocationPath(HSTRING__ * *);
	virtual long GetTitle(HSTRING__ * *);
	virtual long GetUIStatus(Windows::Storage::Provider::UIStatus *);
	virtual long GetUpdateTarget(Windows::Storage::Provider::CachedFileTarget *);
	virtual long GetViewMode(Windows::Storage::Pickers::PickerViewMode *);
	virtual long GetViewModeAndIconSize(FOLDERVIEWMODE *,int *);
	virtual long GetViewProperty(_ITEMID_CHILD const *,_tagpropertykey const &,tagPROPVARIANT *);
	virtual long GetVisibleItem(int,int,int *);
	virtual long GetWindow(HWND__ * *);
	virtual long HasFocusIO();
	virtual long InvokeBackNavigation(IUnknown *);
	virtual long InvokeVerbOnSelection(char const *);
	virtual long IsMoveInSameFolder();
	virtual long Item(int,_ITEMID_CHILD * *);
	virtual long ItemCount(unsigned int,int *);
	virtual long Items(unsigned int,_GUID const &,void * *);
	virtual long NavigateToIDList(_ITEMIDLIST_ABSOLUTE const *);
	virtual long OnClosing(int,IWaitHandle * *);
	virtual long OnCommit();
	virtual long OnSaveFileNameChanged(unsigned short const *);
	virtual long OnSelectCurrentLocation();
	virtual long OnUIShown();
	virtual long ProvideCurrentLocation(IBindCtx *);
	virtual long ProvideSaveFile(IBindCtx *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long Refresh();
	virtual long RemoveItemByTogglingSelection(unsigned short const *);
	virtual long RemoveTaskCompletionCategory();
	virtual long ResizeOwnedWindows();
	virtual long RestoreTaskCompletionCategory();
	virtual long SaveViewState();
	virtual long SelectAndPositionItems(unsigned int,_ITEMID_CHILD const * const *,tagPOINT *,unsigned long);
	virtual long SelectItem(_ITEMID_CHILD const *,unsigned int);
	virtual long SelectItem(int,unsigned long);
	virtual long SetAppLaunchModeAndStartLocationPath(HOSTED_APP_LAUNCH_MODE,unsigned short const *);
	virtual long SetCachedFileUpdaterEventSink(ICachedFileUpdaterEventSink *);
	virtual long SetCurrentFolderFlags(unsigned long,unsigned long);
	virtual long SetCurrentViewMode(unsigned int);
	virtual long SetExtendedTileViewProperties(_ITEMID_CHILD const *,unsigned short const *);
	virtual long SetFileSavePickerEventSink(IFileSavePickerEventSink *);
	virtual long SetGroupBy(_tagpropertykey const &,int);
	virtual long SetGroupSubsetCount(unsigned int);
	virtual long SetHostedViewEventSink(IHostedViewEventSink *);
	virtual long SetItemDeselectedSink(IItemDeselectedSink *);
	virtual long SetRedraw(int);
	virtual long SetSaveFileName(HSTRING__ *);
	virtual long SetSortColumns(SORTCOLUMN const *,int);
	virtual long SetText(FVTEXTTYPE,unsigned short const *);
	virtual long SetTileViewProperties(_ITEMID_CHILD const *,unsigned short const *);
	virtual long SetTitle(HSTRING__ *);
	virtual long SetViewModeAndIconSize(FOLDERVIEWMODE,int);
	virtual long SetViewProperty(_ITEMID_CHILD const *,_tagpropertykey const &,tagPROPVARIANT const &);
	virtual long StackByProperty(_tagpropertykey const &);
	virtual long StartFileUpdate(IShellItem *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long TranslateAcceleratorW(tagMSG *);
	virtual long UIActivate(unsigned int);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnApplicationShown();
	virtual void OnHostedApplicationReady();
	virtual void OnHostedApplicationTerminated(APP_TERMINATION_REASON);
	virtual void OnSplashScreenDismissed();
	virtual void OnViewHosted(unsigned long);
	virtual void OnWindowHosted(HWND__ *);
	virtual void UpdateParentWindow(HWND__ *);
	virtual ~CAppInstanceView();
};

struct CAppItemPropertyStoreFactory
{
	CAppItemPropertyStoreFactory(IShellItem *);
	virtual long GetPropertyStore(GETPROPERTYSTOREFLAGS,IUnknown *,_GUID const &,void * *);
	virtual long GetPropertyStoreForKeys(_tagpropertykey const *,unsigned int,GETPROPERTYSTOREFLAGS,_GUID const &,void * *);
};

struct CAppListExtensionItem
{
	CAppListExtensionItem();
	static long CreateInstance(IExtensionListItem *,IShellItem *,IAppListItem * *);
	virtual long GetDisplayProperties(IPropertyStore * *);
	virtual long GetExtensionListItem(IExtensionListItem * *);
	virtual long GetShellItem(_GUID const &,void * *);
	virtual long GetSortKeyPtr(unsigned char const * *,unsigned long *);
};

class CAppListHelper
{
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	CAppListHelper(CSimpleAppList *,LOCK_SCREEN_APPLICATION_CAPABILITIES);
	bool PostMessageW(unsigned int,unsigned __int64,__int64);
	long Initialize();
	unsigned long Release();
	void Destroy();
};

class CAppListTileElement
{
	long _InitContextMenu();
	long _InitializeRearrange();
	virtual ~CAppListTileElement();
	void _EnsureTooltip();
public:
	CAppListTileElement();
	TILE_STYLE GetTileStyle();
	long InitializeElement(IShellItem *,IPropertyStore *);
	long SetDescription(unsigned short const *,HINSTANCE__ *);
	long SetIcon(bool,HBITMAP__ *,unsigned long *);
	long SetPinned(bool);
	long SetTaskScheduler(IShellTaskScheduler *);
	long SetTileStyle(TILE_STYLE);
	static DirectUI::IClassInfo * Class;
	static DirectUI::PropertyInfo const * PinnedProp();
	static DirectUI::PropertyInfo const * TileStyleProp();
	static long Register();
	virtual DEVICE_SCALE_FACTOR GetScaleFactor();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual TILE_THEME_SELECTOR GetTileTheme();
	virtual bool ForceFocusVisibility(bool);
	virtual bool IsInvokable();
	virtual bool IsSelectable();
	virtual long Add(DirectUI::Element * *,unsigned int);
	virtual long AddToSelection();
	virtual long GetSelectionContainer(DirectUI::Element * *);
	virtual long GetShellItem(IShellItem * *);
	virtual long PerformDefaultAction();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveFromSelection();
	virtual long SelectSingle();
	virtual unsigned short const * GetAppID();
	virtual void OnChildElementsInitialized();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void PopulateTileEvent(TileEvent *);
};

class CAppListTileFactory
{
	long _CreateElementForAppListItem(IAppListItem *,TILE_STYLE,DirectUI::Element * *);
	long _CreateElementForItem(IShellItem *,IPropertyStore *,TILE_STYLE,DirectUI::Element * *);
	long _InitializeDUI(TILE_STYLE);
	long _PopulateElementWithExtensionTiles(IObjectArray *,TILE_STYLE,DirectUI::Element *);
public:
	CAppListTileFactory();
	virtual int IsTileActivatedEvent(DirectUI::Event *,TileActivatedEvent * *);
	virtual long CreateElement(unsigned short const *,HINSTANCE__ *,HBITMAP__ *,unsigned long *,TILE_STYLE,DirectUI::Element * *);
	virtual long CreateElementForExtension(IExtensionListItem *,TILE_STYLE,DirectUI::Element * *);
	virtual long CreateElementForItem(IShellItem *,TILE_STYLE,DirectUI::Element * *);
	virtual long PopulateElementWithExtensionTiles(IExtensionList *,SORTCOLUMN const *,unsigned int,TILE_STYLE,DirectUI::Element *);
	virtual long PopulateElementWithExtensionTiles(IExtensionList *,TILE_STYLE,DirectUI::Element *);
	virtual long PopulateElementWithItemTiles(IEnumShellItems *,TILE_STYLE,DirectUI::Element *);
	virtual long SetDUIParserOverrideScaleFactor(float);
	virtual long UpdateStyleSheets(DirectUI::Element *);
};

class CAppListTileRearrangeBehavior
{
	long _ReplaceElementWithPlaceholder(DirectUI::Element *);
	tagPOINT _AdjustElementPositionForBoundsAndRails(Geometry::CPoint const &);
	tagPOINT _CalculateRearrangePoint(Geometry::CPoint const &);
	void _DoKeyboardRearrange(unsigned int);
	void _RestoreElementFromPlaceholder(DirectUI::Element *);
	void _SetElementLayered(DirectUI::Element *,bool);
	void _UpdatePlaceholderPosition(Geometry::CPoint const &);
protected:
	virtual void CancelRearrange();
	virtual void CompleteRearrange(Geometry::CPoint const &,bool);
	virtual void MoveRearrange(Geometry::CPoint const &,bool);
	virtual void StartRearrange(Geometry::CPoint const &,unsigned int,RearrangeFlags);
public:
	CAppListTileRearrangeBehavior();
	virtual long OnAttach(DirectUI::Element *);
	virtual long OnDetach(DirectUI::Element *);
	virtual long OnDisplayNodeCallback(DirectUI::Element *,EventMsg *);
	virtual long OnInput(DirectUI::Element *,DirectUI::InputEvent *);
};

struct CApplicabilityCacheMonitor
{
	long RuntimeClassInitialize();
};

class CApplicationPreLaunch
{
	int IsDeviceCapabilitySupportedForPrelaunch(void *);
	long ConvertWin32PathToNtPath(unsigned short const *,unsigned long,unsigned short *);
	long HasBackgroundMediaPlaybackCapability(_SID_AND_ATTRIBUTES *,unsigned long,int *);
	long IsApplicationEligibleForPreLaunch(unsigned short const *,bool *);
	long IsStartMenuApplication(unsigned short const *,unsigned long *);
	long NotifyDefaultAppForProtocol(unsigned short const *,bool);
	long NotifyDefaultWin32ForProtocol(unsigned short const *,bool);
	long PackageContainsCentennialApp(unsigned short const *,int *);
	void IsBackgroundAccessAllowed(unsigned short const *,unsigned long *);
	void NotifyDefaultApp(unsigned short const *,unsigned short const *,bool);
public:
	CApplicationPreLaunch();
	long RuntimeClassInitialize();
	virtual long ActivateApplicationForSpeculativeLaunch(unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,unsigned long,unsigned long *);
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class CApplicationTargetingTracker
{
	static bool _s_IsValidZBIDTarget(unsigned long);
	void _HandleCrashRecovery();
	void _OnTargetChanged(APPLICATION_TARGET_TYPE,IImmersiveApplication *);
	void _QueueNotification(APPLICATION_TARGET_TYPE,IImmersiveApplication *);
public:
	CApplicationTargetingTracker();
	virtual long ClearTargetedApplication();
	virtual long GetTargetedApplication(APPLICATION_TARGET_TYPE *,IImmersiveApplication * *);
	virtual long HandleActivation(IObjectArray *,IImmersiveApplicationManagerSafeForSyncCallouts *,IImmersiveApplication *,unsigned long,MODE_CHANGE_REASON,ACTIVATION_CALLOUT_FLAGS);
	virtual long OverrideTargetedApplication(IImmersiveApplication *);
	virtual long PerformDelayedInitialization();
	virtual long RegisterForTargetingChanges(IApplicationTargetingChanges *,unsigned long *);
	virtual long UnregisterForTargetingChanges(unsigned long);
	virtual ~CApplicationTargetingTracker();
};

class CAppointmentHostedWindowActivationInfo
{
	long _CompleteAddOperationDeferral();
	long _CompleteRemoveOperationDeferral();
public:
	CAppointmentHostedWindowActivationInfo();
	long SetAddOperationDeferral(Windows::Internal::AsyncDeferral<Windows::Internal::CHSTRINGResult> *);
	long SetAddOperationResult(unsigned short const *);
	long SetRemoveOperationDeferral(Windows::Internal::AsyncDeferral<Windows::Internal::CBasicResult<unsigned char,0> > *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetWindowSize(int *,int *);
	virtual long OnCanceled();
	virtual long OnHostedApplicationReady();
	virtual long OnWindowCreated(Windows::ApplicationModel::Actions::IHostedFlyoutOperation *);
	virtual long OnWindowDestroyed();
	virtual long OnWindowDismissed();
	virtual long OnWindowHosted();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_SelectionRect(Windows::Foundation::Rect *);
	virtual long get_WindowPlacement(Windows::UI::Popups::Placement *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAppointmentsProviderAddAppointmentActivatedEventArgs
{
	CAppointmentsProviderAddAppointmentActivatedEventArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_AddAppointmentOperation(Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation * *);
	virtual long get_Verb(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAppointmentsProviderRemoveAppointmentActivatedEventArgs
{
	CAppointmentsProviderRemoveAppointmentActivatedEventArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_RemoveAppointmentOperation(Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation * *);
	virtual long get_Verb(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAppointmentsProviderReplaceAppointmentActivatedEventArgs
{
	CAppointmentsProviderReplaceAppointmentActivatedEventArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_ReplaceAppointmentOperation(Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation * *);
	virtual long get_Verb(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAppointmentsProviderShowTimeFrameActivatedEventArgs
{
	CAppointmentsProviderShowTimeFrameActivatedEventArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Duration(Windows::Foundation::TimeSpan *);
	virtual long get_TimeToShow(Windows::Foundation::DateTime *);
	virtual long get_Verb(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CAsyncCallbackWithLambda<<lambda_2622211481a6421fda128fef999f1403> >
{
	virtual long Invoke(long);
};

struct CAsyncForwarder<CFilePickerInvoker>
{
	long Cancel();
};

class CAudioFlyoutController
{
	long _AdjustSubscriptionsOnCreatingFlyout();
	long _EnsureFlyout();
	long _GetDisplayRect(tagRECT *);
	virtual ~CAudioFlyoutController();
	void _OnScaleChange();
public:
	CAudioFlyoutController();
	long RuntimeClassInitialize();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long NotifyCameraStateChange();
	virtual long NotifyShellMediaPlaybackDataSourceChanged();
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long Show(int,unsigned long);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

struct CAudioSrvMonitor
{
	long Start();
	static void AudioSrvStatusChangedCallback(unsigned long,void *);
};

class CAuthenticationManager
{
	long _GetAuthContext(unsigned short * *);
	long _GetTicketFromUserId(Microsoft::WRL::ComPtr<Windows::Security::Authentication::OnlineId::IUserIdentity>,unsigned short * *);
	long _LoadRequest();
	static _GUID const c_AppId;
	static unsigned short const * const c_pszAuthPolicy;
	static unsigned short const * const c_pszTokenTrimEnd;
public:
	CAuthenticationManager();
	long Authenticate();
	long Cancel();
	long GetUserConnectType();
	long RuntimeClassInitialize(CConnectedSearchTransport *,unsigned long);
	long UnAuthenticate();
};

struct CAutoArrayMemPtr<IDCompositionAnimation *>
{
	~CAutoArrayMemPtr<IDCompositionAnimation *>();
};

struct CAutoArrayMemPtr<tagPOINTER_INFO>
{
	~CAutoArrayMemPtr<tagPOINTER_INFO>();
};

struct CAutoHandle<HACCEL__ *>
{
	~CAutoHandle<HACCEL__ *>();
};

struct CAutoHandle<HBITMAP__ *>
{
	~CAutoHandle<HBITMAP__ *>();
};

struct CAutoHandle<HDC__ *>
{
	~CAutoHandle<HDC__ *>();
};

struct CAutoHandle<HKEY__ *>
{
	~CAutoHandle<HKEY__ *>();
};

struct CAutoHandle<void *>
{
	~CAutoHandle<void *>();
};

struct CAutoMemPtr<CCrashDetector::CHandler>
{
	~CAutoMemPtr<CCrashDetector::CHandler>();
};

struct CAutoMemPtr<CSwitchThumbnailDeviceManager::AnimationPVLInfo>
{
	~CAutoMemPtr<CSwitchThumbnailDeviceManager::AnimationPVLInfo>();
};

struct CAutoMemPtr<EnterpriseChromeServiceProvider::INIT_THREAD_DATA>
{
	~CAutoMemPtr<EnterpriseChromeServiceProvider::INIT_THREAD_DATA>();
};

struct CAutoMemPtr<shell::TaskScheduler>
{
	~CAutoMemPtr<shell::TaskScheduler>();
};

class CAutoPlayHandlerChooser
{
	AutoPlayTile * _GetFirstTile();
	AutoPlayTile * _GetSelectedTile();
	AutoPlayTile * _TileFromID(unsigned short const *);
	int _CalculateScrollViewerHeight(int);
	long _CalculateAndSetScrollViewerHeight(int);
	long _CalculateFlyoutPosition(tagPOINT *);
	long _CreateFlyout();
	long _CreateMessageOnlyWindow();
	long _RemoveAndGetHandler(IAutoplayHandler *,AutoPlayTile * *);
	static unsigned long s_ShowToastThreadProc(void *);
	static void _RegisterFrameClassName(unsigned short const *,__int64 (*)(HWND__ *,unsigned int,unsigned __int64,__int64));
	void _SetTitle();
	void _ShowFlyout();
protected:
	__int64 OnTimer(int);
	long AddHandler(DirectUI::Element *,IAutoplayHandler *,tag_GROUPIDS);
	long AddRecommendedHandler(IAutoplayHandler *);
	long GetContentTypeString(unsigned long,unsigned short * *);
	long SetToastText(unsigned short const *);
	virtual HWND__ * GetMainWindow();
	virtual __int64 OnCancel(unsigned short);
	virtual __int64 OnInitDialog(unsigned __int64,__int64);
	virtual __int64 OnOK(unsigned short);
	virtual int DoesHandlerExist(unsigned short const *);
	virtual int GetHandlerCount();
	virtual int IsSaveDefault();
	virtual int ShouldSkipToast();
	virtual long AddHandler(IAutoplayHandler *,tag_GROUPIDS,int);
	virtual long AddHandlerGroup(IAutoplayHandlerList *,unsigned short *,tag_GROUPIDS);
	virtual long AddHandlerToNewGroup(IAutoplayHandler *,unsigned short *,tag_GROUPIDS);
	virtual long AppendID(unsigned short const *,unsigned long);
	virtual long GetHandler(int,IAutoplayHandler * *);
	virtual long GetSelectedHandler(IAutoplayHandler * *);
	virtual long OnTimeout(int);
	virtual long RemoveAllGroups();
	virtual long RemoveHandlerGroup(tag_GROUPIDS);
	virtual long SelectHandler(unsigned short const *);
	virtual long SetDetailTextContentType(unsigned short const *);
	virtual long TryAddDownloadingHandler();
	virtual unsigned long _CountHandlers(int,int);
	virtual void EnableSaveDefault(int);
	virtual void ShowBanner(int);
	virtual void ShowNewHandlerChoiceText(int,unsigned long,int);
	virtual void ShowOtherChoicesHeader();
	virtual void ShowSearching(int);
	virtual void _CountHandlerTypes(unsigned long *,unsigned long *);
	void QuitMessageLoop();
	void ShowTimeout(int,int);
	void TryUpdateManufacturerHeader();
public:
	CAutoPlayHandlerChooser();
	__int64 CreateChooser();
	long OnDismiss(IPopupWindow *);
	static __int64 FrameWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static void DownloadStateChange(HDEVQUERY__ *,void *,_DEV_QUERY_RESULT_ACTION_DATA const *);
	unsigned long Release();
	virtual __int64 WndProc(unsigned int,unsigned __int64,__int64);
	virtual long HandleToastActivated();
	virtual long HandleToastDismissed(bool);
	virtual long Init(unsigned short const *,unsigned short const *,unsigned short const *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual ~CAutoPlayHandlerChooser();
	void HideFlyout();
	void OnDownloadError(int);
	void SelectTile(AutoPlayTile *);
	void ShowChooser(int);
};

struct CAutoPlayUI
{
	CAutoPlayUI();
	virtual int IsDialogClosed();
	virtual long InitDirectAutoPlay(IAutoPlayDeviceDataManager *,unsigned short const *,HWND__ *);
	virtual long InitNoContentAutoplay(IAutoPlayDeviceDataManager *,_GUID const &,unsigned short const *,unsigned long,int,unsigned short const *,unsigned short const *,unsigned short const *);
	virtual long InitVolumeAutoplay(IAutoPlayDeviceDataManager *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,int,unsigned short const *,unsigned short const *,HWND__ *);
	virtual long LaunchDeviceHandler(unsigned short const *,unsigned short const *,unsigned short const *);
	virtual long ToastPromptForChkDsk(unsigned short const *,int *,int *);
	virtual void AddContentType(unsigned long);
	virtual void CloseDialog();
	virtual void MoreInterfaceArrived(unsigned short const *);
	virtual void SetChkDskCompleted();
	virtual void SniffComplete(unsigned long);
	virtual void WaitForDialogToClose();
};

struct CAutoSRWExclusiveLock
{
	~CAutoSRWExclusiveLock();
};

struct CAutoSRWSharedLock
{
	~CAutoSRWSharedLock();
};

class CAutoplayDialog
{
	__int64 _InvokeAndClose(unsigned short);
	__int64 _OnInterfaceArrival(unsigned short const *);
	__int64 _OnNewContentType(unsigned long);
	__int64 _OnSniffComplete(unsigned long);
	long _CheckDefaultHandler();
	long _CheckForNewHandlers(int);
	long _FixFinalContent(unsigned long);
	long _PopulateUIForDeviceStage(IAutoplayDeviceHandler *);
	long _PopulateUIFromContentHandler(IAutoplayContentHandler *,int);
	long _PopulateUIFromContentType(unsigned long);
	long _PopulateUIFromDeviceHandler(IAutoplayDeviceHandler *);
	long _PopulateUIFromNewHandlerList(IAutoplayHandlerList *);
	long _SetDevicePathFromDeviceHandler(IAutoplayHandler *);
	long _ShowDialog();
	long _UpdateConsent(IAutoplayHandler *);
	virtual long _TryShowUI();
	void _CountGeneralHandlers(IAutoplayHandlerList *);
	void _ReportArrivalToResponseTime();
	void _ReportHandlerTypeCounts(int);
	void _TryAddRecommendedFromList(IAutoplayHandlerList *);
protected:
	virtual __int64 HandleCancel(unsigned short,int);
	virtual __int64 OnCancel(unsigned short);
	virtual __int64 OnInitDialog(unsigned __int64,__int64);
	virtual __int64 OnOK(unsigned short);
	virtual __int64 WndProc(unsigned int,unsigned __int64,__int64);
	virtual int ShouldSkipToast();
	virtual long OnTimeout(int);
	virtual ~CAutoplayDialog();
public:
	CAutoplayDialog();
	static unsigned long ThreadProc(void *);
	static unsigned long ThreadProcNoContent(void *);
	virtual long HandleToastActivated();
	virtual long HandleToastDismissed(bool);
	virtual long InitDirectAutoPlay(IAutoPlayDeviceDataManager *,unsigned short const *,HWND__ *);
	virtual long InitNoContentAutoplay(IAutoPlayDeviceDataManager *,_GUID const &,unsigned short const *,unsigned long,int,unsigned short const *,unsigned short const *,unsigned short const *);
	virtual long InitVolumeAutoplay(IAutoPlayDeviceDataManager *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,unsigned long,unsigned short const *,unsigned short const *,int,unsigned short const *,unsigned short const *,HWND__ *);
	void CloseDialog();
	void MoreInterfaceArrived(unsigned short const *);
};

class CAutoplayUIData
{
	virtual ~CAutoplayUIData();
public:
	long Initialize(unsigned short const *,bool);
	unsigned long Release();
};

class CAutoplayUIManager
{
	long _EnsureDPA();
	long _GetUIData(unsigned short const *,CAutoplayUIData * *);
public:
	CAutoplayUIManager();
	long RemoveUIData(unsigned short const *);
	long SetExclusive(unsigned short const *);
	long TryAddUIData(unsigned short const *,CAutoplayDialog *,bool,bool *);
	~CAutoplayUIManager();
};

class CBacklightController
{
	static unsigned long s_NotifyCallback(void *,unsigned long,void *);
public:
	long Initialize(void (*)(void *),void *);
	long SetBrightness(unsigned char);
	void Shutdown();
};

struct CBackstackApp
{
	CBackstackApp(IImmersiveApplication *);
	static long CreateInstance(IImmersiveApplication *,bool,_GUID const &,void * *);
	virtual bool IsExemptApp();
	virtual bool IsRunning();
	virtual long GetImmersiveApp(_GUID const &,void * *);
	virtual void ClearTimestamp();
	virtual void GetTimestamp(_FILETIME *);
};

class CBackstackAppSort
{
protected:
	int _CompareTimestamp(IBackstackApp *,IBackstackApp *);
public:
	int Compare(Microsoft::WRL::ComPtr<IUnknown> const &,Microsoft::WRL::ComPtr<IUnknown> const &);
};

class CBackstackManager
{
	bool _IsAppVisible(IImmersiveApplication *);
	long _CacheAppLayout(IAppLayout *);
	long _EnsureVisibleAppTimestampsForMonitor(IImmersiveMonitor *);
	long _GetImmersiveAppArray(IImmersiveApplicationArray * *);
	long _RemoveApp(IImmersiveApplication *,bool,SWITCHER_REMOVAL_REASON);
	virtual ~CBackstackManager();
	void _CleanupAppStateOnRemoval(IImmersiveApplication *,SWITCHER_REMOVAL_REASON,bool);
protected:
	virtual long v_ShutdownServices(IProfferService *);
public:
	CBackstackManager();
	long RuntimeClassInitialize();
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long ClearBackstack();
	virtual long EnsureVisibleAppTimestamps();
	virtual long GetBackstack(IObjectArray * *,int);
	virtual long GetBackstackEnabled(int *);
	virtual long GetBackstackMode(IMMERSIVE_BACKSTACK_MODE *);
	virtual long OnAppAddedToSwitchers(IImmersiveApplication *,APP_SWITCHER_FLAGS);
	virtual long OnAppRemovedFromSwitchers(IImmersiveApplication *,SWITCHER_REMOVAL_REASON);
	virtual long PerformDelayedInitialization();
	virtual long PromoteBackstackApp(IImmersiveApplication *);
	virtual long RemoveApp(IImmersiveApplication *);
	virtual long RemoveAppForSystemAction(IImmersiveApplication *);
	virtual long ResumeUpdates();
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long SetBackstackEnabled(int);
	virtual long SetBackstackMode(IMMERSIVE_BACKSTACK_MODE);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long SuspendUpdates();
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class CBamThrottleSettings
{
	long AddProcess(unsigned long,int,int);
	long AddWindow(HWND__ *,int,int);
	static int s_EnumWindowsProc(HWND__ *,__int64);
	static void s_WindowsSync(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	void FillStateInfo(_BAM_PROCESS_WINDOW_STATE_INFO *,unsigned long,_BAM_PROCESS_WINDOW_STATE);
	void LoadConfig();
	void SetSyncTimer();
	void WindowsSyncAndReport(int,int);
public:
	CBamThrottleSettings();
	long RuntimeClassInitialize();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long RegisterForWindowOccludedChanges(IWindowOccludedChangeListener *,unsigned long *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterForWindowOccludedChanges(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CBamThrottleSettings();
};

struct CBandIDArray
{
	static long s_CreateInstance(_DSA * const,IBandIDArray * *);
	virtual long GetAt(int,ZBID *);
	virtual long GetCount(int *);
};

class CBandWorkArea
{
	bool _UpdateWorkArea(tagRECT const *);
protected:
	virtual ~CBandWorkArea();
	void _MakeCalloutsToListeners(tagRECT const *,CGITRegistrationList *);
public:
	CBandWorkArea(ZBID);
	static long CreateInstance(ZBID,IBandWorkArea * *);
	virtual ZBID GetBandID();
	virtual bool SetOuterWorkArea(tagRECT const *,bool);
	virtual long AddBandDependency(ZBID);
	virtual long AddClient(IImmersiveLayoutClient *,unsigned long *);
	virtual long AddListener(IImmersiveLayoutChanges *,unsigned long *);
	virtual long AddSyncListener(IImmersiveLayoutChanges *,unsigned long *);
	virtual long GetBandDependencyArray(IBandIDArray * *);
	virtual long RemoveBandDependency(ZBID);
	virtual long RemoveClient(unsigned long);
	virtual long RemoveListener(unsigned long);
	virtual long RemoveSyncListener(unsigned long);
	virtual void GetInnerWorkArea(tagRECT *);
	virtual void GetOuterWorkArea(tagRECT *);
	virtual void NotifyListeners();
	virtual void RefreshSyncListeners();
	virtual void ResetWorkArea(tagRECT const *);
	virtual void Shutdown();
};

class CBaseRPCTimeout
{
	static void s_Callback(void *,unsigned char);
public:
	void Arm(unsigned long);
	void Disarm();
};

class CBaseTrayFlyoutExperienceManager
{
	struct DebounceDetection
	{
		struct Notification
		{
			Notification();
			long RuntimeClassInitialize(DebounceDetection *);
			virtual long ObservedMouseButtonDown(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
			virtual long ObservedMouseButtonUp(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
			virtual long ObservedMouseMove(tagPOINT,unsigned short,tagPOINT);
			void Disconnect();
		};

		void BlockImmediateReshow();
	};

	long Initialize(IServiceProvider *,unsigned short const *,unsigned short const *);
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long UpdateFocusOnDismiss();
	void NotifyTrayFlyoutIsVisible(bool);
protected:
	long CalculateFlyoutPosition(tagRECT &,tagRECT *);
	long HandleInputHostVisibilityChanged(tagRECT &,IHM_DISPLAY_MODE);
	long PositionFlyoutCore();
	long RecalculateClipRect(tagRECT &,IHM_DISPLAY_MODE);
	long SetBorderAccent(int);
	long SetTrayItemRect(Windows::Foundation::Rect const &);
	virtual long GetAppBarPositionForMonitor(HMONITOR__ * const,tagRECT *,EDGEUI_TRAYSTUCKPLACE *);
public:
	CBaseTrayFlyoutExperienceManager(int,int);
	CSingleViewShellExperience::Border GetBorderFlagFromStuckEdge(EDGEUI_TRAYSTUCKPLACE);
	long GetViewWindow(HWND__ * *);
	long HideFlyout();
	long ShowFlyout(Windows::Foundation::Rect const &,HWND__ *);
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long OnDismiss();
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnIdleStateChanged(CSingleViewShellExperience *,bool);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewDestroying(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual long PositionFlyout(Windows::Foundation::Rect const &,Windows::Foundation::Size const &);
	virtual long RuntimeClassInitialize(IServiceProvider *,unsigned short const *);
	virtual long RuntimeClassInitialize(IServiceProvider *,unsigned short const *,LIGHT_DISMISS_FLAGS,unsigned short const *);
	virtual long RuntimeClassInitialize(IServiceProvider *,unsigned short const *,unsigned short const *);
	virtual ~CBaseTrayFlyoutExperienceManager();
};

struct CBindableObservableVectorChangedEventOnGenericVectorChangedEvent<Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,1>
{
	virtual long Invoke(Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> *,Windows::Foundation::Collections::IVectorChangedEventArgs *);
};

struct CBindableObservableVectorChangedEventOnGenericVectorChangedEvent<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,1>
{
	virtual long Invoke(Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> *,Windows::Foundation::Collections::IVectorChangedEventArgs *);
};

class CBrokeredAppointmentsManager
{
	static long _AddAppointmentAsyncInternal(Windows::ApplicationModel::Appointments::IAppointment *,Windows::Foundation::Rect const &,Windows::UI::Popups::Placement,Windows::Foundation::IAsyncOperation<HSTRING__ *> * *);
	static long _ExecuteAppointmentAction(Windows::ApplicationModel::Activation::IActivatedEventArgs *,unsigned short const *,Windows::ApplicationModel::Actions::IActionActivationInfo *);
	static long _GetCallingApplicationWindowAndVerifyVisibility(HWND__ * *,unsigned short * *);
	static long _RemoveAppointmentAsyncInternal(HSTRING__ *,Windows::Foundation::Rect,Windows::UI::Popups::Placement,Windows::Foundation::DateTime *,Windows::Foundation::IAsyncOperation<bool> * *);
	static long _ReplaceAppointmentAsyncInternal(HSTRING__ *,Windows::ApplicationModel::Appointments::IAppointment *,Windows::Foundation::Rect const &,Windows::UI::Popups::Placement,Windows::Foundation::DateTime *,Windows::Foundation::IAsyncOperation<HSTRING__ *> * *);
	static long _ValidateAppointmentInternalImplementation(Windows::ApplicationModel::Appointments::IAppointment *);
	static long _ValidateAppointmentOrganzierAndInvitees(Windows::ApplicationModel::Appointments::IAppointment *);
	static long _ValidateAppointmentPropertyValues(Windows::ApplicationModel::Appointments::IAppointment *);
	static long _ValidateAppointmentRecurrence(Windows::ApplicationModel::Appointments::IAppointment *);
public:
	CBrokeredAppointmentsManager();
	static TrustLevel InternalGetTrustLevelStatic();
	static unsigned short const * InternalGetRuntimeClassNameStatic();
	virtual long ActivateInstance(IInspectable * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::IAppointment *,Windows::Foundation::Rect,Windows::Foundation::IAsyncOperation<HSTRING__ *> * *);
	virtual long ShowAddAppointmentWithPlacementAsync(Windows::ApplicationModel::Appointments::IAppointment *,Windows::Foundation::Rect,Windows::UI::Popups::Placement,Windows::Foundation::IAsyncOperation<HSTRING__ *> * *);
	virtual long ShowRemoveAppointmentAsync(HSTRING__ *,Windows::Foundation::Rect,Windows::Foundation::IAsyncOperation<bool> * *);
	virtual long ShowRemoveAppointmentWithPlacementAndDateAsync(HSTRING__ *,Windows::Foundation::Rect,Windows::UI::Popups::Placement,Windows::Foundation::DateTime,Windows::Foundation::IAsyncOperation<bool> * *);
	virtual long ShowRemoveAppointmentWithPlacementAsync(HSTRING__ *,Windows::Foundation::Rect,Windows::UI::Popups::Placement,Windows::Foundation::IAsyncOperation<bool> * *);
	virtual long ShowReplaceAppointmentAsync(HSTRING__ *,Windows::ApplicationModel::Appointments::IAppointment *,Windows::Foundation::Rect,Windows::Foundation::IAsyncOperation<HSTRING__ *> * *);
	virtual long ShowReplaceAppointmentWithPlacementAndDateAsync(HSTRING__ *,Windows::ApplicationModel::Appointments::IAppointment *,Windows::Foundation::Rect,Windows::UI::Popups::Placement,Windows::Foundation::DateTime,Windows::Foundation::IAsyncOperation<HSTRING__ *> * *);
	virtual long ShowReplaceAppointmentWithPlacementAsync(HSTRING__ *,Windows::ApplicationModel::Appointments::IAppointment *,Windows::Foundation::Rect,Windows::UI::Popups::Placement,Windows::Foundation::IAsyncOperation<HSTRING__ *> * *);
	virtual long ShowTimeFrameAsync(Windows::Foundation::DateTime,Windows::Foundation::TimeSpan,Windows::Foundation::IAsyncAction * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CBucketComparator
{
	int Compare(BUCKET *,BUCKET *);
};

class CByteHashTable
{
	CByteHashTable::BHASHENTRY * _LookupEntry(unsigned char const *,unsigned int,unsigned int *,CByteHashTable::BHASHENTRY * *);
	long _AddUpdateItem(int,unsigned char const *,unsigned int,unsigned char const *,unsigned int,unsigned char *,unsigned int);
	long _GetValue(unsigned char const *,unsigned int,unsigned char * *,int *,unsigned char *,int);
	long _GetValueWorker(CByteHashTable::BHASHENTRY *,unsigned char * *,int *,unsigned char *,unsigned int);
	long _RemoveItem(unsigned char const *,unsigned int,unsigned char *,unsigned int);
	unsigned int _CalculateHashKey(unsigned char const *,unsigned int,unsigned int);
	void _GrowTable();
	void _RemoveCallback(int,void (*)(unsigned char *,unsigned int,void *),void *);
public:
	long Create(unsigned int,unsigned int,unsigned int,unsigned int,unsigned int (*)(unsigned char const *,unsigned int,unsigned int));
};

struct CCLambdaAdapter<int (*)(HDC__ *,unsigned short *,int,tagRECT *,unsigned int,__int64),6>
{
	static int Adapt<<lambda_2ae8870d6bc816a04ba0e39f1c502364> >(HDC__ *,unsigned short *,int,tagRECT *,unsigned int,__int64);
};

class CCachedFileUpdateManager
{
	long _CreateUpdateItemArray(IInspectable *);
	long _SetInitialLocation(IShellItem *);
public:
	CCachedFileUpdateManager();
	static TrustLevel InternalGetTrustLevel();
	static unsigned short const * InternalGetRuntimeClassName();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long PrepopulateCallingAppData(HSTRING__ *,HSTRING__ *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long UpdateFilesAsync(Windows::Storage::Provider::CachedFileTarget,unsigned char,Windows::Internal::ApplicationModel::WindowManagement::WindowId,IInspectable *,Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCachedFileUpdaterActivatedEventArgs
{
	CCachedFileUpdaterActivatedEventArgs();
	long RuntimeClassInitialize(Microsoft::WRL::WeakRef,LOCAL_FILE_UPDATE_DISPOSITION);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetProvider(IUnknown * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetProvider(IUnknown *);
	virtual long get_CachedFileUpdaterUI(Windows::Storage::Provider::ICachedFileUpdaterUI * *);
	virtual long get_ComponentSiteId(_GUID *);
	virtual long get_ObjectModelAcidPrivate(HSTRING__ * *);
	virtual long put_ComponentSiteId(_GUID);
	virtual long put_ObjectModelAcidPrivate(HSTRING__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCachedFileUpdaterUI
{
	long _EnsureSinkRegistered();
public:
	CCachedFileUpdaterUI(Microsoft::WRL::WeakRef,LOCAL_FILE_UPDATE_DISPOSITION);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long OnShowing();
	virtual long OnShown();
	virtual long OnUpdateRequested(Windows::Storage::IStorageFile *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long VerifyFileUpdateRequestedEventSink();
	virtual long add_FileUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *> *,EventRegistrationToken *);
	virtual long add_UIRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_Title(HSTRING__ * *);
	virtual long get_UIStatus(Windows::Storage::Provider::UIStatus *);
	virtual long get_UpdateTarget(Windows::Storage::Provider::CachedFileTarget *);
	virtual long put_Title(HSTRING__ *);
	virtual long remove_FileUpdateRequested(EventRegistrationToken);
	virtual long remove_UIRequested(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCachedSTAObject
{
	static HINSTANCE__ * s_hmod;
public:
	CCachedSTAObject();
	long InitializeCachedObject(unsigned long);
	virtual long PostInitialize(long,unsigned long,unsigned long);
	virtual long PostUninitialize(unsigned long);
	virtual long PreInitialize(unsigned long,unsigned long);
	virtual long PreUninitialize(unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCallerInformation
{
	static long s_CopyCoTaskMemString(unsigned short const *,unsigned short * *);
public:
	long GetCallerUserContext(unsigned __int64 *);
	long PopulateFromCallingProcess(unsigned short const *,unsigned short const *);
	static long CopyTo(PICKER_CALLER_INFORMATION const &,PICKER_CALLER_INFORMATION *);
	~CCallerInformation();
};

struct CCaseInsensitiveStringEqualityPredicate
{
	long operator()(HSTRING__ *,HSTRING__ *,bool *);
};

struct CCoSimpleArray<CImmersiveWindowMessageService::HotkeyRegistration,4294967294,CSimpleArrayStandardCompareHelper<CImmersiveWindowMessageService::HotkeyRegistration> >
{
	~CCoSimpleArray<CImmersiveWindowMessageService::HotkeyRegistration,4294967294,CSimpleArrayStandardCompareHelper<CImmersiveWindowMessageService::HotkeyRegistration> >();
};

struct CCoSimpleArray<CImmersiveWindowMessageService::PowerSettingRegistration,4294967294,CSimpleArrayStandardCompareHelper<CImmersiveWindowMessageService::PowerSettingRegistration> >
{
	~CCoSimpleArray<CImmersiveWindowMessageService::PowerSettingRegistration,4294967294,CSimpleArrayStandardCompareHelper<CImmersiveWindowMessageService::PowerSettingRegistration> >();
};

struct CCoSimpleArray<CImmersiveWindowMessageService::WTSSessionNotifyRegistration,4294967294,CSimpleArrayStandardCompareHelper<CImmersiveWindowMessageService::WTSSessionNotifyRegistration> >
{
	~CCoSimpleArray<CImmersiveWindowMessageService::WTSSessionNotifyRegistration,4294967294,CSimpleArrayStandardCompareHelper<CImmersiveWindowMessageService::WTSSessionNotifyRegistration> >();
};

struct CCoSimpleArray<CPickerController::SHELL_VIEW_CACHE_ENTRY,4294967294,CSimpleArrayStandardCompareHelper<CPickerController::SHELL_VIEW_CACHE_ENTRY> >
{
	~CCoSimpleArray<CPickerController::SHELL_VIEW_CACHE_ENTRY,4294967294,CSimpleArrayStandardCompareHelper<CPickerController::SHELL_VIEW_CACHE_ENTRY> >();
};

struct CCoSimpleArray<Microsoft::WRL::ComPtr<IShellView>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IShellView> > >
{
	~CCoSimpleArray<Microsoft::WRL::ComPtr<IShellView>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IShellView> > >();
};

struct CCoSimpleArray<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback> > >
{
	~CCoSimpleArray<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback> > >();
};

struct CCoSimpleArray<PENDING_DISPLAY_CHANGE_NOTIFICATION,4294967294,CSimpleArrayStandardCompareHelper<PENDING_DISPLAY_CHANGE_NOTIFICATION> >
{
	~CCoSimpleArray<PENDING_DISPLAY_CHANGE_NOTIFICATION,4294967294,CSimpleArrayStandardCompareHelper<PENDING_DISPLAY_CHANGE_NOTIFICATION> >();
};

struct CCoSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > >
{
	~CCoSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > >();
};

struct CCoSimpleArray<unsigned int,4294967294,CSimpleArrayStandardCompareHelper<unsigned int> >
{
	~CCoSimpleArray<unsigned int,4294967294,CSimpleArrayStandardCompareHelper<unsigned int> >();
};

struct CCoSimpleArray<unsigned long,4294967294,CSimpleArrayStandardCompareHelper<unsigned long> >
{
	~CCoSimpleArray<unsigned long,4294967294,CSimpleArrayStandardCompareHelper<unsigned long> >();
};

struct CCoSimpleArray<void *,4294967294,CSimpleArrayStandardCompareHelper<void *> >
{
	~CCoSimpleArray<void *,4294967294,CSimpleArrayStandardCompareHelper<void *> >();
};

struct CCoTaskMemPtr<IStreamedFileDataRequestedCallback *>
{
	~CCoTaskMemPtr<IStreamedFileDataRequestedCallback *>();
};

struct CCoTaskMemPtr<TA_TIMINGFUNCTION>
{
	~CCoTaskMemPtr<TA_TIMINGFUNCTION>();
};

struct CCoTaskMemPtr<TA_TRANSFORM>
{
	~CCoTaskMemPtr<TA_TRANSFORM>();
};

struct CCoTaskMemPtr<_CLASSIC_WINDOWS>
{
	~CCoTaskMemPtr<_CLASSIC_WINDOWS>();
};

struct CCoTaskMemPtr<_COMDLG_FILTERSPEC>
{
	~CCoTaskMemPtr<_COMDLG_FILTERSPEC>();
};

struct CCoTaskMemPtr<_ITEMIDLIST_ABSOLUTE>
{
	~CCoTaskMemPtr<_ITEMIDLIST_ABSOLUTE>();
};

struct CCoTaskMemPtr<_ITEMID_CHILD>
{
	~CCoTaskMemPtr<_ITEMID_CHILD>();
};

struct CCoTaskMemPtr<unsigned short>
{
	~CCoTaskMemPtr<unsigned short>();
};

class CCollapsibleDeviceList
{
protected:
	long _AddTileToHost(DirectUI::Element *,unsigned int,bool);
	static bool _MatchId(unsigned short const *,DirectUI::Element *);
	static long _GetDeviceTileID(DirectUI::Element *,unsigned short * *);
public:
	bool IsButtonFromList(DirectUI::Element *,unsigned int *);
	long AddTile(unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,bool);
	long FindTile(unsigned short const *,DirectUI::Element * *);
	long Initialize(DirectUI::Element *,IUnknown *);
	long Initialize(DirectUI::Element *,IUnknown *,IDeviceElementNotify *,bool,IDeviceElementSource *,unsigned long *);
	long RemoveTile(unsigned short const *);
	long SetStatus(unsigned short const *,unsigned short const *,bool);
	void NotifyEnumerationComplete();
	void Shutdown();
};

struct CComPropVariant
{
	~CComPropVariant();
};

class CCommandItemWidget
{
protected:
	long Initialize(HWND__ *,unsigned int,unsigned short const *);
public:
	static long CreateCommand(HWND__ *,unsigned int,unsigned short const *,CSettingsWidget * *);
	virtual void Destroy();
};

class CCommandWidget
{
protected:
	virtual ~CCommandWidget();
public:
	virtual long CreateElement(IPopupBase *,HWND__ *,DirectUI::Element * *);
};

struct CCommonApplicationViewArrangePosition
{
	CCommonApplicationViewArrangePosition();
};

struct CCommonApplicationViewArrangePositionImpl
{
	virtual long GetArrangedState(ARRANGEMENT_BASED_VIEW_STATE *);
	virtual long GetArrangementBasedViewStateOptions(ARRANGEMENT_BASED_VIEW_STATE_OPTIONS *);
	virtual long GetRect(tagRECT *);
	virtual long GetSnapOptions(unsigned long *);
};

struct CCommonApplicationViewOcclusionPosition
{
	long RuntimeClassInitialize(tagWINDOWPLACEMENT);
};

struct CCommonApplicationViewOcclusionPositionImpl
{
	virtual long GetArrangedState(ARRANGEMENT_BASED_VIEW_STATE *);
	virtual long GetArrangementBasedViewStateOptions(ARRANGEMENT_BASED_VIEW_STATE_OPTIONS *);
	virtual long GetOcclusionBasedViewStateOptions(OCCLUSION_BASED_VIEW_STATE_OPTIONS *);
	virtual long GetRect(tagRECT *);
	virtual long GetRestoreRect(tagRECT *);
	virtual long GetSnapOptions(unsigned long *);
	virtual long GetWindowPlacement(_OCCLUSION_WINDOW_INFORMATION *);
};

struct CCommonApplicationViewPosition
{
	CCommonApplicationViewPosition();
};

struct CCommonApplicationViewPositionImpl
{
	virtual long GetRect(tagRECT *);
};

struct CCompareHistoryItems
{
	int Compare(Microsoft::WRL::ComPtr<CHistoryItem> const &,Microsoft::WRL::ComPtr<CHistoryItem> const &);
};

class CCompatibilityPolicyManager
{
	long _GetWorkAreaBasedPolicy(IImmersiveApplication *,APPLICATION_VIEW_COMPATIBILITY_POLICY *);
	long _HandleTabletModeChanged(int);
	long _NotifyPolicyChange(IApplicationView *,APPLICATION_VIEW_COMPATIBILITY_POLICY);
	long _SelectNewPolicy(IApplicationView *,APPLICATION_VIEW_COMPATIBILITY_POLICY *);
	long _SubscribeToTabletModeNotifications();
	long _UpdatePolicyForView(IApplicationView *);
public:
	CCompatibilityPolicyManager();
	long RuntimeClassInitialize();
	static long ImmersiveTMCWNFCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long ForceCompatPolicyEvaluation(HWND__ *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long RegisterForApplicationViewCompatibilityChanges(IApplicationViewCompatiblityNotification *,unsigned long *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterForApplicationViewCompatibilityChanges(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CCompatibilityPolicyManager();
};

class CConditionEvaluator
{
	long _DoesItemMatchAnd(ICondition *,int,TRIBIT *,int *);
	long _DoesItemMatchConditionWorker(ICondition *,int,TRIBIT *,int *);
	long _DoesItemMatchLeafCondition(ICondition *,int,TRIBIT *,int *);
	long _DoesItemMatchOr(ICondition *,int,TRIBIT *,int *);
	long _EvaluateProperty(tagPROPVARIANT const &,tagPROPVARIANT const &,_tagpropertykey const &,tagCONDITION_OPERATION,ICondition *,int,int *,int *);
protected:
	unsigned long _GetInputLocale();
	virtual long v_DoesItemMatchLeafCondition(tagPROPVARIANT const &,_tagpropertykey const &,tagCONDITION_OPERATION,ICondition *,int,TRIBIT *,int *);
public:
	long DoesItemMatchCondition(TRIBIT *);
	long FilterConditionCompareValues(tagPROPVARIANT const &,tagPROPVARIANT const &,_tagpropertykey const &,tagCONDITION_OPERATION,int,int,IPropertyInfoProvider *,int,IPropertyChangeArray *,BITSSET,unsigned short *,unsigned long,int *,int *);
	long FinalizeDeferredConditions();
	long LikeOpCompareValues(tagPROPVARIANT const &,tagPROPVARIANT const &,tagCONDITION_OPERATION,_tagpropertykey const &,int,int,IPropertyInfoProvider *,int,unsigned long,int *);
	virtual long Initialize(CONDITIONEVALINFO const *,int);
	virtual ~CConditionEvaluator();
};

class CConnectedSearchShellService
{
	VIEWMODE _GetCurrentViewMode();
	bool _AreQueryParamsSameAsCache(INamedPropertyStore *,INamedPropertyStore *,bool);
	bool _CanLogErrorForImpression(unsigned short const *);
	long _DownloadPrefetchDeferredImages();
	long _DownloadPrefetchImages();
	long _DownloadPrefetchTemplates();
	long _EnsureAuthInitialized();
	long _EnsureCommonComponentsInitialized();
	long _EnsureDownloaderInitialized();
	long _EnsureImageDownloaderInitialized();
	long _EnsureLoggerInitialized(bool *);
	long _EnsureSettingsInitialized();
	long _FindMatchingActiveImpression(unsigned short const *,CImpressionData * *);
	long _GetActiveSRVImpressionData(CImpressionData * *);
	long _LogPerfPing(bool,bool *);
	long _LogPerfRequestStart(bool);
	long _UpdateNetworkCostType();
	static unsigned short const * const * const c_pszSafeSearchString;
	virtual long v_ShutdownServices(IProfferService *);
	virtual ~CConnectedSearchShellService();
	void _NotifyChangeEventHandlers(SETTING_CHANGE_EVENT_TYPE,unsigned long);
public:
	CConnectedSearchShellService();
	long RuntimeClassInitialize();
	virtual long AddImageDownloaded(IImageDownloadedEventHandler *,EventRegistrationToken *);
	virtual long AddSettingChanged(ISettingChangedEventHandler *,EventRegistrationToken *);
	virtual long CacheZeroInputResponse(INamedPropertyStore *,IStream *,unsigned int);
	virtual long DeleteSearchHistory();
	virtual long DownloadDeferredPrefetchImages(unsigned short const * const *,unsigned __int64);
	virtual long DownloadMissingTemplates(unsigned short const * const *,unsigned __int64,int,unsigned short const *);
	virtual long DownloadPrefetchImages(unsigned short const * const *,unsigned __int64,unsigned short const *);
	virtual long DownloadTemplate(unsigned short const *,unsigned long,unsigned short const *);
	virtual long EnsureMicrosoftAccount();
	virtual long GetAcceptLanguage(unsigned short * *);
	virtual long GetActiveUrl(unsigned short * *);
	virtual long GetCachedResponseIfAvailable(unsigned short const *,INamedPropertyStore *,IStream * *);
	virtual long GetCachedUrl(unsigned short * *);
	virtual long GetCachedZeroInputResponseIfAvailable(INamedPropertyStore *,IStream * *);
	virtual long GetGeoLocationHeader(unsigned short * *);
	virtual long GetHighContrast(unsigned short * *);
	virtual long GetHomeRegion(unsigned short * *);
	virtual long GetICP(unsigned short * *);
	virtual long GetImmersiveScale(HWND__ *,DEVICE_SCALE_FACTOR *);
	virtual long GetImpressum(unsigned short * *,unsigned short * *);
	virtual long GetInstrumentationForDirectQuery(QUERY_SOURCE,SEARCH_INVOKE_METHOD,unsigned short const *,unsigned int,unsigned int,unsigned short const *,unsigned short * *);
	virtual long GetLocationAwarenessSetting(int *,SETTINGS_ENFORCEMENT_LEVEL *);
	virtual long GetPreferDomain(unsigned short * *);
	virtual long GetSQMIDHeader(unsigned short * *);
	virtual long GetSafeSearch(unsigned short * *);
	virtual long GetSafeSearchSetting(SETTINGS_SAFE_SEARCH_LEVEL *,SETTINGS_ENFORCEMENT_LEVEL *);
	virtual long GetScreenResolution(HWND__ *,unsigned short * *);
	virtual long GetSearchOnMeteredConnectionEvenWhenRoamingSetting(int *,SETTINGS_ENFORCEMENT_LEVEL *);
	virtual long GetSearchOnMeteredConnectionSetting(int *,SETTINGS_ENFORCEMENT_LEVEL *);
	virtual long GetSearchPrivacySetting(SETTINGS_SEARCH_PRIVACY_LEVEL *,SETTINGS_ENFORCEMENT_LEVEL *);
	virtual long GetShareSearchHistorySetting(int *,SETTINGS_ENFORCEMENT_LEVEL *);
	virtual long GetTermsOfUse(unsigned short * *);
	virtual long GetUILanguage(unsigned short * *);
	virtual long GetUseConnectedSearchSetting(int *,SETTINGS_ENFORCEMENT_LEVEL *);
	virtual long GetUserAgentString(unsigned short * *);
	virtual long IdentityUpdated(unsigned long,unsigned short const *);
	virtual long Invoke(IInspectable *);
	virtual long Invoke(unsigned short const *);
	virtual long IsImagePrefetched(unsigned short const *,int *);
	virtual long IsTemplateContentValid(unsigned short const *,int *);
	virtual long LoadTemplateContent(unsigned short const *,unsigned short * *);
	virtual long LogAppBarClick(IItem *,unsigned short const *);
	virtual long LogAppInstallState(unsigned short const *,unsigned short const *,unsigned long);
	virtual long LogAppResize(unsigned short const *,VIEWMODE,IViewportData *);
	virtual long LogAppVisibilityChange(SEARCH_RESULTS_APP_TRANSITION);
	virtual long LogAttributionClick(IItem *,UI_INPUT_METHOD);
	virtual long LogAttributionVisibilityChange(unsigned short const *,SEARCH_RESULTS_APP_TRANSITION);
	virtual long LogDetailArrowClick(IItem *,UI_SCROLL_DIRECTION,UI_INPUT_METHOD,unsigned __int64);
	virtual long LogDetailViewVisibilityChange(unsigned short const *,SEARCH_RESULTS_APP_TRANSITION,unsigned __int64);
	virtual long LogHttpError(unsigned short const *,unsigned short const *,long,IStream *);
	virtual long LogLastWebQueryResponse();
	virtual long LogLocalLayoutChange(unsigned short const *,UI_LOCAL_RESULT_TYPE,UI_LAYOUT_ACTION);
	virtual long LogLocalRankerData(unsigned short const *,IObjectArray *,double,IObjectArray *);
	virtual long LogLocalResultClick(unsigned short const *,unsigned short const *,UI_INPUT_METHOD,IViewportData *);
	virtual long LogPerfColdStart();
	virtual long LogPerfImagesComplete();
	virtual long LogPerfImagesLoading();
	virtual long LogPerfLocalReadyToRender();
	virtual long LogPerfPaginationRequestStart();
	virtual long LogPerfPrefetchImagesComplete(unsigned short const *);
	virtual long LogPerfRenderComplete();
	virtual long LogPerfRequestAbandoned();
	virtual long LogPerfRequestAbandoned(int);
	virtual long LogPerfRequestSent();
	virtual long LogPerfRequestStart();
	virtual long LogPerfResponseParsed(unsigned short const *,unsigned short const *);
	virtual long LogPerfResponseReceived();
	virtual long LogPerfTemplateRequestComplete(unsigned short const *,unsigned __int64,unsigned __int64);
	virtual long LogPerfWebReadyToRender();
	virtual long LogPerfWebRenderStart();
	virtual long LogScroll(unsigned short const *,UI_SCROLL_DIRECTION,UI_INPUT_METHOD,IViewportData *);
	virtual long LogSearchPaneDismiss(unsigned short const *,unsigned short const *);
	virtual long LogSearchPaneOpen();
	virtual long LogSuggestionClick(QUERY_SOURCE,unsigned short const *,IObjectArray *,unsigned int,unsigned int,unsigned short const *,unsigned short * *);
	virtual long LogSuggestionClickWithViewport(unsigned short const *,IItem *,UI_INPUT_METHOD,IViewportData *);
	virtual long LogSuggestionContextMenuClick(unsigned short const *,IItem *,unsigned short const *);
	virtual long LogSuggestionItemLayout(unsigned short const *,unsigned short const *,IObjectArray *);
	virtual long LogTemplateError(IItem *,unsigned short const *,long);
	virtual long LogTemplateFallback(IItem *);
	virtual long LogTemplateRequestInfo(unsigned short const *,unsigned short const *);
	virtual long LogWebLayoutChange(IItem *,UI_LAYOUT_ACTION);
	virtual long LogWebResultClick(IItem *,UI_INPUT_METHOD,IViewportData *);
	virtual long MarkTemplateContentValid(unsigned short const *);
	virtual long PerformDelayedInitialization();
	virtual long ProcessAuthHeader(unsigned short const *);
	virtual long ProcessPreferDomainHeader(unsigned short const *);
	virtual long QueueMissingPrefetchTemplates(unsigned short const * const *,unsigned __int64);
	virtual long QueueParsingErrorForQuery(unsigned short const *,long,unsigned int,unsigned int,unsigned short const *,unsigned short const *);
	virtual long RemoveDownloadedTemplate(unsigned short const *);
	virtual long RemoveImageDownloaded(EventRegistrationToken);
	virtual long RemoveSettingChanged(EventRegistrationToken);
	virtual long RequestUpdateGeoLocation();
	virtual long RequestUpdateSettingsConfiguration();
	virtual long ResetDomain();
	virtual long SetActiveImpression(unsigned short const *,CONNECTED_QUERY_TYPE);
	virtual long SetActiveUrl(unsigned short const *);
	virtual long SetCachedUrl(unsigned short const *);
	virtual long SetErrorTracingData(unsigned short const *,CONNECTED_QUERY_TYPE);
	virtual long SetLastWebQueryResponse(IStream *,unsigned short const *,INamedPropertyStore *,unsigned int);
	virtual long SetLocationAwarenessSetting(int);
	virtual long SetSafeSearchSetting(SETTINGS_SAFE_SEARCH_LEVEL);
	virtual long SetScope(unsigned short const *);
	virtual long SetSearchOnMeteredConnectionEvenWhenRoamingSetting(int);
	virtual long SetSearchOnMeteredConnectionSetting(int);
	virtual long SetSearchPrivacySetting(SETTINGS_SEARCH_PRIVACY_LEVEL);
	virtual long SetShareSearchHistorySetting(int);
	virtual long SetUseConnectedSearchSetting(int);
	virtual long ShouldAddAuthHeader(int *);
	virtual long ShouldAddPrivacyHeader(int *);
	virtual long ShouldBlockWeb(int *);
	virtual long StartImagePrefetch();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnAuthenticate();
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long UploadParsingErrorsForQuery(unsigned short const *,unsigned short const *,long,IStream *);
	virtual long WebBlockedByPolicy(int *);
};

class CConnectedSearchTransport
{
	class CConnectedEndpoint
	{
		long _EnsureInitialized();
		long _UpdateDomain(unsigned short const *,unsigned short * *);
		static long s_GetUrlParts(unsigned short const *,unsigned long *,unsigned short * *,unsigned short * *);
	public:
		CConnectedEndpoint(HttpEndpoint);
		long GetConnectionDetails(void * *,unsigned long *,unsigned short * *);
		long GetUrl(unsigned short * *);
		long ResetDomain(unsigned short const *);
	};

	struct HTTP_ENDPOINT_REGISTRATION
	{
		~HTTP_ENDPOINT_REGISTRATION();
	};

	long _AddSQMIDHeader(void *);
	long _CheckPreferDomain(unsigned short const *);
	long _GetErrorLogger(IConnectedSearchLogger * *);
	long _GetHeaderValue(void *,unsigned short const *,unsigned short * *);
	long _GetSQMMachineID(unsigned short * *);
	long _GetSQMUserID(unsigned short * *);
	long _HttpRequest(CConnectedSearchTransport::HttpEndpoint,unsigned short const *,unsigned short const *,unsigned short const *,HttpRequestFlags,unsigned short const *,IStream * *);
	long _LoadResponseIntoStream(void *,IStream * *);
	static CConnectedSearchTransport::HTTP_ENDPOINT_REGISTRATION * s_rgEndpointRegMap;
	static unsigned short const * const * const c_pszCookiePathList;
public:
	CConnectedSearchTransport();
	long Advise(IConnectedSearchLogger *);
	long ClearAllCookies();
	long GetCookieValue(CConnectedSearchTransport::HttpEndpoint,unsigned short const *,unsigned short * *);
	long GetPreferDomain(unsigned short * *);
	long GetSQMIDHeader(unsigned short * *);
	long RuntimeClassInitialize();
	long SetPreferDomain(unsigned short const *);
	static long s_GetUserAgentString(unsigned short * *);
	void ResetPreferDomain();
	void Unadvise();
};

struct CContactCallActivatedEventArgs
{
	CContactCallActivatedEventArgs();
	long RuntimeClassInitialize(unsigned short const *,unsigned short const *,Windows::ApplicationModel::Contacts::IContact2 *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Contact(Windows::ApplicationModel::Contacts::IContact * *);
	virtual long get_ServiceId(HSTRING__ * *);
	virtual long get_ServiceUserId(HSTRING__ * *);
	virtual long get_Verb(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CContactManagerBroker
{
	static long _GetContactCardExperience(HWND__ *,Windows::Internal::PlatformExtensions::IContactCardExperience * *);
	static long _ValidateCallingAppAndGetItsCurrentWindowAsHost(HWND__ *,HWND__ * *);
public:
	CContactManagerBroker();
	static TrustLevel InternalGetTrustLevelStatic();
	static unsigned short const * InternalGetRuntimeClassNameStatic();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long IsShowContactCardSupported(unsigned char *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowContactCard(unsigned __int64,Windows::ApplicationModel::Contacts::IContact *,Windows::Foundation::Rect,Windows::UI::Popups::Placement,Windows::ApplicationModel::Contacts::IContactCardOptions *,float,unsigned char,Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader * *);
	virtual long ShowContactCard2(unsigned __int64,Windows::ApplicationModel::Contacts::IContact *,Windows::Foundation::Rect,Windows::UI::Popups::Placement,Windows::ApplicationModel::Contacts::IContactCardOptions *,float,unsigned char,Windows::ApplicationModel::Contacts::Internal::IContactCardExperienceDelayedDataLoader * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CContactMapActivatedEventArgs
{
	CContactMapActivatedEventArgs();
	long RuntimeClassInitialize(Windows::ApplicationModel::Contacts::IContactAddress *,Windows::ApplicationModel::Contacts::IContact2 *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Address(Windows::ApplicationModel::Contacts::IContactAddress * *);
	virtual long get_Contact(Windows::ApplicationModel::Contacts::IContact * *);
	virtual long get_Verb(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CContactMessageActivatedEventArgs
{
	CContactMessageActivatedEventArgs();
	long RuntimeClassInitialize(unsigned short const *,unsigned short const *,Windows::ApplicationModel::Contacts::IContact2 *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Contact(Windows::ApplicationModel::Contacts::IContact * *);
	virtual long get_ServiceId(HSTRING__ * *);
	virtual long get_ServiceUserId(HSTRING__ * *);
	virtual long get_Verb(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CContactPostActivatedEventArgs
{
	CContactPostActivatedEventArgs();
	long RuntimeClassInitialize(unsigned short const *,unsigned short const *,Windows::ApplicationModel::Contacts::IContact2 *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Contact(Windows::ApplicationModel::Contacts::IContact * *);
	virtual long get_ServiceId(HSTRING__ * *);
	virtual long get_ServiceUserId(HSTRING__ * *);
	virtual long get_Verb(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CContactVideoCallActivatedEventArgs
{
	CContactVideoCallActivatedEventArgs();
	long RuntimeClassInitialize(unsigned short const *,unsigned short const *,Windows::ApplicationModel::Contacts::IContact2 *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Contact(Windows::ApplicationModel::Contacts::IContact * *);
	virtual long get_ServiceId(HSTRING__ * *);
	virtual long get_ServiceUserId(HSTRING__ * *);
	virtual long get_Verb(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CCortanaExperienceFlow
{
	long GetExperienceManager(IImmersiveLauncherCortana * *);
public:
	virtual long Dismiss();
	virtual long StartExperience(unsigned short const *);
	virtual long ToggleExperience(unsigned short const *);
};

class CCortanaExperienceFlowCF
{
	virtual ~CCortanaExperienceFlowCF();
public:
	CCortanaExperienceFlowCF();
};

class CCrashDetector
{
	long _StartMonitoringThreadOfWindow(HWND__ *,CCrashDetector::CHandler *);
	long _TakeOwnershipOfHandleAndStartMonitoring(void *,CCrashDetector::CHandler *);
	static void s_ObjectSignaledHandler(_TP_CALLBACK_INSTANCE *,void *,_TP_WAIT *,long);
public:
	void StopMonitoring();
	~CCrashDetector();
};

class CCriticalFailureHandler
{
	bool _MatchesPreviousFailure(long,unsigned short const *,unsigned int,unsigned __int64 *,unsigned __int64 *);
	void _RaiseFailFastException(long,unsigned __int64 *,unsigned __int64 *);
	void _RaiseFailFastExceptionInvalidOXID(_EXCEPTION_RECORD *,_CONTEXT *,unsigned long);
	void _RaiseFailFastExceptionRPCFailedDNE(_EXCEPTION_RECORD *,_CONTEXT *,unsigned long);
	void _RecordFailure(long,unsigned short const *,unsigned int,unsigned __int64 *,unsigned __int64 *);
public:
	void HandleFailure(long *,unsigned short const *,unsigned int,unsigned __int64 *,unsigned __int64 *);
};

struct CCriticalFailureTelemetry
{
	void ReportFailure_(long,unsigned short const *,unsigned int,unsigned __int64 *,unsigned __int64 *,bool);
};

class CCrossSlideGestureProvider
{
	bool _ProcessRegionInteraction(unsigned int);
	long _ConfigureInteractionContext(HINTERACTIONCONTEXT__ *);
	long _ConfigureRailBreakInteractionContext(HINTERACTIONCONTEXT__ *);
	long _HandlePointerInput(DirectUI::PointerEvent *);
	long _InitializeInteractionContext();
	long _InitializeManipulationManager();
	long _InitializeRailBreakInteractionContext();
	long _InitializeRegion();
	long _OnPointerDown(DirectUI::PointerEvent *);
	long _OnPointerUp(DirectUI::PointerEvent *);
	long _ProcessCrossSlide(INTERACTION_CONTEXT_OUTPUT const *);
	long _ReleaseRegion();
	long _SetContact(unsigned int,bool);
	static void s_InteractionContextCallback(void *,INTERACTION_CONTEXT_OUTPUT const *);
	static void s_RailBreakInteractionContextCallback(void *,INTERACTION_CONTEXT_OUTPUT const *);
	void _CancelActiveGesture();
	void _CompleteActiveGesture();
	void _FindTouchScrollViewers();
	void _RailBreakInteractionContextCallback(INTERACTION_CONTEXT_OUTPUT const *);
	void _ResetGestureDetection();
	void _SendGestureDetected(GESTURE_PROVIDER_GESTURE,float,float);
	void _SendMotionDetected(float,float);
	void _StopTrackingPointers();
	void _TrackPointer(unsigned int,bool);
public:
	CCrossSlideGestureProvider();
	virtual long AddClient(IGestureClient *);
	virtual long CancelActiveGesture();
	virtual long GetCallbackFilters(DuiBehaviorFilters::Flags *);
	virtual long Init(DirectUI::Value *);
	virtual long OnAttach(DirectUI::Element *);
	virtual long OnContentUpdated(IDirectManipulationViewport *,IDirectManipulationContent *);
	virtual long OnDetach(DirectUI::Element *);
	virtual long OnEvent(DirectUI::Element *,DirectUI::Event *);
	virtual long OnInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual long OnPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long OnViewportStatusChanged(IDirectManipulationViewport *,DIRECTMANIPULATION_STATUS,DIRECTMANIPULATION_STATUS);
	virtual long OnViewportUpdated(IDirectManipulationViewport *);
	virtual long RemoveClient(IGestureClient *);
	virtual long SetEnabled(bool);
	void SetDistanceThresholds(int,int,int,int,SET_DISTANCE_THRESHOLDS_OPTIONS);
};

class CCurrentLocationRequest
{
	virtual long v_OnCompleted();
public:
	CCurrentLocationRequest(Microsoft::WRL::WeakRef);
	virtual long GetDeferral(Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_CurrentLocation(Windows::Storage::IStorageFolder * *);
	virtual long put_CurrentLocation(Windows::Storage::IStorageFolder *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCurrentLocationRequestDeferral
{
	CCurrentLocationRequestDeferral(CDeferrableRequest<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral> *);
};

struct CCurrentLocationRequestedEventArgs
{
	CCurrentLocationRequestedEventArgs(Windows::Storage::Pickers::Provider::ICurrentLocationRequest *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Request(Windows::Storage::Pickers::Provider::ICurrentLocationRequest * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCustomPropertyProviderImpl
{
	virtual long GetChangeCount(unsigned int *);
	virtual long GetCustomProperty(HSTRING__ *,Windows::UI::Xaml::Data::ICustomProperty * *);
	virtual long GetIndexedProperty(HSTRING__ *,Windows::UI::Xaml::Interop::TypeName,Windows::UI::Xaml::Data::ICustomProperty * *);
	virtual long GetStringRepresentation(HSTRING__ * *);
	virtual long NotifyPropertyChanged(HSTRING__ *);
	virtual long get_Type(Windows::UI::Xaml::Interop::TypeName *);
};

struct CCustomPropertyProviderWithMapImpl
{
	CCustomPropertyProviderWithMapImpl();
	virtual long GetPropertyValue(HSTRING__ *,IInspectable * *);
};

class CDCompAbstractThumbnail
{
	struct CAutoBatcher
	{
		CAutoBatcher(CDCompAbstractThumbnail *);
		~CAutoBatcher();
	};

	struct CStoryboardExtraData
	{
		virtual DCompThumbnailAnimation GetAnimationType();
		virtual _GUID GetAnimationTelemetryGuid();
		virtual bool HasAnimatedTransitions();
		virtual void SetHasAnimatedTransitions();
	};

	struct CVariableCurveChangeHandler<<lambda_42a319d466c03f646eff84ae9c7edd7a> >
	{
		CVariableCurveChangeHandler<<lambda_42a319d466c03f646eff84ae9c7edd7a> >(ISwitchThumbnailDeviceManager *,IDCompositionDesktopDevice *,<lambda_42a319d466c03f646eff84ae9c7edd7a> const &,int);
		long RuntimeClassInitialize();
		virtual long GetOffsets(float *,int);
		virtual long OnCurveChanged(IUIAnimationVariable2 *);
		virtual long SetOffsets(IUIAnimationVariable2 *,float *,int);
	};

	struct CVariableCurveChangeHandler<<lambda_466f052378d1758faf07b0052541d127> >
	{
		CVariableCurveChangeHandler<<lambda_466f052378d1758faf07b0052541d127> >(ISwitchThumbnailDeviceManager *,IDCompositionDesktopDevice *,<lambda_466f052378d1758faf07b0052541d127> const &,int);
		long RuntimeClassInitialize();
		virtual long GetOffsets(float *,int);
		virtual long OnCurveChanged(IUIAnimationVariable2 *);
		virtual long SetOffsets(IUIAnimationVariable2 *,float *,int);
	};

	struct CVariableCurveChangeHandler<<lambda_838fd1621ad6edf2cd1d223fa5046c55> >
	{
		CVariableCurveChangeHandler<<lambda_838fd1621ad6edf2cd1d223fa5046c55> >(ISwitchThumbnailDeviceManager *,IDCompositionDesktopDevice *,<lambda_838fd1621ad6edf2cd1d223fa5046c55> const &,int);
		long RuntimeClassInitialize();
		virtual long GetOffsets(float *,int);
		virtual long OnCurveChanged(IUIAnimationVariable2 *);
		virtual long SetOffsets(IUIAnimationVariable2 *,float *,int);
	};

	struct CVariableCurveChangeHandler<<lambda_862499b61e6b9d955eaf8ecd0954aa47> >
	{
		virtual long GetOffsets(float *,int);
		virtual long OnCurveChanged(IUIAnimationVariable2 *);
		virtual long SetOffsets(IUIAnimationVariable2 *,float *,int);
	};

	struct CVariableCurveChangeHandler<<lambda_a9fe90e13b5ecb63644ffc6ec3ae9b1c> >
	{
		virtual long GetOffsets(float *,int);
		virtual long OnCurveChanged(IUIAnimationVariable2 *);
		virtual long SetOffsets(IUIAnimationVariable2 *,float *,int);
	};

	struct CVariableCurveChangeHandler<<lambda_e5575181439bb1ee68c2355887a77cb6> >
	{
		CVariableCurveChangeHandler<<lambda_e5575181439bb1ee68c2355887a77cb6> >(ISwitchThumbnailDeviceManager *,IDCompositionDesktopDevice *,<lambda_e5575181439bb1ee68c2355887a77cb6> const &,int);
		long RuntimeClassInitialize();
		virtual long GetOffsets(float *,int);
		virtual long OnCurveChanged(IUIAnimationVariable2 *);
		virtual long SetOffsets(IUIAnimationVariable2 *,float *,int);
	};

	_D3DMATRIX _MakeProjectionMatrix(unsigned int);
	long _AddInstantaneousAndConstantTransition(unsigned int,double * const,unsigned int,IUIAnimationVariable2 *,IUIAnimationStoryboard2 *,__MIDL___MIDL_itf_UIAnimation_0000_0002_0003 *);
	long _AddTransition(DCompThumbnailAnimation,TA_TRANSFORM_TYPE,IUIAnimationStoryboard2 *,IUIAnimationVariable2 *,double * const,unsigned int);
	long _AddTransition(unsigned int,unsigned int,TA_TIMINGFUNCTION *,IUIAnimationStoryboard2 *,IUIAnimationVariable2 *,double * const,unsigned int,bool);
	long _AddTransitionWithPVLValues(DCompThumbnailAnimation,TA_TRANSFORM_TYPE,IUIAnimationStoryboard2 *,IUIAnimationVariable2 *);
	long _CreateStoryboard(IUIAnimationStoryboard2 * *,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	long _InitializeClip();
	long _InitializeVariable<<lambda_42a319d466c03f646eff84ae9c7edd7a> >(double * const,int,IUIAnimationVariable2 * *,IUIAnimationVariableOffset * *,<lambda_42a319d466c03f646eff84ae9c7edd7a>);
	long _InitializeVariable<<lambda_466f052378d1758faf07b0052541d127> >(double * const,int,IUIAnimationVariable2 * *,IUIAnimationVariableOffset * *,<lambda_466f052378d1758faf07b0052541d127>);
	long _InitializeVariable<<lambda_838fd1621ad6edf2cd1d223fa5046c55> >(double * const,int,IUIAnimationVariable2 * *,IUIAnimationVariableOffset * *,<lambda_838fd1621ad6edf2cd1d223fa5046c55>);
	long _InitializeVariable<<lambda_862499b61e6b9d955eaf8ecd0954aa47> >(double * const,int,IUIAnimationVariable2 * *,IUIAnimationVariableOffset * *,<lambda_862499b61e6b9d955eaf8ecd0954aa47>);
	long _InitializeVariable<<lambda_a9fe90e13b5ecb63644ffc6ec3ae9b1c> >(double * const,int,IUIAnimationVariable2 * *,IUIAnimationVariableOffset * *,<lambda_a9fe90e13b5ecb63644ffc6ec3ae9b1c>);
	long _InitializeVariable<<lambda_e5575181439bb1ee68c2355887a77cb6> >(double * const,int,IUIAnimationVariable2 * *,IUIAnimationVariableOffset * *,<lambda_e5575181439bb1ee68c2355887a77cb6>);
	long _RemoveClip();
	long _SetScale(double,double,IUIAnimationStoryboard2 *,DCompThumbnailAnimation);
protected:
	CDCompAbstractThumbnail();
	long RuntimeClassInitialize(tagSIZE const &,IDCompThumbnailParent *,ISwitchThumbnailDeviceManager *,ISwitchThumbnailFactory *);
	long _CreateAnimationVariableFor3DRotationTransform(CDCompAbstractThumbnail::AxisRotationInfo,IDCompositionRotateTransform3D *,IUIAnimationVariable2 * *);
	long _CreateColorVisual(unsigned long,unsigned char,IDCompositionVisual2 * *);
	long _EnsureTiltAnimationVariable();
	long _InitOpacityAnimationVariable();
	long _InitPositionAnimationVariables();
	long _InitializeCenterTransform();
	long _MakeOneShotAnimatedRotationTransform(DCompThumbnailAnimation,IDCompositionRotateTransform3D * *,IUIAnimationStoryboardEventHandler2 *);
	long _OnSourceCenterChanged();
	long _SetBorderBackgroundScale();
	long _SetBorderVisualOffset(IDCompositionVisual *);
	long _SetProjectionTransformMatrix();
	virtual HWND__ * GetSourceWindow();
	virtual bool HasClip();
	virtual bool v_MaintainAspectRatio();
	virtual int MatchesHThumbnail(void *);
	virtual long AddVisual(IDCompThumbnailChild *,bool,IDCompThumbnailChild *);
	virtual long CustomPaint(void (*)(HDC__ *,tagSIZE const &,__int64),__int64);
	virtual long CustomPaint(void (*)(ID2D1DeviceContext *,tagSIZE const &,__int64),__int64);
	virtual long Finish3DAnimation();
	virtual long Freeze();
	virtual long GetClippingVisual(IDCompositionVisual * *);
	virtual long GetSize(tagSIZE *);
	virtual long GetVisual(IDCompositionVisual2 * *);
	virtual long RemoveVisual(IDCompThumbnailChild *);
	virtual long SetBorder(DCompThumbnailBorderMode);
	virtual long SetClip(tagRECT const *,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long SetEnable3D(bool);
	virtual long SetForceCvi(bool);
	virtual long SetFrame(DCompThumbnailFrameInfo const &,DCompThumbnailFrameInfo const &);
	virtual long SetInterpolationMode(DCompThumbnailInterpolationMode);
	virtual long SetOpacity(double,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long SetParent(IDCompThumbnail *);
	virtual long SetRect(tagRECT const &,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long SetScale(double,DCompThumbnailAnimation);
	virtual long SetTilt(double,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long SetZOrder(IDCompThumbnail *,bool);
	virtual long SourceSizeChanged(void *,tagSIZE const &,tagRECT const &,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long Start2DAnimation(DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long Start3DAnimation(DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long WindowChanged(HWND__ *,tagSIZE *,tagRECT *);
	virtual long v_SetInterpolationMode(DCompThumbnailInterpolationMode);
	virtual void RemoveFrame();
	virtual void SetMaintainAspectRatio(bool);
	void AxisRotationFromEulerRotation(CDCompAbstractThumbnail::EulerRotationInfo const &,CDCompAbstractThumbnail::AxisRotationInfo *);
	void _ResetPositionAnimationVariables();
	void _SetFrameSize();
	~CDCompAbstractThumbnail();
};

struct CDCompCustomPaintThumbnail
{
	virtual long CustomPaint(void (*)(HDC__ *,tagSIZE const &,__int64),__int64);
	virtual long CustomPaint(void (*)(ID2D1DeviceContext *,tagSIZE const &,__int64),__int64);
	virtual long Freeze();
	virtual long SetEnable3D(bool);
};

class CDCompDesktopThumbnail
{
	long _CreateVisual(IDCompositionDesktopDevice *,tagSIZE const &,tagRECT const &);
public:
	long RuntimeClassInitialize(tagSIZE *,tagRECT const &,HWND__ *,IDCompThumbnailParent *,ISwitchThumbnailDeviceManager *,ISwitchThumbnailFactory *);
	virtual long Freeze();
	virtual long SetForceCvi(bool);
};

struct CDCompRootThumbnail
{
	long RuntimeClassInitialize(IDCompositionDesktopDevicePartner *,IDCompositionTarget *,DCOMPOSITION_BITMAP_INTERPOLATION_MODE);
};

class CDCompShellTabThumbnail
{
	long CreatePlaceholderVisual(Windows::UI::Color,tagSIZE const &);
	long GetSize(tagSIZE const *,tagRECT const *,tagSIZE *);
	long SwapPlaceholderForThumbnail(Windows::Internal::ComposableShell::Tabs::ITabThumbnail *);
public:
	CDCompShellTabThumbnail();
	long RuntimeClassInitialize(DCompShellTabThumbnailInfo,tagSIZE const *,tagRECT *,IDCompThumbnailParent *,ISwitchThumbnailDeviceManager *,ISwitchThumbnailFactory *);
	virtual long GetSize(tagSIZE *);
	virtual void * GetHThumbnail();
	virtual ~CDCompShellTabThumbnail();
};

class CDCompThumbnailBase
{
protected:
	virtual long AddVisual(IDCompThumbnailChild *,bool,IDCompThumbnailChild *);
	virtual long RemoveVisual(IDCompThumbnailChild *);
};

struct CDCompThumbnailTimerEventHandler
{
	virtual long OnPostUpdate();
	virtual long OnPreUpdate();
	virtual long OnRenderingTooSlow(unsigned int);
};

class CDCompVirtualDesktopThumbnail
{
	long _CreateVisual(IDCompositionDesktopDevice *,tagSIZE const &);
public:
	CDCompVirtualDesktopThumbnail();
	long RuntimeClassInitialize(tagSIZE const *,tagRECT const &,HWND__ *,IDCompThumbnailParent *,ISwitchThumbnailDeviceManager *,ISwitchThumbnailFactory *);
	virtual long SetForceCvi(bool);
	virtual long UpdateIncludedWindows(HWND__ * *,unsigned int,HWND__ * *,unsigned int);
};

class CDCompWindowThumbnail
{
	long _CreateChildVisual(tagSIZE const &,tagRECT *);
	long _GetSize(tagSIZE const *,tagRECT const *,tagSIZE *);
protected:
	virtual long v_SetInterpolationMode(DCompThumbnailInterpolationMode);
public:
	CDCompWindowThumbnail();
	virtual HWND__ * GetSourceWindow();
	virtual int MatchesHThumbnail(void *);
	virtual long Freeze();
	virtual long GetSize(tagSIZE *);
	virtual long SetEnable3D(bool);
	virtual long SetForceCvi(bool);
	virtual long SourceSizeChanged(void *,tagSIZE const &,tagRECT const &,DCompThumbnailAnimation,IUIAnimationStoryboardEventHandler2 *);
	virtual long WindowChanged(HWND__ *,tagSIZE *,tagRECT *);
	virtual void * GetHThumbnail();
};

struct CDCompositionVariableTransformer
{
	CDCompositionVariableTransformer(IDCompositionAnimation *,float,float);
	virtual long AddCubic(double,float,float,float,float);
	virtual long AddRepeat(double,double);
	virtual long AddSinusoidal(double,float,float,float,float);
	virtual long End(double,float);
	virtual long Reset();
	virtual long SetAbsoluteBeginTime(_LARGE_INTEGER);
};

struct CDPA<ImmersiveMonitorInfo,CTContainer_PolicyUnOwned<ImmersiveMonitorInfo> >
{
	~CDPA<ImmersiveMonitorInfo,CTContainer_PolicyUnOwned<ImmersiveMonitorInfo> >();
};

struct CDPACoTaskMem<unsigned short>
{
	~CDPACoTaskMem<unsigned short>();
};

class CDPA_Base<ICondition,CTContainer_PolicyRelease<ICondition> >
{
	static int _StandardDestroyCB(ICondition *,void *);
public:
	int Create(int);
	long AppendPtr(ICondition *,int *);
};

class CDPA_Base<IFilterCondition,CTContainer_PolicyUnOwned<IFilterCondition> >
{
	static int _StandardDestroyCB(IFilterCondition *,void *);
};

class CDPA_Base<ImmersiveMonitorInfo,CTContainer_PolicyUnOwned<ImmersiveMonitorInfo> >
{
	static int _StandardDestroyCB(ImmersiveMonitorInfo *,void *);
};

class CDPA_Base<tagRGBQUAD,CTContainer_PolicyUnOwned<tagRGBQUAD> >
{
	static int _StandardDestroyCB(tagRGBQUAD *,void *);
public:
	int Destroy();
};

class CDPA_Base<unsigned short,CTContainer_PolicyCoTaskMem>
{
	static int _StandardDestroyCB(unsigned short *,void *);
public:
	int Destroy();
};

struct CDSA_Base<CONDITIONBITSSETCACHE>
{
	int Search(CONDITIONBITSSETCACHE const *,int,int (*)(CONDITIONBITSSETCACHE const *,CONDITIONBITSSETCACHE const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<_AdapterInfo>
{
	int Destroy();
};

struct CDSA_Base<_TargetInfo>
{
	int Search(_TargetInfo const *,int,int (*)(_TargetInfo const *,_TargetInfo const *,__int64),__int64,unsigned int);
};

struct CDSA_Base<tagPROPVARIANT>
{
	int Create(int);
};

struct CDUIHost
{
	static long Create(HWND__ *,bool,unsigned int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long Register();
	virtual long CreateStyleParser(DirectUI::DUIXmlParser * *);
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnGroupChanged(int,bool);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnThemeChanged(DirectUI::ThemeChangedEvent *);
};

struct CDUINativeHwndHost
{
	static long Create(int,int,int,int,HINSTANCE__ *,CDUINativeHwndHost * *);
	virtual HWND__ * CreateHostWindow(unsigned long,unsigned short const *,unsigned short const *,unsigned long,int,int,int,int,HWND__ *,HMENU__ *,HINSTANCE__ *,void *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64,__int64 *);
};

class CDUIResourceManager
{
	CDUIResourceManager::REFCOUNTEDPARSER * _GetRefCountedParserForThread();
	long _InitParserForThread();
	long _RegisterElements();
	void _UnregisterElements(unsigned int);
public:
	DirectUI::DUIXmlParser * GetParserForThread();
	long CreateElement(unsigned short const *,DirectUI::Element *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long InitThread(unsigned int,DUI_RESOURCE_MANAGER_INIT_FLAGS);
	long ReloadParser(DEVICE_SCALE_FACTOR,DirectUI::DUIXmlParser * *);
	long UpdateSheets(DEVICE_SCALE_FACTOR,DirectUI::Element *);
	void UninitThread();
};

class CDataTransferBrokerCallbacks
{
	long _AttachToBridgeWindow(IHostedApplicationFrameWindow *,IPopupWindow *);
	long _CreateFilterCondition(IDataTransferBroker *,ICondition * *);
	long _CreateFrameWindow(unsigned short const *,HWND__ * *,IPopupWindow * *);
	long _TakeScreenshotAndInvokeTarget(IDataTransferBroker *);
	virtual ~CDataTransferBrokerCallbacks();
public:
	CDataTransferBrokerCallbacks();
	virtual long ActivateSharingTarget(_GUID *,SHARING_ACTIVATION_INFO *,IInspectable *);
	virtual long CheckDesktopForProtectedContent(long *,unsigned short * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetQuickLinkInfoAt(unsigned long,QUICK_LINK_INFO_PRIV *);
	virtual long GetQuickLinksCount(unsigned long *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetScreenshotDataPackage(IDataTransferBroker *,Windows::ApplicationModel::DataTransfer::IDataPackage * *);
	virtual long GetTargetAppPID(unsigned long *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HasFocusIO();
	virtual long Initialize(HWND__ *,unsigned long,ISharePlatformHost * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long RemoveQuickLink(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *);
	virtual long RetrieveQuickLinks(IDataTransferBroker *);
	virtual long SaveQuickLink(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink *);
	virtual long ScheduleScreenshotAndInvokeTarget(IDataTransferBroker *);
	virtual long SetPopupWindow(IPopupBase *);
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnHostedApplicationReady();
	virtual void OnHostedApplicationTerminated(APP_TERMINATION_REASON);
	virtual void OnWindowHosted(HWND__ *);
};

struct CDefaultUILangugageCache
{
	CDefaultUILangugageCache();
	long GetCachedDefaultUILanguage(unsigned short * *);
};

class CDeferrableRequest<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral>
{
protected:
	long _GetDeferral<CCurrentLocationRequestDeferral>(Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral * *);
public:
	void IssueRequest<Windows::Storage::Pickers::Provider::ICurrentLocationRequest,CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs *,CFileOpenPickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> >,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs>(CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs *,CFileOpenPickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> >,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs *,long ( Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs::*)(Windows::Storage::Pickers::Provider::ICurrentLocationRequest * *));
};

class CDeferrableRequest<Windows::Storage::Pickers::Provider::IPickerClosingDeferral>
{
protected:
	long _GetDeferral<CPickerClosingDeferral>(Windows::Storage::Pickers::Provider::IPickerClosingDeferral * *);
public:
	void IssueRequest<Windows::Storage::Pickers::Provider::IPickerClosingOperation,CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs *,CFileOpenPickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *> >,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs>(CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs *,CFileOpenPickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *> >,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs *,long ( Windows::Storage::Pickers::Provider::IPickerClosingEventArgs::*)(Windows::Storage::Pickers::Provider::IPickerClosingOperation * *));
};

class CDeferrableRequest<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>
{
protected:
	long _GetDeferral<CTargetFileRequestDeferral>(Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral * *);
public:
	void IssueRequest<Windows::Storage::Pickers::Provider::ITargetFileRequest,CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs *,CFileSavePickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *> >,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs>(CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs *,CFileSavePickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *> >,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs *,long ( Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs::*)(Windows::Storage::Pickers::Provider::ITargetFileRequest * *));
};

class CDeferrableRequest<Windows::Storage::Provider::IFileUpdateRequestDeferral>
{
protected:
	long _GetDeferral<CFileUpdateRequestDeferral>(Windows::Storage::Provider::IFileUpdateRequestDeferral * *);
public:
	void IssueRequest<Windows::Storage::Provider::IFileUpdateRequest,CInvoker<Windows::Storage::Provider::ICachedFileUpdaterUI *,Windows::Storage::Provider::IFileUpdateRequestedEventArgs *,CCachedFileUpdaterUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *> >,Windows::Storage::Provider::IFileUpdateRequestedEventArgs>(CInvoker<Windows::Storage::Provider::ICachedFileUpdaterUI *,Windows::Storage::Provider::IFileUpdateRequestedEventArgs *,CCachedFileUpdaterUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *> >,Windows::Storage::Provider::IFileUpdateRequestedEventArgs *,long ( Windows::Storage::Provider::IFileUpdateRequestedEventArgs::*)(Windows::Storage::Provider::IFileUpdateRequest * *));
};

struct CDeferral<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral>
{
	virtual long Complete();
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
};

struct CDeferral<Windows::Storage::Pickers::Provider::IPickerClosingDeferral>
{
	virtual long Complete();
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
};

struct CDeferral<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>
{
	virtual long Complete();
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
};

struct CDeferral<Windows::Storage::Provider::IFileUpdateRequestDeferral>
{
	virtual long Complete();
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
};

class CDeviceActivatedEventArgs
{
	virtual ~CDeviceActivatedEventArgs();
public:
	CDeviceActivatedEventArgs();
	long RuntimeClassInitialize(unsigned short const *,unsigned short const *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_DeviceInformationId(HSTRING__ * *);
	virtual long get_Verb(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDevicePickerExperienceManager
{
	static tagRECT _CalculatePopupRect(tagRECT const &,Windows::UI::Popups::Placement,HWND__ *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewDestroying(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	void _UpdateViewPosition();
public:
	CDevicePickerExperienceManager();
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HideFlyout();
	virtual long Initialize(_GUID,unsigned long,unsigned __int64);
	virtual long OnDismiss();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowFlyout(Windows::Foundation::Rect,Windows::UI::Popups::Placement);
	virtual long add_Dismissed(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::DevicePickerExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long remove_Dismissed(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CDeviceSettingsProvider
{
	long CreateSettingForInterfaceClassCapability(unsigned short const *,unsigned short const *,DeviceAccessConsentValue,IBooleanSetting * *);
	long CreateSettingForModelCapability(unsigned short const *,unsigned short const *,DeviceAccessConsentValue,IBooleanSetting * *);
	long GetCapabilityNameFromInterfaceClassGuid(unsigned short const *,unsigned short * *);
	long Initialize(unsigned long);
	long InitializeProcessInformation(unsigned long);
	long UpdateDeviceConsent(unsigned short const *,unsigned short const *,DeviceAccessConsentValue);
	static long GetCapabilityNameFromModelID(unsigned short const *,unsigned short * *);
public:
	CDeviceSettingsProvider();
	virtual long ChangedSetting(ISetting *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetSettingsCollection(unsigned long,unsigned short const *,ISettingsCollection * *);
	virtual long GetTitle(unsigned short * *);
	virtual long IsSupported(unsigned long,unsigned short const *,int *);
	virtual ~CDeviceSettingsProvider();
};

class CDevicesFlow
{
	long _CreateAndInitializeProjectPage(bool *);
	long _CreateAndInitializeUIPage(DEVICESFLOW_FLAGS);
	long _HandleAcquireDeviceSource(Microsoft::WRL::ComPtr<IDeviceElementSource> *,bool *,IDeviceElementSource * *);
	long _HandleConnectUI<PlaytoFlow>(long ( CDevicesFlow::*)(),CTSmartPtr<PlaytoFlow,CTContainer_PolicyNewMem> &,bool,unsigned int,HWND__ *,DeviceFlow * *);
	long _HandleConnectUI<PrintFlow>(long ( CDevicesFlow::*)(),CTSmartPtr<PrintFlow,CTContainer_PolicyNewMem> &,bool,unsigned int,HWND__ *,DeviceFlow * *);
	long _HandleConnectUI<ProjectFlow>(long ( CDevicesFlow::*)(),CTSmartPtr<ProjectFlow,CTContainer_PolicyNewMem> &,bool,unsigned int,HWND__ *,DeviceFlow * *);
	long _InitializeContract<PrintFlow>(CTSmartPtr<PrintFlow,CTContainer_PolicyNewMem> &,unsigned long (*)(void *),bool,void * *);
	long _InitializeContract<ProjectFlow>(CTSmartPtr<ProjectFlow,CTContainer_PolicyNewMem> &,unsigned long (*)(void *),bool,void * *);
	long _InitializeDevicesFlow();
	long _InitializePlayContract();
	long _InitializePrintContract();
	long _InitializeProjectContract();
	static long _CreateDevicesViewElement<DeviceElementSourceListBox,IDeviceElementView>(IUnknown * *);
	static long _CreateDevicesViewElement<DeviceTileBuilder,IDeviceTileBuilder>(IUnknown * *);
	static unsigned long _InitPrintingThreadProc(void *);
	virtual long _CreateUI(HWND__ *,IPopupWindow *,IDataTransferBroker *,DirectUI::Element * *);
	virtual long _CreateWindow(IPopupWindow * *);
	virtual long _GetIUnknown(IUnknown * *);
	virtual unsigned int _GetTitleResId();
	virtual void _FireEtwStartEvent();
	virtual void _PerfTrackStart(HWND__ *);
	virtual void _PerfTrackStop(long);
	void _HandleDisconnectUI<PlaytoFlow>(CTSmartPtr<PlaytoFlow,CTContainer_PolicyNewMem> &,bool *);
	void _HandleDisconnectUI<PrintFlow>(CTSmartPtr<PrintFlow,CTContainer_PolicyNewMem> &,bool *);
	void _PrintingWorker();
public:
	CDevicesFlow();
	virtual long AcquireDeviceSource(DEVICESFLOW_FLAGS,bool *,IDeviceElementSource * *);
	virtual long ConnectUI(DEVICESFLOW_FLAGS,HWND__ *,DeviceFlow * *);
	virtual long CreateUIPageForConfiguration(DEVICESFLOW_FLAGS);
	virtual long DisconnectUI(DEVICESFLOW_FLAGS);
	virtual long GetCharmFlowSession(DEVICESFLOW_FLAGS,_GUID const &,void * *);
	virtual long GetDevicesFlowFlags(DEVICESFLOW_FLAGS *);
	virtual long GetPrintTask(IUnknown * *);
	virtual long GetProjectForceDisplayDeviceList(int *);
	virtual long GetTargetDeviceId(unsigned short * *);
	virtual long InvokeFlowFromApplication(__int64);
	virtual long IsFlowAppInvoked(bool *);
	virtual long SetApplicationId(unsigned short const *);
	virtual long SetDevicesFlowFlags(DEVICESFLOW_FLAGS);
	virtual long SetPickerEvent(void *);
	virtual long SetPrintTask(IUnknown *);
	virtual long SetProjectForceDisplayDeviceList(int);
	virtual long SetTargetDeviceId(unsigned short const *);
	virtual long StartFlow(IImmersiveMonitor *,HWND__ *);
	virtual ~CDevicesFlow();
};

class CDevicesFlowCF
{
	virtual ~CDevicesFlowCF();
public:
	CDevicesFlowCF();
};

class CDevicesFlowExperienceManager
{
	long _GetDeviceDiscoveryTrayLocation(Windows::Foundation::Rect &);
	long _PositionDeviceDiscoveryTrayLocation(Windows::Foundation::Rect &);
	static void s_TimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	virtual ~CDevicesFlowExperienceManager();
	void _StopTimer();
public:
	CDevicesFlowExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *,unsigned short const *);
	virtual long Close();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Hide();
	virtual long HideFlyout();
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnIdleStateChanged(CSingleViewShellExperience *,bool);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFlyoutTitle(HSTRING__ *);
	virtual long SetTitle(unsigned short const *);
	virtual long Show();
	virtual long ShowFlyout();
	virtual long ShowNotification(unsigned short const *,unsigned short const *,DevicesFlowNotificationType,IUnknown *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDuiRefThread
{
	CDuiRefThread(long *,bool);
	virtual long KeepDuiInitializedForThread(unsigned int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CDummyUnknown
{
	CDummyUnknown();
	virtual long ContextSensitiveHelp(int);
	virtual long GetClassID(_GUID *);
	virtual long GetMode(FOLDER_ENUM_MODE *);
	virtual long GetWindow(HWND__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetMode(FOLDER_ENUM_MODE);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CEdgeInvoker
{
	static Microsoft::WRL::ComPtr<CEdgeInvoker> s_spTimerInstance;
	static unsigned __int64 s_nHoverTimerId;
protected:
	long _UpdateMonitorState();
	static void s_TimerProc(HWND__ *,unsigned int,unsigned __int64,unsigned long);
	virtual int v_IsHintSupported();
	virtual int v_IsSystemUiVisible();
	virtual long v_CancelDrag();
	virtual long v_CommitDrag(tagPOINT);
	virtual long v_ContinueDrag(tagPOINT);
	virtual long v_StartDrag(tagPOINT);
	virtual long v_StartSecondarySwipe(tagPOINT);
	void _KillHoverTimer();
	void _SetHoverTimer();
public:
	CEdgeInvoker();
	virtual int IsHintSupported();
	virtual int IsSystemUiVisible();
	virtual long CancelDrag();
	virtual long CancelSwipe();
	virtual long CommitDrag(tagPOINT);
	virtual long CommitSwipe(unsigned int,tagPOINT);
	virtual long ContinueDrag(tagPOINT);
	virtual long ContinueSwipe(unsigned int,tagPOINT);
	virtual long HitCornerOrEdge(EDGEUI_CORNEROREDGE,tagPOINT,EDGEUI_INPUTNOTIFICATION *,int);
	virtual long MouseDwelled(tagPOINT,EDGEUI_INPUTNOTIFICATION *);
	virtual long ObservedKeypress(unsigned int);
	virtual long ObservedMouseButtonDown(tagPOINT);
	virtual long ObservedMouseMove(tagPOINT,tagPOINT);
	virtual long ObservedTouchInput(tagPOINT);
	virtual long SetSite(IUnknown *);
	virtual long StartDrag(tagPOINT);
	virtual long StartExtendedSwipe(tagPOINT,unsigned int,tagPOINT);
	virtual long StartSecondarySwipe(unsigned int,tagPOINT);
	virtual long StartSwipe(unsigned int,tagPOINT);
};

class CEdgeUiDeviceManager
{
	virtual ~CEdgeUiDeviceManager();
	void _TryRegisterDeviceWithManagers(void *);
	void _TryUnregisterDeviceWithManagers(void *);
public:
	CEdgeUiDeviceManager();
	virtual long AddEdgeUiManager(IEdgeUiManagerInternal *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long PerformDelayedInitialization();
	virtual long RefreshDeviceRegistrations();
	virtual long RemoveEdgeUiManager(IEdgeUiManagerInternal *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class CEdgeUiInput
{
	EDGEUI_CORNEROREDGE _GetCornerOrEdge(bool);
	__int64 _WndProc(unsigned int,unsigned __int64,__int64,bool);
	bool _IsPointInWindow(tagPOINT);
	bool _IsTopEdge();
	int _IsCurrentInputFromMouseOrPen();
	int _IsPointerForEdgeInputRegisteredDevice(unsigned int);
	long _CancelDrag();
	long _CancelMouseDrag();
	long _CancelTouchDrag();
	long _ComputeCornerRegion(int,int,bool,HRGN__ * *);
	long _CreateInputWindow();
	long _MouseMoveToCornerOrEdge(EDGEUI_CORNEROREDGE,tagPOINT,bool,bool,bool);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static bool s_fDisableTaskbarInvocation;
	static bool s_fDisableTitlebarInvocation;
	static bool s_fDisableTopLeft;
	static bool s_fDisableTopRight;
	static unsigned int s_WM_MouseLeftChildEdgy;
	static void s_RegisterWindowClass();
	virtual ~CEdgeUiInput();
	void _HandleObservedMouseInput(bool,tagPOINT,tagPOINT);
	void _OnMouseDown(tagPOINT,bool);
	void _OnMouseHover(tagPOINT);
	void _OnMouseLeave();
	void _OnMouseMove(tagPOINT,bool,bool);
	void _OnMouseUp(tagPOINT);
	void _OnPointerDown(unsigned int,tagPOINT,bool);
	void _OnPointerUp(unsigned int,tagPOINT);
	void _OnPointerUpdate(unsigned int,tagPOINT);
	void _RegisterRawInput(bool);
	void _SetInputObservation(bool);
	void _SetTemporaryDisableTimer(bool,unsigned int);
public:
	CEdgeUiInput(EDGEUI_INDEX);
	virtual HWND__ * GetListenerHwnd();
	virtual __int64 ForwardMessage(unsigned int,unsigned __int64,__int64);
	virtual bool CanBeVisibleForInputObservation(EDGEUI_INDEX);
	virtual long CancelMouseDrag();
	virtual long CancelTouchSwipe();
	virtual long DismissedUI(DISMISSED_UI_FLAGS);
	virtual long DragEnter(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long DragLeave();
	virtual long DragOver(unsigned long,_POINTL,unsigned long *);
	virtual long Drop(IDataObject *,unsigned long,_POINTL,unsigned long *);
	virtual long GetAssignedEdge(EDGEUI_INDEX *);
	virtual long GetHint(IEdgeUiHint * *);
	virtual long HintVisualDestroyed(IEdgeUiHint *);
	virtual long ObservedKeyDown(unsigned int);
	virtual long ObservedKeyUp(unsigned int);
	virtual long ObservedMouseButtonDown(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
	virtual long ObservedMouseButtonUp(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
	virtual long ObservedMouseMove(tagPOINT,unsigned short,tagPOINT);
	virtual long ObservedPenInput(tagPOINT,int,void *);
	virtual long ObservedTouchInput(tagPOINT,int);
	virtual long Position(tagRECT const *,EDGEUI_LAYOUT_REASON,bool);
	virtual long SetSite(IUnknown *);
	virtual long SetVisible(bool);
	virtual long SimulateEdgeInput(IImmersiveApplication *);
	virtual void RefreshSettings(IImmersiveSettingsCache *);
};

class CEdgeUiManager
{
	EDGEUI_INDEX _IndexFromEdgeInput(IEdgeUiInput *);
	bool _IsDeviceRegisteredForEdgeInput(void *);
	bool _IsDeviceSupported(void *);
	bool _IsStartScreenVisible();
	bool _IsTaskViewVisible();
	bool _ShouldIgnoreEdgeDueToStartOrAllUpView(EDGEUI_INDEX);
	long _AcquireInvokerForComponent(EDGEUI_COMPONENT,_GUID const &,void * *);
	long _AcquireMouseInvokerForEdge(EDGEUI_INDEX,IEdgeUiMouseInvocation * *);
	long _AcquireTouchInvokerForEdge(EDGEUI_INDEX,IEdgeUiTouchInvocation * *);
	long _InitializeComponent();
	long _LayoutEdgeUiInputs(EDGEUI_LAYOUT_REASON);
	long _RegisterForEdgeGestureWithDevice(void *);
	long _SubscribeToWNF();
	long _TryShowEdgeHint(IEdgeUiInput *,bool,bool,tagPOINT,bool *);
	tagEDGY_LOCATION const * _GetEdgyLocationFromIndexArray();
	void _DismissAllInputObservers();
	void _HideHint(bool);
	void _UnregisterAllDevicesForEdgeInput();
	void _UnregisterForEdgeGestureWithDevice(void *);
protected:
	virtual ~CEdgeUiManager();
public:
	CEdgeUiManager();
	virtual long BeginInputObservation(EDGEUI_COMPONENT);
	virtual long DiscreteInvokeForApp(EDGEUI_COMPONENT,IImmersiveApplication *);
	virtual long DismissedUI(EDGEUI_COMPONENT,DISMISSED_UI_FLAGS);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long FullScreenVisibilityChanged(int);
	virtual long GetAutohideImmuneWorkArea(tagRECT *);
	virtual long GetCornerMetrics(unsigned int *,unsigned int *,unsigned int *,unsigned int *);
	virtual long GetPearlRect(tagRECT *);
	virtual long GetRegionForCornerOrEdge(EDGEUI_COMPONENT,HRGN__ * *);
	virtual long GetTargetApplicationFromPoint(tagPOINT,int,IImmersiveApplication * *);
	virtual long GetTrayRect(tagRECT *);
	virtual long GetTraySearchBoxVisibility(int *);
	virtual long GetTrayStuckPlace(EDGEUI_TRAYSTUCKPLACE *);
	virtual long HandleEdgeGesturePrefChanged(HWND__ *);
	virtual long HintVisualDestroyed(IEdgeUiHint *);
	virtual long InputObserveEnd(IEdgeUiInput *);
	virtual long InputObserveStart(IEdgeUiInput *);
	virtual long IsDeviceRegisteredForEdgeInput(void *);
	virtual long ModeChanged(IMM_SYSTEM_MODE);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long MouseDragEnd(IEdgeUiInput *);
	virtual long MouseDragStart(IEdgeUiInput *,IEdgeUiMouseInvocation * *);
	virtual long MouseDwelledCornerOrEdge(IEdgeUiInput *,IEdgeUiMouseInvocation * *);
	virtual long MouseHitCornerOrEdge(IEdgeUiInput *,bool,bool,tagPOINT,bool *,IEdgeUiMouseInvocation * *);
	virtual long MouseLeaveOnCornerOrEdge(IEdgeUiInput *);
	virtual long NotifyAutohideImmuneWorkAreaMayHaveChanged(tagRECT);
	virtual long NotifyPearlRectChanged(tagRECT);
	virtual long NotifyTraySearchBoxVisibilityChanged(int);
	virtual long NotifyTrayStuckPlaceChanged(EDGEUI_TRAYSTUCKPLACE);
	virtual long OnRudeWindowStateChange(RudeWindowStateChangeFlags,HWND__ *);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long OverrideInvocation(IEdgeUiInvocationProvider *);
	virtual long PerformDelayedInitialization();
	virtual long RegisterWithDeviceIfApplicable(void *);
	virtual long ShowStandardSystemOverlays(IImmersiveApplication *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long TaskbarRaised();
	virtual long TouchExtendedSwipeStart(IEdgeUiInput *,IEdgeUiTouchInvocation * *,int *);
	virtual long TouchSwipeEnd(IEdgeUiInput *);
	virtual long TouchSwipeStart(IEdgeUiInput *,bool,tagPOINT,bool *,IEdgeUiTouchInvocation * *,IEdgeUiTouchInvocation * *);
	virtual long UnregisterWithDeviceIfApplicable(void *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long UpdateEdgeWindowZorder();
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
};

class CElementWithProxy<DirectUI::Element>
{
protected:
	long _EnsureInitializedProxy();
public:
	CElementWithProxy<DirectUI::Element>();
	virtual ~CElementWithProxy<DirectUI::Element>();
};

struct CElementWithProxy<DirectUI::TouchButton>
{
	virtual ~CElementWithProxy<DirectUI::TouchButton>();
};

class CElsServiceInstance
{
protected:
	long Initialize(_GUID);
};

class CEndpointManager
{
	long CreateNewDeviceMonitor(unsigned short const *);
	long FindDeviceMonitor(unsigned short const *,CEndpointMonitor * *);
	virtual long OnDefaultDeviceChanged(__MIDL___MIDL_itf_mmdeviceapi_0000_0000_0001,__MIDL___MIDL_itf_mmdeviceapi_0000_0000_0002,unsigned short const *);
	virtual long OnDeviceAdded(unsigned short const *);
	virtual long OnDeviceRemoved(unsigned short const *);
	virtual long OnDeviceStateChanged(unsigned short const *,unsigned long);
	virtual long OnPropertyValueChanged(unsigned short const *,_tagpropertykey);
public:
	CEndpointManager(HWND__ *);
	long GetDefaultEndpoint(CEndpointMonitor * *);
	long ManageEndpoints();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	~CEndpointManager();
};

struct CEndpointMonitor
{
	CEndpointMonitor(HWND__ *);
	long Initialize();
	static _GUID s_guidAudioFlyout;
	virtual long OnNotify(AUDIO_VOLUME_NOTIFICATION_DATA *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEntranceAnimationScheduler
{
	long AddElement(DirectUI::Element *);
	long Animate();
	long Initialize(tagPOINT const &);
	~CEntranceAnimationScheduler();
};

class CEnumerableObjectCollection
{
protected:
	CEnumerableObjectCollection(int,unsigned int);
	long Clone(_GUID const &,void * *);
	long InitializeClone(CEnumerableObjectCollection *);
public:
	virtual long AddFromArray(IObjectArray *);
	virtual long AddObject(IUnknown *);
	virtual long Clear();
	virtual long Clone(IEnumObjects * *);
	virtual long Clone(IEnumUnknown * *);
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long Next(unsigned long,IUnknown * *,unsigned long *);
	virtual long Next(unsigned long,_GUID const &,void * *,unsigned long *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveObjectAt(unsigned int);
	virtual long Reset();
	virtual long Skip(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CEnumerateEntries
{
	CEnumerateEntries();
	virtual long GetNextEntry(KnownGameList::IGameEntry * *);
};

struct CEventSource<IImmersiveSessionIdleNotification>
{
	long Advise(IImmersiveSessionIdleNotification *,unsigned long *);
};

struct CEventSource<IImmersiveShellHookNotificationInternal>
{
	long Advise(IImmersiveShellHookNotificationInternal *,unsigned long *);
};

struct CEventSource<IImmersiveWindowMessageNotificationInternal>
{
	long Advise(IImmersiveWindowMessageNotificationInternal *,unsigned long *);
	~CEventSource<IImmersiveWindowMessageNotificationInternal>();
};

class CExecuteItem
{
	long _GetContextMenu(IContextMenu * *);
	void _InitMembers();
public:
	CExecuteItem(IShellItem *);
	long Execute();
	long SetAssociationOverride(unsigned long,unsigned short const *);
	void SetInvokePointFromHWND(HWND__ *);
	void SetInvokePointFromMonitor(HMONITOR__ *);
	~CExecuteItem();
};

struct CExecuteItemFromImmersiveApp
{
	long SetSiteAndInvokePointForImmersive(LAUNCHER_SERVICES_OPTIONS,APPLICATION_VIEW_SIZE_PREFERENCE,unsigned short const *,HWND__ *,IUnknown *);
	long SetSiteForImmersive(LAUNCHER_SERVICES_OPTIONS,IUnknown *);
};

class CExpansionExperienceManager
{
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
public:
	CExpansionExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long OnDismiss();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Show();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CExperienceManagerAnimationHelper
{
	long BeginWindowAnimation(HWND__ *,DWMTRANSITION_TARGET,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *);
public:
	long Begin(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,DWMTRANSITION_TARGET);
	long Begin(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,DWMTRANSITION_TARGET,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *,tagRECT const *);
	long End();
	~CExperienceManagerAnimationHelper();
};

class CExtensionList
{
	struct ExtensionCompare
	{
		int Compare(Microsoft::WRL::ComPtr<IExtensionListItem> const &,Microsoft::WRL::ComPtr<IExtensionListItem> const &);
	};

	long _GetLastExtensionCatalogWriteTime(_FILETIME *);
	long _Initialize(unsigned short const *,unsigned short const *);
	long _InitializeWithFilterAndSortOptions(CCoSimpleArray<Microsoft::WRL::ComPtr<IExtensionListItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IExtensionListItem> > > &,ICondition *,SORTCOLUMN *,unsigned int,unsigned int,IObjectArray *);
	long _RecordUsageDataLastWriteTime();
public:
	CExtensionList();
	static long CreateInstance(unsigned short const *,unsigned short const *,_GUID const &,void * *);
	virtual long GetAppIdFilteredExtensionList(wistd::function<bool (unsigned short const *)>,IExtensionList * *);
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
	virtual long GetFilteredAndSortedExtensionList(ICondition *,SORTCOLUMN *,unsigned int,unsigned int,IObjectArray *,IExtensionList * *);
	virtual long InvalidateLastWrite(ExtensionListStalenessFlags);
	virtual long IsStale(ExtensionListStalenessFlags,int *);
	virtual long RefreshUsageData();
};

class CExtensionListContextMenu
{
	long _AddHideUnhideVerb(IExtensionListItem *,Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand *> >);
	long _AddPinUnpinVerb(IExtensionListItem *,Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand *> >);
public:
	CExtensionListContextMenu();
	virtual long QueryContextMenu(IExtensionListItem *,tagEXTENSION_LIST_CONTEXT_MENU_COMMANDS,Windows::UI::Popups::IPopupMenu *);
};

class CExtensionListContextMenuBehavior
{
	long _ShowMenu(Windows::UI::Popups::IPopupMenu *,tagRECT const &);
	void _HandleContextMenuEvent(TileContextMenuEvent const &);
	void _HideElement(DirectUI::Element *);
	void _PinElement(DirectUI::Element *);
	void _UnpinElement(DirectUI::Element *);
public:
	CExtensionListContextMenuBehavior(tagEXTENSION_LIST_CONTEXT_MENU_COMMANDS);
	static UID RefreshExtensionListEvent;
	virtual long GetCallbackFilters(DuiBehaviorFilters::Flags *);
	virtual long Init(DirectUI::Value *);
	virtual long OnAttach(DirectUI::Element *);
	virtual long OnDetach(DirectUI::Element *);
	virtual long OnEvent(DirectUI::Element *,DirectUI::Event *);
};

class CExtensionListItem
{
	long _EnsurePropertyStore();
	long _GetCustomStringProperty(unsigned short const *,unsigned short * *);
	long _GetMFURank(double *);
	long _Initialize(Windows::Foundation::IExtensionRegistration *,IExtensionStateManager *);
public:
	CExtensionListItem();
	static long CreateInstance(Windows::Foundation::IExtensionRegistration *,IExtensionStateManager *,_GUID const &,void * *);
	virtual long AppendToPinnedList();
	virtual long GetExtensionRegistration(Windows::Foundation::IExtensionRegistration * *);
	virtual long GetHiddenState(int *);
	virtual long GetPinnedState(int *);
	virtual long GetPropertyStore(_GUID const &,void * *);
	virtual long InsertToPinnedList(IExtensionListItem *);
	virtual long RefreshUsageData();
	virtual long RemoveFromPinnedList();
	virtual long SetHiddenState(int);
};

struct CExtensionStateLock
{
	long TryLock();
	~CExtensionStateLock();
};

class CExtensionStateManager
{
	long _Initialize(unsigned short const *,HSTRING__ *);
	long _LoadExtensionState(unsigned short const *,EXTENSION_STATE *);
	long _LoadSortedPinnedList(CCoSimpleArray<EXTENSION_STATE,4294967294,CSimpleArrayStandardCompareHelper<EXTENSION_STATE> > *,IExtensionListItem *);
	long _SaveExtensionState(EXTENSION_STATE const *);
	long _SaveSortedPinnedList(CCoSimpleArray<EXTENSION_STATE,4294967294,CSimpleArrayStandardCompareHelper<EXTENSION_STATE> > *);
public:
	static long CreateInstance(unsigned short const *,HSTRING__ *,_GUID const &,void * *);
	virtual long AppendToPinnedList(IExtensionListItem *,EXTENSION_STATE *);
	virtual long GetExtensionState(IExtensionListItem *,EXTENSION_STATE *);
	virtual long InsertToPinnedList(IExtensionListItem *,IExtensionListItem *,EXTENSION_STATE *);
	virtual long RemoveFromPinnedList(IExtensionListItem *,EXTENSION_STATE *);
	virtual long SetHiddenState(IExtensionListItem *,int,EXTENSION_STATE *);
};

class CFileExtensionVector
{
protected:
	virtual long v_CheckForErrors(HSTRING__ *);
public:
	long RuntimeClassInitialize(EXTENSIONFORMATOPTIONS,unsigned int,unsigned int,unsigned int);
	static long CheckFileExtension(HSTRING__ *,EXTENSIONFORMATOPTIONS,unsigned int,unsigned int,unsigned int);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFileOpenPickerActivatedEventArgs
{
	CFileOpenPickerActivatedEventArgs();
	long RuntimeClassInitialize(Microsoft::WRL::WeakRef,unsigned short const *,HostedActivationType);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetProvider(IUnknown * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetProvider(IUnknown *);
	virtual long get_CallerPackageFamilyName(HSTRING__ * *);
	virtual long get_ComponentSiteId(_GUID *);
	virtual long get_FileOpenPickerUI(Windows::Storage::Pickers::Provider::IFileOpenPickerUI * *);
	virtual long get_ObjectModelAcidPrivate(HSTRING__ * *);
	virtual long put_ComponentSiteId(_GUID);
	virtual long put_ObjectModelAcidPrivate(HSTRING__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFileOpenPickerUI
{
	CFileOpenPickerUI(Microsoft::WRL::WeakRef);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFileOpenPickerUIBase
{
protected:
	long _CanAddValidatedItem(Windows::Storage::IStorageItem *,unsigned char *);
	long _GetValidatedItem(Windows::Storage::IStorageFile *,Windows::Storage::IStorageItem * *);
	static void s_ClosingSignaledHandler(_TP_CALLBACK_INSTANCE *,void *,_TP_WAIT *,long);
	virtual long v_OnClosing(int,void * *);
public:
	CFileOpenPickerUIBase(Microsoft::WRL::WeakRef);
	virtual long AddFile(HSTRING__ *,Windows::Storage::IStorageFile *,Windows::Storage::Pickers::Provider::AddFileResult *);
	virtual long CanAddFile(Windows::Storage::IStorageFile *,unsigned char *);
	virtual long ContainsFile(HSTRING__ *,unsigned char *);
	virtual long RemoveFile(HSTRING__ *);
	virtual long add_Closing(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *> *,EventRegistrationToken *);
	virtual long add_FileRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> *,EventRegistrationToken *);
	virtual long get_AllowedFileTypes(Windows::Foundation::Collections::IVectorView<HSTRING__ *> * *);
	virtual long get_SelectionMode(Windows::Storage::Pickers::Provider::FileSelectionMode *);
	virtual long get_SettingsIdentifier(HSTRING__ * *);
	virtual long get_Title(HSTRING__ * *);
	virtual long put_Title(HSTRING__ *);
	virtual long remove_Closing(EventRegistrationToken);
	virtual long remove_FileRemoved(EventRegistrationToken);
	virtual ~CFileOpenPickerUIBase();
};

class CFileOpenPickerUIInternal
{
	long _EnsureViewSinkRegistered();
public:
	CFileOpenPickerUIInternal(Microsoft::WRL::WeakRef);
	virtual long ClearCurrentLocation();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long OnCurrentLocationRequested();
	virtual long OnLocationReset();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long add_CurrentLocationRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> *,EventRegistrationToken *);
	virtual long add_LocationReset(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_FolderMode(unsigned char *);
	virtual long get_StartLocation(Windows::Storage::Pickers::Provider::StartLocation *);
	virtual long get_StartLocationPath(HSTRING__ * *);
	virtual long get_ViewMode(Windows::Storage::Pickers::PickerViewMode *);
	virtual long remove_CurrentLocationRequested(EventRegistrationToken);
	virtual long remove_LocationReset(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFilePicker
{
	long _FailIfCallerInAppContainer();
public:
	CFilePicker();
	virtual long GetCallerInformation(PICKER_CALLER_INFORMATION *);
	virtual long GetInProcOverride(int *);
	virtual long GetOwner(HWND__ * *);
	virtual long GetPickerParameters(PICKER_PARAMETERS *);
	virtual long Initialize();
	virtual long Initialize(HWND__ *);
	virtual long PrepopulateCallingAppData(HSTRING__ *,HSTRING__ *);
	virtual long SetInProcOverride(int);
	virtual long SetInitialLocationWithShellItem(IShellItem *);
	virtual long SetNamespaceRoot(IShellItem *);
	virtual long SetTargetFolderLibrary(IShellItem *);
	virtual ~CFilePicker();
};

class CFilePickerController
{
	bool IsFileExplorerApp(IExtensionListItem *);
	bool IsFileUpdaterWithoutUI();
	bool IsPickerRestricted();
	bool _ShouldShowAppList();
	long GetOpenDialogResults(IObjectCollection *);
	long GetPickerOverrideFolder(IShellItem * *);
	long GetSaveDialogResults(IObjectCollection *);
	long InitDComp();
	long InitEnterpriseId();
	long ProtectFile(IShellItem *);
	long ShowCFD();
	long _CreateNewStreamItem(IShellItem *,unsigned short const *);
	long _GetDefaultExtension(unsigned short * *);
	long _SetOpenFileTypes(Windows::Foundation::Collections::IVector<HSTRING__ *> *,unsigned int);
	long _SetSaveFileTypes(Windows::Foundation::Collections::IVector<Windows::Storage::Pickers::IPickerFileType *> *,unsigned int);
	virtual bool v_IsUILess();
	virtual long v_GetAppExtensionListCondition(EXTENSIONLIST_PINNED_OPTION,ICondition * *);
	virtual long v_GetBackgroundColor(unsigned long *);
	virtual long v_GetCorrespondingShellView(IShellItem *,_ITEMIDLIST_ABSOLUTE const *,bool *,IShellView * *);
	virtual long v_GetCurrentFilterIndex(int *);
	virtual long v_GetForegroundColor(unsigned long *);
	virtual long v_InitializePicker();
	virtual long v_PersistState();
	virtual long v_ShowPicker();
	virtual void v_Close();
	void FireUpdatedSaveFilenameToApp();
protected:
	long CacheCurrentFileName();
	long InitializeEmptyOpenExtensionVector();
	long InitializeOpenExtensionVector(Windows::Foundation::Collections::IVector<HSTRING__ *> *);
	long InitializeOpenExtensionVectorFromParams();
	long InitializeSaveExtensionVector();
	long _SetFileDialogOptions();
	virtual long v_CalculateDefaultSettingsIdentifier(unsigned short *,unsigned __int64);
	virtual long v_GetCFDResults(IShellItemArray * *);
	virtual long v_GetResults(_GUID const &,void * *);
	virtual long v_GetViewWindow(HWND__ * *);
	virtual long v_NavigateToInitialLocation();
	virtual long v_OnCommit();
	virtual long v_PrepareForModal();
	virtual long v_ProtectFileToIdentity(IShellItem *,unsigned short const *);
	virtual long v_SetPickerTitle(unsigned short const *);
	virtual long v_TryCreateDialog();
	virtual unsigned short const * v_GetFallbackRegKeyLocation();
	virtual void v_CalculateSupportedTypes(_tagpropertykey *);
	virtual void v_DetermineInitialNavigationLocation();
	virtual void v_PerformPostPickerTasks(PICKER_RESULTS *);
	virtual ~CFilePickerController();
public:
	CFilePickerController();
	virtual int IsWinRTPickerUsingCFD();
	virtual long ClearCurrentLocation();
	virtual long ClientAllowsUX(int *);
	virtual long CompleteFileUpdate(IFileUpdateResult *);
	virtual long FileUpdateNeedsUserInput();
	virtual long GetAllowedFileTypes(_GUID const &,void * *);
	virtual long GetAppExtensionListAsShellItemArray(IShellItemArray * *);
	virtual long GetApplicationId(unsigned short * *);
	virtual long GetBindCtxWithStorageFile(IBindCtx * *);
	virtual long GetCachedFileUpdateMode(CACHED_FILE_UPDATE_MODE *);
	virtual long GetCallingProcessId(unsigned long *);
	virtual long GetCallingProcessPackageFamilyName(unsigned short * *);
	virtual long GetDefaultAppHostingViewSize(tagSIZE *);
	virtual long GetEnumFlagsForItem(IShellItem *,unsigned long *);
	virtual long GetFormattedSaveFileName(unsigned short * *);
	virtual long GetGlobalDCompDevice(IDCompositionDesktopDevice * *);
	virtual long GetGlobalDXGIDevice(IDXGIDevice1 * *);
	virtual long GetMinAppHostingViewSize(tagSIZE *);
	virtual long GetSaveResult(IShellItem * *);
	virtual long GetSelectionMode(PICKER_SELECTION_MODE_FLAGS *);
	virtual long GetUIStatus(UISTATUS *);
	virtual long HandlePostUIShown();
	virtual long IncludeItem(IShellItem *);
	virtual long IsFrameComponentAvailable(_GUID const &,int *);
	virtual long OnFileOk(IFileDialog *);
	virtual long OnFileUpdateCommit();
	virtual long OnFolderChange(IFileDialog *);
	virtual long OnFolderChanging(IFileDialog *,IShellItem *);
	virtual long OnOverwrite(IFileDialog *,IShellItem *,FDE_OVERWRITE_RESPONSE *);
	virtual long OnSelectionChange(IFileDialog *);
	virtual long OnShareViolation(IFileDialog *,IShellItem *,FDE_SHAREVIOLATION_RESPONSE *);
	virtual long OnTypeChange(IFileDialog *);
	virtual long ProvideCurrentLocation(IShellItem *);
	virtual long ProvideSaveFile(IShellItem *,IBindCtx *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ReadyForFileUpdates();
	virtual long SetLastUsedShellView(IShellView *);
	virtual long SetSaveFileName(unsigned short const *);
	virtual long SetSaveResult(IShellItem *);
};

struct CFilePickerInvoker
{
	long ShowAndPickSingle(HWND__ *,ITEM_TYPE,IShellItem * *,IStreamedFileDataRequestedCallback * *);
};

struct CFileRemovedEventArgs
{
	CFileRemovedEventArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFileSavePickerActivatedEventArgs
{
	CFileSavePickerActivatedEventArgs();
	long RuntimeClassInitialize(Microsoft::WRL::WeakRef,unsigned short const *,HSTRING__ *,HostedActivationType);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetProvider(IUnknown * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetProvider(IUnknown *);
	virtual long get_CallerPackageFamilyName(HSTRING__ * *);
	virtual long get_ComponentSiteId(_GUID *);
	virtual long get_EnterpriseId(HSTRING__ * *);
	virtual long get_FileSavePickerUI(Windows::Storage::Pickers::Provider::IFileSavePickerUI * *);
	virtual long get_ObjectModelAcidPrivate(HSTRING__ * *);
	virtual long put_ComponentSiteId(_GUID);
	virtual long put_ObjectModelAcidPrivate(HSTRING__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFileSavePickerUI
{
	CFileSavePickerUI(Microsoft::WRL::WeakRef);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFileSavePickerUIBase
{
protected:
	long _EnsureSinkRegistered();
public:
	CFileSavePickerUIBase(Microsoft::WRL::WeakRef);
	virtual long OnFileNameChanged();
	virtual long OnSaveFileRequested();
	virtual long TrySetFileName(HSTRING__ *,Windows::Storage::Pickers::Provider::SetFileNameResult *);
	virtual long add_FileNameChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_TargetFileRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *> *,EventRegistrationToken *);
	virtual long get_AllowedFileTypes(Windows::Foundation::Collections::IVectorView<HSTRING__ *> * *);
	virtual long get_FileName(HSTRING__ * *);
	virtual long get_SettingsIdentifier(HSTRING__ * *);
	virtual long get_Title(HSTRING__ * *);
	virtual long put_Title(HSTRING__ *);
	virtual long remove_FileNameChanged(EventRegistrationToken);
	virtual long remove_TargetFileRequested(EventRegistrationToken);
	~CFileSavePickerUIBase();
};

struct CFileSavePickerUIInternal
{
	CFileSavePickerUIInternal(Microsoft::WRL::WeakRef);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long OnCurrentLocationRequested();
	virtual long OnLocationReset();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long add_LocationReset(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_StartLocation(Windows::Storage::Pickers::Provider::StartLocation *);
	virtual long get_StartLocationPath(HSTRING__ * *);
	virtual long remove_LocationReset(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFileSysBindData
{
	virtual long GetFileID(_LARGE_INTEGER *);
	virtual long GetFindData(_WIN32_FIND_DATAW *);
	virtual long GetJunctionCLSID(_GUID *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetFileID(_LARGE_INTEGER);
	virtual long SetFindData(_WIN32_FIND_DATAW const *);
	virtual long SetJunctionCLSID(_GUID const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFileUpdateRequest
{
	bool _IsPickerUIVisible();
	bool _ShouldConsiderUpdatesToLocalFileIdentity();
	long _GetValidatedUpdatedFile(Windows::Storage::IStorageItem * *);
	virtual long v_OnCompleted();
public:
	CFileUpdateRequest();
	long RuntimeClassInitialize(Microsoft::WRL::WeakRef,LOCAL_FILE_UPDATE_DISPOSITION,Windows::Storage::IStorageFile *);
	virtual long GetDeferral(Windows::Storage::Provider::IFileUpdateRequestDeferral * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetOriginalShellItem(IShellItem * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long UpdateLocalFile(Windows::Storage::IStorageFile *);
	virtual long get_ContentId(HSTRING__ * *);
	virtual long get_File(Windows::Storage::IStorageFile * *);
	virtual long get_Status(Windows::Storage::Provider::FileUpdateStatus *);
	virtual long put_Status(Windows::Storage::Provider::FileUpdateStatus);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFileUpdateRequestDeferral
{
	CFileUpdateRequestDeferral(CDeferrableRequest<Windows::Storage::Provider::IFileUpdateRequestDeferral> *);
};

struct CFileUpdateRequestedEventArgs
{
	CFileUpdateRequestedEventArgs(Windows::Storage::Provider::IFileUpdateRequest *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Request(Windows::Storage::Provider::IFileUpdateRequest * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CFileUpdateResult
{
	CFileUpdateResult();
	long RuntimeClassInitialize(Windows::Storage::Provider::IFileUpdateRequest *,IShellItem *);
	virtual long GetFileUpdateStatus(unsigned long *);
	virtual long GetOriginalShellItem(IShellItem * *);
	virtual long GetUpdatedShellItem(IShellItem * *);
};

class CFilterCondition
{
	long _Initialize(unsigned short const *,unsigned short const *,_tagpropertykey const &,FC_FLAGS,ICondition *);
	~CFilterCondition();
public:
	static long s_CreateInstance(unsigned short const *,unsigned short const *,_tagpropertykey const &,FC_FLAGS,ICondition *,_GUID const &,void * *);
	virtual long AddFromArray(IObjectArray *);
	virtual long AddObject(IUnknown *);
	virtual long Clear();
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetClassID(_GUID *);
	virtual long GetCondition(ICondition * *);
	virtual long GetCount(unsigned int *);
	virtual long GetFilterName(FC_FILTERNAME,unsigned short * *);
	virtual long GetPropertyKey(_tagpropertykey *);
	virtual long GetSizeMax(_ULARGE_INTEGER *);
	virtual long GetTypeFlags(FC_FLAGS *);
	virtual long IsDirty();
	virtual long Load(IStream *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveObjectAt(unsigned int);
	virtual long Save(IStream *,int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CFlowBase
{
protected:
	long _BaseInvokeFlowFromApplication(HWND__ *,_GUID const &);
	long _BaseStartFlowHelper(IImmersiveMonitor *,HWND__ *,bool,_GUID const &);
	long _SetMonitorPreference(IPopupWindow *,IImmersiveMonitor *,HWND__ *);
	virtual long _CreateWindow(IPopupWindow * *);
public:
	virtual long GetFlowParams(unsigned long *,_GUID *);
	virtual long SetFlowParams(unsigned long,_GUID);
};

class CGITCallbackArray
{
	virtual long GetAt(unsigned int,_GUID const &,void * *);
	virtual long GetCount(unsigned int *);
public:
	long RuntimeClassInitialize(CCoSimpleArray<Microsoft::WRL::ComPtr<IGITCookieObject>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IGITCookieObject> > > const &);
};

struct CGITCookieObject
{
	virtual long GetInterface(_GUID const &,void * *);
	virtual unsigned long GetCookie();
};

struct CGITRegistrationList
{
	CGITRegistrationList();
	long GetCallbackArray(IObjectArray * *);
	long Register(IUnknown *,unsigned long *);
	long Unregister(unsigned long);
	~CGITRegistrationList();
};

class CGameEntry
{
	long CompleteInitialization();
	long VerifyAvailable(unsigned long);
public:
	CGameEntry();
	long RuntimeClassInitialize(KnownGameList::IGameEntry *);
	virtual long GetAttribute(unsigned long,unsigned long *,KnownGameList::AttributeValue *);
	virtual long GetAttributeCount(unsigned short *);
	virtual long GetData(unsigned char const * *);
	virtual long GetGameConfig(KnownGameList::KGLGameConfig *);
	virtual long GetIdentifier(unsigned short const * *,unsigned long *);
	virtual long GetLength(unsigned long *);
	virtual long GetSecondaryKey(unsigned long,unsigned long *,unsigned short const * *,unsigned long *);
	virtual long GetSecondaryKeyCount(unsigned short *);
};

class CGlobalRudeWindowManager
{
	bool IsUsingPositioner(HWND__ *,SHELL_POSITIONER_TYPE);
	void HandleFullscreenEnter(HWND__ *);
	void RecalculateRudeWindowState(RecalculateRudeWindowsReason,HWND__ *);
public:
	CGlobalRudeWindowManager();
	long RuntimeClassInitialize(IRudeWindowWin32Functions *);
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *,IVirtualDesktop *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnDesktopVisibilityChanged(IImmersiveMonitor *,int);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long PerformDelayedInitialization();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long ViewVirtualDesktopChanged(IApplicationView *);
	virtual std::shared_ptr<wil::srwlock> GetLock();
	virtual unsigned long GetTaskPoolContext();
	virtual ~CGlobalRudeWindowManager();
};

class CGrep
{
	long _DoesTextPropertyMatchCondition(ICondition *,tagPROPVARIANT const &,CConditionEvaluator *,int *);
	long _EnsureChunkBufferCapacity();
	long _GetNextTextBlock();
	long _InitializeChunkBuffer();
	void _InitializeTextMatchBuffer();
public:
	CGrep(IFilter *,IQueryContinue *);
	long GrepText(tagSTAT_CHUNK const &,CConditionEvaluator *,TRIBIT *);
	~CGrep();
};

class CGrepConditionEvaluator
{
	long EvalValueChunk(ICondition *,TRIBIT *);
	long _GetNextChunk();
	long _InitFilter();
protected:
	virtual long v_DoesItemMatchLeafCondition(tagPROPVARIANT const &,_tagpropertykey const &,tagCONDITION_OPERATION,ICondition *,int,TRIBIT *,int *);
public:
	long DoesContentMatchCondition(TRIBIT *);
	virtual long Initialize(CONDITIONEVALINFO const *,int);
	virtual ~CGrepConditionEvaluator();
};

class CHardwareButtonFlyout
{
	bool _IsAppMediaCommand(unsigned long);
	int UseDarkIcons();
	long Initialize();
	long RaiseUIAutomationNotificationEvent(DirectUI::Element *,unsigned short *,unsigned short *);
	long _SubscribeToLockScreenWNF();
	static void s_BrightnessChangeCallback(void *);
	void SetElementCustomString(DirectUI::Element *,unsigned short const *);
public:
	CHardwareButtonFlyout();
	int IsHighContrast();
	long InitializeEndpointDevices();
	long Launch(ILockScreenAppRunningNotifier *);
	long ReloadStyleSheet();
	long ShowFlyout(int,unsigned long);
	long ShowFlyoutFromShellHook(unsigned __int64,__int64);
	static bool ShouldShowFlyoutFromShellHook(unsigned __int64,__int64);
	unsigned long GetActiveTime();
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	void ChangeWindowPosition();
	void ChangeWindowPosition(tagRECT *);
	void HandleAppComands(unsigned long,bool);
	void HandleShellMediaPlaybackDataSourceChanged(int);
	void HideFlyout();
	void OnMtcVisibilityChanged(bool);
	void RefreshFlyoutWindow(unsigned long);
	void RegisterForBrightnessChangeNotifications();
	void RespondToAudioChangeNotification(CEndpointMonitor *,int);
	void RespondToBrightnessChangeNotification();
	void SetActiveTime();
	void SetBorder();
	void StartDismissTimer();
	void StopDismissTimer();
	void ThemeChange(tagRECT *);
	~CHardwareButtonFlyout();
};

class CHashTable<IStreamedFileDataRequestedCallback,unsigned short>
{
	static void s_DestroyCallback(unsigned char *,unsigned int,void *);
};

struct CHashTable<void,unsigned short>
{
	long AddPtr(unsigned short const *,void *);
	long DeletePtr(unsigned short const *,void * *);
	~CHashTable<void,unsigned short>();
};

struct CHistoryItem
{
	long RuntimeClassInitialize(unsigned short const *,_FILETIME);
};

class CHostExperienceManager
{
	long BoostPriorityHelper();
	void ResetActivationTimeoutPolicy();
protected:
	virtual long OnViewCreated(CSingleViewShellExperience *);
public:
	CHostExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long AllowSuspension(unsigned char);
	virtual long BoostPriority();
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long UnboostPriority();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CHostExperienceManager();
};

class CHostedApplicationActivationManager
{
	long _CreateWindowFactory(IInspectable * *);
	long _EnsureApplicationActivated(unsigned short const *,unsigned short const *,IInspectable *);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~CHostedApplicationActivationManager();
	void _MaybeFireAppReady();
	void _OnConnectedStandbyChanged(bool);
	void _UpdateCachedConnectedStandbyState(bool);
public:
	CHostedApplicationActivationManager();
	virtual long ActivateHostedApplicationByAppID(tagRECT const *,unsigned short const *,unsigned short const *,IUnknown *,IHostedApplicationFrameWindow * *);
	virtual long ActivateHostedApplicationByAppIDWithOptions(ACTIVATEOPTIONSINTERNAL,tagRECT const *,unsigned short const *,unsigned short const *,IUnknown *,IHostedApplicationFrameWindow * *);
	virtual long AppWindowReadyForPresentation();
	virtual long AssociateActivationContext(unsigned int);
	virtual long CreateSplashScreenEvents(_GUID const &,void * *);
	virtual long GetWindow(HWND__ * *);
	virtual long Initialize(_GUID const &,HWND__ *,SPLASHSCREEN_IMAGE_TYPE,PLM_TASKCOMPLETION_CATEGORY_FLAGS);
	virtual long Initialize(unsigned short const *,tagRECT const *);
	virtual long InitializeForShellExperience(_GUID const &,HWND__ *,SPLASHSCREEN_IMAGE_TYPE,PLM_TASKCOMPLETION_CATEGORY_FLAGS);
	virtual long IsShellExperience(int *);
	virtual long OnActivationBegin(unsigned short const *,SPLASHSCREEN_FLAGS,HWND__ * *);
	virtual long OnActivationEnd(long,unsigned __int64);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long RevokeActivationTimeoutPolicy();
	virtual long SetAppWindow(long);
	virtual long SetAppWindowAndGetHostProcess(long,unsigned __int64 *);
	virtual long SetBehaviors(HOSTED_APPLICATION_ACTIVATION_MANAGER_BEHAVIORS);
	virtual long SetHostedApp(IHostedApplication *);
	virtual long SetHostedAppWindow(HWND__ *);
	virtual long SetWindow(HWND__ *);
	virtual long ShouldActivateWithTimeoutsDisabled(int *);
	virtual long ShowSplashScreen();
	virtual long TransitionToApp();
};

class CHostedFlow
{
	long _OnDestroyEvent(IPopupWindow *);
	long _OnDismissEvent(IPopupWindow *);
public:
	CHostedFlow();
	long Show(unsigned short const *,HSTRING__ *,Windows::ApplicationModel::Activation::IActivatedEventArgs *,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo *);
	virtual long DismissUI();
	virtual long QueryObject(_GUID const &,_GUID const &,void * *);
	virtual void OnHostedApplicationReady();
	virtual void OnHostedApplicationTerminated(APP_TERMINATION_REASON);
	virtual void OnWindowHosted(HWND__ *);
};

struct CHostedFlyoutHandler
{
	CHostedFlyoutHandler();
	virtual long Execute(HSTRING__ *,HSTRING__ *,Windows::ApplicationModel::Activation::IActivatedEventArgs *,Windows::ApplicationModel::Actions::IActionActivationInfo *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HostedFlowCompleted(unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CIconCache
{
	long Initialize(unsigned int);
	long LookupIcon(AppInfo *,unsigned short const *,HICON__ * *);
	void Clear();
};

class CIconicRepresentationLoader
{
	static long _GetColor(IShellItem *,unsigned long *);
	static long _GetShellItemFromAppId(HWND__ *,IShellItem * *);
	static long _RequestFromThumbnailCache(HWND__ *,int);
public:
	CIconicRepresentationLoader();
	virtual long OnAppRemovedFromBackstack(IImmersiveApplication *,SWITCHER_REMOVAL_REASON);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetDefaultColor(HWND__ *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class CImageDownloadTask
{
	static long s_fMaxConnPerServerSet;
	virtual ~CImageDownloadTask();
public:
	CImageDownloadTask();
	long RuntimeClassInitialize(unsigned short const *,unsigned int,IImageDownloadCallback *);
	virtual long Cancel();
	virtual long GetBindInfo(unsigned long *,_tagBINDINFO *);
	virtual long GetPriority(long *);
	virtual long OnDataAvailable(unsigned long,unsigned long,tagFORMATETC *,tagSTGMEDIUM *);
	virtual long OnLowResource(unsigned long);
	virtual long OnObjectAvailable(_GUID const &,IUnknown *);
	virtual long OnProgress(unsigned long,unsigned long,unsigned long,unsigned short const *);
	virtual long OnStartBinding(unsigned long,IBinding *);
	virtual long OnStopBinding(long,unsigned short const *);
	virtual long Start();
};

class CImageDownloadTaskGroup
{
	long _CheckIfCancelled();
	virtual ~CImageDownloadTaskGroup();
public:
	CImageDownloadTaskGroup();
	bool IsDownloadingImages();
	long Cancel();
	long DownloadImages();
	long IsImagePrefetched(unsigned short const *,int *);
	long RuntimeClassInitialize(unsigned short const * const *,unsigned __int64,IImageDownloadedEventHandler *);
	virtual long DownloadComplete(unsigned int);
};

class CImageDownloader
{
	long _CheckIfShutdown();
	long _SetOutstandingDeferredPreFetchImageTaskGroup(CImageDownloadTaskGroup *);
	long _SetOutstandingPreFetchImageTaskGroup(CImageDownloadTaskGroup *);
	virtual ~CImageDownloader();
	void _ClearOutstandingDeferredPreFetchImageTaskGroup();
	void _ClearOutstandingPreFetchImageTaskGroup();
public:
	CImageDownloader();
	bool IsDownloadingImages();
	long IsImagePrefetched(unsigned short const *,int *);
	long PrefetchDeferredImages(unsigned short const * const *,unsigned __int64);
	long PrefetchImages(unsigned short const * const *,unsigned __int64,unsigned short const *);
	long SetImageDownloadedCallback(IImageDownloadedEventHandler *);
	virtual long Invoke(unsigned short const *);
	void Shutdown();
};

struct CImmersiveAppFinderByAppId
{
	CImmersiveAppFinderByAppId(IImmersiveApplication *);
};

struct CImmersiveAppFinderByMonitor
{
	int Compare(Microsoft::WRL::ComPtr<IProjectionContext> const &,Microsoft::WRL::ComPtr<IProjectionContext> const &);
};

struct CImmersiveColor
{
	static unsigned long GetColor(IMMERSIVE_COLOR_TYPE);
};

struct CImmersiveContextMenuOwnerDrawHelper
{
	static bool s_ContextMenuWndProc(HWND__ *,unsigned int,unsigned __int64,__int64,bool *,GRID_HOW_SELECTED_FLAGS *);
};

struct CImmersiveDebuggerAwareRPCTimeout
{
	CImmersiveDebuggerAwareRPCTimeout(unsigned short const *,unsigned long);
	void Arm(unsigned short const *,unsigned long);
};

class CImmersiveHotkeyNotification
{
	long _GetMonitorForHotkeyNotification(IImmersiveMonitor * *,HWND__ * *);
	long _InvokeActionCenter(IMMERSIVE_HOT_KEY_ID);
	long _InvokeActionSpaceFlow(ACTIONTYPE);
	long _InvokeClickNote(IMMERSIVE_HOT_KEY_ID);
	long _InvokeClockFlyout();
	long _InvokeDevicesFlow(ACTIONTYPE);
	long _InvokeEDPBadge();
	long _InvokeFeedbackApp();
	long _InvokeGlobalBack();
	long _InvokeLanguageCommunityApp();
	long _InvokeMagnifierSettingsPage();
	long _InvokeNarratorSettingsPage();
	long _InvokePenSignalManager(IMMERSIVE_HOT_KEY_ID);
	long _InvokePenWorkspace(Windows::Internal::Shell::Experience::PenWorkspaceVerb);
	long _InvokeQuickAssistApp();
	long _InvokeScreenshot(IMMERSIVE_HOT_KEY_ID);
	long _InvokeSettingsApp(SettingsPaneTelemetry::HotKey);
	long _InvokeShoulderTap(IMMERSIVE_HOT_KEY_ID);
	long _InvokeSoftLanding(IMMERSIVE_HOT_KEY_ID);
	long _InvokeTabletMode(IMMERSIVE_HOT_KEY_ID);
	long _InvokeVirtualDesktopAction(IMMERSIVE_HOT_KEY_ID);
	long _InvokeWin10DevicesFlow();
	long _PrepareToInvokeApp(CExecuteItem &,unsigned short const *);
	long _ShowLauncherTipContextMenu();
	long _ToggleAllUpView();
	long _ToggleColorFiltering();
	long _ToggleFullScreen();
	long _ToggleOnScreenKeyboard();
	long _ToggleSpeechRecognition();
	static bool _IsWindowAmbiguousForMonitorMapping(HWND__ *);
	void _InvokeShakeAction();
	void _ShowDesktop(CImmersiveHotkeyNotification::ShowDesktopOptions);
public:
	CImmersiveHotkeyNotification();
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long PerformDelayedInitialization();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CImmersiveHotkeyNotification();
};

class CImmersiveMonitor
{
	long _ConnectObjectNoLock(IUnknown *);
	virtual long ConnectObject(IUnknown *);
	virtual long CreatePerMonitorComponents(bool);
	virtual long DestroyPerMonitorComponents();
	virtual long GetDisplayRect(tagRECT *);
	virtual long GetDisplayRectNoLock(tagRECT *);
	virtual long GetEffectiveDpi(unsigned int *,unsigned int *);
	virtual long GetEffectiveDpiNoLock(unsigned int *,unsigned int *);
	virtual long GetFilterFlags(IMMERSIVE_MONITOR_FILTER_FLAGS *);
	virtual long GetFilterFlagsNoLock(IMMERSIVE_MONITOR_FILTER_FLAGS *);
	virtual long GetHandle(HMONITOR__ * *);
	virtual long GetHandleNoLock(HMONITOR__ * *);
	virtual long GetIdentity(unsigned long *);
	virtual long GetIdentityNoLock(unsigned long *);
	virtual long GetOrientation(unsigned long *);
	virtual long GetOrientationNoLock(unsigned long *);
	virtual long GetWorkArea(tagRECT *);
	virtual long GetWorkAreaNoLock(tagRECT *);
	virtual long HostDisplaySettingsChangeNoLock(IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS,DisplayChangeSource);
	virtual long IsConnected(int *);
	virtual long IsConnectedNoLock(int *);
	virtual long IsEqual(IImmersiveMonitor *,int *);
	virtual long IsEqualNoLock(IImmersiveMonitor *,int *);
	virtual long IsImmersiveCapable(int *);
	virtual long IsImmersiveDisplayDevice(int *);
	virtual long IsPrimary(int *);
	virtual long IsPrimaryNoLock(int *);
	virtual long PerformDelayedInitialization();
	virtual long QueryConnectedObjects(_GUID const &,_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SendNotificationToConnectedObjectsNoLock(DisplayChangeSource);
	virtual long ShutdownServices();
	virtual long SubscribeToServices();
	virtual long UnsubscribeFromServices();
public:
	CImmersiveMonitor(ImmersiveMonitorInfo const *,unsigned long,CCoSimpleArray<PENDING_DISPLAY_CHANGE_NOTIFICATION,4294967294,CSimpleArrayStandardCompareHelper<PENDING_DISPLAY_CHANGE_NOTIFICATION> > *);
	virtual ~CImmersiveMonitor();
};

class CImmersiveMonitorManager
{
	long _FindImmersiveMonitor(CImmersiveMonitorManager::FindMonitorHow,void * const,_GUID const &,void * *);
	long _HandleDisplayChangeMessage(DisplayChangeSource,bool);
	long _HandleDisplayChangeNotificationInternal(DisplayChangeSource);
	long _RemoveProxyIfNeeded(ImmersiveMonitorInfo *);
	long _SetProxyHost(ImmersiveMonitorInfo *,DisplayChangeSource);
	long _UpdateProxyHost(DisplayChangeSource);
	static CImmersiveMonitorManager * _s_wpMonitorManager;
	static int s_EnumMonitorsProc(HMONITOR__ *,HDC__ *,tagRECT *,__int64);
	static int s_FindMonitorCallback(ImmersiveMonitorInfo *,void *);
	static int s_ReconcileDisconnectedMonitors(ImmersiveMonitorInfo *,void *);
	static int s_SendEventsToExternalListeners(ImmersiveMonitorInfo *,void *);
	static int s_SendEventsToMonitorConnectedObjects(ImmersiveMonitorInfo *,void *);
	static int s_SetupMonitorsForReconciliation(ImmersiveMonitorInfo *,void *);
	static int s_SortMonitorCallback(ImmersiveMonitorInfo *,ImmersiveMonitorInfo *,__int64);
	static int s_UpdateHMonitorCallback(ImmersiveMonitorInfo *,void *);
	static void s_RetryReconciliationTimerProc(HWND__ *,unsigned int,unsigned __int64,unsigned long);
	virtual long GetAt(unsigned int,IImmersiveMonitor * *);
	virtual long GetConnectedCount(unsigned int *);
	virtual long GetCount(unsigned int *);
	virtual long GetFromHandle(HMONITOR__ *,IImmersiveMonitor * *);
	virtual long GetFromIdentity(unsigned long,IImmersiveMonitor * *);
	virtual long GetImmersiveProxyMonitor(IImmersiveMonitor * *);
	virtual long GetMonitorArray(IObjectArray * *);
	virtual long GetNextImmersiveMonitor(IMMERSIVE_MONITOR_MOVE_DIRECTION,IImmersiveMonitor *,IImmersiveMonitor * *);
	virtual long GetSmallestMonitorDimension(long *);
	virtual long LauncherVisibilityChanged(int);
	virtual long ModeChanged(IMM_SYSTEM_MODE);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long PerformDelayedInitialization();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long QueryService(HMONITOR__ *,_GUID const &,_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long QueryServiceByIdentity(unsigned long,_GUID const &,_GUID const &,void * *);
	virtual long QueryServiceFromPoint(tagPOINT const *,_GUID const &,_GUID const &,void * *);
	virtual long QueryServiceFromWindow(HWND__ *,_GUID const &,_GUID const &,void * *);
	virtual long Register(IImmersiveMonitorNotification *,unsigned long *);
	virtual long SetFilter(IImmersiveMonitorFilter *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long Unregister(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CImmersiveMonitorManager();
	void _HandleDeferredDesktopRotation(bool);
	void _NotifyDuplicateMonitor();
	void _ReconcileMonitor(_DISPLAY_DEVICEW const * const,unsigned short const *,bool);
	void _ReconcileMonitors();
public:
	CImmersiveMonitorManager();
	long RuntimeClassInitialize();
};

class CImmersiveMonitorNotificationServiceProxy
{
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long Register(IImmersiveMonitorNotification *,unsigned long *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long Unregister(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CImmersiveMonitorNotificationServiceProxy();
public:
	CImmersiveMonitorNotificationServiceProxy();
};

class CImmersiveOpenWithUI
{
	struct ElementData
	{
		ElementData(IAssocHandler *,ISharedBitmap *,AppCategories);
	};

	DEVICE_SCALE_FACTOR GetScaleFactorForMonitorOrDevice();
	bool IsAssocHandlerAppXPackaged(Microsoft::WRL::ComPtr<IAssocHandler> const &);
	bool ShouldRegisteredAppUriHandlerBeDisabled(HSTRING__ *,HSTRING__ *);
	bool _AllowMakeDefault(CImmersiveOpenWithUI::OPENWITH_STORETILE);
	bool _CaptureHintAppInfoAndReportIfPresent();
	long FindExtensionInfoForAppUriHandlers(Windows::Foundation::Collections::IVectorView<Windows::System::Internal::Launch::ExtensionInfo *> * *);
	long GetItemEDPState(bool *);
	long InitTextScaleFactor();
	long SetEdpStringFromAppId(unsigned short const *,IAssocHandler *,DirectUI::Element *);
	long SetEdpStringFromAppPath(IAssocHandler *,DirectUI::Element *);
	long SetEdpStringFromEdpContext(EDP_CONTEXT *,DirectUI::Element *);
	long SetTileDescriptionText(int,DirectUI::Element *,bool);
	long TryGetProgIdFromHandler(IAssocHandler *,unsigned short * *);
	long _CreateAndPositionPopup();
	long _CreateAndSetFlyoutContent();
	long _CreateAndShow();
	long _CreateElementForStoreTile(DirectUI::Element * *);
	long _CreateTileForAssocHandler(IAssocHandler *,unsigned short const *,bool,DirectUI::Element * *,ISharedBitmap * *,AppCategories *);
	long _CreateTileFromHandler(Microsoft::WRL::ComPtr<IAssocHandler> const &,bool);
	long _EnsureStoreAssocHandler();
	long _FindAssocHandlerByExe(DirectUI::Element *,unsigned short const *,IAssocHandler * *);
	long _GetCheckBoxText(unsigned short * *);
	long _GetHeadText(unsigned short * *);
	long _GetIcon(IAssocHandler *,ISharedBitmap * *);
	long _GetMonitorWorkAreaAndDisplayDeviceFromWindowImmersiveFallback(tagRECT *,DISPLAY_DEVICE_TYPE *);
	long _InitializeTopologies();
	static bool IsDefaultBrowserTile(DirectUI::Element *);
	static bool IsRecentlyInstalled(DirectUI::Element *);
	static bool IsStoreTile(DirectUI::Element *);
	static bool _GetActionIdProtocolText(unsigned short const *,CImmersiveOpenWithUI::ACTIONID_STRING_TYPE,int *);
	static int s_SortCallback(void const *,void const *);
	static long GetFeaturedAppStringId(unsigned short const *,unsigned short const *,int *);
	unsigned int _FillListByEnumHandlers();
	virtual ~CImmersiveOpenWithUI();
	void ClearRecentlyInstalled();
	void ClearRecentlyInstalledInList(AppItemList *);
	void InitializeFocus();
	void InvokeSelected(CImmersiveOpenWithUI::ElementData *);
	void SetFocusToFirstItem(AppItemList *);
	void SetSelectedTile(DirectUI::Element *);
	void _InvokeDesktopPicker();
	void _MakeDefault(DirectUI::Element *);
	void _OnClose(CImmersiveOpenWithUI::OPENWITH_CLOSE_REASON,CImmersiveOpenWithUI::OPENWITH_MSFT_FEATURED_ACTION,IAssocHandler *);
	void _OnFindInPC();
	void _SetLayout(bool);
	void _UpdateForceDownloadIfRequired(Microsoft::WRL::ComPtr<IAssocHandler> const &);
public:
	CImmersiveOpenWithUI();
	long OnDestroyEvent(IPopupWindow *);
	long OnDismissCommand(IPopupWindow *);
	virtual long CreateAndShow(HWND__ *,unsigned short const *,IMMERSIVE_OPENWITH_FLAGS);
	virtual long CreateAndShowFromDelegateExecute(IExecuteCommand *,IMMERSIVE_OPENWITH_FLAGS,unsigned short const *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetPosition(tagPOINT);
	virtual long SetSite(IUnknown *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class CImmersiveOrPrimaryMonitor
{
	long Init(HMONITOR__ *);
	static void InitImpl(_DPI_INFORMATION const &,SCALINGINFO *);
};

class CImmersiveProxyMonitor
{
	virtual long ConnectObject(IUnknown *);
	virtual long CreatePerMonitorComponents(bool);
	virtual long DestroyPerMonitorComponents();
	virtual long GetDisplayRect(tagRECT *);
	virtual long GetDisplayRectNoLock(tagRECT *);
	virtual long GetEffectiveDpi(unsigned int *,unsigned int *);
	virtual long GetEffectiveDpiNoLock(unsigned int *,unsigned int *);
	virtual long GetFilterFlags(IMMERSIVE_MONITOR_FILTER_FLAGS *);
	virtual long GetFilterFlagsNoLock(IMMERSIVE_MONITOR_FILTER_FLAGS *);
	virtual long GetHandle(HMONITOR__ * *);
	virtual long GetHandleNoLock(HMONITOR__ * *);
	virtual long GetIdentity(unsigned long *);
	virtual long GetIdentityNoLock(unsigned long *);
	virtual long GetOrientation(unsigned long *);
	virtual long GetOrientationNoLock(unsigned long *);
	virtual long GetWorkArea(tagRECT *);
	virtual long GetWorkAreaNoLock(tagRECT *);
	virtual long HostDisplaySettingsChangeNoLock(IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS,DisplayChangeSource);
	virtual long IsConnected(int *);
	virtual long IsConnectedNoLock(int *);
	virtual long IsEqual(IImmersiveMonitor *,int *);
	virtual long IsEqualNoLock(IImmersiveMonitor *,int *);
	virtual long IsImmersiveCapable(int *);
	virtual long IsImmersiveDisplayDevice(int *);
	virtual long IsPrimary(int *);
	virtual long IsPrimaryNoLock(int *);
	virtual long PerformDelayedInitialization();
	virtual long QueryConnectedObjects(_GUID const &,_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SendNotificationToConnectedObjectsNoLock(DisplayChangeSource);
	virtual long ShutdownServices();
	virtual long SubscribeToServices();
	virtual long UnsubscribeFromServices();
public:
	CImmersiveProxyMonitor(ProxyMonitorInfo *,unsigned long,CCoSimpleArray<PENDING_DISPLAY_CHANGE_NOTIFICATION,4294967294,CSimpleArrayStandardCompareHelper<PENDING_DISPLAY_CHANGE_NOTIFICATION> > *);
	virtual ~CImmersiveProxyMonitor();
};

class CImmersiveSessionIdleDetector
{
	long _UpdateIdleStateAndNotify();
public:
	CImmersiveSessionIdleDetector();
	virtual long GetIdleState(int *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long Register(IImmersiveSessionIdleNotification *,unsigned long *);
	virtual long ResumeSessionIdleDetector();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long SuspendSessionIdleDetector();
	virtual long Unregister(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class CImmersiveSettingsCache
{
	long _GetIndexFromAdvancedGestureSettingId(SETTING_IDENTIFIER,unsigned long *);
	void _ComputeSetting(SETTING_IDENTIFIER,bool *);
	void _LoadSetting(SETTING_IDENTIFIER,bool *,bool *);
	void _LoadSetting(SETTING_IDENTIFIER,unsigned long *,bool *);
	void _OnSettingChanged(SETTING_IDENTIFIER,bool);
public:
	CImmersiveSettingsCache();
	static TRIBIT s_GetGroupPolicyTristate(_GUID const &);
	static bool s_GetRegBool(unsigned short const *,unsigned short const *,bool,bool);
	static bool s_ShouldShowStoreAppsOnTaskbar(BoolSetting const *);
	static unsigned long s_MultiTaskingAltTabFilterDefault(DWORDSetting const *);
	virtual long GetBOOL(SETTING_IDENTIFIER,int *);
	virtual long GetDWORD(SETTING_IDENTIFIER,unsigned long *);
	virtual long OnSettingChanged(SETTING_IDENTIFIER);
	virtual long RegisterForSettingChange(IImmersiveSettingsCacheNotification *,unsigned long *);
	virtual long UnregisterForSettingChange(unsigned long);
};

class CImmersiveShellComponent
{
protected:
	virtual long v_PublishServices(IServiceProvider *,IProfferService *);
	virtual long v_QueryService(_GUID const &,_GUID const &,void * *);
	virtual long v_ShutdownServices(IProfferService *);
public:
	long RegisterServiceInformation(CImmersiveShellComponent::ISC_SERVICE const *,unsigned int);
	virtual long PerformDelayedInitialization();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CImmersiveShellComponent();
};

class CImmersiveShellComponentWithGITSite
{
protected:
	virtual long v_DelegatingQueryService(_GUID const &,_GUID const &,void * *);
public:
	virtual ~CImmersiveShellComponentWithGITSite();
};

class CImmersiveShellComponentWithSite
{
protected:
	virtual long v_DelegatingQueryService(_GUID const &,_GUID const &,void * *);
};

class CImmersiveShellHookService
{
	virtual int IsExecutionOnSerializedThread();
	virtual long HandleWindowReplacement(HWND__ *,HWND__ *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long PostShellHookMessage(unsigned __int64,__int64);
	virtual long PostShellHookMessageWithSerialization(unsigned __int64,__int64);
	virtual long Register(unsigned __int64 const * const,unsigned int,IImmersiveShellHookNotification *,unsigned long *);
	virtual long SetTargetWindowForSerialization(HWND__ *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long Unregister(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long UpdateWindowApplicationId(HWND__ *,unsigned short const *);
	virtual ~CImmersiveShellHookService();
public:
	CImmersiveShellHookService();
	long RuntimeClassInitialize();
};

class CImmersiveShellNotifier
{
	long _AddConnectedMonitor(IImmersiveMonitor *,unsigned int,unsigned int,WNF_IMMERSIVE_MONITOR_DATA *,bool *);
	static int SortByImmersivenessCompareFunc(void *,void const *,void const *);
	static int SortByMonitorIdCompareFunc(void *,void const *,void const *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnDesktopVisibilityChanged(IImmersiveMonitor *,int);
	virtual long PerformDelayedInitialization();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	void _PublishCurrentImmersiveMonitorState();
	void _PublishWNFMonitorModeState();
public:
	CImmersiveShellNotifier();
};

struct CImmersiveSplashScreen
{
	CImmersiveSplashScreen();
	virtual long CreateSplashScreenEvents(_GUID const &,void * *);
	virtual long Initialize(unsigned short const *,tagRECT const *);
	virtual long OnActivationBegin(unsigned short const *,SPLASHSCREEN_FLAGS,HWND__ * *);
	virtual long OnActivationEnd(long,unsigned __int64);
	virtual long ShowSplashScreen();
	virtual long TransitionToApp();
};

class CImmersiveSplashScreenCF
{
	virtual ~CImmersiveSplashScreenCF();
public:
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long PerformDelayedInitialization();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class CImmersiveWindowFactory
{
	virtual long v_CreateSplashScreen(SPLASHSCREEN_FLAGS,ISplashScreen * *);
	virtual long v_Initialize(IImmersiveMonitor *,tagRECT const *);
	virtual void v_OnAfterSetAppWindow();
public:
	CImmersiveWindowFactory();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CImmersiveWindowFactoryBase
{
	virtual _GUID const & v_GetHandlerCLSID();
	virtual long v_GetAdditionalDataSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long v_MarshalAdditionalData(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
protected:
	virtual long v_CreateSplashScreen(SPLASHSCREEN_FLAGS,ISplashScreen * *);
	virtual long v_Initialize(IImmersiveMonitor *,tagRECT const *);
	virtual void v_OnAfterSetAppWindow();
	virtual ~CImmersiveWindowFactoryBase();
public:
	CImmersiveWindowFactoryBase();
	virtual long CreateCoreWindow(HSTRING__ *,Windows::UI::Core::ICoreWindow * *);
	virtual long CreateSplashScreen(SPLASHSCREEN_FLAGS,ISplashScreen * *);
	virtual long GetAppWindow(HWND__ * *);
	virtual long HasExistingSplashScreen(int *);
	virtual long Initialize(IImmersiveMonitor *,unsigned short const *);
	virtual long InitializeWithPosition(IImmersiveMonitor *,unsigned short const *,tagRECT const *);
	virtual long SetAppWindow(long);
	virtual long SetAppWindowAndGetHostProcess(long,unsigned __int64 *);
	virtual long SetViewId(unsigned long);
	virtual long get_WindowReuseAllowed(unsigned char *);
};

class CImmersiveWindowMessageService
{
	long RegisterMsgArray(CCoSimpleArray<unsigned int,4294967294,CSimpleArrayStandardCompareHelper<unsigned int> > *,IImmersiveWindowMessageNotification *,unsigned long *);
	static __int64 s_MessageMsgWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual long PostMessageW(unsigned int,unsigned __int64,__int64);
	virtual long Register(unsigned int,IImmersiveWindowMessageNotification *,unsigned long *);
	virtual long RegisterDwmIconicThumbnailWindow();
	virtual long RequestHotkeys(unsigned int,IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const,IImmersiveWindowMessageNotification *,unsigned long *);
	virtual long RequestPointerDeviceNotification(IImmersiveWindowMessageNotification *,IMMERSIVE_POINTER_DEVICE_NOTIFICATION_TYPE,unsigned long *);
	virtual long RequestPowerSettingNotification(_GUID const *,IImmersiveWindowMessageNotification *,unsigned long *);
	virtual long RequestWTSSessionNotification(IImmersiveWindowMessageNotification *,unsigned long *);
	virtual long SendMessageW(unsigned int,unsigned __int64,__int64);
	virtual long SetWindow(HWND__ *);
	virtual long Unregister(unsigned long);
	virtual long UnrequestHotkeys(unsigned long);
	virtual long UnrequestPointerDeviceNotification(unsigned long);
	virtual long UnrequestPowerSettingNotification(unsigned long);
	virtual long UnrequestWTSSessionNotification(unsigned long);
	virtual long v_PublishServices(IServiceProvider *,IProfferService *);
	virtual long v_ShutdownServices(IProfferService *);
public:
	CImmersiveWindowMessageService();
	long RuntimeClassInitialize();
	virtual long GetWindow(HWND__ * *);
	virtual ~CImmersiveWindowMessageService();
};

class CImpWndProc
{
protected:
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CImpWorkerWndProc
{
protected:
	long HrCreateWorkerWindow(HWND__ *,unsigned long,unsigned long,HMENU__ *);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CImpressionData
{
	long _CopyPrefetchImageUrls(CSimpleCaseInsensitiveOrdinalStringArray &,unsigned short const * const *,unsigned __int64);
public:
	CImpressionData();
	bool AreImagesPending();
	bool HasPerfPingBeenLogged();
	bool WasExistingImageDownloads();
	bool WasExistingTemplateDownloads();
	long GetErrorTracingData(unsigned short * *);
	long GetFirstPageQueryParams(INamedPropertyStore * *);
	long GetFirstPageResponse(IStream * *);
	long GetImpressionGuid(unsigned short * *);
	long GetLastQueryResponse(unsigned short * *);
	long GetParsingErrors(Windows::Data::Json::IJsonArray * *);
	long GetPerfDataAndMarkLogged(bool,bool,SRV_PERF_TIMESTAMPS &,bool *,bool *,bool *,unsigned short * *);
	long GetQueryText(unsigned short * *);
	long GetQueryUrl(unsigned short * *);
	long GetScope(unsigned short * *);
	long QueueParsingError(CJsonSerializer *,long,unsigned int,unsigned int,unsigned short const *,unsigned short const *);
	long RuntimeClassInitialize(unsigned short const *);
	long SetDeferredPrefetchImages(unsigned short const * const *,unsigned __int64);
	long SetErrorTracingData(unsigned short const *);
	long SetInitialPerfData(unsigned short const *,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64,bool,bool,bool);
	long SetInitialQueryResponseInfo(IStream *,unsigned short const *,INamedPropertyStore *);
	long SetLastQueryResponse(unsigned short const *);
	long SetPrefetchImages(unsigned short const * const *,unsigned __int64);
	long SetQueryUrl(unsigned short const *);
	long SetScope(unsigned short const *);
	virtual ~CImpressionData();
	void GetDeferredPrefetchImages(CSimpleCaseInsensitiveOrdinalStringArray *);
	void GetPrefetchImages(CSimpleCaseInsensitiveOrdinalStringArray *);
	void SetImagesPending(bool);
	void SetPerfContentionComplete(unsigned __int64);
	void SetPerfImagesComplete(unsigned __int64);
	void SetPerfLocalReadyToRender(unsigned __int64);
	void SetPerfPrefetchImagesComplete(unsigned __int64);
	void SetPerfRenderComplete(unsigned __int64);
	void SetPerfTemplateDownloadComplete(unsigned __int64);
	void SetPerfWebReadyToRender(unsigned __int64);
	void SetPerfWebRenderStart(unsigned __int64);
	void SetPrefetchImagesPending(bool);
	void UpdateTemplatePerfDataOnRequestComplete(unsigned __int64,unsigned __int64);
};

class CInputDialExperienceManager
{
	long AddMenuItemToJsonPayload(InputDialMenuItem const &);
	long EnsureInputHostManager();
	long EnsureWinRTStatics();
	long EnsureWindowMessageService();
	long GetPropertyValueStaticInterface(Windows::Foundation::IPropertyValueStatics * *);
	long HandleSuppressMenuEvent(bool,unsigned __int64);
	long InitializeDisplayChangeNotification();
	long InitializeMessageServiceEventsSource();
	long RegisterInputDialBackgroundAccess(unsigned int,unsigned int,HWND__ *);
	long SendDeviceSize(tagRECT);
	long SendFontFilePath(unsigned short const *);
	long SendMenuItemWithIconImage(unsigned short const *,unsigned int,unsigned char const *);
	long SendOnScreenPositionUpdate(tagPOINT);
	long SendReactivateEvent(unsigned short const *,int);
	long SetUpPreviewTimer();
	long TrySendAndResetJsonPayload();
	long UnregisterWindowMessageServiceEvents();
	static long IsPenRightHanded(unsigned char *);
	virtual long OnApplicationActivatedForLaunch(CSingleViewShellExperience *,long);
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnIdleStateChanged(CSingleViewShellExperience *,bool);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewDestroying(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShowing(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual long OnVisibilityRevokedChanged(CSingleViewShellExperience *);
	void CheckAndUpdateOnScreenState(unsigned __int64);
	void EnsureDelaySettingsDataLoadInvoked();
public:
	CInputDialExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual bool IsViewExperienceVisible();
	virtual long AddCustomMenuItemWithGlyph(unsigned __int64,unsigned int,unsigned int,HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ *,unsigned int);
	virtual long AddCustomMenuItemWithIcon(unsigned __int64,unsigned int,unsigned int,HSTRING__ *,unsigned int,Windows::Storage::Streams::IRandomAccessStreamReference *);
	virtual long AddCustomMenuItemWithKnownIcon(unsigned __int64,unsigned int,unsigned int,HSTRING__ *,unsigned int,unsigned int);
	virtual long AnimateIn();
	virtual long AnimateOut();
	virtual long AnimatePreviewMenuIn();
	virtual long CancelAnimation();
	virtual long CancelToolPreviewDismissTimer();
	virtual long ClearCustomItems(unsigned __int64,unsigned int);
	virtual long ClearMenu();
	virtual long Close();
	virtual long DestroyView();
	virtual long FindApplicationController(HWND__ *,bool *,HWND__ * *);
	virtual long GetSelectedMenuItem(unsigned __int64,unsigned int *,unsigned int *);
	virtual long HideViewExperience();
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long InvokeDispatched(unsigned __int64);
	virtual long MultitaskingViewDismissed(MULTITASKING_VIEW_TYPES);
	virtual long MultitaskingViewShown(MULTITASKING_VIEW_TYPES);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnInputDialButton(bool);
	virtual long OnInputDialOnScreenContactEnd();
	virtual long OnInputDialOnScreenContactMove(tagPOINT);
	virtual long OnInputDialOnScreenContactStart(tagPOINT,tagRECT);
	virtual long OnInputDialRotate(int);
	virtual long OnInputDialRoutedAway();
	virtual long OnInputDialRoutedTo();
	virtual long OnInputDialSystemButton(bool);
	virtual long OnInputDialTouch(bool);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long OnPairedStateChanged(bool);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long PopulateMenu(std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > const &);
	virtual long RefreshIhmStateAndPosition(IHM_DISPLAY_MODE *);
	virtual long Register(unsigned __int64,unsigned __int64,Windows::Foundation::IEventHandler<IInspectable *> *,unsigned int *,EventRegistrationToken *);
	virtual long RemoveCustomMenuItem(unsigned __int64,unsigned int,unsigned int);
	virtual long RepositionInputDialMenuIfIntersectsWithIHM();
	virtual long ResetDefaultMenuItems(unsigned __int64);
	virtual long SelectDefaultMenuItem(unsigned __int64,unsigned int,unsigned char *);
	virtual long SelectMenuItem(int);
	virtual long SelectPreviouslyActiveMenuItem(unsigned __int64,unsigned char *);
	virtual long SendLastKnownOnScreenInfo();
	virtual long SetApplicationController(unsigned __int64,unsigned char,unsigned __int64,unsigned char);
	virtual long SetDefaultMenuItems(unsigned __int64,Windows::Foundation::Collections::IIterable<Windows::UI::Input::RadialControllerSystemMenuItemKind> *);
	virtual long SetSelectedMenuItem(unsigned __int64,unsigned int,unsigned int,unsigned char *);
	virtual long ShowViewExperience();
	virtual long StartDeviceListener();
	virtual long StartToolPreviewDismissTimer();
	virtual long SuppressMenu(unsigned __int64,unsigned char,unsigned __int64);
	virtual long Unregister(unsigned __int64,unsigned int,EventRegistrationToken);
	virtual ~CInputDialExperienceManager();
};

class CInputHostLayout
{
	long _BroadcastNotificationToInternalListeners(IHM_NOTIFICATION_TYPE,HWND__ *,tagRECT const *,IHM_DISPLAY_MODE,tagRECT const *,tagRECT const *);
	long _EnsureTaskScheduler();
	long _ProcessNextNotification();
	long _QueueNotification(IHM_NOTIFICATION_DATA const *);
	long _SendWindowNotifications(HWND__ *,IHM_DISPLAY_MODE);
	long _SubmitWindowNotificationTask(HWND__ *,IHM_DISPLAY_MODE,IUnknown *);
	static _GUID const TOID_IHM_SENDWINDOWNOTIFICATION;
	static void _s_ProcessNotificationQueue(_TP_CALLBACK_INSTANCE *,void *,_TP_WORK *);
protected:
	long _InitializeComponent();
	virtual long v_ShutdownServices(IProfferService *);
	virtual ~CInputHostLayout();
public:
	CInputHostLayout();
	virtual long GetIHMPosition(tagRECT *,IHM_DISPLAY_MODE *);
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RegisterForIHMChanges(IInputHostLayoutChanges *,unsigned long *);
	virtual long UnregisterForIHMChanges(unsigned long);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CInspectableIteratorOnGenericIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,1>
{
	virtual long GetMany(unsigned int,IInspectable * *,unsigned int *);
	virtual long MoveNext(unsigned char *);
	virtual long get_Current(IInspectable * *);
	virtual long get_HasCurrent(unsigned char *);
};

struct CInspectableIteratorOnGenericIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,1>
{
	virtual long GetMany(unsigned int,IInspectable * *,unsigned int *);
	virtual long MoveNext(unsigned char *);
	virtual long get_Current(IInspectable * *);
	virtual long get_HasCurrent(unsigned char *);
};

struct CInspectableVectorChangedEventOnGenericVectorChangedEvent<Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,1>
{
	virtual long Invoke(Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> *,Windows::Foundation::Collections::IVectorChangedEventArgs *);
};

struct CInspectableVectorChangedEventOnGenericVectorChangedEvent<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,1>
{
	virtual long Invoke(Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> *,Windows::Foundation::Collections::IVectorChangedEventArgs *);
};

struct CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs *,CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> >
{
	CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs *,CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> >(CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs> *,Windows::Internal::GitEventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> > CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs>::*);
	void operator()(Windows::Storage::Pickers::Provider::IFileRemovedEventArgs *);
	~CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs *,CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> >();
};

struct CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs *,CFileOpenPickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *> >
{
	CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs *,CFileOpenPickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *> >(CFileOpenPickerUIBase *,Windows::Internal::GitEventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> > CFileOpenPickerUIBase::*);
	~CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs *,CFileOpenPickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *> >();
};

struct CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,IInspectable *,CFileOpenPickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> >
{
	CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,IInspectable *,CFileOpenPickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> >(CFileOpenPickerUIInternal *,Windows::Internal::GitEventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> > CFileOpenPickerUIInternal::*);
	void operator()(IInspectable *);
};

struct CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs *,CFileOpenPickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> >
{
	CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs *,CFileOpenPickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> >(CFileOpenPickerUIInternal *,Windows::Internal::GitEventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> > CFileOpenPickerUIInternal::*);
	~CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs *,CFileOpenPickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> >();
};

struct CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,IInspectable *,CFileSavePickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> >
{
	CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,IInspectable *,CFileSavePickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> >(CFileSavePickerUIBase *,Windows::Internal::GitEventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> > CFileSavePickerUIBase::*);
	void operator()(IInspectable *);
	~CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,IInspectable *,CFileSavePickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> >();
};

struct CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs *,CFileSavePickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *> >
{
	CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs *,CFileSavePickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *> >(CFileSavePickerUIBase *,Windows::Internal::GitEventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> > CFileSavePickerUIBase::*);
	~CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs *,CFileSavePickerUIBase,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *> >();
};

struct CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal *,IInspectable *,CFileSavePickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> >
{
	CInvoker<Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal *,IInspectable *,CFileSavePickerUIInternal,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> >(CFileSavePickerUIInternal *,Windows::Internal::GitEventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> > CFileSavePickerUIInternal::*);
	void operator()(IInspectable *);
};

struct CInvoker<Windows::Storage::Provider::ICachedFileUpdaterUI *,IInspectable *,CCachedFileUpdaterUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *> >
{
	CInvoker<Windows::Storage::Provider::ICachedFileUpdaterUI *,IInspectable *,CCachedFileUpdaterUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *> >(CCachedFileUpdaterUI *,Windows::Internal::GitEventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> > CCachedFileUpdaterUI::*);
	void operator()(IInspectable *);
};

struct CInvoker<Windows::Storage::Provider::ICachedFileUpdaterUI *,Windows::Storage::Provider::IFileUpdateRequestedEventArgs *,CCachedFileUpdaterUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *> >
{
	CInvoker<Windows::Storage::Provider::ICachedFileUpdaterUI *,Windows::Storage::Provider::IFileUpdateRequestedEventArgs *,CCachedFileUpdaterUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *> >(CCachedFileUpdaterUI *,Windows::Internal::GitEventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> > CCachedFileUpdaterUI::*);
	~CInvoker<Windows::Storage::Provider::ICachedFileUpdaterUI *,Windows::Storage::Provider::IFileUpdateRequestedEventArgs *,CCachedFileUpdaterUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *> >();
};

struct CItemAncestorIterator
{
	bool Next(IShellItem2 * *);
	~CItemAncestorIterator();
};

class CItemIDFactory<APPINSTITEM,1346449985>
{
	static CItemIDFactory<APPINSTITEM,1346449985>::CHILDITEMID * s_Alloc(unsigned __int64,IMalloc *);
	static CItemIDFactory<APPINSTITEM,1346449985>::CHILDITEMID const * _IsValid(_ITEMIDLIST_RELATIVE const *);
protected:
	virtual ~CItemIDFactory<APPINSTITEM,1346449985>();
public:
	static long GetPropertyFromIDList(_ITEMIDLIST_RELATIVE const *,_tagpropertykey const &,tagPROPVARIANT *);
	static long GetPropertyStorageFromIDList(_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
	static long s_CreateItemID(APPINSTITEM const *,IPropertyStore *,_ITEMID_CHILD * *,IMalloc *);
	static tagSERIALIZEDPROPSTORAGE const * GetPropertyStorage(_ITEMIDLIST_RELATIVE const *,unsigned long *);
	virtual long SetItemAlloc(IMalloc *);
};

struct CItemRemovedEventArgsBase<Windows::Storage::Pickers::Provider::IFileRemovedEventArgs>
{
	virtual long RuntimeClassInitialize(unsigned short const *);
	virtual long get_Id(HSTRING__ * *);
};

class CJsonSerializer
{
	long _AddObjectToArray(Windows::Data::Json::IJsonObject *,Windows::Data::Json::IJsonArray *);
	long _CreateAndAddFirstLastVisibleDataToObject(IConnectedSearchRegionInfo *,Windows::Data::Json::IJsonObject *);
	long _CreateAndAddRegionToArray(IConnectedSearchRegionInfo *,Windows::Data::Json::IJsonArray *);
	long _CreateAndAddRegionsValue(IObjectArray *,Windows::Data::Json::IJsonObject *);
	long _CreateAndSetArrayValue(unsigned short const *,Windows::Data::Json::IJsonArray *,Windows::Data::Json::IJsonObject *);
	long _CreateAndSetNumberValue(unsigned short const *,double,Windows::Data::Json::IJsonObject *);
	long _CreateAndSetObjectValue(unsigned short const *,Windows::Data::Json::IJsonObject *,Windows::Data::Json::IJsonObject *);
	long _CreateAndSetStringValue(unsigned short const *,unsigned short const *,Windows::Data::Json::IJsonObject *);
	long _CreateAndSetVisibleItem(unsigned short const *,unsigned short const *,Windows::Data::Json::IJsonObject *);
	long _CreateBaseMergeUpdate(unsigned short const *,UI_LAYOUT_ACTION,Windows::Data::Json::IJsonObject * *);
	long _CreateBasePropertiesWithNameTSAndViewmode(unsigned short const *,unsigned __int64,VIEWMODE,Windows::Data::Json::IJsonObject * *);
	long _OrderedPairToString(long,long,unsigned short * *);
	long _ParseTargetId(unsigned short const *,unsigned short * *,unsigned short * *);
	long _SerializeAndAddItemLayoutBoxToArray(unsigned short const *,ISuggestionLayoutItem *,Windows::Data::Json::IJsonArray *);
	long _SerializeAndAddItemLayoutTemplateToArray(ISuggestionLayoutItem *,Windows::Data::Json::IJsonArray *);
	long _SerializeAndAddItemLayoutUrlToArray(unsigned short const *,ISuggestionLayoutItem *,Windows::Data::Json::IJsonArray *);
	long _SetBasicEventValues(unsigned short const *,unsigned short const *,Windows::Data::Json::IJsonObject *);
	long _SetTelemetryId(unsigned short const *,Windows::Data::Json::IJsonObject *);
	long _SetViewport(IViewportData *,Windows::Data::Json::IJsonObject *);
	long _StringifyObject(Windows::Data::Json::IJsonObject *,unsigned short * *);
	unsigned short const * _InputMethodToString(UI_INPUT_METHOD);
	unsigned short const * _ViewmodeToString(VIEWMODE);
public:
	long GetEmptyJsonArray(Windows::Data::Json::IJsonArray * *);
	long RuntimeClassInitialize();
	long SerializeAndAddGroupLayoutToArray(unsigned short const *,UI_LAYOUT_ACTION,IObjectArray *,Windows::Data::Json::IJsonArray *);
	long SerializeAndAddLocalSuggestionLayoutToArray(unsigned short const *,UI_LAYOUT_ACTION,IObjectArray *,unsigned short const *,Windows::Data::Json::IJsonArray *);
	long SerializeAndAddParsingErrorToArray(long,unsigned int,unsigned int,unsigned short const *,unsigned short const *,Windows::Data::Json::IJsonArray *);
	long SerializeAppBarClick(unsigned short const *,unsigned short const *,unsigned __int64,VIEWMODE,unsigned short const *,unsigned short * *);
	long SerializeAppNavigationEvent(unsigned __int64,bool,unsigned short * *);
	long SerializeAttributionClickProperties(UI_INPUT_METHOD,unsigned __int64,VIEWMODE,unsigned short * *);
	long SerializeAttributionOverlayVisibilityChange(unsigned __int64,bool,VIEWMODE,unsigned short * *);
	long SerializeClickEventProperties(UI_INPUT_METHOD,unsigned __int64,VIEWMODE,IViewportData *,unsigned short * *);
	long SerializeDetailArrowClickProperties(UI_SCROLL_DIRECTION,UI_INPUT_METHOD,unsigned __int64,VIEWMODE,unsigned __int64,unsigned short * *);
	long SerializeDetailsViewVisibilityChange(unsigned __int64,bool,VIEWMODE,unsigned __int64,unsigned short * *);
	long SerializeError(unsigned __int64,unsigned __int64,unsigned short const *,long,unsigned short const *,unsigned short const *,Windows::Data::Json::IJsonArray *,unsigned short * *);
	long SerializeLocalFeatureInfo(IObjectArray *,unsigned short * *);
	long SerializeLocalWeightInfo(IObjectArray *,double,unsigned short * *);
	long SerializeModeChangeEvent(unsigned __int64,VIEWMODE,IViewportData *,unsigned short * *);
	long SerializePerfPing(bool,bool,bool,bool,SRV_PERF_TIMESTAMPS,unsigned short * *);
	long SerializeSearchPaneDismiss(unsigned __int64,unsigned __int64,unsigned short const *,unsigned short * *);
	long SerializeSuggestionClick(unsigned short const *,unsigned short const *,unsigned int,unsigned int,unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
	long SerializeSwipeEvent(UI_INPUT_METHOD,UI_SCROLL_DIRECTION,unsigned __int64,VIEWMODE,IViewportData *,unsigned short * *);
	long SerializeTemplateError(unsigned __int64,unsigned __int64,unsigned short const *,long,unsigned short const *,unsigned short const *,unsigned short * *);
	long SerializeTemplateFallback(unsigned __int64,unsigned short const *,unsigned short * *);
	long SerializeTemplateRequestInfo(unsigned __int64,unsigned short const *,unsigned short * *);
	long StringifyJsonArray(Windows::Data::Json::IJsonArray *,unsigned short * *);
};

class CJsonSerializerHelper
{
	long _AddObjectToArray(Windows::Data::Json::IJsonObject *,Windows::Data::Json::IJsonArray *);
	long _StringifyJsonArray(Windows::Data::Json::IJsonArray *,unsigned short * *);
public:
	CJsonSerializerHelper();
	long AddJsonObjectToPayload(Windows::Data::Json::IJsonObject *);
	long CreateAndSetNumberValueToJsonObject(unsigned short const *,double,Windows::Data::Json::IJsonObject *);
	long CreateAndSetStringValueToJsonObject(unsigned short const *,unsigned short const *,Windows::Data::Json::IJsonObject *);
	long GetPayload(unsigned short * *);
	long IsPayloadPresent(bool *);
	long ResetPayload();
};

class CKeyboardOcclusionMitigation
{
	struct KeyboardState
	{
		bool NeedsToAvoidKeyboard(tagRECT const *);
		void UpdateKeyboardRect(tagRECT const *,IHM_DISPLAY_MODE,tagRECT const *,tagRECT const *);
	};

	bool _IsAppFitForMitigating(unsigned short const *);
	bool _IsAppWindow(HWND__ *);
	bool _MitigateWindow(HWND__ *);
	bool _RestoreAllWindows();
	bool _RestorePreviousWindowState(unsigned __int64,bool);
	static std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > _GetForegroundAppId(HWND__ *);
	unsigned __int64 _FindDisplacedWindow(HWND__ *);
	virtual ~CKeyboardOcclusionMitigation();
	void _MaximizeOrRestoreWindow(HWND__ *,unsigned int);
	void _NotifyTabletModePositionerOfPosChange(HWND__ *,tagRECT const &);
	void _NotifyTabletModePositionerOfShowWindow(HWND__ *,unsigned int);
	void _PruneDestroyedWindows();
public:
	CKeyboardOcclusionMitigation();
	virtual long InputHostHiding(HWND__ *,IHM_DISPLAY_MODE);
	virtual long InputHostShowing(HWND__ *,tagRECT *,IHM_DISPLAY_MODE,tagRECT *,tagRECT *);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long v_DelegatingQueryService(_GUID const &,_GUID const &,void * *);
};

struct CKoreanDecomposition
{
	CKoreanDecomposition();
	long DecomposeKoreanForPrefixMatch(unsigned short const *,unsigned long,unsigned short * *);
	long DecomposeKoreanForPrefixMatch(unsigned short const *,unsigned short * *);
};

class CLaunchActivatedEventArgs
{
	virtual ~CLaunchActivatedEventArgs();
public:
	CLaunchActivatedEventArgs();
	long RuntimeClassInitialize(HSTRING__ *,HSTRING__ *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long MarshalObjectToPropertySet(Windows::Foundation::Collections::IPropertySet *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Arguments(HSTRING__ * *);
	virtual long get_TileActivatedInfo(Windows::ApplicationModel::Activation::ITileActivatedInfo * *);
	virtual long get_TileId(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CLaunchToMonitor
{
	CLaunchToMonitor();
	virtual long GetMonitor(HMONITOR__ * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
};

struct CLauncherSettings
{
	DEVICE_SCALE_FACTOR GetScaleFactorForPart(ScalablePart);
	TILE_THEME_SELECTOR GetTileColorTheme();
	unsigned int GetInteger<unsigned int>(unsigned short const *,unsigned int);
};

class CLauncherTipContextMenu
{
	bool _IsInImmersiveAppOrLauncher();
	bool _IsSkippedItem(unsigned long);
	long _AddFolderLinksToCommands(IShellItem2 *);
	long _CheckLinkHash(CPropertyStoreHelper const &,unsigned long *);
	long _EnsureImmersiveModeCheck();
	long _EnsureMenu(tagPOINT *);
	long _EnsureScheduler();
	long _EnsureWindow();
	long _EnsureWindowMessageService();
	long _EnumerateAndBuildMenu();
	long _EnumerateAndBuildShutdownMenu();
	long _GetWorkArea(tagRECT *);
	static CLauncherTipContextMenu::LTCMITEM const * const c_rgItemMap;
	static long s_FindItem(unsigned long,unsigned long,CLauncherTipContextMenu::LTCMITEM *);
	static unsigned long const * const c_rgSkippedDuplicateItems;
	static unsigned long const * const c_rgSkippedItems;
	void _AddLinkToCommands(IShellItem2 *);
	void _AddSeparator();
	void _ExecuteCommand(int);
	void _ExecuteShutdownCommand(int,tagRECT const *);
	void _HandleBackgroundEnumeration(bool,__int64);
	void _RegisterWindowClass();
protected:
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~CLauncherTipContextMenu();
public:
	CLauncherTipContextMenu();
	virtual long OnSettingChange();
	virtual long SetSite(IUnknown *);
	virtual long ShowLauncherTipContextMenu(tagPOINT *);
};

struct CLauncherUIMode
{
	CLauncherUIMode();
	virtual long GetDesktopSwitchPreference(IAM_DESKTOP_SWITCH_OPTION *);
	virtual long GetMonitor(HMONITOR__ * *);
	virtual long GetMonitorPreference(ACTIVATION_MONITOR_PREFERENCE *);
	virtual long GetPlaceModeOption(PLACE_MODE_OPTION *);
	virtual long GetRevertLayoutOption(REVERT_LAYOUT_OPTION *,HWND__ * *);
	virtual long GetSwitchAppFlags(SWITCH_APP_FLAGS *);
	virtual long GetUIMode(EC_HOST_UI_MODE *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ShouldShowDownloadUI();
	virtual long ShouldSwitchToDesktop();
	virtual long ShouldWakeOnRPCCalls();
	virtual long Update(IUnknown *);
	virtual long UpdateContext(ILaunchUIContext *);
};

class CLauncherUIModeWithDesktopSwitch
{
	virtual long ShouldSwitchToDesktop();
public:
	CLauncherUIModeWithDesktopSwitch();
};

class CLayoutManager
{
	long _GetBandWorkArea(ZBID,IBandWorkArea * *);
	long _Initialize(IServiceProvider *);
	long _UpdateWorkArea(ZBID);
	virtual ~CLayoutManager();
public:
	CLayoutManager();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetBandWorkAreaAt(unsigned __int64,IBandWorkArea * *);
	virtual long GetImmersiveShellWorkArea(tagRECT *);
	virtual long GetInnerWorkAreaForBand(unsigned long,tagRECT *);
	virtual long GetOuterWorkAreaForBand(unsigned long,tagRECT *);
	virtual long InvalidateWorkArea(unsigned long);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long PerformDelayedInitialization();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long RegisterForLayoutChanges(unsigned long,IImmersiveLayoutChanges *,unsigned long *);
	virtual long RegisterForSyncLayoutChanges(unsigned long,IImmersiveLayoutChanges *,unsigned long *);
	virtual long RegisterLayoutClient(unsigned long,IImmersiveLayoutClient *,unsigned long *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterForLayoutChanges(unsigned long);
	virtual long UnregisterForSyncLayoutChanges(unsigned long);
	virtual long UnregisterLayoutClient(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual unsigned __int64 GetBandWorkAreaCount();
};

struct CLegacyProcessLifetimeManagerProxy
{
	long RuntimeClassInitialize();
};

struct CLocalObjectCreator
{
	virtual long CreateInstance(_GUID const &,_GUID const &,void * *);
};

struct CLockScreen
{
	static TrustLevel InternalGetTrustLevel();
	static unsigned short const * InternalGetRuntimeClassName();
};

class CLockScreenApplicationFlyout
{
	CLockScreenApplicationFlyout(HWND__ *,tagRECT const &,LSAF_FLYOUT_TYPE const &,LSAM_DOCK_LOCATION const &);
	long _CreateDialogRoot(DirectUI::Element * *);
	long _CreatePopupWindow(DirectUI::Element *,IPopupWindow * *);
	long _InitializeContentionAppList(CSimpleAppList *,DirectUI::Element *);
	long _InitializeDescription(DirectUI::Element *,bool);
	long _InitializeSelectionAppList(CSimpleAppList *,DirectUI::Element *);
	long _OnDismissCommand(IPopupWindow *);
	long _SetupAppList(DirectUI::Element *);
	long _ShowClearSelectionOption(DirectUI::Element *);
	long _ShowSynchronous();
	static long _s_ShowFlyout(HWND__ *,LSAF_FLYOUT_TYPE const &,tagRECT const &,LSAM_DOCK_LOCATION const &,LOCK_SCREEN_APPLICATION_CAPABILITIES const &,unsigned short const *,bool,LSAF_SELECTION_TYPE *,unsigned short * *);
	~CLockScreenApplicationFlyout();
public:
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
};

class CLockScreenApplicationManager
{
	long _ShowContentionFlyoutForOrder(HWND__ *,tagRECT const &,LSAM_DOCK_LOCATION const &,unsigned short const *,LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned int);
public:
	virtual long ShowContentionFlyout(HWND__ *,tagPOINT,unsigned short const *);
	virtual long ShowSelectionFlyout(HWND__ *,tagRECT,LOCK_SCREEN_APPLICATION_CAPABILITIES,int,unsigned short const *,unsigned int,LSAM_DOCK_LOCATION);
};

class CLockScreenApplicationManagerBase
{
protected:
	bool _IsPixelMonochrome(unsigned long,bool);
	long _AddAppAtFirstAvailableOrder(HKEY__ *,_SECURITY_ATTRIBUTES *,LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned short const *,bool);
	long _AddAppAtOrder(HKEY__ *,_SECURITY_ATTRIBUTES *,LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned short const *,unsigned int,bool,bool *);
	long _BiUpdateLockScreenDelta(unsigned short const *,LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,IPropertyStore *,unsigned short const *,IPropertyStore *,unsigned short const *);
	long _CheckForDuplicate(unsigned short const *,unsigned short const *,unsigned short const *,LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned int *);
	long _FindAppAtOrder(unsigned int,LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned short * *);
	long _FindAppOrder(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned short const *,unsigned int *);
	long _GetBackgroundTaskCapability(IBackgroundTaskCapability * *);
	long _GetFullyQualifiedFilePath(unsigned short const *,unsigned short const *,IPropertyStore *,unsigned short * *,LS_IMAGE_QUALIFIERS *,unsigned long *);
	long _GetRegkeySD(unsigned short const *,void * *);
	long _IsAppLockScreenCapable(unsigned short const *,IPropertyStore *,LOCK_SCREEN_APPLICATION_CAPABILITIES,int *);
	long _RemoveAppByAppId(HKEY__ *,LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned short * *);
	long _RemoveAppByOrder(HKEY__ *,LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned int,unsigned short * *,unsigned short * *);
	long _SetRegisteredApp(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned short const *,IPropertyStore *,unsigned int,bool,bool);
	long _UpdateDeltaList(unsigned short * *,unsigned short * *,unsigned char *,unsigned short const *,IPropertyStore *,unsigned short const *,unsigned char);
	long _UpdateWPNPlatform(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,bool);
	long _ValidateBadgeMonochrome(unsigned long,bool,IWICImagingFactory *,IWICBitmapSource *);
	long _ValidateBadgeSize(unsigned long,IWICBitmapSource *);
	long _ValidateSettingAppAtOrderDoesNotExceedMaxNCBApps(unsigned short const *,unsigned int,LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,bool *);
	void _RegisterUnregisterApp(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned int,bool);
	void _RegisterUnregisterApps(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const * *,unsigned int,bool);
	~CLockScreenApplicationManagerBase();
public:
	virtual long GetBadgeImagePath(unsigned short const *,unsigned short * *,LS_IMAGE_QUALIFIERS *,unsigned long *);
	virtual long GetFullyQualifiedFilePath(unsigned short const *,unsigned short const *,unsigned short * *,LS_IMAGE_QUALIFIERS *,unsigned long *);
	virtual long GetRegisteredApps(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,int,unsigned short * * *,unsigned short * * *,unsigned int *);
	virtual long IsAlarmCapable(unsigned short const *,int *);
	virtual long IsAlarmSlotFull(int *);
	virtual long IsAppRegistered(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned short const *,unsigned int *);
	virtual long IsLockScreenCapable(unsigned short const *,int *);
	virtual long IsLockScreenFull(unsigned short const *,int *);
	virtual long IsNCBEnabled(unsigned short const *,unsigned short const *,int *);
	virtual long ReRegisterApp(unsigned short const *);
	virtual long RemoveAllForAppId(unsigned short const *,unsigned short const *);
	virtual long SetAlarmApp(unsigned short const *);
	virtual long SetRegisteredApp(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned short const *,unsigned int,int);
	virtual long SetRegisteredAppUsingPropertyStore(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,IPropertyStore *,unsigned int,int);
	virtual long ShowContentionFlyout(HWND__ *,tagPOINT,unsigned short const *);
	virtual long ShowSelectionFlyout(HWND__ *,tagRECT,LOCK_SCREEN_APPLICATION_CAPABILITIES,int,unsigned short const *,unsigned int,LSAM_DOCK_LOCATION);
	virtual long UpdateRegisteredApp(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned short const *,unsigned short const *);
	virtual long ValidateBadgeImage(unsigned short const *,unsigned short const *);
};

class CLockScreenCallBroker
{
	struct ThumbnailVisualRecord
	{
		ThumbnailVisualRecord();
		~ThumbnailVisualRecord();
	};

	bool _ValidateConnectionGuid(_GUID const &);
	long _CreateLayoutService();
	static void s_DeferredCallUIDisconnectTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void _DisposeCallUI(bool);
	void _OnRemoveGhostStatusFlagTimeout();
	void _ResetCallState(ResetCallStateFlags);
	void _SetDeferralTimer(_FILETIME);
public:
	CLockScreenCallBroker();
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long EndCall(_GUID const &,_FILETIME);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long OnUnlocking(unsigned short const *,unsigned short const *);
	virtual long ResetCallState(_GUID const &);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long SetCallTitle(_GUID const &,unsigned short const *);
	virtual long StartCall(_GUID const &,unsigned short const *,unsigned short const *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
	virtual ~CLockScreenCallBroker();
};

struct CLockScreenCallBrokerFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long LockServer(int);
	virtual long PerformDelayedInitialization();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long ShutdownServices(IProfferService *);
};

class CLockScreenConsentDialog
{
	long _AddDialogButtons();
	long _SetDialogContent();
	long _SetDialogTitle();
public:
	long CreateAndShow();
};

class CLockScreenSettingProvider
{
	long _AddToLockScreen(unsigned short const *);
	long _CheckLockScreenCapable(unsigned short const *,int *);
	long _LoadDescription(unsigned short * *);
	long _LockScreenFull(unsigned short const *,int *);
	long _OnLockScreen(unsigned short const *,int *);
	long _RemoveFromLockScreen(unsigned short const *);
	long _ShowContentionDialog(unsigned short const *,int *);
public:
	virtual long ChangedSetting(ISetting *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetSettingsCollection(unsigned long,unsigned short const *,ISettingsCollection * *);
	virtual long GetTitle(unsigned short * *);
	virtual long IsSupported(unsigned long,unsigned short const *,int *);
};

class CLockScreenStatics
{
	long _CheckLockScreenCapable(unsigned short const *);
	long _CreateAsyncOperation(HWND__ *,unsigned short const *,Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::BackgroundAccessStatus> * *);
	long _GetAccessStatus(unsigned short const *,Windows::ApplicationModel::Background::BackgroundAccessStatus *);
	long _RemoveAccess(unsigned short const *);
	long _RequestAccessAsync(unsigned short const *,Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::BackgroundAccessStatus> * *);
public:
	CLockScreenStatics();
	virtual long ActivateInstance(IInspectable * *);
	virtual long GetAccessStatus(Windows::ApplicationModel::Background::BackgroundAccessStatus *);
	virtual long GetAccessStatusForApplication(HSTRING__ *,Windows::ApplicationModel::Background::BackgroundAccessStatus *);
	virtual long RemoveAccess();
	virtual long RemoveAccessForApplication(HSTRING__ *);
	virtual long RequestAccessAsync(Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::BackgroundAccessStatus> * *);
	virtual long RequestAccessForApplicationAsync(HSTRING__ *,Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::BackgroundAccessStatus> * *);
};

struct CMainWindowHandler
{
	CMainWindowHandler();
	virtual long Execute(HSTRING__ *,HSTRING__ *,Windows::ApplicationModel::Activation::IActivatedEventArgs *,Windows::ApplicationModel::Actions::IActionActivationInfo *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMarshaledInterface
{
	struct CMarshalStream
	{
		CMarshalStream();
	};

	long _Unmarshal(_GUID const &,void * *,bool);
public:
	CMarshaledInterface(CMarshaledInterface const &);
	long Unmarshal<IHostedApplicationActivationManagerPrivateCallbacks>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IHostedApplicationActivationManagerPrivateCallbacks> >);
	long Unmarshal<IInspectable>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IInspectable> >);
	long Unmarshal<IShellItem>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IShellItem> >);
	long Unmarshal<IStreamedFileDataRequestedCallback>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback> >);
	long Unmarshal<Windows::ApplicationModel::Activation::ISplashScreen>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::ApplicationModel::Activation::ISplashScreen> >);
	long Unmarshal<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> > >);
	long Unmarshal<Windows::Storage::Pickers::Provider::IFileOpenPickerUI>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Pickers::Provider::IFileOpenPickerUI> >);
	long Unmarshal<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal> >);
	long Unmarshal<Windows::Storage::Pickers::Provider::IFileSavePickerUI>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Pickers::Provider::IFileSavePickerUI> >);
	long Unmarshal<Windows::Storage::Provider::ICachedFileUpdaterUI>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Provider::ICachedFileUpdaterUI> >);
	~CMarshaledInterface();
};

struct CMemString<CMemString_PolicyCoTaskMem>
{
	~CMemString<CMemString_PolicyCoTaskMem>();
};

struct CMemString<CMemString_PolicyLocalMem>
{
	~CMemString<CMemString_PolicyLocalMem>();
};

class CMessageDialogHelper
{
	long _CreateButton(unsigned int,unsigned short const *,Windows::UI::Popups::IUICommand * *);
public:
	CMessageDialogHelper();
	long AddButton(unsigned int,unsigned short const *,MessageDialogButtonOptions);
	long CancelMessageDialog();
	long RuntimeClassInitialize(HWND__ *,CMessageDialogHelper::ActivationType,bool);
	long SetContent(unsigned short const *);
	long SetTitle(unsigned short const *);
	long ShowMessageDialogAndWait(tagCOWAIT_FLAGS);
};

class CMessageNotificationHolder
{
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
public:
	CMessageNotificationHolder(CCoSimpleArray<unsigned int,4294967294,CSimpleArrayStandardCompareHelper<unsigned int> > *,IImmersiveWindowMessageNotification *);
	CMessageNotificationHolder(unsigned int,IImmersiveWindowMessageNotification *);
	static long CreateInstance(CCoSimpleArray<unsigned int,4294967294,CSimpleArrayStandardCompareHelper<unsigned int> > *,IImmersiveWindowMessageNotification *,_GUID const &,void * *);
};

class CMiracastBannerExperienceManager
{
	long _CalculatePopupRect();
	long _ReadWindowWidthFromRegistry();
	long _RegisterForServices();
	long _SaveWindowWidthToRegistry();
	long _StartTaskCompletion();
	long _UnregisterForServices();
	static void s_DestroyTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	static void s_PinnedTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewDestroying(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual ~CMiracastBannerExperienceManager();
	void _DragPopup(int);
	void _ResizePopup(int);
	void _Show();
	void _StartDestroyTimer();
	void _StartUnpinnedDismissTimer();
	void _StopDestroyTimer();
	void _StopUnpinnedDismissTimer();
	void _UpdateViewPosition();
public:
	CMiracastBannerExperienceManager();
	virtual long Close();
	virtual long DelayedDestroyFlyout();
	virtual long DestroyFlyout();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HideFlyout();
	virtual long Initialize();
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long ObservedMouseButtonDown(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
	virtual long ObservedMouseButtonUp(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
	virtual long ObservedMouseMove(tagPOINT,unsigned short,tagPOINT);
	virtual long ObservedTouchInput(tagPOINT,int);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPinned(unsigned char);
	virtual long ShowFlyout();
	virtual long add_Dismissed(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::MiracastBannerExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_Resized(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::MiracastBannerExperienceManager *,Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs *> *,EventRegistrationToken *);
	virtual long remove_Dismissed(EventRegistrationToken);
	virtual long remove_Resized(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CMiracastBannerResizeEventArgs
{
	CMiracastBannerResizeEventArgs(bool,bool);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_ButtonsMinimized(unsigned char *);
	virtual long get_CrossedMinimumThreshold(unsigned char *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CMouseGestureProvider
{
	static int s_uMinimumMouseDrag;
	virtual long _OnMouseCaptureLost(DirectUI::MouseEvent *);
	virtual long _OnMouseDown(DirectUI::MouseEvent *);
	virtual long _OnMouseDrag(DirectUI::MouseEvent *);
	virtual long _OnMouseUp(DirectUI::MouseEvent *);
	void _SendGestureDetected(GESTURE_PROVIDER_GESTURE,float,float,bool *);
	void _SendMotionDetected(float,float);
public:
	CMouseGestureProvider();
	virtual long AddClient(IGestureClient *);
	virtual long CancelActiveGesture();
	virtual long GetCallbackFilters(DuiBehaviorFilters::Flags *);
	virtual long Init(DirectUI::Value *);
	virtual long OnAttach(DirectUI::Element *);
	virtual long OnDetach(DirectUI::Element *);
	virtual long OnEvent(DirectUI::Element *,DirectUI::Event *);
	virtual long OnInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual long RemoveClient(IGestureClient *);
	virtual long SetEnabled(bool);
	virtual void DisableGestures(unsigned int);
	virtual void EnableGestures(unsigned int);
};

struct CMruDataCompare
{
	virtual long CompareItems(unsigned char const *,int,unsigned char const *,int);
};

class CMultipleValues
{
	long _EnsureIndividualValuesArray();
	static int s_ClearPropVariant(tagPROPVARIANT *,void *);
public:
	CMultipleValues();
	virtual long AppendValue(tagPROPVARIANT const &);
	virtual long DeleteValue(tagPROPVARIANT const &);
	virtual long GetCount(int *);
	virtual long GetPropertyKey(_tagpropertykey *);
	virtual long GetValue(tagPROPVARIANT *);
	virtual long GetValueAt(int,tagPROPVARIANT *);
	virtual long HasValue(tagPROPVARIANT const &,int *);
	virtual long InitValue(tagPROPVARIANT const &);
	virtual long InsertValue(int,tagPROPVARIANT const &);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetPropertyKey(_tagpropertykey const &);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CNetworkExperienceManager
{
protected:
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
public:
	CNetworkExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HideFlyout();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowFlyout(Windows::Foundation::Rect,unsigned __int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CNonLockingImmersiveMonitor
{
	CNonLockingImmersiveMonitor(IImmersiveMonitorInternal *);
	virtual long ConnectObject(IUnknown *);
	virtual long GetDisplayRect(tagRECT *);
	virtual long GetEffectiveDpi(unsigned int *,unsigned int *);
	virtual long GetFilterFlags(IMMERSIVE_MONITOR_FILTER_FLAGS *);
	virtual long GetHandle(HMONITOR__ * *);
	virtual long GetIdentity(unsigned long *);
	virtual long GetOrientation(unsigned long *);
	virtual long GetWorkArea(tagRECT *);
	virtual long IsConnected(int *);
	virtual long IsEqual(IImmersiveMonitor *,int *);
	virtual long IsImmersiveCapable(int *);
	virtual long IsImmersiveDisplayDevice(int *);
	virtual long IsPrimary(int *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	~CNonLockingImmersiveMonitor();
};

class CNotificationManager
{
	long _GetOrInitializeNotificationPlatform(IWpnPlatform * *);
	long _InitializeNotificationPlatform(IWpnPlatform * *);
	long _ResetNotificationPlatform(IWpnPlatform * *);
	static long _SwitchToShellWindow();
protected:
	virtual long v_QueryService(_GUID const &,_GUID const &,void * *);
	virtual long v_ShutdownServices(IProfferService *);
public:
	CNotificationManager();
	long RuntimeClassInitialize();
	virtual long ActivateSystemHandlerInExplorerProcess(unsigned short const *,unsigned short const *,_GUID,int,unsigned short const * const *,unsigned short const * const *,unsigned long);
	virtual long SwitchToShellWindowInExplorerProcess();
};

class CNotificationsSettingProvider
{
	long _Initialize();
	long _LoadDescription(unsigned short * *);
	long _ScheduleSync(unsigned short const *);
public:
	CNotificationsSettingProvider();
	virtual long ChangedSetting(ISetting *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetSettingsCollection(unsigned long,unsigned short const *,ISettingsCollection * *);
	virtual long GetTitle(unsigned short * *);
	virtual long IsSupported(unsigned long,unsigned short const *,int *);
};

struct CObjectWithThreadUseDetection
{
	CObjectWithThreadUseDetection(ApartmentCheckEnum);
	long InitApartmentId();
	~CObjectWithThreadUseDetection();
};

class COverrideScaling
{
	long _GetOverrideForHighScaleFactor(IApplicationView *,unsigned int *);
	long _GetOverrideForPolicy(IApplicationView *,APPLICATION_VIEW_COMPATIBILITY_POLICY,unsigned int *);
	long _PublishOverrideScaleFactor(IApplicationView *,unsigned int);
public:
	COverrideScaling();
	long RuntimeClassInitialize();
	virtual long ForceCompatPolicy(HWND__ *,IApplicationView *,APPLICATION_VIEW_COMPATIBILITY_POLICY);
	virtual long OnApplicationViewCompatibilityChanged(IApplicationView *,APPLICATION_VIEW_COMPATIBILITY_POLICY);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class CPenWorkspaceExperienceManager
{
	Concurrency::task<bool> InstallWhiteboardApp();
	bool CanLaunchPenWorkspace();
	bool IsPowerPointPresenting();
	bool IsWhiteboardAppInstalling();
	bool IsWhiteboardInstalled();
	long CloseUI();
	long DestroyExperienceView();
	long EnsureImmersiveShell();
	long GetMonitorInformation(HMONITOR__ *,tagRECT *,tagRECT *,EDGEUI_TRAYSTUCKPLACE *);
	long GetViewWindow(HWND__ * *);
	long Hide(bool);
	long HideRemember();
	long InitializeAppInstallManagerIfNeeded();
	long IsScreenLocked(bool *);
	long LaunchAppAboveLock(unsigned short const * const,unsigned short const * const);
	long LaunchAppBelowLock(unsigned short const * const,unsigned short const * const);
	long LaunchCustomSketchApp();
	long LaunchHome();
	long LaunchIndependantStickyNotesApp();
	long LaunchInkGrabApp();
	long LaunchOrTogglePenWorkspaceInternal(Windows::Internal::Shell::Experience::PenWorkspaceVerb,Windows::Foundation::Point);
	long LaunchScreenSketchApp(unsigned short const * const);
	long MoveNotesOutOfPenWorkpaceIfNeeded();
	long MoveToZBand(ZBID);
	long OnCortanaHidden(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,IInspectable *);
	long OnCortanaShown(Windows::Internal::Shell::Experience::ICortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *);
	long PlayHideAnimation();
	long PositionWindowCore();
	long ReactivateApp(unsigned short const *);
	long RegisterForActiveZBandChanged();
	long ReportPenWorkspaceAboveLock(int);
	long ReturnFocus();
	long SetBorderAccent(int);
	long SetHomePositionInApp(long,long);
	long SetZBand();
	long Show(unsigned short const *);
	long ShowExperienceView();
	long ShowInternal(unsigned short const *);
	long ShowRemember();
	long SizeWindowForHome();
	long SizeWindowForRemember(HMONITOR__ *);
	long StartDismiss();
	long UnhookMouseAndKeyboard();
	long UnregisterForActiveZBandChanged();
	static __int64 PWSManagerLowLevelHook(int,unsigned __int64,__int64);
	static __int64 PWSManagerLowLevelMouseHook(int,unsigned __int64,__int64);
	static bool IsLockScreenActive();
	static long CloseCortanaIfNeeded(HWND__ *);
	static long CloseNotesAndExperience(bool,unsigned long);
	static long GetActivationManager(IAboveLockActivationManager * *);
	tagRECT ComputeHomeWindowRect(EDGEUI_TRAYSTUCKPLACE,int,int,tagRECT,int);
	virtual long ActiveZBandChangedForMonitor(unsigned long,unsigned long,IImmersiveMonitor *,MODE_CHANGE_REASON);
	virtual long NotifyNotesAppClosing();
	virtual long NotifyNotesThumbnailChange(unsigned int,unsigned char *);
	virtual long NotifyRequestFocusChange(int *);
	virtual long OnDismiss();
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	void HandleHideFromKeyboardHook(bool,unsigned long);
public:
	CPenWorkspaceExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long BringToForeground();
	virtual long Close();
	virtual long ClosePenWorkspace();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long Execute(Windows::Foundation::IAsyncOperation<bool> * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long LaunchOrTogglePenWorkspace(Windows::Internal::Shell::Experience::PenWorkspaceVerb);
	virtual long LaunchOrTogglePenWorkspaceFromPoint(Windows::Internal::Shell::Experience::PenWorkspaceVerb,Windows::Foundation::Point);
	virtual long LaunchOrTogglePenWorkspaceHome(unsigned char);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_LaunchType(Windows::System::Private::PendingLaunchType *);
	virtual long get_RequestingViewWindowId(int *);
	virtual long get_TargetApplicationUserModelId(HSTRING__ * *);
	virtual long put_LaunchType(Windows::System::Private::PendingLaunchType);
	virtual long put_TargetApplicationUserModelId(HSTRING__ *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CPenWorkspaceExperienceManager();
};

struct CPerWindowNotificationQueue
{
	CPerWindowNotificationQueue(HWND__ *);
	virtual HWND__ * GetWindow();
	virtual bool CanRemove();
	virtual long GetNextNotification(IHM_PER_WINDOW_NOTIFICATION_QUEUE_DATA *);
	virtual long QueueNotification(IHM_PER_WINDOW_NOTIFICATION_QUEUE_DATA const *);
	virtual long StartProcessing();
	virtual unsigned long GetTimeout();
};

struct CPerfTrackCallbackBase
{
	virtual long OnBeginNavigation(IShellItem *);
	virtual long OnExplorerDisplayed(unsigned int);
	virtual long OnExplorerReady(unsigned int);
};

class CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs>
{
protected:
	long EnsureApplicationId();
	long _AddItemToBasket(unsigned short const *,IBindCtx *);
	long _EnsureSinkRegistered();
	long _RemoveFromBasket(HSTRING__ *);
	virtual long v_OnClosing(int,void * *);
	virtual ~CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs>();
public:
	CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs>(Microsoft::WRL::WeakRef);
	virtual long OnClosing(int,void * *);
	virtual long OnItemDeselected(unsigned short const *);
};

struct CPickerClosingDeferral
{
	CPickerClosingDeferral(CDeferrableRequest<Windows::Storage::Pickers::Provider::IPickerClosingDeferral> *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CPickerClosingEventArgs
{
	CPickerClosingEventArgs(Windows::Storage::Pickers::Provider::IPickerClosingOperation *,int);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_ClosingOperation(Windows::Storage::Pickers::Provider::IPickerClosingOperation * *);
	virtual long get_IsCanceled(unsigned char *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPickerClosingOperation
{
	virtual long v_OnCompleted();
public:
	CPickerClosingOperation(void *);
	virtual long GetDeferral(Windows::Storage::Pickers::Provider::IPickerClosingDeferral * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Deadline(Windows::Foundation::DateTime *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CPickerController
{
	class SHELL_VIEW_CACHE_ENTRY
	{
		int _Compare(SHELL_VIEW_CACHE_ENTRY const &);
	public:
		SHELL_VIEW_CACHE_ENTRY(IShellItem *,IShellView *);
		~SHELL_VIEW_CACHE_ENTRY();
	};

	bool _IsExtensionInExtensionVector(Windows::Foundation::Collections::IVector<HSTRING__ *> *,unsigned short const *);
	int ComputeMinAppHeight(HWND__ *);
	long _GetConditionForFileTypes(PICKER_TYPE,ICondition * *);
	long _GetResults(IObjectArray *,PICKER_RESULTS *);
	long _Initialize(PICKER_CALLER_INFORMATION const *);
	long _InitializePersistenceState(PICKER_CALLER_INFORMATION const *);
	long _SetContractID();
	void _EnableHostedAppTaskCompletionExemption(bool);
	void _ModalComplete();
protected:
	bool _DoesFileNameExtensionMatchCurrentFilter(unsigned short const *);
	int GetPickerFileTypeFilterIndexFromExtension(unsigned short const *);
	long GetThemeColorsForShellItem(IShellItem *,unsigned long *,unsigned long *);
	long _AppendExtension(unsigned short const *,unsigned short const *,unsigned short * *);
	long _GetCurrentFallbackLocation(IShellItem * *);
	long _GetFileTypes(Windows::Foundation::Collections::IVectorView<HSTRING__ *> * *);
	long _InitializePLMNotificationComponents();
	long _MapFolderToPreferredLocation(IShellItem *,IShellItem * *);
	long _RegisterForPLMNotifications();
	long _ValidateInitialLocation();
	long _ValidatePersistedLocationForMode(IShellItem *);
	virtual bool v_IsUILess();
	virtual long v_GetCorrespondingShellView(IShellItem *,_ITEMIDLIST_ABSOLUTE const *,bool *,IShellView * *);
	virtual long v_GetCurrentFilterIndex(int *);
	virtual long v_PersistState();
	virtual long v_SetPickerTitle(unsigned short const *);
	virtual long v_ShowPicker();
	virtual ~CPickerController();
	void GetDefaultAppSize(tagSIZE *);
	void GetMinAppSize(tagSIZE *);
	void _PerformPostPickerTasks(PICKER_RESULTS *,bool);
public:
	CPickerController();
	long GetDisplayedFileExtensions(_GUID const &,void * *);
	virtual long Cancel();
	virtual long DismissJumpList();
	virtual long EnterModalLoopAndGetResults(HWND__ *,PICKER_PARAMETERS const *,PICKER_CALLER_INFORMATION const *,PICKER_RESULTS *);
	virtual long GetAppExtensionList(IExtensionList * *);
	virtual long GetBackgroundColor(unsigned long *);
	virtual long GetCachedView(IShellItem *,IShellView * *);
	virtual long GetCurrentFilter(unsigned short *,int);
	virtual long GetDefaultMenuText(IShellView *,unsigned short *,int);
	virtual long GetEnumerationTimeout(unsigned long *);
	virtual long GetFilteredAndSortedAppExtensionList(IExtensionList *,EXTENSIONLIST_PINNED_OPTION,SORTCOLUMN const *,IExtensionList * *);
	virtual long GetForegroundColor(unsigned long *);
	virtual long GetPickerSortProperty(_tagpropertykey *);
	virtual long GetSearchBoxTimerDelay(unsigned int *);
	virtual long GetSettingsIdentifier(_GUID *);
	virtual long GetSortKeyAndDirection(SORTCOLUMN *);
	virtual long GetViewFlags(BROWSER_VIEW_FLAGS *);
	virtual long GetViewFlags(unsigned long *);
	virtual long IncludeObject(IShellView *,_ITEMID_CHILD const *);
	virtual long InvalidateLocation(IShellItem *);
	virtual long Notify(IShellView *,unsigned long);
	virtual long OnApplicationStateChanged(unsigned short const *,PLM_STATE_CHANGE);
	virtual long OnColumnClicked(IShellView *,int);
	virtual long OnDefaultCommand(IShellView *);
	virtual long OnPreViewCreated(IShellView *);
	virtual long OnStateChange(IShellView *,unsigned long);
	virtual long OnStateChanged(unsigned short const *,PACKAGE_EXECUTION_STATE);
	virtual long PerformInitialNavigation();
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetCachedView(IShellItem *,IShellView *);
	virtual long SetLocationTitle(unsigned short const *);
	virtual long ShouldBlockEnumeration(int *);
	virtual long SourceType(SOURCE_TYPE *);
	virtual long SummaryViewRequested();
	virtual long get_PickerEnterpriseId(HSTRING__ * *);
	virtual long get_PickerMode(PICKER_MODE *);
	virtual long get_PickerType(PICKER_TYPE *);
	virtual void BeginDeferSaveBarFocus();
	virtual void EndDeferSaveBarFocus(SAVEBAR_FOCUS_DEFERRAL_DISPOSITION);
};

struct CPickerControllerInProcServer
{
	virtual long Cancel();
	virtual long EnterModalLoopAndGetResults(HWND__ *,PICKER_PARAMETERS const *,PICKER_CALLER_INFORMATION const *,PICKER_RESULTS *);
};

class CPickerInvoker
{
protected:
	long _CreatePickerController(HWND__ *,IPickerController * *);
	long _GetPickerController(IPickerController * *);
public:
	long Cancel();
	long Show(HWND__ *,PICKER_RESULTS *);
	virtual ~CPickerInvoker();
};

struct CPickerParameters
{
	CPickerParameters();
	static long CopyTo(PICKER_PARAMETERS const &,PICKER_PARAMETERS *);
	static void IUnknown_SetT<IShellItem,IShellItem>(IShellItem * *,IShellItem *);
	static void IUnknown_SetT<IUnknown,IUnknown>(IUnknown * *,IUnknown *);
	void Clear();
	~CPickerParameters();
};

class CPickerResultWithMarshaledCallbacks
{
protected:
	long MarshalCallbacks(PICKER_RESULTS const &);
	long UnmarshalCallbacks(CCoSimpleArray<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback> > > *);
};

struct CPickerResults
{
	~CPickerResults();
};

class CPickerStatePersistence
{
	long _CreatePersistenceKey(unsigned long,HKEY__ * *);
	long _GetPersistenceKey(unsigned long,HKEY__ * *);
	long _GetStateHandle(void * *);
public:
	long GetLastLocation(IShellItem * *);
	long GetUniqueId(_GUID *);
	long Initialize(PICKER_CALLER_INFORMATION const *,unsigned short const *,unsigned short const *);
	long PersistLastLocation(IShellItem *);
	~CPickerStatePersistence();
};

class CPlayToReceiverManager
{
	struct CRegistryChangeHandler
	{
		static void RegistryChangeCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_WAIT *,long);
	};

	long _OnShellRunning();
	long _Run();
	unsigned long _GetDefaultAutoValue();
	void _InitializeRegistryMonitor();
	void _RestartRegistryMonitor();
	void _StartLauncher();
	void _StopLauncher();
protected:
	virtual long NotifyRegKeyChange();
	virtual ~CPlayToReceiverManager();
public:
	CPlayToReceiverManager();
};

class CPlaybackManager
{
	__MIDL___MIDL_itf_playbackmanagerrpc_0000_0000_0001 IamAppChanged_2_PbmInteractivityChanged(IMM_APP_CHANGED,int);
	int IsSessionIdle();
	long ComputeAggregateApplicationState(unsigned __int64,int *,int *,int *,int *);
	long GetPBMBindingHandle(void * *);
	long IsLastInstanceOfApplication(unsigned short const *,unsigned __int64,IImmersiveApplication *,int *);
	long RegisterAppCrusherNotification(IServiceProvider *);
	long RegisterApplicationNotification(IServiceProvider *);
	long RegisterSessionIdleNotification(IServiceProvider *);
	long ReportAppInteractivityChange(unsigned short const *,unsigned __int64,__MIDL___MIDL_itf_playbackmanagerrpc_0000_0000_0001);
	virtual ~CPlaybackManager();
	void UnregisterAppCrusherNotification(IServiceProvider *);
	void UnregisterApplicationNotification(IServiceProvider *);
	void UnregisterSessionIdleNotification();
public:
	CPlaybackManager();
	virtual long AppClosing(IImmersiveApplication *);
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long ApplicationChanged(unsigned short const *,unsigned __int64,HWND__ *,HOSTED_APP_CHANGED);
	virtual long ApplicationChanged(unsigned short const *,unsigned __int64,IMM_APP_CHANGED);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void OnServiceStateChanged(unsigned long);
};

class CPrivacyUIController
{
	class _ApplicationCameraState
	{
		long _AddWnfCameraStreamState(_WNF_KSCAMERA_STREAMSTATE_INFO const *);
	public:
		bool HasActiveCameraStream();
		bool IsApp(unsigned short const *);
		long Initialize(unsigned short const *,_WNF_KSCAMERA_STREAMSTATE_INFO const *);
		long UpdateCameraStreamstateInfo(_WNF_KSCAMERA_STREAMSTATE_INFO const *,bool *);
	};

	long _IsMediaBackgroundCapable(unsigned short const *,int *);
	long _ShowCameraStateWithLock();
	long _SubscribeToCameraStateChanges();
	long _SubscribeToLauncherVsibilityChanges();
	long _TryTriggerPrivacyUINotificationWithLock();
	long _UpdateAppCameraUsageWithLock(_WNF_KSCAMERA_STREAMSTATE_INFO const *,unsigned short const *,bool *);
	static long _GetAppIdAndVisibility(_WNF_KSCAMERA_STREAMSTATE_INFO const *,IImmersiveApplicationArrayService *,unsigned short * *,CPrivacyUIController::_AppUsingCameraVisibility *);
	static long s_CameraStreamStateChangeCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	static long s_LauncherVisibilityChangeCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	virtual ~CPrivacyUIController();
	void _CloseAndWaitTimer();
	void _OnCameraStateChangeWithLock(void const *,unsigned long);
	void _OnLauncherVisibilityChanged(bool);
	void _OnLockUIChangesTimeout();
	void _StartTimer();
public:
	CPrivacyUIController();
	long RuntimeClassInitialize(HWND__ *,ILockScreenAppRunningNotifier *);
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long OnDesktopVisibilityChanged(IImmersiveMonitor *,int);
	virtual long OnLockScreenAppRunning(bool);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	void Shutdown();
};

class CProjectDeviceList
{
	long _GetTilesForAddition(CCoSimpleArray<Microsoft::WRL::ComPtr<DeviceDisplayItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<DeviceDisplayItem> > > const &,DirectUI::DynamicArray<DirectUI::Element *,0> * *,DirectUI::DynamicArray<unsigned int,0> * *);
	long _GetTilesForRemoval(CCoSimpleArray<Microsoft::WRL::ComPtr<DeviceDisplayItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<DeviceDisplayItem> > > const &,DirectUI::DynamicArray<DirectUI::Element *,0> * *);
	static int _FindDisplayItemByID(CCoSimpleArray<Microsoft::WRL::ComPtr<DeviceDisplayItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<DeviceDisplayItem> > > const &,unsigned short const *);
public:
	long UpdateList(CCoSimpleArray<Microsoft::WRL::ComPtr<DeviceDisplayItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<DeviceDisplayItem> > > const &,bool);
};

struct CProjectingAppList
{
	bool GetAndClearRevertScreenMode();
	bool IsProjectedView(IImmersiveApplication *);
	bool ShouldRevertScreenMode(IImmersiveApplication *);
	long Add(IProjectionContext *);
	long FindProjectedViewOnMonitor(IImmersiveMonitor *,IImmersiveApplication * *);
	long GetAndRemove(IImmersiveApplication *,IImmersiveApplication * *);
	long GetProjectionContext(IImmersiveApplication *,IProjectionContext * *);
	long HandleClosingPresenterView(IImmersiveApplication *,IImmersiveApplicationArrayService *,IImmersiveApplication * *);
	long Remove(IImmersiveApplication *);
};

struct CProjectionContext
{
	CProjectionContext();
	virtual HMONITOR__ * GetInitialTargetMonitor();
	virtual HWND__ * GetAnchorHWND();
	virtual HWND__ * GetTargetHWND();
	virtual long GetAnchorViewPosition(IApplicationViewPosition * *);
	virtual long GetTargetViewApplication(IImmersiveApplication * *);
	virtual long SetDisconnectOnStop(unsigned short const *);
	virtual unsigned short const * GetDisconnectOnStop();
	virtual void SetAnchorHWND(HWND__ *);
	virtual void SetAnchorViewPosition(IApplicationViewPosition *);
	virtual void SetInitialTargetMonitor(HMONITOR__ *);
	virtual void SetTargetHWND(HWND__ *);
	virtual void SetTargetViewApplication(IImmersiveApplication *);
};

class CProjectionManager
{
	struct CTaskContext
	{
		void GetCallback(IAsyncCallback * *);
	};

	CProjectionManager::ScreenMode _ComputeScreenMode();
	CProjectionManager::ScreenMode _GetCachedScreenMode();
	long _CalculateGlomFlags(HWND__ *,IImmersiveApplication * *,CProjectionManager::GlomFlags *);
	long _DisconnectDisplayIfNeeded(IProjectionContext *);
	long _DoProjectionTask(PROJECTION_TASK_TYPE,HWND__ *,HWND__ *,unsigned short const *,unsigned short const *);
	long _DoStartProjecting(IImmersiveApplication *,IImmersiveApplication *,IImmersiveMonitor *,unsigned short const *,CProjectionManager::GlomFlags,CProjectionManager::GlomFlags,IProjectionContext *);
	long _DoStopProjecting(IImmersiveApplication *,IImmersiveApplication *,CProjectionManager::StopProjectionReason);
	long _DoSwapDisplays(IImmersiveApplication *,IImmersiveApplication *,IImmersiveMonitor *,CProjectionManager::GlomFlags,CProjectionManager::GlomFlags);
	long _EnterFullScreen(IImmersiveApplication *);
	long _ExitFullScreen(IImmersiveApplication *);
	long _GetFullScreenManager(IImmersiveApplication *,IFullScreenManager * *);
	long _GetMonitorFromWindow(HWND__ *,IImmersiveMonitor * *);
	long _GetPrimaryMonitor(IImmersiveMonitor * *);
	long _IsFullScreen(IImmersiveApplication *,int *);
	long _MaximizeViewOnCurrentMonitor(IImmersiveApplication *);
	long _MoveToNextMonitor(IImmersiveApplication *,IImmersiveMonitor *,bool);
	long _RestoreViewPosition(IImmersiveApplication *,IProjectionContext *);
	long _ShowFullScreenView(IApplicationView *,IImmersiveMonitor *);
	long _SwitchAppToThisMonitor(IImmersiveApplication *,IImmersiveMonitor *,bool);
	long _ValidateWindowsForProjectionTask(PROJECTION_TASK_TYPE,HWND__ *,HWND__ *,IImmersiveApplication * *,IImmersiveApplication * *,CProjectionManager::GlomFlags *,CProjectionManager::GlomFlags *);
	static HWND__ * _GetPresentedWindowInGlom(IImmersiveApplication *);
	static bool _IsWindowPresentedInGlom(HWND__ *,IImmersiveApplication *);
	static void _s_NotifyCallback(IAsyncCallback *,long);
	static void _s_NotifySecondScreenAvailability(int);
	void _ForceReconcileMonitors();
	void _OnMonitorLayoutChange();
public:
	CProjectionManager();
	long RuntimeClassInitialize();
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long DoAsyncProjectionTask(PROJECTION_TASK_TYPE,HWND__ *,HWND__ *,unsigned short const *,unsigned short const *,IAsyncCallback *);
	virtual long DuplicateMonitorAdded();
	virtual long HandleClosingProjectionApp(IImmersiveApplication *,CLOSE_PROJECTION_RESULT *);
	virtual long IsPresenterView(IImmersiveApplication *,int *);
	virtual long IsProjectedView(IImmersiveApplication *,int *);
	virtual long IsProjecting(int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnAppAddedToSwitchers(IImmersiveApplication *,APP_SWITCHER_FLAGS);
	virtual long OnAppRemovedFromSwitchers(IImmersiveApplication *,SWITCHER_REMOVAL_REASON);
	virtual long PerformDelayedInitialization();
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~CProjectionManager();
};

struct CPropVariant
{
	bool TryStealString(unsigned short * *);
	unsigned short const * GetString();
	~CPropVariant();
};

struct CPropertyStoreHelper
{
	~CPropertyStoreHelper();
};

struct CPropertyStoreHelperBase<INamedPropertyStore>
{
	long GetFailIfEmpty<unsigned short const *>(unsigned short const *,tagPROPVARIANT *);
	long GetString<unsigned short const *>(unsigned short const *,unsigned short * *);
	long GetStringVector<unsigned short const *>(unsigned short const *,unsigned short * * *,unsigned long *);
	long GetUInt32<unsigned short const *>(unsigned short const *,unsigned long *);
	long LoadFromHGlobal(void *);
	long SaveToHGlobal(void * *,unsigned long *);
};

struct CPropertyStoreHelperBase<IPropertyStore>
{
	long GetAsBoolean<_tagpropertykey>(_tagpropertykey,bool *);
	long GetAsFileTime<_tagpropertykey>(_tagpropertykey,_FILETIME *);
	long GetAsIDList<_tagpropertykey>(_tagpropertykey,_ITEMIDLIST_ABSOLUTE * *);
	long GetAsInt32<_tagpropertykey>(_tagpropertykey,long *);
	long GetAsShellItem<_tagpropertykey>(_tagpropertykey,_GUID const &,void * *);
	long GetAsString<_tagpropertykey>(_tagpropertykey,unsigned short * *);
	long GetAsUInt32<_tagpropertykey>(_tagpropertykey,unsigned long *);
	long GetAsUInt32WithDefault<_tagpropertykey>(_tagpropertykey,unsigned long,unsigned long *);
	long GetFailIfEmpty<_tagpropertykey>(_tagpropertykey,tagPROPVARIANT *);
	long GetObjectW<_tagpropertykey>(_tagpropertykey,_GUID const &,void * *);
	long GetString<_tagpropertykey>(_tagpropertykey,unsigned short * *);
	long GetStringVector<_tagpropertykey>(_tagpropertykey,unsigned short * * *,unsigned long *);
	long GetUInt32<_tagpropertykey>(_tagpropertykey,unsigned long *);
	long InitFromItem(IUnknown *,GETPROPERTYSTOREFLAGS);
	long InitFromItem(IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const *,unsigned int);
	void ClearPropertyStore();
};

class CProtocolActivatedEventArgs
{
	virtual ~CProtocolActivatedEventArgs();
public:
	CProtocolActivatedEventArgs();
	long RuntimeClassInitialize(IShellItemArray *);
	long RuntimeClassInitialize(Windows::Foundation::IUriRuntimeClass *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long MarshalObjectToPropertySet(Windows::Foundation::Collections::IPropertySet *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long get_CallerPackageFamilyName(HSTRING__ * *);
	virtual long get_Data(Windows::Foundation::Collections::IPropertySet * *);
	virtual long get_Uri(Windows::Foundation::IUriRuntimeClass * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CProximityShareOperation
{
	CProximityShareOperation();
	long InvokeProximitySharing(unsigned long,SHARING_ACTIVATION_INFO *,IPopupBase *,unsigned long *);
	long RuntimeClassInitialize(_GUID const &,IUnknown *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveThisQuickLink();
	virtual long ReportCompleted();
	virtual long ReportCompletedWithQuickLink(Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink *);
	virtual long ReportDataRetrieved();
	virtual long ReportError(HSTRING__ *);
	virtual long ReportStarted();
	virtual long ReportSubmittedBackgroundTask();
	virtual long get_Data(Windows::ApplicationModel::DataTransfer::IDataPackageView * *);
	virtual long get_QuickLinkId(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CQueryKnownGameList
{
	long GetGameEntryByIdentifier(unsigned short const *,unsigned long,KnownGameList::IGameEntry * *);
	long GetProcessArgsByPID(unsigned long,unsigned short const * *);
	long GetProcessNameByPID(unsigned long,unsigned short const * *);
	long GetProcessParentDirectoryByPID(unsigned long,unsigned short const * *);
	long GetProcessWorkingDirectoryByPID(unsigned long,unsigned short const * *);
	long GetTOCIndexByIdentifier(unsigned short const *,unsigned long *);
	long ValidateKGL(unsigned long);
public:
	CQueryKnownGameList();
	long RuntimeClassInitialize(unsigned short const *);
	virtual long GetCommonHeader(KnownGameList::CookedKGLHeaderCommon *);
	virtual long GetContentRevision(unsigned long *);
	virtual long GetGameConfigFromAppId(unsigned short const *,KnownGameList::KGLGameConfig *);
	virtual long GetGameConfigFromPID(unsigned long,KnownGameList::KGLGameConfig *);
	virtual long GetGameEntryFromAppId(unsigned short const *,KnownGameList::IGameEntry * *);
	virtual long GetGameEntryFromGameConfig(ExecutionModel::GameConfig *,KnownGameList::IGameEntry * *);
	virtual long GetGameEntryFromPID(unsigned long,KnownGameList::IGameEntry * *);
	virtual long GetRawEntriesByTOCIdx(unsigned long,unsigned char *,unsigned long *);
	virtual long GetTOCByIndex(unsigned long,KnownGameList::CookedKGLTableOfContents *);
	virtual long GetVersion2Header(KnownGameList::CookedKGLHeaderV2 *);
	virtual long GetVersion3Header(KnownGameList::CookedKGLHeaderV3 *);
	virtual long GetVersion4Header(KnownGameList::CookedKGLHeaderV4 *);
	virtual long GetVersion5Header(KnownGameList::CookedKGLHeaderV5 *);
	virtual long SetQueryHelper(KnownGameList::IQueryHelper *);
	virtual ~CQueryKnownGameList();
};

class CQuickLinkInfoPriv
{
	long _EnsurePropertyStore();
	long _GenerateThumbnailFileName();
	static long s_EnsureLocalStorePath();
	static unsigned short * s_szLocalStorePath;
public:
	long CopyFrom(CQuickLinkInfoPriv const &);
	long CopyTo(QUICK_LINK_INFO_PRIV *);
	long Deserialize(void *);
	long InitializeFromQuickLink(Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink *);
	long SaveThumbnailFile();
	long Serialize(void * *,unsigned long *);
	~CQuickLinkInfoPriv();
};

class CQuickLinkList
{
protected:
	long Add(CQuickLinkInfoPriv *);
	void _ClearList();
};

struct CQuickSharingTargetList
{
	long GetMruDataList(IMruDataList2 * *);
	long QueryTargets(ICondition *);
	long UpdateTarget(CQuickLinkInfoPriv *,UPDATETARTGET,ShareSqmQuickLinkInfo *);
};

class CQuietHoursManager
{
	bool _GetEffectiveUserPresence();
	long _PersistSetting(QuietHoursSettingType);
	static void s_QuietHoursTimerProc(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	virtual ~CQuietHoursManager();
	void _CancelTimers();
	void _EvaluatePolicy();
	void _HandleUserPresenceChange(bool);
	void _ReadRegistryValues();
	void _RefreshInternal(bool);
	void _UpdateQuietHoursWindow();
	void _UpdateTimers(QuietHoursTimerId);
public:
	CQuietHoursManager();
	long RuntimeClassInitialize();
	virtual long EnterExitQuietHoursTimeWindow(QuietHoursTimerId);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long PerformDelayedInitialization();
	virtual long QueryCallsAllowed(int *);
	virtual long QueryEntryTime(unsigned short *);
	virtual long QueryExitTime(unsigned short *);
	virtual long QueryIsPolicyControlled(int *);
	virtual long QueryPreExitLeadTime(unsigned short *);
	virtual long QueryQuietHoursEnabled(int *);
	virtual long Refresh();
	virtual long SetCallsAllowed(int);
	virtual long SetEntryTime(unsigned short);
	virtual long SetExitTime(unsigned short);
	virtual long SetPreExitLeadTime(unsigned short);
	virtual long SetQuietHoursEnabled(int);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class CRGTypeSizes
{
	static unsigned short const * const m_ucTypeSizesA;
	static unsigned short const * const m_ucTypeSizesB;
public:
	unsigned short operator[](int);
};

struct CRPCTimeout
{
	CRPCTimeout(unsigned long);
	~CRPCTimeout();
};

namespace CRVPrivate
{
	CCriticalFailureHandler cfhImmersiveShellStartup;
	bool _VerifyCriticalResult(long *,unsigned short const *,unsigned int,CCriticalFailureHandler *,unsigned __int64 *,unsigned __int64 *);
};

class CRawInputProvider
{
	bool _WantInputType(RAW_INPUT_TYPE);
	int _RegisterForUsage(unsigned short,unsigned short,unsigned long,bool);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~CRawInputProvider();
	void _OnRawMouseInput(tagRAWINPUT *);
	void _RegisterDigitizerRawInput(bool);
	void _RegisterKeyboardRawInput(bool);
	void _RegisterMouseRawInput(bool);
public:
	CRawInputProvider();
	virtual long ObservedPenInput(tagPOINT,int,void *);
	virtual long ObservedTouchInput(tagPOINT,int);
	virtual long PerformDelayedInitialization();
	virtual long RegisterForRawInput(IUnknown *,RAW_INPUT_TYPE,unsigned long *);
	virtual long UnregisterForRawInput(unsigned long);
};

class CRawTouchProcessor
{
	struct DeviceInfo
	{
		long Initialize(void *);
	};

	long _GetDeviceInfo(void *,CRawTouchProcessor::DeviceInfo * *);
	void _MapDeviceCoordinates(CRawTouchProcessor::DeviceInfo *,unsigned int,unsigned int,tagPOINT *);
public:
	CRawTouchProcessor();
	static long s_CreateInstance(_GUID const &,void * *);
	virtual long ProcessInput(tagRAWINPUT *);
};

struct CReadOnlyRandomAccessStream
{
	CReadOnlyRandomAccessStream();
	long RuntimeClassInitialize(Windows::Storage::Streams::IRandomAccessStream *);
	virtual long CloneStream(Windows::Storage::Streams::IRandomAccessStream * *);
	virtual long Close();
	virtual long FlushAsync(Windows::Foundation::IAsyncOperation<bool> * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetInputStreamAt(unsigned __int64,Windows::Storage::Streams::IInputStream * *);
	virtual long GetOutputStreamAt(unsigned __int64,Windows::Storage::Streams::IOutputStream * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReadAsync(Windows::Storage::Streams::IBuffer *,unsigned int,Windows::Storage::Streams::InputStreamOptions,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> * *);
	virtual long Seek(unsigned __int64);
	virtual long WriteAsync(Windows::Storage::Streams::IBuffer *,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> * *);
	virtual long get_CanRead(unsigned char *);
	virtual long get_CanWrite(unsigned char *);
	virtual long get_Position(unsigned __int64 *);
	virtual long get_Size(unsigned __int64 *);
	virtual long put_Size(unsigned __int64);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRearrangeBehavior
{
	bool _CheckForAutoScroll(tagPOINT const &);
	static bool s_fIsAnyOtherRearrangeActive;
	static bool s_fSettingsInitialized;
	static int s_nAutoScrollRegionWidth;
	void _RaiseUiaDragEvents(int);
protected:
	AUTO_SCROLL_REGION GetAutoScrollRegionForPoint(tagPOINT const &,int *);
	virtual Geometry::CPoint CalculateRearrangePointFromElement(DirectUI::Element *);
	virtual bool ShouldDelayInitialReflow(Geometry::CPoint const &);
	virtual void CancelRearrange();
	virtual void CompleteRearrange(Geometry::CPoint const &,bool);
	virtual void InitializeRearrange(Geometry::CPoint);
	virtual void MoveRearrange(Geometry::CPoint const &,bool);
	virtual void SendRearrangeEvent(RearrangeEvent *);
	virtual void StartRearrange(Geometry::CPoint const &,unsigned int,RearrangeFlags);
public:
	CRearrangeBehavior();
	long AddGestureProvider(IGestureProvider *);
	virtual long GetCallbackFilters(DuiBehaviorFilters::Flags *);
	virtual long Init(DirectUI::Value *);
	virtual long OnAttach(DirectUI::Element *);
	virtual long OnDetach(DirectUI::Element *);
	virtual long OnEvent(DirectUI::Element *,DirectUI::Event *);
	virtual long OnInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void GestureDetected(GESTURE_PROVIDER_GESTURE,double,double,Geometry::CPoint,bool *);
	virtual void MotionDetected(double,double);
	virtual ~CRearrangeBehavior();
	void SetEnabled(bool);
};

struct CRefCountedObject<CAutoHandle<HBITMAP__ *> >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CAutoHandle<void *> >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CCallerInformation>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CLauncherTipContextMenu::LauncherTipMenuCommand>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CLauncherTipContextMenu::LauncherTipShutdownMenuCommand>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<CMarshalInterfaceOnce<IShellItem> >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<Microsoft::WRL::Wrappers::HString>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<ShellExperienceAppidRegistration>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<Windows::Internal::String>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRefCountedObject<Windows::Internal::UI::SoftLanding::CSoftLandingNotification>
{
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRefThread
{
protected:
	virtual ~CRefThread();
public:
	CRefThread(long *,void *,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetRefCountChangeEvent(void *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRegistryChangeListener
{
	long _RestoreChangeCallback();
	static void s_CleanupCB(_TP_CALLBACK_INSTANCE *,void *,_TP_WORK *);
	static void s_RegistryChangeCB(_TP_CALLBACK_INSTANCE *,void *,_TP_WAIT *,long);
	void _CleanupCB();
public:
	CRegistryChangeListener();
	long _Initialize(HKEY__ *,unsigned short const *,REGISTRY_LISTENER_FLAGS,void (*)(void *),void *);
	virtual long Exec(_GUID const *,unsigned long,unsigned long,tagVARIANT *,tagVARIANT *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryStatus(_GUID const *,unsigned long,_tagOLECMD * const,_tagOLECMDTEXT *);
	virtual long Shutdown();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CRemoveAppointmentOperation
{
	long _CompleteAction(bool);
public:
	CRemoveAppointmentOperation();
	long RuntimeClassInitialize(unsigned short const *,Windows::Foundation::DateTime,unsigned short const *,CAppointmentHostedWindowActivationInfo *);
	long RuntimeClassInitialize(unsigned short const *,unsigned short const *,CAppointmentHostedWindowActivationInfo *);
	virtual long DismissUI();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReportCanceled();
	virtual long ReportCompleted();
	virtual long ReportError(HSTRING__ *);
	virtual long get_AppointmentId(HSTRING__ * *);
	virtual long get_InstanceStartDate(Windows::Foundation::IReference<Windows::Foundation::DateTime> * *);
	virtual long get_SourcePackageFamilyName(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CReplaceAppointmentOperation
{
	long _CompleteAction();
public:
	CReplaceAppointmentOperation();
	long RuntimeClassInitialize(unsigned short const *,Windows::ApplicationModel::Appointments::IAppointment *,Windows::Foundation::DateTime,unsigned short const *,CAppointmentHostedWindowActivationInfo *);
	long RuntimeClassInitialize(unsigned short const *,Windows::ApplicationModel::Appointments::IAppointment *,unsigned short const *,CAppointmentHostedWindowActivationInfo *);
	virtual long DismissUI();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ReportCanceled();
	virtual long ReportCompleted(HSTRING__ *);
	virtual long ReportError(HSTRING__ *);
	virtual long get_AppointmentId(HSTRING__ * *);
	virtual long get_AppointmentInformation(Windows::ApplicationModel::Appointments::IAppointment * *);
	virtual long get_InstanceStartDate(Windows::Foundation::IReference<Windows::Foundation::DateTime> * *);
	virtual long get_SourcePackageFamilyName(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CRudeWindowManager
{
	CRudeWindowManager();
	virtual long GetRudeWindow(HWND__ * *);
	virtual long IsMonitorRude(int *);
	virtual long Register(IRudeWindowManagerEvents *,unsigned long *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long Unregister(unsigned long);
	virtual void RudeWindowStateChanged(bool,HWND__ *);
	virtual ~CRudeWindowManager();
};

class CRunnableTask
{
protected:
	CRunnableTask(RUN_TASK_FLAGS);
	virtual ~CRunnableTask();
	void SetAbort(long);
public:
	virtual bool IsKeyboardNeededAndGlobalInputSwitchingOnThread();
	virtual long GetCancelEvent(void * *);
	virtual long InternalResumeRT();
	virtual long Kill(int);
	virtual long KillRT(int);
	virtual long QueryContinue();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long Resume();
	virtual long ResumeRT();
	virtual long Run();
	virtual long RunInitRT();
	virtual long Suspend();
	virtual long SuspendRT();
	virtual long TestTask();
	virtual unsigned long AddRef();
	virtual unsigned long IsRunning();
	virtual unsigned long Release();
	virtual void ActivateOriginalKeyboardLayout(HKL__ * *);
	virtual void ResetKeyboardLayout(HKL__ *);
};

struct CRunningShareSink
{
	CRunningShareSink(CSafeElementProxy *);
	virtual long OnEntryAdded(RUNNING_SHARE_INFO const *,int);
	virtual long OnEntryRemoved(_GUID const &);
	virtual long OnEntryStatusUpdated(_GUID const &,int,unsigned short const *);
};

class CRunningShareUI
{
	long _EnsureToastInfo(__MIDL___MIDL_itf_sharinganddevicesprivate_0000_0000_0001);
	long _ShowToast(__MIDL___MIDL_itf_sharinganddevicesprivate_0000_0000_0001);
public:
	CRunningShareUI();
	virtual long HandleErrorOrCrash(RUNNING_SHARE_INFO const &);
};

struct CSTARequiringThreadRefTaker
{
	CSTARequiringThreadRefTaker();
	virtual ~CSTARequiringThreadRefTaker();
};

struct CSafeElementListenerCB
{
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

class CSafeElementListenerPtr<DirectUI::Element>
{
protected:
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
public:
	long AssignListener(DirectUI::Element *,CSafeElementListenerCB *);
	void ReleaseListener();
};

class CSafeElementListenerPtr<DirectUI::TouchSlider>
{
protected:
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
public:
	long AssignListener(DirectUI::TouchSlider *,CSafeElementListenerCB *);
	void ReleaseListener();
};

class CSafeElementProxy
{
	struct InvokeHelper<<lambda_21e523d36c4340bdf9666a4cb63bc79f> >
	{
		virtual void DoInvoke();
		virtual ~InvokeHelper<<lambda_21e523d36c4340bdf9666a4cb63bc79f> >();
	};

	struct InvokeHelper<<lambda_4e239b8c8083f506d797fbe2a4d5eb3c> >
	{
		virtual void DoInvoke();
		virtual ~InvokeHelper<<lambda_4e239b8c8083f506d797fbe2a4d5eb3c> >();
	};

	struct InvokeHelper<<lambda_e1658df759b9e7b632df08ec3881aefa> >
	{
		virtual void DoInvoke();
		virtual ~InvokeHelper<<lambda_e1658df759b9e7b632df08ec3881aefa> >();
	};

	long _InitDUserContext(HDCONTEXT__ * *);
protected:
	CSafeElementProxy();
public:
	long Invoke<<lambda_21e523d36c4340bdf9666a4cb63bc79f> >(<lambda_21e523d36c4340bdf9666a4cb63bc79f> const &);
	long Invoke<<lambda_4e239b8c8083f506d797fbe2a4d5eb3c> >(<lambda_4e239b8c8083f506d797fbe2a4d5eb3c> const &);
	long Invoke<<lambda_e1658df759b9e7b632df08ec3881aefa> >(<lambda_e1658df759b9e7b632df08ec3881aefa> const &);
	long InvokeAsync<<lambda_21e523d36c4340bdf9666a4cb63bc79f> >(<lambda_21e523d36c4340bdf9666a4cb63bc79f> const &,void *);
	long InvokeAsync<<lambda_4e239b8c8083f506d797fbe2a4d5eb3c> >(<lambda_4e239b8c8083f506d797fbe2a4d5eb3c> const &,void *);
	long InvokeAsync<<lambda_e1658df759b9e7b632df08ec3881aefa> >(<lambda_e1658df759b9e7b632df08ec3881aefa> const &,void *);
	unsigned long Release();
};

struct CSafeElementPtr<AccountsSettingsUI>
{
	void Unassign();
};

struct CSafeElementPtr<DirectUI::Element>
{
	void Unassign();
	~CSafeElementPtr<DirectUI::Element>();
};

struct CSafeElementPtr<SettingsUI>
{
	void Unassign();
};

class CSafeElementPtrBase<AccountsSettingsUI>
{
protected:
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

class CSafeElementPtrBase<DirectUI::Element>
{
protected:
	long _Assign(DirectUI::Element *);
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

class CSafeElementPtrBase<SettingsUI>
{
protected:
	virtual bool OnListenedPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual void OnListenerAttach(DirectUI::Element *);
	virtual void OnListenerDetach(DirectUI::Element *);
};

class CScreenShooter
{
	static bool _IsCapturable(HWND__ *,IUnknown *);
	static long _Grab(Geometry::CRect const *,HBITMAP__ * *);
	static long _PutOnClipboard(HBITMAP__ *);
	static long _SaveToFile(HBITMAP__ *,unsigned short const *);
	static long _ShowProtectedContentMessage();
	static long _TakeScreenshot(HWND__ *,HBITMAP__ * *);
public:
	static long GetProtectedContentMessage(unsigned short * *);
	static long TakeSharableScreenshot(HWND__ *,Windows::ApplicationModel::DataTransfer::IDataProviderHandler * *);
	static long TakeSystemScreenshot(IUnknown *,unsigned short const *,bool);
	static long TakeWindowScreenshot(HWND__ *,IUnknown *,unsigned short const *,bool);
	static long TakeWindowScreenshotBlocking(IUnknown *,unsigned short const *,HWND__ *);
};

struct CScreenshotDataProviderHandler
{
	CScreenshotDataProviderHandler();
	virtual long Invoke(Windows::ApplicationModel::DataTransfer::IDataProviderRequest *);
};

struct CScreenshotStreamedFileDataRequestedHandler
{
	CScreenshotStreamedFileDataRequestedHandler();
	virtual long Invoke(Windows::Storage::Streams::IOutputStream *);
};

class CScreenshotVisualization
{
	static __int64 s_OverlayProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static long _CreateWindow(Geometry::CRect const *,HWND__ * *);
	static long _Hide(HWND__ *);
	static long _ShowWindow(HWND__ *,bool);
	static void _Paint(HWND__ *);
public:
	static long Show(Geometry::CRect const *);
};

struct CScriptAutoDetection
{
	CScriptAutoDetection();
	long HasScript(unsigned short const *,unsigned short const *);
};

class CSearchPaneBrokerWrapper
{
	virtual ~CSearchPaneBrokerWrapper();
public:
	CSearchPaneBrokerWrapper();
	virtual long AddToHistory(unsigned short const *,unsigned short const *);
	virtual long ClearHistory();
	virtual long Initialize(ISearchControlClient *);
	virtual long InitializeAppId(unsigned short const *);
	virtual long SetClientState(SEARCH_TYPEAHEAD_FLAGS,TYPEAHEAD_LOCAL_SETTINGS const *,unsigned short const *);
	virtual long SetSearchQuery(unsigned short const *,unsigned short const *,unsigned int,unsigned int,unsigned short const * const *,unsigned int);
	virtual long SetSearchQueryWithLinguisticAlternatives(unsigned short const *,unsigned short const *,IQueryWithLinguisticAlternatives *);
	virtual long UpdateSuggestions(unsigned short const *,SEARCH_TYPEAHEAD_ITEM const *,unsigned int);
};

class CSearchServicesProvider
{
protected:
	virtual long v_QueryService(_GUID const &,_GUID const &,void * *);
public:
	long RuntimeClassInitialize();
	virtual long DoesClientImplementContract();
	virtual long EnsureSearchServices();
	virtual long IsSearchPaneInitialized();
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class CSearchSuggestionsProvider
{
	long _EnsureEventShellTaskScheduler(_GUID const &,void * *);
	long _ValidateNotClosed();
	static long s_ConvertObjectArrayToSearchTypeAheadItemArrayAndInvoke<<lambda_a95fec8a84d9c093855208333b00377e> >(IObjectArray *,<lambda_a95fec8a84d9c093855208333b00377e> const &);
	static long s_ConvertObjectArrayToSearchTypeAheadItemArrayAndInvoke<<lambda_aec159daf75c9a566e43618f77172940> >(IObjectArray *,<lambda_aec159daf75c9a566e43618f77172940> const &);
	static long s_GetCallingAppIdAndPackageFamilyName(unsigned short * *,unsigned short * *);
	static long s_GetPackageFamilyNameFromAppId(unsigned short const *,unsigned short * *);
	static long s_SearchTypeAheadItemArrayFromObjectArray(IObjectArray *,SEARCH_TYPEAHEAD_ITEM * *,unsigned int *);
	static long s_SearchTypeAheadItemFromSearchTypeAheadResult(ISearchTypeAheadResult *,SEARCH_TYPEAHEAD_ITEM *);
	static long s_ValidateSuggestionStringLength(SEARCH_TYPEAHEAD_ITEM const *,unsigned int);
	virtual ~CSearchSuggestionsProvider();
public:
	CSearchSuggestionsProvider();
	long RuntimeClassInitialize();
	virtual long AddToHistory(unsigned short const *,unsigned short const *);
	virtual long AppendSuggestions(IObjectArray *);
	virtual long ClearHistory();
	virtual long Close();
	virtual long Initialize(ISearchControlClient *);
	virtual long InitializeAppId(unsigned short const *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetClientState(SEARCH_TYPEAHEAD_FLAGS,TYPEAHEAD_LOCAL_SETTINGS const *,unsigned short const *);
	virtual long SetSearchQuery(unsigned short const *,unsigned short const *,unsigned int,unsigned int,unsigned short const * const *,unsigned int);
	virtual long SetSearchQueryWithLinguisticAlternatives(unsigned short const *,unsigned short const *,IQueryWithLinguisticAlternatives *);
	virtual long SetSuggestions(IObjectArray *);
	virtual long UpdateSuggestions(unsigned short const *,SEARCH_TYPEAHEAD_ITEM const *,unsigned int);
};

struct CSearchSuggestionsService
{
	CSearchSuggestionsService();
	virtual long PerformDelayedInitialization();
	virtual long PublishServices(IServiceProvider *,IProfferService *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

struct CSessionManagerEventHandler
{
	CSessionManagerEventHandler();
	long SetCurrentMediaPlaybackDataSource(IMediaPlaybackDataSource *);
	virtual long OnChange(NowPlayingSessionManagerNotificationType,INowPlayingSessionInfo *,unsigned short const *);
	virtual long OnMediaPlaybackDataChangedEvent(IMediaPlaybackDataSource *,MediaPlaybackDataChangedEvent);
};

class CSettingItemActionWidget
{
protected:
	long Initialize(HWND__ *,unsigned int,unsigned short const *);
public:
	static long Create(HWND__ *,unsigned int,unsigned short const *,CSettingsWidget * *);
	virtual void Destroy();
};

class CSettingsFlow
{
	long _CreateControllerInUIThread();
	static long s_RunMessageLoop(void *);
protected:
	long _InitializeUIThread();
	virtual ~CSettingsFlow();
public:
	CSettingsFlow();
	virtual long PerformDelayedInitialization();
	virtual long Show(IImmersiveMonitor *,unsigned long,unsigned short *);
};

class CSettingsFlowController
{
	long _EnsureDUI();
	virtual ~CSettingsFlowController();
public:
	CSettingsFlowController();
	virtual long GetVisualState(unsigned long,SETTINGS_FLOW_VISUAL_STATE *);
	virtual long Show(IUnknown *,IImmersiveMonitor *,SETTINGS_FLOW_INVOCATION_REASON,unsigned short *);
};

class CSettingsManager
{
	Windows::FamilySafety::Internal::SearchRestriction _GetFamilySafetyLevel();
	long _InitializeFamilySafety();
	static unsigned short const * const * const c_pszRestrictedCountryCodeList;
	void _DeleteSettingsCharmStrings();
	void _LoadSafeSearchSettingForRestrictedCountries(unsigned short const *);
public:
	CSettingsManager();
	long DeleteLocalHistory();
	long DeleteOnlineHistory();
	long DownloadSettingsStrings(unsigned short const *,unsigned short const *);
	long GetCookieDeletedAndDoNotPersonalize(bool *);
	long GetLocationAwareness(bool *,SETTINGS_ENFORCEMENT_LEVEL *);
	long GetSafeSearch(SETTINGS_SAFE_SEARCH_LEVEL *,SETTINGS_ENFORCEMENT_LEVEL *);
	long GetSearchOnMeteredConnection(bool *,SETTINGS_ENFORCEMENT_LEVEL *);
	long GetSearchOnMeteredConnectionEvenWhenRoaming(bool *,SETTINGS_ENFORCEMENT_LEVEL *);
	long GetShareHistory(bool *,SETTINGS_ENFORCEMENT_LEVEL *);
	long GetUseConnectedSearch(bool *,SETTINGS_ENFORCEMENT_LEVEL *);
	long ReadSettingsStrings(unsigned short const *,unsigned short const *,unsigned short * *,unsigned short * *);
	long RuntimeClassInitialize(CConnectedSearchTransport *,unsigned short const *);
	long SaveSettingsStrings(IXmlReader *,unsigned short const *,unsigned short const *);
	long SetLocationAwareness(bool);
	long SetSafeSearch(SETTINGS_SAFE_SEARCH_LEVEL);
	long SetSearchOnMeteredConnection(bool);
	long SetSearchOnMeteredConnectionEvenWhenRoaming(bool);
	long SetShareHistory(bool);
	long SetUseConnectedSearch(bool);
};

class CSettingsWidgetFactory
{
	static void s_FreeAccountProviderSettingMembers(tagACCOUNT_PROVIDER_SETTING *,unsigned long);
	static void s_FreeAccountSettingMembers(tagACCOUNT_SETTING *,unsigned long);
public:
	static long CacheAccountsMetaData(AppInfo *,HWND__ * *);
	static long CreateSettingsButtonElement(unsigned int,unsigned short const *,DirectUI::Element * *);
	static long GetAccountCommands(AppInfo *,CSettingsWidget * * *,unsigned int *);
	static long GetAccountProviders(AppInfo *,CSettingsWidget * * *,unsigned int *,unsigned short * *);
	static long GetAccountProvidersSize(AppInfo *,unsigned int *);
	static long GetAccounts(AppInfo *,CSettingsWidget * * *,unsigned int *,unsigned short * *);
	static long GetApplicationCommands(AppInfo *,CSettingsWidget * * *,unsigned int *,bool *);
	static long GetCredentials(AppInfo *,CSettingsWidget * * *,unsigned int *);
	static void s_FreeWidgets(CSettingsWidget * * *,unsigned int *);
};

struct CShallowContainerIterator
{
	CShallowContainerIterator(IShellItem *,unsigned long);
	bool Next(IShellItem2 * *);
};

class CSharableItemSelectorFlyout
{
	long _CreateFlyoutContent();
protected:
	virtual ~CSharableItemSelectorFlyout();
public:
	CSharableItemSelectorFlyout();
	long RuntimeClassInitialize(HWND__ *,IDataTransferBroker *,IShellTaskScheduler *,ISharableItemSelectorFlyoutCallback *);
	virtual long Show(tagPOINT const &);
	virtual void Dismiss();
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
};

class CShareFlow
{
	virtual long _CreateUI(HWND__ *,IPopupWindow *,IDataTransferBroker *,DirectUI::Element * *);
	virtual long _GetIUnknown(IUnknown * *);
	virtual unsigned int _GetTitleResId();
	virtual void _FireEtwStartEvent();
	virtual void _PerfTrackStart(HWND__ *);
	virtual void _PerfTrackStop(long);
public:
	virtual long InvokeFlowFromApplication(__int64);
	virtual long StartFlow(IImmersiveMonitor *,HWND__ *);
	virtual long TaskAdded(unsigned char const *,unsigned int);
	virtual long TaskRemoved(unsigned char const *,unsigned int);
};

class CShareFlowCF
{
	virtual ~CShareFlowCF();
public:
	CShareFlowCF();
};

class CSharePickerExperienceManager
{
	long Destroy();
	long ShowPicker();
	long TryDismissShareExperience();
protected:
	virtual long OnApplicationActivatedForLaunch(CSingleViewShellExperience *,long);
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
public:
	CSharePickerExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Hide();
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long Show(Windows::ApplicationModel::Internal::DataTransfer::ISharingOperation *,Windows::Internal::Shell::Share::IShareExperienceCallbacks *,HSTRING__ *);
	virtual long ShowErrorMessage(unsigned __int64);
	virtual long get_HostAppPackageFamilyName(HSTRING__ * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CSharePickerExperienceManager();
};

struct CSharePlatformHost
{
	CSharePlatformHost();
	virtual long CreateDataTransferBroker(HWND__ *,IDataTransferBroker * *);
	virtual long CreateRunningShareUI(IRunningShareUI * *);
	virtual long CreateShareFlow(_GUID const &,void * *);
	virtual long GenerateAppLinkDataPackageFromAppId(unsigned short const *,Windows::ApplicationModel::DataTransfer::IDataPackage * *);
	virtual long GenerateAppLinkFromAppId(unsigned short const *,unsigned short * *);
	virtual long GenerateAppLogoBackgroundColorFromAppId(unsigned short const *,Windows::UI::Color *);
	virtual long GenerateAppLogoFromAppId(unsigned short const *,Windows::Storage::Streams::IRandomAccessStreamReference * *);
	virtual long GenerateAppNameFromAppId(unsigned short const *,AppNameType,unsigned short * *);
	virtual long GenerateDisplayString(ShareDisplayString,unsigned short * *);
	virtual long GeneratePackageFamilyNameFromAppId(unsigned short const *,unsigned short * *);
	virtual long GeneratePackageFullNameFromAppId(unsigned short const *,unsigned short * *);
	virtual long GenerateSourceDisplayString(SourceDisplayString,SOURCE_TYPE,unsigned short const *,HWND__ *,unsigned short * *);
	virtual long GetImmersiveAppIdFromWindow(HWND__ *,unsigned short * *,bool *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual unsigned short GetStaticIconResourceId(StaticIconResource);
	virtual void ReportError(ShareError,long);
};

class CShellChromeControls
{
	long _CleanUpTitleBarState(IImmersiveApplication *);
public:
	CShellChromeControls();
	long RuntimeClassInitialize();
	virtual long InvokeAnnotate(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokeAppBar(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokeBack(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokeCharms(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokeCloseCommand(IImmersiveApplication *,CHROME_CONTROLS_SOURCE,unsigned long);
	virtual long InvokeExitFullScreen(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokeFullScreen(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokeMinimizeCommand(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokePrint(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokeSearch(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokeSettings(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokeShare(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
	virtual long InvokeTapAndSend(IImmersiveApplication *,CHROME_CONTROLS_SOURCE);
};

class CShellExperienceDispatcher
{
	long _BufferQueuedEvent(int,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long _FlushQueuedEvents(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _GetExperienceIdForView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,HSTRING__ * *);
	long _GetPropertySetForView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Foundation::Collections::IPropertySet * *);
	long _GetViewWrapper(int,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
	long _InitializeExperienceId(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _InitializePropertySet(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _NotifyListener(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::Experience::ShellExperienceViewState,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	long _OnNavigateToView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _OnViewCreated(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _OnViewDestroyed(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	static long s_OnTimer();
	void _KillQueuedEventWatchdogTimer();
	void _StartQueuedEventWatchdogTimer();
public:
	CShellExperienceDispatcher();
	long RuntimeClassInitialize();
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Invoke();
	virtual long Invoke(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	virtual long IsRegisteredApp(HSTRING__ *,unsigned char *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long QueueEvent(int,unsigned short const *,IUnknown *);
	virtual long RegisterForShellExperienceViewEvents(HSTRING__ *,HSTRING__ *,HSTRING__ *,Windows::Internal::Shell::Experience::ShellExperienceRegistrationFlags,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::ShellExperienceDispatcher *,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *> *,EventRegistrationToken *);
	virtual long SetDefaultHandlerForAppUserModelId(EventRegistrationToken);
	virtual long ShellExperienceChanged(int);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterForShellExperienceViewEvents(EventRegistrationToken);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CShellExperienceManagerFactory
{
	void SetReady(bool);
public:
	CShellExperienceManagerFactory();
	long RuntimeClassInitialize();
	virtual long GetExperienceManager(HSTRING__ *,IInspectable * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long PerformDelayedInitialization();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long v_PublishServices(IServiceProvider *,IProfferService *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CShellExperienceViewStateChangedEventArgs
{
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Name(HSTRING__ * *);
	virtual long get_PropertySet(Windows::Foundation::Collections::IPropertySet * *);
	virtual long get_State(Windows::Internal::Shell::Experience::ShellExperienceViewState *);
	virtual long get_ViewWrapper(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CShellFeedbackService
{
	long _AddClassicAppEntry(HWND__ *,IObjectCollection *);
	long _AddImmersiveAppEntry(IImmersiveApplication *,IObjectCollection *);
	long _AddLauncherEntry(IImmersiveLauncher *,IObjectCollection *);
	long _GetFeedbackContextFromExePath(unsigned short const *,IFeedbackHubApp * *);
protected:
	virtual ~CShellFeedbackService();
public:
	long RuntimeClassInitialize();
	virtual long GetAumidFromAppListEntry(IUnknown *,unsigned short * *);
	virtual long GetInstalledLegacyApps(IObjectArray * *);
	virtual long GetRunningApps(IObjectArray * *);
};

class CShellHookNotificationHolder
{
	virtual long OnShellHookMessage(unsigned __int64,unsigned __int64,__int64);
	virtual unsigned __int64 NotifyMask();
public:
	static long CreateInstance(unsigned __int64,IImmersiveShellHookNotification *,_GUID const &,void * *);
};

class CShellItemThumbnailElement
{
	long _AsyncPopulateListIcon(IShellItem *);
	long _SetImage(HBITMAP__ *,WTS_ALPHATYPE);
public:
	long SetShellItem(IShellItem *);
	long SetTaskScheduler(IShellTaskScheduler *);
	static DirectUI::IClassInfo * Class;
	static long Register();
	static long s_ExtractIcon(IShellItem *,tagSIZE,WTS_ALPHATYPE *,HBITMAP__ * *);
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnDestroy();
	virtual ~CShellItemThumbnailElement();
};

struct CShellProtectedRegLock
{
	unsigned long Init(HKEY__ *,unsigned short const *,bool);
	void Lock();
	void Unlock();
	~CShellProtectedRegLock();
};

class CShellSnapComponent
{
	bool _IsEdgeCompletelyOccluded(Geometry::CRect const &,ISnappedWindow *,ISnappedWindow *);
	long _EnsureWindowModel(IApplicationView *);
	long _GetAppPosition(IApplicationView *,Geometry::CRect *);
	long _SendAppSnapUnsnapEvent(HWND__ *,ARRANGEMENT_COMPLETED_RESULT);
	static Microsoft::WRL::ComPtr<ITrustedComponentForegroundControl> s_spTrustedComponentForegroundControl;
	void _FireWindowSnappingEvent(IApplicationView *,WINDOW_SNAP_STATE);
public:
	CShellSnapComponent();
	long RuntimeClassInitialize();
	virtual int IsViewHalfSnappedLeft(IApplicationView *);
	virtual int IsViewHalfSnappedRight(IApplicationView *);
	virtual long GetAdjacentHalfSnappedView(IApplicationView *,IApplicationView * *);
	virtual long GetHalfSnappedViewFromToolWindow(HWND__ *,IApplicationView * *);
	virtual long GetOnscreenViewsForMonitor(IImmersiveMonitor *,IObjectArray *,IObjectArray * *);
	virtual long GetUnoccludedSnappedViewsOnMonitor(IImmersiveMonitor *,IObjectArray * *);
	virtual long InitializeTrustedComponentForegroundControl(ITrustedComponentForegroundControl *);
	virtual long InsertAfterWindow(HWND__ *,HWND__ *);
	virtual long MaximizeWindow(HWND__ *);
	virtual long OnGetWindowArrangementRects(IApplicationView *,tagPOINT,unsigned int,unsigned long,unsigned long,tagRECT *,tagRECT *);
	virtual long PerformDelayedInitialization();
	virtual long RegisterForWindowSnappingEvents(IWindowSnappingEvents *,unsigned long *);
	virtual long ShutdownTrustedComponentForegroundControl();
	virtual long SnapWindow(HWND__ *,tagRECT const *,unsigned long);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterForWindowSnappingEvents(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void OnHotkey(unsigned __int64,__int64);
	virtual void OnWindowArrangementCompleted(IApplicationView *,unsigned long);
	virtual ~CShellSnapComponent();
};

class CSimpleAppList
{
	bool _IsAppIdInEntriesToDisplay(unsigned short const *);
	long _CreatePackageElement(unsigned short const *,CSimpleUserDefaultLocaleCaseInsensitiveStringArray *,DirectUI::Element * *);
	long _InitializeElementInternal(DirectUI::Element *);
	static int _s_SortItemsProc(void const *,void const *);
	static unsigned long s_InitializeList(void *);
	static unsigned long s_InitializeListWithEntries(void *);
	void _OnChange(long,_ITEMIDLIST_ABSOLUTE const *,_ITEMIDLIST_ABSOLUTE const *);
	void _SetEmptyListMessage(bool);
public:
	CSimpleAppList();
	bool WndProc(unsigned int,unsigned __int64,__int64);
	long InitializeElement(DirectUI::Element *,REGISTERED_NCB_ENTRY * *,unsigned int,SIMPLE_APPLIST_FLAGS);
	long InitializeElement(LOCK_SCREEN_APPLICATION_CAPABILITIES,DirectUI::Element *,SIMPLE_APPLIST_FLAGS);
	static DirectUI::IClassInfo * Class;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual ~CSimpleAppList();
};

class CSimpleHashTable<DirectUI::Element *,CImmersiveOpenWithUI::ElementData *,CDefaultHashPolicy<DirectUI::Element *>,CDefaultKeyCompare<DirectUI::Element *>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,DirectUI::Element * const &,CImmersiveOpenWithUI::ElementData * const &,CImmersiveOpenWithUI::ElementData * *);
	long _EnsureSet();
	long _RehashTable(unsigned int);
	static CSimpleHashTable<DirectUI::Element *,CImmersiveOpenWithUI::ElementData *,CDefaultHashPolicy<DirectUI::Element *>,CDefaultKeyCompare<DirectUI::Element *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<DirectUI::Element *,CImmersiveOpenWithUI::ElementData *,CDefaultHashPolicy<DirectUI::Element *>,CDefaultKeyCompare<DirectUI::Element *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,DirectUI::Element * const &);
	static int s_EnumAdaptor<<lambda_41801739183a197242ae134cdb29f7f8> >(<lambda_41801739183a197242ae134cdb29f7f8> const *,DirectUI::Element * const &,CImmersiveOpenWithUI::ElementData * &);
public:
	long DeleteItem(DirectUI::Element * const &);
	long GetItem(DirectUI::Element * const &,CImmersiveOpenWithUI::ElementData * &);
};

class CSimpleHashTable<IImmersiveApplication *,CBackstackManager::CachedAppLocation,CDefaultHashPolicy<IImmersiveApplication *>,CDefaultKeyCompare<IImmersiveApplication *>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	struct HashBucket
	{
		HashBucket(IImmersiveApplication * const &,CBackstackManager::CachedAppLocation const &);
	};

	int _FreeBucket(CSimpleHashTable<IImmersiveApplication *,CBackstackManager::CachedAppLocation,CDefaultHashPolicy<IImmersiveApplication *>,CDefaultKeyCompare<IImmersiveApplication *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *);
	long _AddUpdateItem(int,IImmersiveApplication * const &,CBackstackManager::CachedAppLocation const &,CBackstackManager::CachedAppLocation *);
	long _EnsureSet();
	long _RehashTable(unsigned int);
	static CSimpleHashTable<IImmersiveApplication *,CBackstackManager::CachedAppLocation,CDefaultHashPolicy<IImmersiveApplication *>,CDefaultKeyCompare<IImmersiveApplication *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<IImmersiveApplication *,CBackstackManager::CachedAppLocation,CDefaultHashPolicy<IImmersiveApplication *>,CDefaultKeyCompare<IImmersiveApplication *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,IImmersiveApplication * const &);
public:
	long DeleteItem(IImmersiveApplication * const &);
};

class CSimpleHashTable<IImmersiveMonitor *,Microsoft::WRL::ComPtr<IAppLayout>,CDefaultHashPolicy<IImmersiveMonitor *>,CDefaultKeyCompare<IImmersiveMonitor *>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,IImmersiveMonitor * const &,Microsoft::WRL::ComPtr<IAppLayout> const &,Microsoft::WRL::ComPtr<IAppLayout> *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<IImmersiveMonitor *,Microsoft::WRL::ComPtr<IAppLayout>,CDefaultHashPolicy<IImmersiveMonitor *>,CDefaultKeyCompare<IImmersiveMonitor *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<IImmersiveMonitor *,Microsoft::WRL::ComPtr<IAppLayout>,CDefaultHashPolicy<IImmersiveMonitor *>,CDefaultKeyCompare<IImmersiveMonitor *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,IImmersiveMonitor * const &);
public:
	void RemoveAll();
};

class CSimpleHashTable<unsigned int,Geometry::CPoint,CDefaultHashPolicy<unsigned int>,CDefaultKeyCompare<unsigned int>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,unsigned int const &,Geometry::CPoint const &,Geometry::CPoint *);
	long _EnsureSet();
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned int,Geometry::CPoint,CDefaultHashPolicy<unsigned int>,CDefaultKeyCompare<unsigned int>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned int,Geometry::CPoint,CDefaultHashPolicy<unsigned int>,CDefaultKeyCompare<unsigned int>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned int const &);
public:
	long ContainsKey(unsigned int const &);
	void RemoveAll();
};

class CSimpleHashTable<unsigned long,CRawInputProvider::RawInputRegistrationInfo,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	int _FreeBucket(CSimpleHashTable<unsigned long,CRawInputProvider::RawInputRegistrationInfo,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *);
	long _AddUpdateItem(int,unsigned long const &,CRawInputProvider::RawInputRegistrationInfo const &,CRawInputProvider::RawInputRegistrationInfo *);
	long _EnsureSet();
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned long,CRawInputProvider::RawInputRegistrationInfo,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned long,CRawInputProvider::RawInputRegistrationInfo,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned long const &);
};

class CSimpleHashTable<unsigned long,Microsoft::WRL::ComPtr<ITransitionNotification>,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	int _FreeBucket(CSimpleHashTable<unsigned long,Microsoft::WRL::ComPtr<ITransitionNotification>,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *);
	long _AddUpdateItem(int,unsigned long const &,Microsoft::WRL::ComPtr<ITransitionNotification> const &,Microsoft::WRL::ComPtr<ITransitionNotification> *);
	long _EnsureSet();
	long _RehashTable(unsigned int);
	static CSimpleHashTable<unsigned long,Microsoft::WRL::ComPtr<ITransitionNotification>,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<unsigned long,Microsoft::WRL::ComPtr<ITransitionNotification>,CDefaultHashPolicy<unsigned long>,CDefaultKeyCompare<unsigned long>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,unsigned long const &);
};

class CSimpleHashTable<void *,CRawTouchProcessor::DeviceInfo *,CDefaultHashPolicy<void *>,CDefaultKeyCompare<void *>,CDefaultResizePolicy,CDefaultRehashPolicy>
{
	long _AddUpdateItem(int,void * const &,CRawTouchProcessor::DeviceInfo * const &,CRawTouchProcessor::DeviceInfo * *);
	long _RehashTable(unsigned int);
	static CSimpleHashTable<void *,CRawTouchProcessor::DeviceInfo *,CDefaultHashPolicy<void *>,CDefaultKeyCompare<void *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket & s_LookupEntry(CSimpleHashTable<void *,CRawTouchProcessor::DeviceInfo *,CDefaultHashPolicy<void *>,CDefaultKeyCompare<void *>,CDefaultResizePolicy,CDefaultRehashPolicy>::HashBucket *,unsigned int,void * const &);
public:
	void RemoveAll();
};

struct CSimplePointerArray<CPrivacyUIController::_ApplicationCameraState,CTContainer_PolicyNewMem,CSimpleArrayStandardCompareHelper<CPrivacyUIController::_ApplicationCameraState *> >
{
	long RemoveAndReleaseAt(unsigned __int64);
	void RemoveAndReleaseAll();
};

struct CSimplePointerArray<IUnknown,CTContainer_PolicyRelease<IUnknown>,CSimpleArrayStandardCompareHelper<IUnknown *> >
{
	void RemoveAndReleaseAll();
};

struct CSimplePointerArray<unsigned short,CTPolicyCoTaskMem<unsigned short>,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>
{
	long RemoveAndReleaseAt(unsigned __int64);
};

class CSimpleQueryWithLinguisticAlternatives
{
	virtual ~CSimpleQueryWithLinguisticAlternatives();
public:
	CSimpleQueryWithLinguisticAlternatives();
	long RuntimeClassInitialize(unsigned short const *,unsigned int,unsigned int,unsigned short const * const *,unsigned int);
	virtual long GenerateOrQueryFromAlternatives(unsigned int,unsigned short * *);
	virtual long GetAlternative(unsigned int,unsigned short * *);
	virtual long GetAlternativeCount(unsigned int *);
	virtual long GetQuery(unsigned short * *);
	virtual long GetQueryImeCompositionLength(unsigned int *);
	virtual long GetQueryImeCompositionStart(unsigned int *);
};

class CSingleViewShellExperience
{
	long EnsureUnboostCallback();
	long LaunchCore(Microsoft::WRL::Wrappers::HString const &,unsigned short const *);
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long OnEventQueued(Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *);
	long OnViewDestroyedBase();
	long OnViewPropertiesChangedBase(Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *);
	long OnViewVisibilityRevokedChangedBase();
	long RegisterAumid(HSTRING__ *,EventRegistrationToken *);
	long SetImportanceValues(CSingleViewShellExperience::ImportanceVectorOptions);
	long ShowView(CSingleViewShellExperience::ShowOptions);
	long ShowViewAsync(CSingleViewShellExperience::ShowOptions);
	long WaitForWindowReadyForPresentation(CSingleViewShellExperience::ShowOptions);
	void BoostDiskIo();
	void BoostPriority(CSingleViewShellExperience::PriorityBoostReason);
	void CancelWaitForWindowReadyForPresentation();
	void ResetViews();
	void StashPendingShow(CSingleViewShellExperience::ShowOptions);
	void UnboostDiskIo();
	void UnboostPriority(CSingleViewShellExperience::PriorityBoostReason);
public:
	CSingleViewShellExperience(SingleViewShellExperienceEventHandler *,CSingleViewShellExperience::Flags);
	long AddTestAumid(HSTRING__ *);
	long DestroyView();
	long Hide(CSingleViewShellExperience::HideOptions);
	long Launch();
	long NavigateView(Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	long OnSessionIdleStateChanged(int);
	long OnViewStateChanged(Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *);
	long RuntimeClassInitialize(IWeakReferenceSource *,IServiceProvider *,HSTRING__ *,HSTRING__ *);
	long SetArgs(HSTRING__ *);
	long SetPosition(tagRECT const *);
	long SetPreferentialRMSettings(CSingleViewShellExperience::ImportanceVectorOptions);
	long SetWindowBand(ZBID);
	long Show(CSingleViewShellExperience::ShowOptions);
	long ShowBorder(CSingleViewShellExperience::Border,ACCENT_STATE,unsigned long,tagRECT const *);
	long Uncloak();
	~CSingleViewShellExperience();
};

struct CSmuggledObject<CFileOpenPickerUIBase>
{
	~CSmuggledObject<CFileOpenPickerUIBase>();
};

struct CSmuggledObject<CFileOpenPickerUIInternal>
{
	~CSmuggledObject<CFileOpenPickerUIInternal>();
};

struct CSmuggledObject<CFileSavePickerUIBase>
{
	~CSmuggledObject<CFileSavePickerUIBase>();
};

struct CSmuggledObject<CFileSavePickerUIInternal>
{
	~CSmuggledObject<CFileSavePickerUIInternal>();
};

struct CSmuggledObject<CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs> >
{
	~CSmuggledObject<CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs> >();
};

class CSnapAssistControllerBase
{
protected:
	bool _IsTabletMode();
	bool _IsValidSnapAssistLocation(IImmersiveMonitor *,Geometry::CRect const &);
	bool _ShouldShowViewInSnapAssist(IApplicationView *,CCoSimpleArray<Microsoft::WRL::ComPtr<ISnappedWindow>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ISnappedWindow> > > const &,IAppLayout *);
	long _CollectItemsForSnapAssist(CCoSimpleArray<Microsoft::WRL::ComPtr<ISnappedWindow>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ISnappedWindow> > > const &,IAppLayout *,IObjectCollection * *);
	long _DetermineSnapAssistLocation(IImmersiveMonitor *,CCoSimpleArray<Microsoft::WRL::ComPtr<ISnappedWindow>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ISnappedWindow> > > const &,tagRECT *);
	long _RetrieveSnappedWindowsForMonitor(IImmersiveMonitor *,CCoSimpleArray<Microsoft::WRL::ComPtr<ISnappedWindow>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ISnappedWindow> > > *);
	long _ShowSnapAssist(IApplicationViewCollection *,Geometry::CRect const &,SNAP_ASSIST_VIEW_FLAGS);
	long _SnapAssistTriggered(Geometry::CRect *,IImmersiveMonitor *,IAppLayout *,SNAP_ASSIST_VIEW_FLAGS);
public:
	virtual long AppLayoutChanged(IImmersiveMonitor *,IAppLayoutOperation *);
	virtual long Destroy();
	virtual long Initialize(SnapAssistControllerInitParams const &);
	virtual long ItemSelected(IApplicationView *,tagRECT const *);
	virtual long TriggerSnapAssistFromAppLayout(IImmersiveMonitor *,IAppLayout *);
	virtual long TriggerSnapAssistFromApplicationArrangedNotification(IApplicationView *);
	~CSnapAssistControllerBase();
};

struct CSnapComponentTelemetry
{
	class EnumSnappedWindows
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	};

	class ProcessView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void Stop(IApplicationView *,IImmersiveMonitor *,bool,SnappedWindowOcclusionModel,bool);
	};

	class SnapAssistProcessing
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SnapAssistProcessing();
	};

	class SnapAssistTabletModeProcessing
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SnapAssistTabletModeProcessing();
	};

	class WindowArrangementHotkeyMode
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		WindowArrangementHotkeyMode TransferToCurrentThread();
		void StartActivity();
		void Stop(unsigned int);
		~WindowArrangementHotkeyMode();
	};

	class WindowArrangementHotkeyProcessing
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~WindowArrangementHotkeyProcessing();
	};

	class WindowArrangementMouseProcessingCritical
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~WindowArrangementMouseProcessingCritical();
	};

	class WindowArrangementMouseProcessingRelaxed
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~WindowArrangementMouseProcessingRelaxed();
	};

	static SnapComponentTelemetry::SnapRegion GetTelemetrySnapRegion(SnapRegion);
	static bool IsEnabled(unsigned char,unsigned __int64);
	static long SendSnapFillTypeEvent(SnapLayoutHelpers::SMART_FILL_OUTPUT const &,SnapRegion,ISnappedWindow *);
	static void WindowArrangementHotkeyIgnoredForDeviceLockdown();
	static void WindowArrangementHotkeyIgnoredForTabletMode();
	void AppSnapped_(SnapRegion,Geometry::CRect const &,Geometry::CRect const &,unsigned short const *,HWND__ *);
	void AppUnsnapped_(unsigned short const *,HWND__ *);
	void InvalidAppInEnumeration_(unsigned short const *,IApplicationViewPosition *);
	void SnapFillType_(SnapRegion,unsigned short const *,HWND__ *,SnapComponentTelemetry::SnapFillType,SnapLayoutHelpers::FillRule,SnapLayoutHelpers::FillRule,SnapLayoutHelpers::Edge,SnapLayoutHelpers::Edge);
};

class CSnappedWindow
{
	long _GetArrangementBasedViewState(ARRANGEMENT_BASED_VIEW_STATE *);
public:
	long RuntimeClassInitialize(IImmersiveMonitor *,IApplicationView *);
	static long s_CreateInstance(IImmersiveMonitor *,IApplicationView *,_GUID const &,void * *);
	virtual Geometry::CRect GetCorrectedFramePosition();
	virtual Geometry::CRect GetExtendedFramePosition();
	virtual HWND__ * GetWindow();
	virtual Microsoft::WRL::ComPtr<IApplicationView> GetAppView();
	virtual Microsoft::WRL::ComPtr<IImmersiveMonitor> GetMonitor();
	virtual SnapRegion GetSnapRegion();
	virtual bool CanMaximize();
	virtual bool CanMinimize();
	virtual bool CanResize();
	virtual bool IsEqualByView(IApplicationView *);
	virtual bool IsMaximizedWindow();
	virtual bool IsMinimizedWindow();
};

class CSnappedWindowModel
{
	long _EnumSnappedWindows(SnappedWindowOcclusionModel);
public:
	CSnappedWindowModel();
	long RuntimeClassInitialize(IApplicationView *,IApplicationViewCollection *,IImmersiveMonitorManager *,SnappedWindowOcclusionModel);
	virtual long GetSnappedWindowsOnMonitor(IImmersiveMonitor *,SnappedWindowFlags,CCoSimpleArray<Microsoft::WRL::ComPtr<ISnappedWindow>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ISnappedWindow> > > *);
};

class CSoftLandingExperienceManager
{
	bool IsKeyStrokeConsideredForLightDismiss(unsigned int);
	long OnNewNotification();
	long OnRawInput();
	long OnTargetedMessage(CSoftLandingExperienceManager::TargetedMessageKind,unsigned short);
	long PositionView(CSoftLandingExperienceManager::SoftLandingViewState);
	long RegisterForRawInput(bool);
	long ReportAnchoredUIClickthroughIfApplicable(tagPOINT);
	long SetZBand();
	long Show();
	long SubscribeToNewNotificationWnf();
	long SubscribeToPublishedContentWnf();
	long TransitionToState(CSoftLandingExperienceManager::SoftLandingViewState);
	static long PostTargetedMessage(void *,CSoftLandingExperienceManager::TargetedMessageKind,unsigned short);
	static long ShellReadyCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	void SetFocusToAnchorUI();
protected:
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
public:
	CSoftLandingExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long FocusHotkeyInvoked();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long ObservedKeyDown(unsigned int);
	virtual long ObservedKeyUp(unsigned int);
	virtual long ObservedMouseButtonDown(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
	virtual long ObservedMouseButtonUp(tagPOINT,RAW_INPUT_MOUSE_BUTTON);
	virtual long ObservedMouseMove(tagPOINT,unsigned short,tagPOINT);
	virtual long ObservedPenInput(tagPOINT,int,void *);
	virtual long ObservedTouchInput(tagPOINT,int);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual ~CSoftLandingExperienceManager();
};

struct CSoftLandingQueryEntry
{
	CSoftLandingQueryEntry();
	virtual bool IsEmpty();
	virtual bool IsRootElement();
	virtual bool ShouldIgnoreCase();
	virtual bool UseRegExForId();
	virtual long GetElementAutomationId(unsigned short const * *);
	virtual long GetElementClassName(unsigned short const * *);
	virtual long GetElementName(unsigned short const * *);
	virtual long GetElementType(int *);
};

class CSoftLandingUiaSearch
{
	long _FindChildElement(IUIAutomation *,IUIAutomationElement *,IObjectCollection *,unsigned int,IUIAutomationElement * *);
	long _FindRootElement(IUIAutomation *,IObjectCollection *,IUIAutomationElement * *,HWND__ * *);
	long _FindWindowElement(IUIAutomation *,IObjectCollection *,HWND__ *,IUIAutomationElement * *);
public:
	CSoftLandingUiaSearch();
	virtual long FindElementFromQuery(IUIAutomation *,IObjectCollection *,IUIAutomationElement * *,HWND__ * *);
};

class CSoftLandingXmlParser
{
	long _UIAControlStringToValue(unsigned short const *,int *);
public:
	virtual long BuildQueryList(IStream *,IObjectCollection *);
};

class CSolidColorThumbnail
{
	long _CreateVisual(unsigned long,tagSIZE const &);
public:
	long RuntimeClassInitialize(unsigned long,tagSIZE const &,IDCompThumbnailParent *,ISwitchThumbnailDeviceManager *,ISwitchThumbnailFactory *);
	virtual long Freeze();
	virtual long SetEnable3D(bool);
};

struct CSourceViewSizePreference
{
	CSourceViewSizePreference();
	long RuntimeClassInitialize(APPLICATION_VIEW_SIZE_PREFERENCE,unsigned short const *,HWND__ *,IUnknown *);
	virtual long GetAppUserModelId(unsigned short * *);
	virtual long GetSourceViewSizePreference(APPLICATION_VIEW_SIZE_PREFERENCE *);
	virtual long GetSourceViewToPosition(HWND__ * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
};

struct CSplashScreenElement
{
	static DirectUI::IClassInfo * Class;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual tagSIZE _SelfLayoutUpdateDesiredSize(int,int,DirectUI::Surface *);
	virtual void OnDestroy();
	virtual void _SelfLayoutDoLayout(int,int);
};

struct CSplashScreenEvents
{
	CSplashScreenEvents();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Initialize();
	virtual long NotifySplashScreenDismissed();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ResetSplashScreenDismissed();
	virtual long SetRect(tagRECT const *);
	virtual long add_Dismissed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_ImageLocation(Windows::Foundation::Rect *);
	virtual long remove_Dismissed(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CSplashScreenTimer
{
	__int64 _WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	long _CreateMessageWindow();
	long _Dismiss();
	long _MaxLifetimeTimerFired();
	long _ShowImage();
	long _ShowTimerFired();
	long _TryToDismiss();
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	CSplashScreenTimer();
	virtual long AppReady();
	virtual long ApplaunchAnimationCompleted();
	virtual long ApplaunchStarted(SPLASHSCREEN_FLAGS);
	virtual long CancelTimers();
	virtual long ForceShow();
	virtual long Initialize(ISplashScreen *,ISplashScreenUI *);
	virtual long SetSynchronizationName(unsigned short const *);
};

class CSplashScreenUIController
{
	long _LoadImageAsync();
	long _SetAccessibleName(unsigned short const *);
	long _UpdateImage();
	static long s_CreateSharedBitmap(HBITMAP__ *,ISharedBitmap * *);
public:
	CSplashScreenUIController(HWND__ *,SPLASHSCREEN_IMAGE_TYPE,std::shared_ptr<SplashScreen::CSplashScreenConfiguration> &);
	long Init(bool);
	virtual long AppNameLoaded(unsigned short const *,int);
	virtual long GetCurrentImageLocationInScreenCoordinates(tagRECT *);
	virtual long GetElement(DirectUI::Element * *);
	virtual long GetOrientationPreference(SPLASHSCREEN_ORIENTATION_PREFERENCE *);
	virtual long ImageLoaded(SPLASHSCREEN_IMAGE_TYPE,ISharedBitmap *);
	virtual long LoadImageW();
	virtual long SetImageSize(SPLASHSCREEN_IMAGE_TYPE);
};

class CStorageLibraryUI
{
	long OnModalExperienceEvent(Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *);
	long _AddDialogButtons();
	long _ShowDialog(HWND__ *,IShellItem *,IShellItem *,bool *);
	static long s_InitializePickerParams(IShellItem *,CPickerParameters *);
public:
	CStorageLibraryUI();
	virtual long CancelAddFolder();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long Initialize(IShellItem *,unsigned long);
	virtual long PickFolder(unsigned int,HSTRING__ *,HSTRING__ *,Windows::Storage::IStorageFolder * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RequestAddFolderAsync(Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder *> * *);
	virtual long RequestRemoveFolderAsync(Windows::Storage::IStorageFolder *,Windows::Foundation::IAsyncOperation<bool> * *);
	virtual long ShowAddFolderSuggestions(Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageFolder *> *,unsigned int,Windows::Internal::AddFolderSuggestion::AddFolderSuggestionLibraryType,HSTRING__ *,Windows::Internal::AddFolderSuggestion::AddFolderSuggestionCompleteType *,Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageFolder *> * *);
	virtual long add_DefinitionChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::StorageLibrary *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_Folders(Windows::Foundation::Collections::IObservableVector<Windows::Storage::StorageFolder *> * *);
	virtual long get_SaveFolder(Windows::Storage::IStorageFolder * *);
	virtual long remove_DefinitionChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CStoreHandler
{
	CStoreHandler(IAssociationElement *);
	long SetHintAppInfo(unsigned short const *,unsigned short const *);
	virtual long CreateInvoker(IDataObject *,IAssocHandlerInvoker * *);
	virtual long GetIconLocation(unsigned short * *,int *);
	virtual long GetName(unsigned short * *);
	virtual long GetUIName(unsigned short * *);
	virtual long Invoke(IDataObject *);
	virtual long IsRecommended();
	virtual long MakeDefault(unsigned short const *);
};

struct CStringCompare
{
	static int CompareKey(unsigned short const * const,unsigned short const * const);
};

class CSwitchThumbnailDeviceManager
{
	long _EnsureDevice();
	long _LoadPVLInfo();
	long _LoadPVLInfoForTarget(DCompThumbnailAnimation,int,int);
	long _ValidateDevice();
	void _DestroyDevice();
	void _UpdateAnimationTime();
public:
	CSwitchThumbnailDeviceManager();
	virtual AnimationsOffBehavior GetAnimationsOffBehavior();
	virtual ID2D1Device * GetD2DDevice();
	virtual IDCompositionDesktopDevicePartner * GetDevice();
	virtual IUIAnimationManager2 * GetWAM();
	virtual IUIAnimationTransitionLibrary2 * GetTransitionLibrary();
	virtual Windows::UI::Composition::ICompositor * GetCompositor();
	virtual _GUID GetAnimationTelemetryGuid();
	virtual bool AnimationsEnabled();
	virtual bool ShouldSlowAnimations();
	virtual double GetAnimationTime();
	virtual long CreateFactoryForWindow(HWND__ *,DCOMPOSITION_BITMAP_INTERPOLATION_MODE,ISwitchThumbnailFactory * *);
	virtual long GetAnimationData(DCompThumbnailAnimation,TA_TRANSFORM_TYPE,TA_TRANSFORM * *,TA_TIMINGFUNCTION * *);
	virtual long WaitForCommitCompletion();
	virtual void AddThumbnailToUnregister(void *);
	virtual void BeginUpdates(_GUID const &);
	virtual void CommitIfNotBatched(bool);
	virtual void EndUpdates(bool);
	virtual void OnFactoryDestroyed();
	virtual void PreCacheDCompDevice();
	virtual void PreCacheDCompDeviceWithFlags(ThumbnailDeviceManagerFlags);
	virtual void SetAnimationsOffBehavior(AnimationsOffBehavior);
	virtual ~CSwitchThumbnailDeviceManager();
};

class CSwitchThumbnailFactory
{
	long _GetParentVisual(IDCompThumbnail *,IDCompThumbnailParent * *);
	long _LoadThemeData();
public:
	CSwitchThumbnailFactory();
	long RuntimeClassInitialize(HWND__ *,DCOMPOSITION_BITMAP_INTERPOLATION_MODE,ISwitchThumbnailDeviceManager *);
	virtual long CreateCustomPaintThumbnail(IDCompThumbnail *,tagSIZE,CustomPaintThumbnailFlags,_GUID const &,void * *);
	virtual long CreateDesktopThumbnail(IDCompThumbnail *,tagSIZE *,tagRECT,_GUID const &,void * *);
	virtual long CreateEmptyThumbnail(IDCompThumbnail *,tagSIZE,_GUID const &,void * *);
	virtual long CreateShellTabThumbnail(IDCompThumbnail *,Windows::Internal::ComposableShell::Tabs::IShellTab *,Windows::Internal::ComposableShell::Tabs::ITabController *,tagSIZE const *,tagRECT *,_GUID const &,void * *);
	virtual long CreateSolidColorThumbnail(IDCompThumbnail *,unsigned long,tagSIZE,_GUID const &,void * *);
	virtual long CreateThumbnail(IDCompThumbnail *,HWND__ *,unsigned long,tagSIZE const *,tagRECT *,_GUID const &,void * *);
	virtual long CreateVirtualDesktopThumbnail(IDCompThumbnail *,tagSIZE const *,tagRECT,_GUID const &,void * *);
	virtual long GetRootVisual(IDCompThumbnailParent * *);
	virtual long WaitForCommitCompletion();
	virtual void BeginUpdates(_GUID const &);
	virtual void CommitIfNotBatched(bool);
	virtual void EndUpdates(bool);
	virtual void GetBorderData(int *,unsigned long *,unsigned char *);
	virtual void SetBorderData(int,unsigned long,unsigned char);
};

class CSwitcherNotificationService
{
	static APP_SWITCHER_FLAGS s_GetSwitcherFlags(IImmersiveApplication *);
	static APP_SWITCHER_FLAGS s_RemoveSwitcherFlags(IImmersiveApplication *,APP_SWITCHER_FLAGS);
	static void s_AddSwitcherFlag(IImmersiveApplication *,APP_SWITCHER_FLAGS);
	void _OnAppRemovedFromSwitchers(IImmersiveApplication *,SWITCHER_REMOVAL_REASON);
public:
	CSwitcherNotificationService();
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long OnAppAddedToSwitcher(IImmersiveApplication *,APP_SWITCHER_FLAGS);
	virtual long OnAppRemovedFromSwitcher(IImmersiveApplication *,APP_SWITCHER_FLAGS,SWITCHER_REMOVAL_REASON);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
};

class CSyncIAMEventHandler
{
	void _HandleActivationForMonitor(IImmersiveMonitor *,IImmersiveApplicationManagerSafeForSyncCallouts *,IImmersiveApplication *,unsigned long,MODE_CHANGE_REASON,ACTIVATION_CALLOUT_FLAGS);
	void _ScheduleActiveZbidChangedNotification(ZBID,IImmersiveMonitor *,MODE_CHANGE_REASON);
public:
	CSyncIAMEventHandler();
	long RuntimeClassInitialize();
	virtual long HandleActivation(IObjectArray *,IImmersiveApplicationManagerSafeForSyncCallouts *,IImmersiveApplication *,unsigned long,MODE_CHANGE_REASON,ACTIVATION_CALLOUT_FLAGS);
	virtual long Register(IActiveZBandNotificationForMonitor *,unsigned long *);
	virtual long Unregister(unsigned long);
	virtual ~CSyncIAMEventHandler();
};

class CSyncSettingsProvider
{
	long CreateSettingForBackgroundSync(unsigned short const *,DeviceAccessConsentValue,IBooleanSetting * *);
	long Initialize(unsigned long);
	long InitializeProcessInformation(unsigned long);
	long UpdateDeviceConsent(DeviceAccessConsentValue);
	static long GetDescriptionForSync(unsigned short * *);
public:
	virtual long ChangedSetting(ISetting *);
	virtual long GetDescription(unsigned short * *);
	virtual long GetSettingsCollection(unsigned long,unsigned short const *,ISettingsCollection * *);
	virtual long GetTitle(unsigned short * *);
	virtual long IsSupported(unsigned long,unsigned short const *,int *);
	virtual ~CSyncSettingsProvider();
};

class CSystemToastPrompt
{
	long _CreateWindowToTakeForeground();
	long _SanitizeStringForXml(HSTRING__ *,HSTRING__ * *);
	long _SetBannerOnly(Windows::Data::Xml::Dom::IXmlDocument *);
	static unsigned long s_WindowToTakeForegroundThread(void *);
	void _RevokeToastFromGitWithLock();
public:
	CSystemToastPrompt();
	virtual long AddAudioElement(Windows::Data::Xml::Dom::IXmlDocument *,HSTRING__ *);
	virtual long GetTemplateContent(unsigned int,Windows::Data::Xml::Dom::IXmlDocument * *);
	virtual long Hide();
	virtual long Invoke(Windows::UI::Notifications::IToastNotification *,IInspectable *);
	virtual long Invoke(Windows::UI::Notifications::IToastNotification *,Windows::UI::Notifications::IToastDismissedEventArgs *);
	virtual long Invoke(Windows::UI::Notifications::IToastNotification *,Windows::UI::Notifications::IToastFailedEventArgs *);
	virtual long SetLaunchArguments(Windows::Data::Xml::Dom::IXmlDocument *,HSTRING__ *);
	virtual long SetLongDuration(Windows::Data::Xml::Dom::IXmlDocument *);
	virtual long SetTemplateText(Windows::Data::Xml::Dom::IXmlDocument *,unsigned int,HSTRING__ *);
	virtual long ShowToastPrompt(HSTRING__ *,HSTRING__ *,SystemToastPromptResult *);
	virtual long ShowToastPrompt(Windows::Data::Xml::Dom::IXmlDocument *,HSTRING__ *,SystemToastPromptResult *);
	virtual ~CSystemToastPrompt();
};

class CTCoAllocPolicy
{
	static unsigned __int64 _CoTaskMemSize(void *);
public:
	static long Alloc(void *,unsigned long,unsigned __int64,void * *);
	static long Realloc(void *,unsigned long,void *,unsigned __int64,void * *);
};

struct CTContainer_PolicyLocalMem
{
	static int DestroyMem(void *);
};

struct CTLocalAllocPolicy
{
	static long Alloc(void *,unsigned long,unsigned __int64,void * *);
	static long Realloc(void *,unsigned long,void *,unsigned __int64,void * *);
};

struct CTSimpleArray<AvailableMiracastDeviceEnumerator::EnumeratedMiracastDeviceInfo,4294967294,CTPolicyLocalMem<AvailableMiracastDeviceEnumerator::EnumeratedMiracastDeviceInfo>,CSimpleArrayStandardCompareHelper<AvailableMiracastDeviceEnumerator::EnumeratedMiracastDeviceInfo>,CSimpleArrayStandardMergeHelper<AvailableMiracastDeviceEnumerator::EnumeratedMiracastDeviceInfo> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<BUCKET *,4294967294,CTPolicyCoTaskMem<BUCKET *>,CSimpleArrayStandardCompareHelper<BUCKET *>,CSimpleArrayStandardMergeHelper<BUCKET *> >
{
	long SortEx<CBucketComparator>(CBucketComparator const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void _MergeSort<CBucketComparator>(CBucketComparator const &,unsigned __int64,unsigned __int64);
	void _MergeThem<CBucketComparator>(CBucketComparator const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CAppInstanceView::PickerItemSelected,4294967294,CTPolicyCoTaskMem<CAppInstanceView::PickerItemSelected>,CSimpleArrayStandardCompareHelper<CAppInstanceView::PickerItemSelected>,CSimpleArrayStandardMergeHelper<CAppInstanceView::PickerItemSelected> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CImmersiveShellComponent::ISC_SERVICE,4294967294,CTPolicyCoTaskMem<CImmersiveShellComponent::ISC_SERVICE>,CSimpleArrayStandardCompareHelper<CImmersiveShellComponent::ISC_SERVICE>,CSimpleArrayStandardMergeHelper<CImmersiveShellComponent::ISC_SERVICE> >
{
	void RemoveAll();
};

struct CTSimpleArray<CImmersiveWindowMessageService::HotkeyRegistration,4294967294,CTPolicyCoTaskMem<CImmersiveWindowMessageService::HotkeyRegistration>,CSimpleArrayStandardCompareHelper<CImmersiveWindowMessageService::HotkeyRegistration>,CSimpleArrayStandardMergeHelper<CImmersiveWindowMessageService::HotkeyRegistration> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CImmersiveWindowMessageService::PowerSettingRegistration,4294967294,CTPolicyCoTaskMem<CImmersiveWindowMessageService::PowerSettingRegistration>,CSimpleArrayStandardCompareHelper<CImmersiveWindowMessageService::PowerSettingRegistration>,CSimpleArrayStandardMergeHelper<CImmersiveWindowMessageService::PowerSettingRegistration> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CImmersiveWindowMessageService::WTSSessionNotifyRegistration,4294967294,CTPolicyCoTaskMem<CImmersiveWindowMessageService::WTSSessionNotifyRegistration>,CSimpleArrayStandardCompareHelper<CImmersiveWindowMessageService::WTSSessionNotifyRegistration>,CSimpleArrayStandardMergeHelper<CImmersiveWindowMessageService::WTSSessionNotifyRegistration> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CKeyboardOcclusionMitigation::DisplacedWindow,4294967294,CTPolicyLocalMem<CKeyboardOcclusionMitigation::DisplacedWindow>,CSimpleArrayStandardCompareHelper<CKeyboardOcclusionMitigation::DisplacedWindow>,CSimpleArrayStandardMergeHelper<CKeyboardOcclusionMitigation::DisplacedWindow> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CMarshaledInterface,4294967294,CTPolicyCoTaskMem<CMarshaledInterface>,CSimpleArrayStandardCompareHelper<CMarshaledInterface>,CSimpleArrayStandardMergeHelper<CMarshaledInterface> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CPickerController::SHELL_VIEW_CACHE_ENTRY,4294967294,CTPolicyCoTaskMem<CPickerController::SHELL_VIEW_CACHE_ENTRY>,CSimpleArrayStandardCompareHelper<CPickerController::SHELL_VIEW_CACHE_ENTRY>,CSimpleArrayStandardMergeHelper<CPickerController::SHELL_VIEW_CACHE_ENTRY> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CPrivacyUIController::_ApplicationCameraState *,4294967294,CTPolicyCoTaskMem<CPrivacyUIController::_ApplicationCameraState *>,CSimpleArrayStandardCompareHelper<CPrivacyUIController::_ApplicationCameraState *>,CSimpleArrayStandardMergeHelper<CPrivacyUIController::_ApplicationCameraState *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CQuickLinkInfoPriv *,4294967294,CTPolicyLocalMem<CQuickLinkInfoPriv *>,CSimpleArrayStandardCompareHelper<CQuickLinkInfoPriv *>,CSimpleArrayStandardMergeHelper<CQuickLinkInfoPriv *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CSwitchThumbnailDeviceManager::AnimationPVLInfo *,4294967294,CTPolicyCoTaskMem<CSwitchThumbnailDeviceManager::AnimationPVLInfo *>,CSimpleArrayStandardCompareHelper<CSwitchThumbnailDeviceManager::AnimationPVLInfo *>,CSimpleArrayStandardMergeHelper<CSwitchThumbnailDeviceManager::AnimationPVLInfo *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<CWaitForApplications::WaitInfo,4294967294,CTPolicyCoTaskMem<CWaitForApplications::WaitInfo>,CSimpleArrayStandardCompareHelper<CWaitForApplications::WaitInfo>,CSimpleArrayStandardMergeHelper<CWaitForApplications::WaitInfo> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<CapabilityUtils::CapabilityDisplayData *,4294967294,CTPolicyCoTaskMem<CapabilityUtils::CapabilityDisplayData *>,CSimpleArrayStandardCompareHelper<CapabilityUtils::CapabilityDisplayData *>,CSimpleArrayStandardMergeHelper<CapabilityUtils::CapabilityDisplayData *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	long _InsertAt<CapabilityUtils::CapabilityDisplayData * const &>(CapabilityUtils::CapabilityDisplayData * const &,unsigned __int64);
};

struct CTSimpleArray<ContextMenuRenderingData *,4294967294,CTPolicyCoTaskMem<ContextMenuRenderingData *>,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *>,CSimpleArrayStandardMergeHelper<ContextMenuRenderingData *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<DirectUI::TouchScrollViewer *,4294967294,CTPolicyCoTaskMem<DirectUI::TouchScrollViewer *>,CSimpleArrayStandardCompareHelper<DirectUI::TouchScrollViewer *>,CSimpleArrayStandardMergeHelper<DirectUI::TouchScrollViewer *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<ERROR_QUEUE_ENTRY *,4294967294,CTPolicyCoTaskMem<ERROR_QUEUE_ENTRY *>,CSimpleArrayStandardCompareHelper<ERROR_QUEUE_ENTRY *>,CSimpleArrayStandardMergeHelper<ERROR_QUEUE_ENTRY *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	long _InsertAt<ERROR_QUEUE_ENTRY * const &>(ERROR_QUEUE_ENTRY * const &,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<EXTENSION_STATE,4294967294,CTPolicyCoTaskMem<EXTENSION_STATE>,CSimpleArrayStandardCompareHelper<EXTENSION_STATE>,CSimpleArrayStandardMergeHelper<EXTENSION_STATE> >
{
	long SortEx<CExtensionStateManager::PinnedOrderCompare>(CExtensionStateManager::PinnedOrderCompare const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	long _InsertAt<EXTENSION_STATE const &>(EXTENSION_STATE const &,unsigned __int64);
	void RemoveAll();
	void _InternalSetAtIndex<EXTENSION_STATE const &>(unsigned __int64,EXTENSION_STATE const &);
	void _MergeSort<CExtensionStateManager::PinnedOrderCompare>(CExtensionStateManager::PinnedOrderCompare const &,unsigned __int64,unsigned __int64);
	void _MergeThem<CExtensionStateManager::PinnedOrderCompare>(CExtensionStateManager::PinnedOrderCompare const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<HWND__ *,4294967294,CTPolicyCoTaskMem<HWND__ *>,CSimpleArrayStandardCompareHelper<HWND__ *>,CSimpleArrayStandardMergeHelper<HWND__ *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<ICondition *,4294967294,CTPolicyCoTaskMem<ICondition *>,CSimpleArrayStandardCompareHelper<ICondition *>,CSimpleArrayStandardMergeHelper<ICondition *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<IGestureClient *,4294967294,CTPolicyCoTaskMem<IGestureClient *>,CSimpleArrayStandardCompareHelper<IGestureClient *>,CSimpleArrayStandardMergeHelper<IGestureClient *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<IGestureProvider *,4294967294,CTPolicyCoTaskMem<IGestureProvider *>,CSimpleArrayStandardCompareHelper<IGestureProvider *>,CSimpleArrayStandardMergeHelper<IGestureProvider *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<IHM_NOTIFICATION_DATA,4294967294,CTPolicyCoTaskMem<IHM_NOTIFICATION_DATA>,CSimpleArrayStandardCompareHelper<IHM_NOTIFICATION_DATA>,CSimpleArrayStandardMergeHelper<IHM_NOTIFICATION_DATA> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<IHM_PER_WINDOW_NOTIFICATION_QUEUE_DATA,4294967294,CTPolicyCoTaskMem<IHM_PER_WINDOW_NOTIFICATION_QUEUE_DATA>,CSimpleArrayStandardCompareHelper<IHM_PER_WINDOW_NOTIFICATION_QUEUE_DATA>,CSimpleArrayStandardMergeHelper<IHM_PER_WINDOW_NOTIFICATION_QUEUE_DATA> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<IImmersiveMonitorNotificationSync *,4294967294,CTPolicyCoTaskMem<IImmersiveMonitorNotificationSync *>,CSimpleArrayStandardCompareHelper<IImmersiveMonitorNotificationSync *>,CSimpleArrayStandardMergeHelper<IImmersiveMonitorNotificationSync *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<IImmersiveSessionIdleNotification *,4294967294,CTPolicyCoTaskMem<IImmersiveSessionIdleNotification *>,CSimpleArrayStandardCompareHelper<IImmersiveSessionIdleNotification *>,CSimpleArrayStandardMergeHelper<IImmersiveSessionIdleNotification *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<IImmersiveShellHookNotificationInternal *,4294967294,CTPolicyCoTaskMem<IImmersiveShellHookNotificationInternal *>,CSimpleArrayStandardCompareHelper<IImmersiveShellHookNotificationInternal *>,CSimpleArrayStandardMergeHelper<IImmersiveShellHookNotificationInternal *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<IImmersiveWindowMessageNotificationInternal *,4294967294,CTPolicyCoTaskMem<IImmersiveWindowMessageNotificationInternal *>,CSimpleArrayStandardCompareHelper<IImmersiveWindowMessageNotificationInternal *>,CSimpleArrayStandardMergeHelper<IImmersiveWindowMessageNotificationInternal *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<INowPlayingSession *,4294967294,CTPolicyCoTaskMem<INowPlayingSession *>,CSimpleArrayStandardCompareHelper<INowPlayingSession *>,CSimpleArrayStandardMergeHelper<INowPlayingSession *> >
{
	void RemoveAll();
};

struct CTSimpleArray<IUnknown *,4294967294,CTPolicyCoTaskMem<IUnknown *>,CSimpleArrayStandardCompareHelper<IUnknown *>,CSimpleArrayStandardMergeHelper<IUnknown *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<LAYOUT_QUEUE_ENTRY *,4294967294,CTPolicyCoTaskMem<LAYOUT_QUEUE_ENTRY *>,CSimpleArrayStandardCompareHelper<LAYOUT_QUEUE_ENTRY *>,CSimpleArrayStandardMergeHelper<LAYOUT_QUEUE_ENTRY *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CHistoryItem>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CHistoryItem> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CHistoryItem> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CHistoryItem> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CHostedFlow>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CHostedFlow> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CHostedFlow> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CHostedFlow> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipMenuCommand> >,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipMenuCommand> > >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipMenuCommand> > >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipMenuCommand> > > >
{
	long _Add<Microsoft::WRL::ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipMenuCommand> > const &>(Microsoft::WRL::ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipMenuCommand> > const &,unsigned __int64 *);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipShutdownMenuCommand> >,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipShutdownMenuCommand> > >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipShutdownMenuCommand> > >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipShutdownMenuCommand> > > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CTemplateDownloadTask>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CTemplateDownloadTask> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CTemplateDownloadTask> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CTemplateDownloadTask> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CTemplateDownloader::CTemplateCacheEntry>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CTemplateDownloader::CTemplateCacheEntry> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CTemplateDownloader::CTemplateCacheEntry> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CTemplateDownloader::CTemplateCacheEntry> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<CTemplateFile>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<CTemplateFile> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CTemplateFile> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<CTemplateFile> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<DeviceDisplayItem>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<DeviceDisplayItem> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<DeviceDisplayItem> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<DeviceDisplayItem> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<DeviceDisplayItem>,4294967294,CTPolicyLocalMem<Microsoft::WRL::ComPtr<DeviceDisplayItem> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<DeviceDisplayItem> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<DeviceDisplayItem> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IAppListItem>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IAppListItem> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAppListItem> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IAppListItem> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IApplicationView>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IApplicationView> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IApplicationView> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IApplicationView> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IBackstackApp>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IBackstackApp> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IBackstackApp> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IBackstackApp> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void _MergeSort<CBackstackAppSort>(CBackstackAppSort const &,unsigned __int64,unsigned __int64);
	void _MergeThem<CBackstackAppSort>(CBackstackAppSort const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IBandWorkArea>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IBandWorkArea> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IBandWorkArea> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IBandWorkArea> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IContractRegistrationInfo>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IContractRegistrationInfo> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IContractRegistrationInfo> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IContractRegistrationInfo> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IEdgeUiInput>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IEdgeUiInput> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IEdgeUiInput> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IEdgeUiInput> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IEdgeUiManagerInternal>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IEdgeUiManagerInternal> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IEdgeUiManagerInternal> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IEdgeUiManagerInternal> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IExtensionListItem>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IExtensionListItem> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IExtensionListItem> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IExtensionListItem> > >
{
	long SortEx<CExtensionList::ExtensionCompare>(CExtensionList::ExtensionCompare const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
	void _MergeSort<CExtensionList::ExtensionCompare>(CExtensionList::ExtensionCompare const &,unsigned __int64,unsigned __int64);
	void _MergeThem<CExtensionList::ExtensionCompare>(CExtensionList::ExtensionCompare const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IGITCookieObject>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IGITCookieObject> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IGITCookieObject> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IGITCookieObject> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IPerWindowNotificationQueue>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IPerWindowNotificationQueue> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPerWindowNotificationQueue> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IPerWindowNotificationQueue> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IProjectionContext>,4294967294,CTPolicyLocalMem<Microsoft::WRL::ComPtr<IProjectionContext> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IProjectionContext> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IProjectionContext> > >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IShellView>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IShellView> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IShellView> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IShellView> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<ISnappedWindow>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<ISnappedWindow> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ISnappedWindow> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<ISnappedWindow> > >
{
	long _Add<Microsoft::WRL::ComPtr<ISnappedWindow> const &>(Microsoft::WRL::ComPtr<ISnappedWindow> const &,unsigned __int64 *);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<IUnknown>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<IUnknown> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IUnknown> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<IUnknown> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<Microsoft::WRL::ComPtr<Windows::Foundation::IExtensionRegistration>,4294967294,CTPolicyCoTaskMem<Microsoft::WRL::ComPtr<Windows::Foundation::IExtensionRegistration> >,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<Windows::Foundation::IExtensionRegistration> >,CSimpleArrayStandardMergeHelper<Microsoft::WRL::ComPtr<Windows::Foundation::IExtensionRegistration> > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<PENDING_DISPLAY_CHANGE_NOTIFICATION,4294967294,CTPolicyCoTaskMem<PENDING_DISPLAY_CHANGE_NOTIFICATION>,CSimpleArrayStandardCompareHelper<PENDING_DISPLAY_CHANGE_NOTIFICATION>,CSimpleArrayStandardMergeHelper<PENDING_DISPLAY_CHANGE_NOTIFICATION> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<StackEntry,4294967294,CTPolicyCoTaskMem<StackEntry>,CSimpleArrayStandardCompareHelper<StackEntry>,CSimpleArrayStandardMergeHelper<StackEntry> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	long _InsertAt<StackEntry const &>(StackEntry const &,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,4294967294,CTPolicyCoTaskMem<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,CSimpleArrayStandardCompareHelper<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,CSimpleArrayStandardMergeHelper<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,4294967294,CTPolicyCoTaskMem<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,CSimpleArrayStandardCompareHelper<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,CSimpleArrayStandardMergeHelper<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> >,4294967294,CTPolicyCoTaskMem<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >,CSimpleArrayStandardCompareHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >,CSimpleArrayStandardMergeHelper<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<XLS_QUEUE_ENTRY *,4294967294,CTPolicyCoTaskMem<XLS_QUEUE_ENTRY *>,CSimpleArrayStandardCompareHelper<XLS_QUEUE_ENTRY *>,CSimpleArrayStandardMergeHelper<XLS_QUEUE_ENTRY *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<_WNF_KSCAMERA_STREAMSTATE_INFO *,4294967294,CTPolicyCoTaskMem<_WNF_KSCAMERA_STREAMSTATE_INFO *>,CSimpleArrayStandardCompareHelper<_WNF_KSCAMERA_STREAMSTATE_INFO *>,CSimpleArrayStandardMergeHelper<_WNF_KSCAMERA_STREAMSTATE_INFO *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<bool,4294967294,CTPolicyCoTaskMem<bool>,CSimpleArrayStandardCompareHelper<bool>,CSimpleArrayStandardMergeHelper<bool> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<unsigned int,4294967294,CTPolicyCoTaskMem<unsigned int>,CSimpleArrayStandardCompareHelper<unsigned int>,CSimpleArrayStandardMergeHelper<unsigned int> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<unsigned long,4294967294,CTPolicyCoTaskMem<unsigned long>,CSimpleArrayStandardCompareHelper<unsigned long>,CSimpleArrayStandardMergeHelper<unsigned long> >
{
	long RemoveAt(unsigned __int64);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<unsigned short *,4294967294,CTPolicyCoTaskMem<unsigned short *>,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper,CSimpleArrayStandardMergeHelper<unsigned short *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<unsigned short *,4294967294,CTPolicyCoTaskMem<unsigned short *>,CSimpleArrayStandardCompareHelper<unsigned short *>,CSimpleArrayStandardMergeHelper<unsigned short *> >
{
	long SortEx<CExtensionList::PWSTRCompare>(CExtensionList::PWSTRCompare const &);
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
	void _MergeSort<CExtensionList::PWSTRCompare>(CExtensionList::PWSTRCompare const &,unsigned __int64,unsigned __int64);
	void _MergeThem<CExtensionList::PWSTRCompare>(CExtensionList::PWSTRCompare const &,unsigned __int64,unsigned __int64);
};

struct CTSimpleArray<unsigned short *,4294967294,CTPolicyCoTaskMem<unsigned short *>,CSimpleArrayUserDefaultLocaleCaseInsensitiveCompareHelper,CSimpleArrayStandardMergeHelper<unsigned short *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	long _InsertAt<unsigned short * const &>(unsigned short * const &,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleArray<void *,4294967294,CTPolicyCoTaskMem<void *>,CSimpleArrayStandardCompareHelper<void *>,CSimpleArrayStandardMergeHelper<void *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	void RemoveAll();
};

struct CTSimpleFixedArray<CPickerController::SHELL_VIEW_CACHE_ENTRY,CSimpleArrayStandardCompareHelper<CPickerController::SHELL_VIEW_CACHE_ENTRY> >
{
	long FindEx<CSimpleArrayStandardCompareHelper<CPickerController::SHELL_VIEW_CACHE_ENTRY> >(CSimpleArrayStandardCompareHelper<CPickerController::SHELL_VIEW_CACHE_ENTRY> const &,CPickerController::SHELL_VIEW_CACHE_ENTRY const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<CapabilityUtils::CapabilityDisplayData *,CSimpleArrayStandardCompareHelper<CapabilityUtils::CapabilityDisplayData *> >
{
	long BinarySearchEx<CapabilityUtils::CapabilityDisplayDataCompareHelper>(CapabilityUtils::CapabilityDisplayDataCompareHelper const &,CapabilityUtils::CapabilityDisplayData * const &,unsigned __int64 *);
	long FindEx<CapabilityUtils::CapabilityDisplayStringCompareHelper>(CapabilityUtils::CapabilityDisplayStringCompareHelper const &,CapabilityUtils::CapabilityDisplayData * const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<CHistoryItem>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CHistoryItem> > >
{
	long BinarySearchEx<CCompareHistoryItems>(CCompareHistoryItems const &,Microsoft::WRL::ComPtr<CHistoryItem> const &,unsigned __int64 *);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<CTemplateDownloader::CTemplateCacheEntry>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CTemplateDownloader::CTemplateCacheEntry> > >
{
	long BinarySearchEx<CTemplateDownloader::CCompareTemplateCacheEntries>(CTemplateDownloader::CCompareTemplateCacheEntries const &,Microsoft::WRL::ComPtr<CTemplateDownloader::CTemplateCacheEntry> const &,unsigned __int64 *);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<CTemplateFile>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<CTemplateFile> > >
{
	long BinarySearchEx<CCompareTemplatesByTime>(CCompareTemplatesByTime const &,Microsoft::WRL::ComPtr<CTemplateFile> const &,unsigned __int64 *);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IEdgeUiInput>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IEdgeUiInput> > >
{
	long FindEx<CEdgeUiInputFinder>(CEdgeUiInputFinder const &,Microsoft::WRL::ComPtr<IEdgeUiInput> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IPerWindowNotificationQueue>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IPerWindowNotificationQueue> > >
{
	long FindEx<CPerWindowNotificationQueueFinder>(CPerWindowNotificationQueueFinder const &,Microsoft::WRL::ComPtr<IPerWindowNotificationQueue> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<IProjectionContext>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IProjectionContext> > >
{
	long FindEx<CImmersiveAppFinderByAppId>(CImmersiveAppFinderByAppId const &,Microsoft::WRL::ComPtr<IProjectionContext> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CImmersiveAppFinderByApplication>(CImmersiveAppFinderByApplication const &,Microsoft::WRL::ComPtr<IProjectionContext> const &,unsigned __int64 *,unsigned __int64);
	long FindEx<CImmersiveAppFinderByMonitor>(CImmersiveAppFinderByMonitor const &,Microsoft::WRL::ComPtr<IProjectionContext> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<Microsoft::WRL::ComPtr<ISnappedWindow>,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ISnappedWindow> > >
{
	long FindEx<CSnappedWindowFinder>(CSnappedWindowFinder const &,Microsoft::WRL::ComPtr<ISnappedWindow> const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<unsigned int,CSimpleArrayStandardCompareHelper<unsigned int> >
{
	long FindEx<CSimpleArrayStandardCompareHelper<unsigned int> >(CSimpleArrayStandardCompareHelper<unsigned int> const &,unsigned int const &,unsigned __int64 *,unsigned __int64);
};

struct CTSimpleFixedArray<unsigned short *,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>
{
	long BinarySearchEx<CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>(CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper const &,unsigned short * const &,unsigned __int64 *);
};

struct CTSimpleFixedArray<unsigned short *,CSimpleArrayStandardCompareHelper<unsigned short *> >
{
	long BinarySearchEx<CExtensionList::PWSTRCompare>(CExtensionList::PWSTRCompare const &,unsigned short * const &,unsigned __int64 *);
};

struct CTSimpleFixedArray<unsigned short *,CSimpleArrayUserDefaultLocaleCaseInsensitiveCompareHelper>
{
	long BinarySearchEx<CSimpleArrayUserDefaultLocaleCaseInsensitiveCompareHelper>(CSimpleArrayUserDefaultLocaleCaseInsensitiveCompareHelper const &,unsigned short * const &,unsigned __int64 *);
};

class CTargetFileRequest
{
	virtual long v_OnCompleted();
public:
	CTargetFileRequest(Microsoft::WRL::WeakRef);
	virtual long GetDeferral(Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_TargetFile(Windows::Storage::IStorageFile * *);
	virtual long put_TargetFile(Windows::Storage::IStorageFile *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTargetFileRequestDeferral
{
	CTargetFileRequestDeferral(CDeferrableRequest<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> *);
};

struct CTargetFileRequestedEventArgs
{
	CTargetFileRequestedEventArgs(Windows::Storage::Pickers::Provider::ITargetFileRequest *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Request(Windows::Storage::Pickers::Provider::ITargetFileRequest * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTargetViewSizePreference
{
	virtual long GetTargetViewSizePreference(APPLICATION_VIEW_SIZE_PREFERENCE *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
};

class CTaskbarInvoker
{
	bool _IsPointOverTaskbarUI(tagPOINT);
protected:
	virtual int v_IsSystemUiVisible();
	virtual long v_HitCornerOrEdge(tagPOINT,bool);
	virtual long v_Invoke(bool,tagPOINT,RAW_INPUT_TYPE);
	virtual long v_StartSecondarySwipe(tagPOINT);
	virtual void v_Initialize();
	virtual void v_ObservedMouseButtonDown(tagPOINT);
	virtual void v_ObservedMouseMove(tagPOINT);
	virtual void v_ObservedTouchInput(tagPOINT);
public:
	CTaskbarInvoker();
};

class CTemplateDownloadTask
{
	virtual ~CTemplateDownloadTask();
public:
	CTemplateDownloadTask();
	bool Contains(unsigned short const *);
	long AddTemplate(unsigned short const *);
	long PerformDownload(IStream * *);
	long RuntimeClassInitialize(CConnectedSearchTransport *,unsigned int,bool,unsigned short const *,IConnectedSearchLogger *);
};

class CTemplateDownloader
{
	struct CTemplateCacheEntry
	{
		CTemplateCacheEntry();
	};

	long _AddAvailableTemplatesFromDirectory(unsigned short const *,unsigned short const *,bool);
	long _QueueDownload(CTemplateDownloadTask *);
	virtual ~CTemplateDownloader();
	void _CleanupDownloadedTemplates();
	void _LoadLocalUpdateableTemplates();
	void _RemoveDownloadTask(unsigned int);
public:
	CTemplateDownloader();
	bool IsDownloadingTemplates();
	long AddTemplateToInMemoryCache(unsigned short const *,unsigned char const *,unsigned __int64);
	long DownloadMissingTemplates(unsigned short const * const *,unsigned __int64,bool,unsigned short const *);
	long DownloadTemplate(unsigned short const *,unsigned long,unsigned short const *);
	long IsTemplateContentValid(unsigned short const *,int *);
	long LoadTemplateContent(unsigned short const *,unsigned short * *);
	long MarkTemplateContentValid(unsigned short const *);
	long RemoveTemplate(unsigned short const *);
	long RuntimeClassInitialize(CConnectedSearchTransport *);
	void CopyLocallyUpdateableFile(unsigned short const *);
};

class CTestExperienceManager
{
protected:
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
public:
	CTestExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CThreadRefTaker
{
	virtual ~CThreadRefTaker();
};

struct CThreadUseDetector
{
	~CThreadUseDetector();
};

class CTileActivateBehavior
{
	TILE_ACTIVATION_TYPE _TileActivationTypeFromInputModifiers(unsigned int);
	void _FireTileActivatedEvent(TILE_ACTIVATION_TYPE,DirectUI::TouchButton::ClickDevice,tagPOINT const *);
public:
	CTileActivateBehavior(ACTIVATION_TRIGGER_FLAGS);
	virtual long GetCallbackFilters(DuiBehaviorFilters::Flags *);
	virtual long Init(DirectUI::Value *);
	virtual long OnAttach(DirectUI::Element *);
	virtual long OnDetach(DirectUI::Element *);
	virtual long OnEvent(DirectUI::Element *,DirectUI::Event *);
	virtual long OnInput(DirectUI::Element *,DirectUI::InputEvent *);
};

class CTimeZoneInformationCache
{
	int _CacheNotExpired();
	int _LookupCachedTZI(unsigned short,_TIME_ZONE_INFORMATION *);
	void _AddTZIToCache(unsigned short,_TIME_ZONE_INFORMATION const &);
public:
	int GetTZIForYear(unsigned short,_TIME_ZONE_INFORMATION *);
};

struct CTimeZoneInformationCache_InitOnDemand
{
	_TIME_ZONE_INFORMATION * GetTZIForYear(unsigned short,_TIME_ZONE_INFORMATION *);
};

class CTitleBarInvoker
{
	bool _IsPointOverTitleBarUI(tagPOINT);
protected:
	virtual long v_CancelDrag();
	virtual long v_CommitDrag(tagPOINT);
	virtual long v_ContinueDrag(tagPOINT);
	virtual long v_HitCornerOrEdge(tagPOINT,bool);
	virtual long v_Invoke(bool,tagPOINT,RAW_INPUT_TYPE);
	virtual long v_StartDrag(tagPOINT);
	virtual long v_StartSecondarySwipe(tagPOINT);
	virtual void v_Initialize();
	virtual void v_ObservedMouseButtonDown(tagPOINT);
	virtual void v_ObservedMouseMove(tagPOINT);
	virtual void v_ObservedTouchInput(tagPOINT);
public:
	CTitleBarInvoker();
};

struct CTouchViewPerfTrackCallback
{
	CTouchViewPerfTrackCallback(PICKER_TYPE,PICKER_MODE);
	virtual long OnExplorerDisplayed(unsigned int);
	virtual long OnExplorerReady(unsigned int);
	void EnsureConsistentNavigationEventState();
};

class CTransportControlsElement
{
	long _BindBitmapToElement(DirectUI::Element *,ISharedBitmap *);
	long _InitializePrevNextButtons();
	long _InitializeSwitcherButton();
	long _LoadBitmapFromStreamDetectCodec(IStream *,ISharedBitmap * *);
	long _LoadButtonGlyph(DirectUI::TouchButton *,_TcButtonState);
	long _SetFormattedAccName(DirectUI::Element *,unsigned long,unsigned short const *);
	long _SetRawAccName(DirectUI::Element *,unsigned long);
	void _SetFontProperty(DirectUI::Element *);
public:
	int GetShowingElementWidth();
	long Initialize(HWND__ *,bool);
	long LoadElements(CDUIHost *);
	long OnHideFlyout();
	long OnMediaAppCommand(unsigned long);
	long OnShowFlyout(unsigned long);
	long SetAlbumArtBackground(unsigned long);
	long SetAlbumArtImage(IStream *);
	long SetArtistName(unsigned short const *);
	long SetEnabledNextButton(bool);
	long SetEnabledPreviousButton(bool);
	long SetPlayPauseButtonState(bool,bool);
	long SetStreamName(unsigned short const *);
	virtual void OnListenedPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	void OnEvent(DirectUI::Event *,bool *);
	void OnThemeChanged();
	void SetBorder(int,int,int,int,int,unsigned long);
	void SetVisible(bool);
	void _OnMouseEvent(DirectUI::MouseEvent *);
	void _OnPointerEvent(DirectUI::PointerEvent *);
	void _SetElementLayout(DirectUI::Element *,bool);
	void _SwitchAppIfTargetHit(DirectUI::InputEvent *);
	~CTransportControlsElement();
};

class CTransportControlsManager
{
	long _AdviseVisibility(unsigned short const *,MediaPlaybackCapabilities);
	long _BindAlbumArt();
	long _BindAppDetails();
	long _BindAppDetailsWorker(unsigned short const *);
	long _BindNameAndArtist();
	long _BindStreamState();
	long _BindStreamState(MediaPlaybackCapabilities);
	long _BindSubscriptions(MediaPlaybackCapabilities);
	long _BindSwitcher();
	long _GetAppUserModelId(unsigned short * *);
	long _GetCapabilities(MediaPlaybackCapabilities *);
	long _GetCapabilitiesFromDataSource(IMediaPlaybackDataSource *,MediaPlaybackCapabilities *);
	long _GetCurrentSessionDataSource(IMediaPlaybackDataSource * *,bool *);
	long _GetMediaPlayBackCommands(unsigned long,MediaPlaybackCommands *);
	long _GetModernAppDetails(unsigned short const *,unsigned short * *,unsigned short * *);
	long _GetNextCurrentSession(INowPlayingSession * *);
	long _GetSessionIndex(INowPlayingSessionInfo *,INowPlayingSession * *,unsigned long *,unsigned __int64 *);
	long _GetSessionWindow(HWND__ * *);
	long _QueryInitialState(bool);
	long _RefreshAll(bool);
	long _SanitizeAppLogoImage(unsigned short const *,tagSIZE,unsigned int);
	long _SanitizeImageStream(IStream *,tagSIZE,unsigned int);
	long _SendAppCommand(MediaPlaybackCommands);
	long _UseDefaultTitleIfNessesary(unsigned short const *,unsigned short const *);
	static _GUID const TOID_MTC_TaskScheduler;
	static tagSIZE s_GetScaledSize(tagSIZE const &,tagSIZE const &);
	static void s_ButtonStateRefreshCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	unsigned long _GetShowReasonBucket();
public:
	CTransportControlsManager(CTransportControlsElement *,HWND__ *);
	long HandleMediaAppCommand(unsigned long);
	long OnNext();
	long OnNextApp();
	long OnOtherMediaCommand(MediaPlaybackCommands);
	long OnPlayPause(MediaPlaybackCommands);
	long OnPrevious();
	long RegisterWithSessionManager();
	long SwitchToCurrentMediaApp();
	long UnregisterWithSessionManager();
	void OnMessage(unsigned int,unsigned __int64,__int64);
	~CTransportControlsManager();
};

class CTrayBatteryFlyoutExperienceManager
{
protected:
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
public:
	CTrayBatteryFlyoutExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HideFlyout();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowFlyout(Windows::Foundation::Rect);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTrayClockFlyoutExperienceManager
{
	CTrayClockFlyoutExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HideFlyout();
	virtual long IsVisible(unsigned char *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowFlyout(Windows::Foundation::Rect);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CTrayMtcUvcFlyoutExperienceManager
{
	CTrayMtcUvcFlyoutExperienceManager();
	long RuntimeClassInitialize(IServiceProvider *);
	virtual long Close();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long HideFlyout();
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowFlyout(Windows::Foundation::Rect);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTypedBindableObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,1,0>
{
protected:
	virtual ~CTypedBindableObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,1,0>();
public:
	CTypedBindableObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,1,0>();
	virtual long Append(IInspectable *);
	virtual long Append(Windows::ApplicationModel::Contacts::Internal::IContactActionControl *);
	virtual long Clear();
	virtual long First(Windows::Foundation::Collections::IIterator<IInspectable *> * *);
	virtual long First(Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> * *);
	virtual long GetAt(unsigned int,IInspectable * *);
	virtual long GetAt(unsigned int,Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetMany(unsigned int,unsigned int,IInspectable * *,unsigned int *);
	virtual long GetMany(unsigned int,unsigned int,Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *,unsigned int *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetView(Windows::Foundation::Collections::IVectorView<IInspectable *> * *);
	virtual long GetView(Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> * *);
	virtual long IndexOf(IInspectable *,unsigned int *,unsigned char *);
	virtual long IndexOf(Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,unsigned int *,unsigned char *);
	virtual long InsertAt(unsigned int,IInspectable *);
	virtual long InsertAt(unsigned int,Windows::ApplicationModel::Contacts::Internal::IContactActionControl *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveAt(unsigned int);
	virtual long RemoveAtEnd();
	virtual long ReplaceAll(unsigned int,IInspectable * *);
	virtual long ReplaceAll(unsigned int,Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *);
	virtual long SetAt(unsigned int,IInspectable *);
	virtual long SetAt(unsigned int,Windows::ApplicationModel::Contacts::Internal::IContactActionControl *);
	virtual long add_VectorChanged(Windows::Foundation::Collections::VectorChangedEventHandler<IInspectable *> *,EventRegistrationToken *);
	virtual long add_VectorChanged(Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> *,EventRegistrationToken *);
	virtual long add_VectorChanged(Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler *,EventRegistrationToken *);
	virtual long get_Size(unsigned int *);
	virtual long remove_VectorChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CTypedBindableObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,1,0>
{
protected:
	virtual ~CTypedBindableObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,1,0>();
public:
	CTypedBindableObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,1,0>();
	virtual long Append(IInspectable *);
	virtual long Append(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *);
	virtual long Clear();
	virtual long First(Windows::Foundation::Collections::IIterator<IInspectable *> * *);
	virtual long First(Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> * *);
	virtual long GetAt(unsigned int,IInspectable * *);
	virtual long GetAt(unsigned int,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetMany(unsigned int,unsigned int,IInspectable * *,unsigned int *);
	virtual long GetMany(unsigned int,unsigned int,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *,unsigned int *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetView(Windows::Foundation::Collections::IVectorView<IInspectable *> * *);
	virtual long GetView(Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> * *);
	virtual long IndexOf(IInspectable *,unsigned int *,unsigned char *);
	virtual long IndexOf(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,unsigned int *,unsigned char *);
	virtual long InsertAt(unsigned int,IInspectable *);
	virtual long InsertAt(unsigned int,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RemoveAt(unsigned int);
	virtual long RemoveAtEnd();
	virtual long ReplaceAll(unsigned int,IInspectable * *);
	virtual long ReplaceAll(unsigned int,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *);
	virtual long SetAt(unsigned int,IInspectable *);
	virtual long SetAt(unsigned int,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *);
	virtual long add_VectorChanged(Windows::Foundation::Collections::VectorChangedEventHandler<IInspectable *> *,EventRegistrationToken *);
	virtual long add_VectorChanged(Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> *,EventRegistrationToken *);
	virtual long add_VectorChanged(Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler *,EventRegistrationToken *);
	virtual long get_Size(unsigned int *);
	virtual long remove_VectorChanged(EventRegistrationToken);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CUndockContext
{
	static long CreateInstance(IAccessibilityDockingServiceCallback *,UNDOCK_REASON,CUndockContext * *);
};

struct CUpdateFilesAsyncVectorViewResult
{
	long Get(Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> * *);
	long Initialize(PICKER_RESULTS const &);
	void Close();
};

struct CUpdateFilesResult
{
	CUpdateFilesResult();
	long RuntimeClassInitialize(IFileUpdateResult *,IStreamedFileDataRequestedCallback *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetOriginalShellItem(IShellItem * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetStreamedFileCallback(IStreamedFileDataRequestedCallback * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long GetUpdatedShellItem(IShellItem * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_UpdateResult(Windows::Storage::Provider::FileUpdateStatus *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CUpdateFilesResultArray
{
	CUpdateFilesResultArray(IObjectArray *,CCoSimpleArray<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IStreamedFileDataRequestedCallback> > > *);
	virtual long First(Windows::Foundation::Collections::IIterator<Windows::Storage::Pickers::UpdateFilesResult *> * *);
	virtual long GetAt(unsigned int,Windows::Storage::Pickers::IUpdateFilesResult * *);
	virtual long IndexOf(Windows::Storage::Pickers::IUpdateFilesResult *,unsigned int *,unsigned char *);
	virtual long get_Size(unsigned int *);
};

class CUploadQueueManager
{
	bool _CanUploadNow();
	long _AddErrorEventToXml(ERROR_QUEUE_ENTRY const *,Windows::Data::Xml::Dom::IXmlDocument *);
	long _AddLayoutEventToEntry(LAYOUT_QUEUE_ENTRY *,unsigned short const *,UI_LAYOUT_ACTION,bool);
	long _EnqueueRegularXLSEvent(unsigned short const *,unsigned short const *,XMLSerializer::XLSEventType);
	long _FlushAndUploadErrors();
	long _FlushAndUploadUserEvents();
	long _FlushDefaultXLSQueueToXml(Windows::Data::Xml::Dom::IXmlDocument *,unsigned int *);
	long _FlushLayoutQueueToXml(Windows::Data::Xml::Dom::IXmlDocument *,unsigned int *);
	long _ReQueueAndRetry(CCoSimpleArray<ERROR_QUEUE_ENTRY *,4294967294,CSimpleArrayStandardCompareHelper<ERROR_QUEUE_ENTRY *> > *);
	long _ScheduleRetryTimer();
	static long _TimerWnfCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	virtual ~CUploadQueueManager();
	void _CleanDefaultUserQueue(CCoSimpleArray<XLS_QUEUE_ENTRY *,4294967294,CSimpleArrayStandardCompareHelper<XLS_QUEUE_ENTRY *> > *);
	void _CleanErrorQueue(CCoSimpleArray<ERROR_QUEUE_ENTRY *,4294967294,CSimpleArrayStandardCompareHelper<ERROR_QUEUE_ENTRY *> > *);
	void _CleanLayoutQueue(CCoSimpleArray<LAYOUT_QUEUE_ENTRY *,4294967294,CSimpleArrayStandardCompareHelper<LAYOUT_QUEUE_ENTRY *> > *);
	void _ClearTimer(bool);
public:
	CUploadQueueManager();
	long EnqueueErrorEvent(unsigned short const *,unsigned __int64,long,unsigned short const *,unsigned short const *,unsigned short const *,ConnectedSearchErrorType,Windows::Data::Json::IJsonArray *);
	long EnqueueGroupLayoutEvent(unsigned short const *,unsigned short const *,UI_LAYOUT_ACTION,IObjectArray *);
	long EnqueueLayoutEvent(unsigned short const *,unsigned short const *,UI_LAYOUT_ACTION,bool);
	long EnqueueSuggestionLayoutEvent(unsigned short const *,unsigned short const *,unsigned short const *,UI_LAYOUT_ACTION,IObjectArray *);
	long RuntimeClassInitialize(CJsonSerializer *,CConnectedSearchTransport *,unsigned long);
	long SetBatchingMode(bool);
};

struct CValidatingVector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> >
{
	virtual long Append(HSTRING__ *);
	virtual long Clear();
	virtual long First(Windows::Foundation::Collections::IIterator<HSTRING__ *> * *);
	virtual long GetAt(unsigned int,HSTRING__ * *);
	virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
	virtual long GetView(Windows::Foundation::Collections::IVectorView<HSTRING__ *> * *);
	virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
	virtual long InsertAt(unsigned int,HSTRING__ *);
	virtual long RemoveAt(unsigned int);
	virtual long RemoveAtEnd();
	virtual long ReplaceAll(unsigned int,HSTRING__ * *);
	virtual long SetAt(unsigned int,HSTRING__ *);
	virtual long get_Size(unsigned int *);
};

struct CValuePtr
{
	void Release();
};

struct CVectorIterator<Windows::Storage::Pickers::UpdateFilesResult *,Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> >
{
	CVectorIterator<Windows::Storage::Pickers::UpdateFilesResult *,Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> >(Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetMany(unsigned int,Windows::Storage::Pickers::IUpdateFilesResult * *,unsigned int *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long MoveNext(unsigned char *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Current(Windows::Storage::Pickers::IUpdateFilesResult * *);
	virtual long get_HasCurrent(unsigned char *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CViewFilterFactory
{
	bool _ShouldGenerateCallerSpecifiedFilterLeafConditions();
	bool _ShouldGenerateFilterLeafConditions();
	long _AddFolderConditions(CViewFilterFactory::CONDITION_OPTIONS,FILTER_CONDITION_FLAGS,IObjectCollection *);
	long _AddFolderReparsePointCondition(FILTER_CONDITION_FLAGS,IObjectCollection *);
	long _AddItemConditions(CViewFilterFactory::CONDITION_OPTIONS,FILTER_CONDITION_FLAGS,IObjectCollection *);
	long _AddLinkSystemHiddenCondition(FILTER_CONDITION_FLAGS,IObjectCollection *);
	long _AttachFilterLeafConditions(CViewFilterFactory::CONDITION_OPTIONS,IObjectCollection *);
	long _CreateAndOrCondition(tagCONDITION_TYPE,IObjectCollection *,_GUID const &,void * *);
	long _CreateFileExtensionLeafCondition(CViewFilterFactory::CONDITION_OPTIONS,unsigned short const *,_GUID const &,void * *);
	long _CreateLeafCondition(_tagpropertykey const &,tagCONDITION_OPERATION,tagPROPVARIANT const &,unsigned short const *,unsigned short const *,_GUID const &,void * *);
	long _CreateNotCondition(ICondition *,_GUID const &,void * *);
	long _EnsureConditionFactory();
public:
	long GetViewFilterCondition(FILTER_CONDITION_FLAGS,IFilterCondition * *);
	~CViewFilterFactory();
};

class CWRLExecuteCommandBase
{
protected:
	long _GetSelectedItem(unsigned long,_GUID const &,void * *);
	virtual ~CWRLExecuteCommandBase();
public:
	CWRLExecuteCommandBase();
	virtual long GetAssocElement(_GUID const &,void * *);
	virtual long GetSelection(_GUID const &,void * *);
	virtual long SetAssocElement(IAssociationElement *);
	virtual long SetDirectory(unsigned short const *);
	virtual long SetKeyState(unsigned long);
	virtual long SetNoShowUI(int);
	virtual long SetParameters(unsigned short const *);
	virtual long SetPosition(tagPOINT);
	virtual long SetSelection(IShellItemArray *);
	virtual long SetShowWindow(int);
};

class CWRLImpWndProc<BadgeWindow>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<CLauncherTipContextMenu>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<FacadeWindow>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<ShellExperienceHelpers::Internal::ProxyModalWindow>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<TouchpadGestureInputProvider>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLImpWndProc<WindowManagementEvents>
{
protected:
	static __int64 s_WndProcBase(HWND__ *,unsigned int,unsigned __int64,__int64);
};

class CWRLObjectWithGITSite
{
protected:
	Microsoft::WRL::ComPtr<IServiceProvider> Site<IServiceProvider>();
	Microsoft::WRL::ComPtr<IUnknown> Site<IUnknown>();
	Microsoft::WRL::ComPtr<IUnknown> SiteUnk();
	~CWRLObjectWithGITSite();
public:
	virtual long GetSite(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
};

struct CWRLObjectWithSite
{
	virtual long GetSite(_GUID const &,void * *);
	virtual long SetSite(IUnknown *);
};

class CWaitForApplications
{
	struct WaitInfo
	{
		~WaitInfo();
	};

	void _PerformWait();
public:
	long AddWaitHandle(IUnknown *,IWaitHandle *);
	~CWaitForApplications();
};

class CWordMatch
{
	long _PutWordMatch(unsigned long,unsigned short const *,unsigned long,unsigned long);
	static long s_FillTextBuffer(tagTEXT_SOURCE *);
public:
	long Initialize(unsigned short const *,unsigned long,unsigned long);
	long WordMatch(unsigned short const *,int *);
	virtual long EndAltPhrase();
	virtual long PutAltWord(unsigned long,unsigned short const *,unsigned long,unsigned long);
	virtual long PutBreak(tagWORDREP_BREAK_TYPE);
	virtual long PutWord(unsigned long,unsigned short const *,unsigned long,unsigned long);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long StartAltPhrase();
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class CWrlLightweightHandlerBase
{
protected:
	long _GetStdMarshaler(_GUID const &,void * *);
	virtual long v_GetAdditionalDataSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long v_MarshalAdditionalData(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
	virtual void v_OnAggregatedUnknownCreated();
public:
	virtual long DisconnectObject(unsigned long);
	virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
	virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
	virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
	virtual long ReleaseMarshalData(IStream *);
	virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
};

class CWrlLightweightHandlerServer
{
	virtual unsigned long v_GetHandlerType();
public:
	virtual long GetClassForHandler(unsigned long,void *,_GUID *);
};

class CXHHostAppManagerBase
{
	long _LaunchHostApp(bool);
	void _EndExistingTaskCompletion();
protected:
	virtual long v_OnExperienceExit();
	virtual long v_OnExperienceReady();
	virtual void v_OnActivation(long);
	virtual void v_OnLaunch(long);
	virtual ~CXHHostAppManagerBase();
public:
	CXHHostAppManagerBase();
	long Initialize(_GUID const &,bool,unsigned short const *,unsigned short const *);
	virtual long LaunchHostApp(unsigned short const *);
	virtual long OnExperienceExit();
	virtual long OnExperienceReady();
	virtual long StartListeningForAppStateChanges();
	virtual long StopListeningForAppStateChanges();
	virtual long WaitForAppCompletion(unsigned long);
};

struct CZeroInitNew
{
	static void operator delete(void *);
};

class CachedFileUpdateActivator
{
	long CreateBrowserParentWindow(tagRECT);
	long CreateExplorerBrowser();
public:
	CachedFileUpdateActivator();
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual long Activate(IShellItem *);
	virtual long QueryActivatedApplication(_GUID const &,void * *);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void Terminate();
};

namespace CallerIdentity
{
	namespace ApiPolicyChecker
	{
		ApiPolicyChecker::LaunchRequirement GetLaunchRequirementForActiveBand(ZBID);
		bool DoesAppMeetLaunchRequirement(ApiPolicyChecker::LaunchRequirement,unsigned short const *,HWND__ *);
		long IsAppBeingDebugged(unsigned short const *,int *);
		long IsApplicationInteractive(unsigned short const *,int *);
		long IsCallingProcessForeground(int *);
		long IsComponentUiHostWindowForeground(HWND__ *);
		long IsWindowFromCallingProcessAndVisible(HWND__ *,int *);
		long ShouldAppBeAllowedToPerformPrivilegedOperationBasedOnForeground(unsigned short const *);
		long ValidateCallingAppAndGetItsCurrentWindowForFlow(HWND__ *,bool,HWND__ * *);
		long _IsWindowFromCallingProcess(HWND__ *,int *);
	};

	bool IsShellExperienceAppId(unsigned short const *);
	bool PackageRelativeAppIDExistsInPackageFullName(unsigned short const *,unsigned short const *);
	bool g_fRuntimeBrokerProcessIdInitialize;
	long CheckCallerCapability(unsigned short const *,bool *);
	long CheckCapabilityFromProcessHandle(void *,unsigned short const *,bool *);
	long CheckCapabilityFromWindow(HWND__ *,unsigned short const *,bool *);
	long CheckProcessCapability(unsigned long,unsigned short const *,bool *);
	long FindAllApplicationsByAppID(IUnknown *,unsigned short const *,IObjectArray * *);
	long FindAllApplicationsByAppID(unsigned short const *,IObjectArray * *);
	long FindApplication(HWND__ *,IImmersiveApplication * *);
	long FindApplication(IUnknown *,HWND__ *,IImmersiveApplication * *);
	long GetActiveWindowForCallingThread(HWND__ * *);
	long GetAppIdFromProcessId(unsigned long,unsigned short * *);
	long GetCallerProcessImageName(unsigned short *,unsigned long *);
	long GetCallerProcessImageNameAlloc(unsigned short * *);
	long GetCallingProcessAppId(unsigned short * *);
	long GetCallingProcessHandle(unsigned long,RUNTIMEBROKER_CALLERIDENTITY_CHECK,void * *);
	long GetCallingProcessId(RUNTIMEBROKER_CALLERIDENTITY_CHECK,unsigned long *);
	long GetCallingProcessPackageFamilyName(unsigned short * *);
	long GetCallingProcessPackageFullName(unsigned short * *);
	long GetCallingProcessType(PROCESS_UICONTEXT *);
	long GetCoreApplicationForCallingProcess(_GUID const &,void * *);
	long GetCoreApplicationViewForWindow(HWND__ *,_GUID const &,void * *);
	long GetCoreWindowForCallingThread(_GUID const &,void * *);
	long GetCoreWindowForCurrentThread(_GUID const &,void * *);
	long GetCoreWindowHandleForCallingThread(HWND__ * *);
	long GetCoreWindowHandleForCurrentThread(HWND__ * *);
	long GetImmersiveAppIdFromWindow(HWND__ *,unsigned short * *);
	long GetImpersonationTokenFromProcess(void *,unsigned long,void * *);
	long GetManifestedOrientationPreference(unsigned short const *,ORIENTATION_PREFERENCE *);
	long GetPackageFamilyNameFromProcess(void *,unsigned short * *);
	long GetPackageFullNameFromAppId(unsigned short const *,unsigned short * *);
	long GetPackageFullNameFromProcess(void *,unsigned short * *);
	long GetPackageFullNameFromWindow(HWND__ *,unsigned short * *);
	long GetPackageInfoFromCurrentProcess(unsigned int,unsigned int *,PACKAGE_INFO * *);
	long GetPackageInfoFromPackageFullName(unsigned short const *,unsigned int,unsigned int *,PACKAGE_INFO * *);
	long GetPackageInfoFromPackageFullNameWithoutInProcessCache(unsigned short const *,unsigned int,unsigned int *,PACKAGE_INFO * *);
	long GetPackageSidFromProcess(unsigned long,void * *);
	long GetPackageSidFromProcessHandle(void *,void * *);
	long GetPackageSidFromProcessToken(void *,void * *);
	long GetPackageSidStringFromProcessToken(void *,unsigned short * *);
	long GetProcessAppId(void *,unsigned short * *);
	long GetProcessAppIdWithAppResolverFallback(void *,unsigned short * *);
	long GetProcessTypeFromWindow(HWND__ *,PROCESS_UICONTEXT *);
	long GetPsmKeyFromProcessHandle(void *,unsigned short * *);
	long GetPsmKeyFromProcessId(unsigned long,unsigned short * *);
	long GetPsmKeyFromProcessToken(void *,unsigned short * *);
	long GetSinglePackageFullNameFromPackageFamilyName(unsigned short const *,unsigned short * *);
	long GetStateHandle(unsigned short const *,void * *);
	long GetStateRegKey(void *,unsigned short const *,unsigned long,HKEY__ * *);
	long GetWeakWindowAppId(HWND__ *,unsigned short * *);
	long IsHostedWindow(HWND__ *,int *);
	long IsProcessAppContainer(void *,bool *);
	unsigned long g_dwRuntimeBrokerProcessId;
	void _EnsureRuntimeBrokerPID();
};

class CallingAppHandler
{
	long EnsureShellItem();
public:
	CallingAppHandler();
	long RuntimeClassInitialize(unsigned short const *);
	virtual long CreateInvoker(IDataObject *,IAssocHandlerInvoker * *);
	virtual long GetAppID(unsigned short * *);
	virtual long GetIconLocation(unsigned short * *,int *);
	virtual long GetItem(IShellItem * *);
	virtual long GetName(unsigned short * *);
	virtual long GetUIName(unsigned short * *);
	virtual long Invoke(IDataObject *);
	virtual long IsRecommended();
	virtual long MakeDefault(unsigned short const *);
	virtual long SetAppID(unsigned short const *);
	virtual long SetItem(IShellItem *);
};

namespace CapabilityUtils
{
	int IsDeviceCapabilitySid(void *);
	int _CompareCapabilityDisplayInfo(void *,void const *,void const *);
	long CheckForPackageInPrivilegedList(unsigned short const *,unsigned short const *,bool *);
	long CreateOrderedCapabilityDisplayList(unsigned short const *,_SID_AND_ATTRIBUTES *,unsigned long,CCoSimpleArray<CapabilityUtils::CapabilityDisplayData *,4294967294,CSimpleArrayStandardCompareHelper<CapabilityUtils::CapabilityDisplayData *> > *);
	long DeviceInterfaceClassGuidFromCapabilitySid(void *,unsigned short * *);
	long DoesClassHaveProperty(unsigned short const *,unsigned long,bool *);
	long GetCapabilityDisplayInfoForCapabilitySid(void *,CapabilityUtils::_CAPABILITY_DISPLAY_INFO * *);
	long GetCustomDeviceClassFriendlyName(unsigned short const *,unsigned short const *,unsigned long,unsigned short * *);
	long GetDeviceClassFriendlyName(unsigned short const *,unsigned short const *,unsigned long,unsigned short * *);
	long GetDeviceObjectBooleanValue(unsigned short const *,_DEVPROPKEY const &,bool *);
	long GetKnownDeviceClassFriendlyName(unsigned short const *,unsigned short * *);
};

class CharmsBarStyleFlyoutExperienceManager
{
	virtual long GetAppBarPositionForMonitor(HMONITOR__ * const,tagRECT *,EDGEUI_TRAYSTUCKPLACE *);
public:
	CharmsBarStyleFlyoutExperienceManager();
	long DestroyFlyout();
	long ReturnFocusToExplorer();
	virtual long OnDismiss();
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewDestroying(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual long PositionFlyout(Windows::Foundation::Rect const &,Windows::Foundation::Size const &);
	virtual long RuntimeClassInitialize(IServiceProvider *,unsigned short const *);
	virtual long RuntimeClassInitialize(IServiceProvider *,unsigned short const *,LIGHT_DISMISS_FLAGS,unsigned short const *);
};

struct ChromeControlsTelemetryImpl
{
	static bool IsEnabled(unsigned char,unsigned __int64);
	void ChromeControlsInvokeAppBar_(IImmersiveApplication *,int,CHROME_CONTROLS_SOURCE);
	void ChromeControlsInvokeBack_(IImmersiveApplication *,unsigned int);
};

class ClickNote
{
	long DoCustomLaunchIfUserOverridden(unsigned short const *,bool,bool,bool *,unsigned long &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
	long SaveScreenshotToFileAsync(unsigned short const *,HWND__ *,Windows::Foundation::IAsyncOperation<bool> * *);
	long TakeScreenshotHelper(HWND__ *,bool);
public:
	ClickNote();
	long RuntimeClassInitialize();
	virtual long DoPenLongPressInvocation();
	virtual long GetScreenShotToken(unsigned short * *);
	virtual long Launch();
	virtual long TakeScreenshot();
	virtual long TakeWindowScreenshot(HWND__ *);
};

namespace ClickNoteAppPackagingHelpers
{
	namespace Common
	{
		long CheckIfPackageIsInstalled(unsigned short const *,bool *);
		long LaunchAppByAppUserModelId(unsigned short const *);
		long LaunchAppByUserCustomizationIdAsync(unsigned short const *,Windows::Foundation::IAsyncOperation<bool> * *);
		long TryLaunchAppByPackageFamilyAndDisplayNameBlocking(unsigned short const *,unsigned short const *);
	};

};

struct ClickNoteCommon
{
	static bool IsScreenclipOverridden();
	static long DoLongPressLaunch(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &);
	static long DoLongPressLaunch(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &);
	static long DoQuickNoteLaunch(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &);
	static long DoQuickNoteLaunch(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,bool);
	static long DoScreenclipLaunch(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &);
	static long DoScreenclipLaunch(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &);
	static long DoScreenclipLaunch(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &);
	static long DoUriLaunch(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &);
	static long GetLongPressPackageFamilyName(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,bool *);
	static long GetQuickNotePackageFamilyName(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,bool *);
	static long MakeDssTokenFromPath(unsigned short const *,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
	static long SendKeyboardKeyCombo(unsigned short,unsigned short,unsigned short);
};

namespace ClickNoteLogTelemetry
{
	class Launched
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void AboveLockDisabled();
		void LockActivation<bool &>(bool &);
		void OemPackageFamilyNameOverride<bool &,Windows::Internal::MoveOnCopy<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > &>(bool &,Windows::Internal::MoveOnCopy<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > &);
		void OemProtocolOverride<bool &,Windows::Internal::MoveOnCopy<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > &>(bool &,Windows::Internal::MoveOnCopy<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > &);
		void StartActivity();
		void UserOverride<bool &,unsigned long &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &>(bool &,unsigned long &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
		~Launched();
	};

	class LongPress
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void OemPackageFamilyNameOverride<bool &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &>(bool &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
		void OemProtocolOverride<bool &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &>(bool &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
		void StartActivity();
		void UserOverride<bool &,unsigned long &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &>(bool &,unsigned long &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
		~LongPress();
	};

	class Screenshot
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void OemPackageFamilyNameOverride<bool &,Windows::Internal::MoveOnCopy<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > &>(bool &,Windows::Internal::MoveOnCopy<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > &);
		void OemProtocolOverride<bool &,Windows::Internal::MoveOnCopy<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > &>(bool &,Windows::Internal::MoveOnCopy<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > &);
		void StartActivity();
		void UserOverride<bool &,unsigned long &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &>(bool &,unsigned long &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
		void WindowScreenshot<bool &>(bool &);
		~Screenshot();
	};

};

struct ClosableComPtr<IInspectable>
{
	~ClosableComPtr<IInspectable>();
};

struct CoCreateInstanceAsSystemTelemetry
{
	class CoCreateInstanceAsSystem
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CoCreateInstanceAsSystem();
	};

	static wil::ActivityThreadWatcher WatchCurrentThread(char const *);
};

namespace Common
{
	long GetProcessArgsByPID(unsigned long,unsigned short *,unsigned long *);
	long GetProcessImageInfoByPID(unsigned long,unsigned short *,unsigned long *,unsigned short *,unsigned long *);
	long GetProcessWorkingDirectoryByPID(unsigned long,bool,unsigned short *,unsigned long *);
};

class CompactOverlayManager
{
	bool IsViewCompactOverlay(HWND__ *);
	long ClearFullscreenListenerForMonitor(IImmersiveMonitor *);
	long EnsurePositioner();
	long RegisterFullscreenListenersForMonitor(IImmersiveMonitor *);
	long UpdateElevatedZOrder();
public:
	CompactOverlayManager();
	long RuntimeClassInitialize();
	long SetFullscreenForMonitor(IImmersiveMonitor *,bool);
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long MultitaskingViewDismissed(MULTITASKING_VIEW_TYPES);
	virtual long MultitaskingViewShown(MULTITASKING_VIEW_TYPES);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long UpdateCompactOverlayPresence(int);
	virtual ~CompactOverlayManager();
};

class CompactOverlayPositioner
{
	long ApplyStyleToView(IImmersiveMonitor *,IApplicationView *,ViewStyleFlags,tagRECT *);
	long ControlGainedHelper(IApplicationView *,IApplicationView *);
	long ControlGainedHelper(IObjectArray *);
	long ControlLostHelper(IApplicationView *);
	long ControlLostHelper(IObjectArray *);
	long EnsureCompactOverlayWindowStored(IApplicationView *,HWND__ *);
	long GetCompactOverlayExpandedSizeConstraintsForMonitor(IImmersiveMonitor *,tagSIZE *,tagSIZE *,tagSIZE *);
	long GetCompactOverlayWindowPositions(IImmersiveMonitor *,IApplicationView *,std::vector<Geometry::CRect,std::allocator<Geometry::CRect> > &);
	long GetRectFromView(IApplicationView *,tagRECT *);
	long GetSizeFromView(IApplicationView *,tagSIZE *);
	long GetViewSizeConstraints(IApplicationView *,ViewModePreferencesHelpers::CompactOverlaySizeConstraints *);
	long GetViewSizeVectorFromObjectArray(IObjectArray *,std::vector<ViewSizePair,std::allocator<ViewSizePair> > &);
	long MoveViewToDisplayRegion(IApplicationView *,unsigned int);
	long MoveViewsToMonitor(IImmersiveMonitor *,std::vector<ViewSizePair,std::allocator<ViewSizePair> > &,std::vector<Geometry::CRect,std::allocator<Geometry::CRect> > &,bool,bool);
	long ResizeFrameToPhysicalDimensions(IApplicationView *,tagSIZE);
	long ResizeToMonitorConstraints(IImmersiveMonitor *,tagSIZE *,ViewModePreferencesHelpers::CompactOverlaySizeConstraints);
	long SetViewSizeConstraints(IApplicationView *,ViewModePreferencesHelpers::CompactOverlaySizeConstraints);
	long StorePrimaryMonitorMetrics(IImmersiveMonitor *);
	tagSIZE GetNonClientArea(HWND__ *,tagSIZE const &,unsigned int);
public:
	CompactOverlayPositioner();
	long RuntimeClassInitialize();
	virtual int ShouldBlockActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleActivation(IApplicationView *,IUnknown *);
	virtual int ShouldHandleFrameworkViewTypeChange(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual int ShouldHandlePresentationRequest(IApplicationView *,IInspectable *);
	virtual long ControlGainedForActivation(IApplicationView *,SHELL_POSITIONER_TYPE,IUnknown *);
	virtual long ControlGainedWithResult(IObjectArray *);
	virtual long ControlLostWithResult(IObjectArray *);
	virtual long EnsureSizePreferenceCleared(IApplicationView *);
	virtual long FrameworkViewTypeChangedForView(IApplicationView *,FRAMEWORK_VIEW_TYPE);
	virtual long GetChromeConfigurationForView(IApplicationView *,int *,IApplicationViewTitlebarConfiguration * *);
	virtual long GetCompactOverlaySizeConstraintsForMonitor(IImmersiveMonitor *,tagSIZE *,tagSIZE *,tagSIZE *);
	virtual long GetHasMonitors(int *);
	virtual long GetPosition(HWND__ *,_GUID const &,void * *);
	virtual long GetPreferredSizeForView(IApplicationView *,tagSIZE *,int *);
	virtual long GetScaledPaddingForMonitor(IImmersiveMonitor *,unsigned int *);
	virtual long HandleRecoveryForView(IApplicationView *);
	virtual long HandleSwitchToView(IApplicationView *);
	virtual long InitializePosition(IApplicationView *,IUnknown *,IPresentationRequestedArgs *,IApplicationView *);
	virtual long IsCompactOverlayMode(IApplicationView *,int *);
	virtual long IsCompactOverlayModeAvailable(IApplicationView *,int,int *);
	virtual long IsCompactOverlayModeSupported(IApplicationView *,int *);
	virtual long IsWindowCompactOverlayMode(HWND__ *,int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long MonitorRemoved(IImmersiveMonitor *,IImmersiveMonitor *);
	virtual long OnViewClosing(IApplicationView *,int);
	virtual long PositionView(IApplicationView *,tagRECT,TRY_POSITION_VIEW_FLAGS);
	virtual long PresentationChangedForView(IApplicationView *,IInspectable *);
	virtual long ResizeView(IApplicationView *,tagSIZE,tagSIZE);
	virtual long SetCloak(int);
	virtual long SetElevatedZOrder(int);
	virtual long SetSizePreference(IApplicationView *,tagSIZE);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long ViewChangedFocus(IApplicationView *,int);
	virtual long ViewChangedMonitor(IApplicationView *);
	virtual long ViewClosed(IApplicationView *);
	virtual long WindowChangedHover(HWND__ *,int);
	virtual long WorkAreaChanged();
	virtual void ControlGained(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown *,IPresentationRequestedArgs *);
	virtual void ControlLost(IObjectArray *,SHELL_POSITIONER_TYPE,IUnknown * *);
	virtual ~CompactOverlayPositioner();
};

class ComponentUIHostedActivationManager
{
	long ActivateApplication(IInspectable *);
	long CreateAndAddComponentSite();
	long CreateWindowFactory(IInspectable * *);
	long DuplicateVisualHandles();
	long EnsureApplicationActivated();
	long InitHostTargetAndRootVisual();
	long InitializeActivationPropertySetAndSerialize(Windows::Storage::Streams::IBuffer * *);
	long ResizeSplashScreen(tagRECT);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual ~ComponentUIHostedActivationManager();
	void MaybeFireAppReady();
public:
	ComponentUIHostedActivationManager();
	virtual long ActivateHostedApplication(ACTIVATEOPTIONSINTERNAL,tagRECT const *,unsigned short const *,unsigned short const *,IUnknown *);
	virtual long AppNameLoaded(unsigned short const *,int);
	virtual long CreateSplashScreenEvents(_GUID const &,void * *);
	virtual long GetCurrentImageLocationInScreenCoordinates(tagRECT *);
	virtual long GetOrientationPreference(SPLASHSCREEN_ORIENTATION_PREFERENCE *);
	virtual long GetWindow(HWND__ * *);
	virtual long ImageLoaded(SPLASHSCREEN_IMAGE_TYPE,ISharedBitmap *);
	virtual long Initialize(IDCompositionDesktopDevice *,HWND__ *,SPLASHSCREEN_IMAGE_TYPE,PLM_TASKCOMPLETION_CATEGORY_FLAGS,IDXGIDevice1 *,IHostedApplicationFrameWindow * *);
	virtual long Initialize(unsigned short const *,tagRECT const *);
	virtual long LoadImageW();
	virtual long OnActivationBegin(unsigned short const *,SPLASHSCREEN_FLAGS,HWND__ * *);
	virtual long OnActivationEnd(long,unsigned __int64);
	virtual long OnViewSizeChange(tagRECT);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long SetActivationResult(long);
	virtual long SetAppWindow(long);
	virtual long SetAppWindowAndGetHostProcess(long,unsigned __int64 *);
	virtual long SetImageSize(SPLASHSCREEN_IMAGE_TYPE);
	virtual long SetWindow(HWND__ *);
	virtual long ShowSplashScreen();
	virtual long TransitionToApp();
	virtual void OnComponentTerminated();
};

class ComponentUIHostedAppFrame
{
	bool OnTranslateAccleratorKey(unsigned __int64,__int64);
	long EnableAppCrashUI();
	long EnsureRegisteredPLMExemption(HWND__ *);
	long HideApplicationImpl(bool);
	long MaybeShowApp();
	long OnBackNavigated(IInspectable *,bool);
	virtual ~ComponentUIHostedAppFrame();
public:
	ComponentUIHostedAppFrame();
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	virtual int IsApplicationTerminated();
	virtual int IsApplicationVisible();
	virtual long AppWindowIsReady();
	virtual long CreateFrame(tagRECT const *,HWND__ *);
	virtual long GetBridgeWindow(HWND__ * *);
	virtual long GetContentPosition(tagRECT *);
	virtual long GetFrameWindow(HWND__ * *);
	virtual long GetWindow(HWND__ * *);
	virtual long HasFocusIO();
	virtual long HideApplication(APP_TRANSITION_TYPE);
	virtual long InitializeBridge(_GUID const &);
	virtual long InvokeBackNavigation(IUnknown *);
	virtual long KeepInputQueueDetached(int);
	virtual long QueryService(_GUID const &,_GUID const &,void * *);
	virtual long RepositionComponentWindows(tagRECT const *);
	virtual long SetComponentWindowSite(Windows::UI::Core::ICoreWindowSite *);
	virtual long SetContent(IUnknown *);
	virtual long SetEventSink(IWeakReference *);
	virtual long SetHostedApplication(IHostedApplication *);
	virtual long SetHostedWindow(HWND__ *);
	virtual long SetTaskCompletionCategory(PLM_TASKCOMPLETION_CATEGORY_FLAGS);
	virtual long SetUseTopLevelWindow(int);
	virtual long SetViewWindow(HWND__ *,tagRECT const *);
	virtual long SetWindow(HWND__ *);
	virtual long ShowApplication(APP_TRANSITION_TYPE,HWND__ *);
	virtual long TakeFocus();
	virtual long TranslateAcceleratorIO(tagMSG *);
	virtual long UIActivateIO(int,tagMSG *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
	virtual void OnActivationComplete(long);
	virtual void OnActivationCompleteWithSplashScreenCallback(long,ISplashScreenPriv *);
};

class ComponentUIPlugin
{
	long _CheckHostAndGetComponentViewWrapper(unsigned int,unsigned int,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
	long _GetComponentViewWrapper(unsigned int,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * *);
	long _MonitorViewlessHostForCrashes(unsigned long);
	long _OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long _OnViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long _RecoverViews();
	long _RegisterForWindowReadiness(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _TryHideComponent(Windows::Internal::OneCore::ViewEventHandlers::CRSComponentStateFlags,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _TryShowComponent(Windows::Internal::OneCore::ViewEventHandlers::CRSComponentStateFlags,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
public:
	ComponentUIPlugin();
	long RuntimeClassInitialize();
	long UnregisterViewlessHost(unsigned long);
	virtual int IsReady();
	virtual long CloseComponent(unsigned long,unsigned int);
	virtual long ConfigureHostRightsForComponent(unsigned int,unsigned int,unsigned int,unsigned int);
	virtual long GetComponentEventHandles(unsigned int,unsigned long,void * *);
	virtual long GetDesktopBrokerProcessHandle(void * *);
	virtual long GetHostViewInstanceId(unsigned int,unsigned int *);
	virtual long GetIslandTransformsMode(unsigned long,unsigned int,unsigned int *);
	virtual long GetViewEventHandle(unsigned int,_CUI_VIEW_EVENT_TYPE,void * *);
	virtual long HideComponent(unsigned long,unsigned int);
	virtual long InvokeBackNavigation(unsigned long,unsigned int,IUnknown *);
	virtual long IsHostGrantedRightsOverComponent(unsigned int,unsigned int,unsigned int,unsigned int,unsigned char *);
	virtual long PerformDelayedInitialization();
	virtual long RegisterComponentForHost(unsigned int,unsigned int,unsigned int);
	virtual long RemoveComponent(unsigned int);
	virtual long RequestActivation(unsigned long,unsigned int);
	virtual long SetBoundsComponent(unsigned long,unsigned int,float,float);
	virtual long SetComponentPointerActivationPolicy(unsigned long,unsigned int,unsigned int);
	virtual long SetComponentViewStateToSuspendable(unsigned long,unsigned int,unsigned char);
	virtual long SetIsModalDialogEnabled(unsigned long,unsigned int,unsigned char);
	virtual long SetScreenBoundsComponent(unsigned long,unsigned int,tagRECT);
	virtual long ShowComponent(unsigned long,unsigned int);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~ComponentUIPlugin();
};

namespace Concurrency
{
	struct _Init_func_transformer<bool>
	{
		static std::function<bool ()> _Perform(std::function<bool ()>);
	};

	struct _Init_func_transformer<void>
	{
		static std::function<unsigned char ()> _Perform(std::function<void ()>);
	};

	namespace details
	{
		struct _ExceptionHolder
		{
			~_ExceptionHolder();
		};

		struct _TaskProcThunk
		{
			static void _Bridge(void *);
		};

		struct _Task_impl<bool>
		{
			bool _TransitionedToStarted();
			virtual bool _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<_ExceptionHolder> const &);
			virtual ~_Task_impl<bool>();
			void _FinalizeAndRunContinuations(bool);
		};

		struct _Task_impl<long>
		{
			virtual bool _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<_ExceptionHolder> const &);
			virtual ~_Task_impl<long>();
		};

		struct _Task_impl<unsigned char>
		{
			bool _TransitionedToStarted();
			virtual bool _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<_ExceptionHolder> const &);
			virtual ~_Task_impl<unsigned char>();
			void _FinalizeAndRunContinuations(unsigned char);
		};

		struct _Task_impl_base
		{
			_Task_impl_base(pplx::details::_CancellationTokenState *,scheduler_ptr);
			bool _CancelWithException(std::exception_ptr const &);
			static void _CancelViaToken(void *);
			virtual ~_Task_impl_base();
			void _DeregisterCancellation();
			void _RunContinuation(_ContinuationTaskHandleBase *);
			void _RunTaskContinuations();
			void _ScheduleContinuation(_ContinuationTaskHandleBase *);
			void _ScheduleTask(pplx::details::_UnrealizedChore *,Custom::_TaskInliningMode);
		};

		std::function<unsigned char ()> _MakeVoidToUnitFunc(std::function<void ()> const &);
		std::function<unsigned char (unsigned char)> _MakeUnitToUnitFunc(std::function<void ()> const &);
	};

	struct scheduler_ptr
	{
		scheduler_ptr(std::shared_ptr<scheduler_interface>);
		~scheduler_ptr();
	};

	struct task<bool>
	{
		void _CreateImpl(pplx::details::_CancellationTokenState *,scheduler_ptr);
		~task<bool>();
	};

	struct task<long>
	{
		void _CreateImpl(pplx::details::_CancellationTokenState *,scheduler_ptr);
		~task<long>();
	};

	struct task<unsigned char>
	{
		void _CreateImpl(pplx::details::_CancellationTokenState *,scheduler_ptr);
		~task<unsigned char>();
	};

	struct task<void>
	{
		void _CreateImpl(pplx::details::_CancellationTokenState *,scheduler_ptr);
		~task<void>();
	};

	struct task_options
	{
		task_options();
		task_options(pplx::cancellation_token);
		~task_options();
	};

	Concurrency::task<bool> create_task<bool>(Concurrency::task<bool> const &);
	Concurrency::task<void> create_task<void>(Concurrency::task<void> const &);
};

class ContactCardExperienceContractRedirector
{
	long TryFindExtension(HSTRING__ *,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirectorContext *,unsigned short *,unsigned __int64);
public:
	static TrustLevel InternalGetTrustLevelStatic();
	static unsigned short const * InternalGetRuntimeClassNameStatic();
	virtual long ActivateInstance(IInspectable * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long IsSupported(HSTRING__ *,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirectorContext *,unsigned char *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long TryActivateInstance(HSTRING__ *,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirectorContext *,IInspectable * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct ContractRegisterInfo
{
	ContractRegisterInfo();
	long RuntimeClassInitialize(SHELL_TARGET_IDENTIFIER,SHELL_TARGET_CONTRACT_FLAGS,IShellTargetingContractNotification *,unsigned long);
	virtual SHELL_TARGET_CONTRACT_FLAGS GetContractFlags();
	virtual SHELL_TARGET_IDENTIFIER GetIdentifier();
	virtual long InvokeBackContract();
	virtual unsigned long GetCookie();
};

struct Cpu
{
	double CalcProcessorUtilityPercentage(unsigned __int64,unsigned __int64);
	long GetMemoryUsage(double *,double *);
	long InitializeCpuQuery();
	long ParseBuffer(void *,unsigned long *,_PCW_INSTANCE_BUFFER * *);
	long TmQueryPcwCounter(_COUNTER_BUFFER * *,_COUNTER_BUFFER * *,void *);
	long UpdateCpuQuery(double *);
	virtual ~Cpu();
};

struct CreationThreadDispatcher
{
	CreationThreadDispatcher();
	long RuntimeClassInitialize();
};

namespace CreativeFramework
{
	namespace ContentDeliveryManagerDebugSettings
	{
		bool IsContentDeliveryAllowedOverrideInEffect(bool *);
		unsigned short const * const c_regKeyDebugSettings;
		unsigned short const * const c_regValueContentDeliveryAllowedOverride;
	};

	namespace ContentDeliveryManagerSettings
	{
		namespace Details
		{
			long GetSettingValue<unsigned long,16>(HKEY__ *,unsigned short const *,unsigned short const *,bool,unsigned long *,unsigned long);
		};

		unsigned short const * const c_regKeyContentDeliveryManagerSettings;
		unsigned short const * const c_regValueSoftLandingEnabled;
	};

	namespace Logging
	{
		namespace ShellPlacementTelemetry
		{
			class WindowsTipPresentActivity
			{
			protected:
				virtual bool WasAlreadyReportedToTelemetry(long);
				virtual void StopActivity();
			public:
				void StartActivity(unsigned short const *,unsigned short const *);
				~WindowsTipPresentActivity();
			};

		};

	};

	namespace Policy
	{
		namespace Details
		{
			bool GetDomainName(unsigned short *,unsigned long);
		};

		bool IsAllowedByCloudContentPolicy(unsigned short const *,unsigned short const *,bool);
		bool IsAnyMicrosoftDomainAccount();
		bool IsContentDeliveryPolicyEnforced();
		bool IsContentDeliverySkuPolicyAllowed(bool);
		bool IsEducationEnvironment();
		bool IsMDMPolicyConfigured(unsigned short const *,unsigned short const *);
		int GetMDMPolicyInt(unsigned short const *,unsigned short const *);
		unsigned long GetGroupPolicyDWORD(unsigned short const *,unsigned short const *,bool);
	};

	namespace Shared
	{
		unsigned short const * const c_windowsTipAppIdentity;
	};

};

class CredentialResetExperienceManager
{
	long DismissView();
	long DismissWindows();
	static void s_InformCredentialResetTerminated();
	static void s_LaunchPinReset();
	static void s_ReportRunning(bool);
protected:
	virtual bool v_ShouldHandleWorkAreaChange(unsigned long);
	virtual long v_OnSubscribeToServices(IServiceProvider *);
	virtual long v_OnUnsubscribeFromServices(IServiceProvider *);
	virtual long v_SetActive();
	virtual unsigned long v_GetCurrentZBID();
public:
	CredentialResetExperienceManager();
};

class CredentialResetHostAppManager
{
protected:
	virtual long v_OnExperienceExit();
public:
	CredentialResetHostAppManager();
	long RuntimeClassInitialize(unsigned short const *);
};

namespace Custom
{
	struct _AutoDeleteChore
	{
		~_AutoDeleteChore();
	};

};

namespace D2D1
{
	struct Matrix4x4F
	{
		static Matrix4x4F PerspectiveProjection(float);
	};

};

struct DCompShellTabThumbnailInfo
{
	DCompShellTabThumbnailInfo(DCompShellTabThumbnailInfo const &);
	~DCompShellTabThumbnailInfo();
};

class DCompThumbnailFrame
{
	long _CreateFrameVisuals(IDCompositionDesktopDevice *);
	long _SetValueFromAnimationWithTransform<IDCompositionScaleTransform>(IDCompositionScaleTransform *,long ( IDCompositionScaleTransform::*)(IDCompositionAnimation *),IUIAnimationVariable2 *,int,float,float);
	long _SetValueFromAnimationWithTransform<IDCompositionVisual>(IDCompositionVisual *,long ( IDCompositionVisual::*)(IDCompositionAnimation *),IUIAnimationVariable2 *,int,float,float);
	void _DestroyFrameVisuals();
	void _PositionFrameVisuals();
	void _PositionFrameVisualsAnimated();
	void _PositionFrameVisualsStatic();
public:
	void SetSize(Geometry::CSize,IUIAnimationVariable2 *);
	void SetSize(Geometry::CSize,double * const);
};

namespace DCompThumbnailHelpers
{
	struct CDCompFactoryBatcher
	{
		CDCompFactoryBatcher(Microsoft::WRL::ComPtr<IDCompBatcher> const &,_GUID const &,IDCompBatchAnimationCallback *);
		~CDCompFactoryBatcher();
	};

	long CreateDesktopBackgroundThumbnail(ISwitchThumbnailFactory *,IDCompThumbnail *,tagRECT const &,tagSIZE const *,IDCompThumbnail * *);
};

namespace DCompUtil
{
	long CreateSinglePixelSurfaceFromColor<IDCompositionDesktopDevice>(IDCompositionDesktopDevice *,DXGI_ALPHA_MODE,tagRGBQUAD,IDCompositionSurface * *);
	long CreateSinglePixelSurfaceFromColor<IDCompositionDevice>(IDCompositionDevice *,DXGI_ALPHA_MODE,tagRGBQUAD,IDCompositionSurface * *);
	long SetScaleTransform<IDCompositionDesktopDevice,IDCompositionVisual2>(IDCompositionDesktopDevice *,IDCompositionVisual2 *,float,float);
	long SetScaleTransform<IDCompositionDevice,IDCompositionVisual>(IDCompositionDevice *,IDCompositionVisual *,float,float);
	long UpdateSinglePixelSurfaceColor<IDCompositionSurface>(IDCompositionSurface *,tagRGBQUAD);
};

namespace DPIToPPIHelpers
{
	int ScaleByPPI(int,HWND__ *,DPIToPPIHelpers::ScaleModifier);
	int ScaleBySpecificDPI(int,int,DPIToPPIHelpers::ScaleModifier);
	int ScaleByType(DPIToPPIHelpers::ScaleType,int,HWND__ *,int,DPIToPPIHelpers::ScaleModifier);
	long DrawThemeTextExPPI(HWND__ *,DPIToPPIHelpers::ScaleType,unsigned int *,void *,HDC__ *,int,int,unsigned short const *,int,unsigned long,tagRECT *,_DTTOPTS *);
	long GetThemeTextExtentPPI(HWND__ *,DPIToPPIHelpers::ScaleType,unsigned int *,void *,HDC__ *,int,int,unsigned short const *,int,unsigned long,_DTTOPTS *,tagRECT *,tagRECT *);
};

namespace DataPersistence
{
	struct CApplicationData
	{
		CApplicationData();
		virtual long GetApplicationFlags(PERSISTED_APPLICATION_DATA_FLAGS *);
		virtual long GetApplicationId(unsigned short * *);
	};

	struct CApplicationDataCollection
	{
		long RuntimeClassInitialize(CStringHashTable<PERSISTED_APPLICATION_DATA_FLAGS,CStringHashPolicy,CStringCompare> *);
		virtual long GetAt(unsigned int,_GUID const &,void * *);
		virtual long GetCount(unsigned int *);
	};

	class CDataPersistence
	{
		long DeleteRegKey(unsigned short const *,unsigned short const *);
		long GetRegKey(unsigned short const *,unsigned short const *,bool,HKEY__ * *);
		void _InitializePerApplicationDataPersistence();
	public:
		CDataPersistence();
		long RuntimeClassInitialize();
		virtual long ClearPerSessionApplicationFlags(unsigned short const *,PERSISTED_APPLICATION_DATA_FLAGS);
		virtual long ClearPosition(unsigned short const *,unsigned short const *);
		virtual long GetAllPerSessionApplicationData(IObjectArray * *);
		virtual long GetPerSessionApplicationFlags(unsigned short const *,PERSISTED_APPLICATION_DATA_FLAGS *);
		virtual long GetPosition(unsigned short const *,unsigned short const *,IOcclusionBasedApplicationViewPosition * *);
		virtual long GetPreferredLaunchViewSize(unsigned short const *,tagSIZE *);
		virtual long GetPreferredLaunchWindowingMode(unsigned short const *,PREFERRED_LAUNCH_WINDOWING_MODE *);
		virtual long GetPreferredMinSize(unsigned short const *,tagSIZE *);
		virtual long RemoveAllPackageData(unsigned short const *);
		virtual long SetPerSessionApplicationFlags(unsigned short const *,PERSISTED_APPLICATION_DATA_FLAGS);
		virtual long SetPosition(unsigned short const *,unsigned short const *,IOcclusionBasedApplicationViewPosition *);
		virtual long SetPreferredLaunchViewSize(unsigned short const *,tagSIZE);
		virtual long SetPreferredLaunchWindowingMode(unsigned short const *,PREFERRED_LAUNCH_WINDOWING_MODE);
		virtual long SetPreferredMinSize(unsigned short const *,tagSIZE);
		virtual ~CDataPersistence();
	};

	Microsoft::WRL::Details::CreatorMap const __object_CDataPersistence_COM;
	Microsoft::WRL::Details::FactoryCache __objectFactory__CDataPersistence_COM;
};

namespace DefaultAssocTelemetry
{
	class ChangeDefaultBrowser
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void LogMSEdgeInfo();
		void SetDefaultBrowser(unsigned long,unsigned short const *,unsigned short const *,unsigned short const *);
		void StartActivity();
		~ChangeDefaultBrowser();
	};

};

struct DeferredTileContextMenuEvent
{
	static UID DeferredTileContextMenu;
};

namespace DesktopApiPolicyChecker
{
	long ShouldWindowBeAllowedToPerformPrivilegedOperation(HWND__ *);
};

class DesktopAppXActivator
{
	HMONITOR__ * GetTargetMonitorFromSite();
	bool IsServiceRunning(unsigned short const *);
	static long TriggerAppInstallerUpdateIfNeeded(unsigned short const *);
	void EnsurePackageIsRegisteredIfMsixvcAndGSIsBlocked(unsigned short const *);
	void NotifyLicensingActivationFailure(unsigned short const *);
	wil::unique_any_t<wil::details::unique_storage<wil::details::handle_null_resource_policy<int (*)(void *),&int CloseHandle(void *)> > > InnerActivate(HSTRING__ *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,IInspectable *,DesktopAppXProvider::Activation);
public:
	DesktopAppXActivator();
	virtual long Activate(unsigned short const *,unsigned short const *,unsigned short const *,void * *);
	virtual long ActivateWithOptions(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,void * *);
	virtual long ActivateWithOptionsAndArgs(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long,unsigned long,IInspectable *,void * *);
};

namespace DesktopAppXProvider
{
	class Activation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~Activation();
	};

	class ActivationShellExec
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ActivationShellExec();
	};

	class CreateApplicationIdentityInfo
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CreateApplicationIdentityInfo();
	};

	class GetManifestedExecutable
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~GetManifestedExecutable();
	};

	class ImmersiveInterop_ActivateFromTile
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~ImmersiveInterop_ActivateFromTile();
	};

};

struct DesktopContactCardExperience
{
	DesktopContactCardExperience();
	static TrustLevel InternalGetTrustLevel();
	static unsigned short const * InternalGetRuntimeClassName();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long IsSupported(unsigned char *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long ShowContactCard(unsigned __int64,Windows::ApplicationModel::Contacts::IContact *,Windows::Foundation::Rect,Windows::UI::Popups::Placement,Windows::ApplicationModel::Contacts::IContactCardOptions *,float,unsigned char,Windows::ApplicationModel::Contacts::Internal::IContactCardExperienceDelayedDataLoader * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct DesktopContactCardExperienceDelayedDataLoader
{
	DesktopContactCardExperienceDelayedDataLoader();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long SetData(Windows::ApplicationModel::Contacts::IContact *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

namespace DesktopFullscreenHelpers
{
	bool IsWindowOnMonitor(HWND__ *,IImmersiveMonitor *);
};

class DesktopSingleViewShellExperiencePersonality
{
	long RegisterSessionIdleDetector();
public:
	virtual bool IsPersonality(void const *);
	virtual long BringToFocus();
	virtual long BringToForeground();
	virtual long EnableSessionIdleNotifications(IServiceProvider *);
	virtual long HideView();
	virtual long IsViewVisible(bool *);
	virtual long OnViewWrapperChanged();
	virtual long SetPosition(tagRECT const *);
	virtual long SetWindowBand(ZBID);
	virtual long ShowBorder(CSingleViewShellExperience::Border,ACCENT_STATE,unsigned long,tagRECT const *);
	virtual long ShowView();
	virtual ~DesktopSingleViewShellExperiencePersonality();
};

struct DesktopStoreRemediationHandler
{
	DesktopStoreRemediationHandler();
	virtual long ActivateExtensionFailed(long,unsigned short const *,IServiceProvider *);
	virtual long AddToProcessPackageGraphFailed(long,unsigned short const *,IServiceProvider *);
	virtual long CoCreateInstanceFailed(long,_GUID const &,IServiceProvider *);
	virtual long CreateProcessFailed(long,unsigned short const *,IServiceProvider *);
};

struct DeviceDisplayItem
{
	unsigned long Release();
};

class DeviceHierarchy
{
	long _CreateChainedPopupWindow(unsigned int,IPopupWindow * *);
	long _ShowDevicesUI(DEVICESFLOW_FLAGS);
	long _ShowDevicesUIError(unsigned int,unsigned short const *);
	static __int64 s_ProxyWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static void _TraceConnectCharmDisplayUI(bool);
	virtual long _PopulateUI(IUnknown *);
	virtual void _HideRunningShares(DirectUI::Element *,DirectUI::Element *);
	virtual void _ShowRunningShares(unsigned long,_GUID const &);
	void _EvaluateSharingData();
	void _HandleInvokeDevicesUI(DEVICESFLOW_FLAGS);
	void _InitTapToSend();
	void _LaunchTapSend();
	void _SetTitleAndLinks(int,bool);
protected:
	virtual float _GetSetFocusDelay();
public:
	DeviceHierarchy();
	static DirectUI::IClassInfo * Class;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long InitializeUI(HWND__ *,long,IPopupWindow *,IDataTransferBroker *,IUnknown *);
	virtual void FireEtwEndEvent(long);
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
};

class DeviceUninstaller
{
	static void UninstallDevQueryCallbackProc(HDEVQUERY__ *,void *,_DEV_QUERY_RESULT_ACTION_DATA const *);
	void CompleteOperationAndNotify(long);
	void UninstallDevQueryCallback(_DEV_QUERY_RESULT_ACTION_DATA const *);
public:
	DeviceUninstaller();
	long RuntimeClassInitialize(unsigned short const *,IDeviceUninstallerListener *);
	virtual long StartUninstall();
	virtual void Shutdown();
};

class DevicesCharmProjectionManager
{
	long RegisterForWnfNotificationsUnderLock();
	long TryGetNewActiveMiracastConnectionFromWnfState(unsigned short const *,MIRACAST_DISPLAY_DEVICE_STATE,MIRACAST_DEVICE_STATUS,MiracastConnection * *);
	long UpdateCurrentConnectionWithActiveConnectionFromWnfStateUnderLock(unsigned short const *,MIRACAST_DISPLAY_DEVICE_STATE,MIRACAST_DEVICE_STATUS);
	static IDevicesCharmProjectionManager * s_pDevicesCharmProjectionManager;
	static Microsoft::WRL::Wrappers::CriticalSection s_csDevicesCharmProjectionManagerLock;
	static long InitialMiracastStateCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	static long MiracastStateChangeCallback(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,void *,void const *,unsigned long);
	static long ShowProjectConnectionErrorToast(MiracastConnectionError);
	static void WnfUnregisterCompleteCallback(void *);
	void CheckAndUnregisterForWnfNotificationsIfNecessaryUnderLock();
	void HandleCurrentConnectionStateChangedUnderLock(MiracastConnectionState);
	void OnMiracastDeviceStateChange(_WNF_STATE_NAME,unsigned long,_WNF_TYPE_ID *,_NETWORK_DISPLAY_STATE_CHANGE_NOTIFICATION const *);
	void UnregisterForWnfNotificationsUnderLock();
	void UpdateCurrentConnectionUnderLock(MiracastConnection *);
public:
	DevicesCharmProjectionManager();
	virtual bool IsSessionRemoteable();
	virtual long ConnectUI();
	virtual long DisconnectUI();
	virtual long ForgetTerminatedCurrentMiracastConnection();
	virtual long GetAvailableDisplayState(bool *,bool *,bool *,IMiracastConnection * *);
	virtual long GetCurrentMiracastConnection(IMiracastConnection * *);
	virtual long RegisterForProjectionManagerEvents(IDevicesCharmProjectionManagerEventHandler *,EventRegistrationToken *);
	virtual long StartNewMiracastConnection(unsigned short const *,bool,IMiracastConnection * *);
	virtual long Startup();
	virtual long UnregisterForProjectionManagerEvents(EventRegistrationToken);
	virtual void Shutdown();
	virtual ~DevicesCharmProjectionManager();
};

struct DevicesCharmProjectionManagerEventHandlerAdapter
{
	virtual long Invoke();
};

struct DevicesCharmUISession
{
	long RuntimeClassInitialize(CDevicesFlow *,IUnknown *,DEVICESFLOW_FLAGS);
	virtual long GetDevicesFlow(IDevicesFlow * *);
	virtual long GetFlowParams(unsigned long *,_GUID *);
	virtual long GetUIObject(IUnknown * *);
	virtual long GetUIType(DEVICESFLOW_FLAGS *);
	virtual long Invoke(IPopupWindow *);
	virtual long SetFlowParams(unsigned long,_GUID);
	virtual ~DevicesCharmUISession();
};

class DevicesFlowExperienceFlow
{
	long GetExperienceManager(unsigned short const *,Windows::Internal::Shell::Experience::IDeviceDiscoveryExperienceManager * *);
public:
	virtual long Execute();
};

class DevicesFlowExperienceFlowCF
{
	virtual ~DevicesFlowExperienceFlowCF();
public:
	DevicesFlowExperienceFlowCF();
};

class DevicesUI
{
	ActionableStatus _GetActionableStatus();
	bool _ShouldInitiateRePairForTappedProjectDevice(unsigned short const *);
	long SetProjectionDeviceStatus(unsigned short const *,bool,bool,unsigned int);
	long SetProjectionDeviceStatusForTrackedConnection(bool,bool,unsigned int);
	long _AddSecondScreenTile();
	long _CreateSecondScreenTile(DirectUI::Element * *);
	long _PlayToPopulateUI();
	long _PrintPopulateUI();
	long _ProjectPopulateUI();
	static __int64 s_ProxyWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static unsigned short const * const c_szSecondScreenTileID;
	virtual long _PopulateUI(IUnknown *);
	void _BeginProjectDeviceRePair(unsigned short const *);
	void _CompleteProjectDeviceRePair(long);
	void _HandleButtonClickEvent(DirectUI::Event *);
	void _HandleDeviceTileClickEvent(IDeviceItemElement *,DeviceItemClickEvent *);
	void _HandleProjectAvailableDevicesUpdated();
	void _HandleProjectConnectionChanged();
	void _HandleProjectConnectionStateChanged();
	void _HandleUpdateErrorStringForContractMode();
	void _InitPrinterList();
	void _InitProjectList();
	void _LaunchMoSet();
	void _PlayToSyncUIToState(bool);
	void _PrintHandleButtonClickEvent(DirectUI::Event *);
	void _PrintHandleDeviceTileClickEvent(IDeviceItemElement *,DeviceItemClickEvent *,unsigned int,DeviceDisplayItem *);
	void _PrintHandleEvent(DirectUI::Event *);
	void _PrintSyncUIToState(bool);
	void _ProjectHandleButtonClickEvent(DirectUI::Event *);
	void _ProjectHandleDeviceTileClickEvent(IDeviceItemElement *,DeviceItemClickEvent *,unsigned int,DeviceDisplayItem *);
	void _ProjectSyncUIToState(bool,bool);
	void _ProjectUpdateErrorString();
	void _SetFocusOnBackButton();
	void _SyncUIToState();
	void _UpdateErrorDisplay(bool);
protected:
	virtual float _GetSetFocusDelay();
public:
	DevicesUI();
	static DirectUI::IClassInfo * Class;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual long DeviceCountChanged(unsigned long,unsigned int,unsigned int);
	virtual long EnumerationComplete(unsigned long,unsigned int,unsigned int);
	virtual long InitializeUI(HWND__ *,long,IPopupWindow *,IDataTransferBroker *,IUnknown *);
	virtual void FireEtwEndEvent(long);
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnInput(DirectUI::InputEvent *);
	virtual ~DevicesUI();
};

struct DevicesUIError
{
	long SetHeader(unsigned short const *,unsigned short const *);
	static DirectUI::IClassInfo * Class;
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class DialogManager
{
	HWND__ * _GetComponentUIParentWindowForDialogOwnership(HWND__ *);
	long _GetAppFrameWindow(HWND__ *,HWND__ * *);
	static int s_FixDialogsForWindowEnumProc(HWND__ *,__int64);
public:
	DialogManager();
	long RuntimeClassInitialize();
	virtual long FixDialogOwnershipForWindow(HWND__ *);
	virtual long GetImmersiveApplicationBackgroundColor(unsigned short const *,unsigned long *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long SetForegroundPrivileged(HWND__ *);
	virtual long SetWindowOwner(HWND__ *,HWND__ *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual ~DialogManager();
};

namespace DirectUI
{
	struct AutoDefer
	{
		~AutoDefer();
	};

	class ClassInfo<AccountActionsUI,Element,EmptyCreator<AccountActionsUI> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<AccountActionsUI,Element,EmptyCreator<AccountActionsUI> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<AccountsCommandsLink,TouchHyperLink,StandardCreator<AccountsCommandsLink> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<AccountsCommandsLink,TouchHyperLink,StandardCreator<AccountsCommandsLink> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<AccountsSettingsButton,TouchButton,StandardCreator<AccountsSettingsButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<AccountsSettingsButton,TouchButton,StandardCreator<AccountsSettingsButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<AccountsSettingsUI,Element,EmptyCreator<AccountsSettingsUI> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<AccountsSettingsUI,Element,EmptyCreator<AccountsSettingsUI> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<AnimatedTouchButton,TouchButton,StandardCreator<AnimatedTouchButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<AnimatedTouchButton,TouchButton,StandardCreator<AnimatedTouchButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<AppCrashUI,HWNDElement,StandardCreator<AppCrashUI> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<AppCrashUI,HWNDElement,StandardCreator<AppCrashUI> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<AppItemList,Selector,StandardCreator<AppItemList> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<AppItemList,Selector,StandardCreator<AppItemList> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<AppItemListContainer,Element,StandardCreator<AppItemListContainer> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<AppItemListContainer,Element,StandardCreator<AppItemListContainer> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<AutoPlayTile,TouchButton,StandardCreator<AutoPlayTile> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<AutoPlayTile,TouchButton,StandardCreator<AutoPlayTile> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CAppListTileElement,TouchButton,StandardCreator<CAppListTileElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CAppListTileElement,TouchButton,StandardCreator<CAppListTileElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CDUIHost,TouchHWNDElement,StandardCreator<CDUIHost> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CDUIHost,TouchHWNDElement,StandardCreator<CDUIHost> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CShellItemThumbnailElement,Element,StandardCreator<CShellItemThumbnailElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CShellItemThumbnailElement,Element,StandardCreator<CShellItemThumbnailElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CSimpleAppList,ItemList,StandardCreator<CSimpleAppList> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CSimpleAppList,ItemList,StandardCreator<CSimpleAppList> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<CSplashScreenElement,Element,StandardCreator<CSplashScreenElement> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<CSplashScreenElement,Element,StandardCreator<CSplashScreenElement> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<DeviceHierarchy,FlowUIBase,StandardCreator<DeviceHierarchy> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<DeviceHierarchy,FlowUIBase,StandardCreator<DeviceHierarchy> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<DevicesUI,FlowUIBase,StandardCreator<DevicesUI> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<DevicesUI,FlowUIBase,StandardCreator<DevicesUI> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<DevicesUIError,FlowUIBase,StandardCreator<DevicesUIError> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<DevicesUIError,FlowUIBase,StandardCreator<DevicesUIError> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<FindMoreAppsLink,TouchHyperLink,StandardCreator<FindMoreAppsLink> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<FindMoreAppsLink,TouchHyperLink,StandardCreator<FindMoreAppsLink> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<PermissionsUI,Element,EmptyCreator<PermissionsUI> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<PermissionsUI,Element,EmptyCreator<PermissionsUI> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<PreviousShareLink,TouchHyperLink,StandardCreator<PreviousShareLink> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<PreviousShareLink,TouchHyperLink,StandardCreator<PreviousShareLink> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<ProgressTile,AnimatedTouchButton,StandardCreator<ProgressTile> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<ProgressTile,AnimatedTouchButton,StandardCreator<ProgressTile> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<QuickLinkTile,AnimatedTouchButton,StandardCreator<QuickLinkTile> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<QuickLinkTile,AnimatedTouchButton,StandardCreator<QuickLinkTile> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<SettingsButton,TouchButton,StandardCreator<SettingsButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<SettingsButton,TouchButton,StandardCreator<SettingsButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<SettingsUI,Element,EmptyCreator<SettingsUI> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<SettingsUI,Element,EmptyCreator<SettingsUI> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<SharableItemSelectorButton,TouchButton,StandardCreator<SharableItemSelectorButton> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<SharableItemSelectorButton,TouchButton,StandardCreator<SharableItemSelectorButton> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<SharableItemTile,AnimatedTouchButton,EmptyCreator<SharableItemTile> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<SharableItemTile,AnimatedTouchButton,EmptyCreator<SharableItemTile> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<SharingUI,FlowUIBase,StandardCreator<SharingUI> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<SharingUI,FlowUIBase,StandardCreator<SharingUI> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	class ClassInfo<TabbableItemList,ItemList,StandardCreator<TabbableItemList> >
	{
		static long Create(HINSTANCE__ *,unsigned short const *,bool,PropertyInfo const * const *,unsigned int,ClassInfo<TabbableItemList,ItemList,StandardCreator<TabbableItemList> > * *);
		static long Register(HINSTANCE__ *,unsigned short const *,PropertyInfo const * const *,unsigned int,bool);
	public:
		virtual IClassInfo * GetBaseClass();
		virtual long CreateInstance(Element *,unsigned long *,Element * *);
		virtual void Destroy();
	};

	struct ClassInfoBase
	{
		virtual HINSTANCE__ * GetModule();
		virtual PropertyInfo const * EnumPropertyInfo(unsigned int);
		virtual PropertyInfo const * GetByClassIndex(unsigned int);
		virtual bool IsGlobal();
		virtual bool IsSubclassOf(IClassInfo *);
		virtual bool IsValidProperty(PropertyInfo const *);
		virtual int GetChildren();
		virtual int Release();
		virtual unsigned int GetGlobalIndex();
		virtual unsigned int GetPICount();
		virtual unsigned short const * GetName();
		virtual void AddChild();
		virtual void AddRef();
		virtual void AssertPIZeroRef();
		virtual void RemoveChild();
	};

	class DuiPVLTrigger
	{
	protected:
		long EnsureObject();
	public:
		long TriggerAdd(Element *,Element *,unsigned int,int,unsigned long *);
		long TriggerCollapse(Element *,Element *,unsigned long *);
		long TriggerContentTransition(DynamicArray<Element *,0> *,DynamicArray<Element *,0> *,Element *,tagPOINT,int,unsigned long *);
		long TriggerCrossfade(Element *,Element *,bool,bool,bool,bool,unsigned long *);
		long TriggerFade(Element *,unsigned int,unsigned long *);
		long TriggerMove(Element *,Element *,int,bool,unsigned long *);
		long TriggerMove(Element *,Element *,int,unsigned long *);
		long TriggerReposition(Element *,tagPOINT,bool,unsigned long *);
		long TriggerSearchFilterAdd(DynamicArray<Element *,0> *,Element *,DynamicArray<unsigned int,0> *,int,unsigned long *);
		long TriggerSearchFilterDelete(DynamicArray<Element *,0> *,bool,unsigned long *);
		long TriggerTap(Element *,unsigned int,tagPOINT,unsigned long *);
		~DuiPVLTrigger();
	};

	struct DynamicArray<Element *,0>
	{
		static long Create(unsigned int,bool,DynamicArray<Element *,0> * *);
	};

	class DynamicArrayBase<CEndpointMonitor *,DoubleAllocationPolicy<CEndpointMonitor *>,1,0>
	{
		long SwitchToHeap(unsigned int);
		static long CHeapBuffer_InsertPtr(DynamicArrayBase<CEndpointMonitor *,DoubleAllocationPolicy<CEndpointMonitor *>,1,0> *,unsigned int,unsigned int,CEndpointMonitor * * *);
	public:
		long InsertPtr(unsigned int,CEndpointMonitor * * *);
		static long Create(unsigned int,bool,DynamicArrayBase<CEndpointMonitor *,DoubleAllocationPolicy<CEndpointMonitor *>,1,0> * *);
	};

	class DynamicArrayBase<Element *,DoubleAllocationPolicy<Element *>,1,0>
	{
		long SwitchToHeap(unsigned int);
		static long CHeapBuffer_InsertPtr(DynamicArrayBase<Element *,DoubleAllocationPolicy<Element *>,1,0> *,unsigned int,unsigned int,Element * * *);
	public:
		long Initialize(unsigned int,bool);
		long InsertPtr(unsigned int,Element * * *);
	};

	class DynamicArrayBase<tagPOINT,DoubleAllocationPolicy<tagPOINT>,1,0>
	{
		long SwitchToHeap(unsigned int);
		static long CHeapBuffer_InsertPtr(DynamicArrayBase<tagPOINT,DoubleAllocationPolicy<tagPOINT>,1,0> *,unsigned int,unsigned int,tagPOINT * *);
	public:
		long InsertPtr(unsigned int,tagPOINT * *);
	};

	class DynamicArrayBase<unsigned int,DoubleAllocationPolicy<unsigned int>,1,0>
	{
		long SwitchToHeap(unsigned int);
		static long CHeapBuffer_InsertPtr(DynamicArrayBase<unsigned int,DoubleAllocationPolicy<unsigned int>,1,0> *,unsigned int,unsigned int,unsigned int * *);
	public:
		long Initialize(unsigned int,bool);
		long InsertPtr(unsigned int,unsigned int * *);
		static long Create(unsigned int,bool,DynamicArrayBase<unsigned int,DoubleAllocationPolicy<unsigned int>,1,0> * *);
	};

	class Element
	{
	protected:
		virtual tagSIZE _SelfLayoutUpdateDesiredSize(int,int,Surface *);
		virtual void ActivateTooltip(Element *,unsigned long);
		virtual void OnHosted(Element *);
		virtual void OnUnHosted(Element *);
		virtual void RemoveTooltip(Element *);
		virtual void UpdateTooltip(Element *);
		virtual void _SelfLayoutDoLayout(int,int);
	public:
		virtual Element * GetAdjacent(Element *,int,NavReference const *,unsigned long);
		virtual Element * GetUiaFocusDelegate();
		virtual IClassInfo * GetClassInfoW();
		virtual bool EnsureVisible(int,int,int,int);
		virtual bool GetKeyFocused();
		virtual bool IsContentProtected();
		virtual bool IsRTLReading();
		virtual bool OnPropertyChanging(PropertyInfo *,int,Value *,Value *);
		virtual bool OnPropertyChanging(PropertyInfo const *,int,Value *,Value *);
		virtual long Add(Element * *,unsigned int);
		virtual long AddBehavior(IDuiBehavior *);
		virtual long DefaultAction();
		virtual long GetAccessibleImpl(IAccessible * *);
		virtual long GetElementProviderImpl(InvokeHelper *,ElementProvider * *);
		virtual long GetUIAElementProvider(_GUID const &,void * *);
		virtual long Insert(Element * *,unsigned int,unsigned int);
		virtual long QueryInterface(_GUID const &,void * *);
		virtual long Remove(Element * *,unsigned int);
		virtual long RemoveBehavior(IDuiBehavior *);
		virtual tagSIZE GetContentSize(int,int,Surface *);
		virtual unsigned int MessageCallback(tagGMSG *);
		virtual unsigned short const * GetContentStringAsDisplayed(Value * *);
		virtual void GetImmersiveFocusRectOffsets(tagRECT *);
		virtual void HandleUiaDestroyListener();
		virtual void HandleUiaEventListener(Event *);
		virtual void HandleUiaPropertyChangingListener(PropertyInfo const *);
		virtual void HandleUiaPropertyListener(PropertyInfo const *,int,Value *,Value *);
		virtual void OnDestroy();
		virtual void OnEvent(Event *);
		virtual void OnGroupChanged(int,bool);
		virtual void OnInput(InputEvent *);
		virtual void OnKeyFocusMoved(Element *,Element *);
		virtual void OnMouseFocusMoved(Element *,Element *);
		virtual void OnPropertyChanged(PropertyInfo *,int,Value *,Value *);
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
		virtual void Paint(HDC__ *,tagRECT const *,tagRECT const *,tagRECT *,tagRECT *);
		virtual void SetKeyFocus();
	};

	struct ElementProviderManager
	{
		static long GetProvider<IRawElementProviderSimple>(Element *,IRawElementProviderSimple * *);
		static long GetProvider<IRawElementProviderSimple>(Element *,InvokeHelper *,IRawElementProviderSimple * *);
	};

	class HWNDElement
	{
	protected:
		virtual void _OnUIStateChanged(unsigned short,unsigned short);
	public:
		virtual HWND__ * GetHWND();
		virtual __int64 WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
		virtual bool CanSetFocus();
		virtual bool IsMSAAEnabled();
		virtual long CreateStyleParser(DUIXmlParser * *);
		virtual long GetAccessibleImpl(IAccessible * *);
		virtual void ActivateTooltip(Element *,unsigned long);
		virtual void GetWindowClassNameAndStyle(unsigned short const * *,unsigned int *);
		virtual void OnCompositionChanged();
		virtual void OnDestroy();
		virtual void OnEvent(Event *);
		virtual void OnGetDlgCode(tagMSG *,__int64 *);
		virtual void OnGroupChanged(int,bool);
		virtual void OnImmersiveColorSchemeChanged();
		virtual void OnInput(InputEvent *);
		virtual void OnNoChildWithShortcutFound(KeyboardEvent *);
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
		virtual void OnThemeChanged(ThemeChangedEvent *);
		virtual void OnWmSettingChanged(unsigned __int64,__int64);
		virtual void OnWmThemeChanged(unsigned __int64,__int64);
		virtual void RemoveTooltip(Element *);
		virtual void UpdateTooltip(Element *);
	};

	struct ItemList
	{
		virtual Element * GetAdjacent(Element *,int,NavReference const *,unsigned long);
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
	};

	struct PropNotify
	{
		static bool IsEqual(PropertyInfo const *,int,PropertyInfo const * (*)());
	};

	struct RichText
	{
		virtual tagSIZE GetContentSize(int,int,Surface *);
		virtual void Paint(HDC__ *,tagRECT const *,tagRECT const *,tagRECT *,tagRECT *);
	};

	struct Selector
	{
		virtual long SetSelection(Element *);
		virtual void OnEvent(Event *);
		virtual void OnInput(InputEvent *);
		virtual void OnKeyFocusMoved(Element *,Element *);
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
	};

	class SimpleTimer
	{
		static void s_ActionCallback(GMA_ACTIONINFO *);
	public:
		bool Stop();
		void DelayedStart(float);
	};

	struct TouchButton
	{
		virtual IClassInfo * GetClassInfoW();
		virtual long DefaultAction();
		virtual long GetForegroundColorRef(unsigned long *);
		virtual void FireClickEvent(unsigned int,unsigned int,TouchButton::ClickDevice,tagPOINT *);
		virtual void FireRightClickEvent(unsigned int,tagPOINT *);
		virtual void GetImmersiveFocusRectOffsets(tagRECT *);
		virtual void OnEvent(Event *);
		virtual void OnHosted(Element *);
		virtual void OnInput(InputEvent *);
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
		virtual void OnUnHosted(Element *);
	};

	class TouchHWNDElement
	{
	protected:
		virtual void _OnUIStateChanged(unsigned short,unsigned short);
	public:
		virtual IClassInfo * GetClassInfoW();
		virtual __int64 WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
		virtual bool IsMSAAEnabled();
		virtual unsigned int MessageCallback(tagGMSG *);
		virtual void ActivateTooltip(Element *,unsigned long);
		virtual void OnDestroy();
		virtual void OnKeyFocusMoved(Element *,Element *);
		virtual void RemoveTooltip(Element *);
		virtual void UpdateTooltip(Element *);
	};

	struct TouchHyperLink
	{
		virtual void GetImmersiveFocusRectOffsets(tagRECT *);
		virtual void OnPropertyChanged(PropertyInfo const *,int,Value *,Value *);
	};

	struct Value
	{
		static Value * GetBoolFalse();
		static Value * GetIntZero();
	};

	AutoPlayTile * HNewAndZero<AutoPlayTile>();
	int RelPixToPixel(int);
	long CreateAndInit<AnimatedTouchButton,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<AppItemList>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<AppItemListContainer,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<CShellItemThumbnailElement,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<CSimpleAppList>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<DeviceHierarchy,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<DevicesUI,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<DevicesUIError,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<FindMoreAppsLink,unsigned int>(unsigned int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<PreviousShareLink,unsigned int>(unsigned int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<SharableItemSelectorButton,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<SharingUI,int>(int,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	long CreateAndInit<TabbableItemList>(DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	void * HAlloc(unsigned __int64);
	void * HAllocAndZero(unsigned __int64);
	void * HReAlloc(void *,unsigned __int64);
	void HDelete<ClassInfo<AccountActionsUI,Element,EmptyCreator<AccountActionsUI> > >(DirectUI::ClassInfo<AccountActionsUI,DirectUI::Element,DirectUI::EmptyCreator<AccountActionsUI> > *);
	void HDelete<ClassInfo<AccountsCommandsLink,TouchHyperLink,StandardCreator<AccountsCommandsLink> > >(DirectUI::ClassInfo<AccountsCommandsLink,DirectUI::TouchHyperLink,DirectUI::StandardCreator<AccountsCommandsLink> > *);
	void HDelete<ClassInfo<AccountsSettingsButton,TouchButton,StandardCreator<AccountsSettingsButton> > >(DirectUI::ClassInfo<AccountsSettingsButton,DirectUI::TouchButton,DirectUI::StandardCreator<AccountsSettingsButton> > *);
	void HDelete<ClassInfo<AccountsSettingsUI,Element,EmptyCreator<AccountsSettingsUI> > >(DirectUI::ClassInfo<AccountsSettingsUI,DirectUI::Element,DirectUI::EmptyCreator<AccountsSettingsUI> > *);
	void HDelete<ClassInfo<AnimatedTouchButton,TouchButton,StandardCreator<AnimatedTouchButton> > >(DirectUI::ClassInfo<AnimatedTouchButton,DirectUI::TouchButton,DirectUI::StandardCreator<AnimatedTouchButton> > *);
	void HDelete<ClassInfo<AppCrashUI,HWNDElement,StandardCreator<AppCrashUI> > >(DirectUI::ClassInfo<AppCrashUI,DirectUI::HWNDElement,DirectUI::StandardCreator<AppCrashUI> > *);
	void HDelete<ClassInfo<AppItemList,Selector,StandardCreator<AppItemList> > >(DirectUI::ClassInfo<AppItemList,DirectUI::Selector,DirectUI::StandardCreator<AppItemList> > *);
	void HDelete<ClassInfo<AppItemListContainer,Element,StandardCreator<AppItemListContainer> > >(DirectUI::ClassInfo<AppItemListContainer,DirectUI::Element,DirectUI::StandardCreator<AppItemListContainer> > *);
	void HDelete<ClassInfo<AutoPlayTile,TouchButton,StandardCreator<AutoPlayTile> > >(DirectUI::ClassInfo<AutoPlayTile,DirectUI::TouchButton,DirectUI::StandardCreator<AutoPlayTile> > *);
	void HDelete<ClassInfo<CAppListTileElement,TouchButton,StandardCreator<CAppListTileElement> > >(DirectUI::ClassInfo<CAppListTileElement,DirectUI::TouchButton,DirectUI::StandardCreator<CAppListTileElement> > *);
	void HDelete<ClassInfo<CDUIHost,TouchHWNDElement,StandardCreator<CDUIHost> > >(DirectUI::ClassInfo<CDUIHost,DirectUI::TouchHWNDElement,DirectUI::StandardCreator<CDUIHost> > *);
	void HDelete<ClassInfo<CShellItemThumbnailElement,Element,StandardCreator<CShellItemThumbnailElement> > >(DirectUI::ClassInfo<CShellItemThumbnailElement,DirectUI::Element,DirectUI::StandardCreator<CShellItemThumbnailElement> > *);
	void HDelete<ClassInfo<CSimpleAppList,ItemList,StandardCreator<CSimpleAppList> > >(DirectUI::ClassInfo<CSimpleAppList,DirectUI::ItemList,DirectUI::StandardCreator<CSimpleAppList> > *);
	void HDelete<ClassInfo<CSplashScreenElement,Element,StandardCreator<CSplashScreenElement> > >(DirectUI::ClassInfo<CSplashScreenElement,DirectUI::Element,DirectUI::StandardCreator<CSplashScreenElement> > *);
	void HDelete<ClassInfo<DeviceHierarchy,FlowUIBase,StandardCreator<DeviceHierarchy> > >(DirectUI::ClassInfo<DeviceHierarchy,FlowUIBase,DirectUI::StandardCreator<DeviceHierarchy> > *);
	void HDelete<ClassInfo<DevicesUI,FlowUIBase,StandardCreator<DevicesUI> > >(DirectUI::ClassInfo<DevicesUI,FlowUIBase,DirectUI::StandardCreator<DevicesUI> > *);
	void HDelete<ClassInfo<DevicesUIError,FlowUIBase,StandardCreator<DevicesUIError> > >(DirectUI::ClassInfo<DevicesUIError,FlowUIBase,DirectUI::StandardCreator<DevicesUIError> > *);
	void HDelete<ClassInfo<FindMoreAppsLink,TouchHyperLink,StandardCreator<FindMoreAppsLink> > >(DirectUI::ClassInfo<FindMoreAppsLink,DirectUI::TouchHyperLink,DirectUI::StandardCreator<FindMoreAppsLink> > *);
	void HDelete<ClassInfo<PermissionsUI,Element,EmptyCreator<PermissionsUI> > >(DirectUI::ClassInfo<PermissionsUI,DirectUI::Element,DirectUI::EmptyCreator<PermissionsUI> > *);
	void HDelete<ClassInfo<PreviousShareLink,TouchHyperLink,StandardCreator<PreviousShareLink> > >(DirectUI::ClassInfo<PreviousShareLink,DirectUI::TouchHyperLink,DirectUI::StandardCreator<PreviousShareLink> > *);
	void HDelete<ClassInfo<ProgressTile,AnimatedTouchButton,StandardCreator<ProgressTile> > >(DirectUI::ClassInfo<ProgressTile,AnimatedTouchButton,DirectUI::StandardCreator<ProgressTile> > *);
	void HDelete<ClassInfo<QuickLinkTile,AnimatedTouchButton,StandardCreator<QuickLinkTile> > >(DirectUI::ClassInfo<QuickLinkTile,AnimatedTouchButton,DirectUI::StandardCreator<QuickLinkTile> > *);
	void HDelete<ClassInfo<SettingsButton,TouchButton,StandardCreator<SettingsButton> > >(DirectUI::ClassInfo<SettingsButton,DirectUI::TouchButton,DirectUI::StandardCreator<SettingsButton> > *);
	void HDelete<ClassInfo<SettingsUI,Element,EmptyCreator<SettingsUI> > >(DirectUI::ClassInfo<SettingsUI,DirectUI::Element,DirectUI::EmptyCreator<SettingsUI> > *);
	void HDelete<ClassInfo<SharableItemSelectorButton,TouchButton,StandardCreator<SharableItemSelectorButton> > >(DirectUI::ClassInfo<SharableItemSelectorButton,DirectUI::TouchButton,DirectUI::StandardCreator<SharableItemSelectorButton> > *);
	void HDelete<ClassInfo<SharableItemTile,AnimatedTouchButton,EmptyCreator<SharableItemTile> > >(DirectUI::ClassInfo<SharableItemTile,AnimatedTouchButton,DirectUI::EmptyCreator<SharableItemTile> > *);
	void HDelete<ClassInfo<SharingUI,FlowUIBase,StandardCreator<SharingUI> > >(DirectUI::ClassInfo<SharingUI,FlowUIBase,DirectUI::StandardCreator<SharingUI> > *);
	void HDelete<ClassInfo<TabbableItemList,ItemList,StandardCreator<TabbableItemList> > >(DirectUI::ClassInfo<TabbableItemList,DirectUI::ItemList,DirectUI::StandardCreator<TabbableItemList> > *);
	void HFree(void *);
};

struct DisplayPickerHelperTelemetry
{
	static bool IsEnabled(unsigned char,unsigned __int64);
	void TraceDbgMsg_(unsigned short const *,...);
};

namespace DisplayTelemetry
{
	class TopologyChangeActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void TopologyChange(long,DISPLAY_TOPOLOGY,DISPLAY_TOPOLOGY,TOPOLOGY_CHANGE_SOURCE);
	};

};

class DragViewEventSource
{
	DragViewEventSource::OperationType GetOperationType(IDragDropArgsPriv *);
	long DropWorker(IDragDropArgsPriv *,bool);
	long _GetOperationId(IDragDropArgsPriv *,_GUID *);
	long _GetSourceAppId(IDragDropArgsPriv *,unsigned short * *);
	long _RequestDataForOperation(IDragDropArgsPriv *,_GUID const &,tagPOINT &);
public:
	DragViewEventSource();
	virtual long Cancel(IDragDropArgsPriv *);
	virtual long DragEnter(IDragDropArgsPriv *,IDragUIOverridePriv * *);
	virtual long DragLeave(IDragDropArgsPriv *);
	virtual long DragOver(IDragDropArgsPriv *,IDragUIOverridePriv * *);
	virtual long Drop(IDragDropArgsPriv *);
	virtual long Initialize(IDragViewEventHandler *);
	virtual long Uninitialize();
	virtual ~DragViewEventSource();
};

struct DragViewTracker
{
	struct DragDropOperationInfo
	{
		DragDropOperationInfo(DragDropOperationInfo const &);
		~DragDropOperationInfo();
	};

	DragViewTracker();
	virtual long BeginOperation(_GUID const &,_GUID const &,IImmersiveApplication *);
	virtual long CreateOperation(_GUID const &);
	virtual long GetOperationData(_GUID const &,_GUID *,IImmersiveApplication * *);
	virtual long GetOperationDropPoint(_GUID const &,tagPOINT *);
	virtual long GetOperationStates(_GUID const &,DRAG_VIEW_OPERATION_STATES *);
	virtual long HasOperation(_GUID const &,int *);
	virtual long ObliterateOperation(_GUID const &);
	virtual long UpdateOperationDropPoint(_GUID const &,tagPOINT);
	virtual long UpdateOperationStates(_GUID const &,DRAG_VIEW_OPERATION_STATES,DRAG_VIEW_OPERATION_STATES);
};

class EDPNotificationHost
{
	long _CreateDialog(EDP_POLICY_RESULT,unsigned short const *);
	long _ShowOverrideDialog(HWND__ *,EDP_POLICY_RESULT,unsigned short const *);
public:
	EDPNotificationHost();
	virtual long Invoke(IPopupWindow *,IPopupCommand *);
	virtual long PerformDelayedInitialization();
	virtual long ProcessEntepriseIdChanged(unsigned long);
	virtual long Register(IEnterpriseIdChangeNotification *,unsigned long *);
	virtual long ShowOverrideDialog(HWND__ *,EDP_POLICY_RESULT,unsigned short const *,IAsyncCallback *);
	virtual long Unregister(unsigned long);
	virtual long WindowEnterpriseIdChanged(HWND__ *);
	virtual long WindowShowEnterpriseIndicatorChanged(HWND__ *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual ~EDPNotificationHost();
};

struct EDPPopupCommand
{
	EDPPopupCommand(unsigned int,IPopupCommandHandler *);
	virtual long get_Handler(IPopupCommandHandler * *);
	virtual long get_ID(unsigned int *);
	virtual long get_Label(unsigned short * *);
};

struct EdgeTelemetry
{
	static bool IsEnabled(unsigned char,unsigned __int64);
	void EdgeUiAutoHideImmuneWorkAreaUnavailable_();
	void EdgeUiInvokeTitleBar_(unsigned int);
	void EdgeUiTouchInvoked_(unsigned int);
};

class EdgeUiHint
{
	__int64 WndProc(unsigned int,unsigned __int64,__int64);
	static HFONT__ * s_LoadGlyphFont(DEVICE_SCALE_FACTOR);
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static void s_RegisterWindowClass();
	void DestroyHint(bool);
	void OnHintPaint(HDC__ *);
	void OnHintTimer(unsigned __int64);
public:
	EdgeUiHint(EDGEUI_INDEX);
	virtual bool IsVisible();
	virtual bool PointOnHint(tagPOINT);
	virtual long SetSite(IUnknown *);
	virtual long ShowForApp(IUnknown *,IImmersiveApplication *,bool);
	virtual void Hide(bool);
	virtual void SetHitTestBehavior(EDGEUI_HINT_HIT_TEST_BEHAVIOR);
};

namespace EdpHelpers
{
	bool IsLocalOrRemoteDebuggerPresent(unsigned long);
	long ProtectFilesWithFileOperation(HWND__ *,IShellItemArray *,unsigned short const *,unsigned long);
};

namespace EnterpriseChrome
{
	struct EnterpriseChromeTelemetry
	{
		class EnterpriseChromeEDPGlyphDrag
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			EnterpriseChromeEDPGlyphDrag TransferToCurrentThread();
			void StartActivity(BadgeState,InputMode);
			~EnterpriseChromeEDPGlyphDrag();
		};

		static bool IsEnabled(unsigned char,unsigned __int64);
		void EnterpriseChromeEDPGlyphStateChange_(BadgeState,bool);
	};

};

class EnterpriseChromeManager
{
	long EnsureEventHooks();
	void DestroyEventHooks();
public:
	EnterpriseChromeManager();
	long RuntimeClassInitialize(IApplicationViewCollection *,IImmersiveApplicationNotificationService *);
	virtual long ApplicationChanged(IImmersiveApplication *,IMM_APP_CHANGED,HWND__ *);
	virtual long Destroy();
	virtual long GetForegroundView(IApplicationView * *);
	virtual long GetFormattedEnterpriseId(unsigned short const *,unsigned short * *);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long ServiceAvailabilityChanged(IImmersiveApplication *,_GUID const &,IMM_APP_SERVICE_NOTIFY_FLAGS);
	virtual long TryMoveForegroundToBadgeWindow();
	virtual ~EnterpriseChromeManager();
	void WinEventProc(HWINEVENTHOOK__ *,unsigned long,HWND__ *,long,long,unsigned long,unsigned long);
};

class EnterpriseChromeServiceProvider
{
	long EnsureEnterpriseChromeManagerThreadState();
	long StartEnterpriseChromeManagerThread();
	static long s_CreateEnterpriseChromeManager(EnterpriseChromeServiceProvider::INIT_THREAD_DATA *);
	static unsigned long s_EnterpriseChromeManagerThreadProc(void *);
	static void s_RunMessageLoop(void *);
	void StopEnterpriseChromeManagerThread();
public:
	EnterpriseChromeServiceProvider();
	long RuntimeClassInitialize();
	virtual long PerformDelayedInitialization();
	virtual long SetChromeManagerReference(IEnterpriseChromeManager *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TryMoveForegroundToBadgeWindow();
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~EnterpriseChromeServiceProvider();
};

namespace EnumWindowsHelpers
{
	int LambdaEnumWindowsProc<<lambda_54c83054385b952be3ab173b3a76abf0> >(HWND__ *,__int64);
	int LambdaEnumWindowsProc<<lambda_8fda44886fd2153a186b4a4a7446e511> >(HWND__ *,__int64);
	int LambdaEnumWindowsProc<<lambda_9f0fe283dc04705d5db8f0bd7794bdf8> >(HWND__ *,__int64);
};

struct ErrorToastInfo
{
	long Initialize(_GUID const &,__MIDL___MIDL_itf_sharinganddevicesprivate_0000_0000_0001,CRunningShareUI *);
	void Reset();
	~ErrorToastInfo();
};

namespace EventRegistrationHelpers
{
	struct EventListener<IApplicationViewVisibilityDebouncedNotificationService,IApplicationViewChangeListener,ApplicationViewCollectionRegistration>
	{
		long Register(IApplicationViewVisibilityDebouncedNotificationService *);
		void Unregister();
	};

};

struct ExpansionExperienceController
{
	ExpansionExperienceController();
	long RuntimeClassInitialize();
	virtual long Show();
	virtual long SubscribeToServices(IServiceProvider *);
};

namespace ExperienceManagerUtils
{
	struct CopyableHString
	{
		CopyableHString(CopyableHString const &);
		~CopyableHString();
	};

	HWND__ * WindowFromViewWrapper(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	Microsoft::WRL::ComPtr<IInspectable> AsStrong<IInspectable>(Microsoft::WRL::WeakRef &);
	bool IsPreReleaseExperience();
	int ScaleByPerMonitorDPI(int,HMONITOR__ *);
	long GetHostExperiencePriorityManipulator(IServiceProvider *,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator * *);
	long GetHostExperiencePriorityManipulator(Windows::Internal::Shell::Experience::IShellExperienceManagerFactory *,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator * *);
	long PostToUIThread(IUnknown *,void *,unsigned int,__int64);
	long RaiseReactivatedEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,unsigned long,HSTRING__ *,HSTRING__ *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *,Windows::Foundation::Collections::IPropertySet *);
};

struct ExtensionListItemPinnedEvent
{
	static UID EventType;
};

class FacadeWindow
{
	long RecreateDesktopThumbnail();
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	FacadeWindow();
	long RuntimeClassInitialize(IImmersiveLauncher *,IImmersiveMonitorNotificationService *,ISwitchThumbnailDeviceManager *);
	virtual long CreateFacade();
	virtual long DestroyFacade();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
};

namespace FeedbackApp
{
	namespace NativeUtils
	{
		long GetLatestCaptureIndex(unsigned short const *,unsigned int *);
		long GetNextAvailableScreenshotName(unsigned short const *,unsigned short * *);
		long GetScreenshotInstanceFolder(_GUID const *,unsigned short * *);
		long GetScreenshotsRootFolder(unsigned short * *);
	};

};

class FeedbackHubApp
{
	long HStringToCoTaskMemString(Microsoft::WRL::Wrappers::HString &,unsigned short * *);
public:
	FeedbackHubApp();
	long RuntimeClassInitialize(FEEDBACK_HUB_APP,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *);
	virtual long GetAppId(unsigned short * *);
	virtual long GetExeName(unsigned short * *);
	virtual long GetName(unsigned short * *);
	virtual long GetPublisher(unsigned short * *);
	virtual long GetType(FEEDBACK_HUB_APP *);
	virtual long GetVersion(unsigned short * *);
};

namespace FileOperationHelpers
{
	long PerformFileOperations<<lambda_81d18549c461d2a3f03d12cf7b108b63> >(unsigned long,<lambda_81d18549c461d2a3f03d12cf7b108b63> const &);
};

struct FilePickerTelemetryDesktop
{
	class GetAllowedFileTypes
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~GetAllowedFileTypes();
	};

	class HostedApplicationTerminated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~HostedApplicationTerminated();
	};

	class PerformPostPickerTasks
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool,unsigned int,unsigned int);
		~PerformPostPickerTasks();
	};

	class PersistLastLocation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~PersistLastLocation();
	};

	class PickerProviderAddFile
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~PickerProviderAddFile();
	};

	class PickerProviderRemoveFile
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~PickerProviderRemoveFile();
	};

	class SaveFileToPickerProvider
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void GetDeferral(long);
		void PutTargetFile(long);
		void StartActivity();
		~SaveFileToPickerProvider();
	};

	class ShowPickerWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ShowPickerWindow();
	};

	static void PickerAppTerminationTimeout();
	static void Shell_Desktop_Picker_Save_Error<long &>(long &);
};

class FindMoreAppsLink
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class FlowUIBase
{
	static UID SetFocus;
	void _ActivateRunningShare(RUNNING_SHARE_INFO const &);
protected:
	DirectUI::Element * _FindRunningShareTile(_GUID const &,DirectUI::Element * *);
	bool _SetFocusOnFirstItem(DirectUI::Element *);
	long _InitializeRunningShares();
	long _OnEntryCountChanged();
	virtual void _HideRunningShares(DirectUI::Element *,DirectUI::Element *);
	virtual void _ShowRunningShares(unsigned long,_GUID const &);
	void _PostSimpleEvent(UID);
public:
	FlowUIBase();
	long OnEntryAdded(RUNNING_SHARE_INFO const *,int);
	long OnEntryRemoved(_GUID const &);
	long OnEntryStatusUpdated(_GUID const &,int,unsigned short const *);
	virtual DirectUI::Element * GetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long);
	virtual long InitializeUI(HWND__ *,long,IPopupWindow *,IDataTransferBroker *,IUnknown *);
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
	virtual void SetInitialFocus();
	virtual ~FlowUIBase();
};

namespace FontHelpers
{
	bool LoadFontIndirectFromResource(tagLOGFONTW &,unsigned int,unsigned int,unsigned int,unsigned int,FontHelpers::FontSizeType);
};

class FullscreenCXHExperienceManagerBase
{
	long _GetLayoutManager(IImmersiveLayout * *);
	long _OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long _OnViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	static HICON__ * HICONFromBitmap(HBITMAP__ *);
	static __int64 s_AltTabProxyWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static long SetDefaultIconForProxyWindowThumbnail(HWND__ *);
	void CreateAltTabProxyWindow(HWND__ *);
protected:
	long _UpdateWindowPositionAndBand(HWND__ *);
	virtual long v_OnSubscribeToServices(IServiceProvider *);
	virtual long v_OnUnsubscribeFromServices(IServiceProvider *);
	virtual long v_OnViewCreated();
	virtual long v_SetActive();
	virtual void v_OnViewDestroyed();
	virtual ~FullscreenCXHExperienceManagerBase();
public:
	FullscreenCXHExperienceManagerBase();
	long Initialize(_GUID const &,unsigned short const *);
	virtual long RegisterForNotification(IFullscreenCloudExperienceManagerNotification *);
	virtual long SetActive();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnRegisterNotification();
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
};

class FullscreenEventListener
{
	long UpdateFullscreenStatus();
public:
	FullscreenEventListener();
	long RuntimeClassInitialize(IImmersiveMonitor *,CompactOverlayManager *);
	long Unregister();
	virtual long FullScreenVisibilityChanged(int);
	virtual long OnRudeWindowStateChange(RudeWindowStateChangeFlags,HWND__ *);
	virtual ~FullscreenEventListener();
};

namespace GDIHelpers
{
	Geometry::CRect GetDrawTextRectForCenteredGlyph(HDC__ *,unsigned short,Geometry::CRect const &);
	HBITMAP__ * PremultiplyAlphaChannel(HBITMAP__ *,bool);
	long AddBackgroundForIcon(HBITMAP__ *,unsigned long const &,tagSIZE const &,tagSIZE const &,tagSIZE const &,HBITMAP__ * *);
	void FillRectARGB(HDC__ *,tagRECT const *,unsigned char,unsigned long,bool);
	void PreProcessDIB(int,int,tagRGBQUAD *,int);
	void RenderCenteredGlyph(HDC__ *,HFONT__ *,unsigned short,unsigned long,unsigned long,Geometry::CRect const &);
};

struct GameBarWatchDog
{
	GameBarWatchDog();
	long GameBarActivated(unsigned long);
	unsigned long GetGameBarPid();
	virtual ~GameBarWatchDog();
	void HandleGameBarTermination();
};

struct GameConfigInfo
{
	long CopyTo(GameConfigInfo *);
	~GameConfigInfo();
};

struct GameDVRTraceProvider
{
	static void BroadcastDVRComponent_ActivateForKGLUpdate_Done(long,unsigned long);
	static void BroadcastDVRComponent_ActivateForKGLUpdate_Queueing();
	static void BroadcastDVRComponent_CompleteInitializationTask_OnEntry();
	static void BroadcastDVRComponent_CompleteInitializationTask_OnExit();
	static void BroadcastDVRComponent_DisplayStateChangeWNFCallback(unsigned long);
	static void BroadcastDVRComponent_EnterBroadcastMode(unsigned short const *);
	static void BroadcastDVRComponent_EvaluateIfViewIsGame(void *,void *,bool,bool,bool,unsigned short const *,bool,bool);
	static void BroadcastDVRComponent_IsGameDVREnabled_Changed(bool);
	static void BroadcastDVRComponent_NoRecentGameActivity(unsigned __int64,unsigned long);
	static void BroadcastDVRComponent_OlderOneSettingsKGL();
	static void BroadcastDVRComponent_OnAddRemoveGameTask(void *,unsigned long);
	static void BroadcastDVRComponent_OnApplicationViewChanged_NewApp(void *,void *,bool,bool,bool,unsigned short const *);
	static void BroadcastDVRComponent_OnGameBarInitCompleteTask(void *,unsigned int);
	static void BroadcastDVRComponent_OnMessageTask(unsigned int,unsigned short const *);
	static void BroadcastDVRComponent_OnShellHookMessageTask(unsigned int,unsigned short const *);
	static void BroadcastDVRComponent_OneSettingsKGLDataNotification_OnExit(long,long,unsigned long,unsigned long);
	static void BroadcastDVRComponent_PowerNotificationCallback(unsigned long);
	static void BroadcastDVRComponent_ProcessCommandTask(unsigned int,unsigned short const *);
	static void BroadcastDVRComponent_RefreshGameListsTask(bool,bool);
	static void BroadcastDVRComponent_RegisterForKGLOneSettingsUpdates_Error(long);
	static void BroadcastDVRComponent_RegisteredKGLOneSettingsUpdates();
	static void BroadcastDVRComponent_RegistryChangeNotification_OnEntry(bool,bool,bool,bool);
	static void BroadcastDVRComponent_RegistryChangeNotification_OnExit(bool,bool,bool,bool);
	static void BroadcastDVRComponent_SendShellNotificationToDVR(unsigned long,unsigned short const *,void *,bool,bool,bool,unsigned long);
	static void BroadcastDVRComponent_SetCameraCaptureState(void *,unsigned char,unsigned char,unsigned short const *);
	static void BroadcastDVRComponent_SetMicrophoneCaptureState(void *,unsigned char,unsigned char,unsigned short const *);
	static void IsGameManager_AddKGLGameToConfigStore(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *);
	static void IsGameManager_DirChangeCallback(unsigned short const *);
	static void IsGameManager_GameDVR_Disabled(unsigned short const *);
	static void IsGameManager_KGLUpdated(unsigned int,int,unsigned int);
	static void IsGameManager_UpdateGameConfigStoreForStoreApp(long,unsigned short const *);
	static void IsGameManager_UpdateGameConfigStoreFromKGL(long,unsigned short const *,unsigned long);
	static void IsGameManager_UpdateGameConfigStoreFromKGL_GetError(long);
	static void IsGameManager_UpdateGameConfigStoreFromKGL_RemoveError(long);
	static void IsGameManager_UpdateGameConfigStoreFromKGL_UpdateError(long);
	static void Shell_BroadcastDVRComponent_SendShellNotificationToDVR<unsigned long &,unsigned short const * &,void * &,bool &,bool &,bool &,unsigned long &>(unsigned long &,unsigned short const * &,void * &,bool &,bool &,bool &,unsigned long &);
	static void Shell_BroadcastDVRComponent_SetCameraCaptureState<void * &,unsigned char &,unsigned char &,unsigned short const * &>(void * &,unsigned char &,unsigned char &,unsigned short const * &);
	static void Shell_BroadcastDVRComponent_SetMicrophoneCaptureState<void * &,unsigned char &,unsigned char &,unsigned short const * &>(void * &,unsigned char &,unsigned char &,unsigned short const * &);
	static void Shell_IsGameManager_AddKGLGameToConfigStore<unsigned short const * &,unsigned short const * &,unsigned short const * &,unsigned short const * &>(unsigned short const * &,unsigned short const * &,unsigned short const * &,unsigned short const * &);
	static void Shell_IsGameManager_DirChangeCallback<unsigned short const * &>(unsigned short const * &);
};

class GameDVR_OutputDebug
{
	static Windows::Internal::String s_TraceOutputFilePath;
	static unsigned char s_fOutputToDebugger;
	static unsigned long s_dwBytesWritten;
	static wil::critical_section s_csLock;
	static wil::unique_any_t<wil::details::unique_storage<wil::details::handle_null_resource_policy<int (*)(void *),&int CloseHandle(void *)> > > s_hTraceOutputFile;
public:
	GameDVR_OutputDebug(char const *);
	static long Initialize();
	static void EnsureTraceFileOpen(bool);
	void OutputString();
	void PrintType(char const *,unsigned char);
};

namespace GamingAudio
{
	class AppList
	{
		bool ClearInvalidSessions();
		bool MatchingSessionExistsInMasterList(SessionInfoItem *);
		long UpdateMasterListBasedOnSessionMap();
		void FetchAllSessions();
		void GetEndpointSessions(Microsoft::WRL::ComPtr<IMMDevice>);
		void GetSessionInfo(Microsoft::WRL::ComPtr<IAudioSessionControl2>);
	public:
		AppList();
		long GetMute(int,int *);
		long GetSessionDetails(Microsoft::WRL::ComPtr<Windows::Foundation::Collections::Internal::AgileVector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,0> > const &,Microsoft::WRL::ComPtr<Windows::Foundation::Collections::Internal::AgileVector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0> > const &,Microsoft::WRL::ComPtr<Windows::Foundation::Collections::Internal::AgileVector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,0> > const &,Microsoft::WRL::ComPtr<Windows::Foundation::Collections::Internal::AgileVector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,0> > const &,Microsoft::WRL::ComPtr<Windows::Foundation::Collections::Internal::AgileVector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,0> > const &,Microsoft::WRL::ComPtr<Windows::Foundation::Collections::Internal::AgileVector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,0> > const &);
		long GetVolume(int,int *);
		long RuntimeClassInitialize();
		long SetMute(int,int);
		long SetVolume(int,int);
		virtual long OnSessionCreated(IAudioSessionControl *);
		virtual ~AppList();
		void DeInit();
		void HandleSessionItemSimpleVolumeChanged(int);
		void RebuildList(bool);
	};

	struct SessionInfoItem
	{
		SessionInfoItem();
		long Init(AppList *,Microsoft::WRL::ComPtr<IAudioSessionControl2> const &);
		long SetMute(int);
		static std::atomic<int> s_sessionInstanceCount;
		virtual long OnChannelVolumeChanged(unsigned long,float * const,unsigned long,_GUID const *);
		virtual long OnDisplayNameChanged(unsigned short const *,_GUID const *);
		virtual long OnGroupingParamChanged(_GUID const *,_GUID const *);
		virtual long OnIconPathChanged(unsigned short const *,_GUID const *);
		virtual long OnSessionDisconnected(AudioSessionDisconnectReason);
		virtual long OnSimpleVolumeChanged(float,int,_GUID const *);
		virtual long OnStateChanged(_AudioSessionState);
		virtual ~SessionInfoItem();
		void DeInit();
		void HandleSimpleVolumeChanged(float,int,_GUID const *);
		void RelaySimpleVolumeChanged();
	};

	__MIDL___MIDL_itf_mmdeviceapi_0000_0000_0001 c_dataFlow;
	int EnumWindowsProc(HWND__ *,__int64);
	int GetWindowTitle(HWND__ *,unsigned short * *);
	void SessionInfoItemDeleter(GamingAudio::SessionInfoItem *);
};

class GamingOverlayExperienceManager
{
	struct BCastDVRNotifyGameModeChangeThreadParams
	{
		BCastDVRNotifyGameModeChangeThreadParams(BCastDVRNotifyGameModeChangeThreadParams const &);
		~BCastDVRNotifyGameModeChangeThreadParams();
	};

	struct TargetWindowContext
	{
		~TargetWindowContext();
	};

	HWND__ * GetParentIfCoreWindow(HWND__ *);
	Windows::Internal::GamingOverlay::GamingOverlayDisplayMode DetermineCurrentDisplayMode();
	__int64 WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	bool Pdh_Failed(long);
	long GetCpuSpeed(double *);
	long GetPathProcessNameFromProcessId(unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > &);
	long GetRawData(void * const,unsigned long * const,std::vector<_PDH_RAW_COUNTER_ITEM_W,std::allocator<_PDH_RAW_COUNTER_ITEM_W> > *);
	long InvokeOverlayDisplayModeEventTask();
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long OnViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long PerfDataCollectionThread();
	long QueryKey(unsigned __int64,HSTRING__ *,HSTRING__ *,unsigned char *,unsigned long *,unsigned long *);
	long SetInitialWindowPosition();
	long StartPerfDataCollectionThread();
	long StartWorkerWindowMessageThread();
	long StopWorkerWindowMessageThread(bool);
	long UpdateOverlayDisplayModeFullscreen(bool);
	long UpdateOverlayDisplayModeShared();
	long UpdateOverlayDisplayModeVisibility(bool);
	long WriteKey(unsigned __int64,HSTRING__ *,HSTRING__ *,unsigned char const *,unsigned long,unsigned long);
	long XboxLiveRegKeyWatcherThread();
	static __int64 StaticWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static int MonitorEnumProc(HMONITOR__ *,HDC__ *,tagRECT *,__int64);
	static unsigned long StaticNotifyBcastDvrOfGameModeChange(void *);
	static unsigned long StaticPerfDataCollectionThread(void *);
	static unsigned long StaticWorkerWindowMessageThread(void *);
	static unsigned long StaticWorkerWindowMessageThreadSetup(void *);
	static unsigned long StaticXboxLiveRegKeyWatcherThread(void *);
	static void StaticWinEventProc(HWINEVENTHOOK__ *,unsigned long,HWND__ *,long,long,unsigned long,unsigned long);
	unsigned __int64 GetDedicatedVideoMemoryCap();
	unsigned long WorkerWindowMessageThread(void *,HWND__ *);
	virtual ~GamingOverlayExperienceManager();
	void GetNonServiceProcessListAndIds(std::vector<std::pair<unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,unsigned long);
	void GetSortedUniqueProcessList(std::vector<std::pair<unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > const &,std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > &);
	void StopPerfThread();
	void WinEventProc(HWINEVENTHOOK__ *,unsigned long,HWND__ *,long,long,unsigned long,unsigned long);
public:
	GamingOverlayExperienceManager();
	long RuntimeClassInitialize();
	virtual long Close();
	virtual long GammaFlash(float,unsigned int,unsigned int,Windows::Foundation::IAsyncAction * *);
	virtual long GetActiveQuietHoursProfile(unsigned long *);
	virtual long GetAudioActiveSessionDetails(Windows::Foundation::Collections::IVectorView<int> * *,Windows::Foundation::Collections::IVectorView<HSTRING__ *> * *,Windows::Foundation::Collections::IVectorView<int> * *,Windows::Foundation::Collections::IVectorView<int> * *,Windows::Foundation::Collections::IVectorView<int> * *,Windows::Foundation::Collections::IVectorView<int> * *);
	virtual long GetCpuSpeedInstantaneous(double *);
	virtual long GetCpuUsagePercentChart(Windows::Foundation::Collections::IVectorView<double> * *);
	virtual long GetCurrentActiveQuietHoursProfileAllowedApps(Windows::Foundation::Collections::IVectorView<HSTRING__ *> * *);
	virtual long GetCurrentDisplayCoordinates(int *,int *,int *,int *);
	virtual long GetDedicatedGpuMemoryGbChart(Windows::Foundation::Collections::IVectorView<double> * *,double *);
	virtual long GetDedicatedGpuMemoryGbInstantaneous(double *,double *);
	virtual long GetDisplayMonitors(unsigned __int64,Windows::Foundation::Collections::IVectorView<HSTRING__ *> * *,int *);
	virtual long GetFramesPerSecondChart(unsigned long,Windows::Foundation::Collections::IVectorView<int> * *);
	virtual long GetFramesPerSecondInstantaneous(unsigned long,int *);
	virtual long GetMemoryUsageGbChart(Windows::Foundation::Collections::IVectorView<double> * *,double *);
	virtual long GetMemoryUsageGbInstantaneous(double *,double *);
	virtual long GetMute(int,int *);
	virtual long GetRelevantRunningProcessList(unsigned long,Windows::Foundation::Collections::IVectorView<HSTRING__ *> * *);
	virtual long GetTargetWindowRect(unsigned __int64,int *,int *,int *,int *);
	virtual long GetVolume(int,int *);
	virtual long HandleAudioChanged(int);
	virtual long Heartbeat();
	virtual long Hide();
	virtual long InitializeAudioHandlers();
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long LaunchUriWithForeground(Windows::Foundation::IUriRuntimeClass *);
	virtual long OnGameModeEnableChange(unsigned __int64,unsigned char);
	virtual long QueryKeyDWord(unsigned __int64,HSTRING__ *,HSTRING__ *,unsigned long *);
	virtual long QueryKeyString(unsigned __int64,HSTRING__ *,HSTRING__ *,HSTRING__ * *);
	virtual long ResetWindowRect();
	virtual long ResetWindowRegion();
	virtual long RestoreTargetAfterTakingFocus();
	virtual long SetAllowPointerActivation(unsigned char);
	virtual long SetCombinedWindowRegion(unsigned int,Windows::Foundation::Rect *);
	virtual long SetForeground();
	virtual long SetGameBarDisplayMonitor(int);
	virtual long SetMute(int,int);
	virtual long SetVolume(int,int);
	virtual long SetWindowRect(int,int,int,int);
	virtual long Show();
	virtual long ShutdownAudioHandlers();
	virtual long ShutdownServices(IProfferService *);
	virtual long StartListeningForTargetWindowMoved(unsigned __int64);
	virtual long StopListeningForTargetWindowMoved(unsigned __int64);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TriggerOnLastFocusedWindow();
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
	virtual long WriteKeyDWord(unsigned __int64,HSTRING__ *,HSTRING__ *,unsigned long);
	virtual long WriteKeyString(unsigned __int64,HSTRING__ *,HSTRING__ *,HSTRING__ *);
	virtual long add_AudioActiveSessionChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int> *,EventRegistrationToken *);
	virtual long add_DisplaySizeChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long add_OverlayDisplayFullscreenChanged(Windows::Foundation::IEventHandler<bool> *,EventRegistrationToken *);
	virtual long add_TargetWindowMoved(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64> *,EventRegistrationToken *);
	virtual long add_XboxLiveKeyChanged(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *> *,EventRegistrationToken *);
	virtual long get_OverlayDisplayMode(Windows::Internal::GamingOverlay::GamingOverlayDisplayMode *);
	virtual long remove_AudioActiveSessionChanged(EventRegistrationToken);
	virtual long remove_DisplaySizeChanged(EventRegistrationToken);
	virtual long remove_OverlayDisplayFullscreenChanged(EventRegistrationToken);
	virtual long remove_TargetWindowMoved(EventRegistrationToken);
	virtual long remove_XboxLiveKeyChanged(EventRegistrationToken);
};

struct GamingOverlayExperienceManagerFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

class GammaFlashAsyncOperation
{
protected:
	virtual long DoWork();
	virtual void OnCancelOrCompletion(bool);
public:
	GammaFlashAsyncOperation();
	long RuntimeClassInitialize(float,unsigned int,unsigned int);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetResults();
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

namespace Geometry
{
	struct CPoint
	{
		static CPoint ClientToScreen(HWND__ *,tagPOINT const &);
	};

	struct CRect
	{
		bool Contains(tagPOINT const &);
		bool IsEmpty();
		static CRect MulDiv(tagRECT const &,int,int);
	};

	struct CSize
	{
		static CSize MulDiv(tagSIZE const &,int,int);
	};

};

class GlobalInterfaceTable
{
	static IGlobalInterfaceTable * s_pGlobalInterfaceTable;
	static long s_Retrieve();
public:
	static long Marshal(IUnknown *,_GUID const &,unsigned long *);
	static void Revoke(unsigned long);
};

struct GlobalRudeWindowManagerClassFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

struct GlobalRudeWindowNotifications
{
	GlobalRudeWindowNotifications();
	virtual long OnRudeWindowStateChange(IImmersiveMonitor *,RudeWindowStateChangeFlags,HWND__ *);
	virtual long Register(IGlobalRudeWindowNotifications *,unsigned long *);
	virtual long Unregister(unsigned long);
};

struct GroupNavigationBehavior
{
	virtual long GetCallbackFilters(DuiBehaviorFilters::Flags *);
	virtual long OnGetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long,DirectUI::Element * *);
};

namespace HashAlgorithms
{
	class PatentHash
	{
		bool CS64_Reversible(unsigned int const *,unsigned int,unsigned int const *,unsigned int *);
		bool CS64_WordSwap(unsigned int const *,unsigned int,unsigned int const *,unsigned int *);
		virtual long BuildPatentHash(void const *,unsigned int,unsigned int const *,HASH_BUFFER *);
	};

	class PatentHashBase
	{
	protected:
		long EncodeBase64(void const *,unsigned long,unsigned short *,unsigned long,unsigned long *);
	public:
		long BuildHashStrings(void const *,unsigned int,HASH_RESULT *,HASH_RESULT *);
	};

};

class HideWallpaperIconsObject
{
	bool IsSolidColorBackground();
public:
	long RuntimeClassInitialize();
};

class HostAppBackground
{
	static __int64 s_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	long CreateBackgroundWindow();
	~HostAppBackground();
};

class HostAppEnvironment
{
	__int64 _LowLevelKeyboardProc(int,unsigned __int64,__int64);
	long _SetupInputSwitchServer(void *);
	long _SetupVolumeControlServer(void *);
	static unsigned long const * const s_WinHotkeys;
public:
	long Setup();
	static HostAppEnvironment & GetInstance();
	static __int64 s_LowLevelKeyboardProc(int,unsigned __int64,__int64);
	void Cleanup(bool);
	~HostAppEnvironment();
};

class HostedApplication
{
	long GetCurrentViewWindow(HWND__ * *);
public:
	HostedApplication();
	long RuntimeClassInitialize(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,IPrivilegedWindowOwnershipOperations *);
	virtual long Close();
	virtual long GetHostId(unsigned __int64 *);
	virtual long GetViewInstanceId(unsigned long *);
	virtual long NotifyBridgeWindow(unsigned long);
	virtual long SetParentWindow(HWND__ *);
	virtual long SetPosition(tagRECT const *);
	virtual long SetVisible(int);
	virtual long SetWindowOwner(HWND__ *);
};

class HostedApplicationExperienceManager
{
	long ActivateApplicationWithOptions(unsigned short const *,unsigned short const *,IInspectable *,IHostedApplicationActivationManagerPrivateCallbacks *,ActivateApplicationForExperienceOptions,IInspectable *,unsigned __int64 *);
	long HandleViewCreated(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long HandleViewDestroyed(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long OnCallerProcessClose(unsigned int);
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long OnViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long _RecoverViews(IViewEventDispatcherCrashRecovery *);
	long _RegisterMessages(IServiceProvider *);
	long _ResetActivationTimeoutPolicy(unsigned int);
	long _StartActivationTimeoutPolicy(unsigned int,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _UnregisterMessages(IServiceProvider *);
	std::shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> GetContextForId(unsigned long);
	std::shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> GetContextForView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	void BoostViewPriority(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	void UnboostViewPriority(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
public:
	HostedApplicationExperienceManager();
	long RuntimeClassInitialize();
	static unsigned int s_resetActivationTimeoutPolicyMessage;
	virtual long ActivateApplication(unsigned short const *,unsigned short const *,IInspectable *,IHostedApplicationActivationManagerPrivateCallbacks *,IInspectable *);
	virtual long ActivateApplicationForDesigner(unsigned short const *,unsigned short const *,IInspectable *,IHostedApplicationActivationManagerPrivateCallbacks *);
	virtual long ActivateForCoreApplicationBridge(unsigned short const *,unsigned short const *,IInspectable *,IHostedApplicationActivationManagerPrivateCallbacks *,unsigned __int64 *);
	virtual long CreateLaunchActivationArgs(unsigned short const *,unsigned short const *,IInspectable * *);
	virtual long CreateOOPActivationArgs(unsigned short const *,IInspectable * *);
	virtual long GetCoreApplicationForContextId(unsigned int,IInspectable * *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long PurgeUnrecoveredViews();
	virtual long ReconnectBridgeToHostedApplication(HWND__ *,unsigned long,IHostedApplication * *);
	virtual long RevokeActivationTimeoutPolicy(unsigned int);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~HostedApplicationExperienceManager();
};

struct HotKeyRegistrationFilter
{
	virtual bool IsHotKeyAllowed(BlockHotKeyRegistrationFlags);
	virtual void FilterBlockedHotKeys(unsigned int,IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const,std::vector<IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const,std::allocator<IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const> > &);
};

class HotKeyRegistrationFilterFactory
{
	bool IsMultiAppAssignedAccess();
public:
	std::unique_ptr<IHotKeyRegistrationFilter,std::default_delete<IHotKeyRegistrationFilter> > CreateInstance();
};

class HotkeyHandler
{
	HotkeyHandler::SNAP_STATE _DetermineNewSnapState(HotkeyHandler::SnapAction,HotkeyHandler::HotkeyCommand);
	bool _ConvertSnapRegionToSnapLocation(SnapRegion,SNAP_LOCATION *);
	long _SnapWindowToLocation(HWND__ *,IImmersiveMonitor *,SNAP_LOCATION);
	static HotkeyHandler::SNAP_STATE const (* s_rgDefaultHotkeyStateMap)[4];
	static HotkeyHandler::SNAP_STATE const (* s_rgHotkeyStateMapTabletMode)[4];
	void _OnHotkeyModeEnd(ISnappedWindow *,ARRANGEMENT_HOTKEY_DISAMBIGUATION);
	void _ResetState();
public:
	HotkeyHandler();
	long RuntimeClassInitialize(IPriviledgedPositioner *,ISnapAssistController *,IImmersiveMonitorManager *,IApplicationViewCollection *,IImmersiveSettingsCache *,ITabletModeController *,IInputTracker *);
	virtual bool IsModeActive();
	virtual long HandleHotkey(unsigned int,unsigned int,ARRANGEMENT_HOTKEY_DISAMBIGUATION);
	virtual void SetForegroundAppView(IApplicationView *);
	virtual ~HotkeyHandler();
};

struct IActionSpaceFlow
{
	IActionSpaceFlow();
};

struct IActivationFactory
{
	IActivationFactory();
};

struct IApplicationInvocableFlow
{
	IApplicationInvocableFlow();
};

struct IApplicationViewChangeListener
{
	IApplicationViewChangeListener();
};

struct IApplicationViewOperation
{
	IApplicationViewOperation();
};

struct IApplicationViewTitlebarConfiguration
{
	IApplicationViewTitlebarConfiguration();
};

struct IApplicationViewVisibilityDebouncedNotificationService
{
	IApplicationViewVisibilityDebouncedNotificationService();
};

struct IAsyncCallback
{
	IAsyncCallback();
};

struct IAvailableMiracastDeviceEnumerator
{
	IAvailableMiracastDeviceEnumerator();
};

struct IAvailableMiracastDeviceEnumeratorListener
{
	IAvailableMiracastDeviceEnumeratorListener();
};

struct IBindStatusCallback
{
	IBindStatusCallback();
};

struct IClassFactory
{
	IClassFactory();
};

struct ICloseRequestedArgsPrivate
{
	ICloseRequestedArgsPrivate();
};

struct ICommandInvoker
{
	unsigned long Release();
};

struct IContractRegistrationInfo
{
	IContractRegistrationInfo();
};

struct ICoreWindowFactoryPriv
{
	ICoreWindowFactoryPriv();
};

struct IDesktopNotificationActivator
{
	IDesktopNotificationActivator();
};

struct IDesktopVisibilityChangesNotification
{
	IDesktopVisibilityChangesNotification();
};

struct IDeviceElementSourceSink
{
	IDeviceElementSourceSink();
};

struct IDeviceUninstaller
{
	IDeviceUninstaller();
};

struct IDeviceUninstallerListener
{
	IDeviceUninstallerListener();
};

struct IDevicesCharmProjectionManager
{
	IDevicesCharmProjectionManager();
};

struct IDevicesCharmProjectionManagerEventHandler
{
	IDevicesCharmProjectionManagerEventHandler();
};

struct IDevicesCharmProjectionManagerEventHandlerAdapter
{
	IDevicesCharmProjectionManagerEventHandlerAdapter();
};

struct IDevicesCharmUISession
{
	IDevicesCharmUISession();
};

struct IDevicesFlow
{
	IDevicesFlow();
};

struct IDevicesFlowProvider
{
	IDevicesFlowProvider();
};

struct IDialogManager
{
	IDialogManager();
};

struct IDisableWindow
{
	IDisableWindow();
};

struct IDuiThreadRef
{
	IDuiThreadRef();
};

struct IEnumObjects
{
	IEnumObjects();
};

struct IEnumUnknown
{
	IEnumUnknown();
};

struct IFileSystemBindData2
{
	IFileSystemBindData2();
};

struct IFullScreenPositionerNotification
{
	IFullScreenPositionerNotification();
};

struct IGITCookieObject
{
	IGITCookieObject();
};

struct IGestureProvider
{
	IGestureProvider();
};

struct IHM_NOTIFICATION_DATA
{
	IHM_NOTIFICATION_DATA(HWND__ *,IHM_NOTIFICATION_TYPE,tagRECT const *,IHM_DISPLAY_MODE,tagRECT const *,tagRECT const *);
};

struct IImageDownloadCallback
{
	IImageDownloadCallback();
};

struct IImageDownloadTask
{
	IImageDownloadTask();
};

struct IImageDownloadedEventHandler
{
	IImageDownloadedEventHandler();
};

struct IImmersiveAppCrusher
{
	IImmersiveAppCrusher();
};

struct IImmersiveAppCrusherNotification
{
	IImmersiveAppCrusherNotification();
};

struct IImmersiveAppCrusherPriv
{
	IImmersiveAppCrusherPriv();
};

struct IImmersiveApplicationNotification
{
	IImmersiveApplicationNotification();
};

struct IImmersiveLayoutChanges
{
	IImmersiveLayoutChanges();
};

struct IImmersiveSettingsCache
{
	IImmersiveSettingsCache();
};

struct IImmersiveShellComponent
{
	IImmersiveShellComponent();
};

struct IImmersiveShellHookNotification
{
	IImmersiveShellHookNotification();
};

struct IImmersiveShellHookService
{
	IImmersiveShellHookService();
};

struct IImmersiveWindowMessageNotification
{
	IImmersiveWindowMessageNotification();
};

class IInputDialStateModelHandler
{
protected:
	~IInputDialStateModelHandler();
};

struct IInputObject
{
	IInputObject();
};

struct IInspectable
{
	IInspectable();
};

struct ILaunchSourceAppUserModelId
{
	ILaunchSourceAppUserModelId();
};

struct ILaunchSourceViewSizePreference
{
	ILaunchSourceViewSizePreference();
};

struct ILaunchTargetViewSizePreference
{
	ILaunchTargetViewSizePreference();
};

struct ILauncherContract
{
	ILauncherContract();
};

struct ILockScreenAppRunningCallback
{
	ILockScreenAppRunningCallback();
};

struct ILockScreenApplicationManager
{
	ILockScreenApplicationManager();
};

struct ILockScreenApplicationUtil
{
	ILockScreenApplicationUtil();
};

struct IMMNotificationClient
{
	IMMNotificationClient();
};

struct IMarshal
{
	IMarshal();
};

struct IMediaPlaybackDataChangedEventHandler
{
	IMediaPlaybackDataChangedEventHandler();
};

struct IMiracastConnection
{
	IMiracastConnection();
};

struct IMiracastConnectionEventHandler
{
	IMiracastConnectionEventHandler();
};

struct IMiracastConnectionEventHandlerAdapter
{
	IMiracastConnectionEventHandlerAdapter();
};

struct IMiracastConnectionEventHwndForwarder
{
	IMiracastConnectionEventHwndForwarder();
};

struct IMiracastDeviceChallenge
{
	IMiracastDeviceChallenge();
};

struct IMiracastDeviceChallengeListener
{
	IMiracastDeviceChallengeListener();
};

struct INotificationActivationCallback
{
	INotificationActivationCallback();
};

struct INowPlayingSessionManagerEventHandler
{
	INowPlayingSessionManagerEventHandler();
};

struct IObjectCollection
{
	IObjectCollection();
};

struct IOleCommandTarget
{
	IOleCommandTarget();
};

struct IOleWindow
{
	IOleWindow();
};

struct IPersist
{
	IPersist();
};

struct IPopupEventHandler
{
	IPopupEventHandler();
};

struct IPrivilegedOperationsConsumer
{
	IPrivilegedOperationsConsumer();
};

struct IProjectCharmSession
{
	IProjectCharmSession();
};

struct IProjectionContext
{
	IProjectionContext();
};

struct IQuietHoursPolicy
{
	IQuietHoursPolicy();
};

struct IRegistryChangeListener
{
	IRegistryChangeListener();
};

struct IRudeWindowManagerEvents
{
	IRudeWindowManagerEvents();
};

struct IRunningShareSink
{
	IRunningShareSink();
};

struct IRunningShareUI
{
	IRunningShareUI();
};

struct ISearchServicesProvider
{
	ISearchServicesProvider();
};

struct IServiceProvider
{
	IServiceProvider();
};

struct ISettingChangedEventHandler
{
	ISettingChangedEventHandler();
};

struct IShareAndDevicesFlow
{
	IShareAndDevicesFlow();
};

struct ISharePlatformHost
{
	ISharePlatformHost();
};

struct IShellPositionerCallback
{
	IShellPositionerCallback();
};

struct IShellTargetingContractManager
{
	IShellTargetingContractManager();
};

struct IShellTargetingTracker
{
	IShellTargetingTracker();
};

struct IShellTargetingTrackerPrivate
{
	IShellTargetingTrackerPrivate();
};

struct ITimerCallback
{
	ITimerCallback();
};

struct IUnknown
{
	IUnknown();
};

struct IWakeUpOnTaskCompletion
{
	IWakeUpOnTaskCompletion();
};

struct IWeakReferenceSource
{
	IWeakReferenceSource();
};

struct IWpnToastFeedback
{
	IWpnToastFeedback();
};

namespace ImageLoaders
{
	class CDCompVisualImageLoader
	{
		long LoadBitmapHelper(IWICBitmapDecoder *,tagSIZE *,ID2D1Bitmap1 * *);
	public:
		long CreateVisualFromBitmap(ID2D1Bitmap1 *,tagSIZE const &,IDCompositionVisual * *);
		long Initialize(ID2D1DeviceContext *,IDCompositionDevice *);
		long LoadBitmapByPath(unsigned short const *,tagSIZE *,ID2D1Bitmap1 * *);
		~CDCompVisualImageLoader();
	};

};

namespace ImmersiveApplicationLayout
{
	bool IsLegacySnappedApp(IImmersiveApplication *);
};

namespace ImmersiveAssociationHelpers
{
	bool IsProgIdValid(unsigned short const *,unsigned short const *);
	long GetAppProgIdForProtocol(unsigned short const *,unsigned short const *,unsigned short * *);
	long GetAppUserModelIdAndExtensionId(HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ * *,HSTRING__ * *);
	long GetTargetViewPreference(unsigned short const *,unsigned short const *,APPLICATION_VIEW_SIZE_PREFERENCE *);
};

namespace ImmersiveContextMenuHelper
{
	CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > * _RetrieveParentArrayFromWindow(HWND__ *);
	ContextMenuRenderingData * GetContextMenuDataForItem(HWND__ *,unsigned __int64,unsigned int);
	bool CanApplyOwnerDrawToMenu(HMENU__ *,HWND__ *);
	bool ShouldUseDarkTheme(ImmersiveContextMenuOptions);
	long ApplyOwnerDrawToMenu(HMENU__ *,HWND__ *,tagPOINT *,ImmersiveContextMenuOptions,CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > &);
	long OverrideBackgroundColor(HMENU__ *,HWND__ *,ImmersiveContextMenuOptions);
	long StoreContextMenuDataForItem(HWND__ *,unsigned __int64,unsigned int,ContextMenuRenderingData *);
	long _GetRenderingDataForMenuItem(DPIToPPIHelpers::ScaleType,tagMENUITEMINFOW,unsigned short const *,tagPOINT *,CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > &,ContextMenuRenderingData *,ImmersiveContextMenuOptions,ContextMenuRenderingData * *);
	long _StoreParentArrayOnWindow(HWND__ *,CSimplePointerArrayNewMem<ContextMenuRenderingData,CSimpleArrayStandardCompareHelper<ContextMenuRenderingData *> > *);
	unsigned int _GetDpiForMonitorFromPoint(tagPOINT *);
	void * GetCurrentThemeForOverrides(HWND__ *,ImmersiveContextMenuOptions,bool);
	void HandleMergedMenus(HMENU__ *,HWND__ *);
	void RemoveContextMenuDataForItem(HWND__ *,unsigned __int64,unsigned int);
	void RemoveOwnerDrawFromMenu(HMENU__ *,HWND__ *);
	void _RemoveOwnerDrawFromMenuWorker(HMENU__ *,HWND__ *);
};

namespace ImmersiveIcons
{
	RESOURCE_CONTRAST GetContrastForParams(ImmersiveIcons::LoadIconParams const &);
	RESOURCE_CONTRAST GetMrtContrast();
	RESOURCE_SCALE DpiToMrtScale(unsigned int);
	long CreateIconBitmap(tagSIZE,tagSIZE,tagSIZE,unsigned long,bool,ImmersiveIcons::IconData2 const &,bool,HBITMAP__ * *);
	long GetIconData(unsigned short const *,ImmersiveIcons::LoadIconParams const &,ImmersiveIcons::IconData2 *);
	long InitResourceContextForAllThemes(ImmersiveIcons::LoadIconParams const &,IResourceContext *);
	long InitResourceContextForLightTheme(ImmersiveIcons::LoadIconParams const &,IResourceContext *);
	long LoadImmersiveIcon(tagSIZE,tagSIZE,tagSIZE,unsigned long,unsigned int,bool,unsigned short const *,HBITMAP__ * *);
	long _LoadImmersiveIcon(unsigned short const *,ImmersiveIcons::LoadIconParams const &,HBITMAP__ * *,ImmersiveIcons::IconData2 *);
};

namespace ImmersiveIconsLoggingTelemetry
{
	class LoadIconW
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~LoadIconW();
	};

};

struct ImmersiveMonitorInfo
{
	ImmersiveMonitorInfo(unsigned short const *,unsigned long,bool,tagRECT const * const,unsigned long,bool,IMMERSIVE_MONITOR_FILTER_FLAGS);
	void ReconcileMonitorConnection(bool,bool,tagRECT const * const,unsigned long);
	~ImmersiveMonitorInfo();
};

namespace ImmersiveMultimonHelpers
{
	long IsLauncherVisibleOnMonitor(IUnknown *,IImmersiveLauncher *,bool *);
};

namespace ImmersiveOwnedWindowHelper
{
	int EnumImmersiveComponentOwnedWindows(HWND__ *,__int64);
	long RepositionOwnedWindows(HWND__ *,tagRECT const * const);
};

namespace ImmersivePopupMenuHelpers
{
	long SetStringIdOnUICommand(unsigned short const *,Windows::UI::Popups::IUICommand *);
};

struct ImmersiveShellComponentCreator
{
	virtual long CreateComponent(_GUID const &,_GUID const &,void * *);
};

class InkWorkspaceHostedAppsManager
{
	long CreateCopiedThumbnail(IWICBitmap *,IWICBitmap * *);
public:
	InkWorkspaceHostedAppsManager();
	long RuntimeClassInitialize();
	virtual long GetThumbnailForInkWorkspace(unsigned short const *,IWICBitmap * *);
	virtual long SetThumbnail(unsigned short const *,IWICBitmap *);
};

namespace InkWorkspaceHostedAppsManagerTelemetry
{
	class GetThumbnailForInkWorkspaceActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~GetThumbnailForInkWorkspaceActivity();
	};

	class SetThumbnailActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~SetThumbnailActivity();
	};

};

namespace InputDial
{
	struct InputDialTelemetry
	{
		class DeleteFontFileCacheActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~DeleteFontFileCacheActivity();
		};

		class FindApplicationControllerActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			void Stop(HWND__ *,HWND__ *,bool,HWND__ *);
			~FindApplicationControllerActivity();
		};

		class InitializeDisplayChangeNotificationActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~InitializeDisplayChangeNotificationActivity();
		};

		class InitializeGlobalToolsActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~InitializeGlobalToolsActivity();
		};

		class InitializeMessageServiceEventsSourceActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~InitializeMessageServiceEventsSourceActivity();
		};

		class InvokeCustomInputDialMenuItem
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity(unsigned short const *);
			~InvokeCustomInputDialMenuItem();
		};

		class MenuActivationToShownActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity(int);
			~MenuActivationToShownActivity();
		};

		class MenuDeactivationToHiddenActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity(int);
			~MenuDeactivationToHiddenActivity();
		};

		class OnActivationChangedActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~OnActivationChangedActivity();
		};

		class OnAppidChangedActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~OnAppidChangedActivity();
		};

		class OnViewPropertiesChangingActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~OnViewPropertiesChangingActivity();
		};

		class PopulateMenuActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~PopulateMenuActivity();
		};

		class ProcessItemClickDownEventActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~ProcessItemClickDownEventActivity();
		};

		class ProcessItemClickUpEventActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~ProcessItemClickUpEventActivity();
		};

		class ProcessRotationEventActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~ProcessRotationEventActivity();
		};

		class ProcessTouchEventActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~ProcessTouchEventActivity();
		};

		class SendAndResetJsonPayloadActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~SendAndResetJsonPayloadActivity();
		};

		class SendReactivateEventActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~SendReactivateEventActivity();
		};

		class StartDeviceListenerActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~StartDeviceListenerActivity();
		};

		class VolumeChangeActivity
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~VolumeChangeActivity();
		};

		static void OnScreenByContactMove<long &,long &>(long &,long &);
		static void OnScreenByContactStart<long &,long &>(long &,long &);
		static void OnScreenEnd();
		static void ToolUsedCount<unsigned int &>(unsigned int &);
	};

	struct InputDialTraceProvider
	{
		static void Info(char const *,char const *,unsigned int,char const *,...);
		virtual void OnErrorReported(bool,wil::FailureInfo const &);
		void InfoV_(char const *,char const *,unsigned int,char const *,char *);
	};

};

struct InputDialAppToolsInfo
{
	~InputDialAppToolsInfo();
};

namespace InputDialCommon
{
	class InputDialDeviceObserver
	{
		static void s_DevQueryCallback(HDEVQUERY__ *,void *,_DEV_QUERY_RESULT_ACTION_DATA const *);
	public:
		long Setup();
	};

};

struct InputDialCustomizedAppToolsInfo
{
	~InputDialCustomizedAppToolsInfo();
};

struct InputDialMenuItem
{
	InputDialMenuItem & operator=(InputDialMenuItem const &);
	InputDialMenuItem(InputDialMenuItem const &);
	InputDialMenuItem(InputDialToolInfo const &);
	~InputDialMenuItem();
};

class InputDialMenuStateModel
{
	long _AddGlobalTool(InputDialCommon::InputDialMenuGlobalTool,unsigned int,unsigned short const *,std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > *);
	long _DismissMenu();
	long _DoesMenuNeedsRefreshing(std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > const &,bool *);
	long _EnsureMenuPopulated();
	long _ProcessClickDismissMenuEvent();
	long _ProcessClickEvent();
	long _ProcessEnsureMenuIsDismissedEvent();
	long _ProcessFocusChangedEvent(HWND__ *);
	long _ProcessFocusChangedEventAsync(HWND__ *);
	long _ProcessHideAnimationCompletedEvent();
	long _ProcessIHMShowEvent();
	long _ProcessIdleStateFlagsChanged(int);
	long _ProcessItemClickDownEvent(int);
	long _ProcessItemClickUpEvent(int);
	long _ProcessMultitaskViewEvent(bool);
	long _ProcessMultitaskViewEventAsync(bool);
	long _ProcessOnViewHiddenEvent();
	long _ProcessOnViewShownEvent();
	long _ProcessRotationEvent(int);
	long _ProcessSystemClickEvent();
	long _ProcessToolPreviewDismissTimerExpiredEvent();
	long _ProcessTouchEvent();
	long _RefreshMenuAndStoreAppToolsIdCollection(std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > &);
	long _SendCustomToolActivationToApp(int);
	long _SetInputDialFocusToCurrentlyActiveTool(HWND__ *);
	long _SetInputDialFocusToCurrentlyActiveTool(InputDialAppToolsInfo const &);
	long _SetMenuVisibility(MenuVisibility);
	long _SetupToolPreview();
	long _UpdateMenuWithProgrammaticToolActivation();
	long _UpdateToolUsedTelemetry(bool);
	void _CheckAndFixUIStateTimeout(bool *);
	void _ResetViewToDestroyedState();
public:
	InputDialMenuStateModel(IInputDialStateModelHandler *);
	long AbortMenuShowActivity();
	long AddCustomMenuSection(HWND__ *,HWND__ *,Windows::Foundation::IEventHandler<IInspectable *> *,EventRegistrationToken *,unsigned int *);
	long AddFontIconEntryToCustomMenuSection(HWND__ *,unsigned int,unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned int);
	long AddIconEntryToCustomMenuSection(HWND__ *,unsigned int,unsigned int,unsigned short const *,Windows::Storage::Streams::IRandomAccessStreamReference *,unsigned int);
	long AddImagePixelBufferToMenuItem(InputDialMenuItem *,Windows::Storage::Streams::IRandomAccessStreamReference *);
	long AddKnownIconEntryToCustomMenuSection(HWND__ *,unsigned int,unsigned int,unsigned short const *,unsigned int,unsigned int);
	long GetActiveItem(HWND__ *,unsigned int *,unsigned int *);
	long GetCurrentMenuItems(std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > *);
	long Init();
	long LoadSettingsDataOnDemand();
	long ProcessEvent(EventType);
	long ProcessEvent(EventType,EventData *);
	long RemoveAllItemsFromCustomMenuSection(HWND__ *,unsigned int);
	long RemoveCustomMenuSection(HWND__ *,unsigned int,EventRegistrationToken);
	long RemoveItemFromCustomMenuSection(HWND__ *,unsigned int,unsigned int);
	long SelectPreviouslyActiveMenuItem(HWND__ *,bool *);
	long SelectSystemMenuItem(HWND__ *,unsigned int,bool *);
	long SetActiveItemForCustomMenuSection(HWND__ *,unsigned int,unsigned int);
	long SetActiveToHighlightedTool();
	long SetDefaultMenuItems(HWND__ *,Windows::Foundation::Collections::IIterable<Windows::UI::Input::RadialControllerSystemMenuItemKind> *);
	long UpdateShowMenuActivityState();
	long UpdateToolIndexOnClick(int);
	void UpdateActiveApp();
	void UpdateCurrentlyActiveToolInfo();
	void UpdateToolIndexOnRotation(int);
	~InputDialMenuStateModel();
};

struct InputDialPlatformHelpers
{
	static long SetInputDialAngleParameters(tagINTERACTIVECTRL_HAPTICS_MODE,int);
	static long SetInputDialFocusToTargetWindow(HWND__ *);
	static long SetInputDialFocusToTargetWindow(HWND__ *,tagINTERACTIVECTRL_PROMOTION_TYPE);
};

struct InputDialToolInfo
{
	InputDialToolInfo & operator=(InputDialToolInfo const &);
	InputDialToolInfo(InputDialToolInfo const &);
	~InputDialToolInfo();
};

struct InputDialUtilityHelpers
{
	static long DeleteCustomFontFileCache();
};

class InputGlobalToolHandler
{
	long _AppSwitch(bool);
	long _BringUpMultitaskView(bool,bool *);
	long _ChangeBrightness(int);
	long _SetInputDialFocusToActiveGlobalTool(InputDialCommon::InputDialMenuGlobalTool const &,bool);
	long _ShowAudioFlyoutController(unsigned int,bool);
	long _UpdateInputDialAngleParameters(InputDialCommon::InputDialMenuGlobalTool);
	static long _ChangeVolume(int);
	static long _ExecuteCustomAction(std::vector<int,std::allocator<int> > const &);
	static long _SendKeyboardKeyCombo(unsigned short,unsigned short);
	static long _SendKeyboardVirtualKey(unsigned short);
	static long _ToggleVolumeMuted(InputGlobalToolHandler::MuteChangeFlag,IAudioEndpointVolume *);
	static long _UndoRedo(unsigned short const *,int);
	static void _BrightnessEventFiredCallback(void *);
public:
	InputGlobalToolHandler();
	bool IsTaskViewVisible();
	long ExecuteClickCommand();
	long ExecuteCommand(int);
	long GetVirtualKeysForCurrentApp(Windows::Data::Input::RadialControllerActionTriggers *,bool *);
	long ResetInputDialAngleParameters();
	long SetActiveTool(InputDialCommon::InputDialMenuGlobalTool const &,bool);
	long SetAppId(unsigned short const *);
	long SetCustomActions(std::vector<int,std::allocator<int> > &,std::vector<int,std::allocator<int> > &,std::vector<int,std::allocator<int> > &);
	long SetPerAppCustomActions(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > > const &);
	static bool IsNarratorOn();
	static bool IsStringEqualIgnoreCase(unsigned short const *,unsigned short const *);
	static long FindPerAppCustomActionFromSettingsData(unsigned short const *,std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > > const &,bool *,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > *);
	static long GetGlobalToolActions(unsigned short const *,InputDialCommon::InputDialMenuGlobalTool,bool *,bool,std::vector<int,std::allocator<int> > *);
	static long IsMediaPlaying(bool *);
	~InputGlobalToolHandler();
};

class InputTracker
{
	virtual InputTrackerType GetLastCommittedInputTypeForApplication(IApplicationView *);
	virtual void CommitTrackedInputTypeForApplication(IApplicationView *);
	virtual void Reset();
	virtual void SetTrackedInputTypeForApplication(IApplicationView *,InputTrackerType);
};

class IsGameManager
{
	long CheckGameConfigStoreForIsGameFromAppId(unsigned short const *,bool *,bool *,_GUID *,unsigned long *);
	long CheckGameConfigStoreForIsGameFromProcessId(unsigned long,bool *,bool *,unsigned long *,_GUID *,Windows::Internal::String *);
	long CheckIsExplorer(unsigned long,bool *);
	long CheckKGLForIsGameFromAppId(unsigned short const *,_GUID,unsigned long,bool *,_GUID *);
	long CheckKGLForIsGameFromProcessId(unsigned long,_GUID,unsigned long,bool *,Windows::Internal::String *,_GUID *);
	long CheckStateRepositoryForIsGameFromAppId(unsigned short const *,bool *,_GUID *,unsigned long *);
	long CompareOSVersion(unsigned short *,unsigned long,bool *);
	long EvaluateUseExperimentalKGL(bool *);
	long GetAutoGameModeFromGameConfigStore(_GUID,GameConfigInfo *);
	long GetGameEntryAttribs(KnownGameList::IGameEntry *,bool *,bool *,bool *,bool *,bool *,bool *,unsigned short *,unsigned long *);
	long GetGlobalStringFromGameConfigStore(ExecutionModel::GlobalProperty_t,Windows::Internal::String *);
	long GetKGLLocationForApp(unsigned short const *,unsigned short const *,Windows::Internal::String *);
	long GetProcessFullPathFromProcessId(unsigned long,Windows::Internal::String *);
	long GetStringFromGameConfigStore(_GUID,ExecutionModel::GameProperty_t,Windows::Internal::String *);
	long IsEnabledInGameConfigStore(_GUID,bool *,bool *,unsigned long *);
	long IsGameEnabled(KnownGameList::IGameEntry *,bool *);
	long LoadKGLFromGameDVRFolder(bool);
	long RegisterKGLLocationForNotifications(KGLUpdateLocationInfo *);
	long ScanKGLForFSECompat();
	long UpdateGameConfigStoreForStoreApp(unsigned short const *,bool,_GUID *,unsigned long *);
	long UpdateGameConfigStoreFromKGL();
	long UpdateGameConfigStoreFromKGL(KnownGameList::IGameEntry *,_GUID,unsigned long,bool,Windows::Internal::String *,_GUID *);
	long UpdateGameFullPathInGameConfigStore(unsigned long,_GUID);
	long UpdateGameLastRunTime(_GUID);
	static IsGameManager * _pStaticThis;
	static void DirChangeCallback(void *,unsigned char);
	void DelayGameConfigStoreUpdate(bool *);
	void SendAddGameToConfigStoreTelemetry(unsigned long);
	void UpdateGameDVRKGLCopy(unsigned long,bool *);
public:
	IsGameManager();
	long RuntimeClassInitialize();
	virtual bool KGLIsLoaded();
	virtual long GetDefaultGameModeProfile(unsigned long *,unsigned __int64 *,unsigned long *,bool *,bool *);
	virtual long GetGameDvrEnabledProperty(bool *);
	virtual long GetGameRelated(unsigned long,unsigned long *,KnownGameList::GMRelatedProcess * *);
	virtual long GetPathProcessNameFromProcessId(unsigned long,Windows::Internal::String *);
	virtual long IsGameFromAppId(unsigned short const *,GameConfigInfo *);
	virtual long IsWin32GameFromHwnd(HWND__ *,GameConfigInfo *);
	virtual long SetGameDvrEnabledProperty(bool);
	virtual long Shutdown();
	virtual void ReloadKnownGameList();
	virtual void SetKGLRefreshedCallback(void (*)(void *),void *);
	virtual ~IsGameManager();
};

struct KGLUpdateLocationInfo
{
	~KGLUpdateLocationInfo();
};

struct KeyboardNavigationBehaviorFactory
{
	static long Register();
	virtual long CreateBehavior(unsigned short const *,IDuiBehavior * *);
};

namespace KeyboardOcclusionMitigationTelemetry
{
	class Mitigated
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(tagRECT,tagRECT,tagRECT,tagRECT,tagRECT,unsigned short const *,IHM_DISPLAY_MODE,bool,bool,bool,bool,bool,bool);
		~Mitigated();
	};

};

namespace KnownGameList
{
	int StrCmpInsensitive(unsigned short const *,unsigned long,unsigned short const *,unsigned long);
	long CreateEnumerateEntriesInstance(KnownGameList::IEnumerateEntries * *,unsigned char *,unsigned long);
	long CreateQueryKnownGameListInstance(KnownGameList::IQueryKnownGameList * *,unsigned short const *);
	unsigned short const * StrStrInsensitive(unsigned short const *,unsigned long,unsigned short const *);
};

class LauncherContract
{
	long UnregisterContract();
public:
	LauncherContract();
	long RuntimeClassInitialize(IShellTargetingContractManager *,IImmersiveMonitorManager *);
	virtual long TryInvokeBack();
	virtual void Destroy();
};

namespace LauncherTipContextMenuTelemetry
{
	class LauncherTipContextMenuExecuteCommand
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~LauncherTipContextMenuExecuteCommand();
	};

	class LauncherTipContextMenuExecuteShutdownCommand
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(unsigned int);
	};

	class LauncherTipContextMenuShow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

};

namespace LoggerHelpers
{
	long EncodeSuggestionsInSKFormat(unsigned short const *,IObjectArray *,unsigned int,unsigned short * *);
	long GetAppDataFromSuggestionItem(IItem *,unsigned short * *,unsigned short * *);
	long GetGroupNameFromLocalType(UI_LOCAL_RESULT_TYPE,unsigned short * *);
	long GetPropStringFromItem(IItem *,_tagpropertykey const &,unsigned short * *);
	long GetPropertiesFromItem(IItem *,bool,unsigned short * *,unsigned short * *);
	long GetQSFromSuggestionAtIndex(unsigned short const *,IObjectArray *,unsigned int,unsigned short * *);
	long GetSettingDataFromSuggestionItem(IItem *,unsigned short * *,unsigned short * *);
	long GetTelemetryIdFromAppInstallState(unsigned short const *,unsigned long,unsigned short * *);
	long GetTelemetryIdFromSuggestionItem(unsigned short const *,IItem *,unsigned short * *,LoggerHelpers::SuggestionType *);
	long GetTypeFromSuggestionItem(unsigned short const *,IItem *,LoggerHelpers::SuggestionType *);
	long ResponseStreamToString(IStream *,unsigned short * *);
	long ULONGLONGToPWSTR(unsigned __int64,unsigned short * *);
};

namespace LoggingUtil
{
	class AppIdCensorUtility
	{
		static bool ExtractDomain(unsigned short const *,unsigned short * *);
		static void CensorWebAppId(unsigned short const *,unsigned short const *,unsigned short * *);
	public:
		static long CensorAppIdBuffer(unsigned short const *,unsigned short * *);
	};

};

namespace MRTUtils
{
	bool IsMRTTextResource(unsigned short const *);
	long AlignDefaultContextWithTileAttributes(IMrtResourceManager *,unsigned short const *,DEVICE_SCALE_FACTOR const *,TILE_DUI_TEMPLATE const *,TILE_THEME_SELECTOR const *);
	long MsAppxUriToFilePath(unsigned short const *,IResourceMap *,PACKAGE_INFO *,unsigned short * *);
	long ProcessMRTFilePath(IMrtResourceManager *,unsigned short const *,DEVICE_SCALE_FACTOR *,TILE_DUI_TEMPLATE const *,TILE_THEME_SELECTOR *,unsigned short const *,unsigned short const *,unsigned short * *,bool *);
	unsigned short const * FindNonMRTImageSubstring(unsigned short const *);
};

namespace MSAWindowManagerTelemetry
{
	class SubscribeToServicesActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~SubscribeToServicesActivity();
	};

	class UnsubscribeFromServicesActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~UnsubscribeFromServicesActivity();
	};

};

class MTCUITelemetry
{
	class MTCUIMetadataPressed
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(unsigned short const *,long);
		~MTCUIMetadataPressed();
	};

	class MTCUISwitcherPressed
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

	void UpdateMediaKeysPressed(unsigned long);
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static void MTCUIShown<unsigned long &>(unsigned long &);
	void HardwareKeyPressed_(unsigned long,bool,bool);
	void MTCUIDisappeared_();
};

class MenuSection
{
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<InputDialMenuItem> > > _GetItemById(unsigned int const &,bool *);
public:
	long AddTool(InputDialMenuItem const &,unsigned int);
	long GetTools(std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > *);
	long Initialize(Windows::Foundation::IEventHandler<IInspectable *> *,EventRegistrationToken *);
	long Invoke(unsigned int,unsigned short const *);
	long RemoveTool(unsigned int const &);
	long SetTools(std::vector<InputDialMenuItem,std::allocator<InputDialMenuItem> > const &);
	long Uninitialize(EventRegistrationToken);
	unsigned int GetItemIndexFromId(unsigned int const &,bool *);
};

namespace Microsoft
{
	namespace WRL
	{
		struct ActivationFactory<Details::Nil,Details::Nil,Details::Nil,0>
		{
			ActivationFactory<Details::Nil,Details::Nil,Details::Nil,0>();
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Details::Nil,Details::Nil,Details::Nil,2>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
			virtual ~ActivationFactory<Details::Nil,Details::Nil,Details::Nil,2>();
		};

		struct ActivationFactory<Implements<FtmBase,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirector>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic2,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic3,FtmBase>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct AgileActivationFactory<Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirector,Details::Nil,Details::Nil,0>
		{
			AgileActivationFactory<Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirector,Details::Nil,Details::Nil,0>();
		};

		struct AgileEventSource<Windows::Foundation::IEventHandler<bool>,InvokeModeOptions<-2> >
		{
			~AgileEventSource<Windows::Foundation::IEventHandler<bool>,InvokeModeOptions<-2> >();
		};

		struct AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long Add(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *> *,EventRegistrationToken *);
			~AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *>,InvokeModeOptions<-2> >();
		};

		struct AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int>,InvokeModeOptions<-2> >
		{
			~AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int>,InvokeModeOptions<-2> >();
		};

		struct AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64>,InvokeModeOptions<-2> >
		{
			~AgileEventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64>,InvokeModeOptions<-2> >();
		};

		class AgileRef
		{
		protected:
			long InternalResolve(_GUID const &,void * *);
		public:
			AgileRef();
			long As<IAsyncCallbackDispatcher>(Details::ComPtrRef<ComPtr<IAsyncCallbackDispatcher> >);
			~AgileRef();
		};

		struct ChainInterfaces<IObjectCollection,IObjectArray,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			ChainInterfaces<IObjectCollection,IObjectArray,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>
		{
			ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>();
		};

		struct ClassFactory<Details::Nil,Details::Nil,Details::Nil,0>
		{
			virtual long LockServer(int);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ClassFactory<IImmersiveShellComponent,Details::Nil,Details::Nil,0>
		{
			virtual long LockServer(int);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenButtonListener *,ABI::Windows::Devices::Input::PenTailButtonClickedEventArgs *> >
		{
			~ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenButtonListener *,ABI::Windows::Devices::Input::PenTailButtonClickedEventArgs *> >();
		};

		struct ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenButtonListener *,ABI::Windows::Devices::Input::PenTailButtonDoubleClickedEventArgs *> >
		{
			~ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenButtonListener *,ABI::Windows::Devices::Input::PenTailButtonDoubleClickedEventArgs *> >();
		};

		struct ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenButtonListener *,ABI::Windows::Devices::Input::PenTailButtonLongPressedEventArgs *> >
		{
			~ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenButtonListener *,ABI::Windows::Devices::Input::PenTailButtonLongPressedEventArgs *> >();
		};

		struct ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenDockListener *,ABI::Windows::Devices::Input::PenDockedEventArgs *> >
		{
			~ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenDockListener *,ABI::Windows::Devices::Input::PenDockedEventArgs *> >();
		};

		struct ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenDockListener *,ABI::Windows::Devices::Input::PenUndockedEventArgs *> >
		{
			~ComPtr<ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenDockListener *,ABI::Windows::Devices::Input::PenUndockedEventArgs *> >();
		};

		class ComPtr<ABI::Windows::Internal::Devices::Input::IPenButtonListenerPartnerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ABI::Windows::Internal::Devices::Input::IPenButtonListenerPartnerStatics>();
		};

		class ComPtr<ABI::Windows::Internal::Devices::Input::IPenDockListenerPartnerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ABI::Windows::Internal::Devices::Input::IPenDockListenerPartnerStatics>();
		};

		class ComPtr<ABI::Windows::Internal::Devices::Input::IPenListenerPartner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ABI::Windows::Internal::Devices::Input::IPenListenerPartner>();
		};

		class ComPtr<AccountsSettingsController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<AppInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<AppInfo> & operator=(AppInfo *);
		};

		struct ComPtr<ApplicationIdentityInfo>
		{
			ApplicationIdentityInfo * operator->();
			~ComPtr<ApplicationIdentityInfo>();
		};

		class ComPtr<ApplicationTheme::IAppThemeApiStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ApplicationTheme::IAppThemeApiStatics>();
		};

		class ComPtr<ApplicationViewCollectionRegistration>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<ApplicationViewFilteredCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<ApplicationViewOperation>
		{
			~ComPtr<ApplicationViewOperation>();
		};

		struct ComPtr<ApplicationViewTitlebarConfiguration>
		{
			~ComPtr<ApplicationViewTitlebarConfiguration>();
		};

		struct ComPtr<AvailableNetworksExperienceFlowCF>
		{
			void Attach(AvailableNetworksExperienceFlowCF *);
		};

		struct ComPtr<BadgeWindow>
		{
			~ComPtr<BadgeWindow>();
		};

		class ComPtr<BadgeWindowAccessibility>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<BadgeWindowController>
		{
			~ComPtr<BadgeWindowController>();
		};

		class ComPtr<BroadcastDVRComponent>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<BroadcastDVRComponent>();
		};

		class ComPtr<CActionExecutionBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CActionExecutionBroker *);
		};

		struct ComPtr<CActionExecutionBrokerCF>
		{
			void Attach(CActionExecutionBrokerCF *);
		};

		class ComPtr<CActivationErrorPopupHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CAgileEnumerableObjectCollection>
		{
			~ComPtr<CAgileEnumerableObjectCollection>();
		};

		struct ComPtr<CAgileObjectContainer>
		{
			~ComPtr<CAgileObjectContainer>();
		};

		class ComPtr<CAppCrusherCloseRequestedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CAppInstanceFolder>
		{
			void Attach(CAppInstanceFolder *);
		};

		struct ComPtr<CAppInstanceView>
		{
			~ComPtr<CAppInstanceView>();
		};

		struct ComPtr<CAppItemPropertyStoreFactory>
		{
			~ComPtr<CAppItemPropertyStoreFactory>();
		};

		class ComPtr<CApplicationTargetingTracker>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CAppointmentHostedWindowActivationInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<CAppointmentHostedWindowActivationInfo> & operator=(CAppointmentHostedWindowActivationInfo *);
			long As<Windows::ApplicationModel::Actions::IActionActivationInfo>(Details::ComPtrRef<ComPtr<Windows::ApplicationModel::Actions::IActionActivationInfo> >);
			void Attach(CAppointmentHostedWindowActivationInfo *);
		};

		class ComPtr<CAsyncForwarder<CFilePickerInvoker> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CAsyncForwarder<CFilePickerInvoker> >();
		};

		class ComPtr<CAuthenticationManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		struct ComPtr<CBamThrottleSettings>
		{
			~ComPtr<CBamThrottleSettings>();
		};

		class ComPtr<CBaseTrayFlyoutExperienceManager::DebounceDetection::Notification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CBaseTrayFlyoutExperienceManager::DebounceDetection::Notification>();
		};

		class ComPtr<CBaseTrayFlyoutExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CBaseTrayFlyoutExperienceManager *);
			~ComPtr<CBaseTrayFlyoutExperienceManager>();
		};

		struct ComPtr<CCachedFileUpdateManager>
		{
			long As<IUnknown>(Details::ComPtrRef<ComPtr<IUnknown> >);
			~ComPtr<CCachedFileUpdateManager>();
		};

		class ComPtr<CCommonApplicationViewArrangePosition>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CCommonApplicationViewArrangePosition *);
		};

		class ComPtr<CCommonApplicationViewPosition>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CCommonApplicationViewPosition *);
		};

		class ComPtr<CConnectedSearchTransport>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<CConnectedSearchTransport> & operator=(CConnectedSearchTransport *);
		};

		struct ComPtr<CCortanaExperienceFlowCF>
		{
			void Attach(CCortanaExperienceFlowCF *);
		};

		struct ComPtr<CCurrentLocationRequest>
		{
			~ComPtr<CCurrentLocationRequest>();
		};

		struct ComPtr<CCurrentLocationRequestedEventArgs>
		{
			~ComPtr<CCurrentLocationRequestedEventArgs>();
		};

		struct ComPtr<CDCompAbstractThumbnail::CStoryboardExtraData>
		{
			~ComPtr<CDCompAbstractThumbnail::CStoryboardExtraData>();
		};

		struct ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_42a319d466c03f646eff84ae9c7edd7a> > >
		{
			~ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_42a319d466c03f646eff84ae9c7edd7a> > >();
		};

		struct ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_466f052378d1758faf07b0052541d127> > >
		{
			~ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_466f052378d1758faf07b0052541d127> > >();
		};

		struct ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_838fd1621ad6edf2cd1d223fa5046c55> > >
		{
			~ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_838fd1621ad6edf2cd1d223fa5046c55> > >();
		};

		struct ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_862499b61e6b9d955eaf8ecd0954aa47> > >
		{
			~ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_862499b61e6b9d955eaf8ecd0954aa47> > >();
		};

		struct ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_a9fe90e13b5ecb63644ffc6ec3ae9b1c> > >
		{
			~ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_a9fe90e13b5ecb63644ffc6ec3ae9b1c> > >();
		};

		struct ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_e5575181439bb1ee68c2355887a77cb6> > >
		{
			~ComPtr<CDCompAbstractThumbnail::CVariableCurveChangeHandler<<lambda_e5575181439bb1ee68c2355887a77cb6> > >();
		};

		class ComPtr<CDCompCustomPaintThumbnail>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CDCompCustomPaintThumbnail>();
		};

		class ComPtr<CDCompDesktopThumbnail>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CDCompDesktopThumbnail>();
		};

		struct ComPtr<CDCompRootThumbnail>
		{
			~ComPtr<CDCompRootThumbnail>();
		};

		class ComPtr<CDCompShellTabThumbnail>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<CDCompShellTabThumbnail>();
		};

		class ComPtr<CDCompVirtualDesktopThumbnail>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CDCompVirtualDesktopThumbnail>();
		};

		class ComPtr<CDCompWindowThumbnail>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CDCompWindowThumbnail>();
		};

		struct ComPtr<CDCompositionVariableTransformer>
		{
			void Attach(CDCompositionVariableTransformer *);
			~ComPtr<CDCompositionVariableTransformer>();
		};

		class ComPtr<CDataTransferBrokerCallbacks>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CDeviceActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CDevicePickerExperienceManager>
		{
			~ComPtr<CDevicePickerExperienceManager>();
		};

		struct ComPtr<CDevicesFlowCF>
		{
			void Attach(CDevicesFlowCF *);
		};

		struct ComPtr<CDevicesFlowExperienceManager>
		{
			~ComPtr<CDevicesFlowExperienceManager>();
		};

		class ComPtr<CEdgeInvoker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CEmptyThumbnail>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CEmptyThumbnail>();
		};

		struct ComPtr<CEnumerateEntries>
		{
			~ComPtr<CEnumerateEntries>();
		};

		struct ComPtr<CExpansionExperienceManager>
		{
			~ComPtr<CExpansionExperienceManager>();
		};

		class ComPtr<CExtensionList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CExtensionList *);
		};

		struct ComPtr<CExtensionListContextMenu>
		{
			void Attach(CExtensionListContextMenu *);
		};

		class ComPtr<CFileExtensionVector>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CFileOpenPickerActivatedEventArgs>
		{
			~ComPtr<CFileOpenPickerActivatedEventArgs>();
		};

		struct ComPtr<CFileOpenPickerUI>
		{
			~ComPtr<CFileOpenPickerUI>();
		};

		struct ComPtr<CFileOpenPickerUIInternal>
		{
			~ComPtr<CFileOpenPickerUIInternal>();
		};

		struct ComPtr<CFilePickerController>
		{
			~ComPtr<CFilePickerController>();
		};

		class ComPtr<CFilePickerInvoker>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			void Attach(CFilePickerInvoker *);
			~ComPtr<CFilePickerInvoker>();
		};

		class ComPtr<CFileUpdateRequest>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CFileUpdateRequest>();
		};

		struct ComPtr<CFileUpdateResult>
		{
			~ComPtr<CFileUpdateResult>();
		};

		struct ComPtr<CGITCallbackArray>
		{
			~ComPtr<CGITCallbackArray>();
		};

		struct ComPtr<CGITCookieObject>
		{
			~ComPtr<CGITCookieObject>();
		};

		struct ComPtr<CGameEntry>
		{
			void Attach(CGameEntry *);
			~ComPtr<CGameEntry>();
		};

		class ComPtr<CGlobalRudeWindowManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CGlobalRudeWindowManager>();
		};

		class ComPtr<CHistoryItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		struct ComPtr<CHostExperienceManager>
		{
			~ComPtr<CHostExperienceManager>();
		};

		struct ComPtr<CHostedApplicationActivationManager>
		{
			~ComPtr<CHostedApplicationActivationManager>();
		};

		class ComPtr<CHostedFlow>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CImageDownloadTaskGroup>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<CImageDownloadTaskGroup> & operator=(CImageDownloadTaskGroup *);
			void Attach(CImageDownloadTaskGroup *);
		};

		class ComPtr<CImageDownloader>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		struct ComPtr<CImmersiveMonitor>
		{
			~ComPtr<CImmersiveMonitor>();
		};

		struct ComPtr<CImmersiveMonitorManager>
		{
			~ComPtr<CImmersiveMonitorManager>();
		};

		struct ComPtr<CImmersiveMonitorNotificationServiceProxy>
		{
			~ComPtr<CImmersiveMonitorNotificationServiceProxy>();
		};

		struct ComPtr<CImmersiveProxyMonitor>
		{
			~ComPtr<CImmersiveProxyMonitor>();
		};

		struct ComPtr<CImmersiveSessionIdleDetector>
		{
			~ComPtr<CImmersiveSessionIdleDetector>();
		};

		struct ComPtr<CImmersiveWindowFactory>
		{
			void Attach(CImmersiveWindowFactory *);
			~ComPtr<CImmersiveWindowFactory>();
		};

		struct ComPtr<CImmersiveWindowMessageService>
		{
			~ComPtr<CImmersiveWindowMessageService>();
		};

		class ComPtr<CImpressionData>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<CImpressionData> & operator=(ComPtr<CImpressionData> const &);
		};

		class ComPtr<CInputDialExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<CInputDialExperienceManager> & operator=(CInputDialExperienceManager *);
			~ComPtr<CInputDialExperienceManager>();
		};

		class ComPtr<CInputHostLayout>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CInputHostLayout *);
		};

		class ComPtr<CJsonSerializer>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CLaunchActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CLaunchActivatedEventArgs>();
		};

		class ComPtr<CLaunchToMonitor>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CLauncherUIMode>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CLauncherUIMode *);
			~ComPtr<CLauncherUIMode>();
		};

		class ComPtr<CLauncherUIModeWithDesktopSwitch>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CLegacyProcessLifetimeManagerProxy>
		{
			~ComPtr<CLegacyProcessLifetimeManagerProxy>();
		};

		class ComPtr<CMarshaledInterface::CMarshalStream>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<CMarshaledInterface::CMarshalStream> & operator=(ComPtr<CMarshaledInterface::CMarshalStream> const &);
			void Attach(CMarshaledInterface::CMarshalStream *);
		};

		class ComPtr<CMessageDialogHelper>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CMessageNotificationHolder>
		{
			void Attach(CMessageNotificationHolder *);
			~ComPtr<CMessageNotificationHolder>();
		};

		struct ComPtr<CMiracastBannerExperienceManager>
		{
			~ComPtr<CMiracastBannerExperienceManager>();
		};

		struct ComPtr<CMiracastBannerResizeEventArgs>
		{
			void Attach(CMiracastBannerResizeEventArgs *);
		};

		struct ComPtr<CPenWorkspaceExperienceManager>
		{
			~ComPtr<CPenWorkspaceExperienceManager>();
		};

		struct ComPtr<CPickerClosingEventArgs>
		{
			~ComPtr<CPickerClosingEventArgs>();
		};

		struct ComPtr<CPickerClosingOperation>
		{
			~ComPtr<CPickerClosingOperation>();
		};

		class ComPtr<CPlayToReceiverManager>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CPrivacyUIController>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CProjectionManager>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CProtocolActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CProtocolActivatedEventArgs *);
		};

		class ComPtr<CProximityShareOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CQueryKnownGameList>
		{
			~ComPtr<CQueryKnownGameList>();
		};

		class ComPtr<CReadOnlyRandomAccessStream>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CReadOnlyRandomAccessStream *);
		};

		class ComPtr<CRefCountedObject<CAutoHandle<HBITMAP__ *> > >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<CAutoHandle<void *> > >
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CRefCountedObject<CAutoHandle<void *> > >();
		};

		class ComPtr<CRefCountedObject<CCallerInformation> >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipMenuCommand> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<CLauncherTipContextMenu::LauncherTipShutdownMenuCommand> >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<CMarshalInterfaceOnce<IShellItem> > >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<ShellExperienceAppidRegistration> >
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CRefCountedObject<ShellExperienceAppidRegistration> >();
		};

		class ComPtr<CRefCountedObject<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > >
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<CRefCountedObject<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > > >();
		};

		class ComPtr<CRefCountedObject<Windows::Internal::String> >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<Windows::Internal::UI::SoftLanding::CSoftLandingNotification> >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CRefCountedObject<Wrappers::HString> >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<CRemoveAppointmentOperation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CRemoveAppointmentOperation *);
		};

		struct ComPtr<CReplaceAppointmentOperation>
		{
			void Attach(CReplaceAppointmentOperation *);
		};

		class ComPtr<CRudeWindowManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CRudeWindowManager>();
		};

		class ComPtr<CRunningShareSink>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CSafeElementProxy>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<CSafeElementProxy> & operator=(ComPtr<CSafeElementProxy> const &);
		};

		class ComPtr<CSearchPaneBrokerWrapper>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CSessionManagerEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CSettingsManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CShareFlowCF>
		{
			void Attach(CShareFlowCF *);
		};

		struct ComPtr<CSharePickerExperienceManager>
		{
			~ComPtr<CSharePickerExperienceManager>();
		};

		struct ComPtr<CShellExperienceDispatcher>
		{
			~ComPtr<CShellExperienceDispatcher>();
		};

		struct ComPtr<CShellExperienceManagerFactory>
		{
			~ComPtr<CShellExperienceManagerFactory>();
		};

		struct ComPtr<CShellExperienceViewStateChangedEventArgs>
		{
			~ComPtr<CShellExperienceViewStateChangedEventArgs>();
		};

		struct ComPtr<CShellFeedbackService>
		{
			~ComPtr<CShellFeedbackService>();
		};

		class ComPtr<CSnapAssistController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CSnappedWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CSnappedWindowModel>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CSoftLandingExperienceManager>
		{
			~ComPtr<CSoftLandingExperienceManager>();
		};

		struct ComPtr<CSoftLandingQueryEntry>
		{
			~ComPtr<CSoftLandingQueryEntry>();
		};

		struct ComPtr<CSoftLandingUiaSearch>
		{
			void Attach(CSoftLandingUiaSearch *);
		};

		class ComPtr<CSolidColorThumbnail>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CSolidColorThumbnail>();
		};

		class ComPtr<CSourceViewSizePreference>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(CSourceViewSizePreference *);
		};

		struct ComPtr<CSplashScreenEvents>
		{
			~ComPtr<CSplashScreenEvents>();
		};

		struct ComPtr<CSplashScreenTimer>
		{
			void Attach(CSplashScreenTimer *);
			~ComPtr<CSplashScreenTimer>();
		};

		class ComPtr<CSplashScreenUIController>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CSplashScreenUIController>();
		};

		struct ComPtr<CSwitchThumbnailDeviceManager>
		{
			~ComPtr<CSwitchThumbnailDeviceManager>();
		};

		class ComPtr<CSwitchThumbnailFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CSwitchThumbnailFactory>();
		};

		struct ComPtr<CTargetFileRequest>
		{
			~ComPtr<CTargetFileRequest>();
		};

		class ComPtr<CTaskbarInvoker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CTemplateDownloadTask>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<CTemplateDownloadTask> & operator=(ComPtr<CTemplateDownloadTask> const &);
			void Attach(CTemplateDownloadTask *);
		};

		class ComPtr<CTemplateDownloader::CTemplateCacheEntry>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			void Attach(CTemplateDownloader::CTemplateCacheEntry *);
		};

		class ComPtr<CTemplateDownloader>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CTemplateFile>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		struct ComPtr<CTestExperienceManager>
		{
			~ComPtr<CTestExperienceManager>();
		};

		class ComPtr<CTitleBarInvoker>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<CTouchViewPerfTrackCallback>
		{
			~ComPtr<CTouchViewPerfTrackCallback>();
		};

		struct ComPtr<CUpdateFilesResult>
		{
			~ComPtr<CUpdateFilesResult>();
		};

		class ComPtr<CUpdateFilesResultArray>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CUpdateFilesResultArray>();
		};

		class ComPtr<CUploadQueueManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<CharmsBarStyleFlyoutExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CharmsBarStyleFlyoutExperienceManager>();
		};

		struct ComPtr<ClickNote>
		{
			~ComPtr<ClickNote>();
		};

		struct ComPtr<CompactOverlayManager>
		{
			~ComPtr<CompactOverlayManager>();
		};

		struct ComPtr<CompactOverlayPositioner>
		{
			~ComPtr<CompactOverlayPositioner>();
		};

		struct ComPtr<ComponentUIHostedAppFrame>
		{
			~ComPtr<ComponentUIHostedAppFrame>();
		};

		struct ComPtr<ComponentUIPlugin>
		{
			~ComPtr<ComponentUIPlugin>();
		};

		class ComPtr<ContentManagement::IProcessCreativeEvent>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<CreationThreadDispatcher>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<CreationThreadDispatcher>();
		};

		struct ComPtr<CredentialResetExperienceManager>
		{
			~ComPtr<CredentialResetExperienceManager>();
		};

		struct ComPtr<CredentialResetHostAppManager>
		{
			~ComPtr<CredentialResetHostAppManager>();
		};

		class ComPtr<DataPersistence::CDataPersistence>
		{
		protected:
			void InternalAddRef();
		};

		struct ComPtr<Details::EventTargetArray>
		{
			ComPtr<Details::EventTargetArray> & operator=(ComPtr<Details::EventTargetArray> const &);
			ComPtr<Details::EventTargetArray> & operator=(Details::EventTargetArray *);
			void Attach(Details::EventTargetArray *);
			~ComPtr<Details::EventTargetArray>();
		};

		class ComPtr<DevicesCharmUISession>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<DevicesFlowExperienceFlowCF>
		{
			void Attach(DevicesFlowExperienceFlowCF *);
		};

		class ComPtr<DirectUI::Element>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<DragViewEventSource>
		{
			~ComPtr<DragViewEventSource>();
		};

		struct ComPtr<EDPPopupCommand>
		{
			void Attach(EDPPopupCommand *);
		};

		class ComPtr<EnterpriseChromeManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<EnterpriseChromeManager>();
		};

		struct ComPtr<EnterpriseChromeServiceProvider>
		{
			~ComPtr<EnterpriseChromeServiceProvider>();
		};

		class ComPtr<FacadeWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<FeedbackHubApp>
		{
			void Attach(FeedbackHubApp *);
		};

		class ComPtr<FullscreenEventListener>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<FullscreenEventListener>();
		};

		class ComPtr<GamingAudio::AppList>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<GamingAudio::AppList>();
		};

		struct ComPtr<GamingAudio::SessionInfoItem>
		{
			~ComPtr<GamingAudio::SessionInfoItem>();
		};

		struct ComPtr<GamingOverlayExperienceManager>
		{
			~ComPtr<GamingOverlayExperienceManager>();
		};

		struct ComPtr<GammaFlashAsyncOperation>
		{
			void Attach(GammaFlashAsyncOperation *);
			~ComPtr<GammaFlashAsyncOperation>();
		};

		class ComPtr<GlobalRudeWindowNotifications>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<GlobalRudeWindowNotifications>();
		};

		struct ComPtr<HostedApplication>
		{
			void Attach(HostedApplication *);
		};

		struct ComPtr<HostedApplicationExperienceManager>
		{
			~ComPtr<HostedApplicationExperienceManager>();
		};

		class ComPtr<HotkeyHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAboveLockActivationManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAboveLockActivationManager>();
		};

		class ComPtr<IAccessibilityDockingServiceCallback>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IActionSpaceFlow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IDevicesFlow>(Details::ComPtrRef<ComPtr<IDevicesFlow> >);
			~ComPtr<IActionSpaceFlow>();
		};

		class ComPtr<IActivationErrorPopup>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IActivationErrorPopupFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IActivationFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::System::ILauncherStatics>(Details::ComPtrRef<ComPtr<Windows::System::ILauncherStatics> >);
			~ComPtr<IActivationFactory>();
		};

		class ComPtr<IActiveZBand>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IActiveZBandNotificationForMonitorService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IActiveZBandNotificationForMonitorService>();
		};

		class ComPtr<IAgileObject>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAgileObject>();
		};

		class ComPtr<IAgileReference>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAllUpViewInvoker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAllUpViewInvoker>();
		};

		class ComPtr<IAltTabViewHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAltTabViewHost>();
		};

		class ComPtr<IAppActivationRemediationInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppCrusherPopup>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppInstanceViewCache>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppInstanceViewCache>();
		};

		class ComPtr<IAppInstanceViewPriv>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppInstanceViewPriv>();
		};

		class ComPtr<IAppLayout>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IAppLayout> & operator=(ComPtr<IAppLayout> const &);
		};

		class ComPtr<IAppLayoutItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppLayoutItemEnum>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppLayoutOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppListItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppListItem>();
		};

		class ComPtr<IAppSwitchOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppSwitcherNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppUriResolver>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppUriResolver>();
		};

		class ComPtr<IAppUrlDefaults>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAppViewManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAppViewManager>();
		};

		class ComPtr<IApplicationActivationManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationActivationManager>();
		};

		class ComPtr<IApplicationActivationManagerPriv2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationActivationManagerPriv2>();
		};

		class ComPtr<IApplicationActivationManagerPriv>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationActivationManagerPriv>();
		};

		class ComPtr<IApplicationActivationPhonePriv>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationActivationPhonePriv>();
		};

		class ComPtr<IApplicationAssociationRegistration>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationAssociationRegistrationInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationDesignModeSettingsPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationFrame>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationFrame>();
		};

		class ComPtr<IApplicationFrameFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IApplicationFrameFactory> & operator=(ComPtr<IApplicationFrameFactory> const &);
			~ComPtr<IApplicationFrameFactory>();
		};

		struct ComPtr<IApplicationFrameInputPaneEventHandler>
		{
			~ComPtr<IApplicationFrameInputPaneEventHandler>();
		};

		class ComPtr<IApplicationFrameTitleBar>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationFrameTitleBar>();
		};

		class ComPtr<IApplicationFrameWrapper>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationFrameWrapper> & operator=(ComPtr<IApplicationFrameWrapper> const &);
			~ComPtr<IApplicationFrameWrapper>();
		};

		class ComPtr<IApplicationHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationHost>();
		};

		class ComPtr<IApplicationInstanceViewTest>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationInstanceViewTest>();
		};

		class ComPtr<IApplicationInvocableFlow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationManagerViewPosition>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationResolver>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationResolver>();
		};

		class ComPtr<IApplicationStateChangeOutOfProcNotificationService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationStateChangeOutOfProcNotificationService>();
		};

		class ComPtr<IApplicationTargetingChanges>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationTileInformation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationView>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationView> & operator=(ComPtr<IApplicationView> const &);
			ComPtr<IApplicationView> & operator=(IApplicationView *);
			long As<IWin32ApplicationView>(Details::ComPtrRef<ComPtr<IWin32ApplicationView> >);
			long As<IWinRTApplicationView>(Details::ComPtrRef<ComPtr<IWinRTApplicationView> >);
			~ComPtr<IApplicationView>();
		};

		class ComPtr<IApplicationViewArrangePosition>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IApplicationViewArrangePosition>();
		};

		class ComPtr<IApplicationViewChangeListener>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IApplicationViewCollection>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationViewCollection> & operator=(IApplicationViewCollection *);
			~ComPtr<IApplicationViewCollection>();
		};

		class ComPtr<IApplicationViewCompatiblityNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IApplicationViewOperation>
		{
			~ComPtr<IApplicationViewOperation>();
		};

		class ComPtr<IApplicationViewPosition>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IApplicationViewPosition> & operator=(IApplicationViewPosition *);
			~ComPtr<IApplicationViewPosition>();
		};

		class ComPtr<IApplicationViewTitlebarConfiguration>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IApplicationViewTitlebarConfiguration>();
		};

		class ComPtr<IApplicationViewVisibilityDebouncedNotificationService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IApplicationViewVisibilityDebouncedNotificationService> & operator=(IApplicationViewVisibilityDebouncedNotificationService *);
		};

		class ComPtr<IAppxFactoryInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssocHandler>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IAssocHandlerPromptCount>(Details::ComPtrRef<ComPtr<IAssocHandlerPromptCount> >);
			long As<IObjectWithProgID>(Details::ComPtrRef<ComPtr<IObjectWithProgID> >);
		};

		class ComPtr<IAssocHandlerInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssocHandlerMakeDefault>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssocHandlerPromptCount>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssociationArray>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssociationElement>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAssociationList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAsyncCallback>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IAsyncCallback>();
		};

		class ComPtr<IAsyncCallbackDispatcher>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAsyncCallbackDispatcher>();
		};

		class ComPtr<IAsyncInfo>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IUnknown>(Details::ComPtrRef<ComPtr<IUnknown> >);
			long As<Windows::Foundation::IAsyncAction>(Details::ComPtrRef<ComPtr<Windows::Foundation::IAsyncAction> >);
			long As<Windows::Foundation::IAsyncOperation<HSTRING__ *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperation<HSTRING__ *> > >);
			long As<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> > >);
			long As<Windows::Foundation::IAsyncOperation<bool> >(Details::ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperation<bool> > >);
			~ComPtr<IAsyncInfo>();
		};

		class ComPtr<IAudioEndpointVolume>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IAudioEndpointVolume>();
		};

		struct ComPtr<IAudioFlyoutController>
		{
			~ComPtr<IAudioFlyoutController>();
		};

		class ComPtr<IAudioSessionControl2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAudioSessionControl2>();
		};

		class ComPtr<IAudioSessionControl>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAudioSessionControl>();
		};

		class ComPtr<IAudioSessionControlInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAudioSessionControlInternal>();
		};

		class ComPtr<IAudioSessionEnumerator>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAudioSessionEnumerator>();
		};

		class ComPtr<IAudioSessionManager2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAudioSessionManager2>();
		};

		class ComPtr<IAudioSessionManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAudioSessionManager>();
		};

		struct ComPtr<IAutoPlayDeviceDataManager>
		{
			ComPtr<IAutoPlayDeviceDataManager> & operator=(IAutoPlayDeviceDataManager *);
		};

		class ComPtr<IAutoplayContentHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAutoplayHandler2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAutoplayHandler>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IAutoplayHandler> & operator=(IAutoplayHandler *);
		};

		class ComPtr<IAutoplayHandlerList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAvailableMiracastDeviceEnumerator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IAvailableMiracastDeviceEnumeratorListener>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBackComponentService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBackComponentService>();
		};

		class ComPtr<IBackOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBackgroundAccessManagerFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBackgroundAccessManagerService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBackgroundAccessManagerService>();
		};

		class ComPtr<IBackgroundActivator>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBackgroundActivator>();
		};

		class ComPtr<IBackgroundTaskCapability>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBackstackApp>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBadgeWindow>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IBadgeWindow>();
		};

		class ComPtr<IBadgeWindowAcc>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBadgeWindowController>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBadgeWindowController>();
		};

		class ComPtr<IBadgeWindowInteractionHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBadgeWindowInteractionHandler>();
		};

		class ComPtr<IBadgeWindowPositionCache>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBadgeWindowPositionCache>();
		};

		class ComPtr<IBandWorkArea>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBindCtx>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBindCtx>();
		};

		class ComPtr<IBinding>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<IBooleanSetting>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBroadcastDVRComponent>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBroadcastDVRComponent>();
		};

		class ComPtr<ICachedFileUpdateView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICachedFileUpdateView>();
		};

		class ComPtr<ICachedFileUpdaterEventSink>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICachedFileUpdaterEventSink>();
		};

		class ComPtr<ICachedFileUpdaterInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICachedFileUpdaterInternal>();
		};

		class ComPtr<ICallingProcessInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICaptureProcessedEventHandler>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<ICaptureProcessedEventHandler>();
		};

		class ComPtr<ICaptureProcessingEventHandler>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<ICaptureProcessingEventHandler>();
		};

		class ComPtr<ICatInformation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IClassFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IClassFactory>();
		};

		struct ComPtr<IClassicWindowManager>
		{
			~ComPtr<IClassicWindowManager>();
		};

		class ComPtr<IClickNote>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IClickNote>();
		};

		class ComPtr<ICloseRequestedService>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICommDlgBrowser3>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICommDlgBrowser3>();
		};

		class ComPtr<ICommDlgBrowser>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICommDlgBrowser>();
		};

		struct ComPtr<ICommandInvoker>
		{
			ComPtr<ICommandInvoker> & operator=(ICommandInvoker *);
			void Attach(ICommandInvoker *);
		};

		class ComPtr<ICommandText>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<ICompactOverlayManager>
		{
			~ComPtr<ICompactOverlayManager>();
		};

		struct ComPtr<ICompactOverlayPositioner>
		{
			~ComPtr<ICompactOverlayPositioner>();
		};

		class ComPtr<IComponentSitePrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IComponentSitePrivate>();
		};

		class ComPtr<IComponentUIEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IComponentUIEventHandler>();
		};

		class ComPtr<IComponentUIHostedActivationManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IComponentUIEventHandler>(Details::ComPtrRef<ComPtr<IComponentUIEventHandler> >);
		};

		class ComPtr<IComponentUIHostedAppFrame>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IComponentUIHostedAppFrame>();
		};

		class ComPtr<ICompositeExperienceManagerFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICompositionManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICompositionManager>();
		};

		class ComPtr<ICondition>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICondition>();
		};

		class ComPtr<IConditionFactory2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConnectedSearchContextManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IConnectedSearchLogger>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IConnectedSearchLogger> & operator=(IConnectedSearchLogger *);
		};

		class ComPtr<IConnectedSearchRegionInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IContactInternal2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IContextMenuForProgInvoke>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IContractRegistrationInfo>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<ICoreApplicationBridgePrivateCallbacks>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICoreApplicationBridgePrivateCallbacks>();
		};

		class ComPtr<ICoreWindowInterop>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICortanaExperienceFlow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICreateObject>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICustomDestinationList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IInternalCustomDestinationList>(Details::ComPtrRef<ComPtr<IInternalCustomDestinationList> >);
			~ComPtr<ICustomDestinationList>();
		};

		class ComPtr<ID2D1Bitmap1>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ID2D1Bitmap1>();
		};

		class ComPtr<ID2D1Device>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ID2D1Device> & operator=(ID2D1Device *);
			~ComPtr<ID2D1Device>();
		};

		class ComPtr<ID2D1DeviceContext>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ID2D1DeviceContext>();
		};

		class ComPtr<ID2D1Factory1>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ID2D1Factory1>();
		};

		class ComPtr<ID2D1Factory2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ID2D1Factory2>();
		};

		class ComPtr<ID3D11Device>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IDXGIDevice>(Details::ComPtrRef<ComPtr<IDXGIDevice> >);
			~ComPtr<ID3D11Device>();
		};

		class ComPtr<ID3D11DeviceContext>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ID3D11DeviceContext>();
		};

		class ComPtr<ID3D11Texture2D>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ID3D11Texture2D>();
		};

		class ComPtr<IDBCreateSession>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDBInitialize>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IDCompBatchAnimationCallback>
		{
			~ComPtr<IDCompBatchAnimationCallback>();
		};

		class ComPtr<IDCompBatcher>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<IDCompBatcher>();
		};

		class ComPtr<IDCompThumbnail>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDCompThumbnailChild>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompThumbnailChild>();
		};

		class ComPtr<IDCompThumbnailParent>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IDCompThumbnailParent>();
		};

		class ComPtr<IDCompositionAnimation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionAnimation>();
		};

		class ComPtr<IDCompositionAnimationInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionAnimationInternal>();
		};

		class ComPtr<IDCompositionDesktopDevice>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IDCompositionDesktopDevice> & operator=(IDCompositionDesktopDevice *);
			ComPtr<IDCompositionDesktopDevice> & operator=<IDCompositionDesktopDevicePartner>(IDCompositionDesktopDevicePartner *);
			~ComPtr<IDCompositionDesktopDevice>();
		};

		class ComPtr<IDCompositionDesktopDevicePartner>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDCompositionDevice>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionDevice>();
		};

		class ComPtr<IDCompositionDeviceInterop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionDeviceInterop>();
		};

		class ComPtr<IDCompositionEffectGroup>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionEffectGroup>();
		};

		class ComPtr<IDCompositionMatrixTransform3D>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionMatrixTransform3D>();
		};

		class ComPtr<IDCompositionRectangleClip>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionRectangleClip>();
		};

		class ComPtr<IDCompositionRotateTransform3D>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IDCompositionRotateTransform3D>();
		};

		class ComPtr<IDCompositionScaleTransform>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionScaleTransform>();
		};

		class ComPtr<IDCompositionSurface>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionSurface>();
		};

		class ComPtr<IDCompositionTarget>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDCompositionTransform3D>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionTransform3D>();
		};

		class ComPtr<IDCompositionTransform>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionTransform>();
		};

		class ComPtr<IDCompositionTranslateTransform>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionTranslateTransform>();
		};

		class ComPtr<IDCompositionVisual2>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IDCompositionVisual2>();
		};

		class ComPtr<IDCompositionVisual>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IDCompositionVisual> & operator=(ComPtr<IDCompositionVisual> const &);
			ComPtr<IDCompositionVisual> & operator=<IDCompositionVisual2>(ComPtr<IDCompositionVisual2> const &);
			~ComPtr<IDCompositionVisual>();
		};

		class ComPtr<IDCompositionVisualInterop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionVisualInterop>();
		};

		class ComPtr<IDCompositionVisualPartnerWinRTInterop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDCompositionVisualPartnerWinRTInterop>();
		};

		class ComPtr<IDXGIAdapter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDXGIAdapter>();
		};

		class ComPtr<IDXGIDevice1>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IDXGIDevice1>();
		};

		class ComPtr<IDXGIDevice>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDXGIDevice>();
		};

		class ComPtr<IDXGIFactory1>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDXGIFactory1>();
		};

		class ComPtr<IDXGIFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDXGIFactory>();
		};

		class ComPtr<IDXGIOutput>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDXGIOutput>();
		};

		class ComPtr<IDXGIOutputPartner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDXGIOutputPartner>();
		};

		class ComPtr<IDXGISurface1>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDXGISurface1>();
		};

		class ComPtr<IDXGISurface>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDataObject>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDataPackageViewPriv>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDataPackageViewPriv>();
		};

		class ComPtr<IDataTransferBroker>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IDataTransferBroker> & operator=(IDataTransferBroker *);
		};

		class ComPtr<IDataTransferBrokerCallbacks>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDataTransferManagerInterop>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDesktopAppXActivator>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDesktopAppXActivator>();
		};

		class ComPtr<IDesktopVisibilityService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IDesktopVisibilityService>();
		};

		class ComPtr<IDeviceAccessPolicyManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDeviceDiscoveryAndPairingBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDeviceDiscoveryAndPairingBroker>();
		};

		class ComPtr<IDeviceElementSource>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IDeviceElementView>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDeviceTileBuilder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDeviceUninstaller>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDeviceUninstallerListener>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IDevicesCharmProjectionManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDevicesCharmProjectionManagerEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDevicesCharmProjectionManagerEventHandlerAdapter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDevicesCharmUISession>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDevicesFlow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IDevicesFlowProvider>(Details::ComPtrRef<ComPtr<IDevicesFlowProvider> >);
			~ComPtr<IDevicesFlow>();
		};

		class ComPtr<IDevicesFlowNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDevicesFlowNotification>();
		};

		class ComPtr<IDevicesFlowProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDialogWindowBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDialogWindowBroker>();
		};

		class ComPtr<IDragViewEventHandler>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<IDragViewEventHandler>();
		};

		class ComPtr<IDragViewEventSource>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDragViewEventSource>();
		};

		class ComPtr<IDsmControl>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDuiBehavior>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IDuiElementProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDuiElementProvider>();
		};

		class ComPtr<IEdgeGestureSource>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEdgeUiDeviceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IEdgeUiDeviceManager>();
		};

		class ComPtr<IEdgeUiDiscreteInvocation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEdgeUiHint>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IEdgeUiInput>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IEdgeUiInput> & operator=(IEdgeUiInput *);
			ComPtr<IEdgeUiInput>();
			~ComPtr<IEdgeUiInput>();
		};

		class ComPtr<IEdgeUiInputCallback>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEdgeUiInputHintHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEdgeUiInvocation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEdgeUiManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IEdgeUiManager>();
		};

		class ComPtr<IEdgeUiMouseInvocation>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IEdgeUiSecondaryTouchInvocation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEdgeUiTouchInvocation>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IEdgeUiTouchInvocation> & operator=(ComPtr<IEdgeUiTouchInvocation> const &);
		};

		class ComPtr<IElevationBrokerManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IElevationBrokerManager>();
		};

		class ComPtr<IEnterpriseChromeManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IEnterpriseChromeManager>();
		};

		class ComPtr<IEnterpriseChromeManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnterpriseChromeServiceProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IEnterpriseChromeServiceProvider>();
		};

		class ComPtr<IEnterpriseIdChangeNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumGUID>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IEnumIDList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IEnumIDList>();
		};

		class ComPtr<IEnumShutdownChoices>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IExplorerBrowser>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IExtensionList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IExtensionList>();
		};

		class ComPtr<IExtensionListInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IExtensionListItem>
		{
		protected:
			void InternalAddRef();
		public:
			ComPtr<IExtensionListItem> & operator=(ComPtr<IExtensionListItem> const &);
			ComPtr<IExtensionListItem> & operator=(IExtensionListItem *);
			long As<IObjectWithPropertyStore>(Details::ComPtrRef<ComPtr<IObjectWithPropertyStore> >);
			~ComPtr<IExtensionListItem>();
		};

		class ComPtr<IExtensionListItemInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IExtensionListTileFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IExtensionStateManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFacadeWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFeedbackHubApp>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFeedbackHubApp>();
		};

		class ComPtr<IFeedbackHubAppInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFeedbackHubAppInfo>();
		};

		class ComPtr<IFeedbackUIController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFileDialog>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IFileDialogPrivate>(Details::ComPtrRef<ComPtr<IFileDialogPrivate> >);
			long As<IFileSaveDialog>(Details::ComPtrRef<ComPtr<IFileSaveDialog> >);
			~ComPtr<IFileDialog>();
		};

		class ComPtr<IFileDialogPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFileDialogPrivate>();
		};

		class ComPtr<IFileOpenDialog>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFileOpenDialog>();
		};

		class ComPtr<IFileOperation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFileOperation>();
		};

		class ComPtr<IFilePickerInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IPickerInternal>(Details::ComPtrRef<ComPtr<IPickerInternal> >);
			~ComPtr<IFilePickerInternal>();
		};

		class ComPtr<IFileSaveDialog>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFileSaveDialog>();
		};

		class ComPtr<IFileSavePickerEventSink>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFileSavePickerEventSink>();
		};

		class ComPtr<IFileUpdateRequestInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFileUpdateRequestInternal>();
		};

		class ComPtr<IFileUpdateResult>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFileUpdateResult>();
		};

		class ComPtr<IFilterCondition>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFilterCondition>();
		};

		class ComPtr<IFilterView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFilterView>();
		};

		struct ComPtr<IFolderView2>
		{
			~ComPtr<IFolderView2>();
		};

		class ComPtr<IFullScreenManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFullScreenManager>();
		};

		class ComPtr<IFullScreenManagerPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IFullScreenPositioner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFullScreenPositioner>();
		};

		class ComPtr<IFullScreenPositionerNotificationService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IFullScreenPositionerNotificationService>();
		};

		class ComPtr<IFullscreenCloudExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IFullscreenCloudExperienceManager>();
		};

		class ComPtr<IFullscreenCloudExperienceManagerNotification>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IFullscreenCloudExperienceManagerNotification> & operator=(ComPtr<IFullscreenCloudExperienceManagerNotification> const &);
			~ComPtr<IFullscreenCloudExperienceManagerNotification>();
		};

		class ComPtr<IGITCookieObject>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IGameBarWatchDogCallback>
		{
			~ComPtr<IGameBarWatchDogCallback>();
		};

		class ComPtr<IGameFocusEvents>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IGameFocusEvents>();
		};

		class ComPtr<IGameFocusNotificationService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IGetRow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IGetSearchLaunchModeForWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IGlobalInterfaceTable>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IGlobalOptions>
		{
			~ComPtr<IGlobalOptions>();
		};

		class ComPtr<IGlobalRudeWindowManagerPriv>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IGlobalRudeWindowManagerPriv>();
		};

		class ComPtr<IGlobalRudeWindowNotificationService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IGlobalRudeWindowNotificationService>();
		};

		class ComPtr<IGlobalRudeWindowNotifications>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IGlobalRudeWindowNotifications>();
		};

		class ComPtr<IGraphicsPerformanceMonitor>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IGraphicsPerformanceMonitor>();
		};

		class ComPtr<IGraphicsPerformanceMonitorFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IGraphicsPerformanceMonitorFactory>();
		};

		struct ComPtr<IHolographicViewTransitionNotificationService>
		{
			ComPtr<IHolographicViewTransitionNotificationService> & operator=(ComPtr<IHolographicViewTransitionNotificationService> const &);
			~ComPtr<IHolographicViewTransitionNotificationService>();
		};

		class ComPtr<IHostAppManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostAppManager>();
		};

		class ComPtr<IHostedApplication>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IHostedApplication> & operator=(ComPtr<IHostedApplication> const &);
			~ComPtr<IHostedApplication>();
		};

		class ComPtr<IHostedApplicationActivationManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IHostedApplicationActivationManagerPrivateCallbacks>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedApplicationActivationManagerPrivateCallbacks>();
		};

		class ComPtr<IHostedApplicationBridgeWindow2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedApplicationBridgeWindow2>();
		};

		class ComPtr<IHostedApplicationBridgeWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IComponentUIHostedAppFrame>(Details::ComPtrRef<ComPtr<IComponentUIHostedAppFrame> >);
			long As<IDuiElementProvider>(Details::ComPtrRef<ComPtr<IDuiElementProvider> >);
			long As<IHostedApplicationTaskCompletion>(Details::ComPtrRef<ComPtr<IHostedApplicationTaskCompletion> >);
			~ComPtr<IHostedApplicationBridgeWindow>();
		};

		class ComPtr<IHostedApplicationEventSink>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedApplicationEventSink>();
		};

		class ComPtr<IHostedApplicationExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedApplicationExperienceManager>();
		};

		class ComPtr<IHostedApplicationExperienceRecoveryInterop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedApplicationExperienceRecoveryInterop>();
		};

		class ComPtr<IHostedApplicationFrameWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IComponentUIHostedAppFrame>(Details::ComPtrRef<ComPtr<IComponentUIHostedAppFrame> >);
			long As<IHostedApplicationBridgeWindow>(Details::ComPtrRef<ComPtr<IHostedApplicationBridgeWindow> >);
			~ComPtr<IHostedApplicationFrameWindow>();
		};

		class ComPtr<IHostedApplicationReconnectionInterop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedApplicationReconnectionInterop>();
		};

		class ComPtr<IHostedApplicationTaskCompletion>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedApplicationTaskCompletion>();
		};

		class ComPtr<IHostedApplicationView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedApplicationView>();
		};

		class ComPtr<IHostedViewEventSink>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IHostedViewEventSink>();
		};

		class ComPtr<IIdentityStore2>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IImageDownloadCallback>
		{
			void Attach(IImageDownloadCallback *);
		};

		class ComPtr<IImageDownloadTask>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImageDownloadedEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IImageDownloadedEventHandler> & operator=(IImageDownloadedEventHandler *);
		};

		class ComPtr<IImageSanitizationBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImageSanitizationBroker>();
		};

		class ComPtr<IImageSanitizationValidator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveAccountsSettings>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveAppCrusher>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveAppCrusher>();
		};

		class ComPtr<IImmersiveAppCrusherNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveAppCrusherPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveApplication2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveApplication>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveApplication> & operator=(ComPtr<IImmersiveApplication> const &);
			ComPtr<IImmersiveApplication> & operator=(IImmersiveApplication *);
			~ComPtr<IImmersiveApplication>();
		};

		class ComPtr<IImmersiveApplicationArray>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationArray>();
		};

		class ComPtr<IImmersiveApplicationArrayService2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveApplicationArrayService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IImmersiveApplicationArrayService2>(Details::ComPtrRef<ComPtr<IImmersiveApplicationArrayService2> >);
			~ComPtr<IImmersiveApplicationArrayService>();
		};

		class ComPtr<IImmersiveApplicationManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationManager>();
		};

		class ComPtr<IImmersiveApplicationNotificationService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IImmersiveApplicationNotificationService>();
		};

		class ComPtr<IImmersiveApplicationTerminator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveApplicationWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveApplicationWindow>();
		};

		class ComPtr<IImmersiveBackstackManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveBackstackNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveBackstackSettings>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IImmersiveLauncher>
		{
			ComPtr<IImmersiveLauncher> & operator=(IImmersiveLauncher *);
			~ComPtr<IImmersiveLauncher>();
		};

		class ComPtr<IImmersiveLauncherCortana>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveLauncherCortana>();
		};

		class ComPtr<IImmersiveLayout>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IImmersiveLayout> & operator=(ComPtr<IImmersiveLayout> const &);
			~ComPtr<IImmersiveLayout>();
		};

		class ComPtr<IImmersiveLayoutChanges>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveMonitor>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveMonitor> & operator=(IImmersiveMonitor *);
			~ComPtr<IImmersiveMonitor>();
		};

		struct ComPtr<IImmersiveMonitorFilter>
		{
			~ComPtr<IImmersiveMonitorFilter>();
		};

		class ComPtr<IImmersiveMonitorInternal>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveMonitorInternal> & operator=(ComPtr<IImmersiveMonitorInternal> const &);
			~ComPtr<IImmersiveMonitorInternal>();
		};

		class ComPtr<IImmersiveMonitorManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IImmersiveMonitorManager> & operator=(IImmersiveMonitorManager *);
			long As<IImmersiveMonitorNotificationService>(Details::ComPtrRef<ComPtr<IImmersiveMonitorNotificationService> >);
			~ComPtr<IImmersiveMonitorManager>();
		};

		class ComPtr<IImmersiveMonitorNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveMonitorNotification>();
		};

		class ComPtr<IImmersiveMonitorNotificationService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IImmersiveMonitorManager>(Details::ComPtrRef<ComPtr<IImmersiveMonitorManager> >);
			~ComPtr<IImmersiveMonitorNotificationService>();
		};

		class ComPtr<IImmersiveMonitorNotificationSync>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveMonitorNotificationSync>();
		};

		class ComPtr<IImmersiveOpenWithUI>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveRawInputMouseNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveRawInputProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveSessionIdleDetector>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IImmersiveSessionIdleDetector> & operator=(ComPtr<IImmersiveSessionIdleDetector> const &);
			~ComPtr<IImmersiveSessionIdleDetector>();
		};

		class ComPtr<IImmersiveSettings>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveSettingsCache>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IImmersiveSettingsCache> & operator=(IImmersiveSettingsCache *);
			~ComPtr<IImmersiveSettingsCache>();
		};

		class ComPtr<IImmersiveSettingsCacheNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveShellBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveShellBroker>();
		};

		class ComPtr<IImmersiveShellComponent>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveShellComponent>();
		};

		class ComPtr<IImmersiveShellCreationBehavior>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveShellCreationBehavior>();
		};

		class ComPtr<IImmersiveShellHookNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveShellHookNotificationInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IImmersiveShellHookService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IImmersiveShellHookService> & operator=(ComPtr<IImmersiveShellHookService> const &);
			~ComPtr<IImmersiveShellHookService>();
		};

		class ComPtr<IImmersiveSystemMode>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveSystemMode>();
		};

		class ComPtr<IImmersiveSystemModeNotificationService>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveSystemModeNotificationService>();
		};

		class ComPtr<IImmersiveWindowManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IImmersiveWindowMessageNotification>
		{
			~ComPtr<IImmersiveWindowMessageNotification>();
		};

		class ComPtr<IImmersiveWindowMessageNotificationInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IImmersiveWindowMessageNotificationInternal>();
		};

		class ComPtr<IImmersiveWindowMessageService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IImmersiveWindowMessageService>();
		};

		struct ComPtr<IInAppBackHandlerNotifications>
		{
			ComPtr<IInAppBackHandlerNotifications> & operator=(IInAppBackHandlerNotifications *);
		};

		class ComPtr<IInProcInternalImplementation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IIndividualExperienceManagerFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInitializeHostedWindowFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IInitializeHostedWindowFactory>();
		};

		class ComPtr<IInitializeWithItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IInitializeWithItem>();
		};

		class ComPtr<IInitializeWithPopupPersonality>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInitializeWithStream>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInitializeWithWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInkWorkspaceHostedAppsManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IInkWorkspaceHostedAppsManager>();
		};

		class ComPtr<IInputHostLayout>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IInputHostLayout>();
		};

		class ComPtr<IInputObject>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IInputSwitchControl>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IInputSwitchControl>();
		};

		struct ComPtr<IInputTracker>
		{
			ComPtr<IInputTracker> & operator=(IInputTracker *);
		};

		class ComPtr<IInspectable>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IInspectable> & operator=(IInspectable *);
			long As<IDeviceDiscoveryAndPairingBroker>(Details::ComPtrRef<ComPtr<IDeviceDiscoveryAndPairingBroker> >);
			long As<Windows::ApplicationModel::Core::IHostPrivate>(Details::ComPtrRef<ComPtr<Windows::ApplicationModel::Core::IHostPrivate> >);
			long As<Windows::Foundation::IPropertyValue>(Details::ComPtrRef<ComPtr<Windows::Foundation::IPropertyValue> >);
			long As<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow> >);
			long As<Windows::Internal::Shell::Experience::IPenWorkspaceExperienceManager>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::Experience::IPenWorkspaceExperienceManager> >);
			long As<Windows::Internal::Shell::Experience::IQuickConnectExperienceManager>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::Experience::IQuickConnectExperienceManager> >);
			long As<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> >);
			long CopyTo<Windows::Foundation::IReference<Windows::Foundation::DateTime> >(Details::ComPtrRef<ComPtr<Windows::Foundation::IReference<Windows::Foundation::DateTime> > >,void * *);
			~ComPtr<IInspectable>();
		};

		class ComPtr<IInternalCustomDestinationList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IInternalCustomDestinationList>();
		};

		class ComPtr<IInternalImmersiveLayout>
		{
		protected:
			void InternalAddRef();
		public:
			ComPtr<IInternalImmersiveLayout><CLayoutManager>(CLayoutManager *);
		};

		class ComPtr<IInternalUnknown>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IIsGameManager>
		{
			~ComPtr<IIsGameManager>();
		};

		class ComPtr<IItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IItemDeselectedSink>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IItemDeselectedSink>();
		};

		class ComPtr<IItemTileFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<ISimpleTileFactory>(Details::ComPtrRef<ComPtr<ISimpleTileFactory> >);
		};

		class ComPtr<IKnownFolder>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IKnownFolder>();
		};

		class ComPtr<IKnownFolderManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILambda>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<ILaunchTargetMonitor>
		{
			~ComPtr<ILaunchTargetMonitor>();
		};

		class ComPtr<ILauncherTipContextMenu>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILauncherTipContextMenu>();
		};

		class ComPtr<ILightDismissProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILightDismissProvider>();
		};

		class ComPtr<ILinkTarget>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILocalRankerGroup>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILocalWeightGroup>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILocationDescription>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILocationDescription>();
		};

		class ComPtr<ILockAppHost>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IServiceProvider>(Details::ComPtrRef<ComPtr<IServiceProvider> >);
			~ComPtr<ILockAppHost>();
		};

		class ComPtr<ILockAppHostLauncherInterop>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILockAppHostLauncherInterop>();
		};

		class ComPtr<ILockAppHostPlatform>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILockAppHostPlatform>();
		};

		class ComPtr<ILockScreenApplicationManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILockScreenContentionFlyout>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ILockScreenViewManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ILockScreenViewManager>();
		};

		class ComPtr<IMMDevice>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMMDevice>();
		};

		class ComPtr<IMMDeviceCollection>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMMDeviceCollection>();
		};

		class ComPtr<IMMDeviceEnumerator>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMMDeviceEnumerator>();
		};

		class ComPtr<IMarshal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMediaPlaybackDataSource>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMediaPlaybackDataSource>();
		};

		class ComPtr<IMiracastConnection>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IMiracastConnectionEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMiracastConnectionEventHandlerAdapter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMiracastConnectionEventHwndForwarder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMiracastDeviceChallenge>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IMiracastDeviceChallengeListener>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMoniker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMrtResourceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMrtResourceManager>();
		};

		class ComPtr<IMruDataList2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IMsaWindowManagerAppCloseNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMsaWindowManagerAppCloseNotification>();
		};

		struct ComPtr<IMultitaskingViewServiceProvider>
		{
			long As<IMultitaskingViewTaskScheduler>(Details::ComPtrRef<ComPtr<IMultitaskingViewTaskScheduler> >);
			~ComPtr<IMultitaskingViewServiceProvider>();
		};

		class ComPtr<IMultitaskingViewTaskCallback>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMultitaskingViewTaskCallback>();
		};

		class ComPtr<IMultitaskingViewTaskScheduler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IMultitaskingViewTaskScheduler>();
		};

		class ComPtr<IMultitaskingViewVisibilityService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IMultitaskingViewVisibilityService>();
		};

		class ComPtr<INamedPropertyStore>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<INamedPropertyStore> & operator=(INamedPropertyStore *);
		};

		class ComPtr<INamedResource>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INotesBrokerPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<INotesBrokerPrivate>();
		};

		struct ComPtr<INotesManager>
		{
			~ComPtr<INotesManager>();
		};

		class ComPtr<INotesManagerCallback>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<INotesManagerCallback>();
		};

		class ComPtr<INotificationActivationCallback>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INotifyWindowsPackageSettingChange>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INowPlayingSession>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<INowPlayingSession>();
		};

		class ComPtr<INowPlayingSessionInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<INowPlayingSessionManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<INowPlayingSessionManager>();
		};

		struct ComPtr<INtUserViewWrapper>
		{
			ComPtr<INtUserViewWrapper> & operator=(ComPtr<INtUserViewWrapper> const &);
			long As<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState> >);
			long As<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> >);
			~ComPtr<INtUserViewWrapper>();
		};

		class ComPtr<IOOBEExperienceNotification>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IOOBEExperienceNotification>();
		};

		class ComPtr<IOSTaskCompletion>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IOSTaskCompletion>();
		};

		class ComPtr<IObjectArray>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IObjectArray>();
		};

		class ComPtr<IObjectCollection>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IShellItemArray>(Details::ComPtrRef<ComPtr<IShellItemArray> >);
			~ComPtr<IObjectCollection>();
		};

		class ComPtr<IObjectProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IObjectProvider>();
		};

		class ComPtr<IObjectWithAppUserModelID>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithAssociationList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithMonitor>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithProgID>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithPropertyStore>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IObjectWithPropertyStore>();
		};

		class ComPtr<IObjectWithSelection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithShellItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IObjectWithSite>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IObjectWithSite>();
		};

		class ComPtr<IObjectWithWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IObjectWithWindow>();
		};

		class ComPtr<IObjectWithWindowRect>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IOcclusionBasedApplicationViewPosition>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IOleInPlaceFrame>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IOleInPlaceFrame>();
		};

		class ComPtr<IOleWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPackageDebugSettings>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPackageDebugSettings>();
		};

		class ComPtr<IParentAndItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IParentAndItem>();
		};

		class ComPtr<IPenSignalManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPenSignalManager>();
		};

		class ComPtr<IPeoplePaneViewManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPerWindowNotificationQueue>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IPerWindowNotificationQueue> & operator=(ComPtr<IPerWindowNotificationQueue> const &);
		};

		class ComPtr<IPersistFile>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPersistFolder2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPersistFolder2>();
		};

		class ComPtr<IPersistFolder>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPersistFolder>();
		};

		class ComPtr<IPersistSerializedPropStorage>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPersistStream>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPersistString2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IAssociationElement>(Details::ComPtrRef<ComPtr<IAssociationElement> >);
		};

		class ComPtr<IPickerController>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPickerController>();
		};

		class ComPtr<IPickerFlyoutFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPickerInitializationInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPickerInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IPickerController>(Details::ComPtrRef<ComPtr<IPickerController> >);
			~ComPtr<IPickerInternal>();
		};

		class ComPtr<IPickerView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPickerView>();
		};

		class ComPtr<IPlayToReceiverLauncher>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPlmDataQuery>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPlmDataQuery>();
		};

		class ComPtr<IPlmPackageServicing>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPopupBase>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IPopupBase> & operator=(IPopupBase *);
		};

		class ComPtr<IPopupCommandHandler>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<IPopupEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPopupWindow>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IPopupWindow> & operator=(ComPtr<IPopupWindow> const &);
			ComPtr<IPopupWindow> & operator=(IPopupWindow *);
			long As<IObjectWithMonitor>(Details::ComPtrRef<ComPtr<IObjectWithMonitor> >);
			long As<IPopupWindowAnimationTelemetry>(Details::ComPtrRef<ComPtr<IPopupWindowAnimationTelemetry> >);
		};

		class ComPtr<IPopupWindowAnimationTelemetry>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPopupWindowFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPresentationRequestedArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPresentationRequestedArgs>();
		};

		class ComPtr<IPrintFlowBroker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPrintManagerPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPrintTaskPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPriviledgedPositioner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IPriviledgedPositioner> & operator=(IPriviledgedPositioner *);
		};

		struct ComPtr<IPrivilegedForegroundOperations>
		{
			~ComPtr<IPrivilegedForegroundOperations>();
		};

		struct ComPtr<IPrivilegedHotkeyOperations>
		{
			~ComPtr<IPrivilegedHotkeyOperations>();
		};

		struct ComPtr<IPrivilegedPresentationOperations>
		{
			~ComPtr<IPrivilegedPresentationOperations>();
		};

		struct ComPtr<IPrivilegedWindowOwnershipOperations>
		{
			~ComPtr<IPrivilegedWindowOwnershipOperations>();
		};

		class ComPtr<IProcessLifetimeManagerControl>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IProcessLifetimeManagerControl>();
		};

		class ComPtr<IProjectCharmSession>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IProjectionManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IProjectionManager>();
		};

		class ComPtr<IProjectionUI>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IPropertyBag2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPropertyBag2>();
		};

		class ComPtr<IPropertyChange>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPropertyChange>();
		};

		class ComPtr<IPropertyChangeArray>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPropertyChangeArray>();
		};

		class ComPtr<IPropertyDescriptionList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IPropertyDescriptionList>();
		};

		class ComPtr<IPropertyStore>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IPropertyStore>();
		};

		class ComPtr<IPropertyStoreFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IProximityShareTarget>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IProxyServerIdentity>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IProxyServerIdentity>();
		};

		class ComPtr<IQueryAssociations>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IQueryWithLinguisticAlternatives>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IQuietHoursPolicy>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRawElementProviderSimple>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRawElementProviderSimple>();
		};

		class ComPtr<IRawTouchProcessor>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IRealmActivationHistory>
		{
			~ComPtr<IRealmActivationHistory>();
		};

		class ComPtr<IRequestTrustedComponentForegroundControlInitialization>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IResourceCandidate2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IResourceCandidate>(Details::ComPtrRef<ComPtr<IResourceCandidate> >);
		};

		class ComPtr<IResourceCandidate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IResourceCandidate>();
		};

		class ComPtr<IResourceContext>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IResourceContext>();
		};

		class ComPtr<IResourceMap2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IResourceMap2>();
		};

		class ComPtr<IResourceMap>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IResourceMap>();
		};

		class ComPtr<IRestrictedErrorInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRestrictedErrorInfo>();
		};

		class ComPtr<IRetailDemoUserAgent>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRowsetLocate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRpcOptions>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRpcOptions>();
		};

		class ComPtr<IRudeWindowManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IRudeWindowManagerEvents>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRudeWindowManagerEvents>();
		};

		class ComPtr<IRudeWindowManagerPriv>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRudeWindowManagerPriv>();
		};

		class ComPtr<IRudeWindowWin32Functions>
		{
		protected:
			void InternalAddRef();
		public:
			ComPtr<IRudeWindowWin32Functions> & operator=(IRudeWindowWin32Functions *);
			~ComPtr<IRudeWindowWin32Functions>();
		};

		class ComPtr<IRunningShareEntry>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRunningShareManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISearchControlBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<ISearchControlBrokerLocal>(Details::ComPtrRef<ComPtr<ISearchControlBrokerLocal> >);
		};

		class ComPtr<ISearchControlBrokerLocal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISearchControlClient>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISearchServices>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISearchTypeAhead>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISearchTypeAheadResult>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IServiceHostBrokerProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IServiceHostBrokerProvider>();
		};

		class ComPtr<IServiceProvider>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IServiceProvider> & operator=(IServiceProvider *);
			~ComPtr<IServiceProvider>();
		};

		class ComPtr<ISetting>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISettingChangedEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISettingsCollection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISettingsFlow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISettingsFlowController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISettingsProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISharableItemSelectorFlyout>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShareAndDevicesFlow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISharePlatformHost>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<ISharedBitmap>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ISharedBitmap>();
			~ComPtr<ISharedBitmap>();
		};

		class ComPtr<IShellFolder2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellFolder2>();
		};

		class ComPtr<IShellFolder>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellFolder>();
		};

		class ComPtr<IShellItem2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellItem2>();
		};

		class ComPtr<IShellItem>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IShellItem> & operator=(ComPtr<IShellItem> const &);
			ComPtr<IShellItem> & operator=(IShellItem *);
			long As<IShellItem2>(Details::ComPtrRef<ComPtr<IShellItem2> >);
			~ComPtr<IShellItem>();
		};

		class ComPtr<IShellItemArray>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellItemArray>();
		};

		class ComPtr<IShellItemImageFactoryPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<IShellItemListControl>
		{
			~ComPtr<IShellItemListControl>();
		};

		class ComPtr<IShellLibrary>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellLinkDataList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellLinkW>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IPropertyStore>(Details::ComPtrRef<ComPtr<IPropertyStore> >);
			~ComPtr<IShellLinkW>();
		};

		class ComPtr<IShellNavigationTarget>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellNavigationTarget>();
		};

		class ComPtr<IShellPositionerManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IShellPositionerManager>();
		};

		struct ComPtr<IShellPositionerPriority>
		{
			~ComPtr<IShellPositionerPriority>();
		};

		class ComPtr<IShellPositionerProxy>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellTargetingBackContractNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellTargetingContractManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellTargetingTrackerPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellTaskScheduler>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<IShellTaskScheduler>();
		};

		class ComPtr<IShellTaskSchedulerSettings>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShellUserAssist>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IShellView>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IShellView> & operator=(IShellView *);
			long As<IPickerView>(Details::ComPtrRef<ComPtr<IPickerView> >);
			~ComPtr<IShellView>();
		};

		class ComPtr<IShutdownChoices>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShutdownFlyout>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IShutdownFlyoutUIEntryPoint>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISimpleAudioVolume>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISimpleTileFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISnapAssistCallback>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<ISnapAssistController>
		{
			long As<ISnapAssistControllerPrivate>(Details::ComPtrRef<ComPtr<ISnapAssistControllerPrivate> >);
		};

		class ComPtr<ISnapAssistControllerPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISnapAssistViewHost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISnapServiceProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISnappedWindow>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ISnappedWindow> & operator=(ComPtr<ISnappedWindow> const &);
			~ComPtr<ISnappedWindow>();
		};

		class ComPtr<ISnappedWindowModel>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISoftLandingQueryEntry>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISoftLandingUiaSearch>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISoftLandingXmlParser>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISplashScreen>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<ISplashScreen> & operator=(ISplashScreen *);
			~ComPtr<ISplashScreen>();
		};

		class ComPtr<ISplashScreenTimer>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISplashScreenUI>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ISplashScreenUI>();
		};

		class ComPtr<IStartMenuAppItems>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IStartMenuAppItems>();
		};

		class ComPtr<IStorage>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IStorage>();
		};

		class ComPtr<IStorageFileInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IStorageFileInternal>();
		};

		class ComPtr<IStorageItemInternalAvailableCrossProcess>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IStorageItemInternalAvailableCrossProcess>();
		};

		class ComPtr<IStoryboardExtraData>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IStoryboardExtraData>();
		};

		class ComPtr<IStream>
		{
		protected:
			void InternalAddRef();
		public:
			ComPtr<IStream> & operator=(IStream *);
			~ComPtr<IStream>();
		};

		class ComPtr<IStreamReferencePrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IStreamReferencePrivate>();
		};

		class ComPtr<IStreamedFileDataRequestedCallback>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IStreamedFileDataRequestedCallback>();
		};

		class ComPtr<IStringFeedbackItem2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISuggestionLayoutItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISwitchController>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISwitchThumbnailDeviceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ISwitchThumbnailDeviceManager> & operator=(ISwitchThumbnailDeviceManager *);
		};

		class ComPtr<ISwitchThumbnailFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ISystemToastPrompt>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabControllerInternal>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<ITabControllerInternal>();
		};

		class ComPtr<ITabletModeAvailabilityChangeListener>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModeChangeListener>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<ITabletModeController>
		{
			ComPtr<ITabletModeController> & operator=(ITabletModeController *);
			~ComPtr<ITabletModeController>();
		};

		class ComPtr<ITabletModePositioner>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITabletModePositionerInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITabletModePositionerInternal>();
		};

		class ComPtr<ITabletModePositionerOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IThumbnailCache>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITimerCallback>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<ITimerCallback>();
		};

		class ComPtr<ITipInvocation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITouchKeyboardExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITouchViewController>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITouchViewController>();
		};

		class ComPtr<ITouchpadAction>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITouchpadAction>();
		};

		class ComPtr<ITouchpadActionsManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITouchpadGesture>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITouchpadGesture>();
		};

		class ComPtr<ITouchpadGestureComponentSettingsManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITouchpadGestureHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ITouchpadGestureInputProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITouchpadGestureInputProvider>();
		};

		class ComPtr<ITransitionNotification>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<ITrustedComponentForegroundControl>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ITrustedComponentForegroundControl> & operator=(ITrustedComponentForegroundControl *);
		};

		class ComPtr<ITypeAheadSearchHistorySettings>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUAPViewWrapper>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IUAPViewWrapper>();
		};

		class ComPtr<IUIAnimationManager2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUIAnimationStoryboard2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IUIAnimationStoryboard2>();
		};

		class ComPtr<IUIAnimationTimer>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUIAnimationTimerEventHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IUIAnimationTimerEventHandler>();
		};

		class ComPtr<IUIAnimationTimerUpdateHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IUIAnimationTimerUpdateHandler>();
		};

		class ComPtr<IUIAnimationTransition2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IUIAnimationTransition2>();
		};

		class ComPtr<IUIAnimationTransitionLibrary2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUIAnimationVariable2>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<IUIAnimationVariable2>();
		};

		class ComPtr<IUIAutomation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IUIAutomation> & operator=(IUIAutomation *);
			~ComPtr<IUIAutomation>();
		};

		class ComPtr<IUIAutomationElement>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IUIAutomationElement> & operator=(ComPtr<IUIAutomationElement> const &);
			ComPtr<IUIAutomationElement> & operator=(IUIAutomationElement *);
			~ComPtr<IUIAutomationElement>();
		};

		class ComPtr<IUIAutomationTreeWalker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUnknown>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IUnknown> & operator=(ComPtr<IUnknown> const &);
			ComPtr<IUnknown> & operator=(IUnknown *);
			ComPtr<IUnknown> & operator=<IImmersiveMonitorInternal>(ComPtr<IImmersiveMonitorInternal> const &);
			ComPtr<IUnknown> & operator=<IServiceProvider>(IServiceProvider *);
			ComPtr<IUnknown>();
			long As<IBackstackApp>(Details::ComPtrRef<ComPtr<IBackstackApp> >);
			long As<IEdgeUiInputCallback>(Details::ComPtrRef<ComPtr<IEdgeUiInputCallback> >);
			long As<IEdgeUiInputHintHost>(Details::ComPtrRef<ComPtr<IEdgeUiInputHintHost> >);
			long As<IImmersiveAppCrusherPriv>(Details::ComPtrRef<ComPtr<IImmersiveAppCrusherPriv> >);
			long As<IImmersiveRawInputMouseNotification>(Details::ComPtrRef<ComPtr<IImmersiveRawInputMouseNotification> >);
			long As<IImmersiveRawInputPenNotification>(Details::ComPtrRef<ComPtr<IImmersiveRawInputPenNotification> >);
			long As<IImmersiveRawInputTouchNotification>(Details::ComPtrRef<ComPtr<IImmersiveRawInputTouchNotification> >);
			long As<IServiceProvider>(Details::ComPtrRef<ComPtr<IServiceProvider> >);
			long As<IStoryboardExtraData>(Details::ComPtrRef<ComPtr<IStoryboardExtraData> >);
			void Attach(IUnknown *);
			~ComPtr<IUnknown>();
		};

		class ComPtr<IUpdateViewValueSet>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUri>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IUserOOBEController>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IUserOOBEController>();
		};

		class ComPtr<IViewCUIEventStore>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IViewEventDispatcherCrashRecovery>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IViewEventDispatcherCrashRecovery>();
		};

		class ComPtr<IViewportData>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<IVirtualDesktop>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopHotkeyHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IVirtualDesktopHotkeyHandler>();
		};

		class ComPtr<IVirtualDesktopManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IVirtualDesktopNotificationService>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IVirtualDesktopNotificationService>();
		};

		class ComPtr<IWICBitmap>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IWICBitmap>();
		};

		class ComPtr<IWICBitmapDecoder>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICBitmapDecoder>();
		};

		class ComPtr<IWICBitmapEncoder>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICBitmapEncoder>();
		};

		class ComPtr<IWICBitmapFrameDecode>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICBitmapFrameDecode>();
		};

		class ComPtr<IWICBitmapFrameEncode>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICBitmapFrameEncode>();
		};

		class ComPtr<IWICBitmapScaler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICBitmapScaler>();
		};

		class ComPtr<IWICBitmapSource>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IWICBitmapSource> & operator=(IWICBitmapSource *);
			~ComPtr<IWICBitmapSource>();
		};

		class ComPtr<IWICFormatConverter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICFormatConverter>();
		};

		class ComPtr<IWICImagingFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWICImagingFactory>();
		};

		class ComPtr<IWaitHandle>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<IWaitHandle>();
		};

		class ComPtr<IWeakReference>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<IWin32ApplicationView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWin32ApplicationView>();
		};

		class ComPtr<IWinRTApplicationView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWinRTApplicationView>();
		};

		class ComPtr<IWindowArrangementOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWindowOccludedChangeListener>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWindowOccludedChangeListener>();
		};

		struct ComPtr<IWindowSizeConversionLogicalClientToWindow>
		{
			~ComPtr<IWindowSizeConversionLogicalClientToWindow>();
		};

		class ComPtr<IWindowSnappingEvents>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWindowingEnvironmentConfig>
		{
		protected:
			void InternalAddRef();
		};

		struct ComPtr<IWindowingEnvironmentManager>
		{
			~ComPtr<IWindowingEnvironmentManager>();
		};

		class ComPtr<IWpnAppEndpoint>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWpnPlatform>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IServiceProvider>(Details::ComPtrRef<ComPtr<IServiceProvider> >);
			~ComPtr<IWpnPlatform>();
		};

		class ComPtr<IWpnRegistrationEndpoint>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IWpnRegistrationEndpoint>();
		};

		class ComPtr<IWpnSettingsEndpoint>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IWpnToastFeedback>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IXmlReader>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IXmlReader>();
		};

		struct ComPtr<InkWorkspaceHostedAppsManager>
		{
			~ComPtr<InkWorkspaceHostedAppsManager>();
		};

		class ComPtr<InputTracker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IsGameManager>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<IsGameManager>();
		};

		class ComPtr<KnownGameList::IEnumerateEntries>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<KnownGameList::IEnumerateEntries>();
		};

		struct ComPtr<KnownGameList::IGameEntry>
		{
			~ComPtr<KnownGameList::IGameEntry>();
		};

		class ComPtr<KnownGameList::IQueryKnownGameList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<KnownGameList::IQueryKnownGameList>();
		};

		class ComPtr<LauncherContract>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<MiracastConnection>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			void Attach(MiracastConnection *);
		};

		class ComPtr<MiracastConnectionEventHwndForwarder>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<ModalExperienceDialog>
		{
			ComPtr<ModalExperienceDialog> & operator=(ComPtr<ModalExperienceDialog> const &);
			ComPtr<ModalExperienceDialog> & operator=(ModalExperienceDialog *);
			void Attach(ModalExperienceDialog *);
			~ComPtr<ModalExperienceDialog>();
		};

		class ComPtr<ModalExperienceEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ModalWindowExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<ModalWindowExperienceManager> & operator=(ModalWindowExperienceManager *);
			~ComPtr<ModalWindowExperienceManager>();
		};

		class ComPtr<MsaWindowManagerImpl>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<MsaWindowManagerImpl>();
		};

		struct ComPtr<NotesManager>
		{
			~ComPtr<NotesManager>();
		};

		struct ComPtr<OOBEExperienceManager>
		{
			~ComPtr<OOBEExperienceManager>();
		};

		class ComPtr<PenEventsAdapter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<PenEventsAdapter>();
		};

		struct ComPtr<PenSignalManagerImpl>
		{
			~ComPtr<PenSignalManagerImpl>();
		};

		class ComPtr<PenSignalSourceAdapter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<PenSignalSourceAdapter>();
		};

		class ComPtr<PermissionsController>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<PublicShellFeedbackBroker>
		{
			~ComPtr<PublicShellFeedbackBroker>();
		};

		struct ComPtr<QuietHoursService>
		{
			~ComPtr<QuietHoursService>();
		};

		struct ComPtr<RadialControllerMenuItemInvokedArgs>
		{
			long As<IInspectable>(Details::ComPtrRef<ComPtr<IInspectable> >);
			~ComPtr<RadialControllerMenuItemInvokedArgs>();
		};

		class ComPtr<RemoteAppImmersiveIconBroker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<RemoteAppPrivilegedOperationBroker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<SettingsController>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<ShellDropTarget>
		{
			~ComPtr<ShellDropTarget>();
		};

		class ComPtr<ShellExperienceHelpers::Internal::IProxyModalWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ShellExperienceHelpers::Internal::ProxyModalWindow>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<ShellExperienceHelpers::Internal::ProxyModalWindow>();
		};

		class ComPtr<SimpleClassFactory<TabletModeToast,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<SimpleWindowChainLink>
		{
			void Attach(SimpleWindowChainLink *);
		};

		class ComPtr<SnapServiceProvider>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<StaThreadPoolActivationFactoryWithInitialize<CCachedFileUpdateManager,Details::Nil> >
		{
			~ComPtr<StaThreadPoolActivationFactoryWithInitialize<CCachedFileUpdateManager,Details::Nil> >();
		};

		class ComPtr<StoreFrontHelper>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<StoreFrontNotificationHelper>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<SttExperienceManager>
		{
			~ComPtr<SttExperienceManager>();
		};

		class ComPtr<SttInternal::IInternalMessageReceivedListener>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<SttInternal::IInternalMessageReceivedListener>();
		};

		class ComPtr<StubImmersiveApplication>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<StubImmersiveApplication>();
		};

		class ComPtr<TabletModeController>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<TabletModeToast>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<IWpnToastFeedback>(Details::ComPtrRef<ComPtr<IWpnToastFeedback> >);
			void Attach(TabletModeToast *);
		};

		struct ComPtr<TouchpadActionsComponent>
		{
			~ComPtr<TouchpadActionsComponent>();
		};

		class ComPtr<TouchpadActionsGestureHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(TouchpadActionsGestureHandler *);
		};

		struct ComPtr<TouchpadGestureComponent>
		{
			~ComPtr<TouchpadGestureComponent>();
		};

		struct ComPtr<TouchpadGestureInputProvider>
		{
			~ComPtr<TouchpadGestureInputProvider>();
		};

		class ComPtr<TouchpadKeyboardAction>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<TouchpadMediaAction>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<TouchpadVolumeAction>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<UserOobeHostAppManager>
		{
			~ComPtr<UserOobeHostAppManager>();
		};

		class ComPtr<WinRTInAppBackHandler::AsyncCallResult>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<WinRTInAppBackHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Actions::CActionArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(Windows::ApplicationModel::Actions::CActionArgs *);
		};

		class ComPtr<Windows::ApplicationModel::Actions::CMainWindowActivationInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::ApplicationModel::Actions::IActionActivationInfo>(Details::ComPtrRef<ComPtr<Windows::ApplicationModel::Actions::IActionActivationInfo> >);
			void Attach(Windows::ApplicationModel::Actions::CMainWindowActivationInfo *);
		};

		class ComPtr<Windows::ApplicationModel::Actions::IActionActivationInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Actions::IActionArgs>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::ApplicationModel::Actions::IActionExecutionBroker>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Actions::IActionHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::ApplicationModel::Actions::IActionHandler> & operator=(ComPtr<Windows::ApplicationModel::Actions::IActionHandler> const &);
		};

		class ComPtr<Windows::ApplicationModel::Actions::IBackStackActivationInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Actions::IHostedActionHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Actions::IHostedFlyoutOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Actions::IMainWindowActivationInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Activation::IActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Activation::IActivatedEventArgs>();
		};

		class ComPtr<Windows::ApplicationModel::Activation::IContactActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Activation::ISplashScreen>
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<Windows::ApplicationModel::Activation::ISplashScreen>();
		};

		struct ComPtr<Windows::ApplicationModel::Activation::ITileActivatedInfo>
		{
			~ComPtr<Windows::ApplicationModel::Activation::ITileActivatedInfo>();
		};

		class ComPtr<Windows::ApplicationModel::Activation::Private::IApplicationActivationProperties>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Activation::Private::IApplicationActivationProperties>();
		};

		class ComPtr<Windows::ApplicationModel::Activation::Private::IApplicationActivationResult>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Activation::Private::IApplicationActivationResult>();
		};

		class ComPtr<Windows::ApplicationModel::Activation::Private::IApplicationActivationStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Activation::Private::IApplicationActivationStatics>();
		};

		class ComPtr<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Appointments::IAppointment>
		{
		protected:
			void InternalAddRef();
		public:
			ComPtr<Windows::ApplicationModel::Appointments::IAppointment> & operator=(Windows::ApplicationModel::Appointments::IAppointment *);
		};

		class ComPtr<Windows::ApplicationModel::Appointments::IAppointmentInvitee>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Appointments::IAppointmentParticipant>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Appointments::IAppointmentRecurrence>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Calls::ILockScreenCallUIPriv>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::IContact2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::ApplicationModel::Contacts::IContact2> & operator=(Windows::ApplicationModel::Contacts::IContact2 *);
		};

		class ComPtr<Windows::ApplicationModel::Contacts::IContact>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::IContactAddress>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::ApplicationModel::Contacts::IContactAddress> & operator=(Windows::ApplicationModel::Contacts::IContactAddress *);
		};

		class ComPtr<Windows::ApplicationModel::Contacts::IContactName>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::Internal::IContactActionControl>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::Internal::IContactServiceDescription>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Contacts::Internal::IContactsListManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Core::IComponentPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Core::IComponentPrivate>();
		};

		class ComPtr<Windows::ApplicationModel::Core::ICoreApplication>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Core::ICoreApplication>();
		};

		class ComPtr<Windows::ApplicationModel::Core::ICoreApplicationPrivate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Core::ICoreApplicationViewInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Core::ICoreApplicationView_ApplicationWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::Core::IHostPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Core::IHostPrivate>();
		};

		class ComPtr<Windows::ApplicationModel::Core::Internal::IAppListEntryInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Core::Internal::IAppListEntryInternal>();
		};

		class ComPtr<Windows::ApplicationModel::DataTransfer::IDataPackage>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView>();
		};

		class ComPtr<Windows::ApplicationModel::DataTransfer::IDataPackageView>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IDataPackageViewPriv>(Details::ComPtrRef<ComPtr<IDataPackageViewPriv> >);
			~ComPtr<Windows::ApplicationModel::DataTransfer::IDataPackageView>();
		};

		class ComPtr<Windows::ApplicationModel::DataTransfer::IDataProviderDeferral>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::DataTransfer::IDataProviderHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::DataTransfer::IHtmlFormatHelperStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::ApplicationModel::DataTransfer::ISharedStorageAccessManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::DataTransfer::ISharedStorageAccessManagerStatics>();
		};

		class ComPtr<Windows::ApplicationModel::IAppInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::IAppInfo>();
		};

		class ComPtr<Windows::ApplicationModel::IPackage2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::IPackage2>();
		};

		class ComPtr<Windows::ApplicationModel::IPackage>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::IPackage>();
		};

		class ComPtr<Windows::ApplicationModel::IPackageId>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::IPackageId>();
		};

		class ComPtr<Windows::ApplicationModel::Internal::DataTransfer::ISharingOperation>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Internal::DataTransfer::ISharingOperation>();
		};

		class ComPtr<Windows::ApplicationModel::Store::Preview::InstallControl::IAppInstallItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Store::Preview::InstallControl::IAppInstallItem>();
		};

		class ComPtr<Windows::ApplicationModel::Store::Preview::InstallControl::IAppInstallManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Store::Preview::InstallControl::IAppInstallManager>();
		};

		class ComPtr<Windows::ApplicationModel::Store::Preview::InstallControl::IAppInstallStatus>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::ApplicationModel::Store::Preview::InstallControl::IAppInstallStatus>();
		};

		class ComPtr<Windows::Data::Json::IJsonArray>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Data::Json::IJsonArray>();
		};

		class ComPtr<Windows::Data::Json::IJsonObject>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Data::Json::IJsonValue>(Details::ComPtrRef<ComPtr<Windows::Data::Json::IJsonValue> >);
			~ComPtr<Windows::Data::Json::IJsonObject>();
		};

		class ComPtr<Windows::Data::Json::IJsonValue>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Data::Json::IJsonValue>();
		};

		class ComPtr<Windows::Data::Json::IJsonValueStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Data::Json::IJsonValueStatics>();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlCDataSection>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlDocument>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<Windows::Data::Xml::Dom::IXmlDocumentIO>(Details::ComPtrRef<ComPtr<Windows::Data::Xml::Dom::IXmlDocumentIO> >);
			long As<Windows::Data::Xml::Dom::IXmlNodeSelector>(Details::ComPtrRef<ComPtr<Windows::Data::Xml::Dom::IXmlNodeSelector> >);
			long As<Windows::Data::Xml::Dom::IXmlNodeSerializer>(Details::ComPtrRef<ComPtr<Windows::Data::Xml::Dom::IXmlNodeSerializer> >);
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlDocumentIO>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlElement>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Data::Xml::Dom::IXmlNode>(Details::ComPtrRef<ComPtr<Windows::Data::Xml::Dom::IXmlNode> >);
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlNamedNodeMap>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlNode>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Data::Xml::Dom::IXmlElement>(Details::ComPtrRef<ComPtr<Windows::Data::Xml::Dom::IXmlElement> >);
			long As<Windows::Data::Xml::Dom::IXmlNodeSerializer>(Details::ComPtrRef<ComPtr<Windows::Data::Xml::Dom::IXmlNodeSerializer> >);
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlNodeList>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlNodeSelector>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlNodeSerializer>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Data::Xml::Dom::IXmlText>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Data::Xml::Dom::IXmlNode>(Details::ComPtrRef<ComPtr<Windows::Data::Xml::Dom::IXmlNode> >);
		};

		class ComPtr<Windows::Devices::Geolocation::IGeocoordinate>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Devices::Geolocation::IGeolocator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Devices::Geolocation::IGeoposition>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::FamilySafety::Internal::IUserSettings>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::FamilySafety::Internal::IUserSettingsFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Detail::IPropertySetSerializer>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Detail::IPropertySetSerializer>();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<HSTRING__ *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<HSTRING__ *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<IUnknown *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<IUnknown *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactAddress *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactEmail *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactJobInfo *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactPhone *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFolder *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::IPickerFileType *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::IPickerFileType *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<double> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<double> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<int> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<int> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<HSTRING__ *> >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::ContactAddress *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::ContactEmail *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::ContactJobInfo *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::ContactPhone *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Package *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Package *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterator<Windows::Foundation::IExtensionRegistration *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IMapView<HSTRING__ *,Windows::Services::TargetedContent::TargetedContentValue *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Foundation::Collections::IObservableVector<IInspectable *> >
		{
			ComPtr<Windows::Foundation::Collections::IObservableVector<IInspectable *> > & operator=(Windows::Foundation::Collections::IObservableVector<IInspectable *> *);
		};

		class ComPtr<Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> > >);
		};

		class ComPtr<Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IPropertySet>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<Windows::Foundation::Collections::IPropertySet> & operator=(Windows::Foundation::Collections::IPropertySet *);
			long As<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> > >);
			~ComPtr<Windows::Foundation::Collections::IPropertySet>();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<HSTRING__ *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVector<HSTRING__ *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Appointments::AppointmentInvitee *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactAddress *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactAddress *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactAddress *> > >);
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount *> > >);
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactEmail *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactEmail *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactEmail *> > >);
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactJobInfo *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactPhone *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactPhone *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::ContactPhone *> > >);
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> > >);
			long As<Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> > >);
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> > >);
			long As<Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> > >);
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::Data::Json::IJsonValue *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVector<Windows::Data::Json::IJsonValue *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::Storage::IStorageFolder *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::Storage::Pickers::IPickerFileType *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVector<Windows::Storage::Pickers::IPickerFileType *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::UI::StartScreen::JumpListItem *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVector<Windows::UI::StartScreen::JumpListItem *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<HSTRING__ *> >
		{
		protected:
			void InternalAddRef();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<HSTRING__ *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::Feedback::FeedbackItem *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::Feedback::FeedbackItem *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::Application *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::Application *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::Package *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::Package *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::PackagePolicy *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::PackagePolicy *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::Protocol *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::IPickerFileType *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::IPickerFileType *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<Windows::System::Internal::Launch::ExtensionInfo *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::IVectorView<unsigned int> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IVectorView<unsigned int> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileHashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::AgileHashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> > >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> > >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileVector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileVector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileVector<IUnknown *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<IUnknown *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::AgileVector<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileVector<Windows::Storage::IStorageItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::IStorageItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::IStorageItem *>,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IInspectable>(Details::ComPtrRef<ComPtr<IInspectable> >);
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileVector<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::AgileVector<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileVector<double,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<double>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::AgileVector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > >
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > > & operator=(ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > > const &);
			void Attach(Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > *);
			~ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::Chunk>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::Chunk>();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::ChunkView>
		{
			ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::ChunkView> & operator=(ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::ChunkView> const &);
			~ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::ChunkView>();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::SplitIterator>
		{
			~ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::SplitIterator>();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleKeyValuePair<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleKeyValuePair<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<HSTRING__ *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<HSTRING__ *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<IUnknown *,Windows::Foundation::Collections::Internal::Vector<IUnknown *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<IUnknown *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,Windows::Foundation::Collections::Internal::VectorOptions<IUnknown *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<IUnknown *,Windows::Foundation::Collections::Internal::Vector<IUnknown *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<IUnknown *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,Windows::Foundation::Collections::Internal::VectorOptions<IUnknown *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,Windows::Foundation::Collections::Internal::Vector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,Windows::Foundation::Collections::Internal::Vector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Windows::Foundation::Collections::Internal::Vector<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Feedback::FeedbackItem *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Feedback::FeedbackItem *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Windows::Foundation::Collections::Internal::Vector<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Storage::IStorageFolder *,Windows::Foundation::Collections::Internal::Vector<Windows::Storage::IStorageFolder *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::IStorageFolder *> >,XWinRT::InterfaceLifetimeTraits,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Storage::IStorageItem *,Windows::Foundation::Collections::Internal::Vector<Windows::Storage::IStorageItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::IStorageItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::IStorageItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Storage::IStorageItem *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::IStorageItem *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::Vector<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::Pickers::IPickerFileType *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::Vector<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::Pickers::IPickerFileType *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::Vector<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::UI::StartScreen::JumpListItem *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::Vector<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::UI::StartScreen::JumpListItem *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<double,Windows::Foundation::Collections::Internal::Vector<double,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<double>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,Windows::Foundation::Collections::Internal::VectorOptions<double,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<double,Windows::Foundation::Collections::Internal::Vector<double,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<double>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,Windows::Foundation::Collections::Internal::VectorOptions<double,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<int,Windows::Foundation::Collections::Internal::Vector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,Windows::Foundation::Collections::Internal::VectorOptions<int,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<int,Windows::Foundation::Collections::Internal::Vector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,Windows::Foundation::Collections::Internal::VectorOptions<int,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<HSTRING__ *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<IUnknown *,Windows::Foundation::Collections::Internal::Vector<IUnknown *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<IUnknown *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,Windows::Foundation::Collections::Internal::VectorOptions<IUnknown *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,Windows::Foundation::Collections::Internal::Vector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,Windows::Foundation::Collections::Internal::Vector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Windows::Foundation::Collections::Internal::Vector<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Feedback::FeedbackItem *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Windows::Foundation::Collections::Internal::Vector<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Storage::IStorageFolder *,Windows::Foundation::Collections::Internal::Vector<Windows::Storage::IStorageFolder *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::IStorageFolder *> >,XWinRT::InterfaceLifetimeTraits,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Storage::IStorageItem *,Windows::Foundation::Collections::Internal::Vector<Windows::Storage::IStorageItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::IStorageItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::IStorageItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Storage::IStorageItem *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::IStorageItem *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::Vector<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::Pickers::IPickerFileType *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::Vector<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::UI::StartScreen::JumpListItem *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<double,Windows::Foundation::Collections::Internal::Vector<double,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<double>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,Windows::Foundation::Collections::Internal::VectorOptions<double,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<int,Windows::Foundation::Collections::Internal::Vector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,Windows::Foundation::Collections::Internal::VectorOptions<int,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<HSTRING__ *> > >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<HSTRING__ *> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<IUnknown *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<IUnknown *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,Windows::Foundation::Collections::Internal::VectorOptions<IUnknown *,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<IUnknown *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<IUnknown *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,Windows::Foundation::Collections::Internal::VectorOptions<IUnknown *,0,1,0> > >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> > >
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Feedback::FeedbackItem *,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Feedback::FeedbackItem *,0,1,0> > >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> > >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Storage::IStorageFolder *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::IStorageFolder *> > >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::Pickers::IPickerFileType *> > >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::Pickers::IPickerFileType *> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::UI::StartScreen::JumpListItem *,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::UI::StartScreen::JumpListItem *,0,1,0> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<double,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<double>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,Windows::Foundation::Collections::Internal::VectorOptions<double,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<double,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<double>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,Windows::Foundation::Collections::Internal::VectorOptions<double,0,1,0> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::Internal::Vector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,Windows::Foundation::Collections::Internal::VectorOptions<int,0,1,0> > >
		{
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,Windows::Foundation::Collections::Internal::VectorOptions<int,0,1,0> > >();
		};

		struct ComPtr<Windows::Foundation::Collections::VectorChangedEventHandler<IInspectable *> >
		{
			ComPtr<Windows::Foundation::Collections::VectorChangedEventHandler<IInspectable *> > & operator=(Windows::Foundation::Collections::VectorChangedEventHandler<IInspectable *> *);
		};

		class ComPtr<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IActivatableClassRegistration>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Foundation::IExeServerActivatableClassRegistration>(Details::ComPtrRef<ComPtr<Windows::Foundation::IExeServerActivatableClassRegistration> >);
		};

		class ComPtr<Windows::Foundation::IAsyncAction>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncAction>();
		};

		class ComPtr<Windows::Foundation::IAsyncActionCompletedHandler>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<Windows::Foundation::IAsyncActionCompletedHandler> & operator=(Windows::Foundation::IAsyncActionCompletedHandler *);
			~ComPtr<Windows::Foundation::IAsyncActionCompletedHandler>();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<HSTRING__ *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Internal::ComposableShell::Tabs::TabThumbnail *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::Internal::ComposableShell::Tabs::TabThumbnail *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::OnlineId::UserIdentity *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Services::TargetedContent::TargetedContentContainer *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::Services::TargetedContent::TargetedContentContainer *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<bool> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperation<bool> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<HSTRING__ *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		struct ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult *,Windows::Management::Deployment::DeploymentProgress> >
		{
			~ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult *,Windows::Management::Deployment::DeploymentProgress> >();
		};

		class ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> >
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Management::Deployment::DeploymentResult *,Windows::Management::Deployment::DeploymentProgress> >
		{
			~ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Management::Deployment::DeploymentResult *,Windows::Management::Deployment::DeploymentProgress> >();
		};

		class ComPtr<Windows::Foundation::IClosable>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IClosable>();
		};

		class ComPtr<Windows::Foundation::IEventHandler<IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IEventHandler<IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::IEventHandler<bool> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IEventHandler<bool> >();
		};

		class ComPtr<Windows::Foundation::IExeServerActivatableClassRegistration>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IExeServerRegistration>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IExtensionCatalog>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IExtensionRegistration>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Foundation::IPropertyValue>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IPropertyValue>();
		};

		class ComPtr<Windows::Foundation::IPropertyValueStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IPropertyValueStatics>();
		};

		class ComPtr<Windows::Foundation::IReference<Windows::Foundation::DateTime> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IReference<Windows::Foundation::Point> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IReference<Windows::Foundation::Rect> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::IReference<unsigned int> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *,IInspectable *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *,IInspectable *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Feedback::StringFeedback::StringFeedbackEngine *,Windows::Internal::Feedback::StringFeedback::StringFeedbackItem *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Feedback::StringFeedback::StringFeedbackEngine *,Windows::Internal::Feedback::StringFeedback::StringFeedbackItem *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Feedback::StringFeedback::StringFeedbackEngine *,bool> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Feedback::StringFeedback::StringFeedbackEngine *,bool> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64> >
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::ShellExperienceDispatcher *,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::ShellExperienceDispatcher *,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Popups::PopupClient *,Windows::Internal::Shell::Popups::PopupClientPropertyChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Popups::PopupClient *,Windows::Internal::Shell::Popups::PopupClientPropertyChangedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *> >();
		};

		class ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *> >();
		};

		class ComPtr<Windows::Foundation::IUriEscapeStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IUriEscapeStatics>();
		};

		class ComPtr<Windows::Foundation::IUriRuntimeClass>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::IUriRuntimeClass>();
		};

		class ComPtr<Windows::Foundation::IUriRuntimeClassFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Foundation::IUriEscapeStatics>(Details::ComPtrRef<ComPtr<Windows::Foundation::IUriEscapeStatics> >);
			~ComPtr<Windows::Foundation::IUriRuntimeClassFactory>();
		};

		class ComPtr<Windows::Foundation::Private::IComponentSite>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Private::IComponentSite>();
		};

		class ComPtr<Windows::Foundation::Private::IComponentSitePicker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IComponentSitePrivate>(Details::ComPtrRef<ComPtr<IComponentSitePrivate> >);
			long As<Windows::Foundation::Private::IComponentSite>(Details::ComPtrRef<ComPtr<Windows::Foundation::Private::IComponentSite> >);
		};

		class ComPtr<Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs>();
		};

		class ComPtr<Windows::Foundation::Private::ICompositionDevice>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Private::ICompositionDevice>();
		};

		class ComPtr<Windows::Foundation::Private::ICompositionVisual>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Private::ICompositionVisual>();
		};

		class ComPtr<Windows::Globalization::NumberFormatting::INumberFormatter>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Globalization::NumberFormatting::INumberFormatterOptions>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionActivatedArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::ApplicationDefaults::IApplicationDefaultHelpers>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::AssignedAccess::IAssignedAccessUserInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::IShellTab>
		{
		protected:
			void InternalAddRef();
		};

		struct ComPtr<Windows::Internal::ComposableShell::Tabs::ITabThumbnail>
		{
			~ComPtr<Windows::Internal::ComposableShell::Tabs::ITabThumbnail>();
		};

		class ComPtr<Windows::Internal::ComposableShell::Tabs::ITabTransferContext>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *>,Windows::Internal::GitPtr,2> >();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,Windows::Internal::GitPtr,2> >();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *>,Windows::Internal::GitPtr,2> >();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,Windows::Internal::GitPtr,2> >();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,Windows::Internal::GitPtr,2> >();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *>,Windows::Internal::GitPtr,2> >();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *>,Windows::Internal::GitPtr,2> >();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *>,Windows::Internal::GitPtr,2> >();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *>,Windows::Internal::GitPtr,2> >();
		};

		struct ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *>,Windows::Internal::GitPtr,2> >
		{
			~ComPtr<Windows::Internal::Details::GitInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *>,Windows::Internal::GitPtr,2> >();
		};

		class ComPtr<Windows::Internal::Feedback::IFeedbackBroker>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Feedback::IFeedbackBroker>();
		};

		class ComPtr<Windows::Internal::Feedback::IFeedbackItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Feedback::IFeedbackItem>();
		};

		class ComPtr<Windows::Internal::Feedback::IStepsRecorder>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine>();
		};

		struct ComPtr<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager>
		{
			~ComPtr<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager>();
		};

		class ComPtr<Windows::Internal::Holographic::Miracast::IHolographicMiracastControlStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::IAsyncDeferral>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Internal::IAsyncFireCompletion>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::Internal::IAsyncOperationLocal>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Internal::IComPoolTask>
		{
			~ComPtr<Windows::Internal::IComPoolTask>();
		};

		class ComPtr<Windows::Internal::INilDelegate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::INilDelegate>();
		};

		class ComPtr<Windows::Internal::OneCore::ViewEventHandlers::IComponentRelationshipStore>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IViewCUIEventStore>(Details::ComPtrRef<ComPtr<IViewCUIEventStore> >);
			~ComPtr<Windows::Internal::OneCore::ViewEventHandlers::IComponentRelationshipStore>();
		};

		struct ComPtr<Windows::Internal::Shell::AssignedAccess::AssignedAccessControllerProxy>
		{
			~ComPtr<Windows::Internal::Shell::AssignedAccess::AssignedAccessControllerProxy>();
		};

		class ComPtr<Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock> > & operator=(Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock> *);
		};

		struct ComPtr<Windows::Internal::Shell::Chaining::ChainLinkEventArgs>
		{
			void Attach(Windows::Internal::Shell::Chaining::ChainLinkEventArgs *);
			~ComPtr<Windows::Internal::Shell::Chaining::ChainLinkEventArgs>();
		};

		class ComPtr<Windows::Internal::Shell::Chaining::IChainLink>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<Windows::Internal::Shell::Chaining::IChainLink> & operator=(ComPtr<Windows::Internal::Shell::Chaining::IChainLink> const &);
			ComPtr<Windows::Internal::Shell::Chaining::IChainLink> & operator=(Windows::Internal::Shell::Chaining::IChainLink *);
			~ComPtr<Windows::Internal::Shell::Chaining::IChainLink>();
		};

		struct ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow>
		{
			~ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectProviderForWindow>();
		};

		class ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow> & operator=(ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow> const &);
			~ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow>();
		};

		class ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Desktop::ViewManagerInterop::IViewEventDispatcherDesktopExtension>();
		};

		struct ComPtr<Windows::Internal::Shell::Experience::ICortanaExperienceManager>
		{
			~ComPtr<Windows::Internal::Shell::Experience::ICortanaExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IDeviceDiscoveryExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator>
		{
			~ComPtr<Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IHostExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IHostExperienceManager>();
		};

		struct ComPtr<Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs>
		{
			~ComPtr<Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::INetworkFlyoutExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IPenWorkspaceExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IQuickConnectExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IScreenClippingExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::ISharePickerExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperienceDispatcher>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperiencePrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IShellExperiencePrivate>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IShoulderTapExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IShoulderTapExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::ISoftLandingExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::ISoftLandingExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IStartExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Experience::IToastCenterExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Experience::IToastCenterExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IContextIdentifierStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Holographic::IContextIdentifierStatics>();
		};

		class ComPtr<Windows::Internal::Shell::Holographic::IHolographicHotKeyHandler>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Holographic::IHolographicHotKeyHandler>();
		};

		class ComPtr<Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Foundation::Collections::IPropertySet>(Details::ComPtrRef<ComPtr<Windows::Foundation::Collections::IPropertySet> >);
			~ComPtr<Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions>();
		};

		class ComPtr<Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs>();
		};

		class ComPtr<Windows::Internal::Shell::ModalExperience::IModalExperienceManagerStatic>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			long As<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManagerAsUser>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManagerAsUser> >);
			~ComPtr<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager>();
		};

		class ComPtr<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManagerAsUser>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Popups::IPopupClient>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::Shell::Popups::IPopupClientStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Popups::IPopupClientStatics>();
		};

		class ComPtr<Windows::Internal::Shell::Share::IShareExperienceCallbacks>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::Share::IShareExperienceCallbacks>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher>
		{
		protected:
			void InternalAddRef();
		public:
			ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher> & operator=(ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher> const &);
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies>();
		};

		class ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> & operator=(ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const &);
			ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> & operator=(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
			long As<INtUserViewWrapper>(Details::ComPtrRef<ComPtr<INtUserViewWrapper> >);
			long As<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState> >);
			long As<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewResourcePolicies> >);
			~ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>();
		};

		class ComPtr<Windows::Internal::ShellLauncher::IShellLauncherProfile2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::ShellLauncher::IShellLauncherProfile>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::StateRepository::IApplication>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IApplication>();
		};

		class ComPtr<Windows::Internal::StateRepository::IApplicationExtension>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::StateRepository::IApplicationResourceResolver>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IApplicationResourceResolver>();
		};

		class ComPtr<Windows::Internal::StateRepository::IApplicationResourceResolverStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IApplicationResourceResolverStatics>();
		};

		class ComPtr<Windows::Internal::StateRepository::IApplicationStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IApplicationStatics>();
		};

		class ComPtr<Windows::Internal::StateRepository::IPackage>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IPackage>();
		};

		class ComPtr<Windows::Internal::StateRepository::IPackageFamily>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IPackageFamily>();
		};

		class ComPtr<Windows::Internal::StateRepository::IPackageFamilyStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IPackageFamilyStatics>();
		};

		struct ComPtr<Windows::Internal::StateRepository::IPackageLocation>
		{
			~ComPtr<Windows::Internal::StateRepository::IPackageLocation>();
		};

		struct ComPtr<Windows::Internal::StateRepository::IPackageLocationStatics>
		{
			~ComPtr<Windows::Internal::StateRepository::IPackageLocationStatics>();
		};

		struct ComPtr<Windows::Internal::StateRepository::IPackagePolicy>
		{
			~ComPtr<Windows::Internal::StateRepository::IPackagePolicy>();
		};

		class ComPtr<Windows::Internal::StateRepository::IPackagePolicyStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IPackagePolicyStatics>();
		};

		class ComPtr<Windows::Internal::StateRepository::IPackageStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IPackageStatics>();
		};

		class ComPtr<Windows::Internal::StateRepository::IProtocol>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::StateRepository::IProtocolStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::StateRepository::IUser>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IUser>();
		};

		class ComPtr<Windows::Internal::StateRepository::IUserStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::StateRepository::IUserStatics>();
		};

		class ComPtr<Windows::Internal::Storage::IObservableObjectFactoryStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::UI::SoftLanding::CSoftLandingPresenter>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Internal::UI::SoftLanding::ICourtesyEngine>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::UI::StartScreen::IJumpListItemPrivate>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::UI::StartScreen::IJumpListItemPrivate>();
		};

		class ComPtr<Windows::Internal::UI::StartScreen::IJumpListSerialization>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::UI::StartScreen::IJumpListSerialization>();
		};

		class ComPtr<Windows::Internal::UI::StartScreen::IJumpListSerializationStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::UI::StartScreen::IJumpListSerializationStatics>();
		};

		struct ComPtr<Windows::Internal::UI::StartScreen::JumpListBrokered>
		{
			~ComPtr<Windows::Internal::UI::StartScreen::JumpListBrokered>();
		};

		class ComPtr<Windows::Internal::UI::WindowsTip::CWindowsTipPresenter>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::UI::WindowsTip::CWindowsTipPresenter>();
		};

		class ComPtr<Windows::Management::Core::IApplicationDataManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Management::Deployment::IPackageManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Management::Deployment::IPackageManager>();
		};

		class ComPtr<Windows::Management::Deployment::Internal::IPackageManagerInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Management::Deployment::Internal::IPackageManagerInternal>();
		};

		class ComPtr<Windows::Media::Capture::Internal::IAppCaptureShellStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Media::Capture::Internal::IAppCaptureShellStatics>();
		};

		class ComPtr<Windows::Media::Casting::Internal::IDeviceAssociationAndAccessHelper>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Media::Casting::Internal::IDeviceAssociationAndAccessHelperFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Networking::Connectivity::IConnectionCost>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Networking::Connectivity::IConnectionProfile>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Security::Authentication::OnlineId::IOnlineIdAuthenticator>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicket>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequestFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Security::Authentication::OnlineId::IUserIdentity>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Services::TargetedContent::ITargetedContentAction>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Services::TargetedContent::ITargetedContentContainer>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Services::TargetedContent::Internal::ITargetedContentContainerInternal>(Details::ComPtrRef<ComPtr<Windows::Services::TargetedContent::Internal::ITargetedContentContainerInternal> >);
			~ComPtr<Windows::Services::TargetedContent::ITargetedContentContainer>();
		};

		class ComPtr<Windows::Services::TargetedContent::ITargetedContentContainerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Services::TargetedContent::ITargetedContentContainerStatics>();
		};

		class ComPtr<Windows::Services::TargetedContent::ITargetedContentItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Services::TargetedContent::ITargetedContentItem>();
		};

		class ComPtr<Windows::Services::TargetedContent::ITargetedContentObject>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Services::TargetedContent::ITargetedContentObject>();
		};

		class ComPtr<Windows::Services::TargetedContent::ITargetedContentValue>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Services::TargetedContent::Internal::ITargetedContentContainerInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Services::TargetedContent::Internal::ITargetedContentFilePathInternal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Services::TargetedContent::Internal::ITargetedContentItemInternalProperties>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::IApplicationData>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::IStorageFile>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<Windows::Storage::IStorageFile> & operator=(Windows::Storage::IStorageFile *);
			~ComPtr<Windows::Storage::IStorageFile>();
		};

		class ComPtr<Windows::Storage::IStorageFileStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::IStorageFileStatics>();
		};

		class ComPtr<Windows::Storage::IStorageFolder>
		{
		protected:
			void InternalAddRef();
		public:
			long As<Windows::Storage::IStorageItem>(Details::ComPtrRef<ComPtr<Windows::Storage::IStorageItem> >);
			~ComPtr<Windows::Storage::IStorageFolder>();
		};

		class ComPtr<Windows::Storage::IStorageFolderStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::IStorageFolderStatics>();
		};

		class ComPtr<Windows::Storage::IStorageItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::IStorageItem>();
		};

		class ComPtr<Windows::Storage::IStreamedFileDataRequestedHandler>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::Pickers::IPickerFileType>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::IPickerFileType>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::ICurrentLocationRequest>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::ICurrentLocationRequest>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::IFileOpenPickerUI>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::IFileOpenPickerUI>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::IFileRemovedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::IFileRemovedEventArgs>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::IFileSavePickerUI>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::IFileSavePickerUI>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::IPickerClosingDeferral>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::IPickerClosingDeferral>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::IPickerClosingEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::IPickerClosingEventArgs>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::IPickerClosingOperation>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::IPickerClosingOperation>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::ITargetFileRequest>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::ITargetFileRequest>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>();
		};

		class ComPtr<Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs>();
		};

		class ComPtr<Windows::Storage::Provider::ICachedFileUpdaterUI>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::Provider::IFileUpdateRequest>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Storage::Provider::IFileUpdateRequest>();
		};

		class ComPtr<Windows::Storage::Provider::IFileUpdateRequestDeferral>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Provider::IFileUpdateRequestDeferral>();
		};

		class ComPtr<Windows::Storage::Provider::IFileUpdateRequestedEventArgs>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Provider::IFileUpdateRequestedEventArgs>();
		};

		class ComPtr<Windows::Storage::Streams::IBuffer>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Storage::Streams::IBuffer>();
		};

		class ComPtr<Windows::Storage::Streams::IDataReader>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Streams::IDataReader>();
		};

		class ComPtr<Windows::Storage::Streams::IDataReaderStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Streams::IDataReaderStatics>();
		};

		class ComPtr<Windows::Storage::Streams::IInputStream>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::Streams::IRandomAccessStream>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::Streams::IRandomAccessStreamReference>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		};

		class ComPtr<Windows::Storage::Streams::IRandomAccessStreamReferenceStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Storage::Streams::IRandomAccessStreamStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::System::ILauncherOptions2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::System::ILauncherOptions2>();
		};

		class ComPtr<Windows::System::ILauncherOptions>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::System::ILauncherOptions2>(Details::ComPtrRef<ComPtr<Windows::System::ILauncherOptions2> >);
			~ComPtr<Windows::System::ILauncherOptions>();
		};

		class ComPtr<Windows::System::ILauncherStatics2>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::System::ILauncherStatics2>();
		};

		class ComPtr<Windows::System::ILauncherStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::System::ILauncherStatics>();
		};

		class ComPtr<Windows::System::ILauncherUIOptions>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<IObjectWithWindowRect>(Details::ComPtrRef<ComPtr<IObjectWithWindowRect> >);
		};

		class ComPtr<Windows::System::Internal::ISignInStateManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::System::Internal::ISignInStateManager>();
		};

		class ComPtr<Windows::System::Internal::IUserManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::System::Internal::IUserManagerStatics>();
		};

		class ComPtr<Windows::System::Internal::Launch::IExtensionInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::System::Internal::Launch::IQueryAssociationBrokerStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::System::UserProfile::IAssignedAccessSettings>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::System::UserProfile::IAssignedAccessSettings>();
		};

		class ComPtr<Windows::System::UserProfile::IAssignedAccessSettingsStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::System::UserProfile::IAssignedAccessSettingsStatics>();
		};

		class ComPtr<Windows::System::UserProfile::IGlobalizationPreferencesStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::UI::Composition::ICompositor>
		{
			ComPtr<Windows::UI::Composition::ICompositor> & operator=(Windows::UI::Composition::ICompositor *);
		};

		class ComPtr<Windows::UI::Composition::IInteropCompositorFactoryPartner>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Composition::IInteropCompositorFactoryPartner>();
		};

		class ComPtr<Windows::UI::Composition::IVisual>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Composition::IVisual>();
		};

		class ComPtr<Windows::UI::Composition::IVisualCollection>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Composition::IVisualCollection>();
		};

		class ComPtr<Windows::UI::Core::ICoreWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Core::ICoreWindowFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Core::ICoreWindowSite>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::Core::ICoreWindowSite>();
		};

		class ComPtr<Windows::UI::Core::ICoreWindowStatic>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Internal::Popups::IMessageDialogFactoryWithOwnerWindow>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotification2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotification>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotificationFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotificationHistory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotificationManagerStatics2>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotificationManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Notifications::IToastNotifier>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Popups::IMessageDialog>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Popups::IMessageDialogFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Popups::IPopupMenu>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::Popups::IUICommand>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::StartScreen::IJumpList>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::StartScreen::IJumpList>();
		};

		class ComPtr<Windows::UI::StartScreen::IJumpListItem>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::StartScreen::IJumpListItem>();
		};

		class ComPtr<Windows::UI::StartScreen::IJumpListItemStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::StartScreen::IJumpListItemStatics>();
		};

		class ComPtr<Windows::UI::StartScreen::IJumpListStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			long As<Windows::Internal::UI::StartScreen::IJumpListSerializationStatics>(Details::ComPtrRef<ComPtr<Windows::Internal::UI::StartScreen::IJumpListSerializationStatics> >);
			~ComPtr<Windows::UI::StartScreen::IJumpListStatics>();
		};

		class ComPtr<Windows::UI::ViewManagement::IActivationViewSwitcher>
		{
		protected:
			void InternalAddRef();
		};

		class ComPtr<Windows::UI::ViewManagement::IApplicationViewTransferContext>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::UI::ViewManagement::IApplicationViewTransferContextStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::UI::ViewManagement::IApplicationViewTransferContextStatics>();
		};

		class ComPtr<Windows::UI::ViewManagement::IUISettings2>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::UI::Xaml::Interop::IBindableObservableVector>
		{
			ComPtr<Windows::UI::Xaml::Interop::IBindableObservableVector> & operator=(Windows::UI::Xaml::Interop::IBindableObservableVector *);
		};

		struct ComPtr<Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler>
		{
			ComPtr<Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler> & operator=(Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler *);
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IPackagedAppTileInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IPackagedUnifiedTileIdentifierFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::ITileImageResource>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTile>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTile>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileIdentifier>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileIdentifier>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManager>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManagerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManagerStatics>();
		};

		class ComPtr<WindowsInternal::Shell::UnifiedTile::IVisualTileInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<WindowsInternal::Shell::UnifiedTile::IVisualTileInfo>();
		};

		class ComPtr<lockframework::ILockAppBrokerStatics>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<lockframework::ILockAppBrokerStatics>();
		};

		class ComPtr<wil::details::DummyUnknown>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<wil::details::IEventInvocationContext>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct DelegateTraits<-1>
		{
			static void EnsureStackSnapshot(long);
		};

		namespace Details
		{
			struct ComPtrRef<AgileRef>
			{
				operator AgileRef *();
			};

			struct ComPtrRef<WeakRef>
			{
				operator WeakRef *();
			};

			namespace DelegateArgTraits<long ( Windows::Foundation::ITypedEventHandler_impl<Windows::Foundation::Internal::AggregateType<Windows::Internal::Feedback::StringFeedback::StringFeedbackEngine *,Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine *>,Windows::Foundation::Internal::AggregateType<Windows::Internal::Feedback::StringFeedback::StringFeedbackItem *,Windows::Internal::Feedback::StringFeedback::IStringFeedbackItem *> >::*)(Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine *,Windows::Internal::Feedback::StringFeedback::IStringFeedbackItem *)>
			{
				struct DelegateInvokeHelper<Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Feedback::StringFeedback::StringFeedbackEngine *,Windows::Internal::Feedback::StringFeedback::StringFeedbackItem *>,FtmBase>,<lambda_28acb87489551a820b16ad4caa530280>,-1,Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine *,Windows::Internal::Feedback::StringFeedback::IStringFeedbackItem *>
				{
					virtual long Invoke(Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine *,Windows::Internal::Feedback::StringFeedback::IStringFeedbackItem *);
				};

			};

			namespace DelegateArgTraits<long ( Windows::Foundation::ITypedEventHandler_impl<Windows::Foundation::Internal::AggregateType<Windows::Internal::Feedback::StringFeedback::StringFeedbackEngine *,Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine *>,Windows::Foundation::Internal::AggregateType<bool,unsigned char> >::*)(Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine *,unsigned char)>
			{
				struct DelegateInvokeHelper<Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Feedback::StringFeedback::StringFeedbackEngine *,bool>,FtmBase>,<lambda_0729d2b71d9e8b03406be0143ca113e6>,-1,Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine *,unsigned char>
				{
					virtual long Invoke(Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine *,unsigned char);
				};

			};

			namespace DelegateArgTraits<long ( Windows::Foundation::ITypedEventHandler_impl<Windows::Foundation::Internal::AggregateType<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher *>,Windows::Foundation::Internal::AggregateType<Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *,Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs *> >::*)(Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs *)>
			{
				struct DelegateInvokeHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *>,<lambda_5a6e09720a77e16e18f4303ea0a3b3e3>,-1,Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs *>
				{
					virtual long Invoke(Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs *);
				};

			};

			namespace DelegateArgTraits<long ( Windows::Foundation::ITypedEventHandler_impl<Windows::Foundation::Internal::AggregateType<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::IToastNotification *>,IInspectable *>::*)(Windows::UI::Notifications::IToastNotification *,IInspectable *)>
			{
				struct DelegateInvokeHelper<Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,FtmBase>,<lambda_ef88ee175924e345a725c273155fec66> &,-1,Windows::UI::Notifications::IToastNotification *,IInspectable *>
				{
					DelegateInvokeHelper<Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,FtmBase>,<lambda_ef88ee175924e345a725c273155fec66> &,-1,Windows::UI::Notifications::IToastNotification *,IInspectable *>(<lambda_ef88ee175924e345a725c273155fec66> &);
					virtual long Invoke(Windows::UI::Notifications::IToastNotification *,IInspectable *);
				};

			};

			namespace DelegateArgTraits<long ( Windows::UI::Popups::IUICommandInvokedHandler::*)(Windows::UI::Popups::IUICommand *)>
			{
				struct DelegateInvokeHelper<Windows::UI::Popups::IUICommandInvokedHandler,<lambda_48f03e61741d85dde7999758d1807eca>,-1,Windows::UI::Popups::IUICommand *>
				{
					virtual long Invoke(Windows::UI::Popups::IUICommand *);
				};

			};

			struct EventTargetArray
			{
				EventTargetArray();
				long RuntimeClassInitialize(unsigned __int64);
				void AddTail(IUnknown *,void *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Implements<FtmBase,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirector>,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Implements<Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic2,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic3,FtmBase>,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Nil,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::ApplicationModel::Appointments::IAppointmentManagerStatics,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsWithPrelaunchAndViewIdBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsWithViewIdBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CCustomPropertyProviderWithMapImpl>,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IContactActionControl>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CFilePicker>,IWeakReferenceSource,Windows::Storage::Pickers::ICachedFileUpdateManager>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Windows::ApplicationModel::Actions::CHostedFlyoutActivationInfoImpl>,IWeakReferenceSource,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Windows::ApplicationModel::Actions::CMainWindowActivationInfoImpl>,IWeakReferenceSource>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,Windows::ApplicationModel::Contacts::Internal::IContactUIHelper,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IContactUIHelper2>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *>,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::UpdateFilesResult *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Pickers::IUpdateFilesResult,IWeakReferenceSource,CloakedIid<IUpdateFilesResultInternal> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Pickers::Provider::ICurrentLocationRequest,IWeakReferenceSource,CDeferrableRequest<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Pickers::Provider::IPickerClosingOperation,IWeakReferenceSource,CDeferrableRequest<Windows::Storage::Pickers::Provider::IPickerClosingDeferral> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Pickers::Provider::ITargetFileRequest,IWeakReferenceSource,CDeferrableRequest<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,CloakedIid<ICachedFileUpdaterEventSink>,CloakedIid<ICachedFileUpdaterInternal> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,CloakedIid<IFileUpdateRequestInternal>,CDeferrableRequest<Windows::Storage::Provider::IFileUpdateRequestDeferral> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<HSTRING__ *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<IUnknown *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFolder *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::IPickerFileType *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<double>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Foundation::Collections::IIterable<int>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::Feedback::IStepsRecorder,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal,CloakedIid<IHostedViewEventSink> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal,CloakedIid<IHostedViewEventSink> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,MixIn<CFileOpenPickerUI,CFileOpenPickerUIBase,1>,IWeakReferenceSource>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,MixIn<CFileOpenPickerUIInternal,CFileOpenPickerUIBase,1>,IWeakReferenceSource,Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal,CloakedIid<IHostedViewEventSink> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,MixIn<CFileSavePickerUI,CFileSavePickerUIBase,1>,IWeakReferenceSource>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,MixIn<CFileSavePickerUIInternal,CFileSavePickerUIBase,1>,IWeakReferenceSource,Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal,CloakedIid<IHostedViewEventSink> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser,CloakedIid<Windows::ApplicationModel::Activation::IInitializeActivatedEventArgs>,CloakedIid<Windows::ApplicationModel::Activation::IActivatedEventArgsInternal>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs,Windows::ApplicationModel::Activation::IViewSwitcherProvider,CloakedIid<Windows::ApplicationModel::Activation::IMultiviewActivationProperties> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic2,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic3,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionActivatedArgs,CActivatedEventArgsWithViewIdBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,0,IAgileObject>
			{
				ImplementsHelper<RuntimeClassFlags<2>,0,IAgileObject>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IAppActivationFailedHandler,IAppActivationFailedHandler2,IAppActivationFailedHandler3>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IAssocHandler,IObjectWithAppUserModelID,IObjectWithShellItem>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IBindStatusCallback,IImageDownloadTask,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IDesktopAppXActivator,CWRLObjectWithGITSite,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IEnterpriseChromeManager,IEnterpriseChromeManagerInternal,IApplicationViewChangeListener,IImmersiveApplicationNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IExtensionListItem,IExtensionListItemInternal,IObjectWithPropertyStore>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IGlobalRudeWindowNotificationService,IGlobalRudeWindowNotifications,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IHostedApplication,IHostedApplicationReconnectionInterop,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ILauncherContract,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,IMiracastConnectionEventHandler,IMiracastConnectionEventHwndForwarder,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,INotificationActivationCallback,IWpnToastFeedback,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,INowPlayingSessionManagerEventHandler,IMediaPlaybackDataChangedEventHandler,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CDCompAbstractThumbnail>,IShellTabThumbnail>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CDCompAbstractThumbnail>,IVirtualDesktopThumbnail>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ChainInterfaces<IRudeWindowManagerPriv,IRudeWindowManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IComponentUIPluginInternal,IComponentUIPlugin,IRetrieveViewCUIEventHandle,IComponentUIPlugin_CompositionIslands,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IEDPNotificationHost,IEnterpriseIdChangeNotificationProvider,IPopupCommandHandler>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveSettingsCache,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveWindowMessageNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ITabletModeController,ITabletModeController2,ITabletModeControllerPriv,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,ITabletModeController,ITabletModeController2,ITabletModeControllerPriv,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<IGlobalRudeWindowManagerPriv,IGlobalRudeWindowManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,IDesktopVisibilityChangesNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<IImmersiveBackstackManagerPriv,IImmersiveBackstackManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveBackstackSettings,IImmersiveApplicationNotification,IAppSwitcherNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ICompactOverlayManager,IImmersiveMonitorNotification,IApplicationViewChangeListener,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IEnterpriseChromeServiceProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveLayoutClient,IImmersiveMonitorNotification,IAccessibilityDockingServiceInternal,IImmersiveShellHookNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveShellHookNotification,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveSystemModeNotification,IImmersiveLayoutChanges,IFullScreenPositionerNotification,IRudeWindowManagerEvents,Implements<RuntimeClassFlags<2>,IEdgeUiManager,IEdgeUiManagerInternal,IEdgeUiInputCallback,ITabletModeChangeListener> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveWindowMessageNotification,IEdgeUiDeviceManager,IEdgeUiDeviceManagerInternal>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IInitializeTrustedComponentForegroundControl,IWindowManagementEvents>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ILauncherTipContextMenu,ILauncherTipContextMenuSettingChangeListener>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ITransitionCoordinator,ITabletModeChangeListener,ITimerCallback>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CLockScreenApplicationManagerBase>,ILockScreenContentionFlyout>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLExecuteCommandBase>,IInitializeCommand>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithGITSite>,IServiceProvider,ILaunchSourceViewSizePreference,ILaunchSourceAppUserModelId,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithGITSite>,IServiceProvider,IShouldSwitchToDesktop,ILayoutPreferencesOnAppLaunch,IExecuteCommandHost,ILocalCopyDownloadSettings,IWakeOnRPCCalls,ILaunchTargetMonitor,IUpdateViewValueSet,ILaunchUIContextProvider,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ChainInterfaces<IPersistFolder2,IPersistFolder,IPersist,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IShellFolder2,IShellFolder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IEdgeUiTouchInvocation,IEdgeUiDiscreteInvocation>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CXHHostAppManagerBase>,IOOBEExperienceNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<Implements<RuntimeClassFlags<2>,IFilePickerInternal,IShellItemFilter,IFileDialogEvents,ICompositionManager,ICachedFileUpdaterHost> >,CPickerController>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,0,WrlIDuiBehaviorImpl,IDirectManipulationViewportEventHandler,IGestureProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationDataPersistence,IApplicationPositionPersistence,IApplicationWindowSizingPersistence>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationInvocableFlow,IWakeUpOnTaskCompletion,CFlowBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationTargetingTracker,ISyncIAMEventHandler>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewChangeListener,IApplicationViewVisibilityDebouncedNotificationService,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewCompatibilityManager,IApplicationViewChangeListener,IImmersiveMonitorNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IAvailableMiracastDeviceEnumeratorListener,IDeviceUninstallerListener,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IConnectedSearchLogger2,IConnectedSearchContextManager,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IDesktopVisibilityChangesNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IDeviceElementSourceSink,IMiracastDeviceChallengeListener,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IDevicesFlow,IDevicesFlowProvider,CFlowBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IDialogManager,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,1,IDirectManipulationViewportEventHandler,IGestureProvider>
			{
				ImplementsHelper<RuntimeClassFlags<2>,1,IDirectManipulationViewportEventHandler,IGestureProvider>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IDropOperationTargetPriv,IReentrancyModelProvider,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IDropTarget,IImmersiveRawInputMouseNotification,IImmersiveRawInputKeyboardNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IFileDialogEvents,ICompositionManager,ICachedFileUpdaterHost>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,1,IGestureClient>
			{
				ImplementsHelper<RuntimeClassFlags<2>,1,IGestureClient>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveAppCrusherNotification,IHostedApplicationNotification,IBackStackApplicationNotification,IImmersiveSessionIdleNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveApplicationNotification,IApplicationViewChangeListener,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveApplicationNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveLayoutClient,IImmersiveMonitorNotification,IAccessibilityDockingServiceInternal,IImmersiveShellHookNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveLayoutSyncRegistration,IImmersiveShellComponent,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification,IApplicationViewChangeListener,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotificationService,IImmersiveMonitorNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotificationService,IImmersiveShellComponent,IImmersiveMonitorManager,IImmersiveMonitorManagerInternal,IImmersiveShellHookNotification,Implements<RuntimeClassFlags<2>,IImmersiveWindowMessageNotification,IImmersiveSystemModeNotification,IImmersiveLauncherVisibilityListener> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveSessionIdleNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveSessionIdleNotification>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellComponent,IServiceProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellComponent,IServiceProvider>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveSystemModeNotification,IImmersiveLayoutChanges,IFullScreenPositionerNotification,IRudeWindowManagerEvents,Implements<RuntimeClassFlags<2>,IEdgeUiManager,IEdgeUiManagerInternal,IEdgeUiInputCallback,ITabletModeChangeListener> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,IGameBarWatchDogCallback,IPrivilegedOperationsConsumer,IGameFocusNotificationService,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,IImmersiveMonitorNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,IDesktopVisibilityChangesNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,ITabletModeChangeListener>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveWindowMessageNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveWindowMessageNotification,IEdgeUiDeviceManager,IEdgeUiDeviceManagerInternal>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveWindowMessageService,IObjectWithWindow,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IInitializeTrustedComponentForegroundControl,ISnapComponent,IPriviledgedPositioner,IWindowManagementArrangementEvents>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IInitializeTrustedComponentForegroundControl,IWindowManagementEvents>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ILaunchSourceViewSizePreference,ILaunchSourceAppUserModelId,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ILocalCopyDownloadSettings,IWakeOnRPCCalls,ILaunchTargetMonitor,IUpdateViewValueSet,ILaunchUIContextProvider,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ILockScreenAppRunningCallback,IDesktopVisibilityChangesNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ILockScreenCallBroker,ILockScreenCallBrokerPriv,IImmersiveApplicationNotification,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,INotesManager,IApplicationFrameEventHandler,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification,IImmersiveLayoutChanges,IApplicationStateChangeHandler,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IObjectArray>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IObjectWithSelection,CWRLObjectWithSite>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,1,IObjectWithSite>
			{
				ImplementsHelper<RuntimeClassFlags<2>,1,IObjectWithSite>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IRawElementProviderFragment,IRawElementProviderFragmentRoot,IBadgeWindowAcc>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IRetrieveViewCUIEventHandle,IComponentUIPlugin_CompositionIslands,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider,CWRLObjectWithGITSite>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider,ChainInterfaces<IInternalImmersiveLayout,IImmersiveLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveLayoutSyncRegistration,IImmersiveShellComponent,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider,ILaunchTargetViewSizePreference,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IShareAndDevicesFlow,IPopupEventHandler,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IShellTargetingTracker,IShellTargetingContractManager,IApplicationViewChangeListener,IShellTargetingTrackerPrivate,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IShouldSwitchToDesktop,ILayoutPreferencesOnAppLaunch,IExecuteCommandHost,ILocalCopyDownloadSettings,IWakeOnRPCCalls,ILaunchTargetMonitor,IUpdateViewValueSet,ILaunchUIContextProvider,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ISnapAssistControllerPrivate,ISnapAssistCallback,ITabletModePositionerManagerNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ISortHintProvider,IApplicationHost,IPickerPrivate>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IStepsRecording,ChainInterfaces<IStringFeedback2,IStringFeedback,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IConnectionPoint,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ISyncIAMEventHandler,IActiveZBandNotificationForMonitorService>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModeChangeListener,IApplicationViewChangeListener,IShellTargetingChangeNotification,ITabletModePositionerManagerNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModeController2,ITabletModeControllerPriv,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ITabletModePositionerManagerNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ITouchpadGesture>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IUnknown>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IUpdateViewValueSet,ILaunchUIContextProvider,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IInputHostLayout,IInputHostManager>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,INotesManager,IApplicationFrameEventHandler,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification,IImmersiveLayoutChanges,IApplicationStateChangeHandler,IPrivilegedOperationsConsumer>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IBrowserSettings,IPickerInternal,IEnumerationBlockOptions> >,Implements<RuntimeClassFlags<2>,IPackageExecutionStateChangeNotification,IApplicationStateChangeHandler,ISortHintProvider,IApplicationHost,IPickerPrivate> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IServiceProvider,IPickerController,IAppInstanceViewCache> >,Implements<RuntimeClassFlags<2>,IBrowserSettings,IPickerInternal,IEnumerationBlockOptions>,Implements<RuntimeClassFlags<2>,IPackageExecutionStateChangeNotification,IApplicationStateChangeHandler,ISortHintProvider,IApplicationHost,IPickerPrivate> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,Windows::Foundation::IEventHandler<IInspectable *>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<2>,1,Windows::Foundation::IEventHandler<IInspectable *>,FtmBase>();
			};

			class ImplementsHelper<RuntimeClassFlags<2>,1,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,ChainInterfaces<IHostedApplicationBridgeWindow,IHostedApplicationFrameWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWeakReferenceSource,IInspectable,IObjectWithWindow,CWRLObjectWithSite,IInputObject,IComponentUIHostedAppFrame,IServiceProvider,IHostedApplicationTaskCompletion>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,FtmBase,IWeakReferenceSource,CImmersiveShellComponentWithGITSite,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *>,Windows::Internal::Shell::Experience::IShellExperienceDispatcher,Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization,IShellExperienceNotification,Windows::Foundation::IClosable,CloakedIid<ITimerCallback> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,IServiceProvider,IWeakReferenceSource,ISearchControlBroker,ISearchControlBrokerLocal,ISearchTypeAheadEventsSink,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,IWeakReferenceSource,CWRLObjectWithSite,IHostedApplicationActivationManager,IHostedApplicationActivationManager2,ChainInterfaces<IHostedApplicationActivationManagerPrivateCallbacks,ISplashScreen,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ICoreWindowFactoryPriv,IServiceProvider,IObjectWithWindow>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,IInspectable,IWeakReferenceSource,CWRLObjectWithSite,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CImmersiveWindowFactoryBase>,IWeakReferenceSource>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<Implements<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IComponentUIHostedActivationManager,ICoreWindowFactoryPriv,ISplashScreen,IServiceProvider,IComponentUIHostedActivationManagerTest,IObjectWithWindow> >,IWeakReferenceSource,Implements<RuntimeClassFlags<3>,ISplashScreenUI,IComponentUIEventHandler> >
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase>,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IControlMapActionControlItem>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::ApplicationModel::Actions::IActionHandler,IWeakReferenceSource,Windows::ApplicationModel::Actions::IHostedActionHandler>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::ApplicationModel::Activation::ISplashScreen,IWeakReferenceSource,CloakedIid<ISplashScreenPriv> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Foundation::Collections::IIterator<IInspectable *>,IWeakReferenceSource,FtmBaseEnableIfAgile<1> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Internal::Shell::Experience::IDevicePickerExperienceManager,IWeakReferenceSource,ILightDismissNotification,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Internal::Shell::Experience::IPenWorkspaceExperienceManager,IWeakReferenceSource,ILightDismissNotification,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveMonitorNotification,INotesManagerCallback,Windows::System::Private::IPendingLaunch>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,0,Windows::Internal::Shell::Experience::ISharePickerExperienceManager,IWeakReferenceSource,IApplicationViewChangeListener,IImmersiveWindowMessageNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ChainInterfaces<IHostedApplicationBridgeWindow,IHostedApplicationFrameWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IWeakReferenceSource,IInspectable,IObjectWithWindow,CWRLObjectWithSite,IInputObject,IComponentUIHostedAppFrame,IServiceProvider,IHostedApplicationTaskCompletion>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<CWrlLightweightHandlerServer>,CloakedIid<IConfigureWindowFactory>,CloakedIid<ICoreWindowFactoryPriv> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IConfigureWindowFactory>,CloakedIid<ICoreWindowFactoryPriv> >
			{
				ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IConfigureWindowFactory>,CloakedIid<ICoreWindowFactoryPriv> >();
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IPickerPrivateInitialization>,CloakedIid<IPickerInitializationInfo>,CloakedIid<IInitializeWithWindow> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<Windows::Internal::IAsyncDeferral>,CloakedIid<Windows::Internal::IComPoolTask>,CloakedIid<Windows::Internal::IAsyncFireCompletion> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IComponentUIHostedAppFrame,IServiceProvider,IHostedApplicationTaskCompletion>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ICoreWindowFactoryPriv,ISplashScreen,IServiceProvider,IComponentUIHostedActivationManagerTest,IObjectWithWindow>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IHostedApplicationActivationManager2,ChainInterfaces<IHostedApplicationActivationManagerPrivateCallbacks,ISplashScreen,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ICoreWindowFactoryPriv,IServiceProvider,IObjectWithWindow>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IHostedApplicationExperienceManager,IImmersiveWindowMessageNotification,IHostedApplicationExperienceRecoveryInterop,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveLayoutChanges,SttInternal::ISttExperienceManager,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveMonitorNotification,INotesManagerCallback,Windows::System::Private::IPendingLaunch>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveRawInputKeyboardNotification,Windows::Internal::Shell::Experience::ISoftLandingExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveMonitorNotification,INotesManagerCallback,Windows::System::Private::IPendingLaunch>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveWindowMessageNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveWindowMessageNotification>();
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IMultitaskingViewVisibilityNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ILightDismissNotification,IApplicationFrameTitleBarPinButtonHandler,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ILightDismissNotification,IWeakReferenceSource,IInputHostLayoutChanges>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IObjectWithWindow>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IOleWindow,CWRLObjectWithGITSite,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ISearchControlBroker,ISearchControlBrokerLocal,ISearchTypeAheadEventsSink,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IServiceProvider,IComponentUIHostedActivationManagerTest,IObjectWithWindow>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,IServiceProvider>
			{
				ImplementsHelper<RuntimeClassFlags<3>,1,IServiceProvider>();
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,CImmersiveShellComponentWithGITSite>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,CWRLObjectWithSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler>,Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IImmersiveMonitorNotification,IDevicesFlowController,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IInitializeWithItem,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionUI>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IInspectable,IObjectWithWindow,CWRLObjectWithSite,IInputObject,IComponentUIHostedAppFrame,IServiceProvider,IHostedApplicationTaskCompletion>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,ILightDismissNotification,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveMonitorNotification,INotesManagerCallback,Windows::System::Private::IPendingLaunch>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Implements<RuntimeClassFlags<3>,ISplashScreenUI,IComponentUIEventHandler> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Actions::IHostedFlyoutOperation,IObjectProvider>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Foundation::IClosable,InputDial::IInputDialDeviceCallback,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IMultitaskingViewVisibilityNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Internal::ComposableShell::Tabs::IApplicationViewTabOperation,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager,IPrivilegedOperationsConsumer,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveSessionIdleNotification,Windows::Shell::ModalExperienceHelpers::IDesktopModalExperiencePreparation,Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler,IHolographicViewTransitionNotification,IImmersiveShellHookNotification,FtmBase>
			{
			protected:
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::Storage::Streams::IInputStream,Windows::Storage::Streams::IOutputStream,Windows::Foundation::IClosable,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CCustomPropertyProviderWithMapImpl>,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,CloakedIid<IObjectWithShellItem> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveWindowMessageNotification>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IWeakReferenceSource,Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager,IPrivilegedOperationsConsumer,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveSessionIdleNotification,Windows::Shell::ModalExperienceHelpers::IDesktopModalExperiencePreparation,Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler,IHolographicViewTransitionNotification,IImmersiveShellHookNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *>,Windows::Internal::Shell::Experience::IShellExperienceDispatcher,Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization,IShellExperienceNotification,Windows::Foundation::IClosable,CloakedIid<ITimerCallback> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CWRLObjectWithGITSite>,CActivatedEventArgsWithViewIdBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CWRLObjectWithSite>,IComponentUIHostedActivationManager,ICoreWindowFactoryPriv,ISplashScreen,IServiceProvider,IComponentUIHostedActivationManagerTest,IObjectWithWindow>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CWRLObjectWithSite>,IHostedApplicationActivationManager,IHostedApplicationActivationManager2,ChainInterfaces<IHostedApplicationActivationManagerPrivateCallbacks,ISplashScreen,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ICoreWindowFactoryPriv,IServiceProvider,IObjectWithWindow>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CWRLObjectWithSite>,IInputObject,IComponentUIHostedAppFrame,IServiceProvider,IHostedApplicationTaskCompletion>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CWRLObjectWithSite>,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CWRLObjectWithSite>,IWeakReferenceSource,IAppCrusherPopup>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler> >,Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
				void FillArrayWithIid(unsigned long *,_GUID *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,CloakedIid<IServiceProvider>,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>,CWRLObjectWithGITSite,CActivatedEventArgsWithViewIdBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::Collections::IIterable<IInspectable *> >
			{
				ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::Collections::IIterable<IInspectable *> >();
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::Collections::IObservableVector<IInspectable *> >
			{
				ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::Collections::IObservableVector<IInspectable *> >();
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::Collections::IVector<IInspectable *> >
			{
				ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::Collections::IVector<IInspectable *> >();
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::IClosable,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::IClosable>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			public:
				ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::IClosable>();
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>
			{
				ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>();
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::IAsyncOperationLocal,CloakedIid<Windows::Internal::IAsyncDeferral>,CloakedIid<Windows::Internal::IComPoolTask>,CloakedIid<Windows::Internal::IAsyncFireCompletion> >
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager,IPrivilegedOperationsConsumer,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveSessionIdleNotification,Windows::Shell::ModalExperienceHelpers::IDesktopModalExperiencePreparation,Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler,IHolographicViewTransitionNotification,IImmersiveShellHookNotification,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,Windows::UI::Xaml::Interop::IBindableObservableVector>
			{
				ImplementsHelper<RuntimeClassFlags<3>,1,Windows::UI::Xaml::Interop::IBindableObservableVector>();
			};

			class ImplementsHelper<RuntimeClassFlags<6>,0,IClassFactory,IImmersiveShellComponent,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<6>,0,IClassFactory,Nil,Nil,Nil,Nil>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct MakeAllocator<ApplicationIdentityInfo>
			{
				~MakeAllocator<ApplicationIdentityInfo>();
			};

			struct MakeAllocator<BadgeWindow>
			{
				~MakeAllocator<BadgeWindow>();
			};

			struct MakeAllocator<BadgeWindowController>
			{
				~MakeAllocator<BadgeWindowController>();
			};

			struct MakeAllocator<BadgeWindowPositionCache>
			{
				~MakeAllocator<BadgeWindowPositionCache>();
			};

			struct MakeAllocator<BroadcastDVRComponent>
			{
				~MakeAllocator<BroadcastDVRComponent>();
			};

			struct MakeAllocator<CActivationErrorPopupHost>
			{
				~MakeAllocator<CActivationErrorPopupHost>();
			};

			struct MakeAllocator<CAgileEnumerableObjectCollection>
			{
				~MakeAllocator<CAgileEnumerableObjectCollection>();
			};

			struct MakeAllocator<CBamThrottleSettings>
			{
				~MakeAllocator<CBamThrottleSettings>();
			};

			struct MakeAllocator<CBaseTrayFlyoutExperienceManager::DebounceDetection::Notification>
			{
				~MakeAllocator<CBaseTrayFlyoutExperienceManager::DebounceDetection::Notification>();
			};

			struct MakeAllocator<CBaseTrayFlyoutExperienceManager>
			{
				~MakeAllocator<CBaseTrayFlyoutExperienceManager>();
			};

			struct MakeAllocator<CBrokeredAppointmentsManager>
			{
				~MakeAllocator<CBrokeredAppointmentsManager>();
			};

			struct MakeAllocator<CContactManagerBroker>
			{
				~MakeAllocator<CContactManagerBroker>();
			};

			struct MakeAllocator<CDCompCustomPaintThumbnail>
			{
				~MakeAllocator<CDCompCustomPaintThumbnail>();
			};

			struct MakeAllocator<CDCompDesktopThumbnail>
			{
				~MakeAllocator<CDCompDesktopThumbnail>();
			};

			struct MakeAllocator<CDCompRootThumbnail>
			{
				~MakeAllocator<CDCompRootThumbnail>();
			};

			struct MakeAllocator<CDCompShellTabThumbnail>
			{
				~MakeAllocator<CDCompShellTabThumbnail>();
			};

			struct MakeAllocator<CDCompVirtualDesktopThumbnail>
			{
				~MakeAllocator<CDCompVirtualDesktopThumbnail>();
			};

			struct MakeAllocator<CDCompWindowThumbnail>
			{
				~MakeAllocator<CDCompWindowThumbnail>();
			};

			struct MakeAllocator<CDevicesFlowExperienceManager>
			{
				~MakeAllocator<CDevicesFlowExperienceManager>();
			};

			struct MakeAllocator<CEmptyThumbnail>
			{
				~MakeAllocator<CEmptyThumbnail>();
			};

			struct MakeAllocator<CExpansionExperienceManager>
			{
				~MakeAllocator<CExpansionExperienceManager>();
			};

			struct MakeAllocator<CFileOpenPickerActivatedEventArgs>
			{
				~MakeAllocator<CFileOpenPickerActivatedEventArgs>();
			};

			struct MakeAllocator<CFileOpenPickerUI>
			{
				~MakeAllocator<CFileOpenPickerUI>();
			};

			struct MakeAllocator<CFileOpenPickerUIInternal>
			{
				~MakeAllocator<CFileOpenPickerUIInternal>();
			};

			struct MakeAllocator<CFilePickerController>
			{
				~MakeAllocator<CFilePickerController>();
			};

			struct MakeAllocator<CFileUpdateRequest>
			{
				~MakeAllocator<CFileUpdateRequest>();
			};

			struct MakeAllocator<CFileUpdateResult>
			{
				~MakeAllocator<CFileUpdateResult>();
			};

			struct MakeAllocator<CGITCallbackArray>
			{
				~MakeAllocator<CGITCallbackArray>();
			};

			struct MakeAllocator<CGameEntry>
			{
				~MakeAllocator<CGameEntry>();
			};

			struct MakeAllocator<CGlobalRudeWindowManager>
			{
				~MakeAllocator<CGlobalRudeWindowManager>();
			};

			struct MakeAllocator<CHostExperienceManager>
			{
				~MakeAllocator<CHostExperienceManager>();
			};

			struct MakeAllocator<CImmersiveMonitor>
			{
				~MakeAllocator<CImmersiveMonitor>();
			};

			struct MakeAllocator<CImmersiveMonitorManager>
			{
				~MakeAllocator<CImmersiveMonitorManager>();
			};

			struct MakeAllocator<CImmersiveMonitorNotificationServiceProxy>
			{
				~MakeAllocator<CImmersiveMonitorNotificationServiceProxy>();
			};

			struct MakeAllocator<CImmersiveProxyMonitor>
			{
				~MakeAllocator<CImmersiveProxyMonitor>();
			};

			struct MakeAllocator<CImmersiveSessionIdleDetector>
			{
				~MakeAllocator<CImmersiveSessionIdleDetector>();
			};

			struct MakeAllocator<CImmersiveWindowMessageService>
			{
				~MakeAllocator<CImmersiveWindowMessageService>();
			};

			struct MakeAllocator<CImpressionData>
			{
				~MakeAllocator<CImpressionData>();
			};

			struct MakeAllocator<CInputDialExperienceManager>
			{
				~MakeAllocator<CInputDialExperienceManager>();
			};

			struct MakeAllocator<CLaunchActivatedEventArgs>
			{
				~MakeAllocator<CLaunchActivatedEventArgs>();
			};

			struct MakeAllocator<CLegacyProcessLifetimeManagerProxy>
			{
				~MakeAllocator<CLegacyProcessLifetimeManagerProxy>();
			};

			struct MakeAllocator<CMessageNotificationHolder>
			{
				~MakeAllocator<CMessageNotificationHolder>();
			};

			struct MakeAllocator<CMiracastBannerExperienceManager>
			{
				~MakeAllocator<CMiracastBannerExperienceManager>();
			};

			struct MakeAllocator<CPenWorkspaceExperienceManager>
			{
				~MakeAllocator<CPenWorkspaceExperienceManager>();
			};

			struct MakeAllocator<CPickerClosingOperation>
			{
				~MakeAllocator<CPickerClosingOperation>();
			};

			struct MakeAllocator<CProjectionContext>
			{
				~MakeAllocator<CProjectionContext>();
			};

			struct MakeAllocator<CQueryKnownGameList>
			{
				~MakeAllocator<CQueryKnownGameList>();
			};

			struct MakeAllocator<CRudeWindowManager>
			{
				~MakeAllocator<CRudeWindowManager>();
			};

			struct MakeAllocator<CRunningShareUI>
			{
				~MakeAllocator<CRunningShareUI>();
			};

			struct MakeAllocator<CSharePickerExperienceManager>
			{
				~MakeAllocator<CSharePickerExperienceManager>();
			};

			struct MakeAllocator<CShellExperienceDispatcher>
			{
				~MakeAllocator<CShellExperienceDispatcher>();
			};

			struct MakeAllocator<CShellExperienceManagerFactory>
			{
				~MakeAllocator<CShellExperienceManagerFactory>();
			};

			struct MakeAllocator<CShellFeedbackService>
			{
				~MakeAllocator<CShellFeedbackService>();
			};

			struct MakeAllocator<CSnappedWindow>
			{
				~MakeAllocator<CSnappedWindow>();
			};

			struct MakeAllocator<CSnappedWindowModel>
			{
				~MakeAllocator<CSnappedWindowModel>();
			};

			struct MakeAllocator<CSoftLandingExperienceManager>
			{
				~MakeAllocator<CSoftLandingExperienceManager>();
			};

			struct MakeAllocator<CSolidColorThumbnail>
			{
				~MakeAllocator<CSolidColorThumbnail>();
			};

			struct MakeAllocator<CSplashScreenEvents>
			{
				~MakeAllocator<CSplashScreenEvents>();
			};

			struct MakeAllocator<CSplashScreenTimer>
			{
				~MakeAllocator<CSplashScreenTimer>();
			};

			struct MakeAllocator<CSplashScreenUIController>
			{
				~MakeAllocator<CSplashScreenUIController>();
			};

			struct MakeAllocator<CSwitchThumbnailDeviceManager>
			{
				~MakeAllocator<CSwitchThumbnailDeviceManager>();
			};

			struct MakeAllocator<CSwitchThumbnailFactory>
			{
				~MakeAllocator<CSwitchThumbnailFactory>();
			};

			struct MakeAllocator<CTargetFileRequest>
			{
				~MakeAllocator<CTargetFileRequest>();
			};

			struct MakeAllocator<CTestExperienceManager>
			{
				~MakeAllocator<CTestExperienceManager>();
			};

			struct MakeAllocator<CUpdateFilesResult>
			{
				~MakeAllocator<CUpdateFilesResult>();
			};

			struct MakeAllocator<CUpdateFilesResultArray>
			{
				~MakeAllocator<CUpdateFilesResultArray>();
			};

			struct MakeAllocator<CharmsBarStyleFlyoutExperienceManager>
			{
				~MakeAllocator<CharmsBarStyleFlyoutExperienceManager>();
			};

			struct MakeAllocator<ClickNote>
			{
				~MakeAllocator<ClickNote>();
			};

			struct MakeAllocator<CompactOverlayManager>
			{
				~MakeAllocator<CompactOverlayManager>();
			};

			struct MakeAllocator<CompactOverlayPositioner>
			{
				~MakeAllocator<CompactOverlayPositioner>();
			};

			struct MakeAllocator<ComponentUIHostedAppFrame>
			{
				~MakeAllocator<ComponentUIHostedAppFrame>();
			};

			struct MakeAllocator<ComponentUIPlugin>
			{
				~MakeAllocator<ComponentUIPlugin>();
			};

			struct MakeAllocator<CredentialResetExperienceManager>
			{
				~MakeAllocator<CredentialResetExperienceManager>();
			};

			struct MakeAllocator<CredentialResetHostAppManager>
			{
				~MakeAllocator<CredentialResetHostAppManager>();
			};

			struct MakeAllocator<EnterpriseChromeManager>
			{
				~MakeAllocator<EnterpriseChromeManager>();
			};

			struct MakeAllocator<EnterpriseChromeServiceProvider>
			{
				~MakeAllocator<EnterpriseChromeServiceProvider>();
			};

			struct MakeAllocator<FullscreenEventListener>
			{
				~MakeAllocator<FullscreenEventListener>();
			};

			struct MakeAllocator<GamingAudio::AppList>
			{
				~MakeAllocator<GamingAudio::AppList>();
			};

			struct MakeAllocator<GamingOverlayExperienceManager>
			{
				~MakeAllocator<GamingOverlayExperienceManager>();
			};

			struct MakeAllocator<GammaFlashAsyncOperation>
			{
				~MakeAllocator<GammaFlashAsyncOperation>();
			};

			struct MakeAllocator<GlobalRudeWindowNotifications>
			{
				~MakeAllocator<GlobalRudeWindowNotifications>();
			};

			struct MakeAllocator<HostedApplicationExperienceManager>
			{
				~MakeAllocator<HostedApplicationExperienceManager>();
			};

			struct MakeAllocator<InkWorkspaceHostedAppsManager>
			{
				~MakeAllocator<InkWorkspaceHostedAppsManager>();
			};

			struct MakeAllocator<InputTracker>
			{
				~MakeAllocator<InputTracker>();
			};

			struct MakeAllocator<IsGameManager>
			{
				~MakeAllocator<IsGameManager>();
			};

			struct MakeAllocator<MiracastConnectionEventHwndForwarder>
			{
				~MakeAllocator<MiracastConnectionEventHwndForwarder>();
			};

			struct MakeAllocator<ModalExperienceDialog>
			{
				~MakeAllocator<ModalExperienceDialog>();
			};

			struct MakeAllocator<ModalWindowExperienceManager>
			{
				~MakeAllocator<ModalWindowExperienceManager>();
			};

			struct MakeAllocator<MsaWindowManagerImpl>
			{
				~MakeAllocator<MsaWindowManagerImpl>();
			};

			struct MakeAllocator<NotesManager>
			{
				~MakeAllocator<NotesManager>();
			};

			struct MakeAllocator<OOBEExperienceManager>
			{
				~MakeAllocator<OOBEExperienceManager>();
			};

			struct MakeAllocator<PenEventsAdapter>
			{
				~MakeAllocator<PenEventsAdapter>();
			};

			struct MakeAllocator<PenSignalManagerImpl>
			{
				~MakeAllocator<PenSignalManagerImpl>();
			};

			struct MakeAllocator<PenSignalSourceAdapter>
			{
				~MakeAllocator<PenSignalSourceAdapter>();
			};

			struct MakeAllocator<ProjectCharmSession>
			{
				~MakeAllocator<ProjectCharmSession>();
			};

			struct MakeAllocator<PublicShellFeedbackBroker>
			{
				~MakeAllocator<PublicShellFeedbackBroker>();
			};

			struct MakeAllocator<QuietHoursService>
			{
				~MakeAllocator<QuietHoursService>();
			};

			struct MakeAllocator<ShellDropTarget>
			{
				~MakeAllocator<ShellDropTarget>();
			};

			struct MakeAllocator<ShellExperienceHelpers::Internal::ProxyModalWindow>
			{
				~MakeAllocator<ShellExperienceHelpers::Internal::ProxyModalWindow>();
			};

			struct MakeAllocator<SimpleSealedActivationFactory<DesktopContactCardExperience,0> >
			{
				~MakeAllocator<SimpleSealedActivationFactory<DesktopContactCardExperience,0> >();
			};

			struct MakeAllocator<SimpleSealedActivationFactory<Windows::ApplicationModel::Contacts::Internal::ContactUIHelper,0> >
			{
				~MakeAllocator<SimpleSealedActivationFactory<Windows::ApplicationModel::Contacts::Internal::ContactUIHelper,0> >();
			};

			struct MakeAllocator<SnapServiceProvider>
			{
				~MakeAllocator<SnapServiceProvider>();
			};

			struct MakeAllocator<StaThreadPoolActivationFactoryWithInitialize<CCachedFileUpdateManager,Nil> >
			{
				~MakeAllocator<StaThreadPoolActivationFactoryWithInitialize<CCachedFileUpdateManager,Nil> >();
			};

			struct MakeAllocator<StoreFrontNotificationHelper>
			{
				~MakeAllocator<StoreFrontNotificationHelper>();
			};

			struct MakeAllocator<SttExperienceManager>
			{
				~MakeAllocator<SttExperienceManager>();
			};

			struct MakeAllocator<TabletModeToast>
			{
				~MakeAllocator<TabletModeToast>();
			};

			struct MakeAllocator<TouchpadActionsComponent>
			{
				~MakeAllocator<TouchpadActionsComponent>();
			};

			struct MakeAllocator<TouchpadActionsGestureHandler>
			{
				~MakeAllocator<TouchpadActionsGestureHandler>();
			};

			struct MakeAllocator<TouchpadActionsManager>
			{
				~MakeAllocator<TouchpadActionsManager>();
			};

			struct MakeAllocator<TouchpadGestureComponent>
			{
				~MakeAllocator<TouchpadGestureComponent>();
			};

			struct MakeAllocator<TouchpadGestureInputProvider>
			{
				~MakeAllocator<TouchpadGestureInputProvider>();
			};

			struct MakeAllocator<TouchpadSettingsManager>
			{
				~MakeAllocator<TouchpadSettingsManager>();
			};

			struct MakeAllocator<UserOobeHostAppManager>
			{
				~MakeAllocator<UserOobeHostAppManager>();
			};

			struct MakeAllocator<Windows::ApplicationModel::Contacts::Internal::ContactUIHelper>
			{
				~MakeAllocator<Windows::ApplicationModel::Contacts::Internal::ContactUIHelper>();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::SplitIterator>
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::SplitIterator>();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<HSTRING__ *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0> >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<HSTRING__ *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0> >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::Vector<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::Pickers::IPickerFileType *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0> >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::Vector<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::Pickers::IPickerFileType *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0> >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<HSTRING__ *> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<HSTRING__ *> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<IUnknown *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<IUnknown *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,Windows::Foundation::Collections::Internal::VectorOptions<IUnknown *,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<IUnknown *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<IUnknown *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *>,Windows::Foundation::Collections::Internal::VectorOptions<IUnknown *,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Feedback::FeedbackItem *,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Feedback::FeedbackItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::Internal::Feedback::FeedbackItem *,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::Pickers::IPickerFileType *> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Storage::Pickers::IPickerFileType *> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::UI::StartScreen::JumpListItem *,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<Windows::UI::StartScreen::JumpListItem *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::Internal::VectorOptions<Windows::UI::StartScreen::JumpListItem *,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<double,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<double>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,Windows::Foundation::Collections::Internal::VectorOptions<double,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<double,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<double>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<double>,Windows::Foundation::Collections::Internal::VectorOptions<double,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Foundation::Collections::Internal::Vector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,Windows::Foundation::Collections::Internal::VectorOptions<int,0,1,0> > >
			{
				~MakeAllocator<Windows::Foundation::Collections::Internal::Vector<int,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<int>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<int>,Windows::Foundation::Collections::Internal::VectorOptions<int,0,1,0> > >();
			};

			struct MakeAllocator<Windows::Internal::Shell::AssignedAccess::AssignedAccessControllerProxy>
			{
				~MakeAllocator<Windows::Internal::Shell::AssignedAccess::AssignedAccessControllerProxy>();
			};

			struct MakeAllocator<Windows::Internal::UI::StartScreen::JumpListBrokered>
			{
				~MakeAllocator<Windows::Internal::UI::StartScreen::JumpListBrokered>();
			};

			struct MakeAllocator<Windows::Internal::UI::StartScreen::JumpListBrokeredStatics>
			{
				~MakeAllocator<Windows::Internal::UI::StartScreen::JumpListBrokeredStatics>();
			};

			struct MakeAllocator<Windows::Internal::UI::WindowsTip::CWindowsTipPresenter>
			{
				~MakeAllocator<Windows::Internal::UI::WindowsTip::CWindowsTipPresenter>();
			};

			class ModuleBase
			{
				static void * moduleLock_;
			protected:
				static unsigned long volatile objectCount_;
			public:
				static ModuleBase * module_;
				virtual CreatorMap const * * GetFirstEntryPointer();
				virtual CreatorMap const * * GetLastEntryPointer();
				virtual CreatorMap const * * GetMidEntryPointer();
				virtual _RTL_SRWLOCK * GetLock();
				virtual unsigned long GetObjectCount();
			};

			struct RuntimeClass<InterfaceListHelper<IActivationFactory,Implements<Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic2,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic3,FtmBase>,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0>
			{
				RuntimeClass<InterfaceListHelper<IActivationFactory,Implements<Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic2,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic3,FtmBase>,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0>();
			};

			class RuntimeClassBaseT<1>
			{
			protected:
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> > >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CValidatingVector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> > > >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CValidatingVector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> > > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,FtmBase,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,FtmBase,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Actions::CActionArgsImpl> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Actions::CActionArgsImpl> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionActivatedArgs,CActivatedEventArgsWithViewIdBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionActivatedArgs,CActivatedEventArgsWithViewIdBase> *,_GUID const &,void * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionActivatedArgs,CActivatedEventArgsWithViewIdBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionActivatedArgs,CActivatedEventArgsWithViewIdBase> *,unsigned long *,_GUID * *);
			};

			class RuntimeClassBaseT<2>
			{
			protected:
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CCommonApplicationViewArrangePositionImpl,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CCommonApplicationViewArrangePositionImpl,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CDCompAbstractThumbnail> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CDCompAbstractThumbnail> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationChromeControls> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationChromeControls> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IRetailDemoHost> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IRetailDemoHost> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IClickNote,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IClickNote,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IDialogManager,IPrivilegedOperationsConsumer,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IDialogManager,IPrivilegedOperationsConsumer,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IImmersiveAppCrusherNotification,IMsaWindowManager,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IImmersiveAppCrusherNotification,IMsaWindowManager,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IInkWorkspaceHostedAppsManager,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IInkWorkspaceHostedAppsManager,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IPenSignalManager,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IPenSignalManager,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IQuietHoursPolicy,IImmersiveWindowMessageNotification,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IQuietHoursPolicy,IImmersiveWindowMessageNotification,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,ISharePlatformHost,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,ISharePlatformHost,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IShellDropTarget,IDropOperationTargetPriv,IReentrancyModelProvider,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IShellDropTarget,IDropOperationTargetPriv,IReentrancyModelProvider,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,IConnectedSearchLogger,IConnectedSearchLogger2,IConnectedSearchContextManager,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache>,Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,IConnectedSearchLogger,IConnectedSearchLogger2,IConnectedSearchContextManager,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache>,Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IClassFactory> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IClassFactory> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IImmersiveMonitorNotification,IDesktopVisibilityChangesNotification> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IImmersiveMonitorNotification,IDesktopVisibilityChangesNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,Implements<RuntimeClassFlags<2>,IGameFocusEvents,IRudeWindowManagerEvents,IImmersiveMonitorNotification> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,Implements<RuntimeClassFlags<2>,IGameFocusEvents,IRudeWindowManagerEvents,IImmersiveMonitorNotification> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLExecuteCommandBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLExecuteCommandBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,IServiceProvider,IApplicationIdentityInfo,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,IServiceProvider,IApplicationIdentityInfo,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,IServiceProvider,ILaunchTargetViewSizePreference,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,IServiceProvider,ILaunchTargetViewSizePreference,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IAppSwitcherNotificationService,IImmersiveApplicationNotification> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IAppSwitcherNotificationService,IImmersiveApplicationNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IEdgeUiHint> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IEdgeUiHint> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IEdgeUiInput,IEdgeUiInputHintHost,IDropTarget,IImmersiveRawInputMouseNotification,IImmersiveRawInputKeyboardNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IEdgeUiInput,IEdgeUiInputHintHost,IDropTarget,IImmersiveRawInputMouseNotification,IImmersiveRawInputKeyboardNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IEdgeUiInvocation,IEdgeUiMouseInvocation,IEdgeUiTouchInvocation,IEdgeUiSecondaryTouchInvocation> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IEdgeUiInvocation,IEdgeUiMouseInvocation,IEdgeUiTouchInvocation,IEdgeUiSecondaryTouchInvocation> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IImmersiveOpenWithUI,IServiceProvider> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IImmersiveOpenWithUI,IServiceProvider> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,ILockScreenCallBroker,ILockScreenCallBrokerPriv,IImmersiveApplicationNotification,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,ILockScreenCallBroker,ILockScreenCallBrokerPriv,IImmersiveApplicationNotification,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CXHHostAppManagerBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CXHHostAppManagerBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IObjectCollection,IObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IObjectCollection,IObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IActivationErrorPopupFactory> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IActivationErrorPopupFactory> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IRemoteAppBrokerFactory> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IRemoteAppBrokerFactory> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IDesktopNotificationActivator,CImmersiveShellComponentWithGITSite> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IDesktopNotificationActivator,CImmersiveShellComponentWithGITSite> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,CWRLObjectWithSite,IBackgroundActivator,IServiceProvider> > >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,CWRLObjectWithSite,IBackgroundActivator,IServiceProvider> > *,_GUID const &,void * *);
			};

			class RuntimeClassBaseT<3>
			{
			protected:
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IHostedApplicationExperienceManager,IImmersiveWindowMessageNotification,IHostedApplicationExperienceRecoveryInterop,IPrivilegedOperationsConsumer,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IHostedApplicationExperienceManager,IImmersiveWindowMessageNotification,IHostedApplicationExperienceRecoveryInterop,IPrivilegedOperationsConsumer,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,SttInternal::ISttExperienceManager,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,SttInternal::ISttExperienceManager,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager,IPrivilegedOperationsConsumer,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager,IPrivilegedOperationsConsumer,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::AssignedAccess::IAssignedAccessControllerProxy,IPrivilegedOperationsConsumer> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::AssignedAccess::IAssignedAccessControllerProxy,IPrivilegedOperationsConsumer> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FullscreenCXHExperienceManagerBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FullscreenCXHExperienceManagerBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IAudioSessionNotification,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IAudioSessionNotification,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IHostedApplicationEventSink,Windows::ApplicationModel::Actions::IHostedFlyoutOperation,IObjectProvider> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IHostedApplicationEventSink,Windows::ApplicationModel::Actions::IHostedFlyoutOperation,IObjectProvider> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification,IImmersiveRawInputKeyboardNotification,Windows::Internal::Shell::Experience::ISoftLandingExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification,IImmersiveRawInputKeyboardNotification,Windows::Internal::Shell::Experience::ISoftLandingExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,CWRLObjectWithSite,IHostedApplicationActivationManager,IHostedApplicationActivationManager2,ChainInterfaces<IHostedApplicationActivationManagerPrivateCallbacks,ISplashScreen,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ICoreWindowFactoryPriv,IServiceProvider,IObjectWithWindow> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,CWRLObjectWithSite,IHostedApplicationActivationManager,IHostedApplicationActivationManager2,ChainInterfaces<IHostedApplicationActivationManagerPrivateCallbacks,ISplashScreen,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ICoreWindowFactoryPriv,IServiceProvider,IObjectWithWindow> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,CWRLObjectWithSite,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,CWRLObjectWithSite,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IUnknown,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IUnknown,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Implements<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IComponentUIHostedActivationManager,ICoreWindowFactoryPriv,ISplashScreen,IServiceProvider,IComponentUIHostedActivationManagerTest,IObjectWithWindow>,Implements<RuntimeClassFlags<3>,ISplashScreenUI,IComponentUIEventHandler> > >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Implements<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IComponentUIHostedActivationManager,ICoreWindowFactoryPriv,ISplashScreen,IServiceProvider,IComponentUIHostedActivationManagerTest,IObjectWithWindow>,Implements<RuntimeClassFlags<3>,ISplashScreenUI,IComponentUIEventHandler> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,CloakedIid<IServiceProvider>,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>,CWRLObjectWithGITSite,CActivatedEventArgsWithViewIdBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,CloakedIid<IServiceProvider>,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>,CWRLObjectWithGITSite,CActivatedEventArgsWithViewIdBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,ILightDismissNotification,IApplicationFrameTitleBarPinButtonHandler,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,ILightDismissNotification,IApplicationFrameTitleBarPinButtonHandler,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IExpansionExperienceManager,ILightDismissNotification> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IExpansionExperienceManager,ILightDismissNotification> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IHostExperienceManager,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IHostExperienceManager,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IMiracastBannerExperienceManager,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IMiracastBannerExperienceManager,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITestExperienceManager,Windows::Foundation::IClosable,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITestExperienceManager,Windows::Foundation::IClosable,FtmBase> *,_GUID const &,void * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IHostedApplicationExperienceManager,IImmersiveWindowMessageNotification,IHostedApplicationExperienceRecoveryInterop,IPrivilegedOperationsConsumer,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IHostedApplicationExperienceManager,IImmersiveWindowMessageNotification,IHostedApplicationExperienceRecoveryInterop,IPrivilegedOperationsConsumer,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,SttInternal::ISttExperienceManager,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,SttInternal::ISttExperienceManager,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager,IPrivilegedOperationsConsumer,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager,IPrivilegedOperationsConsumer,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager,IPrivilegedOperationsConsumer,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveSessionIdleNotification,Windows::Shell::ModalExperienceHelpers::IDesktopModalExperiencePreparation,Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler,IHolographicViewTransitionNotification,IImmersiveShellHookNotification,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager,IPrivilegedOperationsConsumer,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveSessionIdleNotification,Windows::Shell::ModalExperienceHelpers::IDesktopModalExperiencePreparation,Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler,IHolographicViewTransitionNotification,IImmersiveShellHookNotification,FtmBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *>,Windows::Internal::Shell::Experience::IShellExperienceDispatcher,Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization,IShellExperienceNotification,Windows::Foundation::IClosable,CloakedIid<ITimerCallback> > >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *>,Windows::Internal::Shell::Experience::IShellExperienceDispatcher,Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization,IShellExperienceNotification,Windows::Foundation::IClosable,CloakedIid<ITimerCallback> > *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::AssignedAccess::IAssignedAccessControllerProxy,IPrivilegedOperationsConsumer> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::AssignedAccess::IAssignedAccessControllerProxy,IPrivilegedOperationsConsumer> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FullscreenCXHExperienceManagerBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FullscreenCXHExperienceManagerBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification,IImmersiveRawInputKeyboardNotification,Windows::Internal::Shell::Experience::ISoftLandingExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification,IImmersiveRawInputKeyboardNotification,Windows::Internal::Shell::Experience::ISoftLandingExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IServiceProvider,ISearchControlBroker,ISearchControlBrokerLocal,ISearchTypeAheadEventsSink,Windows::Foundation::IClosable> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IServiceProvider,ISearchControlBroker,ISearchControlBrokerLocal,ISearchTypeAheadEventsSink,Windows::Foundation::IClosable> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,CloakedIid<IServiceProvider>,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>,CWRLObjectWithGITSite,CActivatedEventArgsWithViewIdBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,CloakedIid<IServiceProvider>,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>,CWRLObjectWithGITSite,CActivatedEventArgsWithViewIdBase> *,unsigned long *,_GUID * *);
				static long GetImplementedIIDS<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IInputDialExperienceManager,Windows::Foundation::IClosable,InputDial::IInputDialDeviceCallback,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IMultitaskingViewVisibilityNotification> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IInputDialExperienceManager,Windows::Foundation::IClosable,InputDial::IInputDialDeviceCallback,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IMultitaskingViewVisibilityNotification> *,unsigned long *,_GUID * *);
			};

			class RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Implements<Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic2,Windows::ApplicationModel::Contacts::Internal::IContactManagerBrokerStatic3,FtmBase>,Nil,Nil,Nil>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Nil,Nil,Nil,Nil>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Nil,Nil,Nil,Nil>();
			};

			class RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::ApplicationModel::Appointments::IAppointmentManagerStatics,Nil,Nil,Nil>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::ApplicationModel::Appointments::IAppointmentManagerStatics,Nil,Nil,Nil>();
			};

			class RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics,Nil,Nil,Nil>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics,Nil,Nil,Nil>();
			};

			class RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics,Nil,Nil,Nil>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics,Nil,Nil,Nil>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsWithViewIdBase,Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CActivatedEventArgsWithViewIdBase,Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CCustomPropertyProviderWithMapImpl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CCustomPropertyProviderWithMapImpl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CFilePicker,Windows::Storage::Pickers::ICachedFileUpdateManager>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CFilePicker,Windows::Storage::Pickers::ICachedFileUpdateManager>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CValidatingVector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> > >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,CValidatingVector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> > >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,FtmBase,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,FtmBase,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,IInspectable>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,IInspectable>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,IInspectable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,IPlayToReceiverRegKeyChangeNotify>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,IPlayToReceiverRegKeyChangeNotify>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,IPlayToReceiverRegKeyChangeNotify>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,MixIn<CFileOpenPickerUI,CFileOpenPickerUIBase,1> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,MixIn<CFileOpenPickerUI,CFileOpenPickerUIBase,1> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,MixIn<CFileOpenPickerUI,CFileOpenPickerUIBase,1> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,MixIn<CFileOpenPickerUIInternal,CFileOpenPickerUIBase,1>,Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal,CloakedIid<IHostedViewEventSink> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,MixIn<CFileOpenPickerUIInternal,CFileOpenPickerUIBase,1>,Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal,CloakedIid<IHostedViewEventSink> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,MixIn<CFileSavePickerUI,CFileSavePickerUIBase,1> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,MixIn<CFileSavePickerUI,CFileSavePickerUIBase,1> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,MixIn<CFileSavePickerUI,CFileSavePickerUIBase,1> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,MixIn<CFileSavePickerUIInternal,CFileSavePickerUIBase,1>,Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal,CloakedIid<IHostedViewEventSink> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,MixIn<CFileSavePickerUIInternal,CFileSavePickerUIBase,1>,Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal,CloakedIid<IHostedViewEventSink> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Actions::CActionArgsImpl>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Actions::CActionArgsImpl>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Actions::CHostedFlyoutActivationInfoImpl,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Actions::CHostedFlyoutActivationInfoImpl,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Actions::CMainWindowActivationInfoImpl>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Actions::CMainWindowActivationInfoImpl>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionActivatedArgs,CActivatedEventArgsWithViewIdBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionActivatedArgs,CActivatedEventArgsWithViewIdBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactCardExperienceDelayedDataLoader,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactCardExperienceDelayedDataLoader,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactServiceDescription>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactServiceDescription>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactServiceDescription>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactUIHelper,Windows::ApplicationModel::Contacts::Internal::IContactUIHelper2>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactUIHelper,Windows::ApplicationModel::Contacts::Internal::IContactUIHelper2>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactUIHelper,Windows::ApplicationModel::Contacts::Internal::IContactUIHelper2>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactsListManager>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactsListManager>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::Contacts::Internal::IContactsListManager>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<IUnknown *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<IUnknown *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::IStorageFolder *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::IStorageFolder *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::IStorageFolder *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::IStorageItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::IStorageItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::Pickers::IPickerFileType *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::Pickers::IPickerFileType *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::Pickers::IPickerFileType *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::Pickers::UpdateFilesResult *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::Pickers::UpdateFilesResult *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Storage::Pickers::UpdateFilesResult *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::UI::StartScreen::JumpListItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::UI::StartScreen::JumpListItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<double>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<double>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<int>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<int>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *>,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *>,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *>,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *>,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<IUnknown *>,Windows::Foundation::Collections::IIterable<IUnknown *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<IUnknown *>,Windows::Foundation::Collections::IIterable<IUnknown *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Storage::IStorageFolder *>,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFolder *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Storage::IStorageFolder *>,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFolder *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Storage::IStorageFolder *>,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFolder *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Storage::IStorageItem *>,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Storage::IStorageItem *>,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::IPickerFileType *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::IPickerFileType *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<double>,Windows::Foundation::Collections::IIterable<double>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<double>,Windows::Foundation::Collections::IIterable<double>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<int>,Windows::Foundation::Collections::IIterable<int>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<int>,Windows::Foundation::Collections::IIterable<int>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorChangedEventArgs>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorChangedEventArgs>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorChangedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<IUnknown *>,Windows::Foundation::Collections::IIterable<IUnknown *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<IUnknown *>,Windows::Foundation::Collections::IIterable<IUnknown *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageFolder *>,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFolder *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageFolder *>,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFolder *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageFolder *>,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFolder *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem *>,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem *>,Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::IPickerFileType *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::IPickerFileType *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *>,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::UpdateFilesResult *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *>,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::UpdateFilesResult *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<double>,Windows::Foundation::Collections::IIterable<double>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<double>,Windows::Foundation::Collections::IIterable<double>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<int>,Windows::Foundation::Collections::IIterable<int>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<int>,Windows::Foundation::Collections::IIterable<int>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Feedback::IFeedbackBroker,Windows::Internal::Feedback::IStepsRecorder,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Feedback::IFeedbackBroker,Windows::Internal::Feedback::IStepsRecorder,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Feedback::IFeedbackItem,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Feedback::IFeedbackItem,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Chaining::IChainLinkEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Chaining::IChainLinkEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::IRadialControllerMenuItemInvokedArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Shell::IRadialControllerMenuItemInvokedArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::UI::StartScreen::IJumpListBrokered,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::UI::StartScreen::IJumpListBrokered,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::IUpdateFilesResult,CloakedIid<IUpdateFilesResultInternal> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::IUpdateFilesResult,CloakedIid<IUpdateFilesResultInternal> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ICurrentLocationRequest,CDeferrableRequest<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ICurrentLocationRequest,CDeferrableRequest<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IPickerClosingDeferral>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IPickerClosingDeferral>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IPickerClosingDeferral>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IPickerClosingOperation,CDeferrableRequest<Windows::Storage::Pickers::Provider::IPickerClosingDeferral> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::IPickerClosingOperation,CDeferrableRequest<Windows::Storage::Pickers::Provider::IPickerClosingDeferral> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ITargetFileRequest,CDeferrableRequest<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ITargetFileRequest,CDeferrableRequest<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Provider::ICachedFileUpdaterUI,CloakedIid<ICachedFileUpdaterEventSink>,CloakedIid<ICachedFileUpdaterInternal> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Provider::ICachedFileUpdaterUI,CloakedIid<ICachedFileUpdaterEventSink>,CloakedIid<ICachedFileUpdaterInternal> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Provider::IFileUpdateRequest,CloakedIid<IFileUpdateRequestInternal>,CDeferrableRequest<Windows::Storage::Provider::IFileUpdateRequestDeferral> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Provider::IFileUpdateRequest,CloakedIid<IFileUpdateRequestInternal>,CDeferrableRequest<Windows::Storage::Provider::IFileUpdateRequestDeferral> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Provider::IFileUpdateRequestDeferral>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Provider::IFileUpdateRequestDeferral>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Provider::IFileUpdateRequestDeferral>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Provider::IFileUpdateRequestedEventArgs>
			{
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Provider::IFileUpdateRequestedEventArgs>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Provider::IFileUpdateRequestedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,wil::details::IEventInvocationContext,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,wil::details::IEventInvocationContext,FtmBase>();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ApplicationViewCollectionBase,IApplicationViewChangeListener,IApplicationViewVisibilityDebouncedNotificationService,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CCommonApplicationViewArrangePositionImpl,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CCommonApplicationViewOcclusionPositionImpl,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CCommonApplicationViewPositionImpl,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CDCompAbstractThumbnail,IShellTabThumbnail>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CDCompAbstractThumbnail,IVirtualDesktopThumbnail>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CDCompAbstractThumbnail,IWindowThumbnail>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CDCompAbstractThumbnail>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CDCompThumbnailBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponent,IInputHostLayoutChanges,IImmersiveShellHookNotification,ITabletModeChangeListener>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,ChainInterfaces<IRudeWindowManagerPriv,IRudeWindowManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationChromeControls>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationPreLaunch,IImmersiveApplicationNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationTargetingTracker,ISyncIAMEventHandler>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationViewCompatibilityManager,IApplicationViewChangeListener,IImmersiveMonitorNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationViewCompatiblityNotification,IOverrideScaling>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IImmersiveApplicationNotification,IImmersiveAppCrusherNotification,IHostedApplicationNotification,IBackStackApplicationNotification,IImmersiveSessionIdleNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase,IRetailDemoHost>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IClickNote,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IComponentUIPluginInternal,IComponentUIPlugin,IRetrieveViewCUIEventHandle,IComponentUIPlugin_CompositionIslands,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IDialogManager,IPrivilegedOperationsConsumer,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IEDPNotificationHost,IEnterpriseIdChangeNotificationProvider,IPopupCommandHandler>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IImmersiveAppCrusherNotification,IMsaWindowManager,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IImmersiveSettingsCache,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageService,IObjectWithWindow,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IInkWorkspaceHostedAppsManager,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IPenSignalManager,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IQuietHoursPolicy,IImmersiveWindowMessageNotification,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,ISharePlatformHost,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IShellDropTarget,IDropOperationTargetPriv,IReentrancyModelProvider,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,IShellTargetingTracker,IShellTargetingContractManager,IApplicationViewChangeListener,IShellTargetingTrackerPrivate,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,ITabletModeController,ITabletModeController2,ITabletModeControllerPriv,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,IConnectedSearchLogger,IConnectedSearchLogger2,IConnectedSearchContextManager,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache>,Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ChainInterfaces<ICompactOverlayPositioner,IBasicPositioner,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IShellPositionerViewHandoff,ICompactOverlayPositionerTest>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ChainInterfaces<IGlobalRudeWindowManagerPriv,IGlobalRudeWindowManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,IDesktopVisibilityChangesNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ChainInterfaces<IImmersiveBackstackManagerPriv,IImmersiveBackstackManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveBackstackSettings,IImmersiveApplicationNotification,IAppSwitcherNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ChainInterfaces<ISwitchThumbnailDeviceManager,IDCompBatcher,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IBackComponentService,IInAppBackHandlerNotifications,ITabletModeChangeListener,IApplicationViewChangeListener,IShellTargetingChangeNotification,ITabletModePositionerManagerNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IClassFactory>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ICompactOverlayManager,IImmersiveMonitorNotification,IApplicationViewChangeListener,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IEnterpriseChromeServiceProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IFeedbackHubAppInfo>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IImmersiveLayoutClient,IImmersiveMonitorNotification,IAccessibilityDockingServiceInternal,IImmersiveShellHookNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IImmersiveMonitorNotification,IDesktopVisibilityChangesNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IImmersiveMonitorNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IAudioFlyoutController>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IImmersiveSessionIdleDetector,IImmersiveWindowMessageNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IImmersiveShellHookNotification,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveSystemModeNotification,IImmersiveLayoutChanges,IFullScreenPositionerNotification,IRudeWindowManagerEvents,Implements<RuntimeClassFlags<2>,IEdgeUiManager,IEdgeUiManagerInternal,IEdgeUiInputCallback,ITabletModeChangeListener> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IImmersiveWindowMessageNotification,IEdgeUiDeviceManager,IEdgeUiDeviceManagerInternal>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IImmersiveWindowMessageNotification,IImmersiveIconicBitmap,IImmersiveBackstackNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IInitializeTrustedComponentForegroundControl,ISnapComponent,IPriviledgedPositioner,IWindowManagementArrangementEvents>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,IInitializeTrustedComponentForegroundControl,IWindowManagementEvents>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ILauncherTipContextMenu,ILauncherTipContextMenuSettingChangeListener>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ISettingsFlow>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ISyncIAMEventHandler,IActiveZBandNotificationForMonitorService>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,ITransitionCoordinator,ITabletModeChangeListener,ITimerCallback>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,Implements<RuntimeClassFlags<2>,IGameFocusEvents,IRudeWindowManagerEvents,IImmersiveMonitorNotification> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite,Implements<RuntimeClassFlags<2>,IImmersiveRawInputProvider,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CImmersiveShellComponentWithSite>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CLockScreenApplicationManagerBase,ILockScreenContentionFlyout>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CSnapAssistControllerBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLExecuteCommandBase,IInitializeCommand>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLExecuteCommandBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,IServiceProvider,IApplicationIdentityInfo,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,IServiceProvider,ILaunchSourceViewSizePreference,ILaunchSourceAppUserModelId,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,IServiceProvider,ILaunchTargetViewSizePreference,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithGITSite,IServiceProvider,IShouldSwitchToDesktop,ILayoutPreferencesOnAppLaunch,IExecuteCommandHost,ILocalCopyDownloadSettings,IWakeOnRPCCalls,ILaunchTargetMonitor,IUpdateViewValueSet,ILaunchUIContextProvider,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,ChainInterfaces<IPersistFolder2,IPersistFolder,IPersist,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<IShellFolder2,IShellFolder,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IAppSwitcherNotificationService,IImmersiveApplicationNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IEdgeUiHint>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IEdgeUiInput,IEdgeUiInputHintHost,IDropTarget,IImmersiveRawInputMouseNotification,IImmersiveRawInputKeyboardNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IEdgeUiInvocation,IEdgeUiMouseInvocation,IEdgeUiTouchInvocation,IEdgeUiSecondaryTouchInvocation>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IEdgeUiTouchInvocation,IEdgeUiDiscreteInvocation>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IImmersiveOpenWithUI,IServiceProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IImmersiveShellComponent,IServiceProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,ILockScreenCallBroker,ILockScreenCallBrokerPriv,IImmersiveApplicationNotification,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CWRLObjectWithSite,IRawTouchProcessor>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CXHHostAppManagerBase,IOOBEExperienceNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CXHHostAppManagerBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<IObjectCollection,IObjectArray,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ISwitchThumbnailFactory,IDCompBatcher,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ITouchpadGestureComponentSettingsManager,ITouchpadSettingsManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ChainInterfaces<ImmersiveShellComponentCreator,IImmersiveComponentCreator,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,CloakedIid<IAgileObject>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IActivationErrorPopupFactory>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IApplicationDataPersistence,IApplicationPositionPersistence,IApplicationWindowSizingPersistence>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IImmersiveMonitorNotificationService,IImmersiveMonitorNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IInputHostLayout,IInputHostManager>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,INotesManager,IApplicationFrameEventHandler,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification,IImmersiveLayoutChanges,IApplicationStateChangeHandler,IPrivilegedOperationsConsumer>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IRemoteAppBrokerFactory>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CImmersiveShellComponentWithGITSite,IProjectionManager,IImmersiveMonitorNotification,IAppSwitcherNotification,IImmersiveApplicationNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,ChainInterfaces<IImmersiveMonitorInternal,IImmersiveMonitor,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ChainInterfaces<AgileProfferServiceImpl,IProfferService,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IServiceProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,IServiceProvider,ChainInterfaces<IInternalImmersiveLayout,IImmersiveLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveLayoutSyncRegistration,IImmersiveShellComponent,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,CWRLObjectWithGITSite,IServiceProvider,IImmersiveMonitorNotificationService,IImmersiveShellComponent,IImmersiveMonitorManager,IImmersiveMonitorManagerInternal,IImmersiveShellHookNotification,Implements<RuntimeClassFlags<2>,IImmersiveWindowMessageNotification,IImmersiveSystemModeNotification,IImmersiveLauncherVisibilityListener> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IAsyncCallback>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IBandWorkArea>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IDesktopNotificationActivator,CImmersiveShellComponentWithGITSite>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IMultitaskingViewTaskCallback>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IObjectArray>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IPerWindowNotificationQueue>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IPersistedApplicationData>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,IQueryWithLinguisticAlternatives>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase,ISettingsProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IActionSpaceFlow,IApplicationInvocableFlow,IDevicesFlow,IDevicesFlowProvider,CFlowBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IActionSpaceFlow,IApplicationInvocableFlow,IWakeUpOnTaskCompletion,CFlowBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IActivationErrorPopup>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IActivationErrorPopup>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IActivationStoreHelper>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IActivationStoreHelper>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppActivationFailedHandler,IAppActivationFailedHandler2,IAppActivationFailedHandler3>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppActivationFailedHandler,IAppActivationFailedHandler2,IAppActivationFailedHandler3>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppListItem>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAppListItem>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IApplicationViewChangeListener>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IApplicationViewChangeListener>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IApplicationViewTitlebarConfiguration,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAssocHandler,IObjectWithAppUserModelID,IObjectWithShellItem>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAssocHandler,IObjectWithAppUserModelID,IObjectWithShellItem>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAssocHandler>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAssocHandler>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAsyncCallback,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAsyncCallback>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAsyncCallbackDispatcher>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAudioSessionEvents,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAutoPlayUI>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAutoPlayUI>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IAvailableMiracastDeviceEnumerator,IDeviceElementSourceSink,IMiracastDeviceChallengeListener,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IBackstackApp>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IBackstackApp>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IBadgeWindow>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IBadgeWindowController,IBadgeWindowInteractionHandler>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IBadgeWindowPositionCache>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IBandIDArray>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IBandIDArray>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IBindStatusCallback,IImageDownloadTask,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IBrowserTrackEventsCallback>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ICloseRequestedArgsPrivate,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IContractRegistrationInfo,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ICortanaExperienceFlow>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ICortanaExperienceFlow>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ICreationThreadDispatcher,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDCompositionAnimation>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDataTransferBrokerFetchHandler>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDataTransferBrokerFetchHandler>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDesktopAppXActivator,CWRLObjectWithGITSite,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDesktopAppXImmersiveBrokerInterop>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDeviceUninstaller,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDevicesCharmProjectionManager,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDevicesCharmProjectionManagerEventHandlerAdapter,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDevicesCharmUISession,IShareAndDevicesFlow,IPopupEventHandler,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDragUIOverridePriv>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDragViewEventSource,IDropOperationTargetPriv,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDragViewTracker,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDuiBehavior>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDuiBehavior>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDuiBehaviorFactory>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IDuiBehaviorFactory>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IEnterpriseChromeManager,IEnterpriseChromeManagerInternal,IApplicationViewChangeListener,IImmersiveApplicationNotification>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IEnterpriseChromeManager,IEnterpriseChromeManagerInternal,IApplicationViewChangeListener,IImmersiveApplicationNotification>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IExtensionList,IExtensionListInternal,IObjectArray>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IExtensionList,IExtensionListInternal,IObjectArray>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IExtensionListContextMenu>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IExtensionListContextMenu>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IExtensionListItem,IExtensionListItemInternal,IObjectWithPropertyStore>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IExtensionListItem,IExtensionListItemInternal,IObjectWithPropertyStore>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IExtensionStateManager>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IExtensionStateManager>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IFacadeWindow,IImmersiveMonitorNotification>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IFacadeWindow,IImmersiveMonitorNotification>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IFeedbackHubApp>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IFeedbackHubAppInfo,IStepsRecording,ChainInterfaces<IStringFeedback2,IStringFeedback,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IConnectionPoint,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IFileUpdateResult>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IFullScreenPositionerNotification,IRudeWindowManagerEvents>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IGITCookieObject,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IGestureProvider,WrlIDuiBehaviorImpl>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IGlobalRudeWindowNotificationService,IGlobalRudeWindowNotifications,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IHostedApplication,IHostedApplicationReconnectionInterop,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImageDownloadCallback,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImageDownloadedEventHandler,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveAppCrusher,IImmersiveAppCrusherPriv,CImmersiveShellComponentWithSite>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveApplication>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveApplicationNotification,ILockScreenAppRunningCallback,IDesktopVisibilityChangesNotification,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveSessionIdleNotification>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveShellHookNotificationInternal>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveShellHookNotificationInternal>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveShellHookService,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IImmersiveWindowMessageNotificationInternal>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IInAppBackHandlerNotifications>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IInAppBackHandlerNotifications>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IInputTracker>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IInputTracker>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IIsGameManager>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IItemTileFactory,IExtensionListTileFactory,ISimpleTileFactory>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IItemTileFactory,IExtensionListTileFactory,ISimpleTileFactory>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ILambda>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ILaunchTargetMonitor,IServiceProvider,CWRLObjectWithGITSite>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ILauncherContract,ChainInterfaces<IShellTargetingBackContractNotification,IShellTargetingContractNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ILocalObjectCreator>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ILocalObjectCreator>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMiracastConnection,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMiracastConnectionEventHandler,IMiracastConnectionEventHwndForwarder,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMiracastConnectionEventHandlerAdapter,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMiracastDeviceChallenge,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMruDataCompare>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IMruDataCompare>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,INotificationActivationCallback,IWpnToastFeedback,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,INotificationActivationCallback>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,INotificationActivationCallback>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,INowPlayingSessionManagerEventHandler,IMediaPlaybackDataChangedEventHandler,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IOleWindow,IDisableWindow,Windows::Foundation::IEventHandler<IInspectable *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IOleWindow>
			{
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IOneShotTimer>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IOneShotTimer>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPersist,IOleWindow>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPersist,IOleWindow>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPickerController>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPopupCommand>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPopupCommand>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPopupCommandHandler>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPopupCommandHandler>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPopupEventHandler>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPopupEventHandler>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IProjectCharmSession,IDevicesCharmProjectionManagerEventHandler,IAvailableMiracastDeviceEnumeratorListener,IDeviceUninstallerListener,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IProjectionContext,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IPropertyStoreFactory>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRawElementProviderSimple,IRawElementProviderFragment,IRawElementProviderFragmentRoot,IBadgeWindowAcc>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRemoteAppImmersiveIconBroker>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRemoteAppImmersiveIconBroker>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRemoteAppPrivilegedOperationBroker>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRemoteAppPrivilegedOperationBroker>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRunningShareSink,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRunningShareUI,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISearchControlBroker,ISearchControlBrokerLocal>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISearchControlBroker,ISearchControlBrokerLocal>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISearchServicesProvider,CImmersiveShellComponentWithSite>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IServiceProvider>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IServiceProvider>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingChangedEventHandler,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingsFlowController>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingsFlowController>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingsProvider>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingsProvider>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISharableItemSelectorFlyout>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISharableItemSelectorFlyout>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISharableItemSelectorFlyoutCallback>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISharableItemSelectorFlyoutCallback>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IShellPositionerCallback,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISnapHotkeyHandler>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISnapHotkeyHandler>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISnapServiceProviderInternal,ISnapServiceProvider>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISnapServiceProviderInternal,ISnapServiceProvider>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISnappedWindow>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISnappedWindow>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISnappedWindowModel>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISnappedWindowModel>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISoftLandingQueryEntry>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISoftLandingQueryEntry>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISoftLandingUiaSearch>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISoftLandingUiaSearch>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISoftLandingXmlParser>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISoftLandingXmlParser>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISplashScreen,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISplashScreenTimer,ISplashScreenTimerExtra>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISplashScreenUI,IDuiElementProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IStoryboardExtraData>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISystemToastPrompt,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *> >
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISystemToastPrompt,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *> >();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITouchpadAction>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITouchpadActionsGestureHandler,ITouchpadGesture>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITouchpadActionsManager>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITouchpadGestureHandler>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITouchpadGestureInputProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ITouchpadVolumeGestureHandler,ITouchpadGesture>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUIAnimationTimerEventHandler>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUIAnimationVariableCurveChangeHandler2,IUIAnimationVariableOffset>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUIAutomationPropertyChangedEventHandler,IUIAutomationStructureChangedEventHandler,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *> >
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUIAutomationPropertyChangedEventHandler,IUIAutomationStructureChangedEventHandler,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *> >();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUnknown>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IWeakReference>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenButtonListener *,ABI::Windows::Devices::Input::PenTailButtonClickedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenButtonListener *,ABI::Windows::Devices::Input::PenTailButtonDoubleClickedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenButtonListener *,ABI::Windows::Devices::Input::PenTailButtonLongPressedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenDockListener *,ABI::Windows::Devices::Input::PenDockedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Devices::Input::PenDockListener *,ABI::Windows::Devices::Input::PenUndockedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,CWRLObjectWithSite,IBackgroundActivator,IServiceProvider> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,IBroadcastDVRComponent,IBroadcastDVRCommand,CImmersiveShellComponentWithGITSite,IImmersiveApplicationNotification,IApplicationViewChangeListener,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>,Implements<RuntimeClassFlags<2>,IImmersiveShellHookNotification,IGameBarWatchDogCallback,IPrivilegedOperationsConsumer,IGameFocusNotificationService,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,IFilePickerInternal,IShellItemFilter,IFileDialogEvents,ICompositionManager,ICachedFileUpdaterHost>,CPickerController>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<IInspectable *>,IUnknown> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::ComposableShell::Tabs::TabThumbnail *>,IUnknown> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Storage::StorageFile *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<IInspectable *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<bool> > >
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<bool> > >();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<bool>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Feedback::StringFeedback::StringFeedbackEngine *,Windows::Internal::Feedback::StringFeedback::StringFeedbackItem *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Feedback::StringFeedback::StringFeedbackEngine *,bool>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Popups::PopupClient *,Windows::Internal::Shell::Popups::PopupClientPropertyChangedEventArgs *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Implements<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,FtmBase> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,KnownGameList::IEnumerateEntries>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,KnownGameList::IGameEntry>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,KnownGameList::IQueryKnownGameList>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ShellExperienceHelpers::Internal::IProxyModalWindow,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::ApplicationModel::DataTransfer::IDataProviderHandler,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::ApplicationModel::DataTransfer::IDataProviderHandler>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::ApplicationModel::DataTransfer::IDataProviderHandler>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,FtmBaseEnableIfAgile<1> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,FtmBaseEnableIfAgile<1> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncActionCompletedHandler,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Devices::Geolocation::Geoposition *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Security::Authentication::OnlineId::UserIdentity *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Services::TargetedContent::TargetedContentContainer *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Storage::StorageFile *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Storage::StorageFolder *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::UI::Popups::IUICommand *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Management::Deployment::DeploymentResult *,Windows::Management::Deployment::DeploymentProgress> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IEventHandler<IInspectable *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<IInspectable *,HSTRING__ *> >
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<IInspectable *,HSTRING__ *> >();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *,IInspectable *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,IInspectable *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::CortanaExperienceManager *,Windows::Internal::Shell::Experience::ICortanaShownEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::ShellExperienceDispatcher *,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> >
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> >();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewHandledEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *> >
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *>,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::IComPoolTask>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::UI::SoftLanding::ICourtesyEngine>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::UI::SoftLanding::ICourtesyEngine>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Storage::IStreamedFileDataRequestedHandler,FtmBase>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::UI::Popups::IUICommandInvokedHandler>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::UI::Popups::IUICommandInvokedHandler>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,WrlIDuiBehaviorImpl,IDirectManipulationViewportEventHandler,IGestureProvider>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,WrlIDuiBehaviorImpl,IGestureClient>
			{
			protected:
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IHostedApplicationExperienceManager,IImmersiveWindowMessageNotification,IHostedApplicationExperienceRecoveryInterop,IPrivilegedOperationsConsumer,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IHostedApplicationExperienceManager,IImmersiveWindowMessageNotification,IHostedApplicationExperienceRecoveryInterop,IPrivilegedOperationsConsumer,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,SttInternal::ISttExperienceManager,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,SttInternal::ISttExperienceManager,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager,IPrivilegedOperationsConsumer,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager,IPrivilegedOperationsConsumer,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager,IPrivilegedOperationsConsumer,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveSessionIdleNotification,Windows::Shell::ModalExperienceHelpers::IDesktopModalExperiencePreparation,Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler,IHolographicViewTransitionNotification,IImmersiveShellHookNotification,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager,IPrivilegedOperationsConsumer,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveSessionIdleNotification,Windows::Shell::ModalExperienceHelpers::IDesktopModalExperiencePreparation,Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler,IHolographicViewTransitionNotification,IImmersiveShellHookNotification,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveWindowFactoryBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CImmersiveWindowFactoryBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CWRLObjectWithSite,IAppCrusherPopup>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,CWRLObjectWithSite,IAppCrusherPopup>();
			};

			class RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IHostedApplicationBridgeWindow,IHostedApplicationFrameWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInspectable,IObjectWithWindow,CWRLObjectWithSite,IInputObject,IComponentUIHostedAppFrame,IServiceProvider,IHostedApplicationTaskCompletion>
			{
			protected:
				unsigned long InternalAddRef();
				unsigned long InternalRelease();
			public:
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ChainInterfaces<IHostedApplicationBridgeWindow,IHostedApplicationFrameWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IInspectable,IObjectWithWindow,CWRLObjectWithSite,IInputObject,IComponentUIHostedAppFrame,IServiceProvider,IHostedApplicationTaskCompletion>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *>,Windows::Internal::Shell::Experience::IShellExperienceDispatcher,Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization,IShellExperienceNotification,Windows::Foundation::IClosable,CloakedIid<ITimerCallback> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *>,Windows::Internal::Shell::Experience::IShellExperienceDispatcher,Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization,IShellExperienceNotification,Windows::Foundation::IClosable,CloakedIid<ITimerCallback> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::AssignedAccess::IAssignedAccessControllerProxy,IPrivilegedOperationsConsumer>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::AssignedAccess::IAssignedAccessControllerProxy,IPrivilegedOperationsConsumer>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FullscreenCXHExperienceManagerBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,FullscreenCXHExperienceManagerBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IApplicationViewOperation,Windows::Internal::ComposableShell::Tabs::IApplicationViewTabOperation,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IApplicationViewOperation,Windows::Internal::ComposableShell::Tabs::IApplicationViewTabOperation,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IAudioSessionNotification,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IAudioSessionNotification,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IHostedApplicationEventSink,Windows::ApplicationModel::Actions::IHostedFlyoutOperation,IObjectProvider>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IHostedApplicationEventSink,Windows::ApplicationModel::Actions::IHostedFlyoutOperation,IObjectProvider>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IHostedApplicationEventSink,Windows::ApplicationModel::Actions::IHostedFlyoutOperation,IObjectProvider>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification,IImmersiveRawInputKeyboardNotification,Windows::Internal::Shell::Experience::ISoftLandingExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification,IImmersiveRawInputKeyboardNotification,Windows::Internal::Shell::Experience::ISoftLandingExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification,IImmersiveRawInputKeyboardNotification,Windows::Internal::Shell::Experience::ISoftLandingExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IImmersiveRawInputMouseNotification>();
			};

			class RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,CWRLObjectWithSite,IHostedApplicationActivationManager,IHostedApplicationActivationManager2,ChainInterfaces<IHostedApplicationActivationManagerPrivateCallbacks,ISplashScreen,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ICoreWindowFactoryPriv,IServiceProvider,IObjectWithWindow>
			{
			protected:
				unsigned long InternalAddRef();
				unsigned long InternalRelease();
			public:
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,CWRLObjectWithSite,IHostedApplicationActivationManager,IHostedApplicationActivationManager2,ChainInterfaces<IHostedApplicationActivationManagerPrivateCallbacks,ISplashScreen,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,ICoreWindowFactoryPriv,IServiceProvider,IObjectWithWindow>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,CWRLObjectWithSite,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,CWRLObjectWithSite,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,CWRLObjectWithSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler>,Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IInspectable,CWRLObjectWithSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler>,Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,IInputHostLayoutChanges>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,ILightDismissNotification,IInputHostLayoutChanges>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IServiceProvider,ISearchControlBroker,ISearchControlBrokerLocal,ISearchTypeAheadEventsSink,Windows::Foundation::IClosable>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IServiceProvider,ISearchControlBroker,ISearchControlBrokerLocal,ISearchTypeAheadEventsSink,Windows::Foundation::IClosable>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IServiceProvider,ISearchControlBroker,ISearchControlBrokerLocal,ISearchTypeAheadEventsSink,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IUnknown,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IUnknown,FtmBase>();
			};

			class RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Implements<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IComponentUIHostedActivationManager,ICoreWindowFactoryPriv,ISplashScreen,IServiceProvider,IComponentUIHostedActivationManagerTest,IObjectWithWindow>,Implements<RuntimeClassFlags<3>,ISplashScreenUI,IComponentUIEventHandler> >
			{
			protected:
				unsigned long InternalAddRef();
				unsigned long InternalRelease();
			public:
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Implements<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IComponentUIHostedActivationManager,ICoreWindowFactoryPriv,ISplashScreen,IServiceProvider,IComponentUIHostedActivationManagerTest,IObjectWithWindow>,Implements<RuntimeClassFlags<3>,ISplashScreenUI,IComponentUIEventHandler> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Actions::IActionExecutionBroker,CImmersiveShellComponentWithGITSite>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Actions::IActionExecutionBroker,CImmersiveShellComponentWithGITSite>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Actions::IActionHandler,Windows::ApplicationModel::Actions::IHostedActionHandler>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Actions::IActionHandler,Windows::ApplicationModel::Actions::IHostedActionHandler>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Actions::IActionHandler,Windows::ApplicationModel::Actions::IHostedActionHandler>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Actions::IActionHandler>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Actions::IActionHandler>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Actions::IActionHandler>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,CloakedIid<IServiceProvider>,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>,CWRLObjectWithGITSite,CActivatedEventArgsWithViewIdBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,CloakedIid<IServiceProvider>,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>,CWRLObjectWithGITSite,CActivatedEventArgsWithViewIdBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Activation::ISplashScreen,CloakedIid<ISplashScreenPriv> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Activation::ISplashScreen,CloakedIid<ISplashScreenPriv> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase,Windows::ApplicationModel::Contacts::Internal::IControlMapActionControlItem>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase,Windows::ApplicationModel::Contacts::Internal::IControlMapActionControlItem>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Foundation::Collections::IIterator<IInspectable *>,FtmBaseEnableIfAgile<1> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Foundation::Collections::IIterator<IInspectable *>,FtmBaseEnableIfAgile<1> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirectorContext,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirectorContext,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::PlatformExtensions::IContactCardExperience,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::PlatformExtensions::IContactCardExperience,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,ILightDismissNotification,IApplicationFrameTitleBarPinButtonHandler,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,ILightDismissNotification,IApplicationFrameTitleBarPinButtonHandler,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IDeviceDiscoveryExperienceManager,IImmersiveMonitorNotification,IDevicesFlowController,Windows::Foundation::IClosable>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IDeviceDiscoveryExperienceManager,IImmersiveMonitorNotification,IDevicesFlowController,Windows::Foundation::IClosable>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IDeviceDiscoveryExperienceManager,IImmersiveMonitorNotification,IDevicesFlowController,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IDevicePickerExperienceManager,ILightDismissNotification,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IDevicePickerExperienceManager,ILightDismissNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IExpansionExperienceManager,ILightDismissNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IExpansionExperienceManager,ILightDismissNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IHostExperienceManager,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IHostExperienceManager,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IInputDialExperienceManager,Windows::Foundation::IClosable,InputDial::IInputDialDeviceCallback,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IMultitaskingViewVisibilityNotification>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IInputDialExperienceManager,Windows::Foundation::IClosable,InputDial::IInputDialDeviceCallback,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IMultitaskingViewVisibilityNotification>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IInputDialExperienceManager,Windows::Foundation::IClosable,InputDial::IInputDialDeviceCallback,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IMultitaskingViewVisibilityNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IMiracastBannerExperienceManager,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IMiracastBannerExperienceManager,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IMiracastBannerExperienceManager,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::INetworkFlyoutExperienceManager,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::INetworkFlyoutExperienceManager,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IPenWorkspaceExperienceManager,ILightDismissNotification,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveMonitorNotification,INotesManagerCallback,Windows::System::Private::IPendingLaunch>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IPenWorkspaceExperienceManager,ILightDismissNotification,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveMonitorNotification,INotesManagerCallback,Windows::System::Private::IPendingLaunch>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::IPenWorkspaceExperienceManager,ILightDismissNotification,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveMonitorNotification,INotesManagerCallback,Windows::System::Private::IPendingLaunch>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ISharePickerExperienceManager,IApplicationViewChangeListener,IImmersiveWindowMessageNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ISharePickerExperienceManager,IApplicationViewChangeListener,IImmersiveWindowMessageNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITestExperienceManager,Windows::Foundation::IClosable,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITestExperienceManager,Windows::Foundation::IClosable,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITrayBatteryFlyoutExperienceManager,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITrayBatteryFlyoutExperienceManager,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITrayClockFlyoutExperienceManager>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITrayClockFlyoutExperienceManager>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITrayClockFlyoutExperienceManager>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITrayMtcUvcFlyoutExperienceManager,Windows::Foundation::IClosable>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::Experience::ITrayMtcUvcFlyoutExperienceManager,Windows::Foundation::IClosable>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::UI::ContentDeliveryManager::IExpansionExperience,CImmersiveShellComponentWithGITSite>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::UI::ContentDeliveryManager::IExpansionExperience,CImmersiveShellComponentWithGITSite>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::UI::SoftLanding::ISoftLandingExperience,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::UI::SoftLanding::ISoftLandingExperience,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::IStorageLibrary,IInitializeWithItem,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionUI>
			{
				RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::IStorageLibrary,IInitializeWithItem,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionUI>();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::IStorageLibrary,IInitializeWithItem,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionUI>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::Streams::IRandomAccessStream,Windows::Storage::Streams::IInputStream,Windows::Storage::Streams::IOutputStream,Windows::Foundation::IClosable,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::Streams::IRandomAccessStream,Windows::Storage::Streams::IInputStream,Windows::Storage::Streams::IOutputStream,Windows::Foundation::IClosable,FtmBase>();
			};

			class RuntimeClassImpl<RuntimeClassFlags<6>,0,0,0,IClassFactory,Nil,Nil,Nil,Nil>
			{
			protected:
				RuntimeClassImpl<RuntimeClassFlags<6>,0,0,0,IClassFactory,Nil,Nil,Nil,Nil>();
				unsigned long InternalAddRef();
			public:
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct Selector<ApplicationViewCollectionBase,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ApplicationViewCollectionBase>,IApplicationViewChangeListener,IApplicationViewVisibilityDebouncedNotificationService,FtmBase> >
			{
				Selector<ApplicationViewCollectionBase,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<ApplicationViewCollectionBase>,IApplicationViewChangeListener,IApplicationViewVisibilityDebouncedNotificationService,FtmBase> >();
			};

			struct Selector<Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler> >,Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > > >
			{
				Selector<Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler> >,Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > > >();
			};

			struct Selector<Implements<RuntimeClassFlags<2>,IConnectedSearchLogger,IConnectedSearchLogger2,IConnectedSearchContextManager,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IConnectedSearchLogger,IConnectedSearchLogger2,IConnectedSearchContextManager,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache> >,Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler>,FtmBase> >
			{
				Selector<Implements<RuntimeClassFlags<2>,IConnectedSearchLogger,IConnectedSearchLogger2,IConnectedSearchContextManager,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IConnectedSearchLogger,IConnectedSearchLogger2,IConnectedSearchContextManager,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache> >,Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler>,FtmBase> >();
			};

			struct Selector<Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler> >,FtmBase> >
			{
				Selector<Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler> >,FtmBase> >();
			};

			struct Selector<Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> > >,IWeakReferenceSource,FtmBase> >
			{
				Selector<Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> > >,IWeakReferenceSource,FtmBase> >();
			};

			struct Selector<Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> > >,IWeakReferenceSource,FtmBase> >
			{
				Selector<Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Implements<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> > >,IWeakReferenceSource,FtmBase> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Windows::ApplicationModel::Actions::CHostedFlyoutActivationInfoImpl>,IWeakReferenceSource,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Windows::ApplicationModel::Actions::CHostedFlyoutActivationInfoImpl>,IWeakReferenceSource,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsWithViewIdBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsWithViewIdBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsWithPrelaunchAndViewIdBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CActivatedEventArgsWithPrelaunchAndViewIdBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IContactActionControl>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CCustomPropertyProviderWithMapImpl>,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IContactActionControl> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IContactActionControl>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CCustomPropertyProviderWithMapImpl>,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IContactActionControl> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CValidatingVector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> > >,IWeakReferenceSource> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<CValidatingVector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> > >,IWeakReferenceSource> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Windows::ApplicationModel::Actions::CActionArgsImpl>,IWeakReferenceSource> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Windows::ApplicationModel::Actions::CActionArgsImpl>,IWeakReferenceSource> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Windows::ApplicationModel::Actions::CMainWindowActivationInfoImpl>,IWeakReferenceSource> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<1>,0,ImplementsMarker<Windows::ApplicationModel::Actions::CMainWindowActivationInfoImpl>,IWeakReferenceSource> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::ApplicationModel::Actions::CActionActivationInfoBase>,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::ApplicationModel::Actions::CActionActivationInfoBase>,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Actions::IMainWindowActivationInfo>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::ApplicationModel::Actions::CActionActivationInfoBase>,Windows::ApplicationModel::Actions::IMainWindowActivationInfo> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,Windows::ApplicationModel::Actions::IMainWindowActivationInfo>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::ApplicationModel::Actions::CActionActivationInfoBase>,Windows::ApplicationModel::Actions::IMainWindowActivationInfo> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirector>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase>,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirector> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirector>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase>,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirector> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IGlobalRudeWindowManagerPriv,IGlobalRudeWindowManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,IDesktopVisibilityChangesNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<IGlobalRudeWindowManagerPriv,IGlobalRudeWindowManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,IDesktopVisibilityChangesNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IGlobalRudeWindowManagerPriv,IGlobalRudeWindowManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,IDesktopVisibilityChangesNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<IGlobalRudeWindowManagerPriv,IGlobalRudeWindowManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,IDesktopVisibilityChangesNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IImmersiveBackstackManagerPriv,IImmersiveBackstackManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveBackstackSettings,IImmersiveApplicationNotification,IAppSwitcherNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<IImmersiveBackstackManagerPriv,IImmersiveBackstackManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveBackstackSettings,IImmersiveApplicationNotification,IAppSwitcherNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ChainInterfaces<IImmersiveBackstackManagerPriv,IImmersiveBackstackManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveBackstackSettings,IImmersiveApplicationNotification,IAppSwitcherNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ChainInterfaces<IImmersiveBackstackManagerPriv,IImmersiveBackstackManager,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveBackstackSettings,IImmersiveApplicationNotification,IAppSwitcherNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,CloakedIid<IStdMarshalInfo> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWrlLightweightHandlerBase>,CloakedIid<IStdMarshalInfo> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,CloakedIid<IStdMarshalInfo> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWrlLightweightHandlerBase>,CloakedIid<IStdMarshalInfo> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IActivationErrorPopupFactory>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IActivationErrorPopupFactory> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IActivationErrorPopupFactory>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IActivationErrorPopupFactory> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAppSwitcherNotificationService,IImmersiveApplicationNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IAppSwitcherNotificationService,IImmersiveApplicationNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAppSwitcherNotificationService,IImmersiveApplicationNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IAppSwitcherNotificationService,IImmersiveApplicationNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationChromeControls>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IApplicationChromeControls> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationChromeControls>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IApplicationChromeControls> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationDataPersistence,IApplicationPositionPersistence,IApplicationWindowSizingPersistence>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IApplicationDataPersistence,IApplicationPositionPersistence,IApplicationWindowSizingPersistence> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationDataPersistence,IApplicationPositionPersistence,IApplicationWindowSizingPersistence>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IApplicationDataPersistence,IApplicationPositionPersistence,IApplicationWindowSizingPersistence> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationPreLaunch,IImmersiveApplicationNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IApplicationPreLaunch,IImmersiveApplicationNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationPreLaunch,IImmersiveApplicationNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IApplicationPreLaunch,IImmersiveApplicationNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationTargetingTracker,ISyncIAMEventHandler>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IApplicationTargetingTracker,ISyncIAMEventHandler> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationTargetingTracker,ISyncIAMEventHandler>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IApplicationTargetingTracker,ISyncIAMEventHandler> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewCompatibilityManager,IApplicationViewChangeListener,IImmersiveMonitorNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IApplicationViewCompatibilityManager,IApplicationViewChangeListener,IImmersiveMonitorNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewCompatibilityManager,IApplicationViewChangeListener,IImmersiveMonitorNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IApplicationViewCompatibilityManager,IApplicationViewChangeListener,IImmersiveMonitorNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewCompatiblityNotification,IOverrideScaling>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IApplicationViewCompatiblityNotification,IOverrideScaling> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IApplicationViewCompatiblityNotification,IOverrideScaling>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IApplicationViewCompatiblityNotification,IOverrideScaling> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAsyncCallback>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IAsyncCallback> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IAsyncCallback>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IAsyncCallback> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IBackComponentService,IInAppBackHandlerNotifications,ITabletModeChangeListener,IApplicationViewChangeListener,IShellTargetingChangeNotification,ITabletModePositionerManagerNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IBackComponentService,IInAppBackHandlerNotifications,ITabletModeChangeListener,IApplicationViewChangeListener,IShellTargetingChangeNotification,ITabletModePositionerManagerNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IBackComponentService,IInAppBackHandlerNotifications,ITabletModeChangeListener,IApplicationViewChangeListener,IShellTargetingChangeNotification,ITabletModePositionerManagerNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IBackComponentService,IInAppBackHandlerNotifications,ITabletModeChangeListener,IApplicationViewChangeListener,IShellTargetingChangeNotification,ITabletModePositionerManagerNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IBandWorkArea>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IBandWorkArea> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IBandWorkArea>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IBandWorkArea> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IClassFactory>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IClassFactory> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IClassFactory>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IClassFactory> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ICompactOverlayManager,IImmersiveMonitorNotification,IApplicationViewChangeListener,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ICompactOverlayManager,IImmersiveMonitorNotification,IApplicationViewChangeListener,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ICompactOverlayManager,IImmersiveMonitorNotification,IApplicationViewChangeListener,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ICompactOverlayManager,IImmersiveMonitorNotification,IApplicationViewChangeListener,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IEDPNotificationHost,IEnterpriseIdChangeNotificationProvider,IPopupCommandHandler>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IEDPNotificationHost,IEnterpriseIdChangeNotificationProvider,IPopupCommandHandler> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IEDPNotificationHost,IEnterpriseIdChangeNotificationProvider,IPopupCommandHandler>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IEDPNotificationHost,IEnterpriseIdChangeNotificationProvider,IPopupCommandHandler> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IEdgeUiHint>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IEdgeUiHint> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IEdgeUiHint>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IEdgeUiHint> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IEdgeUiInput,IEdgeUiInputHintHost,IDropTarget,IImmersiveRawInputMouseNotification,IImmersiveRawInputKeyboardNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IEdgeUiInput,IEdgeUiInputHintHost,IDropTarget,IImmersiveRawInputMouseNotification,IImmersiveRawInputKeyboardNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IEdgeUiInput,IEdgeUiInputHintHost,IDropTarget,IImmersiveRawInputMouseNotification,IImmersiveRawInputKeyboardNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IEdgeUiInput,IEdgeUiInputHintHost,IDropTarget,IImmersiveRawInputMouseNotification,IImmersiveRawInputKeyboardNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IEdgeUiInvocation,IEdgeUiMouseInvocation,IEdgeUiTouchInvocation,IEdgeUiSecondaryTouchInvocation>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IEdgeUiInvocation,IEdgeUiMouseInvocation,IEdgeUiTouchInvocation,IEdgeUiSecondaryTouchInvocation> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IEdgeUiInvocation,IEdgeUiMouseInvocation,IEdgeUiTouchInvocation,IEdgeUiSecondaryTouchInvocation>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IEdgeUiInvocation,IEdgeUiMouseInvocation,IEdgeUiTouchInvocation,IEdgeUiSecondaryTouchInvocation> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IEdgeUiTouchInvocation,IEdgeUiDiscreteInvocation>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IEdgeUiTouchInvocation,IEdgeUiDiscreteInvocation> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IEdgeUiTouchInvocation,IEdgeUiDiscreteInvocation>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IEdgeUiTouchInvocation,IEdgeUiDiscreteInvocation> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveApplicationNotification,IApplicationViewChangeListener,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveApplicationNotification,IApplicationViewChangeListener,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveApplicationNotification,IApplicationViewChangeListener,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveApplicationNotification,IApplicationViewChangeListener,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveApplicationNotification,IImmersiveAppCrusherNotification,IHostedApplicationNotification,IBackStackApplicationNotification,IImmersiveSessionIdleNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IImmersiveApplicationNotification,IImmersiveAppCrusherNotification,IHostedApplicationNotification,IBackStackApplicationNotification,IImmersiveSessionIdleNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveApplicationNotification,IImmersiveAppCrusherNotification,IHostedApplicationNotification,IBackStackApplicationNotification,IImmersiveSessionIdleNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IImmersiveApplicationNotification,IImmersiveAppCrusherNotification,IHostedApplicationNotification,IBackStackApplicationNotification,IImmersiveSessionIdleNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveLayoutClient,IImmersiveMonitorNotification,IAccessibilityDockingServiceInternal,IImmersiveShellHookNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveLayoutClient,IImmersiveMonitorNotification,IAccessibilityDockingServiceInternal,IImmersiveShellHookNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveLayoutClient,IImmersiveMonitorNotification,IAccessibilityDockingServiceInternal,IImmersiveShellHookNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveLayoutClient,IImmersiveMonitorNotification,IAccessibilityDockingServiceInternal,IImmersiveShellHookNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification,IDesktopVisibilityChangesNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveMonitorNotification,IDesktopVisibilityChangesNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification,IDesktopVisibilityChangesNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveMonitorNotification,IDesktopVisibilityChangesNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IAudioFlyoutController>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveMonitorNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IAudioFlyoutController> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IAudioFlyoutController>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveMonitorNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IAudioFlyoutController> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotificationService,IImmersiveMonitorNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveMonitorNotificationService,IImmersiveMonitorNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveMonitorNotificationService,IImmersiveMonitorNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveMonitorNotificationService,IImmersiveMonitorNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveOpenWithUI,IServiceProvider>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IImmersiveOpenWithUI,IServiceProvider> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveOpenWithUI,IServiceProvider>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IImmersiveOpenWithUI,IServiceProvider> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellComponent,IServiceProvider>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IImmersiveShellComponent,IServiceProvider> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellComponent,IServiceProvider>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IImmersiveShellComponent,IServiceProvider> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveSystemModeNotification,IImmersiveLayoutChanges,IFullScreenPositionerNotification,IRudeWindowManagerEvents,Implements<RuntimeClassFlags<2>,IEdgeUiManager,IEdgeUiManagerInternal,IEdgeUiInputCallback,ITabletModeChangeListener> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveShellHookNotification,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveSystemModeNotification,IImmersiveLayoutChanges,IFullScreenPositionerNotification,IRudeWindowManagerEvents,Implements<RuntimeClassFlags<2>,IEdgeUiManager,IEdgeUiManagerInternal,IEdgeUiInputCallback,ITabletModeChangeListener> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveSystemModeNotification,IImmersiveLayoutChanges,IFullScreenPositionerNotification,IRudeWindowManagerEvents,Implements<RuntimeClassFlags<2>,IEdgeUiManager,IEdgeUiManagerInternal,IEdgeUiInputCallback,ITabletModeChangeListener> >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveShellHookNotification,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveSystemModeNotification,IImmersiveLayoutChanges,IFullScreenPositionerNotification,IRudeWindowManagerEvents,Implements<RuntimeClassFlags<2>,IEdgeUiManager,IEdgeUiManagerInternal,IEdgeUiInputCallback,ITabletModeChangeListener> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveWindowMessageNotification,IEdgeUiDeviceManager,IEdgeUiDeviceManagerInternal>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveWindowMessageNotification,IEdgeUiDeviceManager,IEdgeUiDeviceManagerInternal> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveWindowMessageNotification,IEdgeUiDeviceManager,IEdgeUiDeviceManagerInternal>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveWindowMessageNotification,IEdgeUiDeviceManager,IEdgeUiDeviceManagerInternal> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveWindowMessageNotification,IImmersiveIconicBitmap,IImmersiveBackstackNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveWindowMessageNotification,IImmersiveIconicBitmap,IImmersiveBackstackNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IImmersiveWindowMessageNotification,IImmersiveIconicBitmap,IImmersiveBackstackNotification>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IImmersiveWindowMessageNotification,IImmersiveIconicBitmap,IImmersiveBackstackNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IInitializeTrustedComponentForegroundControl,ISnapComponent,IPriviledgedPositioner,IWindowManagementArrangementEvents>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IInitializeTrustedComponentForegroundControl,ISnapComponent,IPriviledgedPositioner,IWindowManagementArrangementEvents> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IInitializeTrustedComponentForegroundControl,ISnapComponent,IPriviledgedPositioner,IWindowManagementArrangementEvents>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IInitializeTrustedComponentForegroundControl,ISnapComponent,IPriviledgedPositioner,IWindowManagementArrangementEvents> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IInitializeTrustedComponentForegroundControl,IWindowManagementEvents>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IInitializeTrustedComponentForegroundControl,IWindowManagementEvents> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IInitializeTrustedComponentForegroundControl,IWindowManagementEvents>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,IInitializeTrustedComponentForegroundControl,IWindowManagementEvents> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IInputHostLayout,IInputHostManager>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IInputHostLayout,IInputHostManager> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IInputHostLayout,IInputHostManager>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IInputHostLayout,IInputHostManager> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IInputHostLayoutChanges,IImmersiveShellHookNotification,ITabletModeChangeListener>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponent>,IInputHostLayoutChanges,IImmersiveShellHookNotification,ITabletModeChangeListener> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IInputHostLayoutChanges,IImmersiveShellHookNotification,ITabletModeChangeListener>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponent>,IInputHostLayoutChanges,IImmersiveShellHookNotification,ITabletModeChangeListener> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ILauncherTipContextMenu,ILauncherTipContextMenuSettingChangeListener>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ILauncherTipContextMenu,ILauncherTipContextMenuSettingChangeListener> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ILauncherTipContextMenu,ILauncherTipContextMenuSettingChangeListener>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ILauncherTipContextMenu,ILauncherTipContextMenuSettingChangeListener> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ILockScreenCallBroker,ILockScreenCallBrokerPriv,IImmersiveApplicationNotification,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ILockScreenCallBroker,ILockScreenCallBrokerPriv,IImmersiveApplicationNotification,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ILockScreenCallBroker,ILockScreenCallBrokerPriv,IImmersiveApplicationNotification,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,ILockScreenCallBroker,ILockScreenCallBrokerPriv,IImmersiveApplicationNotification,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ILockScreenContentionFlyout>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CLockScreenApplicationManagerBase>,ILockScreenContentionFlyout> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ILockScreenContentionFlyout>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CLockScreenApplicationManagerBase>,ILockScreenContentionFlyout> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,INotesManager,IApplicationFrameEventHandler,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification,IImmersiveLayoutChanges,IApplicationStateChangeHandler,IPrivilegedOperationsConsumer>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,INotesManager,IApplicationFrameEventHandler,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification,IImmersiveLayoutChanges,IApplicationStateChangeHandler,IPrivilegedOperationsConsumer> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,INotesManager,IApplicationFrameEventHandler,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification,IImmersiveLayoutChanges,IApplicationStateChangeHandler,IPrivilegedOperationsConsumer>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,INotesManager,IApplicationFrameEventHandler,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification,IImmersiveLayoutChanges,IApplicationStateChangeHandler,IPrivilegedOperationsConsumer> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IObjectArray>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IObjectArray> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IObjectArray>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IObjectArray> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IPerWindowNotificationQueue>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IPerWindowNotificationQueue> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IPerWindowNotificationQueue>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IPerWindowNotificationQueue> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IPersistedApplicationData>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IPersistedApplicationData> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IPersistedApplicationData>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IPersistedApplicationData> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IPrivilegedOperationsConsumer,IRemoteAppBrokerFactory>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IPrivilegedOperationsConsumer,IRemoteAppBrokerFactory> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IPrivilegedOperationsConsumer,IRemoteAppBrokerFactory>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IPrivilegedOperationsConsumer,IRemoteAppBrokerFactory> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IProjectionManager,IImmersiveMonitorNotification,IAppSwitcherNotification,IImmersiveApplicationNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IProjectionManager,IImmersiveMonitorNotification,IAppSwitcherNotification,IImmersiveApplicationNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IProjectionManager,IImmersiveMonitorNotification,IAppSwitcherNotification,IImmersiveApplicationNotification>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IProjectionManager,IImmersiveMonitorNotification,IAppSwitcherNotification,IImmersiveApplicationNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IQueryWithLinguisticAlternatives>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IQueryWithLinguisticAlternatives> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IQueryWithLinguisticAlternatives>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,IQueryWithLinguisticAlternatives> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IRawTouchProcessor>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IRawTouchProcessor> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IRawTouchProcessor>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CWRLObjectWithSite>,IRawTouchProcessor> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IRetailDemoHost>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IRetailDemoHost> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IRetailDemoHost>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase>,IRetailDemoHost> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider,ChainInterfaces<IInternalImmersiveLayout,IImmersiveLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveLayoutSyncRegistration,IImmersiveShellComponent,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWRLObjectWithGITSite>,IServiceProvider,ChainInterfaces<IInternalImmersiveLayout,IImmersiveLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveLayoutSyncRegistration,IImmersiveShellComponent,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider,ChainInterfaces<IInternalImmersiveLayout,IImmersiveLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveLayoutSyncRegistration,IImmersiveShellComponent,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWRLObjectWithGITSite>,IServiceProvider,ChainInterfaces<IInternalImmersiveLayout,IImmersiveLayout,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IImmersiveLayoutSyncRegistration,IImmersiveShellComponent,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider,IImmersiveMonitorNotificationService,IImmersiveShellComponent,IImmersiveMonitorManager,IImmersiveMonitorManagerInternal,IImmersiveShellHookNotification,Implements<RuntimeClassFlags<2>,IImmersiveWindowMessageNotification,IImmersiveSystemModeNotification,IImmersiveLauncherVisibilityListener> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWRLObjectWithGITSite>,IServiceProvider,IImmersiveMonitorNotificationService,IImmersiveShellComponent,IImmersiveMonitorManager,IImmersiveMonitorManagerInternal,IImmersiveShellHookNotification,Implements<RuntimeClassFlags<2>,IImmersiveWindowMessageNotification,IImmersiveSystemModeNotification,IImmersiveLauncherVisibilityListener> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,IServiceProvider,IImmersiveMonitorNotificationService,IImmersiveShellComponent,IImmersiveMonitorManager,IImmersiveMonitorManagerInternal,IImmersiveShellHookNotification,Implements<RuntimeClassFlags<2>,IImmersiveWindowMessageNotification,IImmersiveSystemModeNotification,IImmersiveLauncherVisibilityListener> >,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<CWRLObjectWithGITSite>,IServiceProvider,IImmersiveMonitorNotificationService,IImmersiveShellComponent,IImmersiveMonitorManager,IImmersiveMonitorManagerInternal,IImmersiveShellHookNotification,Implements<RuntimeClassFlags<2>,IImmersiveWindowMessageNotification,IImmersiveSystemModeNotification,IImmersiveLauncherVisibilityListener> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISettingsFlow>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ISettingsFlow> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISettingsFlow>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ISettingsFlow> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISettingsProvider>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,ISettingsProvider> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISettingsProvider>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<FtmBase>,ISettingsProvider> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISyncIAMEventHandler,IActiveZBandNotificationForMonitorService>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ISyncIAMEventHandler,IActiveZBandNotificationForMonitorService> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ISyncIAMEventHandler,IActiveZBandNotificationForMonitorService>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ISyncIAMEventHandler,IActiveZBandNotificationForMonitorService> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ITransitionCoordinator,ITabletModeChangeListener,ITimerCallback>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ITransitionCoordinator,ITabletModeChangeListener,ITimerCallback> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ITransitionCoordinator,ITabletModeChangeListener,ITimerCallback>,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,ITransitionCoordinator,ITabletModeChangeListener,ITimerCallback> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IGameFocusEvents,IRudeWindowManagerEvents,IImmersiveMonitorNotification> > >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,Implements<RuntimeClassFlags<2>,IGameFocusEvents,IRudeWindowManagerEvents,IImmersiveMonitorNotification> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IGameFocusEvents,IRudeWindowManagerEvents,IImmersiveMonitorNotification> > >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,Implements<RuntimeClassFlags<2>,IGameFocusEvents,IRudeWindowManagerEvents,IImmersiveMonitorNotification> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IImmersiveRawInputProvider,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> > >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,Implements<RuntimeClassFlags<2>,IImmersiveRawInputProvider,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IImmersiveRawInputProvider,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> > >,ImplementsHelper<RuntimeClassFlags<2>,0,ImplementsMarker<CImmersiveShellComponentWithSite>,Implements<RuntimeClassFlags<2>,IImmersiveRawInputProvider,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveWindowMessageNotification>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveWindowMessageNotification> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IImmersiveWindowMessageNotification>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CImmersiveShellComponentWithGITSite>,IImmersiveWindowMessageNotification> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CWRLObjectWithSite>,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CWRLObjectWithSite>,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IAppCrusherPopup>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CWRLObjectWithSite>,IWeakReferenceSource,IAppCrusherPopup> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,IAppCrusherPopup>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CWRLObjectWithSite>,IWeakReferenceSource,IAppCrusherPopup> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CActivatedEventArgsBase>,IWeakReferenceSource,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IControlMapActionControlItem>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase>,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IControlMapActionControlItem> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IControlMapActionControlItem>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase>,IWeakReferenceSource,Windows::ApplicationModel::Contacts::Internal::IControlMapActionControlItem> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CImmersiveWindowFactoryBase>,IWeakReferenceSource> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<CImmersiveWindowFactoryBase>,IWeakReferenceSource> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase>,IWeakReferenceSource> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<3>,0,ImplementsMarker<Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase>,IWeakReferenceSource> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FullscreenCXHExperienceManagerBase>,IWeakReferenceSource> >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,IWeakReferenceSource>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FullscreenCXHExperienceManagerBase>,IWeakReferenceSource> >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > > >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler> >,Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > > >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler> >,Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil> > > >();
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,CloakedIid<IObjectWithShellItem> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CCustomPropertyProviderWithMapImpl>,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,CloakedIid<IObjectWithShellItem> > >
			{
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,CloakedIid<IObjectWithShellItem> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<CCustomPropertyProviderWithMapImpl>,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,CloakedIid<IObjectWithShellItem> > >();
			};

			class StaticStorage<DefaultModule<1>,0,int>
			{
				static StaticStorage<DefaultModule<1>,0,int> instance_;
			public:
				~StaticStorage<DefaultModule<1>,0,int>();
			};

			class StaticStorage<DefaultModule<5>,0,int>
			{
				static StaticStorage<DefaultModule<5>,0,int> instance_;
			public:
				~StaticStorage<DefaultModule<5>,0,int>();
			};

			struct StrongReference
			{
				unsigned long IncrementStrongReference();
			};

			struct WeakReferenceImpl
			{
				WeakReferenceImpl(IUnknown *);
				virtual long Resolve(_GUID const &,IInspectable * *);
			};

			ComPtr<ApplicationIdentityInfo> Make<ApplicationIdentityInfo,HSTRING__ * &,unsigned short (&)[66],unsigned short (&)[128],unsigned short (&)[65],unsigned long &,unsigned long &,IInspectable * &>(HSTRING__ * &,unsigned short (&)[66],unsigned short (&)[128],unsigned short (&)[65],unsigned long &,unsigned long &,IInspectable * &);
			ComPtr<CFileOpenPickerUI> Make<CFileOpenPickerUI,WeakRef &>(WeakRef &);
			ComPtr<CFileOpenPickerUIInternal> Make<CFileOpenPickerUIInternal,WeakRef &>(WeakRef &);
			ComPtr<CFilePickerInvoker> Make<CFilePickerInvoker,CPickerParameters &,CCallerInformation &,int const &>(CPickerParameters &,CCallerInformation &,int const &);
			ComPtr<CFileSavePickerUI> Make<CFileSavePickerUI,WeakRef &>(WeakRef &);
			ComPtr<CFileSavePickerUIInternal> Make<CFileSavePickerUIInternal,WeakRef &>(WeakRef &);
			ComPtr<CMessageNotificationHolder> Make<CMessageNotificationHolder,CCoSimpleArray<unsigned int,4294967294,CSimpleArrayStandardCompareHelper<unsigned int> > * &,IImmersiveWindowMessageNotification * &>(CCoSimpleArray<unsigned int,4294967294,CSimpleArrayStandardCompareHelper<unsigned int> > * &,IImmersiveWindowMessageNotification * &);
			ComPtr<CMessageNotificationHolder> Make<CMessageNotificationHolder,unsigned int &,IImmersiveWindowMessageNotification * &>(unsigned int &,IImmersiveWindowMessageNotification * &);
			ComPtr<CPickerClosingOperation> Make<CPickerClosingOperation,CAutoHandle<void *> &>(CAutoHandle<void *> &);
			ComPtr<CShellHookNotificationHolder> Make<CShellHookNotificationHolder,unsigned __int64 &,IImmersiveShellHookNotification * &>(unsigned __int64 &,IImmersiveShellHookNotification * &);
			ComPtr<CTargetFileRequest> Make<CTargetFileRequest,WeakRef &>(WeakRef &);
			ComPtr<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::ChunkView> Make<Windows::Foundation::Collections::Internal::NaiveSplitView<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::ChunkView,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *> &>(Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *> &);
			Details::WeakReferenceImpl * CreateWeakReference(IUnknown *);
			bool TerminateMap(Details::ModuleBase *,unsigned short const *,bool);
			long CreateActivationFactory<CAlarmApplicationManagerStatics>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<CBrokeredAppointmentsManager>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<CContactManagerBroker>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<CLockScreenStatics>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<ContactCardExperienceContractRedirector>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<SimpleSealedActivationFactory<DesktopContactCardExperience,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<SimpleSealedActivationFactory<Windows::ApplicationModel::Contacts::Internal::ContactUIHelper,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<SimpleSealedActivationFactory<Windows::Internal::Feedback::InternalFeedbackBroker,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<StaThreadPoolActivationFactoryWithInitialize<CCachedFileUpdateManager,Nil> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<Windows::Internal::UI::StartScreen::JumpListBrokeredStatics>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateAgileHelper<Windows::Foundation::IEventHandler<IInspectable *> >(Windows::Foundation::IEventHandler<IInspectable *> *,Windows::Foundation::IEventHandler<IInspectable *> * *);
			long CreateAgileHelper<Windows::Foundation::IEventHandler<bool> >(Windows::Foundation::IEventHandler<bool> *,Windows::Foundation::IEventHandler<bool> * *);
			long CreateAgileHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *> *,Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *> * *);
			long CreateAgileHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int> *,Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int> * *);
			long CreateAgileHelper<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64> >(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64> *,Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64> * *);
			long CreateClassFactory<AvailableNetworksExperienceFlowCF>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<CActionExecutionBrokerCF>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<CCortanaExperienceFlowCF>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<CDevicesFlowCF>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<CShareFlowCF>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<DevicesFlowExperienceFlowCF>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<GamingOverlayExperienceManagerFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<GlobalRudeWindowManagerClassFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<ModalExperienceManagerCF>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<RudeWindowManagerClassFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<AvailableNetworksExperienceFlowCF,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<BackTracker,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<BroadcastDVRComponent,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CAccessibilityDock,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CActionExecutionBrokerCF,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CActivationErrorPopupFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CActivationStoreHelper,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CAppCrusher,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CAppInstanceFolder,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CAppListTileFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CApplicabilityCacheMonitor,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CApplicationPreLaunch,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CApplicationTargetingTracker,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CAudioFlyoutController,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CAutoPlayUI,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CBackstackManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CBamThrottleSettings,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CCompatibilityPolicyManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CConnectedSearchShellService,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CCortanaExperienceFlowCF,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CDeviceSettingsProvider,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CDevicesFlowCF,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CEdgeUiDeviceManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CEdgeUiManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CExtensionListContextMenu,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CHostedApplicationActivationManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CIconicRepresentationLoader,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveHotkeyNotification,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveMonitorManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveMonitorNotificationServiceProxy,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveOpenWithUI,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveSessionIdleDetector,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveSettingsCache,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveShellHookService,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveShellNotifier,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveSplashScreenCF,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CImmersiveWindowMessageService,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CInputHostLayout,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CKeyboardOcclusionMitigation,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CLauncherTipContextMenu,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CLayoutManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CLegacyProcessLifetimeManagerProxy,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CLocalObjectCreator,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CLockScreenApplicationManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CLockScreenCallBrokerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CLockScreenSettingProvider,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CNotificationManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CNotificationsSettingProvider,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<COverrideScaling,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPickerControllerInProcServer,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPlayToReceiverManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CPlaybackManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CProjectionManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CQuietHoursManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CRawInputProvider,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSearchServicesProvider,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSearchSuggestionsService,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSettingsFlow,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CShareFlowCF,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSharePlatformHost,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CShellChromeControls,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CShellExperienceDispatcher,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CShellExperienceManagerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CShellFeedbackService,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CShellSnapComponent,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSplashScreenEvents,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSplashScreenTimer,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CStorageLibraryUI,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSwitchThumbnailDeviceManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSyncIAMEventHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CSyncSettingsProvider,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ClickNote,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CompactOverlayManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CompactOverlayPositioner,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ComponentUIPlugin,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CredentialResetExperienceManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<DataPersistence::CDataPersistence,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<DesktopAppXActivator,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<DesktopAppXImmersiveBrokerInterop,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<DesktopStoreRemediationHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<DevicesFlowExperienceFlowCF,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<DialogManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<EDPNotificationHost,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<EnterpriseChromeServiceProvider,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ExpansionExperienceController,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<HostedApplicationExperienceManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<InkWorkspaceHostedAppsManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<MsaWindowManagerImpl,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<NotesManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<OOBEExperienceManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PackagedApplicationExecuteCommand,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PenSignalManagerImpl,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<PublicShellFeedbackBroker,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<QuietHoursService,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<RemoteAppBrokerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<RetailDemoHost,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ShellDropTarget,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ShellImmersiveComponentCreator,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<ShellTargetingTracker,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<StoreFrontHelper,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TabletModeController,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TouchpadActionsComponent,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TouchpadActionsGestureHandler,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TouchpadGestureComponent,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<TransitionCoordinator,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<WindowManagementEvents,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<Windows::Internal::Shell::AssignedAccess::AssignedAccessControllerProxy,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<Windows::Internal::UI::SoftLanding::CSoftLandingManager,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<Windows::Internal::UI::SoftLanding::SoftLandingNotificationActivationCallback,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<Windows::Internal::UI::WindowsTip::WindowsTipNotificationActivationCallback,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SttExperienceManagerFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long GetActivationFactory<1>(Details::ModuleBase *,unsigned short const *,HSTRING__ *,IActivationFactory * *);
			long GetCacheEntry(Details::ModuleBase *,unsigned int *,_GUID const &,Details::CreatorMap const *,IUnknown * *);
			long GetClassObject<1>(Details::ModuleBase *,unsigned short const *,_GUID const &,_GUID const &,void * *);
			long GetClassObject<5>(Details::ModuleBase *,unsigned short const *,_GUID const &,_GUID const &,void * *);
			long MakeAndInitialize<ApplicationViewCollectionRegistration,ApplicationViewCollectionRegistration,IApplicationViewChangeListener * &>(ApplicationViewCollectionRegistration * *,IApplicationViewChangeListener * &);
			long MakeAndInitialize<ApplicationViewFilteredCollection,ApplicationViewFilteredCollection,IApplicationViewCollection * &,IApplicationViewVisibilityDebouncedNotificationService * &,IObjectCollection * &>(ApplicationViewFilteredCollection * *,IApplicationViewCollection * &,IApplicationViewVisibilityDebouncedNotificationService * &,IObjectCollection * &);
			long MakeAndInitialize<BadgeWindowAccessibility,BadgeWindowAccessibility,HWND__ * &>(BadgeWindowAccessibility * *,HWND__ * &);
			long MakeAndInitialize<BadgeWindowController,IBadgeWindowController,IEnterpriseChromeManagerInternal * &,IBadgeWindow * &>(IBadgeWindowController * *,IEnterpriseChromeManagerInternal * &,IBadgeWindow * &);
			long MakeAndInitialize<CAppointmentsProviderShowTimeFrameActivatedEventArgs,Windows::ApplicationModel::Activation::IActivatedEventArgs,Windows::Foundation::DateTime &,Windows::Foundation::TimeSpan &>(Windows::ApplicationModel::Activation::IActivatedEventArgs * *,Windows::Foundation::DateTime &,Windows::Foundation::TimeSpan &);
			long MakeAndInitialize<CBaseTrayFlyoutExperienceManager,IInspectable,IServiceProvider * &,unsigned short const * &,unsigned short const * &>(IInspectable * *,IServiceProvider * &,unsigned short const * &,unsigned short const * &);
			long MakeAndInitialize<CBaseTrayFlyoutExperienceManager,IInspectable,IServiceProvider * &,unsigned short const * &>(IInspectable * *,IServiceProvider * &,unsigned short const * &);
			long MakeAndInitialize<CCommonApplicationViewOcclusionPosition,IOcclusionBasedApplicationViewPosition,tagWINDOWPLACEMENT &>(IOcclusionBasedApplicationViewPosition * *,tagWINDOWPLACEMENT &);
			long MakeAndInitialize<CCommonApplicationViewPosition,CCommonApplicationViewPosition,tagRECT &>(CCommonApplicationViewPosition * *,tagRECT &);
			long MakeAndInitialize<CCommonApplicationViewPosition,IApplicationViewPosition,tagRECT &>(IApplicationViewPosition * *,tagRECT &);
			long MakeAndInitialize<CDCompDesktopThumbnail,CDCompDesktopThumbnail,tagSIZE * &,tagRECT const &,HWND__ * &,IDCompThumbnailParent * &,ISwitchThumbnailDeviceManager * &,ISwitchThumbnailFactory * &>(CDCompDesktopThumbnail * *,tagSIZE * &,tagRECT const &,HWND__ * &,IDCompThumbnailParent * &,ISwitchThumbnailDeviceManager * &,ISwitchThumbnailFactory * &);
			long MakeAndInitialize<CDCompShellTabThumbnail,CDCompShellTabThumbnail,DCompShellTabThumbnailInfo &,tagSIZE const * &,tagRECT * &,IDCompThumbnailParent * &,ISwitchThumbnailDeviceManager * &,ISwitchThumbnailFactory * &>(CDCompShellTabThumbnail * *,DCompShellTabThumbnailInfo &,tagSIZE const * &,tagRECT * &,IDCompThumbnailParent * &,ISwitchThumbnailDeviceManager * &,ISwitchThumbnailFactory * &);
			long MakeAndInitialize<CDCompVirtualDesktopThumbnail,CDCompVirtualDesktopThumbnail,tagSIZE const * &,tagRECT const &,HWND__ * &,IDCompThumbnailParent * &,ISwitchThumbnailDeviceManager * &,ISwitchThumbnailFactory * &>(CDCompVirtualDesktopThumbnail * *,tagSIZE const * &,tagRECT const &,HWND__ * &,IDCompThumbnailParent * &,ISwitchThumbnailDeviceManager * &,ISwitchThumbnailFactory * &);
			long MakeAndInitialize<CDataTransferBrokerCallbacks,IDataTransferBrokerCallbacks,ISharePlatformHost * &>(IDataTransferBrokerCallbacks * *,ISharePlatformHost * &);
			long MakeAndInitialize<CDeviceActivatedEventArgs,CDeviceActivatedEventArgs,unsigned short const * &,unsigned short const * &>(CDeviceActivatedEventArgs * *,unsigned short const * &,unsigned short const * &);
			long MakeAndInitialize<CDevicePickerExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CDevicesFlowExperienceManager,IInspectable,IServiceProvider * &,unsigned short const (&)[49]>(Details::ComPtrRef<ComPtr<IInspectable> >,IServiceProvider * &,unsigned short const (&)[49]);
			long MakeAndInitialize<CDevicesFlowExperienceManager,IInspectable,IServiceProvider * &,unsigned short const (&)[49]>(IInspectable * *,IServiceProvider * &,unsigned short const (&)[49]);
			long MakeAndInitialize<CEnumerateEntries,CEnumerateEntries,unsigned char * &,unsigned long &>(CEnumerateEntries * *,unsigned char * &,unsigned long &);
			long MakeAndInitialize<CExpansionExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CFileRemovedEventArgs,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs,unsigned short const * &>(Windows::Storage::Pickers::Provider::IFileRemovedEventArgs * *,unsigned short const * &);
			long MakeAndInitialize<CFileUpdateResult,IFileUpdateResult,Windows::Storage::Provider::IFileUpdateRequest * &,IShellItem * &>(IFileUpdateResult * *,Windows::Storage::Provider::IFileUpdateRequest * &,IShellItem * &);
			long MakeAndInitialize<CGITCallbackArray,IObjectArray,CCoSimpleArray<ComPtr<IGITCookieObject>,4294967294,CSimpleArrayStandardCompareHelper<ComPtr<IGITCookieObject> > > &>(IObjectArray * *,CCoSimpleArray<ComPtr<IGITCookieObject>,4294967294,CSimpleArrayStandardCompareHelper<ComPtr<IGITCookieObject> > > &);
			long MakeAndInitialize<CGlobalRudeWindowManager,CGlobalRudeWindowManager,IRudeWindowWin32Functions * &>(CGlobalRudeWindowManager * *,IRudeWindowWin32Functions * &);
			long MakeAndInitialize<CHistoryItem,CHistoryItem,unsigned short (&)[260],_FILETIME &>(CHistoryItem * *,unsigned short (&)[260],_FILETIME &);
			long MakeAndInitialize<CHostExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CInputDialExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CNetworkExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CPenWorkspaceExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CPrivacyUIController,CPrivacyUIController,HWND__ * &,ILockScreenAppRunningNotifier * &>(CPrivacyUIController * *,HWND__ * &,ILockScreenAppRunningNotifier * &);
			long MakeAndInitialize<CQueryKnownGameList,CQueryKnownGameList,unsigned short const * &>(CQueryKnownGameList * *,unsigned short const * &);
			long MakeAndInitialize<CReadOnlyRandomAccessStream,CReadOnlyRandomAccessStream,Windows::Storage::Streams::IRandomAccessStream * &>(CReadOnlyRandomAccessStream * *,Windows::Storage::Streams::IRandomAccessStream * &);
			long MakeAndInitialize<CRudeWindowManager,CRudeWindowManager,IRudeWindowWin32Functions * &>(CRudeWindowManager * *,IRudeWindowWin32Functions * &);
			long MakeAndInitialize<CScreenshotStreamedFileDataRequestedHandler,Windows::Storage::IStreamedFileDataRequestedHandler,ComPtr<CRefCountedObject<CAutoHandle<HBITMAP__ *> > > &>(Windows::Storage::IStreamedFileDataRequestedHandler * *,ComPtr<CRefCountedObject<CAutoHandle<HBITMAP__ *> > > &);
			long MakeAndInitialize<CSearchPaneBrokerWrapper,CSearchPaneBrokerWrapper,ISearchControlBroker * &>(CSearchPaneBrokerWrapper * *,ISearchControlBroker * &);
			long MakeAndInitialize<CSessionManagerEventHandler,CSessionManagerEventHandler,HWND__ * &>(CSessionManagerEventHandler * *,HWND__ * &);
			long MakeAndInitialize<CSharePickerExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CSimpleQueryWithLinguisticAlternatives,IQueryWithLinguisticAlternatives,unsigned short const * &,unsigned int &,unsigned int &,unsigned short const * const * &,unsigned int &>(IQueryWithLinguisticAlternatives * *,unsigned short const * &,unsigned int &,unsigned int &,unsigned short const * const * &,unsigned int &);
			long MakeAndInitialize<CSoftLandingExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CSoftLandingUiaSearch,ISoftLandingUiaSearch,bool &>(ISoftLandingUiaSearch * *,bool &);
			long MakeAndInitialize<CSolidColorThumbnail,CSolidColorThumbnail,unsigned long &,tagSIZE const &,IDCompThumbnailParent * &,ISwitchThumbnailDeviceManager * &,ISwitchThumbnailFactory * &>(CSolidColorThumbnail * *,unsigned long &,tagSIZE const &,IDCompThumbnailParent * &,ISwitchThumbnailDeviceManager * &,ISwitchThumbnailFactory * &);
			long MakeAndInitialize<CTemplateDownloader::CTemplateCacheEntry,CTemplateDownloader::CTemplateCacheEntry,unsigned short const * &>(CTemplateDownloader::CTemplateCacheEntry * *,unsigned short const * &);
			long MakeAndInitialize<CTemplateDownloader::CTemplateCacheEntry,CTemplateDownloader::CTemplateCacheEntry,unsigned short const * const &>(CTemplateDownloader::CTemplateCacheEntry * *,unsigned short const * const &);
			long MakeAndInitialize<CTemplateFile,CTemplateFile,unsigned short (&)[260],_FILETIME &>(CTemplateFile * *,unsigned short (&)[260],_FILETIME &);
			long MakeAndInitialize<CTestExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CTrayBatteryFlyoutExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CTrayClockFlyoutExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CTrayMtcUvcFlyoutExperienceManager,IInspectable,IServiceProvider * &>(IInspectable * *,IServiceProvider * &);
			long MakeAndInitialize<CredentialResetHostAppManager,IHostAppManager,unsigned short const * &>(IHostAppManager * *,unsigned short const * &);
			long MakeAndInitialize<DesktopContactCardExperienceDelayedDataLoader,Windows::ApplicationModel::Contacts::Internal::IContactCardExperienceDelayedDataLoader,_GUID &>(Windows::ApplicationModel::Contacts::Internal::IContactCardExperienceDelayedDataLoader * *,_GUID &);
			long MakeAndInitialize<DevicesCharmProjectionManagerEventHandlerAdapter,IDevicesCharmProjectionManagerEventHandlerAdapter,IDevicesCharmProjectionManagerEventHandler * &>(IDevicesCharmProjectionManagerEventHandlerAdapter * *,IDevicesCharmProjectionManagerEventHandler * &);
			long MakeAndInitialize<EnterpriseChromeManager,EnterpriseChromeManager,IApplicationViewCollection * &,IImmersiveApplicationNotificationService * &>(EnterpriseChromeManager * *,IApplicationViewCollection * &,IImmersiveApplicationNotificationService * &);
			long MakeAndInitialize<EventTargetArray,EventTargetArray,unsigned __int64 &>(Details::EventTargetArray * *,unsigned __int64 &);
			long MakeAndInitialize<FacadeWindow,FacadeWindow,IImmersiveLauncher * &,IImmersiveMonitorNotificationService * &,ISwitchThumbnailDeviceManager * &>(FacadeWindow * *,IImmersiveLauncher * &,IImmersiveMonitorNotificationService * &,ISwitchThumbnailDeviceManager * &);
			long MakeAndInitialize<GammaFlashAsyncOperation,Windows::Foundation::IAsyncAction,float &,unsigned int &,unsigned int &>(Windows::Foundation::IAsyncAction * *,float &,unsigned int &,unsigned int &);
			long MakeAndInitialize<GlobalRudeWindowNotifications,GlobalRudeWindowNotifications,unsigned long &>(GlobalRudeWindowNotifications * *,unsigned long &);
			long MakeAndInitialize<HotkeyHandler,HotkeyHandler,IPriviledgedPositioner * &,ISnapAssistController * &,IImmersiveMonitorManager * &,IApplicationViewCollection * &,IImmersiveSettingsCache * &,ITabletModeController * &,IInputTracker * &>(HotkeyHandler * *,IPriviledgedPositioner * &,ISnapAssistController * &,IImmersiveMonitorManager * &,IApplicationViewCollection * &,IImmersiveSettingsCache * &,ITabletModeController * &,IInputTracker * &);
			long MakeAndInitialize<LauncherContract,LauncherContract,IShellTargetingContractManager * &,IImmersiveMonitorManager * &>(LauncherContract * *,IShellTargetingContractManager * &,IImmersiveMonitorManager * &);
			long MakeAndInitialize<MiracastConnectionEventHandlerAdapter,IMiracastConnectionEventHandlerAdapter,IMiracastConnectionEventHandler * &>(IMiracastConnectionEventHandlerAdapter * *,IMiracastConnectionEventHandler * &);
			long MakeAndInitialize<PenEventsAdapter,PenEventsAdapter,IClickNote * &>(PenEventsAdapter * *,IClickNote * &);
			long MakeAndInitialize<PenSignalSourceAdapter,PenSignalSourceAdapter,IPenSignalManager * &>(PenSignalSourceAdapter * *,IPenSignalManager * &);
			long MakeAndInitialize<ShellExperienceHelpers::Internal::ProxyModalWindow,ShellExperienceHelpers::Internal::ProxyModalWindow,HWND__ * &,HWND__ * &,IPrivilegedForegroundOperations * &>(ShellExperienceHelpers::Internal::ProxyModalWindow * *,HWND__ * &,HWND__ * &,IPrivilegedForegroundOperations * &);
			long MakeAndInitialize<StubImmersiveApplication,StubImmersiveApplication,unsigned short const * &>(StubImmersiveApplication * *,unsigned short const * &);
			long MakeAndInitialize<TouchpadGestureHandler,ITouchpadGestureHandler,ITouchpadSettingsManager * &>(ITouchpadGestureHandler * *,ITouchpadSettingsManager * &);
			long MakeAndInitialize<TouchpadGestureInputProvider,ITouchpadGestureInputProvider,ITouchpadGestureHandler * &>(ITouchpadGestureInputProvider * *,ITouchpadGestureHandler * &);
			long MakeAndInitialize<TouchpadKeyboardAction,TouchpadKeyboardAction,unsigned short &,unsigned short &>(TouchpadKeyboardAction * *,unsigned short &,unsigned short &);
			long MakeAndInitialize<WinRTInAppBackHandler,WinRTInAppBackHandler,IApplicationView * &,IInAppBackHandlerNotifications * &>(WinRTInAppBackHandler * *,IApplicationView * &,IInAppBackHandlerNotifications * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::AddContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::AddContactActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::CallActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::CallContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::ContactDisplayInformation,Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation,Windows::ApplicationModel::Contacts::IContact * &,Windows::ApplicationModel::Contacts::Internal::IContactsListManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &>(Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,Windows::ApplicationModel::Contacts::IContact * &,Windows::ApplicationModel::Contacts::Internal::IContactsListManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::EmailActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::EmailContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::MapActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,Windows::ApplicationModel::Contacts::IContactAddress * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,Windows::ApplicationModel::Contacts::IContactAddress * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::MapContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::MessageActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::MessageContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::PostActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::PostContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::VideoCallActionControlItem,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *,Windows::ApplicationModel::Contacts::IContact2 * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,HSTRING__ * &,IShellItem * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::VideoCallContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &);
			long MakeAndInitialize<Windows::ApplicationModel::Contacts::Internal::ViewContactActionControl,Windows::ApplicationModel::Contacts::Internal::IContactActionControl,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *,Windows::ApplicationModel::Contacts::IContact2 * &,Windows::ApplicationModel::Contacts::Internal::IContactPreferenceManager * &,Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * &,unsigned int * &);
			long MakeAndInitialize<Windows::Internal::Feedback::InternalFeedbackItem,Windows::Internal::Feedback::IFeedbackItem,unsigned short * &,unsigned short * &,unsigned short * &,unsigned short const * &>(Windows::Internal::Feedback::IFeedbackItem * *,unsigned short * &,unsigned short * &,unsigned short * &,unsigned short const * &);
			long MakeAndInitialize<Windows::Internal::PlatformExtensions::Details::ActivationFactoryContractRedirectorContext,Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirectorContext,Windows::Internal::ApplicationModel::WindowManagement::WindowId &>(Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirectorContext * *,Windows::Internal::ApplicationModel::WindowManagement::WindowId &);
			long MakeAndInitialize<Windows::Internal::UI::WindowsTip::CWindowsTipPresenter,Windows::Internal::UI::WindowsTip::CWindowsTipPresenter,unsigned short (&)[256],unsigned short (&)[256]>(Windows::Internal::UI::WindowsTip::CWindowsTipPresenter * *,unsigned short (&)[256],unsigned short (&)[256]);
			unsigned long SafeUnknownDecrementReference(long volatile &);
			unsigned long SafeUnknownIncrementReference(long volatile &);
			void RaiseException(long,unsigned long);
		};

		struct ErrorPropagationPolicyTraits<-1>
		{
			static long FireCompletionErrorPropagationPolicyFilter(long,IUnknown *,void *);
			static long FireProgressErrorPropagationPolicyFilter(long,IUnknown *,void *);
		};

		class EventSource<IDevicesCharmProjectionManagerEventHandlerAdapter,InvokeModeOptions<-2> >
		{
			long AddInternal(IDevicesCharmProjectionManagerEventHandlerAdapter *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<IImageDownloadedEventHandler,InvokeModeOptions<-2> >
		{
			long AddInternal(IImageDownloadedEventHandler *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<IMiracastConnectionEventHandlerAdapter,InvokeModeOptions<-2> >
		{
			long AddInternal(IMiracastConnectionEventHandlerAdapter *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<ISettingChangedEventHandler,InvokeModeOptions<-2> >
		{
			long AddInternal(ISettingChangedEventHandler *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> *,void *,EventRegistrationToken *);
		public:
			EventSource<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,InvokeModeOptions<-2> >();
			long InvokeAll<Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> *,Windows::Foundation::Collections::Internal::VectorChangedEventArgs *>(Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> *,Windows::Foundation::Collections::Internal::VectorChangedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> *,void *,EventRegistrationToken *);
		public:
			EventSource<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,InvokeModeOptions<-2> >();
			long InvokeAll<Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> *,Windows::Foundation::Collections::Internal::VectorChangedEventArgs *>(Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> *,Windows::Foundation::Collections::Internal::VectorChangedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::IEventHandler<IInspectable *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::IEventHandler<IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::IEventHandler<bool>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::IEventHandler<bool> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
			unsigned __int64 GetSize();
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<GamingOverlayExperienceManager *,unsigned __int64>(GamingOverlayExperienceManager *,unsigned __int64);
			long Remove(EventRegistrationToken);
			unsigned __int64 GetSize();
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::DevicePickerExperienceManager *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::DevicePickerExperienceManager *,IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::MiracastBannerExperienceManager *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::MiracastBannerExperienceManager *,IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::MiracastBannerExperienceManager *,Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::MiracastBannerExperienceManager *,Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<CMiracastBannerExperienceManager *,Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs *>(CMiracastBannerExperienceManager *,Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,InvokeModeOptions<2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs *>(Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs *>(Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IPickerClosingEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,IInspectable *>(Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,IInspectable *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs *>(Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,IInspectable *>(Windows::Storage::Pickers::Provider::IFileSavePickerUI *,IInspectable *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<Windows::Storage::Pickers::Provider::IFileSavePickerUI *,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs *>(Windows::Storage::Pickers::Provider::IFileSavePickerUI *,Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal *,IInspectable *>(Windows::Storage::Pickers::Provider::IFileSavePickerUIInternal *,IInspectable *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<Windows::Storage::Provider::ICachedFileUpdaterUI *,IInspectable *>(Windows::Storage::Provider::ICachedFileUpdaterUI *,IInspectable *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long InvokeAll<Windows::Storage::Provider::ICachedFileUpdaterUI *,Windows::Storage::Provider::IFileUpdateRequestedEventArgs *>(Windows::Storage::Provider::ICachedFileUpdaterUI *,Windows::Storage::Provider::IFileUpdateRequestedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class FtmBase
		{
		protected:
			long CanCastTo(_GUID const &,void * *);
		public:
			FtmBase();
			virtual long DisconnectObject(unsigned long);
			virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
			virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
			virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
			virtual long ReleaseMarshalData(IStream *);
			virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
		};

		struct Implements<RuntimeClassFlags<2>,ChainInterfaces<IApplicationViewArrangePosition,IApplicationViewPosition,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			Implements<RuntimeClassFlags<2>,ChainInterfaces<IApplicationViewArrangePosition,IApplicationViewPosition,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct Implements<RuntimeClassFlags<2>,ChainInterfaces<IOcclusionBasedApplicationViewPosition,IApplicationViewArrangePosition,IApplicationViewPosition,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			Implements<RuntimeClassFlags<2>,ChainInterfaces<IOcclusionBasedApplicationViewPosition,IApplicationViewArrangePosition,IApplicationViewPosition,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct Implements<RuntimeClassFlags<2>,CloakedIid<IMarshal> >
		{
			Implements<RuntimeClassFlags<2>,CloakedIid<IMarshal> >();
		};

		struct Implements<RuntimeClassFlags<2>,IApplicationViewPosition>
		{
			Implements<RuntimeClassFlags<2>,IApplicationViewPosition>();
		};

		struct Implements<RuntimeClassFlags<2>,IShareAndDevicesFlow>
		{
			Implements<RuntimeClassFlags<2>,IShareAndDevicesFlow>();
		};

		struct Implements<RuntimeClassFlags<2>,ISnapAssistController,ISnapAssistControllerPrivate,ISnapAssistCallback,ITabletModePositionerManagerNotification>
		{
			Implements<RuntimeClassFlags<2>,ISnapAssistController,ISnapAssistControllerPrivate,ISnapAssistCallback,ITabletModePositionerManagerNotification>();
		};

		struct Implements<RuntimeClassFlags<3>,Windows::UI::Xaml::Data::ICustomPropertyProvider,Windows::Internal::Storage::IPropertyValueProvider>
		{
			Implements<RuntimeClassFlags<3>,Windows::UI::Xaml::Data::ICustomPropertyProvider,Windows::Internal::Storage::IPropertyValueProvider>();
		};

		struct InvokeTraits<-2>
		{
			static long InvokeDelegates<<lambda_09bf7d7d0bc086876f9f2b74855529c0>,IMiracastConnectionEventHandlerAdapter>(<lambda_09bf7d7d0bc086876f9f2b74855529c0>,Details::EventTargetArray *,EventSource<IMiracastConnectionEventHandlerAdapter,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_0b937f45aaac78efe22176a92be0d322>,Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *> >(<lambda_0b937f45aaac78efe22176a92be0d322>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,IInspectable *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_134c7ee54383543c8691c506ce5ac503>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> >(<lambda_134c7ee54383543c8691c506ce5ac503>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_222140f75a5a5f0ef9b9e6c4d6932d72>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::DevicePickerExperienceManager *,IInspectable *> >(<lambda_222140f75a5a5f0ef9b9e6c4d6932d72>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::DevicePickerExperienceManager *,IInspectable *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_25a2d53a0298b91f776034d8fe936f99>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> >(<lambda_25a2d53a0298b91f776034d8fe936f99>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_3a86da2c12bbae6b290dd4c01aa46130>,Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *> >(<lambda_3a86da2c12bbae6b290dd4c01aa46130>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen *,IInspectable *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_42703ad3f302b51f6f9a9cd810cc3948>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *> >(<lambda_42703ad3f302b51f6f9a9cd810cc3948>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI *,Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_4300a0af75e426cab92d4b8994f8f832>,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >(<lambda_4300a0af75e426cab92d4b8994f8f832>,Details::EventTargetArray *,EventSource<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_5bad12cba11c8b5ec9164e3b9429c504>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::MiracastBannerExperienceManager *,IInspectable *> >(<lambda_5bad12cba11c8b5ec9164e3b9429c504>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::MiracastBannerExperienceManager *,IInspectable *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_711cfe15ed54ea34d99034a09f3f6f62>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> >(<lambda_711cfe15ed54ea34d99034a09f3f6f62>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_77d5ba16b20b58821286c6c6b58f9c54>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> >(<lambda_77d5ba16b20b58821286c6c6b58f9c54>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUIInternal *,Windows::Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_93d93902fd43ab86681859cb4195d9d9>,Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64> >(<lambda_93d93902fd43ab86681859cb4195d9d9>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,unsigned __int64>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_9479ec71047e0e0cee15a2154a73106e>,Windows::Foundation::IEventHandler<bool> >(<lambda_9479ec71047e0e0cee15a2154a73106e>,Details::EventTargetArray *,EventSource<Windows::Foundation::IEventHandler<bool>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_9671bc13491e85225722c2737820f279>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> >(<lambda_9671bc13491e85225722c2737820f279>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_b12f3348e8aa97fa33836fe6e5d3296a>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::MiracastBannerExperienceManager *,Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs *> >(<lambda_b12f3348e8aa97fa33836fe6e5d3296a>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::MiracastBannerExperienceManager *,Windows::Internal::Shell::Experience::IMiracastBannerResizeEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_b195fd7cddfa82693bf48bddb45f6f45>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *> >(<lambda_b195fd7cddfa82693bf48bddb45f6f45>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,IInspectable *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_b8def742a2ebc01196e8ce85b8434212>,Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int> >(<lambda_b8def742a2ebc01196e8ce85b8434212>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,int>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_ddba857c2699c8164c1de96d8e1bd5ae>,IImageDownloadedEventHandler>(<lambda_ddba857c2699c8164c1de96d8e1bd5ae>,Details::EventTargetArray *,EventSource<IImageDownloadedEventHandler,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_e187471f047f749b0e4ec133a7dff413>,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >(<lambda_e187471f047f749b0e4ec133a7dff413>,Details::EventTargetArray *,EventSource<Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_e22f132df44eaa9b48cc06bafcd715c7>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *> >(<lambda_e22f132df44eaa9b48cc06bafcd715c7>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::PickerClosingEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_efc2a3956baf6393a3371479a4da9bd4>,IDevicesCharmProjectionManagerEventHandlerAdapter>(<lambda_efc2a3956baf6393a3371479a4da9bd4>,Details::EventTargetArray *,EventSource<IDevicesCharmProjectionManagerEventHandlerAdapter,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_f17bd68757ebe58b18969d312dddb646>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *> >(<lambda_f17bd68757ebe58b18969d312dddb646>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI *,Windows::Storage::Provider::FileUpdateRequestedEventArgs *>,InvokeModeOptions<-2> > *);
			static long InvokeDelegates<<lambda_f1e8b261e0548af5cc3083418fa4ec6e>,ISettingChangedEventHandler>(<lambda_f1e8b261e0548af5cc3083418fa4ec6e>,Details::EventTargetArray *,EventSource<ISettingChangedEventHandler,InvokeModeOptions<-2> > *);
		};

		struct InvokeTraits<2>
		{
			static long InvokeDelegates<<lambda_3eacb20c151e496351201ea89fcb335d>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> >(<lambda_3eacb20c151e496351201ea89fcb335d>,Details::EventTargetArray *,EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,InvokeModeOptions<2> > *);
			static long InvokeDelegates<<lambda_ccb555f5b2801385208de38e541edff1>,Windows::Foundation::IEventHandler<IInspectable *> >(<lambda_ccb555f5b2801385208de38e541edff1>,Details::EventTargetArray *,EventSource<Windows::Foundation::IEventHandler<IInspectable *>,InvokeModeOptions<2> > *);
		};

		class Module<1,Details::DefaultModule<1> >
		{
			static bool StaticInitialize();
			static bool isInitialized;
		protected:
			static _RTL_RUN_ONCE initOnceInProc_;
		public:
			static Details::DefaultModule<1> & Create();
			virtual long RegisterCOMObject(unsigned short const *,_GUID *,IClassFactory * *,unsigned long *,unsigned int);
			virtual long RegisterWinRTObject(unsigned short const *,unsigned short const * *,<unnamed-type-RO_REGISTRATION_COOKIE> * *,unsigned int);
			virtual long UnregisterCOMObject(unsigned short const *,unsigned long *,unsigned int);
			virtual long UnregisterWinRTObject(unsigned short const *,<unnamed-type-RO_REGISTRATION_COOKIE> *);
			virtual unsigned long DecrementObjectCount();
			virtual unsigned long IncrementObjectCount();
			virtual ~Module<1,Details::DefaultModule<1> >();
		};

		class Module<1,Details::DefaultModule<5> >
		{
			static bool StaticInitialize();
			static bool isInitialized;
		protected:
			static _RTL_RUN_ONCE initOnceInProc_;
		public:
			static Details::DefaultModule<5> & Create();
			virtual long RegisterCOMObject(unsigned short const *,_GUID *,IClassFactory * *,unsigned long *,unsigned int);
			virtual long RegisterWinRTObject(unsigned short const *,unsigned short const * *,<unnamed-type-RO_REGISTRATION_COOKIE> * *,unsigned int);
			virtual long UnregisterCOMObject(unsigned short const *,unsigned long *,unsigned int);
			virtual long UnregisterWinRTObject(unsigned short const *,<unnamed-type-RO_REGISTRATION_COOKIE> *);
			virtual unsigned long DecrementObjectCount();
			virtual unsigned long IncrementObjectCount();
			virtual ~Module<1,Details::DefaultModule<5> >();
		};

		struct RuntimeClass<CActivatedEventArgsBase,Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
		{
			RuntimeClass<CActivatedEventArgsBase,Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >();
		};

		struct RuntimeClass<CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
		{
			RuntimeClass<CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >();
		};

		struct RuntimeClass<CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >
		{
			RuntimeClass<CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs,Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2,Windows::Foundation::Private::IComponentUIPrivateActivatedEventArgs,Implements<RuntimeClassFlags<2>,CloakedIid<IApplicationViewDataProvider> > >();
		};

		struct RuntimeClass<CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >
		{
			RuntimeClass<CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >();
			virtual ~RuntimeClass<CActivatedEventArgsWithPrelaunchAndViewIdBase,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet> >();
		};

		struct RuntimeClass<CActivatedEventArgsWithViewIdBase,Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs>
		{
			RuntimeClass<CActivatedEventArgsWithViewIdBase,Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs>();
		};

		struct RuntimeClass<CFilePicker,Windows::Storage::Pickers::ICachedFileUpdateManager>
		{
			RuntimeClass<CFilePicker,Windows::Storage::Pickers::ICachedFileUpdateManager>();
		};

		struct RuntimeClass<CValidatingVector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> > >
		{
			RuntimeClass<CValidatingVector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> > >();
		};

		struct RuntimeClass<IInspectable>
		{
			RuntimeClass<IInspectable>();
		};

		struct RuntimeClass<MixIn<CFileOpenPickerUI,CFileOpenPickerUIBase,1> >
		{
			virtual ~RuntimeClass<MixIn<CFileOpenPickerUI,CFileOpenPickerUIBase,1> >();
		};

		struct RuntimeClass<MixIn<CFileOpenPickerUIInternal,CFileOpenPickerUIBase,1>,Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal,CloakedIid<IHostedViewEventSink> >
		{
			virtual ~RuntimeClass<MixIn<CFileOpenPickerUIInternal,CFileOpenPickerUIBase,1>,Windows::Storage::Pickers::Provider::IFileOpenPickerUIInternal,CloakedIid<IHostedViewEventSink> >();
		};

		struct RuntimeClass<RuntimeClassFlags<1>,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionActivatedArgs,CActivatedEventArgsWithViewIdBase>
		{
			RuntimeClass<RuntimeClassFlags<1>,Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,Windows::Internal::AddFolderSuggestion::IAddFolderSuggestionActivatedArgs,CActivatedEventArgsWithViewIdBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CCommonApplicationViewArrangePositionImpl,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CCommonApplicationViewArrangePositionImpl,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CCommonApplicationViewOcclusionPositionImpl,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CCommonApplicationViewOcclusionPositionImpl,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CDCompAbstractThumbnail>
		{
			RuntimeClass<RuntimeClassFlags<2>,CDCompAbstractThumbnail>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponent,IInputHostLayoutChanges,IImmersiveShellHookNotification,ITabletModeChangeListener>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponent,IInputHostLayoutChanges,IImmersiveShellHookNotification,ITabletModeChangeListener>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<IRudeWindowManagerPriv,IRudeWindowManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<IRudeWindowManagerPriv,IRudeWindowManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ChainInterfaces<IRudeWindowManagerPriv,IRudeWindowManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationChromeControls>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationChromeControls>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationPreLaunch,IImmersiveApplicationNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationPreLaunch,IImmersiveApplicationNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationTargetingTracker,ISyncIAMEventHandler>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationTargetingTracker,ISyncIAMEventHandler>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationViewCompatibilityManager,IApplicationViewChangeListener,IImmersiveMonitorNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationViewCompatibilityManager,IApplicationViewChangeListener,IImmersiveMonitorNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationViewCompatiblityNotification,IOverrideScaling>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IApplicationViewCompatiblityNotification,IOverrideScaling>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IImmersiveApplicationNotification,IImmersiveAppCrusherNotification,IHostedApplicationNotification,IBackStackApplicationNotification,IImmersiveSessionIdleNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IImmersiveApplicationNotification,IImmersiveAppCrusherNotification,IHostedApplicationNotification,IBackStackApplicationNotification,IImmersiveSessionIdleNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IImmersiveShellHookNotification,IImmersiveMonitorNotification,IBamThrottleSettings>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IRetailDemoHost>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase,IRetailDemoHost>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IClickNote,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IClickNote,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IComponentUIPluginInternal,IComponentUIPlugin,IRetrieveViewCUIEventHandle,IComponentUIPlugin_CompositionIslands,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IComponentUIPluginInternal,IComponentUIPlugin,IRetrieveViewCUIEventHandle,IComponentUIPlugin_CompositionIslands,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IComponentUIPluginInternal,IComponentUIPlugin,IRetrieveViewCUIEventHandle,IComponentUIPlugin_CompositionIslands,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IDialogManager,IPrivilegedOperationsConsumer,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IDialogManager,IPrivilegedOperationsConsumer,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IEDPNotificationHost,IEnterpriseIdChangeNotificationProvider,IPopupCommandHandler>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IEDPNotificationHost,IEnterpriseIdChangeNotificationProvider,IPopupCommandHandler>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveAppCrusherNotification,IMsaWindowManager,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveAppCrusherNotification,IMsaWindowManager,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveSettingsCache,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveSettingsCache,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageService,IObjectWithWindow,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageService,IObjectWithWindow,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageService,IObjectWithWindow,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IInkWorkspaceHostedAppsManager,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IInkWorkspaceHostedAppsManager,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IInkWorkspaceHostedAppsManager,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IPenSignalManager,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IPenSignalManager,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IQuietHoursPolicy,IImmersiveWindowMessageNotification,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IQuietHoursPolicy,IImmersiveWindowMessageNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ISharePlatformHost,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ISharePlatformHost,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IShellDropTarget,IDropOperationTargetPriv,IReentrancyModelProvider,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IShellDropTarget,IDropOperationTargetPriv,IReentrancyModelProvider,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IShellTargetingTracker,IShellTargetingContractManager,IApplicationViewChangeListener,IShellTargetingTrackerPrivate,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,IShellTargetingTracker,IShellTargetingContractManager,IApplicationViewChangeListener,IShellTargetingTrackerPrivate,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ITabletModeController,ITabletModeController2,ITabletModeControllerPriv,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ITabletModeController,ITabletModeController2,ITabletModeControllerPriv,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,ITabletModeController,ITabletModeController2,ITabletModeControllerPriv,IImmersiveWindowMessageNotification,IImmersiveMonitorNotification,IImmersiveSessionIdleNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,IConnectedSearchLogger,IConnectedSearchLogger2,IConnectedSearchContextManager,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache>,Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithGITSite,Implements<RuntimeClassFlags<2>,IConnectedSearchLogger,IConnectedSearchLogger2,IConnectedSearchContextManager,IConnectedSearchAuthManager,IConnectedSearchSettingsManager,IConnectedSearchTemplateDownloader,IConnectedSearchImageDownloader,IConnectedSearchZeroInputCache>,Implements<RuntimeClassFlags<2>,IIdentityAdvise,Windows::Networking::Connectivity::INetworkStatusChangedEventHandler,IImageDownloadedEventHandler>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ICompactOverlayPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IShellPositionerViewHandoff,ICompactOverlayPositionerTest>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ICompactOverlayPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IShellPositionerViewHandoff,ICompactOverlayPositionerTest>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ICompactOverlayPositioner,IBasicPositioner,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IShellPositionerViewHandoff,ICompactOverlayPositionerTest>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<IGlobalRudeWindowManagerPriv,IGlobalRudeWindowManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,IDesktopVisibilityChangesNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<IGlobalRudeWindowManagerPriv,IGlobalRudeWindowManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,IDesktopVisibilityChangesNotification>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<IGlobalRudeWindowManagerPriv,IGlobalRudeWindowManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveShellHookNotification,IImmersiveMonitorNotification,VirtualDesktopNotificationBase<IVirtualDesktopNotification>,IDesktopVisibilityChangesNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<IImmersiveBackstackManagerPriv,IImmersiveBackstackManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveBackstackSettings,IImmersiveApplicationNotification,IAppSwitcherNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<IImmersiveBackstackManagerPriv,IImmersiveBackstackManager,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveBackstackSettings,IImmersiveApplicationNotification,IAppSwitcherNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ISwitchThumbnailDeviceManager,IDCompBatcher,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ChainInterfaces<ISwitchThumbnailDeviceManager,IDCompBatcher,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IBackComponentService,IInAppBackHandlerNotifications,ITabletModeChangeListener,IApplicationViewChangeListener,IShellTargetingChangeNotification,ITabletModePositionerManagerNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IBackComponentService,IInAppBackHandlerNotifications,ITabletModeChangeListener,IApplicationViewChangeListener,IShellTargetingChangeNotification,ITabletModePositionerManagerNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IClassFactory>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IClassFactory>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ICompactOverlayManager,IImmersiveMonitorNotification,IApplicationViewChangeListener,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ICompactOverlayManager,IImmersiveMonitorNotification,IApplicationViewChangeListener,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ICompactOverlayManager,IImmersiveMonitorNotification,IApplicationViewChangeListener,IImmersiveShellHookNotification,IMultitaskingViewVisibilityNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IEnterpriseChromeServiceProvider>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IEnterpriseChromeServiceProvider>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IEnterpriseChromeServiceProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IFeedbackHubAppInfo>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IFeedbackHubAppInfo>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveLayoutClient,IImmersiveMonitorNotification,IAccessibilityDockingServiceInternal,IImmersiveShellHookNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveLayoutClient,IImmersiveMonitorNotification,IAccessibilityDockingServiceInternal,IImmersiveShellHookNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveMonitorNotification,IDesktopVisibilityChangesNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveMonitorNotification,IDesktopVisibilityChangesNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveMonitorNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IAudioFlyoutController>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveMonitorNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IAudioFlyoutController>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveSessionIdleDetector,IImmersiveWindowMessageNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveSessionIdleDetector,IImmersiveWindowMessageNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveShellHookNotification,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveSystemModeNotification,IImmersiveLayoutChanges,IFullScreenPositionerNotification,IRudeWindowManagerEvents,Implements<RuntimeClassFlags<2>,IEdgeUiManager,IEdgeUiManagerInternal,IEdgeUiInputCallback,ITabletModeChangeListener> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveShellHookNotification,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveSystemModeNotification,IImmersiveLayoutChanges,IFullScreenPositionerNotification,IRudeWindowManagerEvents,Implements<RuntimeClassFlags<2>,IEdgeUiManager,IEdgeUiManagerInternal,IEdgeUiInputCallback,ITabletModeChangeListener> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveWindowMessageNotification,IEdgeUiDeviceManager,IEdgeUiDeviceManagerInternal>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveWindowMessageNotification,IEdgeUiDeviceManager,IEdgeUiDeviceManagerInternal>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveWindowMessageNotification,IImmersiveIconicBitmap,IImmersiveBackstackNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IImmersiveWindowMessageNotification,IImmersiveIconicBitmap,IImmersiveBackstackNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IInitializeTrustedComponentForegroundControl,ISnapComponent,IPriviledgedPositioner,IWindowManagementArrangementEvents>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IInitializeTrustedComponentForegroundControl,ISnapComponent,IPriviledgedPositioner,IWindowManagementArrangementEvents>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IInitializeTrustedComponentForegroundControl,IWindowManagementEvents>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,IInitializeTrustedComponentForegroundControl,IWindowManagementEvents>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ILauncherTipContextMenu,ILauncherTipContextMenuSettingChangeListener>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ILauncherTipContextMenu,ILauncherTipContextMenuSettingChangeListener>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ISettingsFlow>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ISettingsFlow>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ISyncIAMEventHandler,IActiveZBandNotificationForMonitorService>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ISyncIAMEventHandler,IActiveZBandNotificationForMonitorService>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ITransitionCoordinator,ITabletModeChangeListener,ITimerCallback>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,ITransitionCoordinator,ITabletModeChangeListener,ITimerCallback>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,Implements<RuntimeClassFlags<2>,IGameFocusEvents,IRudeWindowManagerEvents,IImmersiveMonitorNotification> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,Implements<RuntimeClassFlags<2>,IGameFocusEvents,IRudeWindowManagerEvents,IImmersiveMonitorNotification> >();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,Implements<RuntimeClassFlags<2>,IGameFocusEvents,IRudeWindowManagerEvents,IImmersiveMonitorNotification> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,Implements<RuntimeClassFlags<2>,IImmersiveRawInputProvider,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> >
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite,Implements<RuntimeClassFlags<2>,IImmersiveRawInputProvider,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite>
		{
			RuntimeClass<RuntimeClassFlags<2>,CImmersiveShellComponentWithSite>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CLockScreenApplicationManagerBase,ILockScreenContentionFlyout>
		{
			RuntimeClass<RuntimeClassFlags<2>,CLockScreenApplicationManagerBase,ILockScreenContentionFlyout>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CSnapAssistControllerBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CSnapAssistControllerBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLExecuteCommandBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLExecuteCommandBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,IServiceProvider,IApplicationIdentityInfo,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,IServiceProvider,IApplicationIdentityInfo,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,IServiceProvider,ILaunchSourceViewSizePreference,ILaunchSourceAppUserModelId,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,IServiceProvider,ILaunchSourceViewSizePreference,ILaunchSourceAppUserModelId,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,IServiceProvider,ILaunchTargetViewSizePreference,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,IServiceProvider,ILaunchTargetViewSizePreference,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,IServiceProvider,IShouldSwitchToDesktop,ILayoutPreferencesOnAppLaunch,IExecuteCommandHost,ILocalCopyDownloadSettings,IWakeOnRPCCalls,ILaunchTargetMonitor,IUpdateViewValueSet,ILaunchUIContextProvider,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithGITSite,IServiceProvider,IShouldSwitchToDesktop,ILayoutPreferencesOnAppLaunch,IExecuteCommandHost,ILocalCopyDownloadSettings,IWakeOnRPCCalls,ILaunchTargetMonitor,IUpdateViewValueSet,ILaunchUIContextProvider,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,IEdgeUiInput,IEdgeUiInputHintHost,IDropTarget,IImmersiveRawInputMouseNotification,IImmersiveRawInputKeyboardNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,IEdgeUiInput,IEdgeUiInputHintHost,IDropTarget,IImmersiveRawInputMouseNotification,IImmersiveRawInputKeyboardNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,IImmersiveOpenWithUI,IServiceProvider>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,IImmersiveOpenWithUI,IServiceProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,ILockScreenCallBroker,ILockScreenCallBrokerPriv,IImmersiveApplicationNotification,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges>
		{
			RuntimeClass<RuntimeClassFlags<2>,CWRLObjectWithSite,ILockScreenCallBroker,ILockScreenCallBrokerPriv,IImmersiveApplicationNotification,IImmersiveMonitorNotification,IImmersiveWindowMessageNotification,IImmersiveLayoutChanges>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IActivationErrorPopupFactory>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IActivationErrorPopupFactory>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IApplicationDataPersistence,IApplicationPositionPersistence,IApplicationWindowSizingPersistence>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IApplicationDataPersistence,IApplicationPositionPersistence,IApplicationWindowSizingPersistence>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IImmersiveMonitorNotificationService,IImmersiveMonitorNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IImmersiveMonitorNotificationService,IImmersiveMonitorNotification>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IImmersiveMonitorNotificationService,IImmersiveMonitorNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IInputHostLayout,IInputHostManager>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IInputHostLayout,IInputHostManager>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,INotesManager,IApplicationFrameEventHandler,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification,IImmersiveLayoutChanges,IApplicationStateChangeHandler,IPrivilegedOperationsConsumer>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,INotesManager,IApplicationFrameEventHandler,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification,IImmersiveLayoutChanges,IApplicationStateChangeHandler,IPrivilegedOperationsConsumer>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,INotesManager,IApplicationFrameEventHandler,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification,IImmersiveLayoutChanges,IApplicationStateChangeHandler,IPrivilegedOperationsConsumer>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IRemoteAppBrokerFactory>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IPrivilegedOperationsConsumer,IRemoteAppBrokerFactory>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IProjectionManager,IImmersiveMonitorNotification,IAppSwitcherNotification,IImmersiveApplicationNotification>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CImmersiveShellComponentWithGITSite,IProjectionManager,IImmersiveMonitorNotification,IAppSwitcherNotification,IImmersiveApplicationNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,ChainInterfaces<IImmersiveMonitorInternal,IImmersiveMonitor,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<AgileProfferServiceImpl,IProfferService,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IServiceProvider>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,ChainInterfaces<IImmersiveMonitorInternal,IImmersiveMonitor,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<AgileProfferServiceImpl,IProfferService,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IServiceProvider>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,ChainInterfaces<IImmersiveMonitorInternal,IImmersiveMonitor,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ChainInterfaces<AgileProfferServiceImpl,IProfferService,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IServiceProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,IServiceProvider,ChainInterfaces<IInternalImmersiveLayout,IImmersiveLayout,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveLayoutSyncRegistration,IImmersiveShellComponent,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,IServiceProvider,ChainInterfaces<IInternalImmersiveLayout,IImmersiveLayout,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IImmersiveLayoutSyncRegistration,IImmersiveShellComponent,ChainInterfaces<IImmersiveMonitorNotificationSync,IImmersiveMonitorNotification,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,IServiceProvider,IImmersiveMonitorNotificationService,IImmersiveShellComponent,IImmersiveMonitorManager,IImmersiveMonitorManagerInternal,IImmersiveShellHookNotification,Implements<RuntimeClassFlags<2>,IImmersiveWindowMessageNotification,IImmersiveSystemModeNotification,IImmersiveLauncherVisibilityListener> >
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,IServiceProvider,IImmersiveMonitorNotificationService,IImmersiveShellComponent,IImmersiveMonitorManager,IImmersiveMonitorManagerInternal,IImmersiveShellHookNotification,Implements<RuntimeClassFlags<2>,IImmersiveWindowMessageNotification,IImmersiveSystemModeNotification,IImmersiveLauncherVisibilityListener> >();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,FtmBase,CWRLObjectWithGITSite,IServiceProvider,IImmersiveMonitorNotificationService,IImmersiveShellComponent,IImmersiveMonitorManager,IImmersiveMonitorManagerInternal,IImmersiveShellHookNotification,Implements<RuntimeClassFlags<2>,IImmersiveWindowMessageNotification,IImmersiveSystemModeNotification,IImmersiveLauncherVisibilityListener> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,IDesktopNotificationActivator,CImmersiveShellComponentWithGITSite>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,IDesktopNotificationActivator,CImmersiveShellComponentWithGITSite>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,IMultitaskingViewTaskCallback>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,IMultitaskingViewTaskCallback>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,IObjectArray>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,IObjectArray>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase,ISettingsProvider>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase,ISettingsProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IActionSpaceFlow,IApplicationInvocableFlow,IDevicesFlow,IDevicesFlowProvider,CFlowBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IActionSpaceFlow,IApplicationInvocableFlow,IDevicesFlow,IDevicesFlowProvider,CFlowBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IActionSpaceFlow,IApplicationInvocableFlow,IWakeUpOnTaskCompletion,CFlowBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IActionSpaceFlow,IApplicationInvocableFlow,IWakeUpOnTaskCompletion,CFlowBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IAsyncCallback,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IAsyncCallback,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IAsyncCallback>
		{
			RuntimeClass<RuntimeClassFlags<2>,IAsyncCallback>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IAudioSessionEvents,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IAudioSessionEvents,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IAvailableMiracastDeviceEnumerator,IDeviceElementSourceSink,IMiracastDeviceChallengeListener,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IAvailableMiracastDeviceEnumerator,IDeviceElementSourceSink,IMiracastDeviceChallengeListener,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IBadgeWindowPositionCache>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IBadgeWindowPositionCache>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IDCompositionAnimation>
		{
			RuntimeClass<RuntimeClassFlags<2>,IDCompositionAnimation>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IDataTransferBrokerFetchHandler>
		{
			RuntimeClass<RuntimeClassFlags<2>,IDataTransferBrokerFetchHandler>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IDevicesCharmProjectionManagerEventHandlerAdapter,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IDevicesCharmProjectionManagerEventHandlerAdapter,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IDevicesCharmUISession,IShareAndDevicesFlow,IPopupEventHandler,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IDevicesCharmUISession,IShareAndDevicesFlow,IPopupEventHandler,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IEnterpriseChromeManager,IEnterpriseChromeManagerInternal,IApplicationViewChangeListener,IImmersiveApplicationNotification>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IEnterpriseChromeManager,IEnterpriseChromeManagerInternal,IApplicationViewChangeListener,IImmersiveApplicationNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IFileUpdateResult>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IFileUpdateResult>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IGestureProvider,WrlIDuiBehaviorImpl>
		{
			RuntimeClass<RuntimeClassFlags<2>,IGestureProvider,WrlIDuiBehaviorImpl>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IGlobalRudeWindowNotificationService,IGlobalRudeWindowNotifications,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IGlobalRudeWindowNotificationService,IGlobalRudeWindowNotifications,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IImmersiveAppCrusher,IImmersiveAppCrusherPriv,CImmersiveShellComponentWithSite>
		{
			RuntimeClass<RuntimeClassFlags<2>,IImmersiveAppCrusher,IImmersiveAppCrusherPriv,CImmersiveShellComponentWithSite>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IImmersiveApplicationNotification,ILockScreenAppRunningCallback,IDesktopVisibilityChangesNotification,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IImmersiveApplicationNotification,ILockScreenAppRunningCallback,IDesktopVisibilityChangesNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IImmersiveShellHookService,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IImmersiveShellHookService,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IImmersiveWindowMessageNotificationInternal>
		{
			RuntimeClass<RuntimeClassFlags<2>,IImmersiveWindowMessageNotificationInternal>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IImmersiveWindowMessageNotificationInternal>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IIsGameManager>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IIsGameManager>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IItemTileFactory,IExtensionListTileFactory,ISimpleTileFactory>
		{
			RuntimeClass<RuntimeClassFlags<2>,IItemTileFactory,IExtensionListTileFactory,ISimpleTileFactory>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ILambda>
		{
			RuntimeClass<RuntimeClassFlags<2>,ILambda>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IMiracastConnectionEventHandlerAdapter,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IMiracastConnectionEventHandlerAdapter,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,INotificationActivationCallback>
		{
			RuntimeClass<RuntimeClassFlags<2>,INotificationActivationCallback>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IPopupCommand>
		{
			RuntimeClass<RuntimeClassFlags<2>,IPopupCommand>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IPopupCommandHandler>
		{
			RuntimeClass<RuntimeClassFlags<2>,IPopupCommandHandler>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IPopupEventHandler>
		{
			RuntimeClass<RuntimeClassFlags<2>,IPopupEventHandler>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IProjectCharmSession,IDevicesCharmProjectionManagerEventHandler,IAvailableMiracastDeviceEnumeratorListener,IDeviceUninstallerListener,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,IProjectCharmSession,IDevicesCharmProjectionManagerEventHandler,IAvailableMiracastDeviceEnumeratorListener,IDeviceUninstallerListener,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ISearchServicesProvider,CImmersiveShellComponentWithSite>
		{
			RuntimeClass<RuntimeClassFlags<2>,ISearchServicesProvider,CImmersiveShellComponentWithSite>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ISettingsProvider>
		{
			RuntimeClass<RuntimeClassFlags<2>,ISettingsProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ISplashScreenTimer,ISplashScreenTimerExtra>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,ISplashScreenTimer,ISplashScreenTimerExtra>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ISplashScreenUI,IDuiElementProvider>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,ISplashScreenUI,IDuiElementProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ITouchpadAction>
		{
			RuntimeClass<RuntimeClassFlags<2>,ITouchpadAction>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IUIAnimationVariableCurveChangeHandler2,IUIAnimationVariableOffset>
		{
			RuntimeClass<RuntimeClassFlags<2>,IUIAnimationVariableCurveChangeHandler2,IUIAnimationVariableOffset>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IUIAutomationPropertyChangedEventHandler,IUIAutomationStructureChangedEventHandler,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,IUIAutomationPropertyChangedEventHandler,IUIAutomationStructureChangedEventHandler,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastDismissedEventArgs *>,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,Windows::UI::Notifications::ToastFailedEventArgs *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IUnknown>
		{
			RuntimeClass<RuntimeClassFlags<2>,IUnknown>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,IBroadcastDVRComponent,IBroadcastDVRCommand,CImmersiveShellComponentWithGITSite,IImmersiveApplicationNotification,IApplicationViewChangeListener,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>,Implements<RuntimeClassFlags<2>,IImmersiveShellHookNotification,IGameBarWatchDogCallback,IPrivilegedOperationsConsumer,IGameFocusNotificationService,FtmBase> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,IBroadcastDVRComponent,IBroadcastDVRCommand,CImmersiveShellComponentWithGITSite,IImmersiveApplicationNotification,IApplicationViewChangeListener,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>,Implements<RuntimeClassFlags<2>,IImmersiveShellHookNotification,IGameBarWatchDogCallback,IPrivilegedOperationsConsumer,IGameFocusNotificationService,FtmBase> >();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,IBroadcastDVRComponent,IBroadcastDVRCommand,CImmersiveShellComponentWithGITSite,IImmersiveApplicationNotification,IApplicationViewChangeListener,IImmersiveWindowMessageNotification,IImmersiveSessionIdleNotification>,Implements<RuntimeClassFlags<2>,IImmersiveShellHookNotification,IGameBarWatchDogCallback,IPrivilegedOperationsConsumer,IGameFocusNotificationService,FtmBase> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,IFilePickerInternal,IShellItemFilter,IFileDialogEvents,ICompositionManager,ICachedFileUpdaterHost>,CPickerController>
		{
			RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,IFilePickerInternal,IShellItemFilter,IFileDialogEvents,ICompositionManager,ICachedFileUpdaterHost>,CPickerController>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,IFilePickerInternal,IShellItemFilter,IFileDialogEvents,ICompositionManager,ICachedFileUpdaterHost>,CPickerController>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<IInspectable *>,IUnknown> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<IInspectable *>,IUnknown> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<bool>,FtmBase> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Implements<RuntimeClassFlags<2>,Windows::Foundation::IEventHandler<bool>,FtmBase> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ShellExperienceHelpers::Internal::IProxyModalWindow,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,ShellExperienceHelpers::Internal::IProxyModalWindow,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,FtmBaseEnableIfAgile<1> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,FtmBaseEnableIfAgile<1> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,FtmBaseEnableIfAgile<1> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::Collections::VectorChangedEventHandler<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,FtmBaseEnableIfAgile<1> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncActionCompletedHandler,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncActionCompletedHandler,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::IComPoolTask>
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::IComPoolTask>();
			virtual ~RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::IComPoolTask>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::UI::Popups::IUICommandInvokedHandler>
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::UI::Popups::IUICommandInvokedHandler>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,WrlIDuiBehaviorImpl,IDirectManipulationViewportEventHandler,IGestureProvider>
		{
			RuntimeClass<RuntimeClassFlags<2>,WrlIDuiBehaviorImpl,IDirectManipulationViewportEventHandler,IGestureProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,WrlIDuiBehaviorImpl,IGestureClient>
		{
			RuntimeClass<RuntimeClassFlags<2>,WrlIDuiBehaviorImpl,IGestureClient>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs,Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>
		{
			RuntimeClass<RuntimeClassFlags<3>,CActivatedEventArgsBase,Windows::ApplicationModel::Activation::IContactActivatedEventArgs,Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IHostedApplicationExperienceManager,IImmersiveWindowMessageNotification,IHostedApplicationExperienceRecoveryInterop,IPrivilegedOperationsConsumer,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IHostedApplicationExperienceManager,IImmersiveWindowMessageNotification,IHostedApplicationExperienceRecoveryInterop,IPrivilegedOperationsConsumer,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IHostedApplicationExperienceManager,IImmersiveWindowMessageNotification,IHostedApplicationExperienceRecoveryInterop,IPrivilegedOperationsConsumer,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,SttInternal::ISttExperienceManager,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,SttInternal::ISttExperienceManager,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager,IPrivilegedOperationsConsumer,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager,IPrivilegedOperationsConsumer,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,IImmersiveLayoutChanges,Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager,IPrivilegedOperationsConsumer,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::Experience::IShellExperienceManagerFactory>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager,IPrivilegedOperationsConsumer,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveSessionIdleNotification,Windows::Shell::ModalExperienceHelpers::IDesktopModalExperiencePreparation,Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler,IHolographicViewTransitionNotification,IImmersiveShellHookNotification,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager,IPrivilegedOperationsConsumer,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveSessionIdleNotification,Windows::Shell::ModalExperienceHelpers::IDesktopModalExperiencePreparation,Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler,IHolographicViewTransitionNotification,IImmersiveShellHookNotification,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager,IPrivilegedOperationsConsumer,IApplicationFrameEventHandler,IImmersiveLayoutChanges,IImmersiveSessionIdleNotification,Windows::Shell::ModalExperienceHelpers::IDesktopModalExperiencePreparation,Windows::Shell::ModalExperienceHelpers::IDependentExperienceHandler,IHolographicViewTransitionNotification,IImmersiveShellHookNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,CImmersiveWindowFactoryBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,CImmersiveWindowFactoryBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,ChainInterfaces<IHostedApplicationBridgeWindow,IHostedApplicationFrameWindow,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IInspectable,IObjectWithWindow,CWRLObjectWithSite,IInputObject,IComponentUIHostedAppFrame,IServiceProvider,IHostedApplicationTaskCompletion>
		{
			RuntimeClass<RuntimeClassFlags<3>,ChainInterfaces<IHostedApplicationBridgeWindow,IHostedApplicationFrameWindow,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IInspectable,IObjectWithWindow,CWRLObjectWithSite,IInputObject,IComponentUIHostedAppFrame,IServiceProvider,IHostedApplicationTaskCompletion>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,ChainInterfaces<IHostedApplicationBridgeWindow,IHostedApplicationFrameWindow,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IInspectable,IObjectWithWindow,CWRLObjectWithSite,IInputObject,IComponentUIHostedAppFrame,IServiceProvider,IHostedApplicationTaskCompletion>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *>,Windows::Internal::Shell::Experience::IShellExperienceDispatcher,Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization,IShellExperienceNotification,Windows::Foundation::IClosable,CloakedIid<ITimerCallback> >
		{
			RuntimeClass<RuntimeClassFlags<3>,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *>,Windows::Internal::Shell::Experience::IShellExperienceDispatcher,Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization,IShellExperienceNotification,Windows::Foundation::IClosable,CloakedIid<ITimerCallback> >();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *>,Windows::Internal::Shell::Experience::IShellExperienceDispatcher,Windows::Internal::Shell::Experience::IShellExperienceDispatcherCustomization,IShellExperienceNotification,Windows::Foundation::IClosable,CloakedIid<ITimerCallback> >();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::AssignedAccess::IAssignedAccessControllerProxy,IPrivilegedOperationsConsumer>
		{
			RuntimeClass<RuntimeClassFlags<3>,FtmBase,CImmersiveShellComponentWithGITSite,Windows::Internal::Shell::AssignedAccess::IAssignedAccessControllerProxy,IPrivilegedOperationsConsumer>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,FullscreenCXHExperienceManagerBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,FullscreenCXHExperienceManagerBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,IAudioSessionNotification,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,IAudioSessionNotification,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,IHostedApplicationEventSink,Windows::ApplicationModel::Actions::IHostedFlyoutOperation,IObjectProvider>
		{
			RuntimeClass<RuntimeClassFlags<3>,IHostedApplicationEventSink,Windows::ApplicationModel::Actions::IHostedFlyoutOperation,IObjectProvider>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification,IImmersiveRawInputKeyboardNotification,Windows::Internal::Shell::Experience::ISoftLandingExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable>
		{
			RuntimeClass<RuntimeClassFlags<3>,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveRawInputPenNotification,IImmersiveRawInputKeyboardNotification,Windows::Internal::Shell::Experience::ISoftLandingExperienceManager,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IHostedApplicationActivationManager,IHostedApplicationActivationManager2,ChainInterfaces<IHostedApplicationActivationManagerPrivateCallbacks,ISplashScreen,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ICoreWindowFactoryPriv,IServiceProvider,IObjectWithWindow>
		{
			RuntimeClass<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IHostedApplicationActivationManager,IHostedApplicationActivationManager2,ChainInterfaces<IHostedApplicationActivationManagerPrivateCallbacks,ISplashScreen,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,ICoreWindowFactoryPriv,IServiceProvider,IObjectWithWindow>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks>
		{
			RuntimeClass<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IInputObject,IServiceProvider,IHostedApplicationEventSink,IDataTransferBrokerCallbacks>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler>,Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> > >
		{
			RuntimeClass<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,Implements<RuntimeClassFlags<2>,ChainInterfaces<IShellView,IOleWindow,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,INavigatingView,IFilterView,IPickerView,IWaitHandle,IAppInstanceViewPriv,IFileDialogResultHandler>,Implements<RuntimeClassFlags<2>,IInputObject,IServiceProvider,ChainInterfaces<IHostedApplicationEventSink2,IHostedApplicationEventSink,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil>,IHostedApplicationView,IAppViewWithOwnedWindows,ICachedFileUpdateView,ChainInterfaces<IFolderView2,IFolderView,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil,Details::Nil> > >();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Implements<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IComponentUIHostedActivationManager,ICoreWindowFactoryPriv,ISplashScreen,IServiceProvider,IComponentUIHostedActivationManagerTest,IObjectWithWindow>,Implements<RuntimeClassFlags<3>,ISplashScreenUI,IComponentUIEventHandler> >
		{
			RuntimeClass<RuntimeClassFlags<3>,Implements<RuntimeClassFlags<3>,IInspectable,CWRLObjectWithSite,IComponentUIHostedActivationManager,ICoreWindowFactoryPriv,ISplashScreen,IServiceProvider,IComponentUIHostedActivationManagerTest,IObjectWithWindow>,Implements<RuntimeClassFlags<3>,ISplashScreenUI,IComponentUIEventHandler> >();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Actions::IActionExecutionBroker,CImmersiveShellComponentWithGITSite>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Actions::IActionExecutionBroker,CImmersiveShellComponentWithGITSite>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,CloakedIid<IServiceProvider>,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>,CWRLObjectWithGITSite,CActivatedEventArgsWithViewIdBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,CloakedIid<IServiceProvider>,CloakedIid<Windows::Foundation::Marshaling::Internal::IValueMarshalByPropertySet>,CWRLObjectWithGITSite,CActivatedEventArgsWithViewIdBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Activation::ISplashScreen,CloakedIid<ISplashScreenPriv> >
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Activation::ISplashScreen,CloakedIid<ISplashScreenPriv> >();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase,Windows::ApplicationModel::Contacts::Internal::IControlMapActionControlItem>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase,Windows::ApplicationModel::Contacts::Internal::IControlMapActionControlItem>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::ApplicationModel::Contacts::Internal::ContactActionControlItemBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Foundation::Collections::IIterator<IInspectable *>,FtmBaseEnableIfAgile<1> >
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Foundation::Collections::IIterator<IInspectable *>,FtmBaseEnableIfAgile<1> >();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Foundation::Collections::IObservableVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>,CloakedIid<Windows::UI::Xaml::Interop::IBindableObservableVector>,CloakedIid<Windows::Foundation::Collections::IIterable<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IVector<IInspectable *> >,CloakedIid<Windows::Foundation::Collections::IObservableVector<IInspectable *> >,FtmBaseEnableIfAgile<1> >();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,ILightDismissNotification,IApplicationFrameTitleBarPinButtonHandler,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,ILightDismissNotification,IApplicationFrameTitleBarPinButtonHandler,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IHostExperienceManager,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IHostExperienceManager,Windows::Internal::Shell::Experience::IExperienceManagerPriorityManipulator,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IInputDialExperienceManager,Windows::Foundation::IClosable,InputDial::IInputDialDeviceCallback,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IMultitaskingViewVisibilityNotification>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IInputDialExperienceManager,Windows::Foundation::IClosable,InputDial::IInputDialDeviceCallback,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IMultitaskingViewVisibilityNotification>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IInputDialExperienceManager,Windows::Foundation::IClosable,InputDial::IInputDialDeviceCallback,IInputHostLayoutChanges,IImmersiveSessionIdleNotification,IImmersiveShellHookNotification,IImmersiveWindowMessageNotification,IMultitaskingViewVisibilityNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IMiracastBannerExperienceManager,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IMiracastBannerExperienceManager,IImmersiveRawInputMouseNotification,IImmersiveRawInputTouchNotification,IImmersiveMonitorNotification,Windows::Foundation::IClosable>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IPenWorkspaceExperienceManager,ILightDismissNotification,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveMonitorNotification,INotesManagerCallback,Windows::System::Private::IPendingLaunch>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IPenWorkspaceExperienceManager,ILightDismissNotification,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveMonitorNotification,INotesManagerCallback,Windows::System::Private::IPendingLaunch>();
			virtual ~RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Shell::Experience::IPenWorkspaceExperienceManager,ILightDismissNotification,IImmersiveSessionIdleNotification,IImmersiveWindowMessageNotification,Windows::Foundation::IClosable,IActiveZBandNotificationForMonitor,IImmersiveMonitorNotification,INotesManagerCallback,Windows::System::Private::IPendingLaunch>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::UI::ContentDeliveryManager::IExpansionExperience,CImmersiveShellComponentWithGITSite>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::UI::ContentDeliveryManager::IExpansionExperience,CImmersiveShellComponentWithGITSite>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::UI::SoftLanding::ISoftLandingExperience,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::UI::SoftLanding::ISoftLandingExperience,CImmersiveShellComponentWithGITSite,IImmersiveWindowMessageNotification>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Storage::Streams::IRandomAccessStream,Windows::Storage::Streams::IInputStream,Windows::Storage::Streams::IOutputStream,Windows::Foundation::IClosable,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<3>,Windows::Storage::Streams::IRandomAccessStream,Windows::Storage::Streams::IInputStream,Windows::Storage::Streams::IOutputStream,Windows::Foundation::IClosable,FtmBase>();
		};

		struct RuntimeClass<Windows::ApplicationModel::Actions::CActionArgsImpl>
		{
			RuntimeClass<Windows::ApplicationModel::Actions::CActionArgsImpl>();
		};

		struct RuntimeClass<Windows::ApplicationModel::Actions::CHostedFlyoutActivationInfoImpl,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>
		{
			RuntimeClass<Windows::ApplicationModel::Actions::CHostedFlyoutActivationInfoImpl,Windows::ApplicationModel::Actions::IHostedFlyoutActivationInfo>();
		};

		struct RuntimeClass<Windows::ApplicationModel::Actions::CMainWindowActivationInfoImpl>
		{
			RuntimeClass<Windows::ApplicationModel::Actions::CMainWindowActivationInfoImpl>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IIterator<HSTRING__ *> >
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IIterator<HSTRING__ *> >();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IIterator<HSTRING__ *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IIterator<HSTRING__ *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>();
			virtual ~RuntimeClass<Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IIterator<Windows::Storage::Pickers::IPickerFileType *> >
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IIterator<Windows::Storage::Pickers::IPickerFileType *> >();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *>,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *>,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>();
			virtual ~RuntimeClass<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *>,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *>,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *>,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>();
			virtual ~RuntimeClass<Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *>,Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *> >
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *> >();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<IUnknown *>,Windows::Foundation::Collections::IIterable<IUnknown *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVector<IUnknown *>,Windows::Foundation::Collections::IIterable<IUnknown *>,FtmBase>();
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<IUnknown *>,Windows::Foundation::Collections::IIterable<IUnknown *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>();
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::IPickerFileType *> >
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Storage::Pickers::IPickerFileType *>,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::IPickerFileType *> >();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVector<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *>,FtmBase>();
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<double>,Windows::Foundation::Collections::IIterable<double>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVector<double>,Windows::Foundation::Collections::IIterable<double>,FtmBase>();
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<double>,Windows::Foundation::Collections::IIterable<double>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<int>,Windows::Foundation::Collections::IIterable<int>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVector<int>,Windows::Foundation::Collections::IIterable<int>,FtmBase>();
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<int>,Windows::Foundation::Collections::IIterable<int>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVectorView<IUnknown *>,Windows::Foundation::Collections::IIterable<IUnknown *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVectorView<IUnknown *>,Windows::Foundation::Collections::IIterable<IUnknown *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVectorView<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVectorView<Windows::Internal::Feedback::FeedbackItem *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Feedback::FeedbackItem *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *>,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::UpdateFilesResult *> >
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *>,Windows::Foundation::Collections::IIterable<Windows::Storage::Pickers::UpdateFilesResult *> >();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::JumpListItem *>,Windows::Foundation::Collections::IIterable<Windows::UI::StartScreen::JumpListItem *>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVectorView<double>,Windows::Foundation::Collections::IIterable<double>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVectorView<double>,Windows::Foundation::Collections::IIterable<double>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVectorView<int>,Windows::Foundation::Collections::IIterable<int>,FtmBase>
		{
			RuntimeClass<Windows::Foundation::Collections::IVectorView<int>,Windows::Foundation::Collections::IIterable<int>,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >
		{
			virtual ~RuntimeClass<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Pickers::UpdateFilesResult *> *> >();
		};

		struct RuntimeClass<Windows::Storage::Pickers::IUpdateFilesResult,CloakedIid<IUpdateFilesResultInternal> >
		{
			virtual ~RuntimeClass<Windows::Storage::Pickers::IUpdateFilesResult,CloakedIid<IUpdateFilesResultInternal> >();
		};

		struct RuntimeClass<Windows::Storage::Pickers::Provider::IPickerClosingOperation,CDeferrableRequest<Windows::Storage::Pickers::Provider::IPickerClosingDeferral> >
		{
			virtual ~RuntimeClass<Windows::Storage::Pickers::Provider::IPickerClosingOperation,CDeferrableRequest<Windows::Storage::Pickers::Provider::IPickerClosingDeferral> >();
		};

		struct RuntimeClass<Windows::Storage::Pickers::Provider::ITargetFileRequest,CDeferrableRequest<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> >
		{
			virtual ~RuntimeClass<Windows::Storage::Pickers::Provider::ITargetFileRequest,CDeferrableRequest<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> >();
		};

		struct SimpleActivationFactory<DesktopContactCardExperience,0>
		{
			virtual long ActivateInstance(IInspectable * *);
		};

		struct SimpleActivationFactory<Windows::ApplicationModel::Contacts::Internal::ContactUIHelper,0>
		{
			virtual long ActivateInstance(IInspectable * *);
		};

		struct SimpleActivationFactory<Windows::Internal::Feedback::InternalFeedbackBroker,0>
		{
			virtual long ActivateInstance(IInspectable * *);
		};

		struct SimpleClassFactory<AvailableNetworksExperienceFlow,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<AvailableNetworksExperienceFlowCF,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<BackTracker,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<BroadcastDVRComponent,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CAccessibilityDock,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CActionExecutionBrokerCF,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CActivationErrorPopupFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CActivationStoreHelper,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CAppCrusher,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CAppInstanceFolder,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CAppListTileFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CApplicabilityCacheMonitor,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CApplicationPreLaunch,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CApplicationTargetingTracker,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CAudioFlyoutController,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CAutoPlayUI,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CBackstackManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CBamThrottleSettings,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CCompatibilityPolicyManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CConnectedSearchShellService,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CCortanaExperienceFlow,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CCortanaExperienceFlowCF,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CDeviceSettingsProvider,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CDevicesFlow,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CDevicesFlowCF,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CEdgeUiDeviceManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CEdgeUiManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CExtensionListContextMenu,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CHostedApplicationActivationManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CIconicRepresentationLoader,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveHotkeyNotification,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveMonitorManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveMonitorNotificationServiceProxy,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveOpenWithUI,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveSessionIdleDetector,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveSettingsCache,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveShellHookService,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveShellNotifier,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveSplashScreenCF,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CImmersiveWindowMessageService,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CInputHostLayout,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CKeyboardOcclusionMitigation,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CLauncherTipContextMenu,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CLayoutManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CLegacyProcessLifetimeManagerProxy,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CLocalObjectCreator,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CLockScreenApplicationManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CLockScreenCallBrokerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CLockScreenSettingProvider,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CNotificationManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CNotificationsSettingProvider,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<COverrideScaling,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPickerControllerInProcServer,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPlayToReceiverManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CPlaybackManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CProjectionManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CQuietHoursManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CRawInputProvider,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSearchServicesProvider,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSearchSuggestionsService,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSettingsFlow,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CShareFlow,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CShareFlowCF,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSharePlatformHost,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CShellChromeControls,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CShellExperienceDispatcher,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CShellExperienceManagerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CShellFeedbackService,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CShellSnapComponent,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSplashScreenEvents,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSplashScreenTimer,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CStorageLibraryUI,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSwitchThumbnailDeviceManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSyncIAMEventHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CSyncSettingsProvider,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ClickNote,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CompactOverlayManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CompactOverlayPositioner,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ComponentUIPlugin,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CredentialResetExperienceManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<DataPersistence::CDataPersistence,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<DesktopAppXActivator,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<DesktopAppXImmersiveBrokerInterop,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<DesktopStoreRemediationHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<DevicesFlowExperienceFlow,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<DevicesFlowExperienceFlowCF,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<DialogManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<EDPNotificationHost,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<EnterpriseChromeServiceProvider,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ExpansionExperienceController,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<HostedApplicationExperienceManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<InkWorkspaceHostedAppsManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<MsaWindowManagerImpl,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<NotesManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<OOBEExperienceManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PackagedApplicationExecuteCommand,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PenSignalManagerImpl,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<PublicShellFeedbackBroker,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<QuietHoursService,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<RemoteAppBrokerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<RetailDemoHost,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ShellDropTarget,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ShellImmersiveComponentCreator,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<ShellTargetingTracker,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<StoreFrontHelper,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TabletModeController,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TabletModeToast,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TouchpadActionsComponent,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TouchpadActionsGestureHandler,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TouchpadGestureComponent,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<TransitionCoordinator,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<WindowManagementEvents,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<Windows::Internal::Shell::AssignedAccess::AssignedAccessControllerProxy,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<Windows::Internal::UI::SoftLanding::CSoftLandingManager,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<Windows::Internal::UI::SoftLanding::SoftLandingNotificationActivationCallback,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<Windows::Internal::UI::WindowsTip::WindowsTipNotificationActivationCallback,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		class WeakRef
		{
		protected:
			long InternalResolve(_GUID const &,IInspectable * *);
		public:
			WeakRef();
			long As<IInspectable>(Details::ComPtrRef<ComPtr<IInspectable> >);
			long As<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager>(Details::ComPtrRef<ComPtr<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager> >);
			long As<Windows::Internal::Shell::Share::IShareExperienceCallbacks>(Details::ComPtrRef<ComPtr<Windows::Internal::Shell::Share::IShareExperienceCallbacks> >);
			~WeakRef();
		};

		namespace Wrappers
		{
			struct AutoSelectObject<HBITMAP__ *>
			{
				~AutoSelectObject<HBITMAP__ *>();
			};

			struct AutoSelectObject<HFONT__ *>
			{
				~AutoSelectObject<HFONT__ *>();
			};

			class ClientDC
			{
			protected:
				virtual bool InternalClose();
			public:
				ClientDC(HWND__ *);
				~ClientDC();
			};

			class CompatibleDC
			{
			protected:
				virtual bool InternalClose();
			public:
				CompatibleDC(HDC__ *);
				long CheckValidity();
				~CompatibleDC();
			};

			struct CriticalSection
			{
				Details::SyncLockCriticalSection Lock();
				static Details::SyncLockCriticalSection Lock(_RTL_CRITICAL_SECTION *);
				~CriticalSection();
			};

			namespace Details
			{
				class SyncLockCriticalSection
				{
					void InternalUnlock();
				public:
					~SyncLockCriticalSection();
				};

				class SyncLockExclusive
				{
					void InternalUnlock();
				public:
					~SyncLockExclusive();
				};

				class SyncLockShared
				{
					void InternalUnlock();
				public:
					~SyncLockShared();
				};

				int CompareStringOrdinal(HSTRING__ *,HSTRING__ *);
			};

			struct Event
			{
				~Event();
			};

			struct HString
			{
				HString();
				long Set(HSTRING__ * const &);
				long Set(unsigned short const *,unsigned int);
				long Set<260>(unsigned short (&)[260]);
				long Set<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,Details::Dummy);
				long Set<Windows::Internal::NativeString<Windows::Internal::LocalMemPolicy<unsigned short> > >(Windows::Internal::NativeString<Windows::Internal::LocalMemPolicy<unsigned short> > const &,Details::Dummy);
				long Set<unsigned short *>(unsigned short * const &,Details::Dummy);
				long Set<unsigned short const *>(unsigned short const * const &,Details::Dummy);
				unsigned short const * GetRawBuffer(unsigned int *);
				~HString();
			};

			class HStringReference
			{
				static unsigned int AddOne(unsigned int);
				void CreateReference(unsigned short const *,unsigned int,unsigned int);
			public:
				HStringReference(unsigned short const *,unsigned int);
				HStringReference<114>(unsigned short (&)[114]);
				HStringReference<128>(unsigned short (&)[128]);
				HStringReference<256>(unsigned short (&)[256]);
				HStringReference<260>(unsigned short (&)[260]);
				HStringReference<64>(unsigned short (&)[64]);
				HStringReference<65>(unsigned short (&)[65]);
				HStringReference<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > >(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,Details::Dummy);
				HStringReference<Windows::Internal::NativeString<Windows::Internal::LocalMemPolicy<unsigned short> > >(Windows::Internal::NativeString<Windows::Internal::LocalMemPolicy<unsigned short> > const &,Details::Dummy);
				HStringReference<unsigned short *>(unsigned short * const &,Details::Dummy);
				HStringReference<unsigned short const *>(unsigned short const * const &,Details::Dummy);
				~HStringReference();
			};

			class HandleT<HandleTraits::ClientDCTraits>
			{
			protected:
				virtual bool InternalClose();
			};

			class HandleT<HandleTraits::CompatibleDCTraits>
			{
			protected:
				virtual bool InternalClose();
			};

			class HandleT<HandleTraits::EventTraits>
			{
			protected:
				virtual bool InternalClose();
			public:
				void Close();
			};

			class HandleT<HandleTraits::HANDLENullTraits>
			{
			protected:
				virtual bool InternalClose();
			public:
				void Close();
			};

			class HandleT<HandleTraits::HBITMAPTraits>
			{
			protected:
				virtual bool InternalClose();
			public:
				~HandleT<HandleTraits::HBITMAPTraits>();
			};

			namespace HandleTraits
			{
				struct HANDLENullTraits
				{
					static bool Close(void *);
				};

			};

			struct SRWLock
			{
				~SRWLock();
			};

		};

		Windows::Foundation::Diagnostics::IAsyncCausalityTracerStatics * gCausality;
		_RTL_RUN_ONCE gCausalityInitOnce;
		long AsAgile<IActivationErrorPopup>(IActivationErrorPopup *,WRL::AgileRef *);
		long AsAgile<IAsyncCallbackDispatcher>(IAsyncCallbackDispatcher *,WRL::AgileRef *);
		long AsAgile<ShellExperienceHelpers::Internal::IProxyModalWindow>(ShellExperienceHelpers::Internal::IProxyModalWindow *,WRL::AgileRef *);
		long AsAgile<Windows::ApplicationModel::Activation::IActivatedEventArgs>(Windows::ApplicationModel::Activation::IActivatedEventArgs *,WRL::AgileRef *);
		long AsAgile<Windows::Foundation::IEventHandler<IInspectable *> >(Windows::Foundation::IEventHandler<IInspectable *> *,WRL::AgileRef *);
		long AsAgile<Windows::Foundation::IUriRuntimeClass>(Windows::Foundation::IUriRuntimeClass *,WRL::AgileRef *);
		long AsAgile<Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs>(Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *,WRL::AgileRef *);
		long AsWeak<CAppInstanceView>(CAppInstanceView *,WRL::WeakRef *);
		long AsWeak<CDataTransferBrokerCallbacks>(CDataTransferBrokerCallbacks *,WRL::WeakRef *);
		long AsWeak<CHostedApplicationActivationManager>(CHostedApplicationActivationManager *,WRL::WeakRef *);
		long AsWeak<CHostedFlow>(CHostedFlow *,WRL::WeakRef *);
		long AsWeak<CMessageDialogHelper>(CMessageDialogHelper *,WRL::WeakRef *);
		long AsWeak<CPenWorkspaceExperienceManager>(CPenWorkspaceExperienceManager *,WRL::WeakRef *);
		long AsWeak<ComponentUIHostedActivationManager>(ComponentUIHostedActivationManager *,WRL::WeakRef *);
		long AsWeak<ComponentUIHostedAppFrame>(ComponentUIHostedAppFrame *,WRL::WeakRef *);
		long AsWeak<GamingAudio::AppList>(GamingAudio::AppList *,WRL::WeakRef *);
		long AsWeak<HostedApplicationExperienceManager>(HostedApplicationExperienceManager *,WRL::WeakRef *);
		long AsWeak<IAsyncInfo>(IAsyncInfo *,WRL::WeakRef *);
		long AsWeak<ICachedFileUpdaterEventSink>(ICachedFileUpdaterEventSink *,WRL::WeakRef *);
		long AsWeak<IFileSavePickerEventSink>(IFileSavePickerEventSink *,WRL::WeakRef *);
		long AsWeak<IHostedViewEventSink>(IHostedViewEventSink *,WRL::WeakRef *);
		long AsWeak<IInspectable>(IInspectable *,WRL::WeakRef *);
		long AsWeak<IItemDeselectedSink>(IItemDeselectedSink *,WRL::WeakRef *);
		long AsWeak<IWeakReferenceSource>(IWeakReferenceSource *,WRL::WeakRef *);
		long AsWeak<ModalExperienceDialog>(ModalExperienceDialog *,WRL::WeakRef *);
		long AsWeak<Windows::ApplicationModel::Actions::IHostedActionHandler>(Windows::ApplicationModel::Actions::IHostedActionHandler *,WRL::WeakRef *);
		long AsWeak<Windows::ApplicationModel::Core::ICoreApplicationViewInternal>(Windows::ApplicationModel::Core::ICoreApplicationViewInternal *,WRL::WeakRef *);
		long AsWeak<Windows::ApplicationModel::Internal::DataTransfer::ISharingOperation>(Windows::ApplicationModel::Internal::DataTransfer::ISharingOperation *,WRL::WeakRef *);
		long AsWeak<Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager>(Windows::Internal::GamingOverlay::IGamingOverlayExperienceManager *,WRL::WeakRef *);
		long AsWeak<Windows::Internal::Shell::Share::IShareExperienceCallbacks>(Windows::Internal::Shell::Share::IShareExperienceCallbacks *,WRL::WeakRef *);
		long AsWeak<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral>(Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral *,WRL::WeakRef *);
		long AsWeak<Windows::Storage::Pickers::Provider::IPickerClosingDeferral>(Windows::Storage::Pickers::Provider::IPickerClosingDeferral *,WRL::WeakRef *);
		long AsWeak<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>(Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral *,WRL::WeakRef *);
		long AsWeak<Windows::Storage::Provider::IFileUpdateRequestDeferral>(Windows::Storage::Provider::IFileUpdateRequestDeferral *,WRL::WeakRef *);
		long WeakReferenceCallback<CAppCrusherPopup,IPopupEventHandler,IPopupWindow *>(CAppCrusherPopup *,long ( CAppCrusherPopup::*)(IPopupWindow *),IPopupEventHandler * *);
	};

};

class MiracastConnection
{
	bool TryTransitionStateFromMiracastStateUnderLock(MIRACAST_DISPLAY_DEVICE_STATE,MIRACAST_DEVICE_STATUS);
	static MiracastConnectionError GetConnectionErrorFromDeviceStatus(MIRACAST_DEVICE_STATUS);
	void ChangeStateUnderLock(MiracastConnectionState);
	void TransitionToErrorStateUnderLock(MiracastConnectionError);
public:
	MiracastConnection();
	bool IsConnectionForDisplayDevice(unsigned short const *);
	bool TryAttachConnection(MIRACAST_DISPLAY_DEVICE_STATE,MIRACAST_DEVICE_STATUS);
	bool TryUpdateState(MIRACAST_DISPLAY_DEVICE_STATE,MIRACAST_DEVICE_STATUS);
	long RuntimeClassInitialize(IUnknown *,unsigned short const *);
	virtual MiracastConnectionState GetCurrentConnectionState();
	virtual bool IsInTerminalState();
	virtual long GetConnectionErrorDetails(MiracastConnectionError *,MiracastConnectionState *);
	virtual long GetTargetDeviceIDs(unsigned short * *,unsigned short * *);
	virtual long RegisterForConnectionEvents(IMiracastConnectionEventHandler *,EventRegistrationToken *,MiracastConnectionState *);
	virtual long UnregisterForConnectionEvents(EventRegistrationToken);
	virtual ~MiracastConnection();
	void Shutdown();
	void StartConnection(bool);
};

struct MiracastConnectionEventHandlerAdapter
{
	virtual long Invoke();
};

struct MiracastConnectionEventHwndForwarder
{
	MiracastConnectionEventHwndForwarder();
	static long CreateAndAttach(IMiracastConnection *,HWND__ *,IMiracastConnectionEventHwndForwarder * *);
	virtual long OnMiracastConnectionStateChanged();
	virtual void Shutdown();
};

class MiracastDeviceChallenge
{
	static void DafChallengeCallback(void *,long);
	void OnDafChallengeComplete(long);
public:
	MiracastDeviceChallenge();
	long RuntimeClassInitialize(unsigned short const *,IMiracastDeviceChallengeListener *);
	virtual MiracastDeviceChallengeState GetChallengeState();
	virtual long StartChallenge();
	virtual unsigned short const * GetDeviceInterfaceID();
	virtual void Shutdown();
};

class ModalExperienceDialog
{
	long ComputeNewTargetOwner(unsigned int,Windows::Internal::Shell::Desktop::ViewManagerInterop::IObjectWithWindow * *);
	long RefreshModalState();
	virtual char const * v_GetClassName();
	virtual void HandleChainLinkEventInternal(Windows::Internal::Shell::Chaining::IChainLink *,Windows::Internal::Shell::Chaining::ChainLink<ObjectWithSrwLock>::ChainLinkEventTypeInternal);
	void DismissExperience();
public:
	ModalExperienceDialog();
	long OnSplashScreenDismissed();
	long RuntimeClassInitialize(ModalWindowExperienceManager *,std::shared_ptr<ViewInfoAuto> &,ModalExperienceDialogConfigFlags);
	virtual long OnDismiss();
	virtual long OnPinnedChanged(int);
	virtual ~ModalExperienceDialog();
	void OnDismissed();
	void OnFramePositionChanged();
};

struct ModalExperienceEventArgs
{
	ModalExperienceEventArgs();
	virtual long get_ExperienceID(EventRegistrationToken *);
	virtual long get_ExperienceOwnerWindowId(unsigned int *);
	virtual long get_State(Windows::Internal::Shell::ModalExperience::ModalExperienceViewState *);
};

struct ModalExperienceManagerCF
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

struct ModalExperienceManagerTelemetry
{
	class ActivateExperienceActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~ActivateExperienceActivity();
	};

	class PresentationChangeActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void ReadyForPresentation(unsigned char);
		void StartActivity();
		~PresentationChangeActivity();
	};

	class ShowModalActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~ShowModalActivity();
	};

	class SubscribeToServicesActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~SubscribeToServicesActivity();
	};

	class TransitionToHolographicActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~TransitionToHolographicActivity();
	};

	class ViewChangeActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void ViewEvent(unsigned long);
		~ViewChangeActivity();
	};

	static bool IsEnabled(unsigned char,unsigned __int64);
	static void TraceDebugExperiencMsg<unsigned short const (&)[16],__int64 &>(unsigned short const (&)[16],__int64 &);
	static void TraceDebugExperiencMsg<unsigned short const (&)[24],__int64 &>(unsigned short const (&)[24],__int64 &);
	static void TraceDebugMsg<unsigned short const (&)[20]>(unsigned short const (&)[20]);
	void TraceDebugExperiencMsg_(unsigned short const *,unsigned __int64);
	void TraceDebugMsg_(unsigned short const *);
};

class ModalWindowExperienceManager
{
	bool _ShouldForwardForHolographicModalExperience(EventRegistrationToken);
	bool _ShouldForwardForHolographicModalExperience(unsigned int);
	long _ChangeExperiencePropertiesForView(ViewInfo *,Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions *,bool);
	long _DismissView(ViewInfo *);
	long _DismissViewAndRemoveExperience(EventRegistrationToken);
	long _DismissViewAndRemoveExperience(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper const *);
	long _EnsureHolographicModalExperienceManager();
	long _ExtractViewInfoForView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper const *,std::shared_ptr<ViewInfoAuto> &);
	long _FindViewInfoByFrame(IApplicationFrame *,std::shared_ptr<ViewInfoAuto> &);
	long _FindViewInfoByOwnerWindow(unsigned int,std::shared_ptr<ViewInfoAuto> &);
	long _FindViewInfoByToken(EventRegistrationToken const &,std::shared_ptr<ViewInfoAuto> &);
	long _FindViewInfoByView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper const *,std::shared_ptr<ViewInfoAuto> &);
	long _GetDefaultWindowRelativeSize(ViewInfo const *,tagSIZE *);
	long _GetModalWindowPosition(Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions *,ViewInfo const *,bool,tagRECT *);
	long _KeepAppAlive(ViewInfo *,PLM_TASKCOMPLETION_CATEGORY_FLAGS);
	long _OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long _OnViewCreated(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,EventRegistrationToken);
	long _OnViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long _PushLatestFullscreenRectToFrameAsync(IApplicationFrameWrapper *,ModalWindowExperienceManager::WaitOptions);
	long _RegisterForHookService();
	long _SetWindowTitle(IApplicationFrameWrapper *,unsigned short const *);
	long _ShowModalExperienceAsync(Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions *,unsigned int,unsigned short const *,std::function<long (Windows::Foundation::Collections::IPropertySet *)> const &,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> *,EventRegistrationToken *);
	long _ShowView(ViewInfo const *);
	long _TrySetExperienceMinimumSize(ViewInfo const *,Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions *,tagRECT const *,bool);
	static bool _IsFixedSizeModalExperience(Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions *);
	static int _CloseWindowIfOwned(HWND__ *,__int64);
	static long _ActivateModalExperience(EventRegistrationToken const &,std::function<long (Windows::Foundation::Collections::IPropertySet *)> const &);
	static long _GetMonitorScaleForWindow(HWND__ *,DEVICE_SCALE_FACTOR *);
	static long _InvokeModalExperienceEventForExperience(Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,ViewInfo const *,Windows::Internal::Shell::ModalExperience::ModalExperienceViewState);
	static long s_ExitFullScreen(IServiceProvider *,HWND__ *);
	std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > _FindViewPosition(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper const *);
	virtual ~ModalWindowExperienceManager();
	void _UnRegisterForHookService();
public:
	ModalWindowExperienceManager();
	long RuntimeClassInitialize(unsigned short const *,_GUID const &);
	virtual long ChangeModalExperienceProperties(EventRegistrationToken,Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions *);
	virtual long Dismiss(EventRegistrationToken);
	virtual long GetExistingExperienceForOwnerWindow(unsigned int,EventRegistrationToken *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long OnChromeOffsetsChanged(IApplicationFrame *);
	virtual long OnCommand(IApplicationFrame *,_GUID const *,unsigned long);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnPositionChanged(IApplicationFrame *);
	virtual long OnShellHookMessage(unsigned __int64,__int64);
	virtual long PrepareForDesktopModalExperience(long);
	virtual long ShowDependentView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,unsigned int,Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions *);
	virtual long ShowExperience(EventRegistrationToken);
	virtual long ShowForContractByAppID(HSTRING__ *,HSTRING__ *,IInspectable *,Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions *,unsigned int,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> *,EventRegistrationToken *);
	virtual long ShowForContractWithPlugin(HSTRING__ *,HSTRING__ *,HSTRING__ *,_GUID,IInspectable *,Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions *,unsigned int,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> *,EventRegistrationToken *);
	virtual long ShowForLaunch(HSTRING__ *,HSTRING__ *,Windows::Internal::Shell::ModalExperience::IModalExperienceDefaultOptions *,unsigned int,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> *,EventRegistrationToken *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterFromModalExperienceEvents(EventRegistrationToken);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long ViewTransitionedFromHolographic(IApplicationView *);
	virtual long ViewTransitionedToHolographic(IApplicationView *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
};

namespace ModernShareTelemetry
{
	class ModernShareFlow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void PickerUIRendered();
		void StoreLinkActivated();
	};

};

namespace MonitorManagerTelemetry
{
	class CreatePerMonitorComponents
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~CreatePerMonitorComponents();
	};

	class ReconcileMonitors
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(unsigned int);
		~ReconcileMonitors();
	};

};

class MsaWindowManagerImpl
{
	long _NotifyAppClosingListeners();
protected:
	virtual long GetCallerPackageFullName(unsigned short * *);
public:
	MsaWindowManagerImpl();
	long RuntimeClassInitialize();
	virtual long AppClosing(IImmersiveApplication *);
	virtual long PerformDelayedInitialization();
	virtual long RegisterBackgroundExecution();
	virtual long RegisterForAppClose(IMsaWindowManagerAppCloseNotification *,unsigned long *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterAppClose(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class NamespaceRestrictionHelper
{
	bool IsNetworkOrURLItem(IShellItem *);
	bool IsURLItem(IShellItem *);
	long EnsureManager();
	long GetKnownFolderIdFromItem(IShellItem *,_GUID *);
	long GetKnownFolderIdNearestMatch(IShellItem *,_GUID *);
	long KeyShouldAllowAccessToFolder(IShellItem *,HKEY__ * *,HKEY__ * *,bool *);
	long KeyShouldAllowAccessToKnownFolder(_GUID const *,HKEY__ * *,HKEY__ * *,bool *);
	long RestrictionAppliesToKnownFolder(_GUID const *,HKEY__ * *,bool *);
	long RestrictionAppliesToStorageLocation(IShellItem *,HKEY__ * *,bool *);
	long ShouldAllowAccessToFolder(IShellItem *,NamespaceRestrictionCategory,bool *);
public:
	long ShouldNavigateToFolder(IShellItem *,bool *);
	~NamespaceRestrictionHelper();
};

struct NonAgileDispatcher
{
	virtual long Dispatch(IAsyncCallback *);
};

class NotesManager
{
	class MinNoteHeightHack
	{
		long GatherData(tagRECT const &,int);
	public:
		MinNoteHeightHack(ViewInfo const &,tagRECT const &,int);
		void ResetIfNeeded();
		~MinNoteHeightHack();
	};

	bool _HaveSetViewInitialSizeAndPosition(IApplicationFrameWrapper *);
	bool _NeedsFocus(NotesManager::ViewInfo const &);
	long ViewEventsInvoke(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long _CheckForClosingViewDestruction(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _CloseApplication();
	long _CreateMainWindow();
	long _DestroyTopWindow();
	long _DisableActivationTimeout(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _DismissViewForFrame(IApplicationFrame *);
	long _FindFrameWrapper(IApplicationFrame *,Microsoft::WRL::ComPtr<IApplicationFrameWrapper> &);
	long _FixUpNoteWindowOwners();
	long _FocusOnNextView(std::shared_ptr<NotesManager::ViewInfo> const &);
	long _FocusOnWindow(HWND__ *,NotesManager::ViewInfo &);
	long _GetExistingWindowSizeAndPositions(NotesManager::ViewInfo const &,std::vector<tagRECT,std::allocator<tagRECT> > &);
	long _GetFrameWrapper(tagRECT const &,bool,IApplicationFrameWrapper * *);
	long _GetLayoutManager(IImmersiveLayout * *);
	long _GetMonitorForAllStickies(HMONITOR__ * *);
	long _GetNoteFrameWindows(std::vector<HWND__ *,std::allocator<HWND__ *> > &);
	long _GetViewInfo(int,std::shared_ptr<NotesManager::ViewInfo> &);
	long _GetViewSizeAndPosition(unsigned int,tagSIZE *,tagPOINT *);
	long _GetWindowAbove(HWND__ * *);
	long _GetWindowShowSizeAndPosition(NotesManager::ViewInfo const &,tagRECT const &,tagRECT const &,tagRECT &,bool);
	long _GetWindowToMoveBelowInDesktop(HWND__ * *);
	long _HandleDisableActivationTimeoutPolicyTimerReturn(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _HandleMainWindowIconic();
	long _HandleMainWindowPositionChanged();
	long _HandleMainWindowRestore();
	long _HandlePenWorkspaceThumbnailBufferChange();
	long _HandleResetActivationTimeoutPolicyTimerReturn();
	long _HandleViewCreated(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _HandleViewPendingWork(NotesManager::ViewInfo &);
	long _HideNotesBackgroundWindow();
	long _InitializeNotesBackgroundWindow(tagPOINT const &,HMONITOR__ * *);
	long _MoveFocusToLastActiveWindow();
	long _MoveToBand(ZBID);
	long _MoveWindowsInsideRect(tagRECT const &);
	long _NotifyNotesAppClosing();
	long _NotifyNotesThumbnailChange(unsigned int,unsigned char *);
	long _NotifyRequestFocusChange(int *);
	long _NotifyWindowSizePositionChange(Microsoft::WRL::ComPtr<IApplicationFrameWrapper> const &);
	long _OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long _OnNavigateToView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper const *);
	long _OnViewCreated(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _OnViewDestroyed(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _ProvideLegacyResources();
	long _ReLaunchApplicationIfPreviouslyOpen();
	long _RegisterForApplicationStateChanges();
	long _RegisterForLayoutChanges();
	long _RegisterWindowClasses();
	long _RemoveFromPresentationRegistration(NotesManager::ViewInfo const &);
	long _SendLockStateChanged(HWND__ *);
	long _SendPositionChangingInfo(HWND__ *,unsigned int);
	long _SendVisibilityChanged(HWND__ *,unsigned int,bool);
	long _SetDefaultIconForThumbnail(HWND__ *);
	long _SetFocusToAnotherView(bool);
	long _SetIconBitmap(int,int);
	long _SetViewSizeAndPosition(std::shared_ptr<NotesManager::ViewInfo> const &,tagSIZE,tagPOINT);
	long _SetViewSizeAndPosition(unsigned int,tagSIZE,tagPOINT);
	long _SetWindowVisibility(NotesManager::ViewInfo &,bool,NotesManager::NoteShowPreferences const &,bool);
	long _SetWindowVisibility(unsigned int,bool,NotesManager::NoteShowPreferences const &);
	long _ShowAsStandalone(NotesManager::ViewInfo &,unsigned int,NotesManager::NoteShowPreferences const &);
	long _ShowAsStandalone(unsigned int,unsigned int,NotesManager::NoteShowPreferences const &);
	long _ShowNotesBackgroundWindow(tagPOINT const &,HMONITOR__ * *);
	long _ShowView(NotesManager::ViewInfo &);
	long _ShowView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _ShowViewAsync(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _StartCloseApplication();
	long _StartDisableActivationTimeoutTimer(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long _StashPendingShowAsStandalone(unsigned int,unsigned int,NotesManager::NoteShowPreferences const &);
	long _StashPendingSizeAndPosition(unsigned int,tagSIZE const &,tagPOINT const &);
	long _StashPendingTrySetSize(unsigned int,tagSIZE const &);
	long _StashPendingVisibility(unsigned int,NotesManager::NoteShowPreferences const &);
	long _SubscribeToServicesInner(IServiceProvider *);
	long _TrySetSize(NotesManager::ViewInfo const &,tagSIZE const &,int *);
	long _UnRegisterForLayoutChanges();
	long _UnregisterForApplicationStateChanges();
	long _UpdateNotesApplicationName();
	long _UpdateWillStickyNotesBeUsingNewApis();
	long _WaitForWindowReadyForPresentation(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	static __int64 s_NotesBackgroundWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static __int64 s_TopWndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	static bool s_backgroundWindowClassRegistered;
	static long _CopyLegacyResources();
	static long _GetChromeOffsets(NotesManager::ViewInfo const &,tagRECT *);
	static long _GetHWNDsFromViewInfo(NotesManager::ViewInfo const &,HWND__ * *,HWND__ * *);
	static long _GetProcessIdFromWindow(HWND__ *,unsigned long *);
	static long _GetViewSizeAndPosition(std::shared_ptr<NotesManager::ViewInfo> const &,tagSIZE *,tagPOINT *);
	static long _HandleFocusOnWindowMessage(unsigned __int64,__int64);
	static long _HideView(NotesManager::ViewInfo const &);
	static long _SetShouldApplicationRestart(bool);
	static long _UpdateViewMinimumSize(NotesManager::ViewInfo const &);
	static void _DisableActivationTimeoutPolicyTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	static void _PositionChangingTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	static void _ResetActivationTimeoutPolicyTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	unsigned long _GetViewCount();
	virtual long CheckAreStickyNotesUsingNewApis(int *);
	virtual long GetNotesAppId(unsigned short * *);
	virtual long GetNotesThumbnailForPenWorkspace(unsigned int *,unsigned char * *);
	virtual long GetWindowSpatialData(unsigned int,unsigned int *,unsigned char * *);
	virtual long HideNote(unsigned int);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long IsFocusOnAnyNote(int *);
	virtual long IsNotesWindow(HWND__ *,int *);
	virtual long IsScreenLocked(int *);
	virtual long MoveIntoPenWorkspace(tagPOINT,HMONITOR__ * *);
	virtual long MoveOutOfPenWorkspace();
	virtual long OnApplicationStateChanged(unsigned short const *,PLM_STATE_CHANGE);
	virtual long OnChromeOffsetsChanged(IApplicationFrame *);
	virtual long OnCommand(IApplicationFrame *,_GUID const *,unsigned long);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long OnPositionChanged(IApplicationFrame *);
	virtual long PerformDelayedInitialization();
	virtual long RegisterCallback(INotesManagerCallback *,unsigned long *);
	virtual long SetFocusToNextView();
	virtual long SetFocusToPreviousView();
	virtual long SetNotesThumbnail(unsigned int,unsigned char *);
	virtual long SetThumbnailImageForTaskSwitcher(IWICBitmapSource *);
	virtual long SetWindowSpatialData(unsigned int,unsigned int,unsigned char *);
	virtual long SetWindowVisibility(unsigned int,int);
	virtual long SetWindowVisibilityWithOptions(unsigned int,int,NoteShowOptions *);
	virtual long ShowAsStandalone(unsigned int,unsigned int);
	virtual long ShowAsStandaloneWithOptions(unsigned int,unsigned int,NoteShowOptions *);
	virtual long ShowNote(unsigned int);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TrySetSize(unsigned int,tagSIZE,int *);
	virtual long UnRegisterCallback(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
	void ListenForWNFPackageUpdatedEvents();
	void OnPackageUpdatedEvent();
	void _HandlePositionChangingTimerReturn();
	void _RegisterTopWndClass();
	void _StartPositionChangingTimer();
	void _StopPositionChangingTimer();
public:
	NotesManager();
	long RuntimeClassInitialize();
	virtual ~NotesManager();
};

namespace NotesManagerTelemetry
{
	class CloseNotesApplicationActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(int);
		~CloseNotesApplicationActivity();
	};

	class GetNotesThumbnailForPenWorkspace
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(unsigned int,void *);
		~GetNotesThumbnailForPenWorkspace();
	};

	class HideNote
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~HideNote();
	};

	class IsScreenLocked
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(int);
		~IsScreenLocked();
	};

	class MoveIntoPenWorkspace
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(int);
		~MoveIntoPenWorkspace();
	};

	class MoveOutOfPenWorkspace
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(int);
		~MoveOutOfPenWorkspace();
	};

	class RegisterCallback
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *);
		void Stop(unsigned long);
		~RegisterCallback();
	};

	class SetFocusToNextView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SetFocusToNextView();
	};

	class SetFocusToPreviousView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SetFocusToPreviousView();
	};

	class SetNotesThumbnail
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,void *);
		~SetNotesThumbnail();
	};

	class SetThumbnailImageForTaskSwitcher
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SetThumbnailImageForTaskSwitcher();
	};

	class SetWindowSpatialData
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,unsigned int);
		~SetWindowSpatialData();
	};

	class SetWindowVisibility
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,bool,bool,bool);
		void Stop(bool);
		~SetWindowVisibility();
	};

	class ShowAsStandalone
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,unsigned int,bool,bool);
		void Stop(bool);
		~ShowAsStandalone();
	};

	class ShowNote
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~ShowNote();
	};

	class TrySetSize
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,tagSIZE);
		void Stop(int);
		~TrySetSize();
	};

	class UnRegisterCallback
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned long);
		~UnRegisterCallback();
	};

	class ViewCreatedActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(int,bool);
		~ViewCreatedActivity();
	};

	class ViewDestroyedActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(int,bool,bool);
		~ViewDestroyedActivity();
	};

};

struct NotesManagerTraceLogging
{
	class CopyLegacyResources
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CopyLegacyResources();
	};

	class CreateMainWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~CreateMainWindow();
	};

	class DisableActivationTimeout
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool);
		~DisableActivationTimeout();
	};

	class DisableActivationTimeoutTimerReturn
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool,bool,bool);
		~DisableActivationTimeoutTimerReturn();
	};

	class DisableActivationTimeoutTimerStart
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~DisableActivationTimeoutTimerStart();
	};

	class FixUpNoteWindowOwners
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(int);
		~FixUpNoteWindowOwners();
	};

	class FocusOnNextView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(HWND__ *);
		~FocusOnNextView();
	};

	class GetFrameWrapperInternal
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~GetFrameWrapperInternal();
	};

	class GetViewSizeAndPositionInternal
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *);
		void Stop(void *,tagSIZE const &,tagPOINT const &);
		~GetViewSizeAndPositionInternal();
	};

	class GetWindowSpatialData
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~GetWindowSpatialData();
	};

	class HandleFocusOnWindowMessage
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~HandleFocusOnWindowMessage();
	};

	class HandleMainWindowIconic
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~HandleMainWindowIconic();
	};

	class HandleMainWindowPositionChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~HandleMainWindowPositionChanged();
	};

	class HandleMainWindowRestore
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~HandleMainWindowRestore();
	};

	class HandlePenWorkspaceThumbnailBufferChange
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~HandlePenWorkspaceThumbnailBufferChange();
	};

	class HandleViewPendingWork
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *);
		~HandleViewPendingWork();
	};

	class InitializeNotesBackgroundWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~InitializeNotesBackgroundWindow();
	};

	class IsFocusOnAnyNote
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(HWND__ * const,int);
		~IsFocusOnAnyNote();
	};

	class MoveFocusToLastActiveWindow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(HWND__ *);
		~MoveFocusToLastActiveWindow();
	};

	class MoveWindowsInsideRect
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(tagRECT const &);
		void Stop(int);
		~MoveWindowsInsideRect();
	};

	class NotifyRequestFocusChange
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(int);
		~NotifyRequestFocusChange();
	};

	class OnViewCreatedInternal
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *);
		~OnViewCreatedInternal();
	};

	class ReLaunchApplicationIfPreviouslyOpen
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool);
		~ReLaunchApplicationIfPreviouslyOpen();
	};

	class ResetActivationTimeout
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool,bool,bool);
		~ResetActivationTimeout();
	};

	class SendLockStateChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SendLockStateChanged();
	};

	class SendPositionChangingInfo
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~SendPositionChangingInfo();
	};

	class SendVisibilityChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,bool);
		~SendVisibilityChanged();
	};

	class SetDefaultIconForThumbnail
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SetDefaultIconForThumbnail();
	};

	class SetFocusToAnotherView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(bool);
		void Stop(bool,HWND__ *);
		~SetFocusToAnotherView();
	};

	class SetIconBitmap
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool,bool,bool);
		~SetIconBitmap();
	};

	class SetViewSizeAndPositionInternal
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *,tagSIZE const &,tagPOINT const &);
		void Stop(HWND__ *,tagRECT const &);
		~SetViewSizeAndPositionInternal();
	};

	class SetWindowVisibilityInternalHide
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SetWindowVisibilityInternalHide();
	};

	class SetWindowVisibilityInternalShow
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *,bool,bool,bool);
		void Stop(HWND__ *,bool,bool,bool);
		~SetWindowVisibilityInternalShow();
	};

	class ShowAsStandaloneInternal
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *,unsigned int,bool,bool);
		~ShowAsStandaloneInternal();
	};

	class ShowViewInternal
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *);
		void Stop(HWND__ *,bool,bool,bool);
		~ShowViewInternal();
	};

	class ShowViewOuterInternal
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool);
		~ShowViewOuterInternal();
	};

	class StashPendingShowAsStandalone
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,unsigned int);
		~StashPendingShowAsStandalone();
	};

	class StashPendingSizeAndPosition
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,tagSIZE const &,tagPOINT const &);
		~StashPendingSizeAndPosition();
	};

	class StashPendingTrySetSize
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,tagSIZE const &);
		~StashPendingTrySetSize();
	};

	class StashPendingVisibility
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~StashPendingVisibility();
	};

	class TrySetSizeInternal
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *,tagSIZE const &);
		void Stop(void *,HWND__ *,int);
		~TrySetSizeInternal();
	};

	class UpdateNotesApplicationName
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~UpdateNotesApplicationName();
	};

	class UpdateViewMinimumSize
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(void *);
		void Stop(tagSIZE const &);
		~UpdateViewMinimumSize();
	};

	static void OnNavigateToViewInternal<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper const * &,bool &,bool &,bool &>(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper const * &,bool &,bool &,bool &);
	static void StashPendingSizeAndPositionGetViewCountFailed<long const &>(long const &);
};

namespace OOBE
{
	namespace Health
	{
		namespace details
		{
			struct HealthTrackingInfo
			{
				long ToString(unsigned short * *);
			};

			struct OOBEHealthTracker
			{
				OOBEHealthTracker();
				static void HandleEvent<15,long>(long);
				static void HandleEvent<18,bool>(bool);
				static void HandleEvent<19,long>(long);
				~OOBEHealthTracker();
			};

			class OOBEScenarioEvents
			{
				long Evaluate();
				long GetImageIdentifier(unsigned short * *);
				void ReadInfo(HealthInfoHeader &,int,bool &,bool &,unsigned short const *);
				void SetHealthEventValueMember<bool>(bool &,bool const &);
				void SetHealthEventValueMember<int>(int &,int const &);
				void SetHealthEventValueMember<long>(long &,long const &);
			public:
				void SetEventValue<19,long>(long);
			};

		};

	};

};

class OOBEExperienceManager
{
	long _ToggleDebuggingMode(bool);
	static bool s_ShouldDisableHotkeys();
	static long s_LaunchCommandPrompt();
protected:
	virtual bool v_ShouldHandleWorkAreaChange(unsigned long);
	virtual long v_OnSubscribeToServices(IServiceProvider *);
	virtual long v_OnUnsubscribeFromServices(IServiceProvider *);
	virtual long v_OnViewCreated();
	virtual unsigned long v_GetCurrentZBID();
	virtual void v_OnViewDestroyed();
public:
	OOBEExperienceManager();
	long RuntimeClassInitialize();
};

struct OneShotStopBehavior
{
	virtual long GetCallbackFilters(DuiBehaviorFilters::Flags *);
	virtual long OnGetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long,DirectUI::Element * *);
};

struct OneShotTimer
{
	virtual long Cancel();
	virtual long Start(unsigned long,ITimerCallback *);
};

class OpenWithTelemetry
{
	class OpenWithDialogActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(long,bool);
	};

protected:
	bool _GeneratePageContextStrings(unsigned short const *,_GUID const &,char *,unsigned __int64,char *,int);
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static void FeaturedAppInfo<unsigned short const * &,unsigned short const * &>(unsigned short const * &,unsigned short const * &);
	static void FindInPCButtonClicked<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,_GUID const &>(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,_GUID const &);
	static void OptionButtonClicked<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,_GUID const &>(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &,_GUID const &);
	void DialogDismissed_(unsigned short const *,_GUID const &);
	void DialogOpened_(unsigned short const *,_GUID const &);
	void FindInPCButtonClicked_(unsigned short const *,_GUID const &);
	void OptionButtonClicked_(unsigned short const *,_GUID const &);
	void TileInvoked_(unsigned short const *,_GUID const &);
};

struct OverlayModeTelemetry
{
	class EnterCompactOverlayModeForView
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IApplicationView *,tagSIZE,CompactOverlayEnterStyle);
		~EnterCompactOverlayModeForView();
	};

	static bool IsEnabled(unsigned char,unsigned __int64);
	static void ResizeCompactOverlayModeView<IApplicationView * &,tagSIZE &,tagSIZE const &>(IApplicationView * &,tagSIZE &,tagSIZE const &);
	void ResizeCompactOverlayModeView_(IApplicationView *,tagSIZE,tagSIZE);
};

struct OverrideScalingTelemetry
{
	void AppViewCompatPolicyChanged_(IApplicationView *,unsigned int);
};

class OwnedHWinEventHook<GamingOverlayExperienceManager>
{
	static std::unordered_map<HWINEVENTHOOK__ *,GamingOverlayExperienceManager *,std::hash<HWINEVENTHOOK__ *>,std::equal_to<HWINEVENTHOOK__ *>,std::allocator<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > m_eventHookOwners;
	static wil::critical_section m_eventHookOwnersCS;
public:
	static GamingOverlayExperienceManager * GetOwner(HWINEVENTHOOK__ *);
};

namespace PCSetting
{
	namespace HostID
	{
		_GUID const ClassicCPL;
		_GUID const ClassicCPLName;
		_GUID const PCSettings;
	};

};

struct PENDING_DISPLAY_CHANGE_NOTIFICATION
{
	PENDING_DISPLAY_CHANGE_NOTIFICATION(IImmersiveMonitorNotificationSync *,IImmersiveMonitor *,MONITOR_NOTIFICATION_TYPE,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS,unsigned long);
	~PENDING_DISPLAY_CHANGE_NOTIFICATION();
};

struct PWSExperienceManagerTelemetry
{
	class CustomApplicationLaunch
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool);
		~CustomApplicationLaunch();
	};

	class NotesApplicationLaunch
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool);
		~NotesApplicationLaunch();
	};

	static void InkWorkspace_LightDismissEvent();
	static void InkWorkspace_MenuTimeoutEvent();
};

struct PackagedApplicationExecuteCommand
{
	PackagedApplicationExecuteCommand();
	virtual long Execute();
	virtual long Initialize(unsigned short const *,IPropertyBag *);
};

struct ParsedAppLaunchUri
{
	static ParsedAppLaunchUri ParseFromUri(Windows::Foundation::IUriRuntimeClass *);
	~ParsedAppLaunchUri();
};

struct PenEventsAdapter
{
	long OnTailButtonClicked(ABI::Windows::Devices::Input::IPenButtonListener *,ABI::Windows::Devices::Input::IPenTailButtonClickedEventArgs *);
	long OnTailButtonDoubleClicked(ABI::Windows::Devices::Input::IPenButtonListener *,ABI::Windows::Devices::Input::IPenTailButtonDoubleClickedEventArgs *);
	long OnTailButtonLongPressed(ABI::Windows::Devices::Input::IPenButtonListener *,ABI::Windows::Devices::Input::IPenTailButtonLongPressedEventArgs *);
	long RuntimeClassInitialize(IClickNote *);
	virtual ~PenEventsAdapter();
};

class PenSignalManagerImpl
{
	long CloseInkWorkspace();
	long EnsureInkWorkspaceManager();
	long LaunchFirstRunExperience(unsigned short const *);
	long LaunchOrToggleInkWorkspace();
	long LaunchUri(unsigned short const *,unsigned short const *);
public:
	PenSignalManagerImpl();
	long RuntimeClassInitialize();
	virtual long IsFirstLaunch(int *);
	virtual long ReportPenAttached();
	virtual long ReportPenDetached();
};

struct PenSignalManagerTelemetry
{
	class PenSignalManager_FREApp_Launched
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~PenSignalManager_FREApp_Launched();
	};

	static void PenAttached();
	static void PenDetached();
	static void PenSignalManager_FREApp_Tips_Launched();
};

struct PenSignalSourceAdapter
{
	long OnDocked(ABI::Windows::Devices::Input::IPenDockListener *,ABI::Windows::Devices::Input::IPenDockedEventArgs *);
	long OnUndocked(ABI::Windows::Devices::Input::IPenDockListener *,ABI::Windows::Devices::Input::IPenUndockedEventArgs *);
	long RuntimeClassInitialize(IPenSignalManager *);
	virtual ~PenSignalSourceAdapter();
};

struct PendingQueuedEvent
{
	~PendingQueuedEvent();
};

namespace PerfTrack
{
	struct AppLaunchTelemetry
	{
		static bool IsEnabled(unsigned char,unsigned __int64);
		void AppLaunched_(Location,unsigned short const *);
	};

};

class PermissionsController
{
	static unsigned long s_BackgroundLoader(void *);
	static void s_LoadPermissionsProvider(PermissionsUI *,PermissionsProvider *);
	unsigned long _BackgroundLoader();
	void _LoadCapabilities(PermissionsUI *,int);
protected:
	long Initialize(PermissionsUI *,AppInfo *);
	long StartBackgroundLoad();
	virtual ~PermissionsController();
public:
	static long Create(PermissionsUI *,AppInfo *,PermissionsController * *);
};

class PermissionsProvider
{
protected:
	long Initialize(ISettingsProvider *,AppInfo *,_GUID const &);
public:
	long GetSettingsCollection(ISettingsCollection * *);
	long GetSettingsProvider(ISettingsProvider * *);
	static long Create(ISettingsProvider *,AppInfo *,_GUID const &,PermissionsProvider * *);
};

class PermissionsToggleController
{
protected:
	long Initialize(DirectUI::Element *,IBooleanSetting *,ISettingsProvider *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenerDetach(DirectUI::Element *);
	void _ShowErrorText(unsigned short const *);
public:
	static long Attach(DirectUI::Element *,IBooleanSetting *,ISettingsProvider *);
};

class PermissionsUI
{
	long AddLabelSettingToPermissions(ISetting *,DirectUI::Element *);
	long AddSettingToPermissions(ISetting *,ISettingsProvider *,DirectUI::Element *);
	long AddToggleSettingToPermissions(IBooleanSetting *,ISettingsProvider *,DirectUI::Element *);
	static DirectUI::IClassInfo * s_pClassInfo;
protected:
	long Initialize(AppInfo *,IPopupWindow *);
public:
	PermissionsUI();
	long AddCapability(unsigned short const *);
	long AddPermissionsProvider(PermissionsProvider *);
	long SetCapabilitiesHeader(int,int);
	long ShowGroupPolicyMessage();
	static long Create(AppInfo *,IPopupBase *,PermissionsUI * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual ~PermissionsUI();
	void SetInitialKeyFocus();
};

struct PlayToReceiverManagerTelemetry
{
	class OnShellRunningActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(bool,long);
		~OnShellRunningActivity();
	};

	class RunActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	};

	class SubscribeToShellReadyWnfActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	};

	static void TraceLoggingInfo(char const *,...);
};

struct PointerPromotedEvent
{
	static UID PointerPromoted;
};

namespace PositionerPropertySetHelpers
{
	long GetDetailsForActivation(IApplicationView *,IUnknown *,PositionerPropertySetHelpers::ActivationPropertyFlags *,PositionerPropertySetHelpers::ViewSizePreferences *);
	long GetDetailsForActivation(IApplicationView *,IUnknown *,PositionerPropertySetHelpers::ViewModeUsage *,Windows::Foundation::Size *,ViewModePreferencesHelpers::CompactOverlaySizeConstraints *);
};

class PreviousShareLink
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class ProgressTile
{
	long _InitUI(IShellTaskScheduler *);
	long _SetInfo();
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	long SetTextToDone();
	long ShowError();
	long StartDelayedAction();
	long UpdateStatus(int,unsigned short const *);
	static UID Canceled;
	static UID PerformDelayedAction;
	static long CreateAndInitialize(DirectUI::Element *,RUNNING_SHARE_INFO const &,int,IShellTaskScheduler *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
};

class ProjectCharmSession
{
	int FindAvailableMiracastDeviceUnderLock(unsigned short const *);
	long AddAvailableMiracastDeviceUnderLock(DeviceDisplayItem *);
	void RemoveAvailableMiracastDeviceUnderLock(unsigned short const *);
	void ShutdownDeviceUninstaller();
	void ShutdownMiracastConnectionUIEventForwarder();
public:
	ProjectCharmSession();
	virtual bool IsInitialMiracastDeviceEnumerationComplete();
	virtual bool ShouldShowDeviceListPage();
	virtual bool ShouldShowDisplaySwitchEntryPoint();
	virtual long ConnectUI(HWND__ *);
	virtual long DisconnectUI(HWND__ *);
	virtual long GetAvailableMiracastDevices(CCoSimpleArray<Microsoft::WRL::ComPtr<DeviceDisplayItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<DeviceDisplayItem> > > *);
	virtual long StartDeviceUninstall(unsigned short const *);
	virtual long StartMiracastDeviceEnumeration();
	virtual long StartNewConnection(unsigned short const *);
	virtual long Startup(bool);
	virtual void ForgetTerminatedConnection();
	virtual void GetCurrentConnection(IMiracastConnection * *);
	virtual void OnAvailableMiracastDeviceAdded(DeviceDisplayItem *);
	virtual void OnAvailableMiracastDeviceInitialEnumerationComplete();
	virtual void OnAvailableMiracastDeviceRemoved(unsigned short const *);
	virtual void OnAvailableMiracastDeviceUpdated(DeviceDisplayItem *);
	virtual void OnCurrentMiracastConnectionChanged();
	virtual void OnDeviceUninstallAttemptDone(long);
	virtual void Shutdown();
	virtual ~ProjectCharmSession();
};

class ProjectionManagerTelemetry
{
	class DoProjectionTaskActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int,HWND__ *,HWND__ *,unsigned short const *,unsigned short const *);
	};

	class HandleClosingProjectionAppActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	};

	class _DoProjectionTaskActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(PROJECTION_TASK_TYPE,HWND__ *,HWND__ *,unsigned short const *,unsigned short const *);
	};

	class _DoStartProjectingActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IImmersiveApplication *,IImmersiveApplication *,IImmersiveMonitor *,unsigned short const *,unsigned long,unsigned long);
		~_DoStartProjectingActivity();
	};

	class _DoStopProjectingActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void RevertScreenMode<bool &>(bool &);
		void StartActivity(IImmersiveApplication *,IImmersiveApplication *,unsigned long);
		~_DoStopProjectingActivity();
	};

	class _DoSwapDisplaysActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(IImmersiveApplication *,IImmersiveApplication *,IImmersiveMonitor *,unsigned long,unsigned long);
		~_DoSwapDisplaysActivity();
	};

	class _ValidateWindowsForProjectionTaskActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void IsDesktopAnchor<bool &>(bool &);
		void StartActivity(unsigned int,HWND__ *,HWND__ *);
	};

	static unsigned short const * GetTaskName(unsigned int);
public:
	static bool IsEnabled(unsigned char,unsigned __int64);
	static void TraceDbgMsg<unsigned short const (&)[111]>(unsigned short const (&)[111]);
	static void TraceDbgMsg<unsigned short const (&)[60],IImmersiveApplication * &,bool &>(unsigned short const (&)[60],IImmersiveApplication * &,bool &);
	static void TraceDbgMsg<unsigned short const (&)[66]>(unsigned short const (&)[66]);
	static void TraceDbgMsg<unsigned short const (&)[71]>(unsigned short const (&)[71]);
	static void TraceDbgMsg<unsigned short const (&)[72],HWND__ * &>(unsigned short const (&)[72],HWND__ * &);
	static void TraceDbgMsg<unsigned short const (&)[75]>(unsigned short const (&)[75]);
	static void TraceDbgMsg<unsigned short const (&)[83]>(unsigned short const (&)[83]);
	static void TraceDbgMsg<unsigned short const (&)[84],HWND__ * &>(unsigned short const (&)[84],HWND__ * &);
	static void TraceDbgMsg<unsigned short const (&)[95]>(unsigned short const (&)[95]);
	static void TraceDbgMsg<unsigned short const (&)[96]>(unsigned short const (&)[96]);
	static void TraceDbgMsg<unsigned short const (&)[97]>(unsigned short const (&)[97]);
	void TraceDbgMsg_(unsigned short const *,...);
};

struct ProxyMonitorInfo
{
	long SetHost(ImmersiveMonitorInfo *,DisplayChangeSource,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS *);
};

class PublicShellFeedbackBroker
{
	long FeedbackItemToFeedbackApp(Windows::Internal::Feedback::IFeedbackItem *,IFeedbackHubApp * *);
public:
	PublicShellFeedbackBroker();
	long RuntimeClassInitialize();
	virtual long Advise(IUnknown *,unsigned long *);
	virtual long EnumConnections(IEnumConnections * *);
	virtual long GetAumidFromAppListEntry(IUnknown *,unsigned short * *);
	virtual long GetConnectionInterface(_GUID *);
	virtual long GetConnectionPointContainer(IConnectionPointContainer * *);
	virtual long GetInstalledLegacyApps(IObjectArray * *);
	virtual long GetRunningApps(IObjectArray * *);
	virtual long GetScreenshotComment();
	virtual long IsRecordingRunning(unsigned char *);
	virtual long PauseRecording();
	virtual long ResumeRecording();
	virtual long StartCapture(HWND__ *,unsigned short const *);
	virtual long StartCaptureEx(HWND__ *,unsigned short const *,STRING_FEEDBACK_KIND);
	virtual long StartRecording(FEEDBACK_RECORDING,unsigned short const *);
	virtual long StopCapture();
	virtual long StopRecording();
	virtual long Unadvise(unsigned long);
	virtual long UpdateWindowAndIgnore(HWND__ *,unsigned int,unsigned int,unsigned int,unsigned int,unsigned char);
	virtual long add_CaptureProcessed(IUnknown *,unsigned long *);
	virtual long add_CaptureProcessing(ICaptureProcessingEventHandler *,unsigned long *);
	virtual long remove_CaptureProcessed(unsigned long);
	virtual long remove_CaptureProcessing(unsigned long);
};

namespace QueryStringSerializer
{
	long SerializeDirectQuery(QUERY_SOURCE,SEARCH_INVOKE_METHOD,unsigned short const *,unsigned int,unsigned int,unsigned short const *,unsigned short * *);
	long SerializeErrorFlags(unsigned int,unsigned short * *);
	long SerializeGPing(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
	long SerializePerfPing(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
	long SerializeSuggestion(unsigned short const *,QUERY_SOURCE,unsigned short const *,IObjectArray *,unsigned int,unsigned int,unsigned short const *,unsigned short * *);
};

class QuickLinkTile
{
	long _InitUI(QUICK_LINK_INFO_PRIV const *,IShellTaskScheduler *);
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	static long CreateAndInitialize(DirectUI::Element *,QUICK_LINK_INFO_PRIV const *,SHARABLE_ITEM_DESCRIPTOR const *,IShellTaskScheduler *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class QuietHoursService
{
	QuietHoursState GetCurrentState();
	bool IsProcessInExclusionList(unsigned short const *);
	long GetProcessPathOrAppIdFromHwnd(HWND__ *,unsigned short *,unsigned int);
	long SubscribeToAllMonitors();
	long SubscribeToMonitorEvents(IImmersiveMonitor *);
	long UnsubscribeFromAllMonitorEvents();
	long UnsubscribeFromOneMonitorEvents(IImmersiveMonitor *);
	void InitializeExclusionList();
	void RaiseWnfIfStateChanged();
	void TryWriteCurrentStateToRegistry();
	void WriteDetailedTelemetry(QuietHoursServiceTraceProvider::OnRudeWindowStateChange &,HWND__ *,unsigned short const *,bool,unsigned short const *);
public:
	QuietHoursService();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnGameFocusChange(unsigned char);
	virtual long OnRudeWindowStateChange(RudeWindowStateChangeFlags,HWND__ *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~QuietHoursService();
};

namespace QuietHoursServiceTraceProvider
{
	class DisplaySettingsChange
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~DisplaySettingsChange();
	};

	class OnGameFocusChange
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(bool);
	};

	class OnRudeWindowStateChange
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	};

	class RaiseWnfIfStateChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		void Stop(unsigned int,bool,bool,bool);
		~RaiseWnfIfStateChanged();
	};

	class SubscribeToAllMonitors
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~SubscribeToAllMonitors();
	};

	class UnsubscribeFromAllMonitorEvents
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
	};

};

struct RadialControllerMenuItemInvokedArgs
{
	RadialControllerMenuItemInvokedArgs();
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_ItemId(unsigned int *);
	virtual long put_ItemId(unsigned int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

namespace ReaderWriterLock
{
	struct ScopedRead
	{
		~ScopedRead();
	};

	struct ScopedWrite
	{
		~ScopedWrite();
	};

};

struct RearrangeAutoScrollCancelEvent
{
	static UID RearrangeAutoScrollCancel;
};

struct RearrangeAutoScrollCompleteEvent
{
	static UID RearrangeAutoScrollComplete;
};

struct RearrangeAutoScrollEvent
{
	static UID RearrangeAutoScroll;
};

struct RearrangeEvent
{
	static UID Rearrange;
};

struct RemoteAppBrokerFactory
{
	RemoteAppBrokerFactory();
	long RuntimeClassInitialize();
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
	virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
	virtual long LockServer(int);
	virtual long PerformDelayedInitialization();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~RemoteAppBrokerFactory();
};

struct RemoteAppImmersiveIconBroker
{
	long RuntimeClassInitialize();
	virtual long RetrieveImmersiveIcon(HWND__ *,unsigned int,unsigned int,HBITMAP__ * *);
};

struct RemoteAppPrivilegedOperationBroker
{
	long RuntimeClassInitialize(IPrivilegedPresentationOperations *,IPrivilegedArrangementOperations *);
	virtual long SetWindowCloaked(HWND__ *,int);
	virtual long SetWindowSnapArrangement(HWND__ *,tagRECT const *);
};

struct RetailDemoHost
{
	RetailDemoHost();
	long RuntimeClassInitialize();
	virtual long CreateAndInitializeRetailDemoUserAgent();
	virtual long GetRetailDemoUserAgent(_GUID const &,void * *);
	virtual long PerformDelayedInitialization();
};

struct RoVariant
{
	struct Accessor
	{
		long GetBoolean(unsigned char *);
		long GetSize(Windows::Foundation::Size *);
		long GetString(HSTRING__ * *);
	};

	struct OutRef
	{
		~OutRef();
	};

	RoVariant(IInspectable *,bool);
	~RoVariant();
};

struct RpcOptionsHelper
{
	static long GetRpcOptions(IUnknown *,bool,IRpcOptions * *);
};

struct RtlNameValueArray
{
	long Insert(unsigned short const *,unsigned short const *,unsigned short const *,unsigned __int64);
	unsigned short const * GetValue(unsigned __int64);
	void Free();
};

struct RudeWindowManagerClassFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

class RudeWindowTraceLogging
{
	class CalculateRudeWindows
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void FullscreenWindow(IRudeWindowWin32Functions *,HWND__ *);
		void GetWindowRectFailed(HWND__ *);
		void MonitorRudeness(IRudeWindowWin32Functions *,tagRECT const &,bool,HWND__ *,HWND__ *);
		void StartActivity(RecalculateRudeWindowsReason,HWND__ *);
		~CalculateRudeWindows();
	};

	static unsigned short const * const * const s_recalculateReasonStrings;
};

struct RudeWindowWin32Functions
{
	static RudeWindowWin32Functions s_instance;
	virtual HMONITOR__ * MonitorFromWindow(HWND__ *,unsigned long);
	virtual bool GetWindowRectForFullscreenCheck(HWND__ *,tagRECT *);
	virtual bool IsAppWindow(HWND__ *);
	virtual bool IsHolographic(HWND__ *);
	virtual bool IsOverpanning(HWND__ *);
	virtual bool IsValidDesktopFullscreenWindow(HWND__ *);
	virtual bool IsWindowAlwaysOnTopDesktop(HWND__ *);
	virtual bool IsWindowCloaked(HWND__ *);
	virtual bool IsWindowMinimized(HWND__ *);
	virtual bool IsWindowOnMonitor(HWND__ *,IImmersiveMonitor *);
	virtual bool IsWindowRelatedForFullscreen(HWND__ *,HWND__ *);
	virtual int EnumWindows(int (*)(HWND__ *,__int64),__int64);
	virtual int GetClassNameW(HWND__ *,unsigned short *,int);
	virtual int InternalGetWindowText(HWND__ *,unsigned short *,int);
	virtual int IsWindow(HWND__ *);
	virtual int IsWindowVisible(HWND__ *);
	virtual long GlobalRudeWindowNotifications_CreateInstance(unsigned long,_GUID const &,void * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual unsigned long AddRef();
	virtual unsigned long GetExStyleFromWindow(HWND__ *);
	virtual unsigned long GetStyleFromWindow(HWND__ *);
	virtual unsigned long Release();
};

struct SP<unsigned char,SP_HLOCAL<unsigned char> >
{
	void Reset();
};

namespace SQM
{
	unsigned short const * CensorAppID(unsigned short const *);
};

struct STAThreadPool
{
	static long QueueEventInvocation<Windows::Storage::Pickers::Provider::IFileRemovedEventArgs,CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs *,CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> > >(CInvoker<Windows::Storage::Pickers::Provider::IFileOpenPickerUI *,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs *,CPickerBasketBase<Windows::Storage::Pickers::Provider::IFileOpenPickerUI,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *>,CFileRemovedEventArgs>,Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI *,Windows::Storage::Pickers::Provider::FileRemovedEventArgs *> >,Windows::Storage::Pickers::Provider::IFileRemovedEventArgs *,Windows::Internal::TaskApartment,void *);
};

class ScaleFactorCache
{
protected:
	static int UpdateScaleFactorForMonitor(HMONITOR__ *,HDC__ *,tagRECT *,__int64);
	static void UpdateScaleFactorTimerCallback(void *,unsigned char);
	void SaveScaleFactors();
	void UpdateScaleFactors();
public:
	static void ScheduleScaleFactorUpdate();
};

class ScaleFactorInfo
{
protected:
	static void SqmScaleFactorChanged(ScaleFactorInfo::ContextOperation,unsigned int);
public:
	ScaleFactorInfo(unsigned short const *);
	void RemoveStaleScaleFactors();
	void UpdateScaleFactor(unsigned int);
};

namespace ScalingCompatTelemetry
{
	struct CScalingCompatTelemetry
	{
		void ScalingCompatCalulationInvoked_(AppType,unsigned int,unsigned int);
	};

};

class SettingsButton
{
	long _InitItem(unsigned short const *,unsigned short const *,IPopupBase *,ICommandInvoker *);
public:
	static DirectUI::IClassInfo * Class;
	static long Create(unsigned short const *,unsigned short const *,IPopupBase *,ICommandInvoker *,DirectUI::Element *,unsigned long *,DirectUI::Element * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnEvent(DirectUI::Event *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class SettingsController
{
	long _RetrieveAppCommands();
	long _ScheduleLoadAppCommands();
	long _StartTimers();
	void _AddAccountsButton();
	void _AddAppCommandElements();
	void _CleanUp();
	void _Close();
	void _FireTimerEvent(UID);
	void _HandleHomeAndEndKeys(DirectUI::KeyboardEvent *);
	void _HandleSpecialButtons(DirectUI::Element *);
	void _LaunchAccountsSettingsUI();
	void _LaunchPermissionsUI();
	void _LaunchPrivacyPolicy();
	void _LaunchRateAndReview();
	void _ShowAppCommands(bool);
	void _ShowProgressUI();
	void _ShowSystemAppCommands();
	void _StopTimers();
	void _TransitionApplicationPaneContent(DirectUI::Element *,TRANSITION_CONTENT_TYPE);
protected:
	SettingsController();
	long Initialize(SettingsUI *,AppInfo *);
	virtual ~SettingsController();
public:
	long OnDismissCommand(IPopupWindow *);
	static long Create(SettingsUI *,AppInfo *,SettingsController * *);
	static void s_DoContentTransition(DirectUI::Element *,DirectUI::Element *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnListenedInput(DirectUI::Element *,DirectUI::InputEvent *);
};

namespace SettingsPaneTelemetry
{
	namespace SettingsAppActivityTelemetry
	{
		class SettingsAppHotkey
		{
		protected:
			virtual bool WasAlreadyReportedToTelemetry(long);
			virtual void StopActivity();
		public:
			void StartActivity();
			~SettingsAppHotkey();
		};

	};

};

class SettingsUI
{
	static DirectUI::IClassInfo * s_pClassInfo;
	void _RefreshScale();
protected:
	long Initialize(AppInfo *,IPopupWindow *);
public:
	SettingsUI();
	long AddProgressUI(unsigned short const *);
	long Show(IImmersiveMonitor *);
	static long Create(AppInfo *,IPopupBase *,SettingsUI * *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnHosted(DirectUI::Element *);
	virtual void OnListenedEvent(DirectUI::Element *,DirectUI::Event *);
	virtual void OnUnHosted(DirectUI::Element *);
	virtual ~SettingsUI();
	void AddHeaderInfo(unsigned short const *,unsigned short const *,bool);
	void RefreshShowKeyFocusState();
	void SetDefaultFocusableElement();
};

struct SettingsUIEvent
{
	static UID AppCommandsRetrieved;
	static UID MaxProgressComplete;
	static UID MinProgressComplete;
	static UID ShowProgress;
};

class ShStrW
{
	long _SetStr(char const *,unsigned long);
public:
	long SetSize(unsigned long);
	void Reset();
	~ShStrW();
};

struct SharableItemSelectionChangeEvent
{
	static UID SelectionChange;
};

class SharableItemSelectorButton
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnHosted(DirectUI::Element *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class SharableItemTile
{
	long _InitUI(SHARABLE_ITEM_DISPLAY_INFO *,IShellTaskScheduler *);
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	static long CreateAndInsert(unsigned long,IDataTransferBroker *,IShellTaskScheduler *,DirectUI::Element *);
	static long Register();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void OnHosted(DirectUI::Element *);
	virtual void OnPropertyChanged(DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
};

class SharingUI
{
	long FilterExtensionListForAllowedTargets(IExtensionList *,IExtensionList * *);
	long HandleMinShareIfNecessary();
	long _ActivateStore();
	long _AddContextMenuBehavior(DirectUI::Element *);
	long _CreateConditionHelper(EXTENSIONLIST_PINNED_OPTION,EXTENSIONLIST_HIDDEN_OPTION,EXTENSIONLIST_USAGE_OPTION,ICondition * *);
	long _EnsureTileFactory();
	long _EnumApplications(DirectUI::Element *,unsigned int *);
	long _EnumApps(IExtensionList *,unsigned int,IExtensionList *,DirectUI::Element *,unsigned int *);
	long _EnumMFUApps(IExtensionList *,unsigned int,DirectUI::Element *,IExtensionList * *,unsigned int *);
	long _EnumPinnedApps(IExtensionList *,unsigned int,DirectUI::Element *,unsigned int *);
	long _EnumSharingTargets();
	long _EnumShortcuts(DirectUI::Element *,unsigned int *);
	long _GetDataFormatsQuery(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
	long _GetExtensionsAndDataFormats();
	long _GetFileExtensionsQuery(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
	long _SyncAppSectionVisibility(DirectUI::Element *,unsigned int *);
	long _TransitionContentTo(DirectUI::Element *);
	static DirectUI::IClassInfo * s_pClassInfo;
	virtual long _PopulateUI(IUnknown *);
	virtual ~SharingUI();
	void _ActivateApplication(DirectUI::Event *);
	void _ActivateShortcut(DirectUI::Event *);
	void _CleanupExtensionsAndDataFormats();
	void _ConvertHResultIntoUserMessage(ShareSqmSourceAppErrorType,long,unsigned short const *,bool);
	void _ReportError(ERROR_DISPLAY_FLAGS,unsigned int,unsigned short const *);
	void _SelectSharableItem(unsigned long);
	void _ShowSelectorFlyout(DirectUI::Element *);
	void _StopTimers();
	void _TransitionViewTo(DirectUI::Element *,bool);
	void _UpdateAccName();
	void _UpdateDescription(DirectUI::Element *);
	void _UpdateMainView();
protected:
	virtual float _GetSetFocusDelay();
public:
	SharingUI();
	virtual DirectUI::IClassInfo * GetClassInfoW();
	virtual void FireEtwEndEvent(long);
	virtual void OnDestroy();
	virtual void OnEvent(DirectUI::Event *);
};

struct SharingUIRefreshEvent
{
	static UID FetchCompleted;
	static UID ProgressShownMaximum;
	static UID ProgressShownMinimum;
	static UID ShowProgress;
};

struct ShellDragUIOverride
{
	virtual long AttachContent(unsigned __int64,tagSIZE *,tagPOINT *,IInspectable * *);
	virtual long GetCaption(unsigned short * *);
	virtual long GetCaptionVisibility(int *);
	virtual long GetContentVisibility(int *);
	virtual long GetGlyphVisibility(int *);
};

struct ShellDropTarget
{
	ShellDropTarget();
	long RuntimeClassInitialize();
	virtual long Cancel(IDragDropArgsPriv *);
	virtual long DragEnter(IDragDropArgsPriv *,IDragUIOverridePriv * *);
	virtual long DragLeave(IDragDropArgsPriv *);
	virtual long DragOver(IDragDropArgsPriv *,IDragUIOverridePriv * *);
	virtual long Drop(IDragDropArgsPriv *);
	virtual long GetDragViewTracker(IDragViewTracker * *);
	virtual long GetReentrancyModel(DROPTARGETREENTRANCYMODEL *,unsigned int *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~ShellDropTarget();
};

struct ShellExperienceAppidRegistration
{
	long Initialize(Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *> *,HSTRING__ *,HSTRING__ *,Windows::Internal::Shell::Experience::ShellExperienceRegistrationFlags,Windows::Internal::Shell::ViewManagerInterop::IViewEventDispatcher *);
};

namespace ShellExperienceDispatcherTelemetry
{
	class Invoke
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(Windows::Internal::Shell::ViewManagerInterop::ViewEventType,unsigned int,unsigned short const *);
		~Invoke();
	};

};

namespace ShellExperienceHelpers
{
	namespace Internal
	{
		class ProxyModalWindow
		{
			virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
		public:
			ProxyModalWindow();
			long RuntimeClassInitialize(HWND__ *,HWND__ *,IPrivilegedForegroundOperations *);
			virtual void Destroy();
			virtual void EnableForegroundTransferring();
		};

	};

	class ModalWindowHelper
	{
		bool SetForegroundWindowWithPrivilegedOperation(IPrivilegedForegroundOperations *,HWND__ *);
	public:
		long StartModal(HWND__ *,HWND__ *,ModalWindowHelper::StartModalFlags,IPrivilegedWindowOwnershipOperations *,IPrivilegedForegroundOperations *);
		void StopModal(ModalWindowHelper::StopModalFlags,IPrivilegedForegroundOperations *);
	};

	class NavigationLevelOverrideHelper
	{
		long NavigateView(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	public:
		long DisableOverride(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
		long EnableOverride(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
		long Navigate(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::NavigationLevel);
	};

	long SetWindowOwner(HWND__ *,HWND__ *);
	void FixRelativeZOrderingBeforeOwnership(HWND__ *,HWND__ *);
};

struct ShellExperienceListener
{
	long Initialize(HSTRING__ *,CRefCountedObject<ShellExperienceAppidRegistration> *,EventRegistrationToken,Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::Experience::ShellExperienceDispatcher *,Windows::Internal::Shell::Experience::IShellExperienceViewStateChangedEventArgs *> *);
	~ShellExperienceListener();
};

namespace ShellExperienceUtils
{
	HWND__ * WindowFromViewWrapper(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
};

struct ShellExperienceView
{
	~ShellExperienceView();
};

struct ShellImmersiveComponentCreator
{
	ShellImmersiveComponentCreator();
};

namespace ShellMRTHelper
{
	namespace Common
	{
		RESOURCE_SCALE ScaleFactorToResourceScale(DEVICE_SCALE_FACTOR);
		bool HasFileUriScheme(HSTRING__ *);
		bool HasMsAppDataUriScheme(HSTRING__ *);
		bool HasMsAppXUriScheme(HSTRING__ *);
		bool HasMsResourceUriScheme(HSTRING__ *);
		long ConvertMsAppXUriToMsResourceUri(HSTRING__ *,unsigned short * *);
		long ConvertMsAppXUriToMsResourceUri(Windows::Foundation::IUriRuntimeClass *,unsigned short * *);
		long TryFallbackToFilePath(HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ * *);
		unsigned short const * const c_fileUriScheme;
		unsigned short const * const c_msAppDataUriScheme;
		unsigned short const * const c_msAppXUriScheme;
		unsigned short const * const c_msResourceUriFilesPathPrefix;
		unsigned short const * const c_msResourceUriScheme;
		unsigned short const * const c_msResourcesRedirectFolderName;
	};

	class MRTHelperBase
	{
		long InitializeMRTObjects();
		long Resolve(MRTHelperBase::MRTResolutionType,unsigned short const *,unsigned short * *);
	public:
		long ResolvePath(unsigned short const *,unsigned short * *);
		~MRTHelperBase();
	};

};

class ShellTargetingTracker
{
	void QueueTargetChangeNotifications();
	void UpdateTarget(SHELL_TARGET_IDENTIFIER,IApplicationView *);
public:
	ShellTargetingTracker();
	long RuntimeClassInitialize();
	virtual long GetTarget(SHELL_TARGET_IDENTIFIER *,IApplicationView * *);
	virtual long InvokeBackContract(SHELL_TARGET_IDENTIFIER);
	virtual long OnApplicationViewChanged(IApplicationView *,APPLICATION_VIEW_CHANGE,IUnknown *);
	virtual long RegisterContract(SHELL_TARGET_IDENTIFIER,SHELL_TARGET_CONTRACT_FLAGS,IShellTargetingContractNotification *,unsigned long *);
	virtual long RegisterForTargetingChanges(IShellTargetingChangeNotification *,unsigned long *);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterContract(unsigned long);
	virtual long UnregisterForTargetingChanges(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~ShellTargetingTracker();
};

class SimpleWindowChainLink
{
protected:
	virtual char const * v_GetClassName();
public:
	SimpleWindowChainLink();
	virtual long get_Window(unsigned int *);
};

struct SingleViewExperienceTelemetry
{
	class CancelWaitForWindowReadyForPresentation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~CancelWaitForWindowReadyForPresentation();
	};

	class Hide
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void Stop(unsigned int);
		~Hide();
	};

	class Launch
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,void *);
		~Launch();
	};

	class OnClientWindowReadinessProcessed
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned int);
		void Stop(unsigned int);
		~OnClientWindowReadinessProcessed();
	};

	class OnEventQueued
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *);
		~OnEventQueued();
	};

	class OnPropertyChanged
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~OnPropertyChanged();
	};

	class Reactivate
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned short const *);
		~Reactivate();
	};

	class Show
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned int,void *);
		void Stop(unsigned int);
		~Show();
	};

	class Uncloak
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *);
		~Uncloak();
	};

	class WaitForWindowReadyForPresentation
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned short const *,unsigned int,bool,bool,bool);
		void Stop(unsigned short const *,unsigned short const *);
		~WaitForWindowReadyForPresentation();
	};

	static void TrayFlyoutLaunchedByWindow<Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &>(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
};

class SingleViewLightDismissHelper
{
	long EnsureLightDismissProvider();
	long InternalRegisterWithLightDismiss(LIGHT_DISMISS_FLAGS,ILightDismissNotification *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
public:
	long RegisterWithLightDismiss(LIGHT_DISMISS_FLAGS,ILightDismissNotification *,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	long UpdateLightDismiss(LIGHT_DISMISS_FLAGS,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *);
	void UnregisterWithLightDismiss();
	~SingleViewLightDismissHelper();
};

struct SingleViewShellExperienceEventHandler
{
	virtual long CreatePersonality(CSingleViewShellExperience *,wistd::unique_ptr<SingleViewShellExperiencePersonality,wistd::default_delete<SingleViewShellExperiencePersonality> > *);
	virtual long OnApplicationActivatedForLaunch(CSingleViewShellExperience *,long);
	virtual long OnEventQueued(CSingleViewShellExperience *,HSTRING__ *,Windows::Foundation::Collections::IPropertySet *);
	virtual long OnIdleStateChanged(CSingleViewShellExperience *,bool);
	virtual long OnPriorityBoostRequested(CSingleViewShellExperience *);
	virtual long OnPriorityUnboostRequested(CSingleViewShellExperience *);
	virtual long OnSetForegroundFailed(CSingleViewShellExperience *);
	virtual long OnViewCloaking(CSingleViewShellExperience *);
	virtual long OnViewCreated(CSingleViewShellExperience *);
	virtual long OnViewDestroyed(CSingleViewShellExperience *);
	virtual long OnViewDestroying(CSingleViewShellExperience *);
	virtual long OnViewHidden(CSingleViewShellExperience *);
	virtual long OnViewPropertiesChanging(CSingleViewShellExperience *);
	virtual long OnViewShowing(CSingleViewShellExperience *);
	virtual long OnViewShown(CSingleViewShellExperience *);
	virtual long OnViewUncloaked(CSingleViewShellExperience *);
	virtual long OnViewUncloaking(CSingleViewShellExperience *);
	virtual long OnVisibilityRevokedChanged(CSingleViewShellExperience *);
};

struct SingleViewShellExperiencePersonality
{
	virtual long Initialize(IServiceProvider *);
};

struct SmartCookie
{
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),CSharePickerExperienceManager *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),CSharePickerExperienceManager *);
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),CompactOverlayManager *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),CompactOverlayManager *);
	long Register<IApplicationViewCollection,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),EnterpriseChromeManager *>(IApplicationViewCollection *,long ( IApplicationViewCollection::*)(IApplicationViewChangeListener *,unsigned long *),long ( IApplicationViewCollection::*)(unsigned long),EnterpriseChromeManager *);
	long Register<IFullScreenPositionerNotificationService,long ( IFullScreenPositionerNotificationService::*)(IFullScreenPositionerNotification *,unsigned long *),long ( IFullScreenPositionerNotificationService::*)(unsigned long),FullscreenEventListener *>(IFullScreenPositionerNotificationService *,long ( IFullScreenPositionerNotificationService::*)(IFullScreenPositionerNotification *,unsigned long *),long ( IFullScreenPositionerNotificationService::*)(unsigned long),FullscreenEventListener *);
	long Register<IGameFocusNotificationService,long ( IGameFocusNotificationService::*)(IGameFocusEvents *,unsigned long *),long ( IGameFocusNotificationService::*)(unsigned long),QuietHoursService *>(IGameFocusNotificationService *,long ( IGameFocusNotificationService::*)(IGameFocusEvents *,unsigned long *),long ( IGameFocusNotificationService::*)(unsigned long),QuietHoursService *);
	long Register<IImmersiveApplicationNotificationService,long ( IImmersiveApplicationNotificationService::*)(IImmersiveApplicationNotification *,unsigned long *),long ( IImmersiveApplicationNotificationService::*)(unsigned long),EnterpriseChromeManager *>(IImmersiveApplicationNotificationService *,long ( IImmersiveApplicationNotificationService::*)(IImmersiveApplicationNotification *,unsigned long *),long ( IImmersiveApplicationNotificationService::*)(unsigned long),EnterpriseChromeManager *);
	long Register<IImmersiveMonitorNotificationService,long ( IImmersiveMonitorNotificationService::*)(IImmersiveMonitorNotification *,unsigned long *),long ( IImmersiveMonitorNotificationService::*)(unsigned long),CGlobalRudeWindowManager *>(IImmersiveMonitorNotificationService *,long ( IImmersiveMonitorNotificationService::*)(IImmersiveMonitorNotification *,unsigned long *),long ( IImmersiveMonitorNotificationService::*)(unsigned long),CGlobalRudeWindowManager *);
	long Register<IImmersiveMonitorNotificationService,long ( IImmersiveMonitorNotificationService::*)(IImmersiveMonitorNotification *,unsigned long *),long ( IImmersiveMonitorNotificationService::*)(unsigned long),CompactOverlayManager *>(IImmersiveMonitorNotificationService *,long ( IImmersiveMonitorNotificationService::*)(IImmersiveMonitorNotification *,unsigned long *),long ( IImmersiveMonitorNotificationService::*)(unsigned long),CompactOverlayManager *);
	long Register<IImmersiveMonitorNotificationService,long ( IImmersiveMonitorNotificationService::*)(IImmersiveMonitorNotification *,unsigned long *),long ( IImmersiveMonitorNotificationService::*)(unsigned long),QuietHoursService *>(IImmersiveMonitorNotificationService *,long ( IImmersiveMonitorNotificationService::*)(IImmersiveMonitorNotification *,unsigned long *),long ( IImmersiveMonitorNotificationService::*)(unsigned long),QuietHoursService *);
	long Register<IImmersiveShellHookService,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,CGlobalRudeWindowManager *>(IImmersiveShellHookService *,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,CGlobalRudeWindowManager *);
	long Register<IImmersiveShellHookService,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,CompactOverlayManager *>(IImmersiveShellHookService *,long ( IImmersiveShellHookService::*)(unsigned __int64 const *,unsigned int,IImmersiveShellHookNotification *,unsigned long *),long ( IImmersiveShellHookService::*)(unsigned long),unsigned __int64 const *,unsigned int,CompactOverlayManager *);
	long Register<IImmersiveWindowMessageService,long ( IImmersiveWindowMessageService::*)(unsigned int,IImmersiveWindowMessageNotification *,unsigned long *),long ( IImmersiveWindowMessageService::*)(unsigned long),int,CSharePickerExperienceManager *>(IImmersiveWindowMessageService *,long ( IImmersiveWindowMessageService::*)(unsigned int,IImmersiveWindowMessageNotification *,unsigned long *),long ( IImmersiveWindowMessageService::*)(unsigned long),int,CSharePickerExperienceManager *);
	long Register<IMultitaskingViewVisibilityService,long ( IMultitaskingViewVisibilityService::*)(IMultitaskingViewVisibilityNotification *,unsigned long *),long ( IMultitaskingViewVisibilityService::*)(unsigned long),CompactOverlayManager *>(IMultitaskingViewVisibilityService *,long ( IMultitaskingViewVisibilityService::*)(IMultitaskingViewVisibilityNotification *,unsigned long *),long ( IMultitaskingViewVisibilityService::*)(unsigned long),CompactOverlayManager *);
	long Register<IRudeWindowManager,long ( IRudeWindowManager::*)(IRudeWindowManagerEvents *,unsigned long *),long ( IRudeWindowManager::*)(unsigned long),FullscreenEventListener *>(IRudeWindowManager *,long ( IRudeWindowManager::*)(IRudeWindowManagerEvents *,unsigned long *),long ( IRudeWindowManager::*)(unsigned long),FullscreenEventListener *);
	long Register<IRudeWindowManager,long ( IRudeWindowManager::*)(IRudeWindowManagerEvents *,unsigned long *),long ( IRudeWindowManager::*)(unsigned long),QuietHoursService *>(IRudeWindowManager *,long ( IRudeWindowManager::*)(IRudeWindowManagerEvents *,unsigned long *),long ( IRudeWindowManager::*)(unsigned long),QuietHoursService *);
	long Register<IVirtualDesktopNotificationService,long ( IVirtualDesktopNotificationService::*)(IVirtualDesktopNotification *,unsigned long *),long ( IVirtualDesktopNotificationService::*)(unsigned long),CGlobalRudeWindowManager *>(IVirtualDesktopNotificationService *,long ( IVirtualDesktopNotificationService::*)(IVirtualDesktopNotification *,unsigned long *),long ( IVirtualDesktopNotificationService::*)(unsigned long),CGlobalRudeWindowManager *);
	long Unregister();
	~SmartCookie();
};

namespace SnapLayoutHelpers
{
	struct SNAP_TARGET_DATA
	{
		SNAP_TARGET_DATA();
		void Reset();
	};

	struct SNAP_TARGET_METRICS
	{
		bool HasCornerTargets();
		bool HasHorizontalTargets();
		bool HasVerticalTargets();
	};

	Geometry::CRect DetermineDefaultSnapRegionRect(SnapRegion,Geometry::CRect const &);
	Geometry::CRect ExtendIfTopAlignedQuadrant(IApplicationView *,Geometry::CRect const &,Geometry::CRect const &);
	SnapLayoutHelpers::ExtendRectFlags DetermineExtendRectFlagsFromRegion(SnapRegion);
	SnapRegion DetermineSnapRegionForView(IApplicationView *);
	SnapRegion DetermineSnapRegionFromMonitorWorkArea(Geometry::CRect const &,IImmersiveMonitor *);
	SnapRegion DetermineSnapRegionFromPoint(Geometry::CPoint const &,IImmersiveMonitor *,bool);
	bool AreQuadrantsEnabled();
	bool HasComplementaryHorizontalEdge(SnapRegion,SnapRegion,SnapLayoutHelpers::Edge *);
	bool HasComplementaryVerticalEdge(SnapRegion,SnapRegion,SnapLayoutHelpers::Edge *);
	bool HasNonComplementaryEdge(SnapRegion,SnapRegion,SnapLayoutHelpers::Edge *);
	bool IntersectsWithErrorThreshold(Geometry::CRect const &,Geometry::CRect const &,int);
	bool IsBetterFillCandidate(ISnappedWindow *,SnapLayoutHelpers::FillRule,SnapLayoutHelpers::Edge,ISnappedWindow *,SnapLayoutHelpers::FillRule,SnapLayoutHelpers::Edge);
	bool IsBetterFillRule(SnapLayoutHelpers::FillRule,SnapLayoutHelpers::FillRule);
	bool IsHorizontalEdge(SnapLayoutHelpers::Edge);
	bool IsSmartFillSettingEnabled(IImmersiveSettingsCache *);
	bool IsSnappedWindow(IApplicationView *,Geometry::CRect const &);
	bool IsValidSnapRegion(SnapRegion);
	bool IsVerticalEdge(SnapLayoutHelpers::Edge);
	int ComputeOcclusionErrorThresholdForView(IApplicationView *);
	long ComputeSnapTargetDataForRegion(SnapRegion,SnapLayoutHelpers::SNAP_TARGET_METRICS const *,IImmersiveMonitor *,SnapLayoutHelpers::SNAP_TARGET_DATA *);
	long ComputeSnapTargetDataForRegionHelper(SnapRegion,SnapLayoutHelpers::SNAP_TARGET_METRICS const *,IImmersiveMonitor *,SnapLayoutHelpers::SNAP_TARGET_DATA *);
	long DetermineFillWindow(SnapRegion,CCoSimpleArray<Microsoft::WRL::ComPtr<ISnappedWindow>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ISnappedWindow> > > const &,bool (*)(SnapLayoutHelpers::Edge),bool (*)(SnapRegion,SnapRegion,SnapLayoutHelpers::Edge *),Geometry::CRect const &,ISnappedWindow * *,SnapLayoutHelpers::FillRule *,SnapLayoutHelpers::Edge *);
	long GetRectForRegion(SnapRegion,ISnappedWindow *,SnapLayoutHelpers::SnapLayoutFlags,IImmersiveMonitor *,CCoSimpleArray<Microsoft::WRL::ComPtr<ISnappedWindow>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<ISnappedWindow> > > const &,tagRECT *,tagRECT *,SnapLayoutHelpers::SMART_FILL_OUTPUT *);
	long IsUnoccluded(IApplicationView *,IObjectArray *,IApplicationView *,bool *);
	long RepositionToHorizontalTarget(Geometry::CRect const &,SnapRegion,SnapLayoutHelpers::Edge,ISnappedWindow *,Geometry::CRect *);
	long RepositionToVerticalTarget(Geometry::CRect const &,SnapRegion,SnapLayoutHelpers::Edge,ISnappedWindow *,Geometry::CRect *);
	void ExtendToMonitorEdges(Geometry::CRect const &,SnapRegion,SnapLayoutHelpers::SNAP_TARGET_METRICS const &,Geometry::CRect *);
};

class SnapServiceProvider
{
	long GetSnapRectForDesktopMode(IApplicationView *,SNAP_LOCATION,Geometry::CRect *);
	long HandleDesktopModeSnapping(IApplicationView *,SNAP_LOCATION,SNAP_TO_LOCATION_FLAGS,tagRECT *);
	long HandleTabletModeSnapping(IApplicationView *,SNAP_LOCATION,tagRECT *);
public:
	virtual long Initialize(SnapServiceProviderInitParams const &);
	virtual long SnapToLocation(IApplicationView *,SNAP_LOCATION,SNAP_TO_LOCATION_FLAGS,tagRECT *);
};

struct SoftLandingTelemetry
{
	class ActivatePresenter
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~ActivatePresenter();
	};

	class BubbleDismiss
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,unsigned int);
		~BubbleDismiss();
	};

	class BubbleError
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~BubbleError();
	};

	class EM_TransitionToStateActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void NoOp_SameStateTransition();
		void StartActivity(unsigned int,unsigned int);
		void ViewHidden();
		void ViewShown();
		~EM_TransitionToStateActivity();
	};

	class FindUiaElement
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~FindUiaElement();
	};

	class NotificationInvoke
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,bool);
		~NotificationInvoke();
	};

	class OnNewNotificationActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned int);
		~OnNewNotificationActivity();
	};

	class ParseXML
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~ParseXML();
	};

	class PresentCreative
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~PresentCreative();
	};

	class ShowViewExperience
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void ShellNotReady();
		void StartActivity();
		~ShowViewExperience();
	};

	class SoftLandingManagerInitializeActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		~SoftLandingManagerInitializeActivity();
	};

	class UpdateCreative
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *);
		~UpdateCreative();
	};

	class WithdrawCreative
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(unsigned short const *,bool);
		~WithdrawCreative();
	};

	static void CourtesyEngineVisibleItemTimeout<long &>(long &);
	static void EmptyQuery();
	static void FailedToFindRootWindow();
	static void FailedToFindUiaElement();
	static void FailedToGetUiaForWindow();
	static void MismatchedElements<int &,int &>(int &,int &);
	static void MultipleRootElements();
	static void NoRootElement();
	static void UnknownAttribute<unsigned short const * &>(unsigned short const * &);
	void CourtesyEngineBlocked_(unsigned short const *,unsigned int);
};

namespace SpatialDataReadWriteUtils
{
	struct BufferReader
	{
		void Read<int>(int &);
	};

	struct CoMemoryBuffer
	{
		CoMemoryBuffer(unsigned int);
		~CoMemoryBuffer();
	};

	struct SpatialDataV1
	{
		long Write(CoMemoryBuffer &);
		static bool IsV1DataForCurrentDevice(unsigned char const *,unsigned int);
		static long CreateV1DataObject(unsigned char const *,unsigned int,std::unique_ptr<SpatialDataV1,std::default_delete<SpatialDataV1> > &);
	};

	int ReverseEndianNess<int>(int const &,void *);
	long ReadSpatialData(unsigned char const *,unsigned int,tagPOINT *,tagSIZE *);
	long WriteSpatialData(tagPOINT const &,tagSIZE const &,SpatialDataReadWriteUtils::CoMemoryBuffer &);
	unsigned int ReverseEndianNess<unsigned int>(unsigned int const &,void *);
};

namespace SplashScreen
{
	class CBasicSplashScreenLayout
	{
	protected:
		static Windows::Foundation::Rect _CenterImageWithRounding(Windows::Foundation::Size const &,Windows::Foundation::Rect const &);
		static Windows::Foundation::Rect _PhysicalRectToScaledRectWithRounding(unsigned int,Windows::Foundation::Rect const &);
	public:
		CBasicSplashScreenLayout();
		virtual SPLASHSCREEN_IMAGE_TYPE GetImageType();
		virtual Windows::Foundation::Rect GetPhysicalImageLocation();
		virtual Windows::Foundation::Rect GetRelativeImageLocation();
		virtual void SetImageSize(Windows::Foundation::Size const &);
		virtual void SetScaleFactor(DEVICE_SCALE_FACTOR);
		virtual void SetScaleFactor(unsigned int);
		virtual void SetSize(Windows::Foundation::Size const &);
	};

	class CSplashScreenConfiguration
	{
		HKEY__ * _GetRegKeyForInboxApp(unsigned short const *,unsigned short const *);
		HKEY__ * _GetRegKeyForThirdPartyApp(unsigned short const *,unsigned short const *);
		HKEY__ * _GetSystemAppDataKey(unsigned short const *);
		unsigned short const * _GetApplicationName();
		unsigned short const * _GetImagePath();
		void _LoadBackgroundColor();
	protected:
		virtual bool LoadTransparentColor();
	public:
		CSplashScreenConfiguration(unsigned short const *);
		virtual ORIENTATION_PREFERENCE GetOrientationPreference();
		virtual unsigned long GetBackgroundColor();
		virtual unsigned short const * GetApplicationName();
		virtual unsigned short const * GetImagePath();
		~CSplashScreenConfiguration();
	};

	class CSplashScreenDCompVisual
	{
		void ReconcileVisual();
	public:
		CSplashScreenDCompVisual(unsigned short const *,ID2D1DeviceContext *,IDCompositionDevice *);
		CSplashScreenDCompVisual(unsigned short const *,ID2D1DeviceContext *,IDCompositionDevice *,std::shared_ptr<CSplashScreenConfiguration> const &,std::shared_ptr<CBasicSplashScreenLayout> const &);
		void BeginLoadVisual(std::function<void ()>,_GUID const &,void * *);
		void CompleteLoadVisual();
		~CSplashScreenDCompVisual();
	};

};

struct StaIfSupportedThreadPoolActivationFactory<CCachedFileUpdateManager,0,Microsoft::WRL::Details::Nil>
{
	StaIfSupportedThreadPoolActivationFactory<CCachedFileUpdateManager,0,Microsoft::WRL::Details::Nil>();
	virtual long ActivateInstance(IInspectable * *);
	virtual ~StaIfSupportedThreadPoolActivationFactory<CCachedFileUpdateManager,0,Microsoft::WRL::Details::Nil>();
};

class StaIfSupportedThreadPoolFactoryBase<CCachedFileUpdateManager,0>
{
protected:
	long _CreateObject(IUnknown *,_GUID const &,void * *);
	virtual long v_InitializeObject(CCachedFileUpdateManager *);
};

struct StaThreadPoolActivationFactoryWithInitialize<CCachedFileUpdateManager,Microsoft::WRL::Details::Nil>
{
	virtual long v_InitializeObject(CCachedFileUpdateManager *);
};

struct StackEntry
{
	StackEntry(StackEntry const &);
	~StackEntry();
};

class StoreFrontHelper
{
	long ForceAppShutdown(unsigned short const *);
	long HandleWnf(long,unsigned short const *,bool,unsigned int);
	long ResumeApp(unsigned short const *,unsigned short const *);
	long SubscribeToStoreWnfMessages();
public:
	virtual long PerformDelayedInitialization();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

struct StoreFrontHelperTelemetry
{
	static void TraceLoggingInfo(char const *,...);
};

namespace StoreFrontHelperUtils
{
	long GetAppDisplayNameFromPackageFamilyName(unsigned short const *,Microsoft::WRL::Wrappers::HString &);
	long GetTimeStringFromMinutes(unsigned int,Microsoft::WRL::Wrappers::HString &);
};

class StoreFrontNotificationHelper
{
	long _CreateAndShowNotification(Microsoft::WRL::ComPtr<Windows::UI::Notifications::IToastNotificationManagerStatics>,NotificationData *);
	long _SetNotificationAction(Microsoft::WRL::ComPtr<Windows::Data::Xml::Dom::IXmlDocument>,HSTRING__ *);
	long _SetNotificationTexts(Microsoft::WRL::ComPtr<Windows::Data::Xml::Dom::IXmlDocument>,HSTRING__ *,HSTRING__ *);
	long _ShowNotificationWorker(NotificationData *);
	long _XmlCreateTextNode(Microsoft::WRL::ComPtr<Windows::Data::Xml::Dom::IXmlNode>,Microsoft::WRL::ComPtr<Windows::Data::Xml::Dom::IXmlDocument>,HSTRING__ *);
public:
	StoreFrontNotificationHelper();
	long ShowNotification(NotificationType,HSTRING__ *,HSTRING__ *,unsigned int);
};

namespace StorePopup
{
	long CreateWindowsToHostDialog(HINSTANCE__ *,HWND__ * *);
	long HandleDialogInput(unsigned int,unsigned short const *);
	long LaunchStore(unsigned short const *);
	long ShowConcurrencyLimitDialog(unsigned short const *,bool &);
	long ShowDialog(unsigned short const *,unsigned int,unsigned int,unsigned int,Microsoft::WRL::ComPtr<CMessageDialogHelper> &);
	long ShowOfflineWarningDialog(unsigned short const *);
	long ShowTrialExpiredDialog(unsigned short const *,unsigned short const *);
};

struct StoredMessage
{
	StoredMessage(HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ *,Windows::Gaming::UI::GameChatMessageOrigin);
	~StoredMessage();
};

class StringFeedbackEngineExternal
{
	static void _CaptureProcessed(Microsoft::WRL::ComPtr<ICaptureProcessedEventHandler> const &,Microsoft::WRL::ComPtr<Windows::Internal::Feedback::StringFeedback::IStringFeedbackItem> const &);
public:
	StringFeedbackEngineExternal(Windows::Internal::Feedback::StringFeedback::IStringFeedbackEngine *);
	virtual unsigned long AddCaptureProcessedEventHandler(ICaptureProcessedEventHandler *);
	virtual unsigned long AddCaptureProcessingEventHandler(ICaptureProcessingEventHandler *);
	virtual void RemoveCaptureProcessedEventHandler(unsigned long);
	virtual void RemoveCaptureProcessingEventHandler(unsigned long);
	virtual void StartCapture(HWND__ *,unsigned short const *,STRING_FEEDBACK_KIND);
	virtual void StopCapture();
	virtual void UpdateOwnerWindow(unsigned int,unsigned int,unsigned int,unsigned int,unsigned char);
	virtual ~StringFeedbackEngineExternal();
};

class SttExperienceManager
{
	long ClosePluginAppView();
	long CloseSttView();
	long HideSttView();
	long OnClientWindowReadyForPresentationChanged(Windows::Internal::Shell::ViewManagerInterop::IClientWindowState *,Windows::Internal::Shell::ViewManagerInterop::IClientWindowReadyForPresentationChangedEventArgs *);
	long OnPluginAppViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long OnViewEvent(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper *,Windows::Internal::Shell::ViewManagerInterop::IViewEventArgs *);
	long SetWindowPosition();
	long TriggerHideAndCloseTimers();
	long TriggerPluginAppCloseTimer();
	static void ClosePluginWindowTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	static void CloseWindowTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	static void HideWindowTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	void ResetHideAndCloseTimers();
public:
	SttExperienceManager();
	long RuntimeClassInitialize();
	virtual long AddMessage(HSTRING__ *,HSTRING__ *,Windows::Gaming::UI::GameChatMessageOrigin);
	virtual long RegisterMessageReceivedListener(SttInternal::IInternalMessageReceivedListener *);
	virtual long SetDelayBeforeClosingAfterMessageReceived(Windows::Foundation::TimeSpan);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long WorkAreaChanged(unsigned long,tagRECT const *);
	virtual long get_DesiredPosition(Windows::Gaming::UI::GameChatOverlayPosition *);
	virtual long put_DesiredPosition(Windows::Gaming::UI::GameChatOverlayPosition);
	virtual ~SttExperienceManager();
};

struct SttExperienceManagerFactory
{
	virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
};

struct StubImmersiveApplication
{
	StubImmersiveApplication();
	virtual SPLASHSCREEN_ORIENTATION_PREFERENCE GetManifestedOrientationPreference();
	virtual int IsQuirkEnabled(__MIDL___MIDL_itf_shpriv_core_0000_0321_0005);
	virtual long AddBehaviorFlags(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003);
	virtual long AddGhostStatusFlag(__MIDL___MIDL_itf_shpriv_core_0000_0321_0004);
	virtual long BelongsToPackage(unsigned short const *,int *);
	virtual long ContainsStronglyNamedWindow(int *);
	virtual long GetApplicationId(unsigned short * *);
	virtual long GetBehaviorFlags(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003 *);
	virtual long GetCanHandleCloseRequest(int *);
	virtual long GetDestinationInformation(IImmersiveApplicationWindow * *,tagRECT *);
	virtual long GetDisplayName(unsigned short * *);
	virtual long GetIsOccluded(int *);
	virtual long GetMonitor(IImmersiveMonitor * *);
	virtual long GetPackageId(int,unsigned short * *);
	virtual long GetPersistingStateName(unsigned short * *);
	virtual long GetRect(tagRECT *);
	virtual long GetTimestamps(tagIMMAPPTIMESTAMPS *);
	virtual long GetTitle(unsigned short * *);
	virtual long GetUniqueId(unsigned short * *);
	virtual long GetViewData(IMMAPP_APPLICATION_VIEW_DATA *);
	virtual long GetWindows(IMMERSIVE_APPLICATION_GET_WINDOWS_FILTER,_GUID const &,void * *);
	virtual long IncrementGhostAnimationWaitCount(unsigned int);
	virtual long InvokeCharms();
	virtual long IsApplicationWindowStronglyNamed(int *);
	virtual long IsEqualByApp(IImmersiveApplication *,int *);
	virtual long IsEqualByAppId(unsigned short const *,int *);
	virtual long IsEqualByHwnd(HWND__ *,int *);
	virtual long IsForeground(int *);
	virtual long IsInteractive(int *);
	virtual long IsRunning(int *);
	virtual long IsServiceAvailable(IMMERSIVE_APPLICATION_QUERY_SERVICE_OPTION,_GUID const &,int *);
	virtual long IsSplashScreenPresented(int *);
	virtual long IsTitleBarDrawnByApp(int *);
	virtual long IsViewForSameApp(IImmersiveApplication *,int *);
	virtual long IsVisible(int *);
	virtual long NotifyApplicationWindows(unsigned int,unsigned __int64,__int64,NOTIFY_IMMERSIVE_APPLICATION_WINDOWS_OPTION,NOTIFY_IMMERSIVE_APPLICATION_WINDOWS_DELIVERY_TYPE);
	virtual long OnMinSizePreferencesUpdated(HWND__ *);
	virtual long OpenPropertyStore(IMMAPPPROPERTYSTOREFLAGS,_GUID const &,void * *);
	virtual long QueryService(IMMERSIVE_APPLICATION_QUERY_SERVICE_OPTION,unsigned long,_GUID const &,_GUID const &,void * *);
	virtual long RemoveBehaviorFlags(__MIDL___MIDL_itf_shpriv_core_0000_0321_0003);
	virtual long RemoveGhostStatusFlag(__MIDL___MIDL_itf_shpriv_core_0000_0321_0004);
	virtual long RequestCloseAsync(_GUID const &,void * *);
	virtual long SetGhostVisualStyle(__MIDL___MIDL_itf_shpriv_core_0000_0321_0001);
	virtual long SetIsOccluded(int);
	virtual long SetMonitor(IImmersiveMonitor *,__MIDL___MIDL_itf_shpriv_core_0000_0321_0002);
	virtual long SetPositionerMonitor(IImmersiveMonitor *);
	virtual long SetThumbnailPreviewState(IMMAPP_SETTHUMBNAIL_PREVIEW_STATE);
	virtual long SetWindowingEnvironmentConfig(IUnknown *);
	virtual long TryInvokeBack(IAsyncCallback *);
};

namespace TLV
{
	void Base64Encode<129>(unsigned char const *,unsigned __int64,char (&)[129]);
};

struct TabJumpBehavior
{
	virtual long GetCallbackFilters(DuiBehaviorFilters::Flags *);
	virtual long OnGetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long,DirectUI::Element * *);
};

class TabbableItemList
{
	static DirectUI::IClassInfo * s_pClassInfo;
public:
	static long Register();
	virtual DirectUI::Element * GetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long);
	virtual DirectUI::IClassInfo * GetClassInfoW();
};

class TabletModeController
{
	bool ComputeTabletModeAvailability();
	bool IsAllowedModeSwitch(_TABLETMODESTATE);
	bool ShouldForceDesktopMode();
	long ForceDesktopMode();
	long InitializeModeTriggerCachedValue();
	long NotifyTabletModeAvailabilityChangeListeners(bool);
	long PersistModeTriggerCachedValue();
	long SetModeInternal(_TABLETMODESTATE,_TMCTRIGGER);
	long SetWindowManagement(_TABLETMODESTATE);
	static void NotifyTabletModeChangeListeners(IObjectArray *,_TABLETMODESTATE);
	static void PublishWnfStateData(_TABLETMODESTATE);
	static void s_TelemetryTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
	unsigned int GetConnectedMonitorCount();
	void HandleSwitchModeTelemetry(_TABLETMODESTATE,_TMCTRIGGER);
	void OnTabletModeAvailabiltyUpdated();
	void SaveMode(_TABLETMODESTATE);
	void UpdateAbsoluteTimer();
	void UpdateHideWallpaperIconsForMode(_TABLETMODESTATE);
	void UpdateTabletModeAvailability();
public:
	TabletModeController();
	long RuntimeClassInitialize();
	virtual long DisplaySettingsChange(IImmersiveMonitor *,IMMERSIVE_MONITOR_DISPLAY_CHANGE_FLAGS);
	virtual long GetCoverWindows(HWND__ * * *,unsigned int *);
	virtual long GetGutterRects(unsigned int *,tagRECT * *);
	virtual long GetMode(_TABLETMODESTATE *);
	virtual long GetShellModePreference(SHELLMODE_PREFERENCE *);
	virtual long GetShellModeTriggerConfig(SHELLMODE_TRIGGER_CONFIG *,int *);
	virtual long IsTabletModeAvailable(int *);
	virtual long MonitorAdded(IImmersiveMonitor *);
	virtual long OnIdleStateChanged(int);
	virtual long OnIdleStateFlagsChanged(SESSION_IDLE_STATE_FLAGS);
	virtual long OnMessage(unsigned int,unsigned __int64,__int64);
	virtual long PerformDelayedInitialization();
	virtual long PromptUser(_TABLETMODESTATE,_TMCTRIGGER);
	virtual long RegisterForTabletModeAvailabilityChanges(ITabletModeAvailabilityChangeListener *,unsigned long *);
	virtual long RegisterForTabletModeChanges(ITabletModeChangeListener *,unsigned long *);
	virtual long SetMode(_TABLETMODESTATE,_TMCTRIGGER);
	virtual long ShutdownServices(IProfferService *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterForTabletModeAvailabilityChanges(unsigned long);
	virtual long UnregisterForTabletModeChanges(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual void TrackCoverWindow(HWND__ *,int);
	virtual ~TabletModeController();
};

struct TabletModeControllerTelemetry
{
	class SetMode
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(int,int);
		~SetMode();
	};

	class TMCPrompt
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(int,int);
	};

	class TMCSwitchMode
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(int,int,unsigned int,unsigned short const *,bool,unsigned int);
		~TMCSwitchMode();
	};

	class TMChangeListener
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity(int);
	};

	static bool IsEnabled(unsigned char,unsigned __int64);
	void CSMSettings_();
	void TMCDeleteShellModeTriggerSetting_();
	void TMCPromptActivated_(int,bool);
	void TabletModeCSMEvent_(CSMState,CSMState,TabletModeState,TabletModeState,_TMCTRIGGER,SHELLMODE_TRIGGER_CONFIG,int);
	void TabletModeSettings_(SHELLMODE_PREFERENCE,SHELLMODE_TRIGGER_CONFIG,bool);
};

namespace TabletModeHelpers
{
	bool HasConvertibleSlateModeChanged();
	bool IsTabletMode();
	bool IsTabletModeAutoHideEnabled();
	long QueryTabletMode(_TABLETMODESTATE *);
};

namespace TabletModePositionerHelpers
{
	long GetApplicationViewsFromLayout(IAppLayout *,unsigned int *,IApplicationView * *,IApplicationView * *);
	long GetApplicationViewsInActivationOrder(IAppLayout *,IApplicationView * *,IApplicationView * *);
	long GetTabletModePositioner(IUnknown *,ITabletModePositioner * *);
};

struct TabletModeStateHelper
{
	void SetCSMState();
};

class TabletModeToast
{
	long CreateXml(_TMCTRIGGER,Windows::Data::Xml::Dom::IXmlDocument * *);
	long LoadXmlFromResource(unsigned int,Windows::Data::Xml::Dom::IXmlDocument * *);
	long SetXmlAttribute(Windows::Data::Xml::Dom::IXmlDocument *,unsigned short const *,unsigned short const *,unsigned short const *);
	long SetXmlAttributeFromResource(Windows::Data::Xml::Dom::IXmlDocument *,unsigned short const *,unsigned short const *,unsigned int);
	long SetXmlInnerTextFromResource(Windows::Data::Xml::Dom::IXmlDocument *,unsigned short const *,unsigned int);
	long ShowTabletModeAvailabilityToast();
	static unsigned short const * const s_appId;
	void IncreaseTabletModeAvailabilityToastCount();
public:
	TabletModeToast();
	long ShowToast(_TABLETMODESTATE,_TMCTRIGGER);
	static long RemoveToast();
	virtual long Activate(unsigned short const *,unsigned short const *,NOTIFICATION_USER_INPUT_DATA const *,unsigned long);
	virtual long Invoke(__MIDL___MIDL_itf_wpnplatform_0000_0005_0001,long,unsigned short const *);
};

namespace TaskbarHelpers
{
	HWND__ * GetTrayWindowForMonitor(HMONITOR__ *);
	HWND__ * GetTrayWindowForMonitor(IUnknown *,IImmersiveMonitor *);
};

namespace TemplateDownloadHelpers
{
	long AddTemplateToArray(CSimpleCaseInsensitiveOrdinalStringArray &,unsigned short const *);
	long CheckCertificateForTemplateDownloadEKU(_CERT_CONTEXT const *,bool *);
	long ConvertFromUtf8(unsigned long,char const *,unsigned short * *);
	long GetDownloadedDirectoryPath(unsigned short * *);
	long GetFilePathForDownloadedLocalTemplate(unsigned short const *,unsigned short * *);
	long GetFilePathForDownloadedTemplate(unsigned short const *,unsigned short * *);
	long GetLocalDirectoryPath(unsigned short * *);
	long GetSizeInBytes(IStream *,unsigned int *);
	long GetSystemDirectoryPath(unsigned short * *);
	long LoadXamlFromDll(unsigned short const *,bool,bool,unsigned short * *);
	long LoadXamlFromXamlFile(unsigned short const *,unsigned short * *);
	long ParseResponseAndSaveFiles(IStream *,CSimpleCaseInsensitiveOrdinalStringArray &,CTemplateDownloader *,bool);
	long RemoveTemplateFromArray(CSimpleCaseInsensitiveOrdinalStringArray &,unsigned short const *);
	long ValidateDllSignature(unsigned short const *,bool *);
	long WriteBytesToFile(unsigned char const *,unsigned __int64,unsigned short const *,bool *);
};

struct TileActivatedEvent
{
	static UID TileActivated;
};

struct TileContextMenuEvent
{
	static UID TileContextMenu;
};

struct TileEvent
{
	virtual ~TileEvent();
};

namespace TileUtils
{
	long ConvertFileIUriToFilePath(IUri *,unsigned short * *);
	long ConvertFileUriToFilePath(unsigned short const *,unsigned short * *);
	long CreatePackageInfo(unsigned short const *,unsigned char * *);
};

struct TimerInfo
{
	void Kill(HWND__ *);
};

namespace TitlebarOverlayHelpers
{
	bool OverlayTitlebarsInTabletMode();
};

struct TouchPadGestureTelemetryImpl
{
	static bool IsEnabled(unsigned char,unsigned __int64);
	void TouchPadGestureEnded_(unsigned int);
	void TouchPadGestureStarted_(unsigned int);
};

struct TouchpadActionsComponent
{
	TouchpadActionsComponent();
	long RuntimeClassInitialize();
	virtual long PerformDelayedInitialization();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~TouchpadActionsComponent();
};

struct TouchpadActionsGestureHandler
{
	TouchpadActionsGestureHandler();
	virtual int CanBePreempted();
	virtual int CanPreemptOtherGestures();
	virtual long CancelSwipe();
	virtual long ContinueSwipe(int,int,int,int,unsigned int);
	virtual long DelayInitialize(ITouchpadActionsManager *);
	virtual long FinishSwipe(int,int,int,int,unsigned int);
	virtual long StartSwipe(int,int,unsigned int,TOUCHPAD_GESTURE_CONTEXT);
};

struct TouchpadActionsManager
{
	virtual long GetAction(TOUCHPAD_GESTURE_TYPE,TOUCHPAD_GESTURE_DIRECTION,ITouchpadAction * *);
	virtual long SetServiceProvider(IServiceProvider *);
};

struct TouchpadGestureComponent
{
	long RuntimeClassInitialize();
	virtual long PerformDelayedInitialization();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
};

class TouchpadGestureHandler
{
	TOUCHPAD_GESTURE_DIRECTION _GetGestureDirection(int,int);
	TOUCHPAD_GESTURE_TYPE _GetGestureType(int);
	bool _AreAllPointersInContact(unsigned int);
	bool _AreGesturesEnabled();
	bool _ShouldStartGesture(int,int,int);
	void _CancelGesture();
	void _ContinueGesture(InteractionContextOutputInfo const *,int,int,int,int);
	void _FinishGesture(InteractionContextOutputInfo const *,int,int,int,int);
	void _StartGesture(InteractionContextOutputInfo const *,int,int);
public:
	TouchpadGestureHandler();
	virtual TOUCHPAD_GESTURE_TYPE GetGestureType();
	virtual bool IsGestureActive();
	virtual long ProcessInteractionContextOutput(InteractionContextOutputInfo const *,INTERACTION_CONTEXT_OUTPUT const *);
	virtual void SetStartSwipeThreshold(int);
};

class TouchpadGestureInputProvider
{
	long _GetContactCountForPointerId(unsigned int,int *);
	long _InitializeInteractionContext();
	long _OnPointerDown(unsigned int);
	long _OnPointerUp(unsigned int);
	long _OnPointerUpdate(unsigned int);
	long _ProcessInteractionContextOutput(INTERACTION_CONTEXT_OUTPUT const *);
	long _ProcessPointerFrame(unsigned int);
	long _RegisterShellPTPListener(bool);
	static void s_InteractionContextOutputCallback(void *,INTERACTION_CONTEXT_OUTPUT const *);
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
public:
	TouchpadGestureInputProvider();
	long RuntimeClassInitialize(ITouchpadGestureHandler *);
	virtual void Shutdown();
};

struct TouchpadKeyboardAction
{
	virtual long Invoke();
};

class TouchpadMediaAction
{
	long GetCurrentMediaSessionDataSource(IMediaPlaybackDataSource * *);
public:
	virtual long Invoke();
};

class TouchpadSettingsManager
{
	bool GetCustomSettingIdentifier(TOUCHPAD_GESTURE_TYPE,TOUCHPAD_GESTURE_DIRECTION,SETTING_IDENTIFIER *);
	static TouchpadSettingsManager::GestureActionSIDEntry const * const s_GestureActionToSIDMapping;
	static TouchpadSettingsManager::GestureSetActionEntry const * const s_GestureSetToActionMapping;
	static TouchpadSettingsManager::GestureSetSIDEntry const * const s_GestureSetToSIDMapping;
	static TouchpadSettingsManager::SettingIdentifierEntry const * const s_GestureToSettingIdentifierMapping;
public:
	virtual long GetGestureAction(TOUCHPAD_GESTURE_TYPE,TOUCHPAD_GESTURE_DIRECTION,PRECISIONTOUCHPAD_ADVANCED_SLIDE_ACTION *);
	virtual long GetGestureActionParameters(TOUCHPAD_GESTURE_TYPE,TOUCHPAD_GESTURE_DIRECTION,unsigned long *);
	virtual long GetGestureSetting(TOUCHPAD_GESTURE_TYPE,PRECISIONTOUCHPAD_SLIDE_SETS *);
	virtual long GetGestureStartSwipeThreshold(TOUCHPAD_GESTURE_TYPE,TOUCHPAD_GESTURE_DIRECTION,int *);
	virtual long GetGestureTarget(TOUCHPAD_GESTURE_TYPE,TOUCHPAD_GESTURE_DIRECTION,ITouchpadGesture * *);
	virtual long SetServiceProvider(IServiceProvider *);
	virtual long SetSettingsCache(IImmersiveSettingsCache *);
};

class TouchpadVolumeAction
{
	long GetAudioEndpoint(IAudioEndpointVolume * *);
public:
	virtual long Invoke();
};

class TouchpadVolumeGestureHandler
{
	long GetAudioEndpoint(IAudioEndpointVolume * *);
	long ShowVolumePanel(unsigned long);
	long StepVolumeByValue(float);
public:
	TouchpadVolumeGestureHandler();
	virtual int CanBePreempted();
	virtual int CanPreemptOtherGestures();
	virtual long CancelSwipe();
	virtual long ContinueSwipe(int,int,int,int,unsigned int);
	virtual long FinishSwipe(int,int,int,int,unsigned int);
	virtual long SetServiceProvider(IServiceProvider *);
	virtual long StartSwipe(int,int,unsigned int,TOUCHPAD_GESTURE_CONTEXT);
};

class TraceLoggingCorrelationVector
{
	bool ToStringImpl(unsigned __int64,char *);
	static TraceLoggingCorrelationVector::CvVersion ValidateImpl(char const *,bool);
	unsigned __int64 IncrementImpl();
	void CreateCvFromGuid<12>(_GUID);
	void CreateCvFromGuid<16>(_GUID);
public:
	TraceLoggingCorrelationVector();
	TraceLoggingCorrelationVector(TraceLoggingCorrelationVectorV1_t);
	TraceLoggingCorrelationVector(TraceLoggingCorrelationVectorV2_t);
	static TraceLoggingCorrelationVector * Extend(char const *,bool);
	static TraceLoggingCorrelationVector * Set(char const *,bool);
};

class TransitionCoordinator
{
	long CancelFacadeTimeoutTimer();
	long StopCoordination(TransitionCoordinatorTelemetry::StopCoordinationReason);
public:
	TransitionCoordinator();
	long RuntimeClassInitialize();
	virtual long IsWaitingOnIncomingTransition(int *);
	virtual long OnIncomingTransitionStarted();
	virtual long OnOutgoingTransitionCompleted();
	virtual long OnOutgoingTransitionStarting();
	virtual long OnTimerElapsed();
	virtual long RegisterForTransitionNotifications(ITransitionNotification *,unsigned long *);
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long TabletModeChanged(_TABLETMODESTATE);
	virtual long UnregisterForTransitionNotifications(unsigned long);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual ~TransitionCoordinator();
};

namespace TransitionCoordinatorTelemetry
{
	class TransitionCoordinationActivity
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		void StartActivity();
		void Stop(StopCoordinationReason);
		~TransitionCoordinationActivity();
	};

};

class UIThreadInvoker
{
	static __int64 s_MessengerProc(HWND__ *,unsigned int,unsigned __int64,__int64);
};

namespace UserAssistImpl
{
	IShellUserAssist * GetUserAssistWorker(_GUID const &);
	IShellUserAssist * g_cachedUserAssist;
	UserAssistImpl::CONTRACT_UAIID const * const c_rgContractUAIID;
	long GetCachedUserAssist(IShellUserAssist * *);
};

namespace UserAwareCallerIdentity
{
	long GetAppIdFromProcessId(unsigned long,unsigned short * *);
};

class UserOobeHostAppManager
{
protected:
	virtual long v_OnExperienceExit();
	virtual void v_OnActivation(long);
	virtual void v_OnLaunch(long);
public:
	UserOobeHostAppManager();
	long RuntimeClassInitialize(unsigned short const *,bool);
	virtual long OnDebuggingModeChanged(int);
};

struct ViewHWNDPair
{
	~ViewHWNDPair();
};

struct ViewInfo
{
	ViewInfo();
	long GetFrameRect(tagRECT *);
	~ViewInfo();
};

struct ViewInfoAuto
{
	~ViewInfoAuto();
};

struct ViewSizeConstraintsPair
{
	~ViewSizeConstraintsPair();
};

struct ViewSizePair
{
	~ViewSizePair();
};

namespace ViewSizePreferenceHelpers
{
	long GetSourceViewSizePreferenceFromPropertySet(Windows::Foundation::Collections::IPropertySet *,APPLICATION_VIEW_SIZE_PREFERENCE *,HWND__ * *);
};

struct VirtualDesktopNotificationForwarderHelper<VirtualDesktopNotificationBaseHelper<IVirtualDesktopNotification> >
{
	virtual long CurrentVirtualDesktopChanged(IVirtualDesktop *,IVirtualDesktop *);
	virtual long ViewVirtualDesktopChanged(IApplicationView *);
	virtual long VirtualDesktopCreated(IVirtualDesktop *);
	virtual long VirtualDesktopDestroyBegin(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyFailed(IVirtualDesktop *,IVirtualDesktop *);
	virtual long VirtualDesktopDestroyed(IVirtualDesktop *,IVirtualDesktop *);
};

struct WinRTInAppBackHandler
{
	struct AsyncCallResult
	{
		AsyncCallResult();
		long RuntimeClassInitialize(IApplicationView *,IInAppBackHandlerNotifications *);
		virtual long Invoke(long);
	};

	WinRTInAppBackHandler();
	long RuntimeClassInitialize(IApplicationView *,IInAppBackHandlerNotifications *);
	static long s_TryBack(WinRTInAppBackHandler::AsyncCallResult *,IApplicationView *);
	virtual long InAppBackResult(IApplicationView *,InAppBackResponse);
};

class WindowManagementEvents
{
	__int64 OnShellWindowManagementCallout(_SHELL_WINDOWMANAGEMENT_CALLOUT_INFO * const);
	static Microsoft::WRL::ComPtr<ITrustedComponentForegroundControl> s_foregroundControl;
	virtual __int64 v_WndProc(HWND__ *,unsigned int,unsigned __int64,__int64);
	void OnShellWindowManagementNotify(_SHELL_WINDOWMANAGEMENT_NOTIFY_INFO const * const);
public:
	WindowManagementEvents();
	long RuntimeClassInitialize();
	virtual long EnsureChannel();
	virtual long InitializeTrustedComponentForegroundControl(ITrustedComponentForegroundControl *);
	virtual long PerformDelayedInitialization();
	virtual long RegisterArrangement(IWindowManagementArrangementEvents *);
	virtual long RegisterChannelSever(IWindowManagementChannelSeverEvents *);
	virtual long RegisterConstraints(IWindowManagementConstraintsEvents *);
	virtual long RegisterInputUsage(IWindowManagementInputUsageEvents *);
	virtual long RegisterJointResize(IWindowManagementJointResizeEvents *);
	virtual long RegisterShowMoveSize(IWindowManagementShowMoveSizeEvents *);
	virtual long RegisterWindowGrouping(IWindowManagementWindowGroupingEvents *);
	virtual long ShutdownTrustedComponentForegroundControl();
	virtual long SubscribeToServices(IServiceProvider *);
	virtual long UnregisterArrangement(IWindowManagementArrangementEvents *);
	virtual long UnregisterChannelSever(IWindowManagementChannelSeverEvents *);
	virtual long UnregisterConstraints(IWindowManagementConstraintsEvents *);
	virtual long UnregisterInputUsage(IWindowManagementInputUsageEvents *);
	virtual long UnregisterJointResize(IWindowManagementJointResizeEvents *);
	virtual long UnregisterShowMoveSize(IWindowManagementShowMoveSizeEvents *);
	virtual long UnregisterWindowGrouping(IWindowManagementWindowGroupingEvents *);
	virtual long UnsubscribeFromServices(IServiceProvider *);
	virtual long UpdateSizeConstraints(HWND__ *,tagSIZE,tagSIZE);
	virtual ~WindowManagementEvents();
};

struct WindowManagementLogging
{
	static _tlgProvider_t const * Provider();
	static bool IsEnabled(unsigned char,unsigned __int64);
};

struct WindowMessageServiceTelemetry
{
	class QueryAssignedAccessType
	{
	protected:
		virtual bool WasAlreadyReportedToTelemetry(long);
		virtual void StopActivity();
	public:
		~QueryAssignedAccessType();
	};

	static void OutOfOrderSessionNotificationsDetected<bool &>(bool &);
	static void SessionIdleReentrancyDetected();
};

namespace Windows
{
	namespace ApplicationModel
	{
		namespace Actions
		{
			struct CActionActivationInfoBase
			{
				CActionActivationInfoBase();
				virtual long ContextSensitiveHelp(int);
				virtual long GetWindow(HWND__ * *);
				virtual long OnAppActivated(unsigned long);
				virtual long OnCanceled();
			};

			struct CActionArgs
			{
				CActionArgs();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct CActionArgsImpl
			{
				long RuntimeClassInitialize(HSTRING__ *,Activation::IActivatedEventArgs *,IActionActivationInfo *);
				virtual long get_ActionName(HSTRING__ * *);
				virtual long get_ActivatedEventArgs(Activation::IActivatedEventArgs * *);
				virtual long get_ActivationInfo(IActionActivationInfo * *);
				virtual long get_AppExtensionId(HSTRING__ * *);
				virtual long get_AppUserModelId(HSTRING__ * *);
				virtual long put_AppExtensionId(HSTRING__ *);
				virtual long put_AppUserModelId(HSTRING__ *);
			};

			struct CHostedFlyoutActivationInfoImpl
			{
				long CloseWindow();
				long DismissUI();
				virtual long GetWindowSize(int *,int *);
				virtual long OnHostedApplicationReady();
				virtual long OnWindowCreated(IHostedFlyoutOperation *);
				virtual long OnWindowDestroyed();
				virtual long OnWindowDismissed();
				virtual long OnWindowHosted();
				virtual long get_SelectionRect(Foundation::Rect *);
				virtual long get_WindowPlacement(UI::Popups::Placement *);
			};

			struct CMainWindowActivationInfo
			{
				CMainWindowActivationInfo();
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct CMainWindowActivationInfoImpl
			{
				virtual long get_DesiredSourceAppUserModelId(HSTRING__ * *);
				virtual long get_DesiredSourceWindowSize(UI::ViewManagement::ViewSizePreference *);
				virtual long get_SearchResultsHwnd(unsigned __int64 *);
				virtual long get_SearchView(int *);
				virtual long put_SearchResultsHwnd(unsigned __int64);
				virtual long put_SearchView(int);
			};

			struct IActionActivationInfo
			{
				IActionActivationInfo();
			};

			struct IActionArgs
			{
				IActionArgs();
			};

			struct IActionExecutionBroker
			{
				IActionExecutionBroker();
			};

			long ActionToProtocolMapping(unsigned short const *,unsigned short * *);
			long ProtocolToActionMapping(unsigned short const *,unsigned short * *);
		};

		namespace Activation
		{
			struct IProtocolActivatedEventArgs
			{
				IProtocolActivatedEventArgs();
			};

			struct IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
			{
				IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData();
			};

		};

		namespace Appointments
		{
			namespace AppointmentsProvider
			{
				struct IAddAppointmentOperation
				{
					IAddAppointmentOperation();
				};

				struct IRemoveAppointmentOperation
				{
					IRemoveAppointmentOperation();
				};

				struct IReplaceAppointmentOperation
				{
					IReplaceAppointmentOperation();
				};

			};

		};

		namespace Contacts
		{
			namespace Internal
			{
				class AddContactActionControl
				{
				protected:
					virtual ControlType _GetControlType();
					virtual long _CreateItemsFromContactFields(IContact2 *,IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,unsigned int *);
					virtual long _InitializeContactForAction(IContact2 *);
					virtual unsigned short const * _GetContractId();
				};

				struct AddContactActionControlItem
				{
					AddContactActionControlItem();
					virtual long ExecuteAction(unsigned __int64,unsigned __int64,ActivationSource,HSTRING__ *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct CallActionControlItem
				{
					CallActionControlItem();
					virtual long ExecuteAction(unsigned __int64,unsigned __int64,ActivationSource,HSTRING__ *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class CallContactActionControl
				{
				protected:
					virtual ControlType _GetControlType();
					virtual long _CreateItemsFromContactFields(IContact2 *,IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,unsigned int *);
					virtual long _InitializeContactForAction(IContact2 *);
					virtual unsigned short const * _GetContractId();
				};

				class ContactActionControlBase
				{
					long _ReorderItems(IContactPreferenceManager *);
				protected:
					long _CreateItemsFromConnectedServiceAccounts(IContact2 *,ContactServiceActions,IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *);
					static long _CopyContactConnectedServiceAccounts(IContact2 *,IContact2 *);
					static long _CopyContactNameAndThumbnail(IContact2 *,IContact2 *);
					static long _CopyContactPhones(IContact2 *,IContact2 *);
					static long _GetConnectedServiceAccountData(IContactConnectedServiceAccount *,ContactServiceActions,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,HSTRING__ * *,HSTRING__ * *,HSTRING__ * *);
					virtual long _CreateItemFromConnectedServiceAccount(IContactConnectedServiceAccount *,ContactServiceActions,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,IContactPreferenceManager *,IContactActionControlItem * *);
					virtual long _GetPropertyValue(unsigned short const *,IInspectable * *);
				public:
					ContactActionControlBase();
					long RuntimeClassInitialize(IContact2 *,IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,unsigned int *);
					virtual long GetActionControlItems(Foundation::Collections::IVectorView<IContactActionControlItem *> * *);
					virtual long GetControlId(HSTRING__ * *);
					virtual long GetDisplayName(HSTRING__ * *);
					virtual long GetGlyph(unsigned short *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
					virtual ~ContactActionControlBase();
				};

				class ContactActionControlItemBase
				{
				protected:
					bool _IsExcludedFromHistory(unsigned short const *);
					long _ExecuteActionThroughActivationFramework(Activation::IActivatedEventArgs *,HSTRING__ *,APPLICATION_VIEW_SIZE_PREFERENCE,unsigned __int64,ActivationSource,HSTRING__ *,HWND__ *,HSTRING__ *);
					long _ExecuteActionThroughLaunch(unsigned __int64,ActivationSource,HSTRING__ *,HWND__ *);
					long _ExecuteActionThroughUriScheme(unsigned short const *,APPLICATION_VIEW_SIZE_PREFERENCE,unsigned __int64,ActivationSource,HSTRING__ *,HWND__ *);
					virtual long _GetPropertyValue(unsigned short const *,IInspectable * *);
					void _CreateActionItem(HSTRING__ *);
					void _UpdateContactPreference();
				public:
					ContactActionControlItemBase();
					long RuntimeClassInitializeBase(IContact2 *,HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ *,IShellItem *,IContactPreferenceManager *);
					virtual long GetActionId(HSTRING__ * *);
					virtual long GetContactData(HSTRING__ * *);
					virtual long GetDisplayData(HSTRING__ * *);
					virtual long GetItem(IShellItem * *);
					virtual long GetServiceId(HSTRING__ * *);
					virtual long SetItem(IShellItem *);
					~ContactActionControlItemBase();
				};

				class ContactDisplayInformation
				{
					long _InitializeActionControl(ControlType,IContact2 *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *);
					long _InitializeActionControls(IContact2 *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *);
					long _InitializeContactDisplayName(IContact2 *);
					long _InitializeContactDisplayNameFromJobInfo(IContact2 *);
					long _InitializeContactInfo(IContact *,IContactsListManager *);
				public:
					ContactDisplayInformation();
					long RuntimeClassInitialize(IContact *,IContactsListManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *);
					virtual long GetActionControls(Foundation::Collections::IVectorView<IContactActionControl *> * *);
					virtual long GetBindableActionControls(Foundation::Collections::IObservableVector<IContactActionControl *> * *);
					virtual long GetDisplayName(HSTRING__ * *);
					virtual long GetId(HSTRING__ * *);
					virtual long GetProviderId(HSTRING__ * *);
					virtual long GetThumbnail(Storage::Streams::IRandomAccessStreamReference * *);
				};

				struct ContactPreferenceHelper
				{
					static long GetHashOfControlItem(IContactActionControlItem *,unsigned __int64 *);
					static unsigned __int64 GetStringHash(HSTRING__ *);
				};

				struct ContactPreferenceManager
				{
					ContactPreferenceManager();
					long RuntimeClassInitialize(IContactsListManager *,HKEY__ *,HSTRING__ *);
					virtual long GetLastUsedItemIndex(HSTRING__ *,Foundation::Collections::IVectorView<IContactActionControlItem *> *,unsigned int *);
					virtual long UpdateLastUsedItem(HSTRING__ *,IContactActionControlItem *);
				};

				struct ContactServiceDescription
				{
					ContactServiceDescription();
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_DisplayName(HSTRING__ * *);
					virtual long get_Id(HSTRING__ * *);
					virtual long get_SupportedActions(ContactServiceActions *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct ContactUIHelper
				{
					ContactUIHelper();
					static TrustLevel InternalGetTrustLevel();
					static unsigned short const * InternalGetRuntimeClassName();
					virtual long ExecuteActionOnContact(Foundation::Collections::IVectorView<Contact *> *,HSTRING__ *,HSTRING__ *,unsigned __int64,unsigned __int64);
					virtual long ExecuteActionOnContactFromSource(Foundation::Collections::IVectorView<Contact *> *,HSTRING__ *,HSTRING__ *,unsigned __int64,unsigned __int64,ActivationSource);
					virtual long GetContactDisplayInformation(Foundation::Collections::IVectorView<Contact *> *,Foundation::Collections::IVectorView<IContactDisplayInformation *> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class ContactsListManager
				{
					long _CreateProviderAppRegistryKey(HKEY__ *,unsigned short const *,HKEY__ * *);
					long _GetMruList(IMruDataList2 * *);
					long _OpenRootRegistryKey(HKEY__ * *);
					long _SetAclForRootKey(HKEY__ *);
				public:
					ContactsListManager();
					long RuntimeClassInitialize(HSTRING__ *);
					virtual long AddNewContact(unsigned __int64,unsigned char *,unsigned __int64 *);
					virtual long GetContactPreferenceManager(HSTRING__ *,IContactPreferenceManager * *);
					virtual long UpdateExistingContact(unsigned __int64);
				};

				struct EmailActionControlItem
				{
					EmailActionControlItem();
					virtual long ExecuteAction(unsigned __int64,unsigned __int64,ActivationSource,HSTRING__ *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class EmailContactActionControl
				{
				protected:
					virtual ControlType _GetControlType();
					virtual long _CreateItemsFromContactFields(IContact2 *,IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,unsigned int *);
					virtual long _InitializeContactForAction(IContact2 *);
					virtual unsigned short const * _GetContractId();
				};

				struct IContactCardExperienceDelayedDataLoader
				{
					IContactCardExperienceDelayedDataLoader();
				};

				struct IContactManagerBrokerStatic
				{
					IContactManagerBrokerStatic();
				};

				struct IContactManagerBrokerStatic2
				{
					IContactManagerBrokerStatic2();
				};

				struct IContactManagerBrokerStatic3
				{
					IContactManagerBrokerStatic3();
				};

				struct JsonDeserializer
				{
					long Initialize(HSTRING__ *);
				};

				struct JsonSerializer
				{
					long Initialize();
					long SetNumberValue(HSTRING__ *,double);
					long SetStringValue(HSTRING__ *,HSTRING__ *);
					long Stringify(HSTRING__ * *);
				};

				class MapActionControlItem
				{
					long GetContactFullAddress(IContactAddress *,HSTRING__ * *);
				public:
					MapActionControlItem();
					long RuntimeClassInitialize(IContact2 *,HSTRING__ *,HSTRING__ *,IContactAddress *,IShellItem *,IContactPreferenceManager *);
					virtual long ExecuteAction(unsigned __int64,unsigned __int64,ActivationSource,HSTRING__ *);
					virtual long GetAddress(IContactAddress * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class MapContactActionControl
				{
				protected:
					virtual ControlType _GetControlType();
					virtual long _CreateItemsFromContactFields(IContact2 *,IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,unsigned int *);
					virtual long _InitializeContactForAction(IContact2 *);
					virtual unsigned short const * _GetContractId();
				};

				struct MessageActionControlItem
				{
					MessageActionControlItem();
					virtual long ExecuteAction(unsigned __int64,unsigned __int64,ActivationSource,HSTRING__ *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class MessageContactActionControl
				{
				protected:
					virtual ControlType _GetControlType();
					virtual long _CreateItemsFromContactFields(IContact2 *,IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,unsigned int *);
					virtual long _InitializeContactForAction(IContact2 *);
					virtual unsigned short const * _GetContractId();
				};

				struct PostActionControlItem
				{
					PostActionControlItem();
					virtual long ExecuteAction(unsigned __int64,unsigned __int64,ActivationSource,HSTRING__ *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class PostContactActionControl
				{
				protected:
					static long _CopyMatchingContactConnectedServiceAccounts(IContact2 *,IContact2 *,unsigned short const *);
					virtual ControlType _GetControlType();
					virtual long _CreateItemFromConnectedServiceAccount(IContactConnectedServiceAccount *,ContactServiceActions,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,IContactPreferenceManager *,IContactActionControlItem * *);
					virtual long _CreateItemsFromContactFields(IContact2 *,IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,unsigned int *);
					virtual long _InitializeContactForAction(IContact2 *);
					virtual unsigned short const * _GetContractId();
				};

				struct VideoCallActionControlItem
				{
					VideoCallActionControlItem();
					virtual long ExecuteAction(unsigned __int64,unsigned __int64,ActivationSource,HSTRING__ *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class VideoCallContactActionControl
				{
				protected:
					virtual ControlType _GetControlType();
					virtual long _CreateItemsFromContactFields(IContact2 *,IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,unsigned int *);
					virtual long _InitializeContactForAction(IContact2 *);
					virtual unsigned short const * _GetContractId();
				};

				class ViewContactActionControl
				{
				protected:
					virtual ControlType _GetControlType();
					virtual long _CreateItemsFromContactFields(IContact2 *,IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,unsigned int *);
					virtual long _InitializeContactForAction(IContact2 *);
					virtual unsigned short const * _GetContractId();
				};

				struct ViewContactActionControlItem
				{
					ViewContactActionControlItem();
					virtual long ExecuteAction(unsigned __int64,unsigned __int64,ActivationSource,HSTRING__ *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				Microsoft::WRL::Details::CreatorMap const __object_ContactUIHelper;
				Microsoft::WRL::Details::FactoryCache __objectFactory__ContactUIHelper;
				long ContactActionControlItem_CreateInstance(IContact2 *,HSTRING__ *,HSTRING__ *,Internal::IContactActionControlItem * *);
				long ContactActionControlItem_CreateInstance(Internal::ControlType,IContact2 *,HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ *,IShellItem *,Internal::IContactPreferenceManager *,Internal::IContactActionControlItem * *);
				long ContactActionControl_CreateInstance(Internal::ControlType,IContact2 *,Internal::IContactPreferenceManager *,Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> *,Internal::IContactActionControl * *,unsigned int *);
				long DeserializeEmailActivationContext(HSTRING__ *,HSTRING__ * *);
				long DeserializeMapActivationContext(HSTRING__ *,IContactAddress * *);
				long DeserializeServiceActivationContext(HSTRING__ *,HSTRING__ * *,HSTRING__ * *);
				long GetProviderForContact(IContact2 *,HSTRING__ * *);
				long SerializeCallActivationContext(Activation::IContactActivatedEventArgs *,HSTRING__ * *);
				long SerializeContactActionActivationContext(Activation::IActivatedEventArgs *,HSTRING__ * *);
				long SerializeEmailActivationContext(HSTRING__ *,HSTRING__ * *);
				long SerializeMapActivationContext(Activation::IContactActivatedEventArgs *,HSTRING__ * *);
				long SerializeMessageActivationContext(Activation::IContactActivatedEventArgs *,HSTRING__ * *);
				long SerializePostActivationContext(Activation::IContactActivatedEventArgs *,HSTRING__ * *);
				long SerializeServiceActivationContext(HSTRING__ *,HSTRING__ *,HSTRING__ * *);
				long SerializeVideoCallActivationContext(Activation::IContactActivatedEventArgs *,HSTRING__ * *);
			};

		};

		namespace DataTransfer
		{
			struct IDataProviderHandler
			{
				IDataProviderHandler();
			};

		};

	};

	namespace Data
	{
		namespace Input
		{
			struct RadialControllerActionTriggers
			{
				class Schema
				{
					static bond::Metadata const s_click_metadata;
					static bond::Metadata const s_left_metadata;
					static bond::Metadata const s_right_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

				RadialControllerActionTriggers & operator=(RadialControllerActionTriggers const &);
				~RadialControllerActionTriggers();
			};

			struct RadialControllerActions
			{
				class Schema
				{
					static bond::Metadata const s_actions_metadata;
					static bond::Metadata const s_defaultActionId_metadata;
					static bond::Metadata const s_defaultActionIndex_metadata;
					static bond::Metadata const s_triggers_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

				RadialControllerActions & operator=(RadialControllerActions const &);
				~RadialControllerActions();
			};

			namespace RadialControllerActionsCache
			{
				class Schema
				{
					static bond::Metadata const s_displayName_metadata;
					static bond::Metadata const s_iconPath_metadata;
					static bond::Metadata const s_imagePath_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			struct RadialControllerSettings
			{
				class Schema
				{
					static bond::Metadata const s_appTools_metadata;
					static bond::Metadata const s_defaultActions_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

				~RadialControllerSettings();
			};

			namespace RadialControllerSettingsCache
			{
				class Schema
				{
					static bond::Metadata const s_appConfigurations_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			struct RadialControllerTool
			{
				class Schema
				{
					static bond::Metadata const s_displayName_metadata;
					static bond::Metadata const s_iconText_metadata;
					static bond::Metadata const s_toolId_metadata;
					static bond::Metadata const s_virtualKeyActions_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

				RadialControllerTool & operator=(RadialControllerTool const &);
				RadialControllerTool(RadialControllerTool const &);
				~RadialControllerTool();
			};

		};

		namespace Platform
		{
			struct ItemReference<Input::RadialControllerSettings>
			{
				~ItemReference<Input::RadialControllerSettings>();
			};

		};

	};

	namespace Foundation
	{
		namespace Collections
		{
			namespace Detail
			{
				long _IteratorGetMany<IIterator_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1>,ApplicationModel::Contacts::Internal::IContactActionControl *>(IIterator_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1> *,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1>,ApplicationModel::Contacts::Internal::IContactActionControlItem *>(IIterator_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1> *,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1>,ApplicationModel::Contacts::Internal::IContactDisplayInformation *>(IIterator_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1> *,unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<HSTRING__ *,1>,HSTRING__ *>(IIterator_impl<HSTRING__ *,1> *,unsigned int,HSTRING__ * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<IInspectable *,1>,IInspectable *>(IIterator_impl<IInspectable *,1> *,unsigned int,IInspectable * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1>,IKeyValuePair<HSTRING__ *,IInspectable *> *>(IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> *,unsigned int,IKeyValuePair<HSTRING__ *,IInspectable *> * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<IUnknown *,1>,IUnknown *>(IIterator_impl<IUnknown *,1> *,unsigned int,IUnknown * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1>,Internal::Feedback::IFeedbackItem *>(IIterator_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1> *,unsigned int,Internal::Feedback::IFeedbackItem * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1>,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>(IIterator_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1> *,unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::AggregateType<Storage::Pickers::UpdateFilesResult *,Storage::Pickers::IUpdateFilesResult *>,1>,Storage::Pickers::IUpdateFilesResult *>(IIterator_impl<Internal::AggregateType<Storage::Pickers::UpdateFilesResult *,Storage::Pickers::IUpdateFilesResult *>,1> *,unsigned int,Storage::Pickers::IUpdateFilesResult * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1>,UI::StartScreen::IJumpListItem *>(IIterator_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1> *,unsigned int,UI::StartScreen::IJumpListItem * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Storage::IStorageFolder *,1>,Storage::IStorageFolder *>(IIterator_impl<Storage::IStorageFolder *,1> *,unsigned int,Storage::IStorageFolder * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Storage::IStorageItem *,1>,Storage::IStorageItem *>(IIterator_impl<Storage::IStorageItem *,1> *,unsigned int,Storage::IStorageItem * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Storage::Pickers::IPickerFileType *,1>,Storage::Pickers::IPickerFileType *>(IIterator_impl<Storage::Pickers::IPickerFileType *,1> *,unsigned int,Storage::Pickers::IPickerFileType * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<double,1>,double>(IIterator_impl<double,1> *,unsigned int,double *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<int,1>,int>(IIterator_impl<int,1> *,unsigned int,int *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1>,ApplicationModel::Contacts::Internal::IContactActionControl *>(IVectorView_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1> *,unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1>,ApplicationModel::Contacts::Internal::IContactActionControlItem *>(IVectorView_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1> *,unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1>,ApplicationModel::Contacts::Internal::IContactDisplayInformation *>(IVectorView_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1> *,unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<HSTRING__ *,1>,HSTRING__ *>(IVectorView_impl<HSTRING__ *,1> *,unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<IUnknown *,1>,IUnknown *>(IVectorView_impl<IUnknown *,1> *,unsigned int,unsigned int,IUnknown * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1>,Internal::Feedback::IFeedbackItem *>(IVectorView_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1> *,unsigned int,unsigned int,Internal::Feedback::IFeedbackItem * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1>,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>(IVectorView_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1> *,unsigned int,unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::AggregateType<Storage::Pickers::UpdateFilesResult *,Storage::Pickers::IUpdateFilesResult *>,1>,Storage::Pickers::IUpdateFilesResult *>(IVectorView_impl<Internal::AggregateType<Storage::Pickers::UpdateFilesResult *,Storage::Pickers::IUpdateFilesResult *>,1> *,unsigned int,unsigned int,Storage::Pickers::IUpdateFilesResult * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1>,UI::StartScreen::IJumpListItem *>(IVectorView_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1> *,unsigned int,unsigned int,UI::StartScreen::IJumpListItem * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Storage::IStorageFolder *,1>,Storage::IStorageFolder *>(IVectorView_impl<Storage::IStorageFolder *,1> *,unsigned int,unsigned int,Storage::IStorageFolder * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Storage::IStorageItem *,1>,Storage::IStorageItem *>(IVectorView_impl<Storage::IStorageItem *,1> *,unsigned int,unsigned int,Storage::IStorageItem * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Storage::Pickers::IPickerFileType *,1>,Storage::Pickers::IPickerFileType *>(IVectorView_impl<Storage::Pickers::IPickerFileType *,1> *,unsigned int,unsigned int,Storage::Pickers::IPickerFileType * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<double,1>,double>(IVectorView_impl<double,1> *,unsigned int,unsigned int,double *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<int,1>,int>(IVectorView_impl<int,1> *,unsigned int,unsigned int,int *,unsigned int *);
				long _VectorGetMany<IVector_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1>,ApplicationModel::Contacts::Internal::IContactActionControl *>(IVector_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1> *,unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *,unsigned int *);
				long _VectorGetMany<IVector_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1>,ApplicationModel::Contacts::Internal::IContactActionControlItem *>(IVector_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1> *,unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *,unsigned int *);
				long _VectorGetMany<IVector_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1>,ApplicationModel::Contacts::Internal::IContactDisplayInformation *>(IVector_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1> *,unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int *);
				long _VectorGetMany<IVector_impl<HSTRING__ *,1>,HSTRING__ *>(IVector_impl<HSTRING__ *,1> *,unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				long _VectorGetMany<IVector_impl<IInspectable *,1>,IInspectable *>(IVector_impl<IInspectable *,1> *,unsigned int,unsigned int,IInspectable * *,unsigned int *);
				long _VectorGetMany<IVector_impl<IUnknown *,1>,IUnknown *>(IVector_impl<IUnknown *,1> *,unsigned int,unsigned int,IUnknown * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1>,Internal::Feedback::IFeedbackItem *>(IVector_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1> *,unsigned int,unsigned int,Internal::Feedback::IFeedbackItem * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1>,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>(IVector_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1> *,unsigned int,unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1>,UI::StartScreen::IJumpListItem *>(IVector_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1> *,unsigned int,unsigned int,UI::StartScreen::IJumpListItem * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Storage::IStorageFolder *,1>,Storage::IStorageFolder *>(IVector_impl<Storage::IStorageFolder *,1> *,unsigned int,unsigned int,Storage::IStorageFolder * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Storage::IStorageItem *,1>,Storage::IStorageItem *>(IVector_impl<Storage::IStorageItem *,1> *,unsigned int,unsigned int,Storage::IStorageItem * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Storage::Pickers::IPickerFileType *,1>,Storage::Pickers::IPickerFileType *>(IVector_impl<Storage::Pickers::IPickerFileType *,1> *,unsigned int,unsigned int,Storage::Pickers::IPickerFileType * *,unsigned int *);
				long _VectorGetMany<IVector_impl<double,1>,double>(IVector_impl<double,1> *,unsigned int,unsigned int,double *,unsigned int *);
				long _VectorGetMany<IVector_impl<int,1>,int>(IVector_impl<int,1> *,unsigned int,unsigned int,int *,unsigned int *);
				long _VectorReplaceAll<IVector_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1>,ApplicationModel::Contacts::Internal::IContactActionControl *>(IVector_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1> *,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *);
				long _VectorReplaceAll<IVector_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1>,ApplicationModel::Contacts::Internal::IContactActionControlItem *>(IVector_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1> *,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *);
				long _VectorReplaceAll<IVector_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1>,ApplicationModel::Contacts::Internal::IContactDisplayInformation *>(IVector_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1> *,unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *);
				long _VectorReplaceAll<IVector_impl<HSTRING__ *,1>,HSTRING__ *>(IVector_impl<HSTRING__ *,1> *,unsigned int,HSTRING__ * *);
				long _VectorReplaceAll<IVector_impl<IInspectable *,1>,IInspectable *>(IVector_impl<IInspectable *,1> *,unsigned int,IInspectable * *);
				long _VectorReplaceAll<IVector_impl<IUnknown *,1>,IUnknown *>(IVector_impl<IUnknown *,1> *,unsigned int,IUnknown * *);
				long _VectorReplaceAll<IVector_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1>,Internal::Feedback::IFeedbackItem *>(IVector_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1> *,unsigned int,Internal::Feedback::IFeedbackItem * *);
				long _VectorReplaceAll<IVector_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1>,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>(IVector_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1> *,unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *);
				long _VectorReplaceAll<IVector_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1>,UI::StartScreen::IJumpListItem *>(IVector_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1> *,unsigned int,UI::StartScreen::IJumpListItem * *);
				long _VectorReplaceAll<IVector_impl<Storage::IStorageFolder *,1>,Storage::IStorageFolder *>(IVector_impl<Storage::IStorageFolder *,1> *,unsigned int,Storage::IStorageFolder * *);
				long _VectorReplaceAll<IVector_impl<Storage::IStorageItem *,1>,Storage::IStorageItem *>(IVector_impl<Storage::IStorageItem *,1> *,unsigned int,Storage::IStorageItem * *);
				long _VectorReplaceAll<IVector_impl<Storage::Pickers::IPickerFileType *,1>,Storage::Pickers::IPickerFileType *>(IVector_impl<Storage::Pickers::IPickerFileType *,1> *,unsigned int,Storage::Pickers::IPickerFileType * *);
				long _VectorReplaceAll<IVector_impl<double,1>,double>(IVector_impl<double,1> *,unsigned int,double *);
				long _VectorReplaceAll<IVector_impl<int,1>,int>(IVector_impl<int,1> *,unsigned int,int *);
				void _Cleanup<ApplicationModel::Contacts::Internal::IContactActionControl,unsigned int>(ApplicationModel::Contacts::Internal::IContactActionControl * * const,unsigned int);
				void _Cleanup<ApplicationModel::Contacts::Internal::IContactActionControlItem,unsigned int>(ApplicationModel::Contacts::Internal::IContactActionControlItem * * const,unsigned int);
				void _Cleanup<ApplicationModel::Contacts::Internal::IContactDisplayInformation,unsigned int>(ApplicationModel::Contacts::Internal::IContactDisplayInformation * * const,unsigned int);
				void _Cleanup<IInspectable,unsigned int>(IInspectable * * const,unsigned int);
				void _Cleanup<IUnknown,unsigned int>(IUnknown * * const,unsigned int);
				void _Cleanup<Internal::Feedback::IFeedbackItem,unsigned int>(Internal::Feedback::IFeedbackItem * * const,unsigned int);
				void _Cleanup<Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest,unsigned int>(Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * * const,unsigned int);
				void _Cleanup<Storage::IStorageFolder,unsigned int>(Storage::IStorageFolder * * const,unsigned int);
				void _Cleanup<Storage::IStorageItem,unsigned int>(Storage::IStorageItem * * const,unsigned int);
				void _Cleanup<Storage::Pickers::IPickerFileType,unsigned int>(Storage::Pickers::IPickerFileType * * const,unsigned int);
				void _Cleanup<Storage::Pickers::IUpdateFilesResult,unsigned int>(Storage::Pickers::IUpdateFilesResult * * const,unsigned int);
				void _Cleanup<UI::StartScreen::IJumpListItem,unsigned int>(UI::StartScreen::IJumpListItem * * const,unsigned int);
				void _Cleanup<unsigned int>(HSTRING__ * *,unsigned int);
			};

			struct IIterable<ApplicationModel::Contacts::Internal::IContactActionControl *>
			{
				IIterable<ApplicationModel::Contacts::Internal::IContactActionControl *>();
			};

			struct IIterable<ApplicationModel::Contacts::Internal::IContactActionControlItem *>
			{
				IIterable<ApplicationModel::Contacts::Internal::IContactActionControlItem *>();
			};

			struct IIterable<Storage::IStorageItem *>
			{
				IIterable<Storage::IStorageItem *>();
			};

			struct IIterator<ApplicationModel::Contacts::Internal::IContactActionControl *>
			{
				IIterator<ApplicationModel::Contacts::Internal::IContactActionControl *>();
			};

			struct IIterator<ApplicationModel::Contacts::Internal::IContactActionControlItem *>
			{
				IIterator<ApplicationModel::Contacts::Internal::IContactActionControlItem *>();
			};

			struct IIterator<IInspectable *>
			{
				IIterator<IInspectable *>();
			};

			struct IIterator<Storage::IStorageItem *>
			{
				IIterator<Storage::IStorageItem *>();
			};

			struct IIterator_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1>
			{
				virtual long GetMany(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *,unsigned int *);
			};

			struct IIterator_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1>
			{
				virtual long GetMany(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *,unsigned int *);
			};

			struct IIterator_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1>
			{
				virtual long GetMany(unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int *);
			};

			struct IIterator_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,HSTRING__ * *,unsigned int *);
			};

			struct IIterator_impl<IInspectable *,1>
			{
				virtual long GetMany(unsigned int,IInspectable * *,unsigned int *);
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1>
			{
				virtual long GetMany(unsigned int,IKeyValuePair<HSTRING__ *,IInspectable *> * *,unsigned int *);
			};

			struct IIterator_impl<IUnknown *,1>
			{
				virtual long GetMany(unsigned int,IUnknown * *,unsigned int *);
			};

			struct IIterator_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1>
			{
				virtual long GetMany(unsigned int,Internal::Feedback::IFeedbackItem * *,unsigned int *);
			};

			struct IIterator_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1>
			{
				virtual long GetMany(unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int *);
			};

			struct IIterator_impl<Internal::AggregateType<Storage::Pickers::UpdateFilesResult *,Storage::Pickers::IUpdateFilesResult *>,1>
			{
				virtual long GetMany(unsigned int,Storage::Pickers::IUpdateFilesResult * *,unsigned int *);
			};

			struct IIterator_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1>
			{
				virtual long GetMany(unsigned int,UI::StartScreen::IJumpListItem * *,unsigned int *);
			};

			struct IIterator_impl<Storage::IStorageFolder *,1>
			{
				virtual long GetMany(unsigned int,Storage::IStorageFolder * *,unsigned int *);
			};

			struct IIterator_impl<Storage::IStorageItem *,1>
			{
				virtual long GetMany(unsigned int,Storage::IStorageItem * *,unsigned int *);
			};

			struct IIterator_impl<Storage::Pickers::IPickerFileType *,1>
			{
				virtual long GetMany(unsigned int,Storage::Pickers::IPickerFileType * *,unsigned int *);
			};

			struct IIterator_impl<double,1>
			{
				virtual long GetMany(unsigned int,double *,unsigned int *);
			};

			struct IIterator_impl<int,1>
			{
				virtual long GetMany(unsigned int,int *,unsigned int *);
			};

			struct IObservableVector<ApplicationModel::Contacts::Internal::IContactActionControl *>
			{
				IObservableVector<ApplicationModel::Contacts::Internal::IContactActionControl *>();
			};

			struct IObservableVector<ApplicationModel::Contacts::Internal::IContactActionControlItem *>
			{
				IObservableVector<ApplicationModel::Contacts::Internal::IContactActionControlItem *>();
			};

			struct IVector<ApplicationModel::Contacts::Internal::IContactActionControl *>
			{
				IVector<ApplicationModel::Contacts::Internal::IContactActionControl *>();
			};

			struct IVector<ApplicationModel::Contacts::Internal::IContactActionControlItem *>
			{
				IVector<ApplicationModel::Contacts::Internal::IContactActionControlItem *>();
			};

			struct IVector<HSTRING__ *>
			{
				IVector<HSTRING__ *>();
			};

			struct IVector<Storage::IStorageItem *>
			{
				IVector<Storage::IStorageItem *>();
			};

			struct IVectorView<ApplicationModel::Contacts::Internal::IContactActionControl *>
			{
				IVectorView<ApplicationModel::Contacts::Internal::IContactActionControl *>();
			};

			struct IVectorView<ApplicationModel::Contacts::Internal::IContactActionControlItem *>
			{
				IVectorView<ApplicationModel::Contacts::Internal::IContactActionControlItem *>();
			};

			struct IVectorView<Storage::IStorageItem *>
			{
				IVectorView<Storage::IStorageItem *>();
			};

			struct IVectorView_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *,unsigned int *);
			};

			struct IVectorView_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *,unsigned int *);
			};

			struct IVectorView_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int *);
			};

			struct IVectorView_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
			};

			struct IVectorView_impl<IUnknown *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,IUnknown * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Feedback::IFeedbackItem * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::AggregateType<Storage::Pickers::UpdateFilesResult *,Storage::Pickers::IUpdateFilesResult *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Storage::Pickers::IUpdateFilesResult * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,UI::StartScreen::IJumpListItem * *,unsigned int *);
			};

			struct IVectorView_impl<Storage::IStorageFolder *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Storage::IStorageFolder * *,unsigned int *);
			};

			struct IVectorView_impl<Storage::IStorageItem *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Storage::IStorageItem * *,unsigned int *);
			};

			struct IVectorView_impl<Storage::Pickers::IPickerFileType *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Storage::Pickers::IPickerFileType * *,unsigned int *);
			};

			struct IVectorView_impl<double,1>
			{
				virtual long GetMany(unsigned int,unsigned int,double *,unsigned int *);
			};

			struct IVectorView_impl<int,1>
			{
				virtual long GetMany(unsigned int,unsigned int,int *,unsigned int *);
			};

			struct IVector_impl<ApplicationModel::Contacts::Internal::IContactActionControl *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *);
			};

			struct IVector_impl<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *);
			};

			struct IVector_impl<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *);
			};

			struct IVector_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,HSTRING__ * *);
			};

			struct IVector_impl<IInspectable *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,IInspectable * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,IInspectable * *);
			};

			struct IVector_impl<IUnknown *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,IUnknown * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,IUnknown * *);
			};

			struct IVector_impl<Internal::AggregateType<Internal::Feedback::FeedbackItem *,Internal::Feedback::IFeedbackItem *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Feedback::IFeedbackItem * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Internal::Feedback::IFeedbackItem * *);
			};

			struct IVector_impl<Internal::AggregateType<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *);
			};

			struct IVector_impl<Internal::AggregateType<UI::StartScreen::JumpListItem *,UI::StartScreen::IJumpListItem *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,UI::StartScreen::IJumpListItem * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,UI::StartScreen::IJumpListItem * *);
			};

			struct IVector_impl<Storage::IStorageFolder *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Storage::IStorageFolder * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Storage::IStorageFolder * *);
			};

			struct IVector_impl<Storage::IStorageItem *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Storage::IStorageItem * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Storage::IStorageItem * *);
			};

			struct IVector_impl<Storage::Pickers::IPickerFileType *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Storage::Pickers::IPickerFileType * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Storage::Pickers::IPickerFileType * *);
			};

			struct IVector_impl<double,1>
			{
				virtual long GetMany(unsigned int,unsigned int,double *,unsigned int *);
				virtual long ReplaceAll(unsigned int,double *);
			};

			struct IVector_impl<int,1>
			{
				virtual long GetMany(unsigned int,unsigned int,int *,unsigned int *);
				virtual long ReplaceAll(unsigned int,int *);
			};

			namespace Internal
			{
				class HashMap<HSTRING__ *,IInspectable *,DefaultHash<HSTRING__ *>,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >
				{
					class Iterator
					{
						long EnsureVersionMatches();
					public:
						Iterator(HashMap<HSTRING__ *,IInspectable *,DefaultHash<HSTRING__ *>,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > *);
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetMany(unsigned int,IKeyValuePair<HSTRING__ *,IInspectable *> * * const,unsigned int *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long MoveNext(unsigned char *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long get_Current(IKeyValuePair<HSTRING__ *,IInspectable *> * *);
						virtual long get_HasCurrent(unsigned char *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					class View
					{
						long EnsureVersionMatches();
					public:
						View(HashMap<HSTRING__ *,IInspectable *,DefaultHash<HSTRING__ *>,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > *,DefaultEqualityPredicate<HSTRING__ *>);
						virtual long First(IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> * *);
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long HasKey(HSTRING__ *,unsigned char *);
						virtual long Lookup(HSTRING__ *,IInspectable * *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long Split(IMapView<HSTRING__ *,IInspectable *> * *,IMapView<HSTRING__ *,IInspectable *> * *);
						virtual long get_Size(unsigned int *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					long EnsureInitialized();
					long Initialize();
					static void _Free(XWinRT::XHashMap<HSTRING__ *,XWinRT::detail::GitStorageType<IInspectable>,HashMap<HSTRING__ *,IInspectable *,DefaultHash<HSTRING__ *>,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,XWinRT::CElementTraits<XWinRT::detail::GitStorageType<IInspectable> > > *);
					void _EraseAll(XWinRT::XHashMap<HSTRING__ *,XWinRT::detail::GitStorageType<IInspectable>,HashMap<HSTRING__ *,IInspectable *,DefaultHash<HSTRING__ *>,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,XWinRT::CElementTraits<XWinRT::detail::GitStorageType<IInspectable> > > *);
				protected:
					virtual ~HashMap<HSTRING__ *,IInspectable *,DefaultHash<HSTRING__ *>,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >();
				public:
					HashMap<HSTRING__ *,IInspectable *,DefaultHash<HSTRING__ *>,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >(DefaultHash<HSTRING__ *> const &,DefaultEqualityPredicate<HSTRING__ *> const &,HashMap<HSTRING__ *,IInspectable *,DefaultHash<HSTRING__ *>,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::permission);
					static long Make(DefaultHash<HSTRING__ *> const &,DefaultEqualityPredicate<HSTRING__ *> const &,HashMap<HSTRING__ *,IInspectable *,DefaultHash<HSTRING__ *>,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > * *);
					virtual long Clear();
					virtual long First(IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IMapView<HSTRING__ *,IInspectable *> * *);
					virtual long HasKey(HSTRING__ *,unsigned char *);
					virtual long Insert(HSTRING__ *,IInspectable *,unsigned char *);
					virtual long Lookup(HSTRING__ *,IInspectable * *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long Remove(HSTRING__ *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0>
				{
					static long RaiseEvent(...);
				};

				class NaiveSplitView<HSTRING__ *,IInspectable *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >
				{
					class Chunk
					{
						virtual void dummy();
					};

					struct ChunkElementIterator
					{
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long MoveNext(unsigned char *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long get_Current(IKeyValuePair<HSTRING__ *,IInspectable *> * *);
						virtual long get_HasCurrent(unsigned char *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					struct ChunkView
					{
						long Initialize(IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> *);
						virtual long First(IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> * *);
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long HasKey(HSTRING__ *,unsigned char *);
						virtual long Lookup(HSTRING__ *,IInspectable * *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long Split(IMapView<HSTRING__ *,IInspectable *> * *,IMapView<HSTRING__ *,IInspectable *> * *);
						virtual long get_Size(unsigned int *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					class SplitIterator
					{
						long EnsureForced();
					public:
						SplitIterator(NaiveSplitView<HSTRING__ *,IInspectable *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> > *);
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long MoveNext(unsigned char *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long get_Current(IKeyValuePair<HSTRING__ *,IInspectable *> * *);
						virtual long get_HasCurrent(unsigned char *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					long EnsureInitialized();
					long Force();
					long Initialize(IMapView<HSTRING__ *,IInspectable *> *);
					long IterateOnChunks<<lambda_48e7abad38d78e96eeec718fb7914cb3>,<lambda_dfdbc0489f60b0e758bbcb1545c5c02b> >(<lambda_48e7abad38d78e96eeec718fb7914cb3>,<lambda_dfdbc0489f60b0e758bbcb1545c5c02b>);
					long IterateOnChunks<<lambda_a9443b991b3dcc8b5c7a4c2f2ce8491b>,<lambda_fdd41dbf90b774a0cee2a8a4d8775804> >(<lambda_a9443b991b3dcc8b5c7a4c2f2ce8491b>,<lambda_fdd41dbf90b774a0cee2a8a4d8775804>);
				public:
					NaiveSplitView<HSTRING__ *,IInspectable *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >(DefaultEqualityPredicate<HSTRING__ *> const &,NaiveSplitView<HSTRING__ *,IInspectable *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,HashMapOptions<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::permission);
					virtual long First(IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long HasKey(HSTRING__ *,unsigned char *);
					virtual long Lookup(HSTRING__ *,IInspectable * *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long Split(IMapView<HSTRING__ *,IInspectable *> * *,IMapView<HSTRING__ *,IInspectable *> * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class SimpleKeyValuePair<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,1>
				{
					long Initialize(HSTRING__ * const &,XWinRT::detail::GitStorageType<IInspectable> const &);
				public:
					SimpleKeyValuePair<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,1>(SimpleKeyValuePair<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,1>::permission);
					static long Make(HSTRING__ * const &,XWinRT::detail::GitStorageType<IInspectable> const &,SimpleKeyValuePair<HSTRING__ *,IInspectable *,DefaultLifetimeTraits<HSTRING__ *>,DefaultLifetimeTraits<IInspectable *>,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Key(HSTRING__ * *);
					virtual long get_Value(IInspectable * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactActionControl *,Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactActionControl *,Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,XWinRT::IntVersionTag,1>(Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> > *,SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactActionControl *,Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> > *,SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactActionControl *,Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(ApplicationModel::Contacts::Internal::IContactActionControl * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactActionControlItem *,Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactActionControlItem *,Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,XWinRT::IntVersionTag,1>(Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> > *,SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactActionControlItem *,Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> > *,SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactActionControlItem *,Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(ApplicationModel::Contacts::Internal::IContactActionControlItem * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,XWinRT::IntVersionTag,0>(Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> > *,SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,XWinRT::IntVersionTag,0>::permission);
					static long Make(Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> > *,SimpleVectorIterator<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,XWinRT::IntVersionTag,0> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(ApplicationModel::Contacts::Internal::IContactDisplayInformation * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<Feedback::FeedbackItem *,Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> >,DefaultLifetimeTraits<Feedback::FeedbackItem *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<Feedback::FeedbackItem *,Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> >,DefaultLifetimeTraits<Feedback::FeedbackItem *>,XWinRT::IntVersionTag,1>(Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> > *,SimpleVectorIterator<Feedback::FeedbackItem *,Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> >,DefaultLifetimeTraits<Feedback::FeedbackItem *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> > *,SimpleVectorIterator<Feedback::FeedbackItem *,Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> >,DefaultLifetimeTraits<Feedback::FeedbackItem *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,Feedback::IFeedbackItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(Feedback::IFeedbackItem * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>(Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(HSTRING__ * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0>(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0>::permission);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(HSTRING__ * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(HSTRING__ * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<IUnknown *,Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> >,DefaultLifetimeTraits<IUnknown *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<IUnknown *,Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> >,DefaultLifetimeTraits<IUnknown *>,XWinRT::IntVersionTag,1>(Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> > *,SimpleVectorIterator<IUnknown *,Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> >,DefaultLifetimeTraits<IUnknown *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> > *,SimpleVectorIterator<IUnknown *,Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> >,DefaultLifetimeTraits<IUnknown *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,IUnknown * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(IUnknown * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,XWinRT::IntVersionTag,0>(Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> > *,SimpleVectorIterator<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,XWinRT::IntVersionTag,0>::permission);
					static long Make(Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> > *,SimpleVectorIterator<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,XWinRT::IntVersionTag,0> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<Storage::IStorageFolder *,Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> >,XWinRT::InterfaceLifetimeTraits,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<Storage::IStorageFolder *,Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> >,XWinRT::InterfaceLifetimeTraits,XWinRT::IntVersionTag,0>(Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> > *,SimpleVectorIterator<Storage::IStorageFolder *,Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> >,XWinRT::InterfaceLifetimeTraits,XWinRT::IntVersionTag,0>::permission);
					static long Make(Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> > *,SimpleVectorIterator<Storage::IStorageFolder *,Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> >,XWinRT::InterfaceLifetimeTraits,XWinRT::IntVersionTag,0> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,Storage::IStorageFolder * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(Storage::IStorageFolder * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<Storage::IStorageItem *,Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> >,DefaultLifetimeTraits<Storage::IStorageItem *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<Storage::IStorageItem *,Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> >,DefaultLifetimeTraits<Storage::IStorageItem *>,XWinRT::IntVersionTag,1>(Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> > *,SimpleVectorIterator<Storage::IStorageItem *,Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> >,DefaultLifetimeTraits<Storage::IStorageItem *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> > *,SimpleVectorIterator<Storage::IStorageItem *,Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> >,DefaultLifetimeTraits<Storage::IStorageItem *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,Storage::IStorageItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(Storage::IStorageItem * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<Storage::Pickers::IPickerFileType *,Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> >,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<Storage::Pickers::IPickerFileType *,Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> >,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0>(Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> > *,SimpleVectorIterator<Storage::Pickers::IPickerFileType *,Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> >,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0>::permission);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,Storage::Pickers::IPickerFileType * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(Storage::Pickers::IPickerFileType * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<UI::StartScreen::JumpListItem *,Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> >,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<UI::StartScreen::JumpListItem *,Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> >,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,XWinRT::IntVersionTag,1>(Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> > *,SimpleVectorIterator<UI::StartScreen::JumpListItem *,Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> >,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> > *,SimpleVectorIterator<UI::StartScreen::JumpListItem *,Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> >,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,UI::StartScreen::IJumpListItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(UI::StartScreen::IJumpListItem * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<double,Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> >,DefaultLifetimeTraits<double>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<double,Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> >,DefaultLifetimeTraits<double>,XWinRT::IntVersionTag,1>(Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> > *,SimpleVectorIterator<double,Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> >,DefaultLifetimeTraits<double>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> > *,SimpleVectorIterator<double,Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> >,DefaultLifetimeTraits<double>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,double *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(double *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<int,Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> >,DefaultLifetimeTraits<int>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<int,Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> >,DefaultLifetimeTraits<int>,XWinRT::IntVersionTag,1>(Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> > *,SimpleVectorIterator<int,Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> >,DefaultLifetimeTraits<int>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> > *,SimpleVectorIterator<int,Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> >,DefaultLifetimeTraits<int>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,int *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(int *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<ApplicationModel::Contacts::Internal::IContactActionControl *,Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<ApplicationModel::Contacts::Internal::IContactActionControl *,Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,XWinRT::IntVersionTag,1>(Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> > *,SimpleVectorView<ApplicationModel::Contacts::Internal::IContactActionControl *,Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<ApplicationModel::Contacts::Internal::IContactActionControl *> * *);
					virtual long GetAt(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(ApplicationModel::Contacts::Internal::IContactActionControl *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<ApplicationModel::Contacts::Internal::IContactActionControlItem *,Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<ApplicationModel::Contacts::Internal::IContactActionControlItem *,Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,XWinRT::IntVersionTag,1>(Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> > *,SimpleVectorView<ApplicationModel::Contacts::Internal::IContactActionControlItem *,Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<ApplicationModel::Contacts::Internal::IContactActionControlItem *> * *);
					virtual long GetAt(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(ApplicationModel::Contacts::Internal::IContactActionControlItem *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorView<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,XWinRT::IntVersionTag,0>(Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> > *,SimpleVectorView<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,XWinRT::IntVersionTag,0>::permission);
					virtual long First(IIterator<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> * *);
					virtual long GetAt(unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(ApplicationModel::Contacts::Internal::IContactDisplayInformation *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<Feedback::FeedbackItem *,Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> >,DefaultLifetimeTraits<Feedback::FeedbackItem *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<Feedback::FeedbackItem *,Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> >,DefaultLifetimeTraits<Feedback::FeedbackItem *>,XWinRT::IntVersionTag,1>(Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> > *,SimpleVectorView<Feedback::FeedbackItem *,Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> >,DefaultLifetimeTraits<Feedback::FeedbackItem *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<Feedback::FeedbackItem *> * *);
					virtual long GetAt(unsigned int,Feedback::IFeedbackItem * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Feedback::IFeedbackItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(Feedback::IFeedbackItem *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>(Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0>(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> > *,SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,0>::permission);
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<IUnknown *,Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> >,DefaultLifetimeTraits<IUnknown *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<IUnknown *,Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> >,DefaultLifetimeTraits<IUnknown *>,XWinRT::IntVersionTag,1>(Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> > *,SimpleVectorView<IUnknown *,Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> >,DefaultLifetimeTraits<IUnknown *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<IUnknown *> * *);
					virtual long GetAt(unsigned int,IUnknown * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,IUnknown * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(IUnknown *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorView<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,XWinRT::IntVersionTag,0>(Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> > *,SimpleVectorView<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,XWinRT::IntVersionTag,0>::permission);
					virtual long First(IIterator<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> * *);
					virtual long GetAt(unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<Storage::IStorageFolder *,Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> >,XWinRT::InterfaceLifetimeTraits,XWinRT::IntVersionTag,0>
				{
					SimpleVectorView<Storage::IStorageFolder *,Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> >,XWinRT::InterfaceLifetimeTraits,XWinRT::IntVersionTag,0>(Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> > *,SimpleVectorView<Storage::IStorageFolder *,Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> >,XWinRT::InterfaceLifetimeTraits,XWinRT::IntVersionTag,0>::permission);
					virtual long First(IIterator<Storage::IStorageFolder *> * *);
					virtual long GetAt(unsigned int,Storage::IStorageFolder * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Storage::IStorageFolder * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(Storage::IStorageFolder *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<Storage::IStorageItem *,Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> >,DefaultLifetimeTraits<Storage::IStorageItem *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<Storage::IStorageItem *,Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> >,DefaultLifetimeTraits<Storage::IStorageItem *>,XWinRT::IntVersionTag,1>(Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> > *,SimpleVectorView<Storage::IStorageItem *,Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> >,DefaultLifetimeTraits<Storage::IStorageItem *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<Storage::IStorageItem *> * *);
					virtual long GetAt(unsigned int,Storage::IStorageItem * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Storage::IStorageItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(Storage::IStorageItem *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<Storage::Pickers::IPickerFileType *,Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> >,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorView<Storage::Pickers::IPickerFileType *,Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> >,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0>(Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> > *,SimpleVectorView<Storage::Pickers::IPickerFileType *,Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> >,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,XWinRT::IntVersionTag,0>::permission);
					virtual long First(IIterator<Storage::Pickers::IPickerFileType *> * *);
					virtual long GetAt(unsigned int,Storage::Pickers::IPickerFileType * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Storage::Pickers::IPickerFileType * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(Storage::Pickers::IPickerFileType *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<UI::StartScreen::JumpListItem *,Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> >,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<UI::StartScreen::JumpListItem *,Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> >,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,XWinRT::IntVersionTag,1>(Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> > *,SimpleVectorView<UI::StartScreen::JumpListItem *,Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> >,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<UI::StartScreen::JumpListItem *> * *);
					virtual long GetAt(unsigned int,UI::StartScreen::IJumpListItem * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,UI::StartScreen::IJumpListItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(UI::StartScreen::IJumpListItem *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<double,Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> >,DefaultLifetimeTraits<double>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<double,Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> >,DefaultLifetimeTraits<double>,XWinRT::IntVersionTag,1>(Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> > *,SimpleVectorView<double,Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> >,DefaultLifetimeTraits<double>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<double> * *);
					virtual long GetAt(unsigned int,double *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,double *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(double,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<int,Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> >,DefaultLifetimeTraits<int>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<int,Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> >,DefaultLifetimeTraits<int>,XWinRT::IntVersionTag,1>(Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> > *,SimpleVectorView<int,Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> >,DefaultLifetimeTraits<int>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<int> * *);
					virtual long GetAt(unsigned int,int *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,int *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(int,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<ApplicationModel::Contacts::Internal::IContactActionControl> *,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<ApplicationModel::Contacts::Internal::IContactActionControl> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<ApplicationModel::Contacts::Internal::IContactActionControl> * *,unsigned int *);
				public:
					Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >(DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *> const &,Vector<ApplicationModel::Contacts::Internal::IContactActionControl *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControl *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControl *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0> >::permission);
					virtual long Append(ApplicationModel::Contacts::Internal::IContactActionControl *);
					virtual long Clear();
					virtual long First(IIterator<ApplicationModel::Contacts::Internal::IContactActionControl *> * *);
					virtual long GetAt(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<ApplicationModel::Contacts::Internal::IContactActionControl *> * *);
					virtual long IndexOf(ApplicationModel::Contacts::Internal::IContactActionControl *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl * *);
					virtual long SetAt(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControl *);
					virtual long add_VectorChanged(VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControl *> *,EventRegistrationToken *);
					virtual long get_Size(unsigned int *);
					virtual long remove_VectorChanged(EventRegistrationToken);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<ApplicationModel::Contacts::Internal::IContactActionControlItem> *,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<ApplicationModel::Contacts::Internal::IContactActionControlItem> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<ApplicationModel::Contacts::Internal::IContactActionControlItem> * *,unsigned int *);
				public:
					Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >(DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *> const &,Vector<ApplicationModel::Contacts::Internal::IContactActionControlItem *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0> >::permission);
					virtual long Append(ApplicationModel::Contacts::Internal::IContactActionControlItem *);
					virtual long Clear();
					virtual long First(IIterator<ApplicationModel::Contacts::Internal::IContactActionControlItem *> * *);
					virtual long GetAt(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<ApplicationModel::Contacts::Internal::IContactActionControlItem *> * *);
					virtual long IndexOf(ApplicationModel::Contacts::Internal::IContactActionControlItem *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem * *);
					virtual long SetAt(unsigned int,ApplicationModel::Contacts::Internal::IContactActionControlItem *);
					virtual long add_VectorChanged(VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControlItem *> *,EventRegistrationToken *);
					virtual long get_Size(unsigned int *);
					virtual long remove_VectorChanged(EventRegistrationToken);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >
				{
					long IndexOfInternal(ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int);
					void _EraseAll(ApplicationModel::Contacts::Internal::IContactDisplayInformation * * *,unsigned int *);
				public:
					Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >(DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> const &,Vector<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,DefaultEqualityPredicate<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultLifetimeTraits<ApplicationModel::Contacts::Internal::IContactDisplayInformation *>,DefaultVectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >::permission);
					virtual long Append(ApplicationModel::Contacts::Internal::IContactDisplayInformation *);
					virtual long Clear();
					virtual long First(IIterator<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> * *);
					virtual long GetAt(unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<ApplicationModel::Contacts::Internal::IContactDisplayInformation *> * *);
					virtual long IndexOf(ApplicationModel::Contacts::Internal::IContactDisplayInformation *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation * *);
					virtual long SetAt(unsigned int,ApplicationModel::Contacts::Internal::IContactDisplayInformation *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<Feedback::IFeedbackItem> *,unsigned int,Feedback::IFeedbackItem *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,Feedback::IFeedbackItem *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<Feedback::IFeedbackItem> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<Feedback::IFeedbackItem> * *,unsigned int *);
				public:
					Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> >(DefaultEqualityPredicate<Feedback::FeedbackItem *> const &,Vector<Feedback::FeedbackItem *,DefaultEqualityPredicate<Feedback::FeedbackItem *>,DefaultLifetimeTraits<Feedback::FeedbackItem *>,VectorOptions<Feedback::FeedbackItem *,0,1,0> >::permission);
					virtual long Append(Feedback::IFeedbackItem *);
					virtual long Clear();
					virtual long First(IIterator<Feedback::FeedbackItem *> * *);
					virtual long GetAt(unsigned int,Feedback::IFeedbackItem * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Feedback::IFeedbackItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<Feedback::FeedbackItem *> * *);
					virtual long IndexOf(Feedback::IFeedbackItem *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,Feedback::IFeedbackItem *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,Feedback::IFeedbackItem * *);
					virtual long SetAt(unsigned int,Feedback::IFeedbackItem *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >
				{
					long IndexOfInternal(HSTRING__ * *,unsigned int,HSTRING__ *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,HSTRING__ *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(HSTRING__ * *,unsigned int);
					void _EraseAll(HSTRING__ * * *,unsigned int *);
				public:
					Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >(CCaseInsensitiveStringEqualityPredicate const &,Vector<HSTRING__ *,CCaseInsensitiveStringEqualityPredicate,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >::permission);
					virtual long Append(HSTRING__ *);
					virtual long Clear();
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<HSTRING__ *> * *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,HSTRING__ *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,HSTRING__ * *);
					virtual long SetAt(unsigned int,HSTRING__ *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> >
				{
					long IndexOfInternal(HSTRING__ * *,unsigned int,HSTRING__ *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,HSTRING__ *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(HSTRING__ * *,unsigned int);
					void _EraseAll(HSTRING__ * * *,unsigned int *);
				public:
					Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> >(DefaultEqualityPredicate<HSTRING__ *> const &,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,DefaultVectorOptions<HSTRING__ *> >::permission);
					virtual long Append(HSTRING__ *);
					virtual long Clear();
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<HSTRING__ *> * *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,HSTRING__ *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,HSTRING__ * *);
					virtual long SetAt(unsigned int,HSTRING__ *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >
				{
					long IndexOfInternal(HSTRING__ * *,unsigned int,HSTRING__ *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,HSTRING__ *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(HSTRING__ * *,unsigned int);
					void _EraseAll(HSTRING__ * * *,unsigned int *);
				public:
					Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >(DefaultEqualityPredicate<HSTRING__ *> const &,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >::permission);
					virtual long Append(HSTRING__ *);
					virtual long Clear();
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<HSTRING__ *> * *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,HSTRING__ *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,HSTRING__ * *);
					virtual long SetAt(unsigned int,HSTRING__ *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<IUnknown> *,unsigned int,IUnknown *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,IUnknown *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<IUnknown> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<IUnknown> * *,unsigned int *);
				public:
					Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> >(DefaultEqualityPredicate<IUnknown *> const &,Vector<IUnknown *,DefaultEqualityPredicate<IUnknown *>,DefaultLifetimeTraits<IUnknown *>,VectorOptions<IUnknown *,0,1,0> >::permission);
					virtual long Append(IUnknown *);
					virtual long Clear();
					virtual long First(IIterator<IUnknown *> * *);
					virtual long GetAt(unsigned int,IUnknown * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,IUnknown * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<IUnknown *> * *);
					virtual long IndexOf(IUnknown *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,IUnknown *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,IUnknown * *);
					virtual long SetAt(unsigned int,IUnknown *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >
				{
					long IndexOfInternal(Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int);
					void _EraseAll(Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * * *,unsigned int *);
				public:
					Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >(DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> const &,Vector<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,DefaultEqualityPredicate<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultLifetimeTraits<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *>,DefaultVectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >::permission);
					virtual long Append(Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *);
					virtual long Clear();
					virtual long First(IIterator<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> * *);
					virtual long GetAt(unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> * *);
					virtual long IndexOf(Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *);
					virtual long SetAt(unsigned int,Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> >
				{
					long IndexOfInternal(Storage::IStorageFolder * *,unsigned int,Storage::IStorageFolder *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,Storage::IStorageFolder *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(Storage::IStorageFolder * *,unsigned int);
					void _EraseAll(Storage::IStorageFolder * * *,unsigned int *);
				public:
					Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> >(DefaultEqualityPredicate<Storage::IStorageFolder *> const &,Vector<Storage::IStorageFolder *,DefaultEqualityPredicate<Storage::IStorageFolder *>,XWinRT::InterfaceLifetimeTraits,DefaultVectorOptions<Storage::IStorageFolder *> >::permission);
					virtual long Append(Storage::IStorageFolder *);
					virtual long Clear();
					virtual long First(IIterator<Storage::IStorageFolder *> * *);
					virtual long GetAt(unsigned int,Storage::IStorageFolder * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Storage::IStorageFolder * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<Storage::IStorageFolder *> * *);
					virtual long IndexOf(Storage::IStorageFolder *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,Storage::IStorageFolder *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,Storage::IStorageFolder * *);
					virtual long SetAt(unsigned int,Storage::IStorageFolder *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<Storage::IStorageItem> *,unsigned int,Storage::IStorageItem *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,Storage::IStorageItem *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<Storage::IStorageItem> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<Storage::IStorageItem> * *,unsigned int *);
				public:
					Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> >(DefaultEqualityPredicate<Storage::IStorageItem *> const &,Vector<Storage::IStorageItem *,DefaultEqualityPredicate<Storage::IStorageItem *>,DefaultLifetimeTraits<Storage::IStorageItem *>,VectorOptions<Storage::IStorageItem *,0,1,0> >::permission);
					virtual long Append(Storage::IStorageItem *);
					virtual long Clear();
					virtual long First(IIterator<Storage::IStorageItem *> * *);
					virtual long GetAt(unsigned int,Storage::IStorageItem * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Storage::IStorageItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<Storage::IStorageItem *> * *);
					virtual long IndexOf(Storage::IStorageItem *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,Storage::IStorageItem *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,Storage::IStorageItem * *);
					virtual long SetAt(unsigned int,Storage::IStorageItem *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> >
				{
					long IndexOfInternal(Storage::Pickers::IPickerFileType * *,unsigned int,Storage::Pickers::IPickerFileType *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,Storage::Pickers::IPickerFileType *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(Storage::Pickers::IPickerFileType * *,unsigned int);
					void _EraseAll(Storage::Pickers::IPickerFileType * * *,unsigned int *);
				public:
					Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> >(DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *> const &,Vector<Storage::Pickers::IPickerFileType *,DefaultEqualityPredicate<Storage::Pickers::IPickerFileType *>,DefaultLifetimeTraits<Storage::Pickers::IPickerFileType *>,DefaultVectorOptions<Storage::Pickers::IPickerFileType *> >::permission);
					virtual long Append(Storage::Pickers::IPickerFileType *);
					virtual long Clear();
					virtual long First(IIterator<Storage::Pickers::IPickerFileType *> * *);
					virtual long GetAt(unsigned int,Storage::Pickers::IPickerFileType * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Storage::Pickers::IPickerFileType * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<Storage::Pickers::IPickerFileType *> * *);
					virtual long IndexOf(Storage::Pickers::IPickerFileType *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,Storage::Pickers::IPickerFileType *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,Storage::Pickers::IPickerFileType * *);
					virtual long SetAt(unsigned int,Storage::Pickers::IPickerFileType *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> >
				{
					long IndexOfInternal(XWinRT::detail::GitStorageType<UI::StartScreen::IJumpListItem> *,unsigned int,UI::StartScreen::IJumpListItem *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,UI::StartScreen::IJumpListItem *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(XWinRT::detail::GitStorageType<UI::StartScreen::IJumpListItem> *,unsigned int);
					void _EraseAll(XWinRT::detail::GitStorageType<UI::StartScreen::IJumpListItem> * *,unsigned int *);
				public:
					Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> >(DefaultEqualityPredicate<UI::StartScreen::JumpListItem *> const &,Vector<UI::StartScreen::JumpListItem *,DefaultEqualityPredicate<UI::StartScreen::JumpListItem *>,DefaultLifetimeTraits<UI::StartScreen::JumpListItem *>,VectorOptions<UI::StartScreen::JumpListItem *,0,1,0> >::permission);
					virtual long Append(UI::StartScreen::IJumpListItem *);
					virtual long Clear();
					virtual long First(IIterator<UI::StartScreen::JumpListItem *> * *);
					virtual long GetAt(unsigned int,UI::StartScreen::IJumpListItem * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,UI::StartScreen::IJumpListItem * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<UI::StartScreen::JumpListItem *> * *);
					virtual long IndexOf(UI::StartScreen::IJumpListItem *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,UI::StartScreen::IJumpListItem *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,UI::StartScreen::IJumpListItem * *);
					virtual long SetAt(unsigned int,UI::StartScreen::IJumpListItem *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> >
				{
					long IndexOfInternal(double *,unsigned int,double,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,double,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(double *,unsigned int);
					void _EraseAll(double * *,unsigned int *);
				public:
					Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> >(DefaultEqualityPredicate<double> const &,Vector<double,DefaultEqualityPredicate<double>,DefaultLifetimeTraits<double>,VectorOptions<double,0,1,0> >::permission);
					virtual long Append(double);
					virtual long Clear();
					virtual long First(IIterator<double> * *);
					virtual long GetAt(unsigned int,double *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,double *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<double> * *);
					virtual long IndexOf(double,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,double);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,double *);
					virtual long SetAt(unsigned int,double);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> >
				{
					long IndexOfInternal(int *,unsigned int,int,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,int,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(int *,unsigned int);
					void _EraseAll(int * *,unsigned int *);
				public:
					Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> >(DefaultEqualityPredicate<int> const &,Vector<int,DefaultEqualityPredicate<int>,DefaultLifetimeTraits<int>,VectorOptions<int,0,1,0> >::permission);
					virtual long Append(int);
					virtual long Clear();
					virtual long First(IIterator<int> * *);
					virtual long GetAt(unsigned int,int *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,int *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<int> * *);
					virtual long IndexOf(int,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,int);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,int *);
					virtual long SetAt(unsigned int,int);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct VectorChangedEventArgs
				{
					VectorChangedEventArgs(CollectionChange,unsigned int);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_CollectionChange(CollectionChange *);
					virtual long get_Index(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControl *,1,1,0>
				{
					static long RaiseEvent(XWinRT::detail::ReentrancyGuard<1> &,GitEventSource<VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControl *>,Microsoft::WRL::InvokeModeOptions<-2> > &,IObservableVector<ApplicationModel::Contacts::Internal::IContactActionControl *> *,CollectionChange,unsigned int);
				};

				struct VectorOptions<ApplicationModel::Contacts::Internal::IContactActionControlItem *,1,1,0>
				{
					static long RaiseEvent(XWinRT::detail::ReentrancyGuard<1> &,GitEventSource<VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,Microsoft::WRL::InvokeModeOptions<-2> > &,IObservableVector<ApplicationModel::Contacts::Internal::IContactActionControlItem *> *,CollectionChange,unsigned int);
				};

				struct VectorOptions<ApplicationModel::Contacts::Internal::IContactDisplayInformation *,0,0,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<Feedback::FeedbackItem *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<HSTRING__ *,0,0,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<HSTRING__ *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<IUnknown *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *,0,0,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<Storage::IStorageFolder *,0,0,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<Storage::IStorageItem *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<Storage::Pickers::IPickerFileType *,0,0,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<UI::StartScreen::JumpListItem *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<double,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<int,0,1,0>
				{
					static long RaiseEvent(...);
				};

			};

			struct VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControl *>
			{
				VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControl *>();
			};

			struct VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControlItem *>
			{
				VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControlItem *>();
			};

		};

		struct IAsyncAction
		{
			IAsyncAction();
		};

		struct IAsyncOperationCompletedHandler<Devices::Geolocation::Geoposition *>
		{
			IAsyncOperationCompletedHandler<Devices::Geolocation::Geoposition *>();
		};

		struct IAsyncOperationCompletedHandler<Security::Authentication::OnlineId::UserIdentity *>
		{
			IAsyncOperationCompletedHandler<Security::Authentication::OnlineId::UserIdentity *>();
		};

		struct IAsyncOperationCompletedHandler<Storage::StorageFile *>
		{
			IAsyncOperationCompletedHandler<Storage::StorageFile *>();
		};

		struct IAsyncOperationCompletedHandler<UI::Popups::IUICommand *>
		{
			IAsyncOperationCompletedHandler<UI::Popups::IUICommand *>();
		};

		struct IAsyncOperationCompletedHandler<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *>
		{
			IAsyncOperationCompletedHandler<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *>();
		};

		struct IAsyncOperationCompletedHandler<bool>
		{
			IAsyncOperationCompletedHandler<bool>();
		};

		struct IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64>
		{
			IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64>();
		};

		struct IEventHandler<bool>
		{
			IEventHandler<bool>();
		};

		struct ITypedEventHandler<Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Internal::Shell::ModalExperience::IModalExperienceEventArgs *>
		{
			ITypedEventHandler<Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Internal::Shell::ModalExperience::IModalExperienceEventArgs *>();
		};

		struct ITypedEventHandler<UI::Notifications::ToastNotification *,IInspectable *>
		{
			ITypedEventHandler<UI::Notifications::ToastNotification *,IInspectable *>();
		};

		long ActivateInstance<Data::Json::IJsonArray>(HSTRING__ *,Data::Json::IJsonArray * *);
		long ActivateInstance<Devices::Geolocation::IGeolocator>(HSTRING__ *,Devices::Geolocation::IGeolocator * *);
		long ActivateInstance<Internal::AssignedAccess::IAssignedAccessController>(HSTRING__ *,Internal::AssignedAccess::IAssignedAccessController * *);
		long ActivateInstance<Microsoft::WRL::ComPtr<ApplicationModel::Activation::Private::IApplicationActivationProperties> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ApplicationModel::Activation::Private::IApplicationActivationProperties> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<ApplicationModel::Contacts::IContact2> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ApplicationModel::Contacts::IContact2> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<ApplicationModel::Contacts::IContactAddress> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ApplicationModel::Contacts::IContactAddress> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<ApplicationModel::DataTransfer::IDataPackage> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ApplicationModel::DataTransfer::IDataPackage> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<ApplicationModel::Store::Preview::InstallControl::IAppInstallManager> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ApplicationModel::Store::Preview::InstallControl::IAppInstallManager> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Collections::IPropertySet> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::Collections::IPropertySet> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<ContentManagement::IProcessCreativeEvent> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ContentManagement::IProcessCreativeEvent> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Data::Json::IJsonObject> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Data::Json::IJsonObject> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Data::Xml::Dom::IXmlDocument> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Data::Xml::Dom::IXmlDocument> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Gaming::GameBar::PresenceServer::Internal::IPresenceWriter> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Gaming::GameBar::PresenceServer::Internal::IPresenceWriter> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Globalization::NumberFormatting::INumberFormatter> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Globalization::NumberFormatting::INumberFormatter> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<IExtensionCatalog> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::IExtensionCatalog> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<IInspectable> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IInspectable> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Internal::Feedback::IFeedbackBroker> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Feedback::IFeedbackBroker> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Internal::Feedback::IStepsRecorder> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Feedback::IStepsRecorder> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Internal::Feedback::StringFeedback::IStringFeedbackEngine> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Feedback::StringFeedback::IStringFeedbackEngine> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Internal::Shell::ModalExperience::IModalExperienceDefaultOptions> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Shell::ModalExperience::IModalExperienceDefaultOptions> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Management::Deployment::IPackageManager> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Management::Deployment::IPackageManager> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Management::Deployment::Internal::IPackageManagerInternal> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Management::Deployment::Internal::IPackageManagerInternal> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Private::ICompositionDevice> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::Private::ICompositionDevice> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Security::Authentication::OnlineId::IOnlineIdAuthenticator> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Security::Authentication::OnlineId::IOnlineIdAuthenticator> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<Storage::Pickers::IPickerFileType> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Storage::Pickers::IPickerFileType> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<System::ILauncherOptions> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<System::ILauncherOptions> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<UI::Popups::IPopupMenu> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<UI::Popups::IPopupMenu> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<UI::Popups::IUICommand> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<UI::Popups::IUICommand> >);
		long ActivateInstance<Microsoft::WRL::ComPtr<UI::ViewManagement::IUISettings2> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<UI::ViewManagement::IUISettings2> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<ApplicationModel::DataTransfer::IHtmlFormatHelperStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ApplicationModel::DataTransfer::IHtmlFormatHelperStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Data::Json::IJsonValueStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Data::Json::IJsonValueStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<IActivationFactory> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IActivationFactory> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<IPropertyValueStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::IPropertyValueStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<IUriEscapeStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::IUriEscapeStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<IUriRuntimeClassFactory> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::IUriRuntimeClassFactory> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Internal::ApplicationDefaults::IApplicationDefaultHelpers> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::ApplicationDefaults::IApplicationDefaultHelpers> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Internal::Shell::Holographic::IContextIdentifierStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Shell::Holographic::IContextIdentifierStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Internal::Shell::Popups::IPopupClientStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::Shell::Popups::IPopupClientStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Internal::StateRepository::IApplicationResourceResolverStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::StateRepository::IApplicationResourceResolverStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Internal::StateRepository::IApplicationStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::StateRepository::IApplicationStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Internal::StateRepository::IPackageStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Internal::StateRepository::IPackageStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Services::TargetedContent::ITargetedContentContainerStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Services::TargetedContent::ITargetedContentContainerStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<Storage::Streams::IRandomAccessStreamReferenceStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Storage::Streams::IRandomAccessStreamReferenceStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<System::ILauncherStatics2> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<System::ILauncherStatics2> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<System::ILauncherStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<System::ILauncherStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<UI::Notifications::IToastNotificationFactory> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<UI::Notifications::IToastNotificationFactory> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<UI::Notifications::IToastNotificationManagerStatics2> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<UI::Notifications::IToastNotificationManagerStatics2> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<UI::Notifications::IToastNotificationManagerStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<UI::Notifications::IToastNotificationManagerStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<UI::StartScreen::IJumpListItemStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<UI::StartScreen::IJumpListItemStatics> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<WindowsInternal::Shell::UnifiedTile::IPackagedUnifiedTileIdentifierFactory> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<WindowsInternal::Shell::UnifiedTile::IPackagedUnifiedTileIdentifierFactory> >);
		long GetActivationFactory<Microsoft::WRL::ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManagerStatics> >(HSTRING__ *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<WindowsInternal::Shell::UnifiedTile::IUnifiedTileManagerStatics> >);
	};

	namespace Internal
	{
		namespace AddFolderSuggestion
		{
			struct IAddFolderSuggestionActivatedArgs
			{
				IAddFolderSuggestionActivatedArgs();
			};

		};

		namespace ApplicationModel
		{
			namespace WindowManagement
			{
				bool IsWindowManagementRegKeySet();
			};

		};

		namespace AssignedAccess
		{
			class AAManagerHelper
			{
				long GetAssignedAccessConfiguration(IAssignedAccessConfiguration * *);
				long GetAssignedAccessTypeForUserWithGroup(unsigned short const *,AssignedAccessType *);
				long GetAssignedAccessTypeForUserWithoutGroup(unsigned short const *,AssignedAccessType *);
			public:
				AAManagerHelper();
			};

			class AssignedAccessConfigStoreHelper
			{
				bool Initialize();
				unsigned long GetStoreVersion();
			};

			class AssignedAccessConfigStoreV0
			{
				bool Initialize();
				bool IsValidProfile(HKEY__ *);
				virtual bool DoesGroupConfigExistInStore();
				virtual bool DoesProfileExistInStore(unsigned short const *);
				virtual bool IsGlobalProfileConfiguredInStore();
				virtual unsigned long GetVersion();
			public:
				static wistd::unique_ptr<AssignedAccessConfigStoreBase,wistd::default_delete<AssignedAccessConfigStoreBase> > CreateInstance();
			};

			class AssignedAccessConfigStoreV1
			{
				virtual bool DoesGroupConfigExistInStore();
				virtual bool DoesProfileExistInStore(unsigned short const *);
				virtual bool IsGlobalProfileConfiguredInStore();
				virtual unsigned long GetVersion();
			protected:
				virtual bool Initialize();
			public:
				static wistd::unique_ptr<AssignedAccessConfigStoreBase,wistd::default_delete<AssignedAccessConfigStoreBase> > CreateInstance();
			};

			class AssignedAccessConfigStoreV2
			{
				virtual bool IsGlobalProfileConfiguredInStore();
				virtual unsigned long GetVersion();
			public:
				static wistd::unique_ptr<AssignedAccessConfigStoreBase,wistd::default_delete<AssignedAccessConfigStoreBase> > CreateInstance();
			};

			struct RegistryKey
			{
				~RegistryKey();
			};

		};

		struct AsyncCallbackBase<CBasicResult<unsigned char,0> >
		{
			virtual ~AsyncCallbackBase<CBasicResult<unsigned char,0> >();
		};

		struct AsyncCallbackBase<CUpdateFilesAsyncVectorViewResult>
		{
			virtual ~AsyncCallbackBase<CUpdateFilesAsyncVectorViewResult>();
		};

		class AsyncWindowOperation
		{
			class CWindowData
			{
				static bool _IsMDAWindow(HWND__ *);
			public:
				CWindowData(HWND__ *,AsyncWindowOptions,Microsoft::WRL::WeakRef const &);
				virtual long ContextSensitiveHelp(int);
				virtual long Disable();
				virtual long Enable();
				virtual long GetWindow(HWND__ * *);
				virtual long Invoke(IInspectable *,IInspectable *);
			};

			static long s_GetCallerOwnerWindow(bool,HWND__ * *);
		public:
			AsyncWindowOperation(AsyncWindowOperation const &);
			long DisableWindowNow();
			long GetOwner(HWND__ * *);
			long ManageStage(AsyncStage,long,CResultBase const &);
		};

		class COperationLambdaVar<1,<lambda_cef3ba3aafd407a2f9e0d318707d4b0d>,CUpdateFilesAsyncVectorViewResult,IPickerInitializationInfo>
		{
			long UnmarshalAndCall<0>(AsyncStage const &,long &,CUpdateFilesAsyncVectorViewResult &,type_details::sequence<0>);
		public:
			virtual long Run(AsyncStage,long,CUpdateFilesAsyncVectorViewResult &);
		};

		struct CResultBase
		{
			AsyncDeferral<CBasicResult<unsigned char,0> > GetDeferral<CBasicResult<unsigned char,0> >(CBasicResult<unsigned char,0> &);
			AsyncDeferral<CHSTRINGResult> GetDeferral<CHSTRINGResult>(CHSTRINGResult &);
			long MapErrorIfCanceled(long);
		};

		class ComTaskPool
		{
			struct CTaskWrapper<<lambda_02c3fa579a3c95d320234dc8d91770ac> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_0a2d047b332e6101fd54da92b14d0a67> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_15c072501ebdb4e1219ae8575a8606e9> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_319e580b8c8fe99d3abe75e08ddebadc> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_53715bea0934c8e4224e6c7e9c855490> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_5e2948d17347e19206ae2c4a46c770c7> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_61f6224c0980ca8388a5a985b192704f> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_7c0dbebcf8d9109fc3825079753ae60e> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_7f2ecfb9a57b06503ba87c21043a2e3a> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_7f891267008f91857a71cd52d09bf81e> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_8851cf4622720583d7dc264105a93f48> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_9a97155497ff9d6cb16133a776b9af00> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_a4e116048591eb4bf1c48ebc3241e8c5> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_a847f980382ff80e4546269ffbdc31c5> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_bf3cb08b7efb8776891318e15e10cbef> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_c2fd7731c5ae0d37e65ea73be67c0f1b> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_c8b199a0feb076873244f725fed1af37> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_dff7b450e7eee25fd5a246545de8ddb9> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_f2f1ec438f92b4d7225219722568e6b2> >
			{
				virtual void Run();
			};

			struct CTaskWrapper<<lambda_ff70f74070915e8cfc7d0f5db4d674e7> >
			{
				virtual void Run();
			};

			static long _MakeAndInitializeOnSTAThread<CActivationErrorPopupHost,IActivationErrorPopup,<lambda_4cbceac6bbf8c710f4e69b54d1552e12> >(TaskOptions,unsigned long,IActivationErrorPopup * *,<lambda_4cbceac6bbf8c710f4e69b54d1552e12> const &);
			static long _MakeAndInitializeOnSTAThread<CDeviceActivatedEventArgs,ApplicationModel::Activation::IActivatedEventArgs,<lambda_7f4369e608af8886b134a1df59eeb681> >(TaskOptions,unsigned long,ApplicationModel::Activation::IActivatedEventArgs * *,<lambda_7f4369e608af8886b134a1df59eeb681> const &);
			static long _MakeAndInitializeOnSTAThread<CLaunchActivatedEventArgs,ApplicationModel::Activation::IActivatedEventArgs,<lambda_999dc00085dcb4e97168c8687495f75d> >(TaskOptions,unsigned long,ApplicationModel::Activation::IActivatedEventArgs * *,<lambda_999dc00085dcb4e97168c8687495f75d> const &);
			static long _MakeAndInitializeOnSTAThread<CProtocolActivatedEventArgs,ApplicationModel::Activation::IActivatedEventArgs,<lambda_c0bf179e7d706448da468ee666445fd9> >(TaskOptions,unsigned long,ApplicationModel::Activation::IActivatedEventArgs * *,<lambda_c0bf179e7d706448da468ee666445fd9> const &);
			static long _MakeAndInitializeOnSTAThread<ModalExperienceEventArgs,Shell::ModalExperience::IModalExperienceEventArgs,<lambda_686aca3851f73e88f84f343b815c2eaf> >(TaskOptions,unsigned long,Shell::ModalExperience::IModalExperienceEventArgs * *,<lambda_686aca3851f73e88f84f343b815c2eaf> const &);
			static long _MakeAndInitializeOnSTAThread<ShellExperienceHelpers::Internal::ProxyModalWindow,ShellExperienceHelpers::Internal::IProxyModalWindow,<lambda_a94b991b71e7e8525fb71fd5e7102a72> >(TaskOptions,unsigned long,ShellExperienceHelpers::Internal::IProxyModalWindow * *,<lambda_a94b991b71e7e8525fb71fd5e7102a72> const &);
		public:
			static ComTaskPool::SThreadData tls_threadData;
		};

		struct ComTaskPoolHandler
		{
			long Start(IComPoolTask *);
			static long _FireCompletion(IAsyncFireCompletion *);
		};

		namespace ComposableShell
		{
			namespace Tabs
			{
				struct IApplicationViewTabOperation
				{
					IApplicationViewTabOperation();
				};

			};

		};

		namespace Details
		{
			struct Git
			{
				Git();
				long Acquire();
			};

			struct GitInvokeHelper<Foundation::Collections::VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControl *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::Collections::VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControl *>,GitPtr,2>();
				virtual long Invoke(Foundation::Collections::IObservableVector<ApplicationModel::Contacts::Internal::IContactActionControl *> *,Foundation::Collections::IVectorChangedEventArgs *);
			};

			struct GitInvokeHelper<Foundation::Collections::VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::Collections::VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,GitPtr,2>();
				virtual long Invoke(Foundation::Collections::IObservableVector<ApplicationModel::Contacts::Internal::IContactActionControlItem *> *,Foundation::Collections::IVectorChangedEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *>,GitPtr,2>();
				virtual long Invoke(ApplicationModel::Activation::ISplashScreen *,IInspectable *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Shell::ModalExperience::IModalWindowExperienceManager *,Shell::ModalExperience::IModalExperienceEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::ModalExperience::IModalWindowExperienceManager *,Shell::ModalExperience::IModalExperienceEventArgs *> >,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Shell::ModalExperience::IModalWindowExperienceManager *,Shell::ModalExperience::IModalExperienceEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::ModalExperience::IModalWindowExperienceManager *,Shell::ModalExperience::IModalExperienceEventArgs *> >,2>();
				virtual long Invoke(Shell::ModalExperience::IModalWindowExperienceManager *,Shell::ModalExperience::IModalExperienceEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::FileRemovedEventArgs *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::FileRemovedEventArgs *>,GitPtr,2>();
				virtual long Invoke(Storage::Pickers::Provider::IFileOpenPickerUI *,Storage::Pickers::Provider::IFileRemovedEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::PickerClosingEventArgs *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::PickerClosingEventArgs *>,GitPtr,2>();
				virtual long Invoke(Storage::Pickers::Provider::IFileOpenPickerUI *,Storage::Pickers::Provider::IPickerClosingEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,GitPtr,2>();
				virtual long Invoke(Storage::Pickers::Provider::IFileOpenPickerUIInternal *,IInspectable *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,GitPtr,2>();
				virtual long Invoke(Storage::Pickers::Provider::IFileOpenPickerUIInternal *,Storage::Pickers::Provider::ICurrentLocationRequestedEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *>,GitPtr,2>();
				virtual long Invoke(Storage::Pickers::Provider::IFileSavePickerUI *,IInspectable *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,Storage::Pickers::Provider::TargetFileRequestedEventArgs *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,Storage::Pickers::Provider::TargetFileRequestedEventArgs *>,GitPtr,2>();
				virtual long Invoke(Storage::Pickers::Provider::IFileSavePickerUI *,Storage::Pickers::Provider::ITargetFileRequestedEventArgs *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *>,GitPtr,2>();
				virtual long Invoke(Storage::Pickers::Provider::IFileSavePickerUIInternal *,IInspectable *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,IInspectable *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,IInspectable *>,GitPtr,2>();
				virtual long Invoke(Storage::Provider::ICachedFileUpdaterUI *,IInspectable *);
			};

			struct GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,Storage::Provider::FileUpdateRequestedEventArgs *>,GitPtr,2>
			{
				GitInvokeHelper<Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,Storage::Provider::FileUpdateRequestedEventArgs *>,GitPtr,2>();
				virtual long Invoke(Storage::Provider::ICachedFileUpdaterUI *,Storage::Provider::IFileUpdateRequestedEventArgs *);
			};

			struct GitInvokeHelper<IDevicesCharmProjectionManagerEventHandlerAdapter,GitPtrSupportsAgile<IDevicesCharmProjectionManagerEventHandlerAdapter>,0>
			{
				virtual long Invoke();
			};

			struct GitInvokeHelper<IMiracastConnectionEventHandlerAdapter,GitPtrSupportsAgile<IMiracastConnectionEventHandlerAdapter>,0>
			{
				virtual long Invoke();
			};

			struct GitInvokeHelper<ISettingChangedEventHandler,GitPtr,2>
			{
				GitInvokeHelper<ISettingChangedEventHandler,GitPtr,2>();
				virtual long Invoke(SETTING_CHANGE_EVENT_TYPE,unsigned long);
			};

			Details::Git _git;
			long CreateGitHelper<Foundation::Collections::VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControl *>,GitPtr>(Foundation::Collections::VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControl *> *,Foundation::Collections::VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControl *> * *);
			long CreateGitHelper<Foundation::Collections::VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControlItem *>,GitPtr>(Foundation::Collections::VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControlItem *> *,Foundation::Collections::VectorChangedEventHandler<ApplicationModel::Contacts::Internal::IContactActionControlItem *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *>,GitPtr>(Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *> *,Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Shell::ModalExperience::IModalWindowExperienceManager *,Shell::ModalExperience::IModalExperienceEventArgs *>,GitPtrSupportsAgile<Foundation::ITypedEventHandler<Shell::ModalExperience::IModalWindowExperienceManager *,Shell::ModalExperience::IModalExperienceEventArgs *> > >(Foundation::ITypedEventHandler<Shell::ModalExperience::IModalWindowExperienceManager *,Shell::ModalExperience::IModalExperienceEventArgs *> *,Foundation::ITypedEventHandler<Shell::ModalExperience::IModalWindowExperienceManager *,Shell::ModalExperience::IModalExperienceEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::FileRemovedEventArgs *>,GitPtr>(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::FileRemovedEventArgs *> *,Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::FileRemovedEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::PickerClosingEventArgs *>,GitPtr>(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::PickerClosingEventArgs *> *,Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::PickerClosingEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,GitPtr>(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> *,Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,GitPtr>(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> *,Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *>,GitPtr>(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> *,Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,Storage::Pickers::Provider::TargetFileRequestedEventArgs *>,GitPtr>(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,Storage::Pickers::Provider::TargetFileRequestedEventArgs *> *,Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,Storage::Pickers::Provider::TargetFileRequestedEventArgs *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *>,GitPtr>(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> *,Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,IInspectable *>,GitPtr>(Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,IInspectable *> *,Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,IInspectable *> * *);
			long CreateGitHelper<Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,Storage::Provider::FileUpdateRequestedEventArgs *>,GitPtr>(Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,Storage::Provider::FileUpdateRequestedEventArgs *> *,Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,Storage::Provider::FileUpdateRequestedEventArgs *> * *);
			long CreateGitHelper<IDevicesCharmProjectionManagerEventHandlerAdapter,GitPtrSupportsAgile<IDevicesCharmProjectionManagerEventHandlerAdapter> >(IDevicesCharmProjectionManagerEventHandlerAdapter *,IDevicesCharmProjectionManagerEventHandlerAdapter * *);
			long CreateGitHelper<IMiracastConnectionEventHandlerAdapter,GitPtrSupportsAgile<IMiracastConnectionEventHandlerAdapter> >(IMiracastConnectionEventHandlerAdapter *,IMiracastConnectionEventHandlerAdapter * *);
			long CreateGitHelper<ISettingChangedEventHandler,GitPtr>(ISettingChangedEventHandler *,ISettingChangedEventHandler * *);
		};

		namespace DeviceCapabilitiesW
		{
			bool GetConditionOperationResult<double>(double,double,tagCONDITION_OPERATION);
			bool GetConditionOperationResult<float>(float,float,tagCONDITION_OPERATION);
			bool IsScreenSizeRequirementMet(DeviceCapabilitiesW::Capability);
		};

		namespace Feedback
		{
			struct IStringFeedbackEngineExternal
			{
				virtual ~IStringFeedbackEngineExternal();
			};

			class InternalFeedbackBroker
			{
				long GetFeedbackItemFromExePath(unsigned short const *,unsigned short const *,IFeedbackItem * *);
				long LaunchPsr(unsigned short *,void * *);
				long StopRecording(bool);
			public:
				InternalFeedbackBroker();
				static TrustLevel InternalGetTrustLevel();
				static unsigned short const * InternalGetRuntimeClassName();
				virtual long GetAumidFromAppListEntry(IInspectable *,HSTRING__ * *);
				virtual long GetFeedbackItemFromFilePath(HSTRING__ *,IFeedbackItem * *);
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetScreenshotComment();
				virtual long GetTrustLevel(TrustLevel *);
				virtual long IsRecordingRunning(unsigned char *);
				virtual long PauseRecording();
				virtual long QueryInterface(_GUID const &,void * *);
				virtual long ResumeRecording();
				virtual long StartRecording(RecordingType,HSTRING__ *);
				virtual long StopRecording();
				virtual long get_InstalledWin32Applications(Foundation::Collections::IVectorView<FeedbackItem *> * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~InternalFeedbackBroker();
			};

			struct InternalFeedbackItem
			{
				InternalFeedbackItem();
				long RuntimeClassInitialize(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *);
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual long get_DisplayName(HSTRING__ * *);
				virtual long get_ExeName(HSTRING__ * *);
				virtual long get_FileId(HSTRING__ * *);
				virtual long get_ProgramId(HSTRING__ * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			Microsoft::WRL::Details::CreatorMap const __object_InternalFeedbackBroker;
			Microsoft::WRL::Details::FactoryCache __objectFactory__InternalFeedbackBroker;
			long HasFeedbackLogCollectionCapability();
			long HasPackageQueryCapability();
			std::unique_ptr<Feedback::IStringFeedbackEngineExternal,std::default_delete<Feedback::IStringFeedbackEngineExternal> > CreateStringFeedbackEngineExternal();
		};

		namespace Foundation
		{
			namespace Contracts
			{
				struct IActivationFactoryContractRedirectorContext
				{
					IActivationFactoryContractRedirectorContext();
				};

			};

		};

		struct GitEventSource<Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *> *,EventRegistrationToken *);
			~GitEventSource<Foundation::ITypedEventHandler<ApplicationModel::Activation::SplashScreen *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> >();
		};

		struct GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::FileRemovedEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::FileRemovedEventArgs *> *,EventRegistrationToken *);
			~GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::FileRemovedEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> >();
		};

		struct GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::PickerClosingEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::PickerClosingEventArgs *> *,EventRegistrationToken *);
			~GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUI *,Storage::Pickers::Provider::PickerClosingEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> >();
		};

		struct GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *> *,EventRegistrationToken *);
			~GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> >();
		};

		struct GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *> *,EventRegistrationToken *);
			~GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileOpenPickerUIInternal *,Storage::Pickers::Provider::CurrentLocationRequestedEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> >();
		};

		struct GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,IInspectable *> *,EventRegistrationToken *);
		};

		struct GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,Storage::Pickers::Provider::TargetFileRequestedEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUI *,Storage::Pickers::Provider::TargetFileRequestedEventArgs *> *,EventRegistrationToken *);
		};

		struct GitEventSource<Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(Foundation::ITypedEventHandler<Storage::Pickers::Provider::FileSavePickerUIInternal *,IInspectable *> *,EventRegistrationToken *);
		};

		struct GitEventSource<Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,IInspectable *>,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,IInspectable *> *,EventRegistrationToken *);
		};

		struct GitEventSource<Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,Storage::Provider::FileUpdateRequestedEventArgs *>,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(Foundation::ITypedEventHandler<Storage::Provider::CachedFileUpdaterUI *,Storage::Provider::FileUpdateRequestedEventArgs *> *,EventRegistrationToken *);
		};

		struct GitEventSourceSupportsAgile<IDevicesCharmProjectionManagerEventHandlerAdapter,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(IDevicesCharmProjectionManagerEventHandlerAdapter *,EventRegistrationToken *);
		};

		struct GitEventSourceSupportsAgile<IMiracastConnectionEventHandlerAdapter,Microsoft::WRL::InvokeModeOptions<-2> >
		{
			long Add(IMiracastConnectionEventHandlerAdapter *,EventRegistrationToken *);
		};

		struct GitPtr
		{
			GitPtr();
		};

		class GitPtrImpl<GitPtr>
		{
		protected:
			long Localize(_GUID const &,void * *);
		public:
			long Revoke();
			virtual bool IsInitialized();
		};

		struct GitPtrSupportsAgile<FamilySafety::Internal::IUserSettings>
		{
			long Revoke();
		};

		struct GitPtrSupportsAgile<Foundation::IAsyncActionCompletedHandler>
		{
			long CopyLocal<Foundation::IAsyncActionCompletedHandler>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Foundation::IAsyncActionCompletedHandler> >);
			long Initialize<Foundation::IAsyncActionCompletedHandler>(Foundation::IAsyncActionCompletedHandler *);
			long Revoke();
		};

		struct GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<Foundation::Collections::IVectorView<Storage::Pickers::UpdateFilesResult *> *> >
		{
			long Initialize<Foundation::IAsyncOperationCompletedHandler<Foundation::Collections::IVectorView<Storage::Pickers::UpdateFilesResult *> *> >(Foundation::IAsyncOperationCompletedHandler<Foundation::Collections::IVectorView<Storage::Pickers::UpdateFilesResult *> *> *);
		};

		struct GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<HSTRING__ *> >
		{
			long Initialize<Foundation::IAsyncOperationCompletedHandler<HSTRING__ *> >(Foundation::IAsyncOperationCompletedHandler<HSTRING__ *> *);
		};

		struct GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<bool> >
		{
			long Initialize<Foundation::IAsyncOperationCompletedHandler<bool> >(Foundation::IAsyncOperationCompletedHandler<bool> *);
		};

		struct GitPtrSupportsAgile<IBindCtx>
		{
			long Initialize<IBindCtx>(IBindCtx *);
			~GitPtrSupportsAgile<IBindCtx>();
		};

		struct GitPtrSupportsAgile<INilDelegate>
		{
			long CopyLocal<INilDelegate>(Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<INilDelegate> >);
			long Initialize<INilDelegate>(INilDelegate *);
			long Revoke();
		};

		struct GitPtrSupportsAgile<UI::Notifications::IToastNotification>
		{
			long Initialize<UI::Notifications::IToastNotification>(UI::Notifications::IToastNotification *);
			long Revoke();
		};

		struct IComPoolTask
		{
			IComPoolTask();
		};

		struct MoveOnCopy<NativeString<CoTaskMemPolicy<unsigned short> > >
		{
			~MoveOnCopy<NativeString<CoTaskMemPolicy<unsigned short> > >();
		};

		class NativeString<CoTaskMemPolicy<unsigned short> >
		{
			bool _IsEmpty();
			bool _IsOnlyWhitespace();
			bool _RemoveAt(unsigned __int64,unsigned __int64);
			bool _TrimEnd(unsigned short const *);
			bool _TrimStart(unsigned short const *);
			long _Concat(unsigned short const *,unsigned __int64);
			long _EnsureCapacity(unsigned __int64);
			long _Initialize(unsigned short const *,unsigned __int64);
			long _InitializeFromRegistry(HKEY__ *,unsigned short const *,bool);
			long _InitializeHelper<<lambda_255728157cf8e92998065ff06efe801f> >(unsigned short const *,char *,<lambda_255728157cf8e92998065ff06efe801f> const &);
			long _InitializeHelper<<lambda_fe718337787c493ce2d833414db25eba> >(unsigned short const *,char *,<lambda_fe718337787c493ce2d833414db25eba> const &);
			void _Free();
		public:
			bool IsEmpty();
			bool TrimWhitespace();
			int CompareOrdinalIgnoreCase(NativeString<CoTaskMemPolicy<unsigned short> > const &);
			int CompareOrdinalIgnoreCase(unsigned short const *,unsigned __int64);
			long Concat(NativeString<CoTaskMemPolicy<unsigned short> > const &);
			long Concat(unsigned short const *);
			long ConcatFormat(unsigned short const *,...);
			long CopyTo(unsigned short * *);
			long CopyTo(unsigned short *,unsigned __int64);
			long DetachInitializeIfEmpty(unsigned short * *);
			long Initialize(HINSTANCE__ *,unsigned int,unsigned short);
			long Initialize(HKEY__ *,unsigned short const *,unsigned short const *);
			long Initialize(NativeString<CoTaskMemPolicy<unsigned short> > const &);
			long InitializeFormat(unsigned short const *,...);
			long InitializeMessage(unsigned short const *,...);
			long InitializeResFormat(HINSTANCE__ *,int,...);
			long InitializeResMessage(HINSTANCE__ *,int,...);
			unsigned __int64 GetCount();
			void ReplaceChars(unsigned short,unsigned short);
			~NativeString<CoTaskMemPolicy<unsigned short> >();
		};

		class NativeString<LocalMemPolicy<unsigned short> >
		{
			long _EnsureCapacity(unsigned __int64);
			long _Initialize(unsigned short const *,unsigned __int64);
			long _InitializeHelper<<lambda_ef7be547338e12b5ef1f168ffcb92f03> >(unsigned short const *,char *,<lambda_ef7be547338e12b5ef1f168ffcb92f03> const &);
			long _InitializeHelper<<lambda_f4fd2d72ce92a84e59df66f4c628c6bd> >(unsigned short const *,char *,<lambda_f4fd2d72ce92a84e59df66f4c628c6bd> const &);
			void _EnsureCount();
			void _Free();
		public:
			long CopyTo(unsigned short * *);
			long InitializeFormat(unsigned short const *,...);
			long InitializeResMessage(HINSTANCE__ *,int,...);
			~NativeString<LocalMemPolicy<unsigned short> >();
		};

		namespace PlatformExtensions
		{
			namespace Details
			{
				struct ActivationFactoryContractRedirectorContext
				{
					ActivationFactoryContractRedirectorContext();
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_ProcessId(unsigned long *);
					virtual long get_WindowId(ApplicationModel::WindowManagement::WindowId *);
					virtual long put_ProcessId(unsigned long);
					virtual long put_WindowId(ApplicationModel::WindowManagement::WindowId);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct ExtensionRegistrationCollectionRegistry
				{
					long Initialize(HSTRING__ *);
					virtual long GetAt(unsigned __int64,wistd::unique_ptr<ExtensionRegistration,wistd::default_delete<ExtensionRegistration> > &);
					virtual long GetCount(unsigned __int64 *);
				};

				class ExtensionRegistrationRegistry
				{
					static long TryGetRegValue(HKEY__ *,unsigned short const *,unsigned long,void *,unsigned long *);
				public:
					long Initialize(HKEY__ *,unsigned short const *);
					virtual bool IsDefaultExtension();
					virtual bool IsTestExtension();
					virtual long GetActivatableClassId(unsigned short *,unsigned __int64);
					virtual long GetExtensionClass(unsigned short *,unsigned __int64);
					virtual unsigned long GetVelocityFeatureId();
				};

				namespace PlatformExtensionsTelemetry
				{
					class TryActivateContractExtension
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void StartActivity(HSTRING__ *,ApplicationModel::WindowManagement::WindowId,_GUID const &);
						void Stop(bool,bool,unsigned short const *);
						~TryActivateContractExtension();
					};

					class TryLookupExtensionAcidWithExtensionClass
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void EvaluatedRegistration<unsigned short (&)[128],unsigned short * &>(unsigned short (&)[128],unsigned short * &);
						void StartActivity(HSTRING__ *,HSTRING__ *);
						void Stop(unsigned short const *);
						~TryLookupExtensionAcidWithExtensionClass();
					};

					class TryLookupExtensionPointImplementationAcid
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void EvaluatingRegistration<unsigned short * &,bool &>(unsigned short * &,bool &);
						void StartActivity(HSTRING__ *);
						void Stop(unsigned short const *);
						~TryLookupExtensionPointImplementationAcid();
					};

				};

				long ForEachEnabledExtensionRegistration(HSTRING__ *,wistd::function<long (Details::ExtensionRegistration const *,bool,bool *)> const &);
				long GetExtensionRegistrationsForExtensionPoint(HSTRING__ *,wistd::unique_ptr<Details::ExtensionRegistrationCollection,wistd::default_delete<Details::ExtensionRegistrationCollection> > *);
				long TryActivateContractExtensionInternal(HSTRING__ *,ApplicationModel::WindowManagement::WindowId,_GUID const &,void * *);
				long TryLookupExtensionAcidWithExtensionClass(HSTRING__ *,HSTRING__ *,unsigned short *,unsigned __int64);
				long TryLookupExtensionPointImplementationAcid(HSTRING__ *,unsigned short *,unsigned __int64,_GUID const *);
			};

			struct IContactCardExperience
			{
				IContactCardExperience();
			};

		};

		struct ResourceString
		{
			static bool FindAndSize(HINSTANCE__ *,unsigned int,unsigned short,unsigned short const * *,unsigned short *);
		};

		namespace Shell
		{
			namespace AssignedAccess
			{
				class AssignedAccessControllerProxy
				{
					long ApplyAssignedAccess(AssignedAccessType *);
					long DoesAssignedAccessConfigExist(bool *);
					long DoesTargetProfileExist(bool *);
					long GetAssignedAccessTypeFromController(AssignedAccessType *);
					long GetProfileFromController(IAssignedAccessProfile * *);
				public:
					AssignedAccessControllerProxy();
					long RuntimeClassInitialize();
					virtual long ApplyAssignedAccessIfNeeded(AssignedAccessType *);
					virtual long AutoLaunchIfNeeded(unsigned char *);
					virtual long GetAssignedAccessType(AssignedAccessType *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetProfile(IAssignedAccessProfile * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long InitializePrivilegedOperations(_GUID const &,IUnknown *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				Microsoft::WRL::Details::CreatorMap const __object_AssignedAccessControllerProxy_COM;
				Microsoft::WRL::Details::FactoryCache __objectFactory__AssignedAccessControllerProxy_COM;
			};

			namespace Chaining
			{
				class ChainLink<ObjectWithSrwLock>
				{
					struct ChainLinkNotifier
					{
						struct InternalPayload
						{
							InternalPayload();
						};

						struct Payload
						{
							Payload();
							~Payload();
						};

						ChainLinkNotifier();
						void AddNotification(ChainLink<ObjectWithSrwLock> *,ChainLinkEventTypeInternal);
						void AddNotification(ChainLink<ObjectWithSrwLock> *,IChainLink *,IChainLink *,ChainLinkEventType);
						void Notify();
						~ChainLinkNotifier();
					};

					long ClearNextIfMatch(IChainLink *);
					long RemoveFromChainIfPreviousMatches(IChainLink *);
					void DeliverChainLinkEventInternal(ChainLink<ObjectWithSrwLock>::ChainLinkEventTypeInternal);
				protected:
					long AppendChainLinkInternal(IChainLink *,ChainLink<ObjectWithSrwLock>::ChainLinkNotifier &);
					long AppendToChainLink(IUnknown *);
					virtual long AppendChainLink(IChainLink *);
					virtual long HandleChainLinkEvent(IChainLink *,IChainLinkEventArgs *);
					virtual void HandleChainLinkEventInternal(IChainLink *,ChainLink<ObjectWithSrwLock>::ChainLinkEventTypeInternal);
					void RemoveFromChain();
					void RemoveFromChainInternal(ChainLink<ObjectWithSrwLock>::ChainLinkNotifier &);
				public:
					virtual long get_NextChainLink(IChainLink * *);
					virtual long get_PrevChainLink(IChainLink * *);
					virtual long get_Type(ChainLinkType *);
					~ChainLink<ObjectWithSrwLock>();
				};

				struct ChainLinkEventArgs
				{
					ChainLinkEventArgs(ChainLinkEventType);
					virtual long get_EventType(ChainLinkEventType *);
				};

			};

			namespace Holographic
			{
				long GetUserDisplayContext(Holographic::UserDisplayContext *);
				long GetUserInputContext(Holographic::UserInputContext *);
				long GetWindowDisplayContext(HWND__ *,Holographic::ContextInspectionOptions,Holographic::UserDisplayContext *);
			};

		};

		namespace ShellHelpers
		{
			class PropertySetHelper
			{
				long GetPropSetMap(Foundation::Collections::IMap<HSTRING__ *,IInspectable *> * *);
				long GetPropVal(HSTRING__ *,Foundation::IPropertyValue * *);
				long GetPropertyValueFactory(Foundation::IPropertyValueStatics * *);
				long GetValue<Foundation::Point>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(Foundation::Point *),Foundation::Point *);
				long GetValue<HSTRING__ *>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(HSTRING__ * *),HSTRING__ * *);
				long GetValue<__int64>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(__int64 *),__int64 *);
				long GetValue<float>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(float *),float *);
				long GetValue<int>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(int *),int *);
				long GetValue<unsigned char>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(unsigned char *),unsigned char *);
				long GetValue<unsigned int>(HSTRING__ *,long ( Foundation::IPropertyValue::*)(unsigned int *),unsigned int *);
				long SetPropVal(HSTRING__ *,Foundation::IPropertyValue *);
				long SetValue<Foundation::Point>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(Foundation::Point,IInspectable * *),Foundation::Point);
				long SetValue<Foundation::Size>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(Foundation::Size,IInspectable * *),Foundation::Size);
				long SetValue<HSTRING__ *>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(HSTRING__ *,IInspectable * *),HSTRING__ *);
				long SetValue<_GUID>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(_GUID,IInspectable * *),_GUID);
				long SetValue<__int64>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(__int64,IInspectable * *),__int64);
				long SetValue<int>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(int,IInspectable * *),int);
				long SetValue<unsigned char>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(unsigned char,IInspectable * *),unsigned char);
				long SetValue<unsigned int>(HSTRING__ *,long ( Foundation::IPropertyValueStatics::*)(unsigned int,IInspectable * *),unsigned int);
			public:
				~PropertySetHelper();
			};

		};

		class String
		{
			long _InitializeHelper(unsigned short const *);
		public:
			long Concat(String const &,String *);
			long GetLpcwstr(unsigned short const * *);
			long Initialize(HSTRING__ * const &);
			long Initialize(unsigned short const *,unsigned int);
			long TrimEnd(String const &,String *);
			void Release();
			~String();
		};

		class StringReference
		{
			void _ConstructorHelper(unsigned short const *);
		public:
			StringReference<11>(unsigned short const (&)[11]);
			StringReference<15>(unsigned short const (&)[15]);
			StringReference<19>(unsigned short const (&)[19]);
			StringReference<23>(unsigned short const (&)[23]);
			StringReference<24>(unsigned short const (&)[24]);
			StringReference<28>(unsigned short const (&)[28]);
			StringReference<29>(unsigned short const (&)[29]);
			StringReference<2>(unsigned short const (&)[2]);
			StringReference<31>(unsigned short const (&)[31]);
			StringReference<32>(unsigned short const (&)[32]);
			StringReference<33>(unsigned short const (&)[33]);
			StringReference<36>(unsigned short const (&)[36]);
			StringReference<39>(unsigned short const (&)[39]);
			StringReference<3>(unsigned short const (&)[3]);
			StringReference<41>(unsigned short const (&)[41]);
			StringReference<43>(unsigned short const (&)[43]);
			StringReference<45>(unsigned short const (&)[45]);
			StringReference<46>(unsigned short const (&)[46]);
			StringReference<47>(unsigned short const (&)[47]);
			StringReference<4>(unsigned short const (&)[4]);
			StringReference<50>(unsigned short const (&)[50]);
			StringReference<52>(unsigned short const (&)[52]);
			StringReference<58>(unsigned short const (&)[58]);
			StringReference<5>(unsigned short const (&)[5]);
			StringReference<62>(unsigned short const (&)[62]);
			StringReference<66>(unsigned short const (&)[66]);
			StringReference<6>(unsigned short const (&)[6]);
			StringReference<7>(unsigned short const (&)[7]);
			StringReference<9>(unsigned short const (&)[9]);
		};

		namespace UI
		{
			namespace ContentDeliveryManager
			{
				struct IExpansionExperience
				{
					IExpansionExperience();
				};

			};

			namespace SoftLanding
			{
				class CCourtesyEngineLogic
				{
					bool IsLastVisibleExpired();
					long Enqueue(_FILETIME const &);
					long LoadItemTimesFromRegistry();
					long SaveItemTimesToRegistry();
					void ExpireItemsOlderThan(_FILETIME const &);
				public:
					CCourtesyEngineLogic();
					long RuntimeClassInitialize();
					virtual CourtesyEngineState GetState();
					virtual long OnItemChanged(ItemState);
					virtual long Shutdown();
				};

				class CSoftLandingManager
				{
					long _RegisterImmersiveShellMessage(IImmersiveWindowMessageService *,unsigned short const *,CSoftLandingManager::ImmersiveMessageInfo *);
					long _RuntimeClassInitializeHelper();
					long _UnregisterImmersiveShellMessage(IImmersiveWindowMessageService *,CSoftLandingManager::ImmersiveMessageInfo *);
					static void s_SoftLandingEnabledChanged(void *);
				public:
					CSoftLandingManager();
					long RuntimeClassInitialize();
					virtual long ActivateCreative(SOFTLANDING_CREATIVE);
					virtual long OnMessage(unsigned int,unsigned __int64,__int64);
					virtual long ShutdownServices(IProfferService *);
					virtual long SubscribeToServices(IServiceProvider *);
					virtual long UnsubscribeFromServices(IServiceProvider *);
					virtual long WithdrawCreative(HSTRING__ *,HSTRING__ *,int);
				};

				class CSoftLandingNotification
				{
					static long CopyNotification(SOFTLANDING_NOTIFICATION const *,SOFTLANDING_NOTIFICATION *);
					static long DeleteNotification(SOFTLANDING_NOTIFICATION *);
				public:
					~CSoftLandingNotification();
				};

				class CSoftLandingPresenter
				{
					bool IsVisible();
					bool SetAnchorRect(tagRECT const &);
					bool _IsCreativeWithdrawn();
					long _CleanupNotification();
					long _Dismiss(Notifications::ToastDismissalReason);
					long _Failure(Notifications::IToastFailedEventArgs *);
					long _PresentCreative();
					long _RegisterForAutomationPropertyChanges(IUIAutomation *,IUIAutomationElement *,TreeScope);
					long _RegisterToastEventHandlers(Notifications::IToastNotification *);
					long _RegisterUIAElement(HWND__ *,IUIAutomation *,IUIAutomationElement *);
					long _SetState(ItemState);
					long _ShowNotificationCenterMessage();
					long _UnregisterForAutomationPropertyChanges(IUIAutomation *,IUIAutomationElement *);
					long _UnregisterToastEventHandlers();
					long _UnregisterUIAElement();
					long _UpdatePositionForUIAutomationChange(IUIAutomation *);
					static unsigned int s_uiCleanupPresenterMessage;
				public:
					CSoftLandingPresenter();
					bool IsPersistentCampaign();
					long Activate();
					long RuntimeClassInitialize(SOFTLANDING_CREATIVE *,ICourtesyEngine *,unsigned int);
					long Withdraw();
					static long Withdraw(HSTRING__ *);
					virtual long HandlePropertyChangedEvent(IUIAutomationElement *,int,tagVARIANT);
					virtual long HandleStructureChangedEvent(IUIAutomationElement *,StructureChangeType,tagSAFEARRAY *);
					virtual long Invoke(Notifications::IToastNotification *,IInspectable *);
					virtual long Invoke(Notifications::IToastNotification *,Notifications::IToastDismissedEventArgs *);
					virtual long Invoke(Notifications::IToastNotification *,Notifications::IToastFailedEventArgs *);
					virtual ~CSoftLandingPresenter();
				};

				struct ISoftLandingExperience
				{
					ISoftLandingExperience();
				};

				class SoftLandingNotificationActivationCallback
				{
					long ActivateTemplatesWithActions(unsigned short const *,NOTIFICATION_USER_INPUT_DATA const *,unsigned long);
					long ActivateTemplatesWithXMLLaunchParameters(unsigned short const *);
					long ParseLaunchDetailsXml(unsigned short const *,HSTRING__ * *,HSTRING__ * *,HSTRING__ * *,bool &);
				public:
					virtual long Activate(unsigned short const *,unsigned short const *,NOTIFICATION_USER_INPUT_DATA const *,unsigned long);
				};

				Microsoft::WRL::Details::CreatorMap const __object_SoftLandingNotificationActivationCallback_COM;
				Microsoft::WRL::Details::FactoryCache __objectFactory__SoftLandingNotificationActivationCallback_COM;
			};

			namespace StartScreen
			{
				class JumpListBrokered
				{
					long CreateJumpListItemForArguments(wil::PropertyStoreHelper const &,IJumpListItem * *);
					long CreateJumpListItemForSeparator(wil::PropertyStoreHelper const &,IJumpListItem * *);
					long CreateJumpListItemForShellObject(IUnknown *,IJumpListItem * *);
					long CreateShellLinkFromArgumentsJumpListItem(IJumpListItem *,IShellLinkW * *);
					long CreateShellLinkSeparator(IJumpListItem *,IShellLinkW * *);
					long CreateShellObjectFromJumpListItem(IJumpListItem *,IUnknown * *);
					long LoadJumpList();
				public:
					JumpListBrokered();
					long RuntimeClassInitialize();
					static TrustLevel InternalGetTrustLevel();
					static unsigned short const * InternalGetRuntimeClassName();
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long Save(HSTRING__ *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct JumpListBrokeredStatics
				{
					JumpListBrokeredStatics();
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long LoadCurrent(HSTRING__ * *,IJumpListBrokered * *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				Microsoft::WRL::Details::CreatorMap const __object_JumpListBrokered;
				Microsoft::WRL::Details::FactoryCache __objectFactory__JumpListBrokered;
				long FormatMrtResourceString(unsigned short const *,unsigned short const *,unsigned short * *);
			};

			namespace WindowsTip
			{
				class CWindowsTipNotification
				{
					static long DeleteNotification(SoftLanding::SOFTLANDING_NOTIFICATION *);
					static long SetString(HSTRING__ * *,HSTRING__ * const);
				};

				class CWindowsTipPresenter
				{
					bool IsCreativeWithdrawn();
					bool IsVisible();
					bool SetAnchorRect(tagRECT const &);
					long CleanupNotification();
					long Dismiss(Notifications::ToastDismissalReason);
					long Failure(Notifications::IToastFailedEventArgs *);
					long PresentCreative();
					long RegisterEventHandlers(Notifications::IToastNotification *);
					long RegisterForAutomationPropertyChanges(IUIAutomation *,IUIAutomationElement *,TreeScope);
					long RegisterUIAElement(HWND__ *,IUIAutomation *,IUIAutomationElement *);
					long ReportCustomInteraction(unsigned short const *);
					long ReportInteraction(Services::TargetedContent::TargetedContentInteraction);
					long SetState(SoftLanding::ItemState);
					long UnregisterEventHandlers();
					long UnregisterForAutomationPropertyChanges(IUIAutomation *,IUIAutomationElement *);
					long UnregisterUIAElement();
					long UpdatePositionForUIAutomationChange(IUIAutomation *);
				public:
					CWindowsTipPresenter();
					long Activate();
					long RuntimeClassInitialize(unsigned short const *,unsigned short const *);
					long Withdraw();
					static long Withdraw(HSTRING__ *);
					virtual long HandlePropertyChangedEvent(IUIAutomationElement *,int,tagVARIANT);
					virtual long HandleStructureChangedEvent(IUIAutomationElement *,StructureChangeType,tagSAFEARRAY *);
					virtual long Invoke(Notifications::IToastNotification *,IInspectable *);
					virtual long Invoke(Notifications::IToastNotification *,Notifications::IToastDismissedEventArgs *);
					virtual long Invoke(Notifications::IToastNotification *,Notifications::IToastFailedEventArgs *);
					virtual ~CWindowsTipPresenter();
				};

				class WindowsTipNotificationActivationCallback
				{
					long ActivateHelper(unsigned short const *,unsigned short const *,NOTIFICATION_USER_INPUT_DATA const *,unsigned long);
					long ExecuteActionForClick(HSTRING__ *,HSTRING__ *);
					long GetContentIdAndPath(unsigned short const *,HSTRING__ * *,HSTRING__ * *);
					long GetCreativeId(HSTRING__ *,HSTRING__ * *);
				public:
					virtual long Activate(unsigned short const *,unsigned short const *,NOTIFICATION_USER_INPUT_DATA const *,unsigned long);
				};

				Microsoft::WRL::Details::CreatorMap const __object_WindowsTipNotificationActivationCallback_COM;
				Microsoft::WRL::Details::FactoryCache __objectFactory__WindowsTipNotificationActivationCallback_COM;
				SoftLanding::SoftLandingOptions ResolveAlignmentFromName(Microsoft::WRL::Wrappers::HString &);
				bool IsUiaElementOnScreen(HWND__ *,IUIAutomationElement *);
				long CalculateEdgeWeight(IUIAutomation *,IUIAutomationElement *,IUIAutomationElement *,WindowsTip::WindowsTipAlignmentPreference,tagRECT *);
				long CreateActionString(unsigned short const *,unsigned short const *,unsigned short const *,HSTRING__ * *);
				long CreateAndAppendTextNode(HSTRING__ *,Data::Xml::Dom::IXmlNode *,Data::Xml::Dom::IXmlNode * *);
				long CreateApplicationUserModelIdFromPackageData(unsigned short const *,unsigned short const *,unsigned short * *);
				long CreateNotification(SoftLanding::SOFTLANDING_NOTIFICATION const &,HSTRING__ *,HSTRING__ *,HSTRING__ *,Notifications::IToastNotificationManagerStatics *,HWND__ *,tagRECT *,tagRECT *,HSTRING__ *,HSTRING__ *,SoftLanding::SOFTLANDING_BUTTON const &,SoftLanding::SOFTLANDING_BUTTON const &,HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ *,bool,bool,Notifications::IToastNotification * *);
				long GetAppProperties(unsigned short const *,unsigned short * *,unsigned short * *,unsigned short * *);
				long GetBoolProperty(Foundation::Collections::IMapView<HSTRING__ *,Services::TargetedContent::TargetedContentValue *> * const &,unsigned short const *,bool *);
				long GetImagePathProperty(Foundation::Collections::IMapView<HSTRING__ *,Services::TargetedContent::TargetedContentValue *> * const &,unsigned short const *,HSTRING__ * *);
				long GetNotificationIdentity(HSTRING__ *,unsigned short *,unsigned __int64);
				long GetNumericProperty(Foundation::Collections::IMapView<HSTRING__ *,Services::TargetedContent::TargetedContentValue *> * const &,unsigned short const *,int *);
				long GetNumericPropertyAsString(Foundation::Collections::IMapView<HSTRING__ *,Services::TargetedContent::TargetedContentValue *> * const &,unsigned short const *,Microsoft::WRL::Wrappers::HString &);
				long GetOptionalBoolProperty(Foundation::Collections::IMapView<HSTRING__ *,Services::TargetedContent::TargetedContentValue *> * const &,unsigned short const *,bool *);
				long GetOptionalImagePathProperty(Foundation::Collections::IMapView<HSTRING__ *,Services::TargetedContent::TargetedContentValue *> * const &,unsigned short const *,HSTRING__ * *);
				long GetOptionalNumericProperty(Foundation::Collections::IMapView<HSTRING__ *,Services::TargetedContent::TargetedContentValue *> * const &,unsigned short const *,int,int *);
				long GetOptionalStringProperty(Foundation::Collections::IMapView<HSTRING__ *,Services::TargetedContent::TargetedContentValue *> * const &,unsigned short const *,HSTRING__ * *);
				long GetPropertyPath(Foundation::Collections::IMapView<HSTRING__ *,Services::TargetedContent::TargetedContentValue *> * const &,unsigned short const *,HSTRING__ * *);
				long GetStringProperty(Foundation::Collections::IMapView<HSTRING__ *,Services::TargetedContent::TargetedContentValue *> * const &,unsigned short const *,HSTRING__ * *);
				long LookupAnchorPosition(IUIAutomation *,unsigned short const *,bool,IUIAutomationElement * *,HWND__ * *);
				long ResolveTemplateFromName(Microsoft::WRL::Wrappers::HString &,SoftLanding::SoftLandingTemplateType *);
				long SetNodeAttribute(Data::Xml::Dom::IXmlNode *,unsigned short const *,unsigned short const *);
				long SetNotificationIdentity(Notifications::IToastNotification *,HSTRING__ *);
				long SetToastActions(Data::Xml::Dom::IXmlDocument *,SoftLanding::SOFTLANDING_BUTTON const &,SoftLanding::SOFTLANDING_BUTTON const &,SoftLanding::SOFTLANDING_NOTIFICATION const &,HSTRING__ *,HSTRING__ *);
				long SetToastImageSrc(Data::Xml::Dom::IXmlDocument *,unsigned short const *,unsigned short const *);
				long SetToastTemplateToToastGeneric(Data::Xml::Dom::IXmlDocument *);
				long UpdateSoftLandingMetadata(Data::Xml::Dom::IXmlDocument *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,SoftLanding::SoftLandingTemplateType,HWND__ *,tagRECT const *,tagRECT const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,bool,bool);
				long UpdateToastTemplateWithData(Data::Xml::Dom::IXmlDocument *,SoftLanding::SOFTLANDING_NOTIFICATION const &,HSTRING__ *,HSTRING__ *,SoftLanding::SOFTLANDING_BUTTON const &,SoftLanding::SOFTLANDING_BUTTON const &);
				unsigned short const * ResolveFallbackPositionFromName(HSTRING__ *);
			};

		};

		_RTL_RUN_ONCE s_bIsEnvironmentCheckDone;
		bool operator!=(Internal::String const &,Internal::String const &);
		bool operator<(Internal::String const &,Internal::String const &);
		bool operator==(Internal::String const &,Internal::String const &);
		void IUnknown_TryToReturnActivation(IUnknown *,unsigned long);
	};

	namespace Management
	{
		namespace Deployment
		{
			long WaitForDeploymentOperation(unsigned long,Foundation::IAsyncOperationWithProgress<Deployment::DeploymentResult *,Deployment::DeploymentProgress> *,Foundation::IAsyncOperationProgressHandler<Deployment::DeploymentResult *,Deployment::DeploymentProgress> *,Foundation::IAsyncOperationWithProgressCompletedHandler<Deployment::DeploymentResult *,Deployment::DeploymentProgress> *,Deployment::IDeploymentResult * *);
		};

	};

	namespace Storage
	{
		struct IStreamedFileDataRequestedHandler
		{
			IStreamedFileDataRequestedHandler();
		};

		namespace Streams
		{
			struct IInputStream
			{
				IInputStream();
			};

			struct IOutputStream
			{
				IOutputStream();
			};

			struct IRandomAccessStream
			{
				IRandomAccessStream();
			};

		};

	};

	namespace UI
	{
		namespace Core
		{
			struct ICoreWindowFactory
			{
				ICoreWindowFactory();
			};

		};

		namespace Immersive
		{
			Immersive::CConstraint ConstraintFromWindow(HWND__ *);
			bool CanPositionRelativeOnSide(Immersive::CConstraint const &,tagRECT const &,FLYOUT_PLACEMENT,Immersive::CConstraint const &);
			tagRECT HorizontallyCenterRect(Immersive::CConstraint const &,tagRECT const &);
			tagRECT MoveNearRect(tagRECT const &,tagRECT const &,FLYOUT_PLACEMENT);
			tagRECT PositionRelativeOnSide(Immersive::CConstraint const &,tagRECT const &,FLYOUT_PLACEMENT,Immersive::CConstraint const &);
			tagRECT QueryRelativePosition(Immersive::CConstraint const &,tagSIZE const &,tagRECT const &,FLYOUT_PLACEMENT,FLYOUT_PLACEMENT *);
			tagRECT ShiftRectIntoContainer(Immersive::CConstraint const &,tagRECT const &);
			tagRECT VerticallyCenterRect(Immersive::CConstraint const &,tagRECT const &);
		};

	};

};

namespace WindowsStoreHelpers
{
	bool IsAppStoreEnabled();
};

struct WrlIDuiBehaviorImpl
{
	virtual long Init(DirectUI::Value *);
	virtual long OnAttach(DirectUI::Element *);
	virtual long OnDetach(DirectUI::Element *);
	virtual long OnDisplayNodeCallback(DirectUI::Element *,EventMsg *);
	virtual long OnDoLayout(DirectUI::Element *,int,int);
	virtual long OnEvent(DirectUI::Element *,DirectUI::Event *);
	virtual long OnGetAdjacent(DirectUI::Element *,int,DirectUI::NavReference const *,unsigned long,DirectUI::Element * *);
	virtual long OnHosted(DirectUI::Element *,DirectUI::Element *);
	virtual long OnInput(DirectUI::Element *,DirectUI::InputEvent *);
	virtual long OnKeyFocusMoved(DirectUI::Element *,DirectUI::Element *,DirectUI::Element *);
	virtual long OnPaint(DirectUI::Element *,HDC__ *,tagRECT const *,tagRECT const *);
	virtual long OnPropertyChanged(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *);
	virtual long OnPropertyChanging(DirectUI::Element *,DirectUI::PropertyInfo const *,int,DirectUI::Value *,DirectUI::Value *,int *);
	virtual long OnUnHosted(DirectUI::Element *,DirectUI::Element *);
	virtual long OnUpdateDesiredSize(DirectUI::Element *,int,int,DirectUI::Surface *,tagSIZE *);
};

namespace XMLSerializer
{
	long AddEvent(Windows::Data::Xml::Dom::IXmlDocument *,unsigned short const *,unsigned short const *,unsigned short const *,XMLSerializer::XLSEventType);
	long GetOuterXML(unsigned short const *,XMLSerializer::XMLSkeletonType,Windows::Data::Xml::Dom::IXmlDocument * *);
	long SerializeLocalSuggestion(unsigned short const *,unsigned short const *,unsigned short * *);
	long StringifyDocument(Windows::Data::Xml::Dom::IXmlDocument *,unsigned short * *);
};

namespace XWinRT
{
	struct AutoValue<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> >
	{
		AutoValue<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> ><HSTRING__ *>(HSTRING__ * const &,long *);
		~AutoValue<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> >();
	};

	struct AutoValue<IUnknown *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *> >
	{
		~AutoValue<IUnknown *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *> >();
	};

	struct AutoValue<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> >
	{
		AutoValue<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *> ><Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *>(Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation * const &,long *);
	};

	struct AutoValue<Windows::Internal::Feedback::IFeedbackItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *> >
	{
		~AutoValue<Windows::Internal::Feedback::IFeedbackItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *> >();
	};

	struct AutoValue<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> >
	{
		AutoValue<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest *> ><Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *>(Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * const &,long *);
	};

	struct AutoValue<Windows::Storage::IStorageFolder *,InterfaceLifetimeTraits>
	{
		AutoValue<Windows::Storage::IStorageFolder *,InterfaceLifetimeTraits><Windows::Storage::IStorageFolder *>(Windows::Storage::IStorageFolder * const &,long *);
	};

	struct AutoValue<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *> >
	{
		AutoValue<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *> ><Windows::Storage::Pickers::IPickerFileType *>(Windows::Storage::Pickers::IPickerFileType * const &,long *);
		~AutoValue<Windows::Storage::Pickers::IPickerFileType *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::Pickers::IPickerFileType *> >();
	};

	struct AutoValue<Windows::UI::StartScreen::IJumpListItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *> >
	{
		~AutoValue<Windows::UI::StartScreen::IJumpListItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *> >();
	};

	struct AutoValue<detail::GitStorageType<IUnknown>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *> >
	{
		AutoValue<detail::GitStorageType<IUnknown>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *> ><IUnknown *>(IUnknown * const &,long *);
		~AutoValue<detail::GitStorageType<IUnknown>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *> >();
	};

	struct AutoValue<detail::GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControl>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> >
	{
		AutoValue<detail::GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControl>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControl *> ><Windows::ApplicationModel::Contacts::Internal::IContactActionControl *>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * const &,long *);
	};

	struct AutoValue<detail::GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> >
	{
		AutoValue<detail::GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *> ><Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *>(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * const &,long *);
	};

	struct AutoValue<detail::GitStorageType<Windows::Internal::Feedback::IFeedbackItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *> >
	{
		AutoValue<detail::GitStorageType<Windows::Internal::Feedback::IFeedbackItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *> ><Windows::Internal::Feedback::IFeedbackItem *>(Windows::Internal::Feedback::IFeedbackItem * const &,long *);
		~AutoValue<detail::GitStorageType<Windows::Internal::Feedback::IFeedbackItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *> >();
	};

	struct AutoValue<detail::GitStorageType<Windows::Storage::IStorageItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::IStorageItem *> >
	{
		AutoValue<detail::GitStorageType<Windows::Storage::IStorageItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Storage::IStorageItem *> ><Windows::Storage::IStorageItem *>(Windows::Storage::IStorageItem * const &,long *);
	};

	struct AutoValue<detail::GitStorageType<Windows::UI::StartScreen::IJumpListItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *> >
	{
		AutoValue<detail::GitStorageType<Windows::UI::StartScreen::IJumpListItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *> ><Windows::UI::StartScreen::IJumpListItem *>(Windows::UI::StartScreen::IJumpListItem * const &,long *);
		~AutoValue<detail::GitStorageType<Windows::UI::StartScreen::IJumpListItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *> >();
	};

	struct ComLock
	{
		ComLock(bool);
	};

	namespace FakeStl
	{
		void swap<XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > > >(XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > > &,XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > > &);
	};

	struct InterfaceEquals
	{
		long operator()<IUnknown>(IUnknown *,IUnknown *,bool *);
		long operator()<Windows::ApplicationModel::Contacts::Internal::IContactActionControl>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,Windows::ApplicationModel::Contacts::Internal::IContactActionControl *,bool *);
		long operator()<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem>(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *,bool *);
		long operator()<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation>(Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *,Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *,bool *);
		long operator()<Windows::Internal::Feedback::IFeedbackItem>(Windows::Internal::Feedback::IFeedbackItem *,Windows::Internal::Feedback::IFeedbackItem *,bool *);
		long operator()<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest>(Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *,Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *,bool *);
		long operator()<Windows::Storage::IStorageFolder>(Windows::Storage::IStorageFolder *,Windows::Storage::IStorageFolder *,bool *);
		long operator()<Windows::Storage::IStorageItem>(Windows::Storage::IStorageItem *,Windows::Storage::IStorageItem *,bool *);
		long operator()<Windows::Storage::Pickers::IPickerFileType>(Windows::Storage::Pickers::IPickerFileType *,Windows::Storage::Pickers::IPickerFileType *,bool *);
		long operator()<Windows::UI::StartScreen::IJumpListItem>(Windows::UI::StartScreen::IJumpListItem *,Windows::UI::StartScreen::IJumpListItem *,bool *);
	};

	struct InterfaceLifetimeTraits
	{
		static long Construct<IInspectable>(detail::GitStorageType<IInspectable> *,detail::GitStorageType<IInspectable>);
		static long Construct<IUnknown>(detail::GitStorageType<IUnknown> *,detail::GitStorageType<IUnknown>);
		static long Construct<Windows::ApplicationModel::Contacts::Internal::IContactActionControl>(detail::GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControl> *,detail::GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControl>);
		static long Construct<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem>(detail::GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem> *,detail::GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem>);
		static long Construct<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation>(Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation * *,Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation *);
		static long Construct<Windows::Internal::Feedback::IFeedbackItem>(detail::GitStorageType<Windows::Internal::Feedback::IFeedbackItem> *,detail::GitStorageType<Windows::Internal::Feedback::IFeedbackItem>);
		static long Construct<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest>(Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *,Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest *);
		static long Construct<Windows::Storage::IStorageFolder>(Windows::Storage::IStorageFolder * *,Windows::Storage::IStorageFolder *);
		static long Construct<Windows::Storage::IStorageItem>(detail::GitStorageType<Windows::Storage::IStorageItem> *,detail::GitStorageType<Windows::Storage::IStorageItem>);
		static long Construct<Windows::Storage::Pickers::IPickerFileType>(Windows::Storage::Pickers::IPickerFileType * *,Windows::Storage::Pickers::IPickerFileType *);
		static long Construct<Windows::UI::StartScreen::IJumpListItem>(detail::GitStorageType<Windows::UI::StartScreen::IJumpListItem> *,detail::GitStorageType<Windows::UI::StartScreen::IJumpListItem>);
		static void Destroy<IUnknown>(IUnknown * *);
		static void Destroy<Windows::ApplicationModel::Contacts::IContactAddress>(Windows::ApplicationModel::Contacts::IContactAddress * *);
		static void Destroy<Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount>(Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount * *);
		static void Destroy<Windows::ApplicationModel::Contacts::IContactEmail>(Windows::ApplicationModel::Contacts::IContactEmail * *);
		static void Destroy<Windows::ApplicationModel::Contacts::IContactPhone>(Windows::ApplicationModel::Contacts::IContactPhone * *);
		static void Destroy<Windows::ApplicationModel::Contacts::Internal::IContactActionControl>(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *);
		static void Destroy<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem>(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *);
		static void Destroy<Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation>(Windows::ApplicationModel::Contacts::Internal::IContactDisplayInformation * *);
		static void Destroy<Windows::Internal::Feedback::IFeedbackItem>(Windows::Internal::Feedback::IFeedbackItem * *);
		static void Destroy<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest>(Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest * *);
		static void Destroy<Windows::Storage::IStorageFolder>(Windows::Storage::IStorageFolder * *);
		static void Destroy<Windows::Storage::IStorageItem>(Windows::Storage::IStorageItem * *);
		static void Destroy<Windows::Storage::Pickers::IPickerFileType>(Windows::Storage::Pickers::IPickerFileType * *);
		static void Destroy<Windows::UI::StartScreen::IJumpListItem>(Windows::UI::StartScreen::IJumpListItem * *);
	};

	namespace SecureVersionTag
	{
		struct Tag
		{
			long Release();
		};

		struct TagManager
		{
			long ChangeVersion();
		};

	};

	struct SerializingLockPolicy
	{
		static detail::LockHolder<ComLock,detail::AcquireRead> Read(ComLock &,long *);
		static detail::LockHolder<ComLock,detail::AcquireWrite> Write(ComLock &,long *);
	};

	struct StringEquals
	{
		long operator()(HSTRING__ *,HSTRING__ *,bool *);
	};

	class XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > >
	{
		long CreateNode(HSTRING__ * const &,unsigned int,unsigned int,XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > >::CNode * *);
		long FreeNode(XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > >::CNode *);
		long GetNode(HSTRING__ * const &,unsigned int &,unsigned int &,XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > >::CNode * &,XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > >::CNode * *);
		long NewNode(HSTRING__ * const &,unsigned int,unsigned int,XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > >::CNode * *);
		unsigned int PickSize(unsigned __int64);
		void UpdateRehashThresholds();
	public:
		TXPOSITION * GetStartPosition();
		XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > >(void *,unsigned int,float,float,float,unsigned int);
		long InitHashTable(unsigned int,bool,bool *);
		long Lookup(HSTRING__ * const &,XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > >::CPair * *);
		long Rehash(unsigned int);
		long RemoveAll();
		long RemoveAtPos(TXPOSITION *);
		long SetAt(HSTRING__ * const &,detail::GitStorageType<IInspectable> const &,TXPOSITION * *);
		~XHashMap<HSTRING__ *,detail::GitStorageType<IInspectable>,Windows::Foundation::Collections::Internal::HashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,Windows::Foundation::Collections::Internal::HashMapOptions<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0,1,0> >::KeyTraits,CElementTraits<detail::GitStorageType<IInspectable> > >();
	};

	namespace detail
	{
		struct AbiReference<IUnknown *,GitStorageType<IUnknown>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *> >
		{
			~AbiReference<IUnknown *,GitStorageType<IUnknown>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *> >();
		};

		struct AbiReference<Windows::Internal::Feedback::IFeedbackItem *,GitStorageType<Windows::Internal::Feedback::IFeedbackItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *> >
		{
			~AbiReference<Windows::Internal::Feedback::IFeedbackItem *,GitStorageType<Windows::Internal::Feedback::IFeedbackItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *> >();
		};

		struct AbiReference<Windows::UI::StartScreen::IJumpListItem *,GitStorageType<Windows::UI::StartScreen::IJumpListItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *> >
		{
			~AbiReference<Windows::UI::StartScreen::IJumpListItem *,GitStorageType<Windows::UI::StartScreen::IJumpListItem>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *> >();
		};

		struct AtomicUpdater<0>
		{
			AtomicUpdater<0>();
		};

		struct GitStorageType<IInspectable>
		{
			struct ReferencedGitCookie
			{
				long Localize(IInspectable * *);
				unsigned long Release();
			};

			long Initialize(IInspectable *);
		};

		struct GitStorageType<IUnknown>
		{
			struct ReferencedGitCookie
			{
				long Localize(IUnknown * *);
				unsigned long Release();
			};

			GitStorageType<IUnknown>();
			long Initialize(IUnknown *);
		};

		struct GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControl>
		{
			struct ReferencedGitCookie
			{
				long Localize(Windows::ApplicationModel::Contacts::Internal::IContactActionControl * *);
				unsigned long Release();
			};

			GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControl>();
			long Initialize(Windows::ApplicationModel::Contacts::Internal::IContactActionControl *);
		};

		struct GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem>
		{
			struct ReferencedGitCookie
			{
				long Localize(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem * *);
				unsigned long Release();
			};

			GitStorageType<Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem>();
			long Initialize(Windows::ApplicationModel::Contacts::Internal::IContactActionControlItem *);
		};

		struct GitStorageType<Windows::Internal::Feedback::IFeedbackItem>
		{
			struct ReferencedGitCookie
			{
				long Localize(Windows::Internal::Feedback::IFeedbackItem * *);
				unsigned long Release();
			};

			GitStorageType<Windows::Internal::Feedback::IFeedbackItem>();
			long Initialize(Windows::Internal::Feedback::IFeedbackItem *);
		};

		struct GitStorageType<Windows::Storage::IStorageItem>
		{
			struct ReferencedGitCookie
			{
				long Localize(Windows::Storage::IStorageItem * *);
				unsigned long Release();
			};

			GitStorageType<Windows::Storage::IStorageItem>();
			long Initialize(Windows::Storage::IStorageItem *);
		};

		struct GitStorageType<Windows::UI::StartScreen::IJumpListItem>
		{
			struct ReferencedGitCookie
			{
				long Localize(Windows::UI::StartScreen::IJumpListItem * *);
				unsigned long Release();
			};

			GitStorageType<Windows::UI::StartScreen::IJumpListItem>();
			long Initialize(Windows::UI::StartScreen::IJumpListItem *);
		};

		struct LockHolder<ComLock,AcquireRead>
		{
			~LockHolder<ComLock,AcquireRead>();
		};

		struct LockHolder<ComLock,AcquireWrite>
		{
			~LockHolder<ComLock,AcquireWrite>();
		};

		struct LockHolder<SRWLock,AcquireWrite>
		{
			~LockHolder<SRWLock,AcquireWrite>();
		};

		struct PresentationReference<GitStorageType<IUnknown>,IUnknown *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *> >
		{
			PresentationReference<GitStorageType<IUnknown>,IUnknown *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IUnknown *> >(GitStorageType<IUnknown> const &,long *);
		};

		struct PresentationReference<GitStorageType<Windows::Internal::Feedback::IFeedbackItem>,Windows::Internal::Feedback::IFeedbackItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *> >
		{
			PresentationReference<GitStorageType<Windows::Internal::Feedback::IFeedbackItem>,Windows::Internal::Feedback::IFeedbackItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Feedback::FeedbackItem *> >(GitStorageType<Windows::Internal::Feedback::IFeedbackItem> const &,long *);
		};

		struct PresentationReference<GitStorageType<Windows::UI::StartScreen::IJumpListItem>,Windows::UI::StartScreen::IJumpListItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *> >
		{
			PresentationReference<GitStorageType<Windows::UI::StartScreen::IJumpListItem>,Windows::UI::StartScreen::IJumpListItem *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::UI::StartScreen::JumpListItem *> >(GitStorageType<Windows::UI::StartScreen::IJumpListItem> const &,long *);
		};

		struct ReentrancyGuard<0>
		{
			ReentrancyGuard<0>(...);
		};

		struct ReentrancyGuard<1>
		{
			ReentrancyGuard<1> & operator=(ReentrancyGuard<1>);
			ReentrancyGuard<1>(long,long volatile *);
			long const hr();
		};

	};

};

struct bad_cast
{
	bad_cast(bad_cast const &);
	virtual ~bad_cast();
};

namespace bond
{
	struct CompactBinaryReader<InputBuffer>
	{
		void Read<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > &);
		void ReadContainerBegin(unsigned int &,_bond_enumerators::BondDataType::BondDataType &);
		void ReadContainerBegin(unsigned int &,std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType> &);
		void ReadFieldBegin(_bond_enumerators::BondDataType::BondDataType &,unsigned short &);
		void ReadStructBegin(bool);
		void Skip(_bond_enumerators::BondDataType::BondDataType);
		~CompactBinaryReader<InputBuffer>();
	};

	struct CoreException
	{
		CoreException(CoreException const &);
		virtual ~CoreException();
	};

	class Exception
	{
	protected:
		Exception(char const *);
	public:
		Exception(Exception const &);
		virtual char const * what();
		virtual ~Exception();
	};

	class InputBuffer
	{
	protected:
		void EofException(unsigned int);
	public:
		void Read(unsigned char &);
		void Read<unsigned short>(unsigned short &);
		void ReadVariableUnsigned<unsigned __int64>(unsigned __int64 &);
		void ReadVariableUnsigned<unsigned int>(unsigned int &);
		void ReadVariableUnsigned<unsigned short>(unsigned short &);
		~InputBuffer();
	};

	struct Metadata
	{
		Metadata & operator=(Metadata const &);
		Metadata();
		Metadata(Metadata const &);
		~Metadata();
	};

	struct PremadeSchemas
	{
		PremadeSchemas();
		~PremadeSchemas();
	};

	struct RuntimeSchema
	{
		~RuntimeSchema();
	};

	struct SchemaDef
	{
		SchemaDef();
		~SchemaDef();
	};

	struct SerializableExceptionBase
	{
		SerializableExceptionBase(SerializableExceptionBase const &);
	};

	struct StreamException
	{
		StreamException(StreamException const &);
		virtual ~StreamException();
	};

	struct TypeDef
	{
		TypeDef(TypeDef const &);
		~TypeDef();
	};

	struct blob
	{
		struct deleter<std::shared_ptr<char const > >
		{
			void operator()(void const *);
			~deleter<std::shared_ptr<char const > >();
		};

		blob(blob const &);
	};

	class bonded<Windows::Data::Input::RadialControllerActionTriggers,CompactBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Windows::Data::Input::RadialControllerActionTriggers,RequiredFieldValiadator<Windows::Data::Input::RadialControllerActionTriggers> > >(To<Windows::Data::Input::RadialControllerActionTriggers,RequiredFieldValiadator<Windows::Data::Input::RadialControllerActionTriggers> > const &);
	public:
		~bonded<Windows::Data::Input::RadialControllerActionTriggers,CompactBinaryReader<InputBuffer> &>();
	};

	class bonded<Windows::Data::Input::RadialControllerActions,CompactBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Windows::Data::Input::RadialControllerActions,RequiredFieldValiadator<Windows::Data::Input::RadialControllerActions> > >(To<Windows::Data::Input::RadialControllerActions,RequiredFieldValiadator<Windows::Data::Input::RadialControllerActions> > const &);
	public:
		~bonded<Windows::Data::Input::RadialControllerActions,CompactBinaryReader<InputBuffer> &>();
	};

	class bonded<Windows::Data::Input::RadialControllerTool,CompactBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Windows::Data::Input::RadialControllerTool,RequiredFieldValiadator<Windows::Data::Input::RadialControllerTool> > >(To<Windows::Data::Input::RadialControllerTool,RequiredFieldValiadator<Windows::Data::Input::RadialControllerTool> > const &);
	public:
		~bonded<Windows::Data::Input::RadialControllerTool,CompactBinaryReader<InputBuffer> &>();
	};

	class bonded<wil::cloud_store_data<Windows::Data::Input::RadialControllerSettings>,CompactBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<wil::cloud_store_data<Windows::Data::Input::RadialControllerSettings>,RequiredFieldValiadator<wil::cloud_store_data<Windows::Data::Input::RadialControllerSettings> > > >(To<wil::cloud_store_data<Windows::Data::Input::RadialControllerSettings>,RequiredFieldValiadator<wil::cloud_store_data<Windows::Data::Input::RadialControllerSettings> > > const &);
	public:
		~bonded<wil::cloud_store_data<Windows::Data::Input::RadialControllerSettings>,CompactBinaryReader<InputBuffer> &>();
	};

	namespace detail
	{
		struct basic_string_stream<1024>
		{
			basic_string_stream<1024> & operator<<(char const *);
			basic_string_stream<1024> & operator<<(unsigned int);
			basic_string_stream<1024>();
			~basic_string_stream<1024>();
		};

		PrimitiveTypes g_primitiveTypes;
		bool BasicTypeField<To<Windows::Data::Input::RadialControllerActions,RequiredFieldValiadator<Windows::Data::Input::RadialControllerActions> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Input::RadialControllerActions,RequiredFieldValiadator<Windows::Data::Input::RadialControllerActions> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Input::RadialControllerTool,RequiredFieldValiadator<Windows::Data::Input::RadialControllerTool> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Input::RadialControllerTool,RequiredFieldValiadator<Windows::Data::Input::RadialControllerTool> > const &,CompactBinaryReader<InputBuffer> &);
		unsigned int * g_primitiveTypesSizeOf;
		void MatchingTypeContainer<std::vector<int,std::allocator<int> >,CompactBinaryReader<InputBuffer> >(std::vector<int,std::allocator<int> > &,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<Windows::Data::Input::RadialControllerActionTriggers,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<Windows::Data::Input::RadialControllerActionTriggers,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<Windows::Data::Input::RadialControllerActions,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<Windows::Data::Input::RadialControllerActions,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<Windows::Data::Input::RadialControllerTool,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<Windows::Data::Input::RadialControllerTool,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<wil::cloud_store_data<Windows::Data::Input::RadialControllerSettings>,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<wil::cloud_store_data<Windows::Data::Input::RadialControllerSettings>,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
	};

	namespace input_buffer
	{
		struct VariableUnsignedUnchecked<unsigned __int64,14>
		{
			static void Read(char const * &,unsigned __int64 &);
		};

		struct VariableUnsignedUnchecked<unsigned __int64,28>
		{
			static void Read(char const * &,unsigned __int64 &);
		};

		struct VariableUnsignedUnchecked<unsigned __int64,42>
		{
			static void Read(char const * &,unsigned __int64 &);
		};

		struct VariableUnsignedUnchecked<unsigned int,14>
		{
			static void Read(char const * &,unsigned int &);
		};

		struct VariableUnsignedUnchecked<unsigned short,0>
		{
			static void Read(char const * &,unsigned short &);
		};

	};

	struct nullable<TypeDef,detail::no_allocator,0>
	{
		nullable<TypeDef,detail::no_allocator,0> & operator=(nullable<TypeDef,detail::no_allocator,0> const &);
		nullable<TypeDef,detail::no_allocator,0>(nullable<TypeDef,detail::no_allocator,0> const &);
		~nullable<TypeDef,detail::no_allocator,0>();
	};

	namespace reflection
	{
		Metadata MetadataInit(char const *,_bond_enumerators::Modifier::Modifier,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &);
		Metadata MetadataInit(char const *,char const *,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &);
		Metadata MetadataInit<int>(int const &,char const *,_bond_enumerators::Modifier::Modifier,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &);
	};

	struct value<Windows::Data::Input::RadialControllerTool,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<Windows::Data::Input::RadialControllerTool,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<__int64,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<__int64,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<int,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<int,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<short,CompactBinaryReader<InputBuffer> &,void>
	{
		void Deserialize<int>(int &);
		~value<short,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<signed char,CompactBinaryReader<InputBuffer> &,void>
	{
		void Deserialize<int>(int &);
		~value<signed char,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,CompactBinaryReader<InputBuffer> &,void>
	{
		void Deserialize<std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > >(std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > &);
		~value<std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::vector<int,std::allocator<int> >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::vector<int,std::allocator<int> >,CompactBinaryReader<InputBuffer> &,void>();
	};

	bond::PremadeSchemas g_premadeSchemas;
	std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > & mapped_at<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > > &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	void Deserialize<wil::cloud_store_data<Windows::Data::Input::RadialControllerSettings>,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer>,wil::cloud_store_data<Windows::Data::Input::RadialControllerSettings> &);
	void DeserializeContainer<std::vector<int,std::allocator<int> >,value<int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::vector<int,std::allocator<int> > &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeElements<std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,value<Windows::Data::Input::RadialControllerTool,CompactBinaryReader<InputBuffer> &,void> >(std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > &,bond::value<Windows::Data::Input::RadialControllerTool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<int,std::allocator<int> >,value<int,CompactBinaryReader<InputBuffer> &,void> >(std::vector<int,std::allocator<int> > &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<int,std::allocator<int> >,value<short,CompactBinaryReader<InputBuffer> &,void> >(std::vector<int,std::allocator<int> > &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<int,std::allocator<int> >,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(std::vector<int,std::allocator<int> > &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMap<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > >,value<std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMapElements<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,CompactBinaryReader<InputBuffer> &,void> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > > &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void GenericReadVariableUnsigned<InputBuffer,unsigned __int64>(bond::InputBuffer &,unsigned __int64 &);
	void GenericReadVariableUnsigned<InputBuffer,unsigned int>(bond::InputBuffer &,unsigned int &);
	void GenericReadVariableUnsigned<InputBuffer,unsigned short>(bond::InputBuffer &,unsigned short &);
	void Skip<Windows::Data::Input::RadialControllerTool,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<__int64,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<bool,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<double,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<float,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<int,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<short,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<signed char,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > > > >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::vector<int,std::allocator<int> >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned __int64,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned char,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned int,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned short,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void UnknownProtocolException();
	void resize_list<std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > >(std::vector<Windows::Data::Input::RadialControllerTool,std::allocator<Windows::Data::Input::RadialControllerTool> > &,unsigned int);
};

namespace boost
{
	namespace assign
	{
		assign_detail::generic_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > map_list_of<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
	};

	namespace assign_detail
	{
		struct generic_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
		{
			namespace operator<std
			{
			};

			~generic_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >();
		};

	};

	namespace detail
	{
		struct shared_count
		{
			shared_count<char const *,bond::blob::deleter<std::shared_ptr<char const > > >(char const *,bond::blob::deleter<std::shared_ptr<char const > >);
		};

		struct sp_counted_base
		{
			virtual void destroy();
		};

		struct sp_counted_impl_pd<char const *,bond::blob::deleter<std::shared_ptr<char const > > >
		{
			virtual void * get_deleter(type_info const &);
			virtual void * get_untyped_deleter();
			virtual void dispose();
		};

		void sp_deleter_construct<char const ,char const >(shared_ptr<char const > *,char const *);
		void sp_enable_shared_from_this(...);
	};

};

namespace details
{
	struct ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> > * const,unsigned int);
			~Iterator();
		};

		ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> >(IObjectArray *);
		ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> >::Iterator begin();
		ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> >::Iterator end();
		~ObjectArrayAdapterImpl<IApplicationView,Microsoft::WRL::ComPtr<IApplicationView> >();
	};

	namespace ObjectArrayAdapterImpl<IApplicationViewChangeListener,Microsoft::WRL::ComPtr<IApplicationViewChangeListener> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

	};

	struct ObjectArrayAdapterImpl<IEnterpriseIdChangeNotification,Microsoft::WRL::ComPtr<IEnterpriseIdChangeNotification> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

		ObjectArrayAdapterImpl<IEnterpriseIdChangeNotification,Microsoft::WRL::ComPtr<IEnterpriseIdChangeNotification> >(IObjectArray *);
	};

	struct ObjectArrayAdapterImpl<IGameFocusEvents,Microsoft::WRL::ComPtr<IGameFocusEvents> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IGameFocusEvents,Microsoft::WRL::ComPtr<IGameFocusEvents> > * const,unsigned int);
			~Iterator();
		};

		~ObjectArrayAdapterImpl<IGameFocusEvents,Microsoft::WRL::ComPtr<IGameFocusEvents> >();
	};

	struct ObjectArrayAdapterImpl<IGlobalRudeWindowNotifications,Microsoft::WRL::ComPtr<IGlobalRudeWindowNotifications> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IGlobalRudeWindowNotifications,Microsoft::WRL::ComPtr<IGlobalRudeWindowNotifications> > * const,unsigned int);
			~Iterator();
		};

		~ObjectArrayAdapterImpl<IGlobalRudeWindowNotifications,Microsoft::WRL::ComPtr<IGlobalRudeWindowNotifications> >();
	};

	struct ObjectArrayAdapterImpl<IImmersiveMonitor,Microsoft::WRL::ComPtr<IImmersiveMonitor> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IImmersiveMonitor,Microsoft::WRL::ComPtr<IImmersiveMonitor> > * const,unsigned int);
			~Iterator();
		};

		ObjectArrayAdapterImpl<IImmersiveMonitor,Microsoft::WRL::ComPtr<IImmersiveMonitor> >(IObjectArray *);
		ObjectArrayAdapterImpl<IImmersiveMonitor,Microsoft::WRL::ComPtr<IImmersiveMonitor> >::Iterator begin();
		ObjectArrayAdapterImpl<IImmersiveMonitor,Microsoft::WRL::ComPtr<IImmersiveMonitor> >::Iterator end();
		~ObjectArrayAdapterImpl<IImmersiveMonitor,Microsoft::WRL::ComPtr<IImmersiveMonitor> >();
	};

	namespace ObjectArrayAdapterImpl<IImmersiveSettingsCacheNotification,Microsoft::WRL::ComPtr<IImmersiveSettingsCacheNotification> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

	};

	struct ObjectArrayAdapterImpl<IRudeWindowManagerEvents,Microsoft::WRL::ComPtr<IRudeWindowManagerEvents> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IRudeWindowManagerEvents,Microsoft::WRL::ComPtr<IRudeWindowManagerEvents> > * const,unsigned int);
			~Iterator();
		};

		~ObjectArrayAdapterImpl<IRudeWindowManagerEvents,Microsoft::WRL::ComPtr<IRudeWindowManagerEvents> >();
	};

	namespace ObjectArrayAdapterImpl<ITabletModeAvailabilityChangeListener,Microsoft::WRL::ComPtr<ITabletModeAvailabilityChangeListener> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

	};

	namespace ObjectArrayAdapterImpl<ITabletModeChangeListener,Microsoft::WRL::ComPtr<ITabletModeChangeListener> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

	};

	struct ObjectArrayAdapterImpl<IWindowOccludedChangeListener,Microsoft::WRL::ComPtr<IWindowOccludedChangeListener> >
	{
		class Iterator
		{
			void GetCurrentObject();
		public:
			Iterator(ObjectArrayAdapterImpl<IWindowOccludedChangeListener,Microsoft::WRL::ComPtr<IWindowOccludedChangeListener> > * const,unsigned int);
			~Iterator();
		};

		~ObjectArrayAdapterImpl<IWindowOccludedChangeListener,Microsoft::WRL::ComPtr<IWindowOccludedChangeListener> >();
	};

	namespace ObjectArrayAdapterImpl<IWindowSnappingEvents,Microsoft::WRL::ComPtr<IWindowSnappingEvents> >
	{
		class Iterator
		{
			void GetCurrentObject();
		};

	};

};

struct exception
{
	exception();
	exception(char const * const &);
	exception(exception const &);
	virtual char const * what();
	virtual ~exception();
};

namespace pplx
{
	struct cancellation_token
	{
		~cancellation_token();
	};

	struct cancellation_token_source
	{
		cancellation_token_source();
		~cancellation_token_source();
	};

	namespace details
	{
		class CancellationTokenRegistration_TaskProc
		{
		protected:
			virtual void _Exec();
		};

		class _CancellationTokenRegistration
		{
			void _Invoke();
		};

		struct _CancellationTokenState
		{
			_CancellationTokenState();
			virtual ~_CancellationTokenState();
			void _Cancel();
			void _DeregisterCallback(_CancellationTokenRegistration *);
			void _RegisterCallback(_CancellationTokenRegistration *);
		};

		class _RefCounterBase
		{
		protected:
			virtual void _Destroy();
		public:
			long _Release();
			virtual ~_RefCounterBase();
		};

		struct _Scheduler_Param
		{
			static void DefaultWorkCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_WORK *);
		};

		class _UnrealizedChore
		{
		protected:
			static void _InvokeBridge<Concurrency::details::_PPLTaskHandle<bool,Concurrency::task<bool>::_InitialTaskHandle<bool,<lambda_10e63c565a890213803308da632df03c>,Concurrency::details::_TypeSelectorNoAsync>,_UnrealizedChore> >(void *);
			static void _InvokeBridge<Concurrency::details::_PPLTaskHandle<bool,Concurrency::task<bool>::_InitialTaskHandle<bool,<lambda_d3370a4c1ba65caf45b834b422319ae7>,Concurrency::details::_TypeSelectorNoAsync>,_UnrealizedChore> >(void *);
			static void _InvokeBridge<Concurrency::details::_PPLTaskHandle<long,Concurrency::task<bool>::_ContinuationTaskHandle<bool,long,<lambda_cdbbad76c92ec30428bf2620410bbeb6>,std::integral_constant<bool,0>,Concurrency::details::_TypeSelectorNoAsync>,Concurrency::details::_ContinuationTaskHandleBase> >(void *);
			static void _InvokeBridge<Concurrency::details::_PPLTaskHandle<unsigned char,Concurrency::task<unsigned char>::_ContinuationTaskHandle<void,void,<lambda_6c564f6ca680034b6e38b5cd8c30837b>,std::integral_constant<bool,0>,Concurrency::details::_TypeSelectorNoAsync>,Concurrency::details::_ContinuationTaskHandleBase> >(void *);
			static void _InvokeBridge<Concurrency::details::_PPLTaskHandle<unsigned char,Concurrency::task<unsigned char>::_InitialTaskHandle<void,<lambda_b9eacd92f1a716866d0ac34f213ee72a>,Concurrency::details::_TypeSelectorNoAsync>,_UnrealizedChore> >(void *);
			static void _InvokeBridge<Concurrency::details::_PPLTaskHandle<unsigned char,Concurrency::task<unsigned char>::_InitialTaskHandle<void,<lambda_c6a7bd911fd69d4a446a52b36a580423>,Concurrency::details::_TypeSelectorNoAsync>,_UnrealizedChore> >(void *);
		};

		struct critical_section_impl
		{
			~critical_section_impl();
		};

		struct event_impl
		{
			event_impl();
			~event_impl();
		};

		struct windows_scheduler
		{
			virtual void schedule(void (*)(void *),void *);
		};

	};

	struct invalid_operation
	{
		invalid_operation(char const *);
		invalid_operation(invalid_operation const &);
		virtual char const * what();
		virtual ~invalid_operation();
	};

	struct scoped_lock<details::_Spin_lock>
	{
		~scoped_lock<details::_Spin_lock>();
	};

	struct scoped_lock<details::critical_section_impl>
	{
		~scoped_lock<details::critical_section_impl>();
	};

	struct task_canceled
	{
		task_canceled(task_canceled const &);
		virtual char const * what();
		virtual ~task_canceled();
	};

	std::shared_ptr<Concurrency::scheduler_interface> get_ambient_scheduler();
};

namespace shell
{
	struct TaskScheduler
	{
		TaskScheduler(IShellTaskScheduler *,_GUID const &);
		static long CreateInstance(_GUID const &,TaskScheduler * *);
		static long CreateInstance(_GUID const &,unsigned long,unsigned long,TaskScheduler * *);
	};

};

namespace std
{
	struct _Deque_alloc<0,_Deque_base_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >
	{
		~_Deque_alloc<0,_Deque_base_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >();
	};

	struct _Deque_alloc<0,_Deque_base_types<tagPRESENTFRAME,allocator<tagPRESENTFRAME> > >
	{
		~_Deque_alloc<0,_Deque_base_types<tagPRESENTFRAME,allocator<tagPRESENTFRAME> > >();
	};

	struct _Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >
	{
		_Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >(unsigned __int64,_Container_base12 const *);
		pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > const & operator*();
		~_Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >();
	};

	struct _Deque_const_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > >
	{
		_Deque_const_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > >(_Deque_const_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > > const &);
		~_Deque_const_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > >();
	};

	struct _Deque_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >
	{
		_Deque_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > > operator+(__int64);
		~_Deque_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >();
	};

	struct _Deque_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > >
	{
		_Deque_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > > operator+(__int64);
		tagPRESENTFRAME & operator*();
		~_Deque_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > >();
	};

	struct _Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > >
	{
		~_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > >();
	};

	struct _Deque_val<_Deque_simple_types<tagPRESENTFRAME> >
	{
		~_Deque_val<_Deque_simple_types<tagPRESENTFRAME> >();
	};

	struct _Error_objects<int>
	{
		static _Generic_error_category _Generic_object;
		static _Iostream_error_category _Iostream_object;
		static _System_error_category _System_object;
	};

	struct _Facetptr<ctype<unsigned short> >
	{
		static locale::facet const * const _Psave;
	};

	struct _Facetptr<num_put<unsigned short,ostreambuf_iterator<unsigned short,char_traits<unsigned short> > > >
	{
		static locale::facet const * const _Psave;
	};

	struct _Facetptr<numpunct<unsigned short> >
	{
		static locale::facet const * const _Psave;
	};

	struct _Func_base<unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual ~_Func_base<unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	struct _Func_base<unsigned char,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual ~_Func_base<unsigned char,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_class<bool,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Tidy();
	public:
		bool operator()();
		~_Func_class<bool,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_class<long,Windows::Foundation::Collections::IPropertySet *,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Reset(_Func_class<long,Windows::Foundation::Collections::IPropertySet *,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> const &);
		void _Tidy();
	public:
		~_Func_class<long,Windows::Foundation::Collections::IPropertySet *,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_class<long,bool,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Tidy();
	public:
		~_Func_class<long,bool,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_class<long,unsigned short *,int,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Tidy();
	public:
		~_Func_class<long,unsigned short *,int,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_class<unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Tidy();
	public:
		unsigned char operator()();
		~_Func_class<unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_class<unsigned char,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Tidy();
	public:
		~_Func_class<unsigned char,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_class<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Reset(_Func_class<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> const &);
		void _Tidy();
	public:
		void operator()();
		~_Func_class<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_class<void,wil::cloud_store_notification<Windows::Data::Input::RadialControllerSettings> &,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Reset(_Func_class<void,wil::cloud_store_notification<Windows::Data::Input::RadialControllerSettings> &,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> const &);
		void _Tidy();
	public:
		~_Func_class<void,wil::cloud_store_notification<Windows::Data::Input::RadialControllerSettings> &,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_impl<_Callable_obj<<lambda_052e919cc0e5399df76dff3972c0cac1>,0>,allocator<_Func_class<unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual type_info const & _Target_type();
		virtual unsigned char _Do_call();
		virtual ~_Func_impl<_Callable_obj<<lambda_052e919cc0e5399df76dff3972c0cac1>,0>,allocator<_Func_class<unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_impl<_Callable_obj<<lambda_205d5c541439dbb9c49dd8bca0f94728>,0>,allocator<_Func_class<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual type_info const & _Target_type();
		virtual void _Do_call();
	};

	class _Func_impl<_Callable_obj<<lambda_763529b0c7473cbc215a52d189ac9b18>,0>,allocator<_Func_class<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual type_info const & _Target_type();
		virtual void _Do_call();
	};

	class _Func_impl<_Callable_obj<<lambda_a07167602b08f8bc750b691724e5e902>,0>,allocator<_Func_class<unsigned char,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,unsigned char,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<unsigned char,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<unsigned char,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual type_info const & _Target_type();
		virtual ~_Func_impl<_Callable_obj<<lambda_a07167602b08f8bc750b691724e5e902>,0>,allocator<_Func_class<unsigned char,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,unsigned char,unsigned char,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	class _Func_impl<_Callable_obj<<lambda_bb3ea35c7a129712676a4a6472ecdc6a>,0>,allocator<_Func_class<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> >,void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
		virtual void _Delete_this(bool);
		virtual void const * _Get();
	public:
		virtual _Func_base<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Copy(void *);
		virtual _Func_base<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil> * _Move(void *);
		virtual type_info const & _Target_type();
		virtual void _Do_call();
	};

	struct _Generic_error_category
	{
		virtual basic_string<char,char_traits<char>,allocator<char> > message(int);
		virtual char const * name();
	};

	class _Hash<_Umap_traits<HMONITOR__ *,CGlobalRudeWindowManager::MonitorRudeWindowData,_Uhash_compare<HMONITOR__ *,hash<HMONITOR__ *>,equal_to<HMONITOR__ *> >,allocator<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > >,bool> _Insert<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > >(pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > >);
		unsigned __int64 _Hashval(HMONITOR__ * const &);
		void _Init(unsigned __int64);
		void _Reinsert();
	public:
		_List_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > lower_bound(HMONITOR__ * const &);
		~_Hash<_Umap_traits<HMONITOR__ *,CGlobalRudeWindowManager::MonitorRudeWindowData,_Uhash_compare<HMONITOR__ *,hash<HMONITOR__ *>,equal_to<HMONITOR__ *> >,allocator<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> >,0> >();
	};

	class _Hash<_Umap_traits<HWINEVENTHOOK__ *,GamingOverlayExperienceManager *,_Uhash_compare<HWINEVENTHOOK__ *,hash<HWINEVENTHOOK__ *>,equal_to<HWINEVENTHOOK__ *> >,allocator<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > >,bool> _Insert<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > >(pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > >);
		unsigned __int64 _Hashval(HWINEVENTHOOK__ * const &);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Reinsert();
	public:
		_List_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > >);
		pair<_List_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > >,_List_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > > equal_range(HWINEVENTHOOK__ * const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > >,bool> emplace<HWINEVENTHOOK__ * &,GamingOverlayExperienceManager * &>(HWINEVENTHOOK__ * &,GamingOverlayExperienceManager * &);
		unsigned __int64 erase(HWINEVENTHOOK__ * const &);
	};

	class _Hash<_Umap_traits<Microsoft::WRL::ComPtr<IApplicationView>,BadgeWindowPositionCache::PersistedBadgePosition,_Uhash_compare<Microsoft::WRL::ComPtr<IApplicationView>,hash<Microsoft::WRL::ComPtr<IApplicationView> >,equal_to<Microsoft::WRL::ComPtr<IApplicationView> > >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,bool> _Insert<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > >(pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >);
		unsigned __int64 _Hashval(Microsoft::WRL::ComPtr<IApplicationView> const &);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Insert_bucket(_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,unsigned __int64);
		void _Reinsert();
	public:
		_List_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > lower_bound(Microsoft::WRL::ComPtr<IApplicationView> const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,_List_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > equal_range(Microsoft::WRL::ComPtr<IApplicationView> const &);
	};

	class _Hash<_Umap_traits<__int64,shared_ptr<ViewInfoAuto>,_Uhash_compare<__int64,hash<__int64>,equal_to<__int64> >,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >,bool> _Insert<pair<__int64 const ,shared_ptr<ViewInfoAuto> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > >(pair<__int64 const ,shared_ptr<ViewInfoAuto> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >);
		unsigned __int64 _Hashval(__int64 const &);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Reinsert();
	public:
		_List_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >);
		pair<_List_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >,_List_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > > equal_range(__int64 const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >,bool> emplace<__int64 &,shared_ptr<ViewInfoAuto> &>(__int64 &,shared_ptr<ViewInfoAuto> &);
		unsigned __int64 erase(__int64 const &);
		void swap(_Hash<_Umap_traits<__int64,shared_ptr<ViewInfoAuto>,_Uhash_compare<__int64,hash<__int64>,equal_to<__int64> >,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > >,0> > &);
		~_Hash<_Umap_traits<__int64,shared_ptr<ViewInfoAuto>,_Uhash_compare<__int64,hash<__int64>,equal_to<__int64> >,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > >,0> >();
	};

	class _Hash<_Umap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,BadgeWindowPositionCache::PersistedBadgePosition,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,bool> _Insert<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > >(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >);
		unsigned __int64 _Hashval(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Insert_bucket(_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,unsigned __int64);
		void _Reinsert();
	public:
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > lower_bound(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
	};

	class _Hash<_Umap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IWICBitmap>,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > >,bool> _Insert<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > >(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > >);
		unsigned __int64 _Hashval(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Reinsert();
	public:
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > lower_bound(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > >,bool> emplace<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &,Microsoft::WRL::ComPtr<IWICBitmap> &>(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &,Microsoft::WRL::ComPtr<IWICBitmap> &);
		~_Hash<_Umap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IWICBitmap>,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > >,0> >();
	};

	class _Hash<_Umap_traits<unsigned __int64,GamingOverlayExperienceManager::TargetWindowContext,_Uhash_compare<unsigned __int64,hash<unsigned __int64>,equal_to<unsigned __int64> >,allocator<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > >,bool> _Insert<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > >(pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > >);
		unsigned __int64 _Hashval(unsigned __int64 const &);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Reinsert();
	public:
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > >);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > >,_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > > equal_range(unsigned __int64 const &);
		unsigned __int64 erase(unsigned __int64 const &);
		~_Hash<_Umap_traits<unsigned __int64,GamingOverlayExperienceManager::TargetWindowContext,_Uhash_compare<unsigned __int64,hash<unsigned __int64>,equal_to<unsigned __int64> >,allocator<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> >,0> >();
	};

	class _Hash<_Umap_traits<unsigned long,EventRegistrationToken,_Uhash_compare<unsigned long,hash<unsigned long>,equal_to<unsigned long> >,allocator<pair<unsigned long const ,EventRegistrationToken> >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > >,bool> _Insert<pair<unsigned long const ,EventRegistrationToken> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > >(pair<unsigned long const ,EventRegistrationToken> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > >);
		unsigned __int64 _Hashval(unsigned long const &);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Reinsert();
	public:
		_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > >);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > >,_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > > equal_range(unsigned long const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > >,bool> emplace<unsigned long &,EventRegistrationToken &>(unsigned long &,EventRegistrationToken &);
		unsigned __int64 erase(unsigned long const &);
	};

	class _Hash<_Umap_traits<unsigned long,shared_ptr<CCrashDetector>,_Uhash_compare<unsigned long,hash<unsigned long>,equal_to<unsigned long> >,allocator<pair<unsigned long const ,shared_ptr<CCrashDetector> > >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > >,bool> _Insert<pair<unsigned long const ,shared_ptr<CCrashDetector> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > >(pair<unsigned long const ,shared_ptr<CCrashDetector> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > >);
		unsigned __int64 _Hashval(unsigned long const &);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Reinsert();
	public:
		_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > lower_bound(unsigned long const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > >,_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > > equal_range(unsigned long const &);
		~_Hash<_Umap_traits<unsigned long,shared_ptr<CCrashDetector>,_Uhash_compare<unsigned long,hash<unsigned long>,equal_to<unsigned long> >,allocator<pair<unsigned long const ,shared_ptr<CCrashDetector> > >,0> >();
	};

	class _Hash<_Uset_traits<HWND__ *,_Uhash_compare<HWND__ *,hash<HWND__ *>,equal_to<HWND__ *> >,allocator<HWND__ *>,0> >
	{
	protected:
		_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> _End(unsigned __int64);
		pair<_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > >,bool> _Insert<HWND__ * const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> >(HWND__ * const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0>);
		pair<_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > >,bool> _Insert<HWND__ * const &,_Nil>(HWND__ * const &,_Nil);
		unsigned __int64 _Hashval(HWND__ * const &);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Reinsert();
	public:
		_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > > erase(_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > >);
		_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > > erase(_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > >,_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > >);
		_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > > lower_bound(HWND__ * const &);
		pair<_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > >,_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > > > equal_range(HWND__ * const &);
		unsigned __int64 count(HWND__ * const &);
		unsigned __int64 erase(HWND__ * const &);
		~_Hash<_Uset_traits<HWND__ *,_Uhash_compare<HWND__ *,hash<HWND__ *>,equal_to<HWND__ *> >,allocator<HWND__ *>,0> >();
	};

	class _Hash<_Uset_traits<Microsoft::WRL::ComPtr<IImmersiveMonitor>,_Uhash_compare<Microsoft::WRL::ComPtr<IImmersiveMonitor>,hash<Microsoft::WRL::ComPtr<IImmersiveMonitor> >,equal_to<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,allocator<Microsoft::WRL::ComPtr<IImmersiveMonitor> >,0> >
	{
	protected:
		_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> _End(unsigned __int64);
		pair<_List_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > >,bool> _Insert<Microsoft::WRL::ComPtr<IImmersiveMonitor> const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> >(Microsoft::WRL::ComPtr<IImmersiveMonitor> const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0>);
		unsigned __int64 _Hashval(Microsoft::WRL::ComPtr<IImmersiveMonitor> const &);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Reinsert();
	public:
		_List_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > > erase(_List_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > >);
		pair<_List_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > >,_List_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > > > equal_range(Microsoft::WRL::ComPtr<IImmersiveMonitor> const &);
		unsigned __int64 erase(Microsoft::WRL::ComPtr<IImmersiveMonitor> const &);
		~_Hash<_Uset_traits<Microsoft::WRL::ComPtr<IImmersiveMonitor>,_Uhash_compare<Microsoft::WRL::ComPtr<IImmersiveMonitor>,hash<Microsoft::WRL::ComPtr<IImmersiveMonitor> >,equal_to<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,allocator<Microsoft::WRL::ComPtr<IImmersiveMonitor> >,0> >();
	};

	struct _Init_locks
	{
		_Init_locks();
		~_Init_locks();
	};

	struct _Iostream_error_category
	{
		virtual basic_string<char,char_traits<char>,allocator<char> > message(int);
		virtual char const * name();
	};

	struct _Iterator_base12
	{
		~_Iterator_base12();
	};

	struct _List_alloc<0,_List_base_types<HWND__ *,allocator<HWND__ *> > >
	{
		_List_node<HWND__ *,void *> * _Buynode0(_List_node<HWND__ *,void *> *,_List_node<HWND__ *,void *> *);
		~_List_alloc<0,_List_base_types<HWND__ *,allocator<HWND__ *> > >();
	};

	struct _List_alloc<0,_List_base_types<KnownGameList::GMRelatedProcess,allocator<KnownGameList::GMRelatedProcess> > >
	{
		_List_node<KnownGameList::GMRelatedProcess,void *> * _Buynode0(_List_node<KnownGameList::GMRelatedProcess,void *> *,_List_node<KnownGameList::GMRelatedProcess,void *> *);
		~_List_alloc<0,_List_base_types<KnownGameList::GMRelatedProcess,allocator<KnownGameList::GMRelatedProcess> > >();
	};

	struct _List_alloc<0,_List_base_types<Microsoft::WRL::ComPtr<FullscreenEventListener>,allocator<Microsoft::WRL::ComPtr<FullscreenEventListener> > > >
	{
		_List_node<Microsoft::WRL::ComPtr<FullscreenEventListener>,void *> * _Buynode0(_List_node<Microsoft::WRL::ComPtr<FullscreenEventListener>,void *> *,_List_node<Microsoft::WRL::ComPtr<FullscreenEventListener>,void *> *);
		~_List_alloc<0,_List_base_types<Microsoft::WRL::ComPtr<FullscreenEventListener>,allocator<Microsoft::WRL::ComPtr<FullscreenEventListener> > > >();
	};

	struct _List_alloc<0,_List_base_types<Microsoft::WRL::ComPtr<IImmersiveMonitor>,allocator<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > >
	{
		_List_node<Microsoft::WRL::ComPtr<IImmersiveMonitor>,void *> * _Buynode0(_List_node<Microsoft::WRL::ComPtr<IImmersiveMonitor>,void *> *,_List_node<Microsoft::WRL::ComPtr<IImmersiveMonitor>,void *> *);
		~_List_alloc<0,_List_base_types<Microsoft::WRL::ComPtr<IImmersiveMonitor>,allocator<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > >();
	};

	struct _List_alloc<0,_List_base_types<ViewHWNDPair,allocator<ViewHWNDPair> > >
	{
		_List_node<ViewHWNDPair,void *> * _Buynode0(_List_node<ViewHWNDPair,void *> *,_List_node<ViewHWNDPair,void *> *);
		~_List_alloc<0,_List_base_types<ViewHWNDPair,allocator<ViewHWNDPair> > >();
	};

	struct _List_alloc<0,_List_base_types<ViewSizeConstraintsPair,allocator<ViewSizeConstraintsPair> > >
	{
		_List_node<ViewSizeConstraintsPair,void *> * _Buynode0(_List_node<ViewSizeConstraintsPair,void *> *,_List_node<ViewSizeConstraintsPair,void *> *);
		~_List_alloc<0,_List_base_types<ViewSizeConstraintsPair,allocator<ViewSizeConstraintsPair> > >();
	};

	struct _List_alloc<0,_List_base_types<ViewSizePair,allocator<ViewSizePair> > >
	{
		_List_node<ViewSizePair,void *> * _Buynode0(_List_node<ViewSizePair,void *> *,_List_node<ViewSizePair,void *> *);
		~_List_alloc<0,_List_base_types<ViewSizePair,allocator<ViewSizePair> > >();
	};

	struct _List_alloc<0,_List_base_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData>,allocator<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > >
	{
		_List_node<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData>,void *> * _Buynode0(_List_node<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData>,void *> *,_List_node<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData>,void *> *);
		~_List_alloc<0,_List_base_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData>,allocator<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > >();
	};

	struct _List_alloc<0,_List_base_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *>,allocator<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > >
	{
		_List_node<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *>,void *> * _Buynode0(_List_node<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *>,void *> *,_List_node<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *>,void *> *);
	};

	struct _List_alloc<0,_List_base_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition>,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >
	{
		_List_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition>,void *> * _Buynode0(_List_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition>,void *> *,_List_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition>,void *> *);
	};

	struct _List_alloc<0,_List_base_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >
	{
		_List_node<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,void *> * _Buynode0(_List_node<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,void *> *,_List_node<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,void *> *);
		~_List_alloc<0,_List_base_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >();
	};

	struct _List_alloc<0,_List_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition>,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >
	{
		_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition>,void *> * _Buynode0(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition>,void *> *,_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition>,void *> *);
	};

	struct _List_alloc<0,_List_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > >
	{
		_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,void *> * _Buynode0(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,void *> *,_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,void *> *);
		~_List_alloc<0,_List_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > >();
	};

	struct _List_alloc<0,_List_base_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext>,allocator<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > >
	{
		_List_node<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext>,void *> * _Buynode0(_List_node<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext>,void *> *,_List_node<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext>,void *> *);
		~_List_alloc<0,_List_base_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext>,allocator<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > >();
	};

	struct _List_alloc<0,_List_base_types<pair<unsigned long const ,EventRegistrationToken>,allocator<pair<unsigned long const ,EventRegistrationToken> > > >
	{
		_List_node<pair<unsigned long const ,EventRegistrationToken>,void *> * _Buynode0(_List_node<pair<unsigned long const ,EventRegistrationToken>,void *> *,_List_node<pair<unsigned long const ,EventRegistrationToken>,void *> *);
	};

	struct _List_alloc<0,_List_base_types<pair<unsigned long const ,shared_ptr<CCrashDetector> >,allocator<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > >
	{
		_List_node<pair<unsigned long const ,shared_ptr<CCrashDetector> >,void *> * _Buynode0(_List_node<pair<unsigned long const ,shared_ptr<CCrashDetector> >,void *> *,_List_node<pair<unsigned long const ,shared_ptr<CCrashDetector> >,void *> *);
		~_List_alloc<0,_List_base_types<pair<unsigned long const ,shared_ptr<CCrashDetector> >,allocator<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > >();
	};

	struct _List_alloc<0,_List_base_types<pplx::details::_CancellationTokenRegistration *,allocator<pplx::details::_CancellationTokenRegistration *> > >
	{
		_List_node<pplx::details::_CancellationTokenRegistration *,void *> * _Buynode0(_List_node<pplx::details::_CancellationTokenRegistration *,void *> *,_List_node<pplx::details::_CancellationTokenRegistration *,void *> *);
	};

	struct _List_alloc<0,_List_base_types<shared_ptr<CCrashDetector>,allocator<shared_ptr<CCrashDetector> > > >
	{
		_List_node<shared_ptr<CCrashDetector>,void *> * _Buynode0(_List_node<shared_ptr<CCrashDetector>,void *> *,_List_node<shared_ptr<CCrashDetector>,void *> *);
		~_List_alloc<0,_List_base_types<shared_ptr<CCrashDetector>,allocator<shared_ptr<CCrashDetector> > > >();
	};

	struct _List_buy<HWND__ *,allocator<HWND__ *> >
	{
		_List_node<HWND__ *,void *> * _Buynode<HWND__ * const &>(_List_node<HWND__ *,void *> *,_List_node<HWND__ *,void *> *,HWND__ * const &);
		~_List_buy<HWND__ *,allocator<HWND__ *> >();
	};

	struct _List_buy<KnownGameList::GMRelatedProcess,allocator<KnownGameList::GMRelatedProcess> >
	{
		_List_node<KnownGameList::GMRelatedProcess,void *> * _Buynode<KnownGameList::GMRelatedProcess const &>(_List_node<KnownGameList::GMRelatedProcess,void *> *,_List_node<KnownGameList::GMRelatedProcess,void *> *,KnownGameList::GMRelatedProcess const &);
		~_List_buy<KnownGameList::GMRelatedProcess,allocator<KnownGameList::GMRelatedProcess> >();
	};

	struct _List_buy<Microsoft::WRL::ComPtr<FullscreenEventListener>,allocator<Microsoft::WRL::ComPtr<FullscreenEventListener> > >
	{
		_List_node<Microsoft::WRL::ComPtr<FullscreenEventListener>,void *> * _Buynode<Microsoft::WRL::ComPtr<FullscreenEventListener> const &>(_List_node<Microsoft::WRL::ComPtr<FullscreenEventListener>,void *> *,_List_node<Microsoft::WRL::ComPtr<FullscreenEventListener>,void *> *,Microsoft::WRL::ComPtr<FullscreenEventListener> const &);
		~_List_buy<Microsoft::WRL::ComPtr<FullscreenEventListener>,allocator<Microsoft::WRL::ComPtr<FullscreenEventListener> > >();
	};

	struct _List_buy<Microsoft::WRL::ComPtr<IImmersiveMonitor>,allocator<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >
	{
		~_List_buy<Microsoft::WRL::ComPtr<IImmersiveMonitor>,allocator<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >();
	};

	struct _List_buy<ViewHWNDPair,allocator<ViewHWNDPair> >
	{
		~_List_buy<ViewHWNDPair,allocator<ViewHWNDPair> >();
	};

	struct _List_buy<ViewSizeConstraintsPair,allocator<ViewSizeConstraintsPair> >
	{
		~_List_buy<ViewSizeConstraintsPair,allocator<ViewSizeConstraintsPair> >();
	};

	struct _List_buy<ViewSizePair,allocator<ViewSizePair> >
	{
		~_List_buy<ViewSizePair,allocator<ViewSizePair> >();
	};

	struct _List_buy<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData>,allocator<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > >
	{
		~_List_buy<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData>,allocator<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > >();
	};

	struct _List_buy<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *>,allocator<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > >
	{
		_List_node<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *>,void *> * _Buynode<HWINEVENTHOOK__ * &,GamingOverlayExperienceManager * &>(_List_node<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *>,void *> *,_List_node<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *>,void *> *,HWINEVENTHOOK__ * &,GamingOverlayExperienceManager * &);
	};

	struct _List_buy<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > >
	{
		_List_node<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,void *> * _Buynode<__int64 &,shared_ptr<ViewInfoAuto> &>(_List_node<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,void *> *,_List_node<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,void *> *,__int64 &,shared_ptr<ViewInfoAuto> &);
		~_List_buy<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > >();
	};

	struct _List_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > >
	{
		_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,void *> * _Buynode<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &,Microsoft::WRL::ComPtr<IWICBitmap> &>(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,void *> *,_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,void *> *,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &,Microsoft::WRL::ComPtr<IWICBitmap> &);
		~_List_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > >();
	};

	struct _List_buy<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext>,allocator<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > >
	{
		~_List_buy<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext>,allocator<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > >();
	};

	struct _List_buy<pair<unsigned long const ,EventRegistrationToken>,allocator<pair<unsigned long const ,EventRegistrationToken> > >
	{
		_List_node<pair<unsigned long const ,EventRegistrationToken>,void *> * _Buynode<unsigned long &,EventRegistrationToken &>(_List_node<pair<unsigned long const ,EventRegistrationToken>,void *> *,_List_node<pair<unsigned long const ,EventRegistrationToken>,void *> *,unsigned long &,EventRegistrationToken &);
	};

	struct _List_buy<pair<unsigned long const ,shared_ptr<CCrashDetector> >,allocator<pair<unsigned long const ,shared_ptr<CCrashDetector> > > >
	{
		~_List_buy<pair<unsigned long const ,shared_ptr<CCrashDetector> >,allocator<pair<unsigned long const ,shared_ptr<CCrashDetector> > > >();
	};

	struct _List_buy<pplx::details::_CancellationTokenRegistration *,allocator<pplx::details::_CancellationTokenRegistration *> >
	{
		_List_node<pplx::details::_CancellationTokenRegistration *,void *> * _Buynode<pplx::details::_CancellationTokenRegistration * const &>(_List_node<pplx::details::_CancellationTokenRegistration *,void *> *,_List_node<pplx::details::_CancellationTokenRegistration *,void *> *,pplx::details::_CancellationTokenRegistration * const &);
	};

	struct _List_buy<shared_ptr<CCrashDetector>,allocator<shared_ptr<CCrashDetector> > >
	{
		_List_node<shared_ptr<CCrashDetector>,void *> * _Buynode<shared_ptr<CCrashDetector> const &>(_List_node<shared_ptr<CCrashDetector>,void *> *,_List_node<shared_ptr<CCrashDetector>,void *> *,shared_ptr<CCrashDetector> const &);
		~_List_buy<shared_ptr<CCrashDetector>,allocator<shared_ptr<CCrashDetector> > >();
	};

	struct _Locinfo
	{
		_Ctypevec _Getctype();
		_Cvtvec _Getcvt();
		_Locinfo(char const *);
		static void _Locinfo_ctor(_Locinfo *,char const *);
		static void _Locinfo_dtor(_Locinfo *);
		~_Locinfo();
	};

	struct _Lockit
	{
		_Lockit(int);
		~_Lockit();
	};

	struct _Ptr_base<BroadcastDVRActiveAppInfo>
	{
		void _Reset0(BroadcastDVRActiveAppInfo *,_Ref_count_base *);
	};

	struct _Ptr_base<CCrashDetector>
	{
		void _Reset0(CCrashDetector *,_Ref_count_base *);
	};

	struct _Ptr_base<Concurrency::details::_ExceptionHolder>
	{
		void _Reset0(Concurrency::details::_ExceptionHolder *,_Ref_count_base *);
	};

	struct _Ptr_base<Concurrency::details::_Task_impl<bool> >
	{
		void _Reset0(Concurrency::details::_Task_impl<bool> *,_Ref_count_base *);
	};

	struct _Ptr_base<Concurrency::details::_Task_impl<long> >
	{
		void _Reset0(Concurrency::details::_Task_impl<long> *,_Ref_count_base *);
	};

	struct _Ptr_base<Concurrency::details::_Task_impl<unsigned char> >
	{
		void _Reset0(Concurrency::details::_Task_impl<unsigned char> *,_Ref_count_base *);
	};

	struct _Ptr_base<HostedApplicationExperienceManager::HostedApplicationActivationContext>
	{
		void _Reset0(HostedApplicationExperienceManager::HostedApplicationActivationContext *,_Ref_count_base *);
	};

	struct _Ptr_base<InputGlobalToolHandler>
	{
		void _Reset0(InputGlobalToolHandler *,_Ref_count_base *);
	};

	struct _Ptr_base<MenuSection>
	{
		void _Reset0(MenuSection *,_Ref_count_base *);
	};

	struct _Ptr_base<NotesManager::ViewInfo>
	{
		void _Reset0(NotesManager::ViewInfo *,_Ref_count_base *);
	};

	struct _Ptr_base<SplashScreen::CBasicSplashScreenLayout>
	{
		void _Reset0(SplashScreen::CBasicSplashScreenLayout *,_Ref_count_base *);
	};

	struct _Ptr_base<SplashScreen::CSplashScreenConfiguration>
	{
		void _Reset0(SplashScreen::CSplashScreenConfiguration *,_Ref_count_base *);
	};

	struct _Ptr_base<ViewInfoAuto>
	{
		void _Reset0(ViewInfoAuto *,_Ref_count_base *);
	};

	struct _Ptr_base<char const >
	{
		void _Reset0(char const *,_Ref_count_base *);
	};

	struct _Ptr_base<wil::srwlock>
	{
		void _Reset0(wil::srwlock *,_Ref_count_base *);
	};

	class _Ref_count<BroadcastDVRActiveAppInfo>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count<Concurrency::details::_Task_impl<long> >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count<Concurrency::details::_Task_impl<unsigned char> >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count<HostedApplicationExperienceManager::HostedApplicationActivationContext>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count<ViewInfoAuto>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count<wil::AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,wil::err_returncode_policy> >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	struct _Ref_count_base
	{
		virtual void * _Get_deleter(type_info const &);
		virtual ~_Ref_count_base();
		void _Decref();
	};

	class _Ref_count_del<char const ,wil::cloud_store::BufferDeleter>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_del<char const ,wil::cloud_store::BufferDeleter>(char const *,wil::cloud_store::BufferDeleter);
		virtual void * _Get_deleter(type_info const &);
	};

	class _Ref_count_obj<BroadcastDVRActiveAppInfo>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<CCrashDetector>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<Concurrency::details::_ExceptionHolder>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<Concurrency::details::_Task_impl<bool> >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<Concurrency::details::_Task_impl<bool> ><pplx::details::_CancellationTokenState * &,Concurrency::scheduler_ptr &>(pplx::details::_CancellationTokenState * &,Concurrency::scheduler_ptr &);
	};

	class _Ref_count_obj<Concurrency::details::_Task_impl<long> >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<Concurrency::details::_Task_impl<long> ><pplx::details::_CancellationTokenState * &,Concurrency::scheduler_ptr &>(pplx::details::_CancellationTokenState * &,Concurrency::scheduler_ptr &);
	};

	class _Ref_count_obj<Concurrency::details::_Task_impl<unsigned char> >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<Concurrency::details::_Task_impl<unsigned char> ><pplx::details::_CancellationTokenState * &,Concurrency::scheduler_ptr &>(pplx::details::_CancellationTokenState * &,Concurrency::scheduler_ptr &);
	};

	class _Ref_count_obj<HostedApplicationExperienceManager::HostedApplicationActivationContext>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<InputGlobalToolHandler>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<MenuSection>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<MenuSection>();
		_Ref_count_obj<MenuSection><HWND__ * &>(HWND__ * &);
	};

	class _Ref_count_obj<NotesManager::ViewInfo>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		_Ref_count_obj<NotesManager::ViewInfo><Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * &,Microsoft::WRL::ComPtr<IApplicationFrameWrapper> &>(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * &,Microsoft::WRL::ComPtr<IApplicationFrameWrapper> &);
	};

	class _Ref_count_obj<SplashScreen::CBasicSplashScreenLayout>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<SplashScreen::CSplashScreenConfiguration>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<pplx::details::windows_scheduler>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<wil::details::shared_cloud_store_state>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<wil::srwlock>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	struct _System_error_category
	{
		virtual basic_string<char,char_traits<char>,allocator<char> > message(int);
		virtual char const * name();
		virtual error_condition default_error_condition(int);
	};

	class _Tree<_Tmap_traits<HWND__ *,InputDialCustomizedAppToolsInfo,less<HWND__ *>,allocator<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > > > _Insert_at<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> &,_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *>(bool,_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *,pair<HWND__ * const,InputDialCustomizedAppToolsInfo> &,_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > > > _Insert_hint<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> &,_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > > >,pair<HWND__ * const,InputDialCustomizedAppToolsInfo> &,_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > > >,bool> _Insert_nohint<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> &,_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *>(bool,pair<HWND__ * const,InputDialCustomizedAppToolsInfo> &,_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *);
		void _Destroy_if_not_nil(_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *);
		void _Erase(_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *);
		void _Lrotate(_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *);
		void _Rrotate(_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > > > find(HWND__ * const &);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > > > lower_bound(HWND__ * const &);
		void clear();
	};

	class _Tree<_Tmap_traits<HWND__ *,unsigned __int64,less<HWND__ *>,allocator<pair<HWND__ * const,unsigned __int64> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > > _Insert_at<pair<HWND__ * const,unsigned __int64> &,_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *>(bool,_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *,pair<HWND__ * const,unsigned __int64> &,_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > > _Insert_hint<pair<HWND__ * const,unsigned __int64> &,_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > >,pair<HWND__ * const,unsigned __int64> &,_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > >,bool> _Insert_nohint<pair<HWND__ * const,unsigned __int64> &,_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *>(bool,pair<HWND__ * const,unsigned __int64> &,_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *);
		void _Erase(_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *);
		void _Lrotate(_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *);
		void _Rrotate(_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > > find(HWND__ * const &);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > > > lower_bound(HWND__ * const &);
		unsigned __int64 erase(HWND__ * const &);
		~_Tree<_Tmap_traits<HWND__ *,unsigned __int64,less<HWND__ *>,allocator<pair<HWND__ * const,unsigned __int64> >,0> >();
	};

	class _Tree<_Tmap_traits<HWND__ *,unsigned int,less<HWND__ *>,allocator<pair<HWND__ * const,unsigned int> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned int> > > > _Insert_at<pair<HWND__ * const,unsigned int> &,_Tree_node<pair<HWND__ * const,unsigned int>,void *> *>(bool,_Tree_node<pair<HWND__ * const,unsigned int>,void *> *,pair<HWND__ * const,unsigned int> &,_Tree_node<pair<HWND__ * const,unsigned int>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned int> > > > _Insert_hint<pair<HWND__ * const,unsigned int> &,_Tree_node<pair<HWND__ * const,unsigned int>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned int> > > >,pair<HWND__ * const,unsigned int> &,_Tree_node<pair<HWND__ * const,unsigned int>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned int> > > >,bool> _Insert_nohint<pair<HWND__ * const,unsigned int> &,_Tree_node<pair<HWND__ * const,unsigned int>,void *> *>(bool,pair<HWND__ * const,unsigned int> &,_Tree_node<pair<HWND__ * const,unsigned int>,void *> *);
		void _Erase(_Tree_node<pair<HWND__ * const,unsigned int>,void *> *);
		void _Lrotate(_Tree_node<pair<HWND__ * const,unsigned int>,void *> *);
		void _Rrotate(_Tree_node<pair<HWND__ * const,unsigned int>,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned int> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned int> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned int> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned int> > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned int> > > >);
		void clear();
	};

	class _Tree<_Tmap_traits<HWND__ *,vector<unsigned int,allocator<unsigned int> >,less<HWND__ *>,allocator<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > > > _Insert_at<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > &,_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *>(bool,_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *,pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > &,_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > > > _Insert_hint<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > &,_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > > >,pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > &,_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > > >,bool> _Insert_nohint<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > &,_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *>(bool,pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > &,_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *);
		void _Destroy_if_not_nil(_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *);
		void _Erase(_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *);
		void _Lrotate(_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *);
		void _Rrotate(_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > > >);
	};

	class _Tree<_Tmap_traits<Microsoft::WRL::ComPtr<IApplicationView>,shared_ptr<BroadcastDVRActiveAppInfo>,less<Microsoft::WRL::ComPtr<IApplicationView> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > > > _Insert_at<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> *>(bool,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> *,pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > > >,bool> _Insert_nohint<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> *>(bool,pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > &,_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> *);
		void _Destroy_if_not_nil(_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> *);
		void _Erase(_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> *);
		void _Lrotate(_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> *);
		void _Rrotate(_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > > > find(Microsoft::WRL::ComPtr<IApplicationView> const &);
		void clear();
		~_Tree<_Tmap_traits<Microsoft::WRL::ComPtr<IApplicationView>,shared_ptr<BroadcastDVRActiveAppInfo>,less<Microsoft::WRL::ComPtr<IApplicationView> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > >,0> >();
	};

	class _Tree<_Tmap_traits<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,EventRegistrationToken,less<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> >,allocator<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > > > _Insert_at<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> &,_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> *>(bool,_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> *,pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> &,_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > > >,bool> _Insert_nohint<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> &,_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> *>(bool,pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> &,_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> *);
		void _Destroy_if_not_nil(_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> *);
		void _Erase(_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> *);
		void _Lrotate(_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> *);
		void _Rrotate(_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > > > find(Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const &);
		~_Tree<_Tmap_traits<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,EventRegistrationToken,less<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> >,allocator<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> >,0> >();
	};

	class _Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > > _Insert_at<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *>(bool,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *,pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > > _Insert_hint<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > >,pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Copy_nodes<integral_constant<bool,0> >(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *,integral_constant<bool,0>);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > >,bool> _Insert_nohint<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *>(bool,pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		void _Copy<integral_constant<bool,0> >(_Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> > const &,integral_constant<bool,0>);
		void _Destroy_if_not_nil(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		void _Erase(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		void _Lrotate(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		void _Rrotate(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		void _Tidy();
	public:
		_Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> > & operator=(_Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> > const &);
		_Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >(_Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> > const &,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > const &);
		void clear();
		~_Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >();
	};

	class _Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IAudioSessionManager2>,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > > _Insert_at<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *>(bool,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > > _Insert_hint<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > >,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > >,bool> _Insert_nohint<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *>(bool,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *);
		void _Destroy_if_not_nil(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *);
		void _Erase(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *);
		void _Lrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *);
		void _Rrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > > find(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > > lower_bound(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		~_Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IAudioSessionManager2>,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > >,0> >();
	};

	class _Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,int,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > > _Insert_at<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *>(bool,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > > _Insert_hint<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > >,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > >,_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > > > _Eqrange(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > >,bool> _Insert_nohint<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *>(bool,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *);
		void _Destroy_if_not_nil(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *);
		void _Erase(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *);
		void _Lrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *);
		void _Rrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > > find(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > > lower_bound(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		unsigned __int64 erase(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
	};

	class _Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> >,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > >,0> >
	{
	protected:
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> * _Copy_nodes<integral_constant<bool,0> >(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> *,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> *,integral_constant<bool,0>);
		void _Copy<integral_constant<bool,0> >(_Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> >,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > >,0> > const &,integral_constant<bool,0>);
		void _Erase(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> *);
		void _Lrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> *);
		void _Rrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > > >);
		void clear();
		~_Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> >,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > >,0> >();
	};

	class _Tree<_Tmap_traits<unsigned long,Microsoft::WRL::ComPtr<IHostedApplication>,less<unsigned long>,allocator<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > > _Insert_at<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *>(bool,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *,pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > > _Insert_hint<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > >,pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > >,bool> _Insert_nohint<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *>(bool,pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > &,_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *);
		void _Destroy_if_not_nil(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *);
		void _Erase(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > > lower_bound(unsigned long const &);
		unsigned __int64 erase(unsigned long const &);
		void clear();
	};

	class _Tree<_Tmap_traits<unsigned long,unique_ptr<SmartCookie,default_delete<SmartCookie> >,less<unsigned long>,allocator<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > > > _Insert_at<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > &,_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> *>(bool,_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> *,pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > &,_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > > >,bool> _Insert_nohint<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > &,_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> *>(bool,pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > &,_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> *);
		void _Destroy_if_not_nil(_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> *);
		void _Erase(_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > > >);
		unsigned __int64 erase(unsigned long const &);
		void clear();
		~_Tree<_Tmap_traits<unsigned long,unique_ptr<SmartCookie,default_delete<SmartCookie> >,less<unsigned long>,allocator<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > >,0> >();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,allocator<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > > >
	{
		_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> * _Buyheadnode();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<HWND__ * const,unsigned __int64>,allocator<pair<HWND__ * const,unsigned __int64> > > >
	{
		_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> * _Buyheadnode();
		~_Tree_alloc<0,_Tree_base_types<pair<HWND__ * const,unsigned __int64>,allocator<pair<HWND__ * const,unsigned __int64> > > >();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<HWND__ * const,unsigned int>,allocator<pair<HWND__ * const,unsigned int> > > >
	{
		_Tree_node<pair<HWND__ * const,unsigned int>,void *> * _Buyheadnode();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,allocator<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > > >
	{
		_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> * _Buyheadnode();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > > >
	{
		_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> * _Buyheadnode();
		~_Tree_alloc<0,_Tree_base_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > > >();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,allocator<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > > >
	{
		_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> * _Buyheadnode();
		~_Tree_alloc<0,_Tree_base_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,allocator<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > > >();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > >
	{
		_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Buyheadnode();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > >
	{
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> * _Buyheadnode();
		~_Tree_alloc<0,_Tree_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > > >();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > > >
	{
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> * _Buyheadnode();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > > >
	{
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> * _Buyheadnode();
		~_Tree_alloc<0,_Tree_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > > >();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,allocator<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > > >
	{
		_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> * _Buyheadnode();
	};

	struct _Tree_alloc<0,_Tree_base_types<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,allocator<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > > >
	{
		_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> * _Buyheadnode();
		~_Tree_alloc<0,_Tree_base_types<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,allocator<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > > >();
	};

	struct _Tree_buy<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,allocator<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > >
	{
		_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> * _Buynode0();
	};

	struct _Tree_buy<pair<HWND__ * const,unsigned __int64>,allocator<pair<HWND__ * const,unsigned __int64> > >
	{
		_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> * _Buynode0();
		~_Tree_buy<pair<HWND__ * const,unsigned __int64>,allocator<pair<HWND__ * const,unsigned __int64> > >();
	};

	struct _Tree_buy<pair<HWND__ * const,unsigned int>,allocator<pair<HWND__ * const,unsigned int> > >
	{
		_Tree_node<pair<HWND__ * const,unsigned int>,void *> * _Buynode0();
	};

	struct _Tree_buy<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,allocator<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > >
	{
		_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> * _Buynode0();
	};

	struct _Tree_buy<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > >
	{
		_Tree_node<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,void *> * _Buynode0();
		~_Tree_buy<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > >();
	};

	struct _Tree_buy<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,allocator<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > >
	{
		_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> * _Buynode0();
		_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> * _Buynode<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> &,EventRegistrationToken &>(Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> &,EventRegistrationToken &);
		~_Tree_buy<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,allocator<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > >();
	};

	struct _Tree_buy<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >
	{
		_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Buynode0();
		_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Buynode<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &>(pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &);
		_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Buynode<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > &>(pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > &);
	};

	struct _Tree_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > >
	{
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> * _Buynode0();
		~_Tree_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > >();
	};

	struct _Tree_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > >
	{
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> * _Buynode0();
	};

	struct _Tree_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > >
	{
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> * _Buynode0();
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> * _Buynode<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > &>(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > &);
		~_Tree_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > >();
	};

	struct _Tree_buy<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,allocator<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > >
	{
		_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> * _Buynode0();
	};

	struct _Tree_buy<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,allocator<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > >
	{
		_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> * _Buynode0();
		~_Tree_buy<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,allocator<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > >();
	};

	struct _Tree_comp<0,_Tmap_traits<HWND__ *,unsigned __int64,less<HWND__ *>,allocator<pair<HWND__ * const,unsigned __int64> >,0> >
	{
		~_Tree_comp<0,_Tmap_traits<HWND__ *,unsigned __int64,less<HWND__ *>,allocator<pair<HWND__ * const,unsigned __int64> >,0> >();
	};

	struct _Tree_comp<0,_Tmap_traits<Microsoft::WRL::ComPtr<IApplicationView>,shared_ptr<BroadcastDVRActiveAppInfo>,less<Microsoft::WRL::ComPtr<IApplicationView> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > >,0> >
	{
		~_Tree_comp<0,_Tmap_traits<Microsoft::WRL::ComPtr<IApplicationView>,shared_ptr<BroadcastDVRActiveAppInfo>,less<Microsoft::WRL::ComPtr<IApplicationView> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > >,0> >();
	};

	struct _Tree_comp<0,_Tmap_traits<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,EventRegistrationToken,less<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> >,allocator<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> >,0> >
	{
		~_Tree_comp<0,_Tmap_traits<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,EventRegistrationToken,less<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> >,allocator<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> >,0> >();
	};

	struct _Tree_comp<0,_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >
	{
		~_Tree_comp<0,_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >();
	};

	struct _Tree_comp<0,_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IAudioSessionManager2>,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > >,0> >
	{
		~_Tree_comp<0,_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IAudioSessionManager2>,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > >,0> >();
	};

	struct _Tree_comp<0,_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> >,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > >,0> >
	{
		~_Tree_comp<0,_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> >,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > >,0> >();
	};

	struct _Tree_comp<0,_Tmap_traits<unsigned long,unique_ptr<SmartCookie,default_delete<SmartCookie> >,less<unsigned long>,allocator<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > >,0> >
	{
		~_Tree_comp<0,_Tmap_traits<unsigned long,unique_ptr<SmartCookie,default_delete<SmartCookie> >,less<unsigned long>,allocator<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > >,0> >();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > >,_Iterator_base0> & operator++();
	};

	struct _Tree_val<_Tree_simple_types<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > >
	{
		static _Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> * _Min(_Tree_node<pair<HWND__ * const,InputDialCustomizedAppToolsInfo>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned __int64> > >
	{
		static _Tree_node<pair<HWND__ * const,unsigned __int64>,void *> * _Min(_Tree_node<pair<HWND__ * const,unsigned __int64>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<HWND__ * const,unsigned int> > >
	{
		static _Tree_node<pair<HWND__ * const,unsigned int>,void *> * _Min(_Tree_node<pair<HWND__ * const,unsigned int>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > >
	{
		static _Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> * _Min(_Tree_node<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > >
	{
		static _Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> * _Min(_Tree_node<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >
	{
		static _Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Max(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		static _Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Min(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > >
	{
		static _Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> * _Min(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > >
	{
		static _Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> * _Min(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int>,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > >
	{
		static _Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> * _Max(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> *);
		static _Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> * _Min(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > >
	{
		static _Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> * _Max(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *);
		static _Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> * _Min(_Tree_node<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> >,void *> *);
	};

	struct _Tree_val<_Tree_simple_types<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > >
	{
		static _Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> * _Min(_Tree_node<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > >,void *> *);
	};

	struct _Wrap_alloc<allocator<_List_node<Microsoft::WRL::ComPtr<FullscreenEventListener>,void *> > >
	{
		void deallocate(_List_node<Microsoft::WRL::ComPtr<FullscreenEventListener>,void *> *,unsigned __int64);
	};

	struct _Wrap_alloc<sfl::StlAllocator<bond::detail::stream_allocator<1040>,char> >
	{
		void deallocate(char *,unsigned __int64);
		~_Wrap_alloc<sfl::StlAllocator<bond::detail::stream_allocator<1040>,char> >();
	};

	class _Yarn<char>
	{
		void _Tidy();
	public:
		_Yarn<char> & operator=(char const *);
		~_Yarn<char>();
	};

	struct _Yarn<unsigned short>
	{
		~_Yarn<unsigned short>();
	};

	struct bad_alloc
	{
		bad_alloc();
		bad_alloc(bad_alloc const &);
		virtual ~bad_alloc();
	};

	struct bad_function_call
	{
		bad_function_call(bad_function_call const &);
		bad_function_call(char const *);
		virtual char const * what();
		virtual ~bad_function_call();
	};

	class basic_ios<unsigned short,char_traits<unsigned short> >
	{
	protected:
		void init(basic_streambuf<unsigned short,char_traits<unsigned short> > *,bool);
	public:
		virtual void _Add_vtordisp1();
		virtual void _Add_vtordisp2();
		virtual ~basic_ios<unsigned short,char_traits<unsigned short> >();
	};

	struct basic_iostream<unsigned short,char_traits<unsigned short> >
	{
		basic_iostream<unsigned short,char_traits<unsigned short> >(basic_streambuf<unsigned short,char_traits<unsigned short> > *);
		virtual ~basic_iostream<unsigned short,char_traits<unsigned short> >();
	};

	struct basic_istream<unsigned short,char_traits<unsigned short> >
	{
		virtual void _Add_vtordisp1();
		virtual ~basic_istream<unsigned short,char_traits<unsigned short> >();
	};

	struct basic_ostream<unsigned short,char_traits<unsigned short> >
	{
		struct _Sentry_base
		{
			~_Sentry_base();
		};

		struct sentry
		{
			sentry(basic_ostream<unsigned short,char_traits<unsigned short> > &);
			~sentry();
		};

		basic_ostream<unsigned short,char_traits<unsigned short> > & flush();
		basic_ostream<unsigned short,char_traits<unsigned short> > & operator<<(int);
		basic_ostream<unsigned short,char_traits<unsigned short> > & operator<<(long);
		virtual void _Add_vtordisp2();
		void _Osfx();
	};

	class basic_streambuf<unsigned short,char_traits<unsigned short> >
	{
	protected:
		__int64 _Gnavail();
		__int64 _Pnavail();
		basic_streambuf<unsigned short,char_traits<unsigned short> >();
		virtual __int64 showmanyc();
		virtual __int64 xsgetn(unsigned short *,__int64);
		virtual __int64 xsputn(unsigned short const *,__int64);
		virtual basic_streambuf<unsigned short,char_traits<unsigned short> > * setbuf(unsigned short *,__int64);
		virtual fpos<int> seekoff(__int64,int,int);
		virtual fpos<int> seekpos(fpos<int>,int);
		virtual int sync();
		virtual unsigned short overflow(unsigned short);
		virtual unsigned short pbackfail(unsigned short);
		virtual unsigned short uflow();
		virtual unsigned short underflow();
		virtual void imbue(locale const &);
	public:
		unsigned short sputc(unsigned short);
		virtual void _Lock();
		virtual void _Unlock();
		virtual ~basic_streambuf<unsigned short,char_traits<unsigned short> >();
	};

	struct basic_string<char,char_traits<char>,allocator<char> >
	{
		basic_string<char,char_traits<char>,allocator<char> > & append(unsigned __int64,char);
		basic_string<char,char_traits<char>,allocator<char> > & assign(basic_string<char,char_traits<char>,allocator<char> > const &,unsigned __int64,unsigned __int64);
		basic_string<char,char_traits<char>,allocator<char> > & assign(char const *);
		basic_string<char,char_traits<char>,allocator<char> > & assign(char const *,unsigned __int64);
		basic_string<char,char_traits<char>,allocator<char> > & erase(unsigned __int64);
		basic_string<char,char_traits<char>,allocator<char> > & erase(unsigned __int64,unsigned __int64);
		basic_string<char,char_traits<char>,allocator<char> >(basic_string<char,char_traits<char>,allocator<char> > const &);
		basic_string<char,char_traits<char>,allocator<char> >(char const *);
		bool _Grow(unsigned __int64,bool);
		bool _Inside(char const *);
		void _Chassign(unsigned __int64,unsigned __int64,char);
		void _Copy(unsigned __int64,unsigned __int64);
		void _Swap_bx(basic_string<char,char_traits<char>,allocator<char> > &);
		void _Tidy(bool,unsigned __int64);
		~basic_string<char,char_traits<char>,allocator<char> >();
	};

	struct basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >
	{
		_String_iterator<_String_val<_Simple_types<unsigned short> > > end();
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & append(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,unsigned __int64,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & append(unsigned __int64,unsigned short);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & append(unsigned short const *);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & append(unsigned short const *,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & assign(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,unsigned __int64,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & assign(unsigned __int64,unsigned short);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & assign(unsigned short const *);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & assign(unsigned short const *,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & erase(unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & erase(unsigned __int64,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & insert(unsigned __int64,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,unsigned __int64,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & insert(unsigned __int64,unsigned __int64,unsigned short);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & insert(unsigned __int64,unsigned short const *,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(unsigned __int64,unsigned short);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(unsigned short const *);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(unsigned short const *,unsigned __int64);
		bool _Grow(unsigned __int64,bool);
		bool _Inside(unsigned short const *);
		int compare(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		unsigned short const * c_str();
		void _Chassign(unsigned __int64,unsigned __int64,unsigned short);
		void _Copy(unsigned __int64,unsigned __int64);
		void _Swap_bx(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &);
		void _Tidy(bool,unsigned __int64);
		~basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >();
	};

	class basic_stringbuf<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >
	{
	protected:
		virtual fpos<int> seekoff(__int64,int,int);
		virtual fpos<int> seekpos(fpos<int>,int);
		virtual unsigned short overflow(unsigned short);
		virtual unsigned short pbackfail(unsigned short);
		virtual unsigned short underflow();
	public:
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > str();
		virtual ~basic_stringbuf<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >();
	};

	struct basic_stringstream<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >
	{
		basic_stringstream<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(int);
		virtual ~basic_stringstream<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >();
	};

	struct char_traits<char>
	{
		static unsigned __int64 length(char const *);
	};

	struct char_traits<unsigned short>
	{
		static unsigned __int64 length(unsigned short const *);
	};

	struct codecvt<char,char,int>
	{
		static locale::id id;
	};

	struct codecvt<unsigned short,char,int>
	{
		static locale::id id;
	};

	struct codecvt<wchar_t,char,int>
	{
		static locale::id id;
	};

	struct collate<char>
	{
		static locale::id id;
	};

	struct collate<unsigned short>
	{
		static locale::id id;
	};

	struct collate<wchar_t>
	{
		static locale::id id;
	};

	struct ctype<char>
	{
		static locale::id id;
	};

	class ctype<unsigned short>
	{
	protected:
		char _Donarrow(unsigned short,char);
		unsigned short _Dowiden(char);
		virtual bool do_is(short,unsigned short);
		virtual char const * do_widen(char const *,char const *,unsigned short *);
		virtual char do_narrow(unsigned short,char);
		virtual unsigned short const * do_is(unsigned short const *,unsigned short const *,short *);
		virtual unsigned short const * do_narrow(unsigned short const *,unsigned short const *,char,char *);
		virtual unsigned short const * do_scan_is(short,unsigned short const *,unsigned short const *);
		virtual unsigned short const * do_scan_not(short,unsigned short const *,unsigned short const *);
		virtual unsigned short const * do_tolower(unsigned short *,unsigned short const *);
		virtual unsigned short const * do_toupper(unsigned short *,unsigned short const *);
		virtual unsigned short do_tolower(unsigned short);
		virtual unsigned short do_toupper(unsigned short);
		virtual unsigned short do_widen(char);
		virtual ~ctype<unsigned short>();
		void _Init(_Locinfo const &);
	public:
		ctype<unsigned short>(_Locinfo const &,unsigned __int64);
		static locale::id id;
		static unsigned __int64 _Getcat(locale::facet const * *,locale const *);
	};

	struct ctype<wchar_t>
	{
		static locale::id id;
	};

	class deque<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > >
	{
	protected:
		void _Growmap(unsigned __int64);
		void _Tidy();
	public:
		_Deque_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > > end();
		_Deque_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > > insert<_Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > > >(_Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >,_Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >,_Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >);
		deque<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > >(deque<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > const &);
		void pop_back();
		void pop_front();
		void push_back(pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > const &);
	};

	class deque<tagPRESENTFRAME,allocator<tagPRESENTFRAME> >
	{
	protected:
		void _Growmap(unsigned __int64);
		void _Tidy();
	public:
		_Deque_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > > _Make_iter(_Deque_const_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > >);
		_Deque_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > > erase(_Deque_const_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > >,_Deque_const_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > >);
		tagPRESENTFRAME & at(unsigned __int64);
		void push_front(tagPRESENTFRAME const &);
		~deque<tagPRESENTFRAME,allocator<tagPRESENTFRAME> >();
	};

	struct error_category
	{
		virtual bool equivalent(error_code const &,int);
		virtual bool equivalent(int,error_condition const &);
		virtual error_condition default_error_condition(int);
	};

	struct exception_ptr
	{
		~exception_ptr();
	};

	struct function<bool ()>
	{
		~function<bool ()>();
	};

	struct function<long (Windows::Foundation::Collections::IPropertySet *)>
	{
		~function<long (Windows::Foundation::Collections::IPropertySet *)>();
	};

	struct function<long (bool)>
	{
		~function<long (bool)>();
	};

	struct function<long (unsigned short *,int)>
	{
		~function<long (unsigned short *,int)>();
	};

	struct function<unsigned char ()>
	{
		~function<unsigned char ()>();
	};

	struct function<unsigned char (unsigned char)>
	{
		~function<unsigned char (unsigned char)>();
	};

	struct function<void ()>
	{
		function<void ()>(function<void ()> const &);
		~function<void ()>();
	};

	struct function<void (wil::cloud_store_notification<Windows::Data::Input::RadialControllerSettings> &)>
	{
		~function<void (wil::cloud_store_notification<Windows::Data::Input::RadialControllerSettings> &)>();
	};

	class ios_base
	{
		struct failure
		{
			failure(char const *,error_code const &);
			failure(failure const &);
			virtual ~failure();
		};

		static void _Ios_base_dtor(ios_base *);
		void _Tidy();
	public:
		void clear(int,bool);
	};

	struct length_error
	{
		length_error(char const *);
		length_error(length_error const &);
		virtual ~length_error();
	};

	struct list<HWND__ *,allocator<HWND__ *> >
	{
		_List_iterator<_List_val<_List_simple_types<HWND__ *> > > erase(_List_const_iterator<_List_val<_List_simple_types<HWND__ *> > >);
		void clear();
		~list<HWND__ *,allocator<HWND__ *> >();
	};

	struct list<KnownGameList::GMRelatedProcess,allocator<KnownGameList::GMRelatedProcess> >
	{
		void push_back(KnownGameList::GMRelatedProcess const &);
		~list<KnownGameList::GMRelatedProcess,allocator<KnownGameList::GMRelatedProcess> >();
	};

	struct list<Microsoft::WRL::ComPtr<FullscreenEventListener>,allocator<Microsoft::WRL::ComPtr<FullscreenEventListener> > >
	{
		_List_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<FullscreenEventListener> > > > erase(_List_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<FullscreenEventListener> > > >);
		void clear();
		void push_back(Microsoft::WRL::ComPtr<FullscreenEventListener> const &);
		~list<Microsoft::WRL::ComPtr<FullscreenEventListener>,allocator<Microsoft::WRL::ComPtr<FullscreenEventListener> > >();
	};

	struct list<Microsoft::WRL::ComPtr<IImmersiveMonitor>,allocator<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >
	{
		_List_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > > erase(_List_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > > >);
		void clear();
		~list<Microsoft::WRL::ComPtr<IImmersiveMonitor>,allocator<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >();
	};

	struct list<ViewHWNDPair,allocator<ViewHWNDPair> >
	{
		~list<ViewHWNDPair,allocator<ViewHWNDPair> >();
	};

	struct list<ViewSizeConstraintsPair,allocator<ViewSizeConstraintsPair> >
	{
		void clear();
		~list<ViewSizeConstraintsPair,allocator<ViewSizeConstraintsPair> >();
	};

	struct list<ViewSizePair,allocator<ViewSizePair> >
	{
		void clear();
		~list<ViewSizePair,allocator<ViewSizePair> >();
	};

	struct list<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData>,allocator<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > >);
		~list<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData>,allocator<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > >();
	};

	struct list<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *>,allocator<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > >);
		void clear();
		~list<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *>,allocator<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > >();
	};

	struct list<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition>,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >);
		void clear();
		~list<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition>,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > >();
	};

	struct list<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >);
		void _Incsize(unsigned __int64);
		void clear();
		~list<pair<__int64 const ,shared_ptr<ViewInfoAuto> >,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > >();
	};

	struct list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition>,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >);
		~list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition>,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > >();
	};

	struct list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > >);
		~list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > >();
	};

	struct list<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext>,allocator<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > >);
		void clear();
		~list<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext>,allocator<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > >();
	};

	struct list<pair<unsigned long const ,EventRegistrationToken>,allocator<pair<unsigned long const ,EventRegistrationToken> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > >);
		void clear();
		~list<pair<unsigned long const ,EventRegistrationToken>,allocator<pair<unsigned long const ,EventRegistrationToken> > >();
	};

	struct list<pair<unsigned long const ,shared_ptr<CCrashDetector> >,allocator<pair<unsigned long const ,shared_ptr<CCrashDetector> > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > >);
		void _Incsize(unsigned __int64);
		void clear();
		~list<pair<unsigned long const ,shared_ptr<CCrashDetector> >,allocator<pair<unsigned long const ,shared_ptr<CCrashDetector> > > >();
	};

	struct list<pplx::details::_CancellationTokenRegistration *,allocator<pplx::details::_CancellationTokenRegistration *> >
	{
		void _Incsize(unsigned __int64);
		void clear();
		void remove(pplx::details::_CancellationTokenRegistration * const &);
		void swap(list<pplx::details::_CancellationTokenRegistration *,allocator<pplx::details::_CancellationTokenRegistration *> > &);
		~list<pplx::details::_CancellationTokenRegistration *,allocator<pplx::details::_CancellationTokenRegistration *> >();
	};

	struct list<shared_ptr<CCrashDetector>,allocator<shared_ptr<CCrashDetector> > >
	{
		void clear();
		~list<shared_ptr<CCrashDetector>,allocator<shared_ptr<CCrashDetector> > >();
	};

	class locale
	{
		class _Locimp
		{
			static _Locimp * _Clocptr;
			static _Locimp * _New_Locimp(bool);
			static void _Locimp_dtor(_Locimp *);
		};

		class facet
		{
		protected:
			virtual ~facet();
		public:
			virtual _Facet_base * _Decref();
			virtual void _Incref();
		};

		class id
		{
			static int _Id_cnt;
		public:
			operator unsigned __int64();
		};

		static locale::_Locimp * _Getgloballocale();
		static locale::_Locimp * _Init(bool);
		static void _Setgloballocale(void *);
	public:
		char const * c_str();
		locale(locale const &);
		locale::facet const * _Getfacet(unsigned __int64);
		~locale();
	};

	struct logic_error
	{
		logic_error(logic_error const &);
	};

	struct map<HWND__ *,InputDialCustomizedAppToolsInfo,less<HWND__ *>,allocator<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > >
	{
		InputDialCustomizedAppToolsInfo & operator[](HWND__ * const &);
		~map<HWND__ *,InputDialCustomizedAppToolsInfo,less<HWND__ *>,allocator<pair<HWND__ * const,InputDialCustomizedAppToolsInfo> > >();
	};

	struct map<HWND__ *,unsigned __int64,less<HWND__ *>,allocator<pair<HWND__ * const,unsigned __int64> > >
	{
		unsigned __int64 & operator[](HWND__ * const &);
		~map<HWND__ *,unsigned __int64,less<HWND__ *>,allocator<pair<HWND__ * const,unsigned __int64> > >();
	};

	struct map<HWND__ *,unsigned int,less<HWND__ *>,allocator<pair<HWND__ * const,unsigned int> > >
	{
		unsigned int & operator[](HWND__ * const &);
		~map<HWND__ *,unsigned int,less<HWND__ *>,allocator<pair<HWND__ * const,unsigned int> > >();
	};

	struct map<HWND__ *,vector<unsigned int,allocator<unsigned int> >,less<HWND__ *>,allocator<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > >
	{
		vector<unsigned int,allocator<unsigned int> > & operator[](HWND__ * const &);
		~map<HWND__ *,vector<unsigned int,allocator<unsigned int> >,less<HWND__ *>,allocator<pair<HWND__ * const,vector<unsigned int,allocator<unsigned int> > > > >();
	};

	struct map<Microsoft::WRL::ComPtr<IApplicationView>,shared_ptr<BroadcastDVRActiveAppInfo>,less<Microsoft::WRL::ComPtr<IApplicationView> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > >
	{
		~map<Microsoft::WRL::ComPtr<IApplicationView>,shared_ptr<BroadcastDVRActiveAppInfo>,less<Microsoft::WRL::ComPtr<IApplicationView> >,allocator<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,shared_ptr<BroadcastDVRActiveAppInfo> > > >();
	};

	struct map<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,EventRegistrationToken,less<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> >,allocator<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > >
	{
		~map<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper>,EventRegistrationToken,less<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> >,allocator<pair<Microsoft::WRL::ComPtr<Windows::Internal::Shell::ViewManagerInterop::IViewWrapper> const ,EventRegistrationToken> > >();
	};

	struct map<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >
	{
		map<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >();
		map<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > ><_Deque_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > > >(_Deque_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >,_Deque_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >);
		~map<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >();
	};

	struct map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IAudioSessionManager2>,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > >
	{
		~map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IAudioSessionManager2>,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IAudioSessionManager2> > > >();
	};

	struct map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,int,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > >
	{
		int & operator[](basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		~map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,int,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,int> > >();
	};

	struct map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> >,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > >
	{
		~map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> >,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > > > >();
	};

	struct map<unsigned long,Microsoft::WRL::ComPtr<IHostedApplication>,less<unsigned long>,allocator<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > >
	{
		Microsoft::WRL::ComPtr<IHostedApplication> & operator[](unsigned long const &);
		~map<unsigned long,Microsoft::WRL::ComPtr<IHostedApplication>,less<unsigned long>,allocator<pair<unsigned long const ,Microsoft::WRL::ComPtr<IHostedApplication> > > >();
	};

	struct map<unsigned long,unique_ptr<SmartCookie,default_delete<SmartCookie> >,less<unsigned long>,allocator<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > >
	{
		~map<unsigned long,unique_ptr<SmartCookie,default_delete<SmartCookie> >,less<unsigned long>,allocator<pair<unsigned long const ,unique_ptr<SmartCookie,default_delete<SmartCookie> > > > >();
	};

	struct messages<char>
	{
		static locale::id id;
	};

	struct messages<unsigned short>
	{
		static locale::id id;
	};

	struct messages<wchar_t>
	{
		static locale::id id;
	};

	struct money_get<char,istreambuf_iterator<char,char_traits<char> > >
	{
		static locale::id id;
	};

	struct money_get<unsigned short,istreambuf_iterator<unsigned short,char_traits<unsigned short> > >
	{
		static locale::id id;
	};

	struct money_get<wchar_t,istreambuf_iterator<wchar_t,char_traits<wchar_t> > >
	{
		static locale::id id;
	};

	struct money_put<char,ostreambuf_iterator<char,char_traits<char> > >
	{
		static locale::id id;
	};

	struct money_put<unsigned short,ostreambuf_iterator<unsigned short,char_traits<unsigned short> > >
	{
		static locale::id id;
	};

	struct money_put<wchar_t,ostreambuf_iterator<wchar_t,char_traits<wchar_t> > >
	{
		static locale::id id;
	};

	struct moneypunct<char,0>
	{
		static locale::id id;
	};

	struct moneypunct<char,1>
	{
		static locale::id id;
	};

	struct moneypunct<unsigned short,0>
	{
		static locale::id id;
	};

	struct moneypunct<unsigned short,1>
	{
		static locale::id id;
	};

	struct moneypunct<wchar_t,0>
	{
		static locale::id id;
	};

	struct moneypunct<wchar_t,1>
	{
		static locale::id id;
	};

	struct mutex
	{
		~mutex();
	};

	struct num_get<char,istreambuf_iterator<char,char_traits<char> > >
	{
		static locale::id id;
	};

	struct num_get<unsigned short,istreambuf_iterator<unsigned short,char_traits<unsigned short> > >
	{
		static locale::id id;
	};

	struct num_get<wchar_t,istreambuf_iterator<wchar_t,char_traits<wchar_t> > >
	{
		static locale::id id;
	};

	struct num_put<char,back_insert_iterator<basic_string<char,char_traits<char>,allocator<char> > > >
	{
		static locale::id id;
	};

	struct num_put<char,ostreambuf_iterator<char,char_traits<char> > >
	{
		static locale::id id;
	};

	struct num_put<unsigned short,back_insert_iterator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >
	{
		static locale::id id;
	};

	class num_put<unsigned short,ostreambuf_iterator<unsigned short,char_traits<unsigned short> > >
	{
		char * _Ffmt(char *,char,int);
		char * _Ifmt(char *,char const *,int);
		ostreambuf_iterator<unsigned short,char_traits<unsigned short> > _Fput(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,ios_base &,unsigned short,char const *,unsigned __int64,unsigned __int64,unsigned __int64,unsigned __int64);
		ostreambuf_iterator<unsigned short,char_traits<unsigned short> > _Iput(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,ios_base &,unsigned short,char *,unsigned __int64);
		ostreambuf_iterator<unsigned short,char_traits<unsigned short> > _Put(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,unsigned short const *,unsigned __int64);
		ostreambuf_iterator<unsigned short,char_traits<unsigned short> > _Rep(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,unsigned short,unsigned __int64);
	protected:
		virtual ostreambuf_iterator<unsigned short,char_traits<unsigned short> > do_put(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,ios_base &,unsigned short,__int64);
		virtual ostreambuf_iterator<unsigned short,char_traits<unsigned short> > do_put(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,ios_base &,unsigned short,bool);
		virtual ostreambuf_iterator<unsigned short,char_traits<unsigned short> > do_put(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,ios_base &,unsigned short,double);
		virtual ostreambuf_iterator<unsigned short,char_traits<unsigned short> > do_put(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,ios_base &,unsigned short,long double);
		virtual ostreambuf_iterator<unsigned short,char_traits<unsigned short> > do_put(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,ios_base &,unsigned short,long);
		virtual ostreambuf_iterator<unsigned short,char_traits<unsigned short> > do_put(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,ios_base &,unsigned short,unsigned __int64);
		virtual ostreambuf_iterator<unsigned short,char_traits<unsigned short> > do_put(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,ios_base &,unsigned short,unsigned long);
		virtual ostreambuf_iterator<unsigned short,char_traits<unsigned short> > do_put(ostreambuf_iterator<unsigned short,char_traits<unsigned short> >,ios_base &,unsigned short,void const *);
	public:
		static locale::id id;
		static unsigned __int64 _Getcat(locale::facet const * *,locale const *);
	};

	struct num_put<wchar_t,back_insert_iterator<basic_string<wchar_t,char_traits<wchar_t>,allocator<wchar_t> > > >
	{
		static locale::id id;
	};

	struct num_put<wchar_t,ostreambuf_iterator<wchar_t,char_traits<wchar_t> > >
	{
		static locale::id id;
	};

	struct numpunct<char>
	{
		static locale::id id;
	};

	class numpunct<unsigned short>
	{
		void _Tidy();
	protected:
		virtual basic_string<char,char_traits<char>,allocator<char> > do_grouping();
		virtual basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > do_falsename();
		virtual basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > do_truename();
		virtual unsigned short do_decimal_point();
		virtual unsigned short do_thousands_sep();
		virtual ~numpunct<unsigned short>();
		void _Init(_Locinfo const &,bool);
	public:
		numpunct<unsigned short>(_Locinfo const &,unsigned __int64,bool);
		static locale::id id;
		static unsigned __int64 _Getcat(locale::facet const * *,locale const *);
	};

	struct numpunct<wchar_t>
	{
		static locale::id id;
	};

	struct ostream_iterator<int,unsigned short,char_traits<unsigned short> >
	{
		ostream_iterator<int,unsigned short,char_traits<unsigned short> > & operator=(int const &);
	};

	struct ostreambuf_iterator<unsigned short,char_traits<unsigned short> >
	{
		ostreambuf_iterator<unsigned short,char_traits<unsigned short> > & operator=(unsigned short);
	};

	struct out_of_range
	{
		out_of_range(char const *);
		out_of_range(out_of_range const &);
		virtual ~out_of_range();
	};

	struct pair<HWND__ *,InputDialCustomizedAppToolsInfo>
	{
		~pair<HWND__ *,InputDialCustomizedAppToolsInfo>();
	};

	struct pair<HWND__ *,vector<unsigned int,allocator<unsigned int> > >
	{
		~pair<HWND__ *,vector<unsigned int,allocator<unsigned int> > >();
	};

	struct pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition>
	{
		~pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition>();
	};

	struct pair<Microsoft::WRL::ComPtr<IApplicationView>,shared_ptr<BroadcastDVRActiveAppInfo> >
	{
		pair<Microsoft::WRL::ComPtr<IApplicationView>,shared_ptr<BroadcastDVRActiveAppInfo> > & operator=(pair<Microsoft::WRL::ComPtr<IApplicationView>,shared_ptr<BroadcastDVRActiveAppInfo> > const &);
		~pair<Microsoft::WRL::ComPtr<IApplicationView>,shared_ptr<BroadcastDVRActiveAppInfo> >();
	};

	struct pair<__int64,shared_ptr<ViewInfoAuto> >
	{
		~pair<__int64,shared_ptr<ViewInfoAuto> >();
	};

	struct pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >
	{
		~pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >();
	};

	struct pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition>
	{
		~pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition>();
	};

	struct pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >
	{
		~pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > >();
	};

	struct pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IAudioSessionManager2> >
	{
		~pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IAudioSessionManager2> >();
	};

	struct pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,int>
	{
		~pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,int>();
	};

	struct pair<unsigned long,Microsoft::WRL::ComPtr<IHostedApplication> >
	{
		~pair<unsigned long,Microsoft::WRL::ComPtr<IHostedApplication> >();
	};

	struct pair<unsigned long,Windows::Internal::String>
	{
		~pair<unsigned long,Windows::Internal::String>();
	};

	struct pair<unsigned long,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >
	{
		~pair<unsigned long,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >();
	};

	struct pair<unsigned long,shared_ptr<CCrashDetector> >
	{
		~pair<unsigned long,shared_ptr<CCrashDetector> >();
	};

	struct runtime_error
	{
		runtime_error(char const *);
		runtime_error(runtime_error const &);
		virtual ~runtime_error();
	};

	class shared_ptr<BroadcastDVRActiveAppInfo>
	{
		void _Resetp<BroadcastDVRActiveAppInfo>(BroadcastDVRActiveAppInfo *);
	public:
		shared_ptr<BroadcastDVRActiveAppInfo> & operator=(shared_ptr<BroadcastDVRActiveAppInfo> const &);
		shared_ptr<BroadcastDVRActiveAppInfo>(shared_ptr<BroadcastDVRActiveAppInfo> const &);
		~shared_ptr<BroadcastDVRActiveAppInfo>();
	};

	struct shared_ptr<CCrashDetector>
	{
		shared_ptr<CCrashDetector>(shared_ptr<CCrashDetector> const &);
		~shared_ptr<CCrashDetector>();
	};

	struct shared_ptr<Concurrency::details::_ExceptionHolder>
	{
		shared_ptr<Concurrency::details::_ExceptionHolder> & operator=(shared_ptr<Concurrency::details::_ExceptionHolder> const &);
		~shared_ptr<Concurrency::details::_ExceptionHolder>();
	};

	struct shared_ptr<Concurrency::details::_Task_impl<bool> >
	{
		shared_ptr<Concurrency::details::_Task_impl<bool> >(shared_ptr<Concurrency::details::_Task_impl<bool> > const &);
		~shared_ptr<Concurrency::details::_Task_impl<bool> >();
	};

	class shared_ptr<Concurrency::details::_Task_impl<long> >
	{
		void _Resetp<Concurrency::details::_Task_impl<long> >(Concurrency::details::_Task_impl<long> *);
	public:
		~shared_ptr<Concurrency::details::_Task_impl<long> >();
	};

	class shared_ptr<Concurrency::details::_Task_impl<unsigned char> >
	{
		void _Resetp<Concurrency::details::_Task_impl<unsigned char> >(Concurrency::details::_Task_impl<unsigned char> *);
	public:
		shared_ptr<Concurrency::details::_Task_impl<unsigned char> >(shared_ptr<Concurrency::details::_Task_impl<unsigned char> > const &);
		~shared_ptr<Concurrency::details::_Task_impl<unsigned char> >();
	};

	struct shared_ptr<Concurrency::details::_Task_impl_base>
	{
		~shared_ptr<Concurrency::details::_Task_impl_base>();
	};

	struct shared_ptr<Concurrency::scheduler_interface>
	{
		shared_ptr<Concurrency::scheduler_interface>(shared_ptr<Concurrency::scheduler_interface> const &);
		~shared_ptr<Concurrency::scheduler_interface>();
	};

	class shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext>
	{
		void _Resetp<HostedApplicationExperienceManager::HostedApplicationActivationContext>(HostedApplicationExperienceManager::HostedApplicationActivationContext *);
	public:
		shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext>(shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> const &);
		~shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext>();
	};

	struct shared_ptr<InputGlobalToolHandler>
	{
		shared_ptr<InputGlobalToolHandler>(shared_ptr<InputGlobalToolHandler> const &);
		~shared_ptr<InputGlobalToolHandler>();
	};

	struct shared_ptr<MenuSection>
	{
		shared_ptr<MenuSection>(shared_ptr<MenuSection> const &);
		~shared_ptr<MenuSection>();
	};

	struct shared_ptr<NotesManager::ViewInfo>
	{
		shared_ptr<NotesManager::ViewInfo> & operator=(shared_ptr<NotesManager::ViewInfo> const &);
		shared_ptr<NotesManager::ViewInfo>(shared_ptr<NotesManager::ViewInfo> const &);
		~shared_ptr<NotesManager::ViewInfo>();
	};

	struct shared_ptr<SplashScreen::CBasicSplashScreenLayout>
	{
		~shared_ptr<SplashScreen::CBasicSplashScreenLayout>();
	};

	struct shared_ptr<SplashScreen::CSplashScreenConfiguration>
	{
		shared_ptr<SplashScreen::CSplashScreenConfiguration>(shared_ptr<SplashScreen::CSplashScreenConfiguration> const &);
		~shared_ptr<SplashScreen::CSplashScreenConfiguration>();
	};

	class shared_ptr<ViewInfoAuto>
	{
		void _Resetp<ViewInfoAuto>(ViewInfoAuto *);
	public:
		shared_ptr<ViewInfoAuto> & operator=(shared_ptr<ViewInfoAuto> const &);
		shared_ptr<ViewInfoAuto>(shared_ptr<ViewInfoAuto> const &);
		~shared_ptr<ViewInfoAuto>();
	};

	class shared_ptr<char const >
	{
		void _Resetp<char const ,wil::cloud_store::BufferDeleter>(char const *,wil::cloud_store::BufferDeleter);
	public:
		shared_ptr<char const >(shared_ptr<char const > const &);
		~shared_ptr<char const >();
	};

	struct shared_ptr<pplx::details::windows_scheduler>
	{
		~shared_ptr<pplx::details::windows_scheduler>();
	};

	class shared_ptr<wil::AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,wil::err_returncode_policy> >
	{
		void _Resetp<wil::AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,wil::err_returncode_policy> >(wil::AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,wil::err_returncode_policy> *);
	};

	struct shared_ptr<wil::details::shared_cloud_store_state>
	{
		~shared_ptr<wil::details::shared_cloud_store_state>();
	};

	struct shared_ptr<wil::srwlock>
	{
		~shared_ptr<wil::srwlock>();
	};

	struct system_error
	{
		system_error(int,error_category const &,char const *);
		system_error(system_error const &);
		virtual ~system_error();
	};

	struct time_get<char,istreambuf_iterator<char,char_traits<char> > >
	{
		static locale::id id;
	};

	struct time_get<unsigned short,istreambuf_iterator<unsigned short,char_traits<unsigned short> > >
	{
		static locale::id id;
	};

	struct time_get<wchar_t,istreambuf_iterator<wchar_t,char_traits<wchar_t> > >
	{
		static locale::id id;
	};

	struct time_put<char,ostreambuf_iterator<char,char_traits<char> > >
	{
		static locale::id id;
	};

	struct time_put<unsigned short,ostreambuf_iterator<unsigned short,char_traits<unsigned short> > >
	{
		static locale::id id;
	};

	struct time_put<wchar_t,ostreambuf_iterator<wchar_t,char_traits<wchar_t> > >
	{
		static locale::id id;
	};

	struct unique_lock<mutex>
	{
		~unique_lock<mutex>();
	};

	struct unique_ptr<CBacklightController,default_delete<CBacklightController> >
	{
		~unique_ptr<CBacklightController,default_delete<CBacklightController> >();
	};

	struct unique_ptr<CJsonSerializerHelper,default_delete<CJsonSerializerHelper> >
	{
		~unique_ptr<CJsonSerializerHelper,default_delete<CJsonSerializerHelper> >();
	};

	struct unique_ptr<ExecutionModel::IGameConfigStore,IsGameManager::op_GameConfigStoredeleter>
	{
		~unique_ptr<ExecutionModel::IGameConfigStore,IsGameManager::op_GameConfigStoredeleter>();
	};

	struct unique_ptr<GameBarWatchDog,default_delete<GameBarWatchDog> >
	{
		~unique_ptr<GameBarWatchDog,default_delete<GameBarWatchDog> >();
	};

	struct unique_ptr<IHotKeyRegistrationFilter,default_delete<IHotKeyRegistrationFilter> >
	{
		~unique_ptr<IHotKeyRegistrationFilter,default_delete<IHotKeyRegistrationFilter> >();
	};

	struct unique_ptr<InputDialCommon::InputDialDeviceObserver,default_delete<InputDialCommon::InputDialDeviceObserver> >
	{
		~unique_ptr<InputDialCommon::InputDialDeviceObserver,default_delete<InputDialCommon::InputDialDeviceObserver> >();
	};

	struct unique_ptr<InputDialMenuStateModel,default_delete<InputDialMenuStateModel> >
	{
		~unique_ptr<InputDialMenuStateModel,default_delete<InputDialMenuStateModel> >();
	};

	struct unique_ptr<NotesManager::DisableActivationTimeoutData,default_delete<NotesManager::DisableActivationTimeoutData> >
	{
		~unique_ptr<NotesManager::DisableActivationTimeoutData,default_delete<NotesManager::DisableActivationTimeoutData> >();
	};

	struct unique_ptr<TraceLoggingCorrelationVector,default_delete<TraceLoggingCorrelationVector> >
	{
		~unique_ptr<TraceLoggingCorrelationVector,default_delete<TraceLoggingCorrelationVector> >();
	};

	struct unique_ptr<unsigned char [0],default_delete<unsigned char [0]> >
	{
		~unique_ptr<unsigned char [0],default_delete<unsigned char [0]> >();
	};

	struct unique_ptr<unsigned short [0],default_delete<unsigned short [0]> >
	{
		~unique_ptr<unsigned short [0],default_delete<unsigned short [0]> >();
	};

	struct unique_ptr<unsigned short const [0],default_delete<unsigned short const [0]> >
	{
		~unique_ptr<unsigned short const [0],default_delete<unsigned short const [0]> >();
	};

	struct unique_ptr<wil::details::cloud_store_watcher_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs> const ,default_delete<wil::details::cloud_store_watcher_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs> const > >
	{
		~unique_ptr<wil::details::cloud_store_watcher_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs> const ,default_delete<wil::details::cloud_store_watcher_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs> const > >();
	};

	struct unordered_map<HMONITOR__ *,CGlobalRudeWindowManager::MonitorRudeWindowData,hash<HMONITOR__ *>,equal_to<HMONITOR__ *>,allocator<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > >
	{
		CGlobalRudeWindowManager::MonitorRudeWindowData & operator[](HMONITOR__ * const &);
		~unordered_map<HMONITOR__ *,CGlobalRudeWindowManager::MonitorRudeWindowData,hash<HMONITOR__ *>,equal_to<HMONITOR__ *>,allocator<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > >();
	};

	struct unordered_map<HWINEVENTHOOK__ *,GamingOverlayExperienceManager *,hash<HWINEVENTHOOK__ *>,equal_to<HWINEVENTHOOK__ *>,allocator<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > >
	{
		unordered_map<HWINEVENTHOOK__ *,GamingOverlayExperienceManager *,hash<HWINEVENTHOOK__ *>,equal_to<HWINEVENTHOOK__ *>,allocator<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > >();
		~unordered_map<HWINEVENTHOOK__ *,GamingOverlayExperienceManager *,hash<HWINEVENTHOOK__ *>,equal_to<HWINEVENTHOOK__ *>,allocator<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > >();
	};

	struct unordered_map<__int64,shared_ptr<ViewInfoAuto>,hash<__int64>,equal_to<__int64>,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > >
	{
		~unordered_map<__int64,shared_ptr<ViewInfoAuto>,hash<__int64>,equal_to<__int64>,allocator<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > >();
	};

	struct unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,BadgeWindowPositionCache::PersistedBadgePosition,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > >
	{
		~unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,BadgeWindowPositionCache::PersistedBadgePosition,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > >();
	};

	struct unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IWICBitmap>,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > >
	{
		~unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Microsoft::WRL::ComPtr<IWICBitmap>,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > >();
	};

	struct unordered_map<unsigned __int64,GamingOverlayExperienceManager::TargetWindowContext,hash<unsigned __int64>,equal_to<unsigned __int64>,allocator<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > >
	{
		GamingOverlayExperienceManager::TargetWindowContext & at(unsigned __int64 const &);
		~unordered_map<unsigned __int64,GamingOverlayExperienceManager::TargetWindowContext,hash<unsigned __int64>,equal_to<unsigned __int64>,allocator<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > >();
	};

	struct unordered_map<unsigned long,shared_ptr<CCrashDetector>,hash<unsigned long>,equal_to<unsigned long>,allocator<pair<unsigned long const ,shared_ptr<CCrashDetector> > > >
	{
		~unordered_map<unsigned long,shared_ptr<CCrashDetector>,hash<unsigned long>,equal_to<unsigned long>,allocator<pair<unsigned long const ,shared_ptr<CCrashDetector> > > >();
	};

	struct unordered_set<HWND__ *,hash<HWND__ *>,equal_to<HWND__ *>,allocator<HWND__ *> >
	{
		~unordered_set<HWND__ *,hash<HWND__ *>,equal_to<HWND__ *>,allocator<HWND__ *> >();
	};

	struct unordered_set<Microsoft::WRL::ComPtr<IImmersiveMonitor>,hash<Microsoft::WRL::ComPtr<IImmersiveMonitor> >,equal_to<Microsoft::WRL::ComPtr<IImmersiveMonitor> >,allocator<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >
	{
		~unordered_set<Microsoft::WRL::ComPtr<IImmersiveMonitor>,hash<Microsoft::WRL::ComPtr<IImmersiveMonitor> >,equal_to<Microsoft::WRL::ComPtr<IImmersiveMonitor> >,allocator<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >();
	};

	class vector<AgileProfferServiceImpl::ServiceItem,allocator<AgileProfferServiceImpl::ServiceItem> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<AgileProfferServiceImpl::ServiceItem> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<AgileProfferServiceImpl::ServiceItem> > >);
	};

	class vector<CTrackedWindow *,allocator<CTrackedWindow *> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		~vector<CTrackedWindow *,allocator<CTrackedWindow *> >();
	};

	class vector<DragViewTracker::DragDropOperationInfo,allocator<DragViewTracker::DragDropOperationInfo> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<DragViewTracker::DragDropOperationInfo> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<DragViewTracker::DragDropOperationInfo> > >);
		void push_back(DragViewTracker::DragDropOperationInfo const &);
	};

	class vector<Geometry::CRect,allocator<Geometry::CRect> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		~vector<Geometry::CRect,allocator<Geometry::CRect> >();
	};

	class vector<HWND__ *,allocator<HWND__ *> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		void push_back(HWND__ * const &);
		~vector<HWND__ *,allocator<HWND__ *> >();
	};

	class vector<IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const,allocator<IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		~vector<IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const,allocator<IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const> >();
	};

	class vector<InputDialMenuItem,allocator<InputDialMenuItem> >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > >,unsigned __int64,InputDialMenuItem const &);
		bool _Buy(unsigned __int64);
		void _Destroy(InputDialMenuItem *,InputDialMenuItem *);
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > >);
		_Vector_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > > insert<_Vector_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > > >(_Vector_const_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > >,_Vector_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > >,_Vector_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > >);
		vector<InputDialMenuItem,allocator<InputDialMenuItem> > & operator=(vector<InputDialMenuItem,allocator<InputDialMenuItem> > const &);
		void _Insert<_Vector_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > > >(_Vector_const_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > >,_Vector_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > >,_Vector_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > >,forward_iterator_tag);
		void clear();
		void push_back(InputDialMenuItem const &);
		~vector<InputDialMenuItem,allocator<InputDialMenuItem> >();
	};

	class vector<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener>,allocator<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> > >
	{
	protected:
		bool _Buy(unsigned __int64);
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		vector<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener>,allocator<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> > > & operator=(vector<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener>,allocator<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> > > const &);
		void clear();
		~vector<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener>,allocator<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> > >();
	};

	class vector<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink>,allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > > >);
	};

	class vector<NotesManager::PendingViewInfo,allocator<NotesManager::PendingViewInfo> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		void emplace_back<unsigned int &,NotesManager::NoteShowPreferences const &>(unsigned int &,NotesManager::NoteShowPreferences const &);
		void emplace_back<unsigned int &,tagSIZE const &,tagPOINT const &>(unsigned int &,tagSIZE const &,tagPOINT const &);
		void emplace_back<unsigned int &,tagSIZE const &>(unsigned int &,tagSIZE const &);
		void emplace_back<unsigned int &,unsigned int &,NotesManager::NoteShowPreferences const &>(unsigned int &,unsigned int &,NotesManager::NoteShowPreferences const &);
		~vector<NotesManager::PendingViewInfo,allocator<NotesManager::PendingViewInfo> >();
	};

	class vector<OwnedHWinEventHook<GamingOverlayExperienceManager>,allocator<OwnedHWinEventHook<GamingOverlayExperienceManager> > >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		~vector<OwnedHWinEventHook<GamingOverlayExperienceManager>,allocator<OwnedHWinEventHook<GamingOverlayExperienceManager> > >();
	};

	class vector<PendingQueuedEvent,allocator<PendingQueuedEvent> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<PendingQueuedEvent> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<PendingQueuedEvent> > >,_Vector_const_iterator<_Vector_val<_Simple_types<PendingQueuedEvent> > >);
		~vector<PendingQueuedEvent,allocator<PendingQueuedEvent> >();
	};

	class vector<ShellExperienceListener,allocator<ShellExperienceListener> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		~vector<ShellExperienceListener,allocator<ShellExperienceListener> >();
	};

	class vector<ShellExperienceView,allocator<ShellExperienceView> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<ShellExperienceView> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<ShellExperienceView> > >,_Vector_const_iterator<_Vector_val<_Simple_types<ShellExperienceView> > >);
		~vector<ShellExperienceView,allocator<ShellExperienceView> >();
	};

	class vector<StoredMessage,allocator<StoredMessage> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		~vector<StoredMessage,allocator<StoredMessage> >();
	};

	class vector<ViewSizePair,allocator<ViewSizePair> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		~vector<ViewSizePair,allocator<ViewSizePair> >();
	};

	class vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> >
	{
	protected:
		Windows::Data::Input::RadialControllerTool * _Ufill(Windows::Data::Input::RadialControllerTool *,unsigned __int64,Windows::Data::Input::RadialControllerTool const *);
		_Vector_iterator<_Vector_val<_Simple_types<Windows::Data::Input::RadialControllerTool> > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<Windows::Data::Input::RadialControllerTool> > >,unsigned __int64,Windows::Data::Input::RadialControllerTool const &);
		bool _Buy(unsigned __int64);
		void _Destroy(Windows::Data::Input::RadialControllerTool *,Windows::Data::Input::RadialControllerTool *);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<Windows::Data::Input::RadialControllerTool> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<Windows::Data::Input::RadialControllerTool> > >,_Vector_const_iterator<_Vector_val<_Simple_types<Windows::Data::Input::RadialControllerTool> > >);
		vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > & operator=(vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > const &);
		vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> >(vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> > const &);
		void clear();
		~vector<Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool> >();
	};

	class vector<Windows::Internal::String,allocator<Windows::Internal::String> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<Windows::Internal::String> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<Windows::Internal::String> > >);
		_Vector_iterator<_Vector_val<_Simple_types<Windows::Internal::String> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<Windows::Internal::String> > >,_Vector_const_iterator<_Vector_val<_Simple_types<Windows::Internal::String> > >);
		void clear();
		~vector<Windows::Internal::String,allocator<Windows::Internal::String> >();
	};

	class vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> > > >,unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> const &);
		void _Reallocate(unsigned __int64);
	public:
		~vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> > > >();
	};

	class vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> > > >,unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> const &);
		void _Reallocate(unsigned __int64);
	public:
		~vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > > > >,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > const &);
		void _Reallocate(unsigned __int64);
	public:
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > > > >,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > const &);
		void _Reallocate(unsigned __int64);
	public:
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > >,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > const &);
		void _Reallocate(unsigned __int64);
	public:
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > > > >,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > const &);
		void _Reallocate(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > > > >,_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > > > >);
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > >,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > const &);
		void _Reallocate(unsigned __int64);
	public:
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > > > >,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > const &);
		void _Reallocate(unsigned __int64);
	public:
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > > > >,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > const &);
		void _Reallocate(unsigned __int64);
	public:
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > > > >,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > const &);
		void _Reallocate(unsigned __int64);
	public:
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > > > >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > > > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > > > >,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > const &);
		void _Reallocate(unsigned __int64);
	public:
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > > > >();
	};

	class vector<_PDH_RAW_COUNTER_ITEM_W,allocator<_PDH_RAW_COUNTER_ITEM_W> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<_PDH_RAW_COUNTER_ITEM_W> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<_PDH_RAW_COUNTER_ITEM_W> > >,_Vector_const_iterator<_Vector_val<_Simple_types<_PDH_RAW_COUNTER_ITEM_W> > >);
		void resize(unsigned __int64);
		~vector<_PDH_RAW_COUNTER_ITEM_W,allocator<_PDH_RAW_COUNTER_ITEM_W> >();
	};

	class vector<_PROCESSOR_POWER_INFORMATION,allocator<_PROCESSOR_POWER_INFORMATION> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		void resize(unsigned __int64);
	};

	class vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Vector_const_iterator<_Vector_val<_Simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >);
		void clear();
		~vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >();
	};

	class vector<bond::FieldDef,allocator<bond::FieldDef> >
	{
	protected:
		bool _Buy(unsigned __int64);
		void _Tidy();
	public:
		vector<bond::FieldDef,allocator<bond::FieldDef> > & operator=(vector<bond::FieldDef,allocator<bond::FieldDef> > const &);
		void clear();
	};

	class vector<bond::StructDef,allocator<bond::StructDef> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<bond::StructDef> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<bond::StructDef> > >,_Vector_const_iterator<_Vector_val<_Simple_types<bond::StructDef> > >);
		void clear();
		void resize(unsigned __int64);
	};

	class vector<char,sfl::StlAllocator<bond::detail::stream_allocator<1040>,char> >
	{
	protected:
		char * _Umove<char *>(char *,char *,char *);
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		~vector<char,sfl::StlAllocator<bond::detail::stream_allocator<1040>,char> >();
	};

	class vector<double,allocator<double> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		void push_back(double const &);
		~vector<double,allocator<double> >();
	};

	class vector<int,allocator<int> >
	{
	protected:
		_Vector_iterator<_Vector_val<_Simple_types<int> > > _Insert_n(_Vector_const_iterator<_Vector_val<_Simple_types<int> > >,unsigned __int64,int const &);
		bool _Buy(unsigned __int64);
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<int> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<int> > >,_Vector_const_iterator<_Vector_val<_Simple_types<int> > >);
		vector<int,allocator<int> > & operator=(vector<int,allocator<int> > const &);
		vector<int,allocator<int> >(vector<int,allocator<int> > const &);
		void push_back(int const &);
		~vector<int,allocator<int> >();
	};

	class vector<pair<HWND__ *,HWND__ *>,allocator<pair<HWND__ *,HWND__ *> > >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		~vector<pair<HWND__ *,HWND__ *>,allocator<pair<HWND__ *,HWND__ *> > >();
	};

	class vector<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> >,allocator<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > > >
	{
	protected:
		bool _Buy(unsigned __int64);
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > > > >);
		vector<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> >,allocator<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > > > & operator=(vector<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> >,allocator<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > > > const &);
		void clear();
		~vector<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> >,allocator<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > > >();
	};

	class vector<pair<unsigned long,Windows::Internal::String>,allocator<pair<unsigned long,Windows::Internal::String> > >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		~vector<pair<unsigned long,Windows::Internal::String>,allocator<pair<unsigned long,Windows::Internal::String> > >();
	};

	class vector<pair<unsigned long,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<unsigned long,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		void reserve(unsigned __int64);
		~vector<pair<unsigned long,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<unsigned long,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >();
	};

	class vector<shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext>,allocator<shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> > >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> > > >);
		void push_back(shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> const &);
		~vector<shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext>,allocator<shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> > >();
	};

	class vector<shared_ptr<MenuSection>,allocator<shared_ptr<MenuSection> > >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<shared_ptr<MenuSection> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<shared_ptr<MenuSection> > > >);
		vector<shared_ptr<MenuSection>,allocator<shared_ptr<MenuSection> > >(vector<shared_ptr<MenuSection>,allocator<shared_ptr<MenuSection> > > const &);
		void push_back(shared_ptr<MenuSection> const &);
		~vector<shared_ptr<MenuSection>,allocator<shared_ptr<MenuSection> > >();
	};

	class vector<shared_ptr<NotesManager::ViewInfo>,allocator<shared_ptr<NotesManager::ViewInfo> > >
	{
	protected:
		bool _Buy(unsigned __int64);
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<shared_ptr<NotesManager::ViewInfo> > > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<shared_ptr<NotesManager::ViewInfo> > > >);
		vector<shared_ptr<NotesManager::ViewInfo>,allocator<shared_ptr<NotesManager::ViewInfo> > > & operator=(vector<shared_ptr<NotesManager::ViewInfo>,allocator<shared_ptr<NotesManager::ViewInfo> > > const &);
		void clear();
		~vector<shared_ptr<NotesManager::ViewInfo>,allocator<shared_ptr<NotesManager::ViewInfo> > >();
	};

	class vector<shared_ptr<ViewInfoAuto>,allocator<shared_ptr<ViewInfoAuto> > >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		~vector<shared_ptr<ViewInfoAuto>,allocator<shared_ptr<ViewInfoAuto> > >();
	};

	class vector<tagINPUT,allocator<tagINPUT> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		void push_back(tagINPUT const &);
		~vector<tagINPUT,allocator<tagINPUT> >();
	};

	class vector<tagRECT,allocator<tagRECT> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		vector<tagRECT,allocator<tagRECT> >(vector<tagRECT,allocator<tagRECT> > const &);
		~vector<tagRECT,allocator<tagRECT> >();
	};

	class vector<unsigned char,allocator<unsigned char> >
	{
	protected:
		bool _Buy(unsigned __int64);
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		_Vector_iterator<_Vector_val<_Simple_types<unsigned char> > > erase(_Vector_const_iterator<_Vector_val<_Simple_types<unsigned char> > >,_Vector_const_iterator<_Vector_val<_Simple_types<unsigned char> > >);
		vector<unsigned char,allocator<unsigned char> > & operator=(vector<unsigned char,allocator<unsigned char> > const &);
		vector<unsigned char,allocator<unsigned char> >(vector<unsigned char,allocator<unsigned char> > const &);
		void resize(unsigned __int64);
		~vector<unsigned char,allocator<unsigned char> >();
	};

	class vector<unsigned int,allocator<unsigned int> >
	{
	protected:
		bool _Buy(unsigned __int64);
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
		void _Tidy();
	public:
		vector<unsigned int,allocator<unsigned int> > & operator=(vector<unsigned int,allocator<unsigned int> > const &);
		~vector<unsigned int,allocator<unsigned int> >();
	};

	class vector<unsigned long,allocator<unsigned long> >
	{
	protected:
		void _Reallocate(unsigned __int64);
		void _Reserve(unsigned __int64);
	public:
		void push_back(unsigned long const &);
		~vector<unsigned long,allocator<unsigned long> >();
	};

	class vector<unsigned short,allocator<unsigned short> >
	{
	protected:
		void _Reallocate(unsigned __int64);
	public:
		~vector<unsigned short,allocator<unsigned short> >();
	};

	AgileProfferServiceImpl::ServiceItem * _Uninit_move<AgileProfferServiceImpl::ServiceItem *,AgileProfferServiceImpl::ServiceItem *,allocator<AgileProfferServiceImpl::ServiceItem>,AgileProfferServiceImpl::ServiceItem>(AgileProfferServiceImpl::ServiceItem *,AgileProfferServiceImpl::ServiceItem *,AgileProfferServiceImpl::ServiceItem *,std::_Wrap_alloc<std::allocator<AgileProfferServiceImpl::ServiceItem> > &,AgileProfferServiceImpl::ServiceItem *,std::_Nonscalar_ptr_iterator_tag);
	DragViewTracker::DragDropOperationInfo * _Uninit_move<DragViewTracker::DragDropOperationInfo *,DragViewTracker::DragDropOperationInfo *,allocator<DragViewTracker::DragDropOperationInfo>,DragViewTracker::DragDropOperationInfo>(DragViewTracker::DragDropOperationInfo *,DragViewTracker::DragDropOperationInfo *,DragViewTracker::DragDropOperationInfo *,std::_Wrap_alloc<std::allocator<DragViewTracker::DragDropOperationInfo> > &,DragViewTracker::DragDropOperationInfo *,std::_Nonscalar_ptr_iterator_tag);
	Geometry::CRect * _Uninit_move<Geometry::CRect *,Geometry::CRect *,allocator<Geometry::CRect>,Geometry::CRect>(Geometry::CRect *,Geometry::CRect *,Geometry::CRect *,std::_Wrap_alloc<std::allocator<Geometry::CRect> > &,Geometry::CRect *,std::_Nonscalar_ptr_iterator_tag);
	IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * * _Uninit_move<IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * *,IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * *,allocator<IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const>,IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const *>(IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * *,IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * *,IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * *,std::_Wrap_alloc<std::allocator<IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * const> > &,IMMERSIVE_WINDOW_MESSAGE_SERVICE_HOTKEY_REGISTRATION const * *,std::_Nonscalar_ptr_iterator_tag);
	InputDialMenuItem * _Uninit_copy<InputDialMenuItem *,InputDialMenuItem *,allocator<InputDialMenuItem> >(InputDialMenuItem *,InputDialMenuItem *,InputDialMenuItem *,std::_Wrap_alloc<std::allocator<InputDialMenuItem> > &,std::_Nonscalar_ptr_iterator_tag);
	InputDialMenuItem * _Uninit_copy<_Vector_iterator<_Vector_val<_Simple_types<InputDialMenuItem> > >,InputDialMenuItem *,allocator<InputDialMenuItem> >(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<InputDialMenuItem> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<InputDialMenuItem> > >,InputDialMenuItem *,std::_Wrap_alloc<std::allocator<InputDialMenuItem> > &,std::_Nonscalar_ptr_iterator_tag);
	InputDialMenuItem * _Uninit_move<InputDialMenuItem *,InputDialMenuItem *,allocator<InputDialMenuItem>,InputDialMenuItem>(InputDialMenuItem *,InputDialMenuItem *,InputDialMenuItem *,std::_Wrap_alloc<std::allocator<InputDialMenuItem> > &,InputDialMenuItem *,std::_Nonscalar_ptr_iterator_tag);
	InputDialMenuItem * rotate<InputDialMenuItem *>(InputDialMenuItem *,InputDialMenuItem *,InputDialMenuItem *);
	Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> * _Uninit_copy<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,allocator<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> > >(Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,std::_Wrap_alloc<std::allocator<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> > > &,std::_Nonscalar_ptr_iterator_tag);
	Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> * _Uninit_move<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,allocator<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> >,Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> >(Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,std::_Wrap_alloc<std::allocator<Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> > > &,Microsoft::WRL::ComPtr<SttInternal::IInternalMessageReceivedListener> *,std::_Nonscalar_ptr_iterator_tag);
	Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> * _Uninit_move<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> >,Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> >(Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,std::_Wrap_alloc<std::allocator<Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> > > &,Microsoft::WRL::ComPtr<Windows::Internal::Shell::Chaining::IChainLink> *,std::_Nonscalar_ptr_iterator_tag);
	NotesManager::PendingViewInfo * _Uninit_move<NotesManager::PendingViewInfo *,NotesManager::PendingViewInfo *,allocator<NotesManager::PendingViewInfo>,NotesManager::PendingViewInfo>(NotesManager::PendingViewInfo *,NotesManager::PendingViewInfo *,NotesManager::PendingViewInfo *,std::_Wrap_alloc<std::allocator<NotesManager::PendingViewInfo> > &,NotesManager::PendingViewInfo *,std::_Nonscalar_ptr_iterator_tag);
	OwnedHWinEventHook<GamingOverlayExperienceManager> * _Uninit_move<OwnedHWinEventHook<GamingOverlayExperienceManager> *,OwnedHWinEventHook<GamingOverlayExperienceManager> *,allocator<OwnedHWinEventHook<GamingOverlayExperienceManager> >,OwnedHWinEventHook<GamingOverlayExperienceManager> >(OwnedHWinEventHook<GamingOverlayExperienceManager> *,OwnedHWinEventHook<GamingOverlayExperienceManager> *,OwnedHWinEventHook<GamingOverlayExperienceManager> *,std::_Wrap_alloc<std::allocator<OwnedHWinEventHook<GamingOverlayExperienceManager> > > &,OwnedHWinEventHook<GamingOverlayExperienceManager> *,std::_Nonscalar_ptr_iterator_tag);
	PendingQueuedEvent * _Uninit_move<PendingQueuedEvent *,PendingQueuedEvent *,allocator<PendingQueuedEvent>,PendingQueuedEvent>(PendingQueuedEvent *,PendingQueuedEvent *,PendingQueuedEvent *,std::_Wrap_alloc<std::allocator<PendingQueuedEvent> > &,PendingQueuedEvent *,std::_Nonscalar_ptr_iterator_tag);
	ShellExperienceListener * _Uninit_move<ShellExperienceListener *,ShellExperienceListener *,allocator<ShellExperienceListener>,ShellExperienceListener>(ShellExperienceListener *,ShellExperienceListener *,ShellExperienceListener *,std::_Wrap_alloc<std::allocator<ShellExperienceListener> > &,ShellExperienceListener *,std::_Nonscalar_ptr_iterator_tag);
	ShellExperienceView * _Remove_if<ShellExperienceView *,ShellExperienceViewFindByView>(ShellExperienceView *,ShellExperienceView *,ShellExperienceViewFindByView);
	ShellExperienceView * _Uninit_move<ShellExperienceView *,ShellExperienceView *,allocator<ShellExperienceView>,ShellExperienceView>(ShellExperienceView *,ShellExperienceView *,ShellExperienceView *,std::_Wrap_alloc<std::allocator<ShellExperienceView> > &,ShellExperienceView *,std::_Nonscalar_ptr_iterator_tag);
	StoredMessage * _Uninit_move<StoredMessage *,StoredMessage *,allocator<StoredMessage>,StoredMessage>(StoredMessage *,StoredMessage *,StoredMessage *,std::_Wrap_alloc<std::allocator<StoredMessage> > &,StoredMessage *,std::_Nonscalar_ptr_iterator_tag);
	ViewSizePair * _Uninit_move<ViewSizePair *,ViewSizePair *,allocator<ViewSizePair>,ViewSizePair>(ViewSizePair *,ViewSizePair *,ViewSizePair *,std::_Wrap_alloc<std::allocator<ViewSizePair> > &,ViewSizePair *,std::_Nonscalar_ptr_iterator_tag);
	Windows::Data::Input::RadialControllerTool * _Uninit_copy<Windows::Data::Input::RadialControllerTool *,Windows::Data::Input::RadialControllerTool *,allocator<Windows::Data::Input::RadialControllerTool> >(Windows::Data::Input::RadialControllerTool *,Windows::Data::Input::RadialControllerTool *,Windows::Data::Input::RadialControllerTool *,std::_Wrap_alloc<std::allocator<Windows::Data::Input::RadialControllerTool> > &,std::_Nonscalar_ptr_iterator_tag);
	Windows::Data::Input::RadialControllerTool * _Uninit_copy<_Vector_const_iterator<_Vector_val<_Simple_types<Windows::Data::Input::RadialControllerTool> > >,Windows::Data::Input::RadialControllerTool *,allocator<Windows::Data::Input::RadialControllerTool> >(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Windows::Data::Input::RadialControllerTool> > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Windows::Data::Input::RadialControllerTool> > >,Windows::Data::Input::RadialControllerTool *,std::_Wrap_alloc<std::allocator<Windows::Data::Input::RadialControllerTool> > &,std::_Nonscalar_ptr_iterator_tag);
	Windows::Data::Input::RadialControllerTool * _Uninit_move<Windows::Data::Input::RadialControllerTool *,Windows::Data::Input::RadialControllerTool *,allocator<Windows::Data::Input::RadialControllerTool>,Windows::Data::Input::RadialControllerTool>(Windows::Data::Input::RadialControllerTool *,Windows::Data::Input::RadialControllerTool *,Windows::Data::Input::RadialControllerTool *,std::_Wrap_alloc<std::allocator<Windows::Data::Input::RadialControllerTool> > &,Windows::Data::Input::RadialControllerTool *,std::_Nonscalar_ptr_iterator_tag);
	Windows::Internal::String * _Uninit_move<Windows::Internal::String *,Windows::Internal::String *,allocator<Windows::Internal::String>,Windows::Internal::String>(Windows::Internal::String *,Windows::Internal::String *,Windows::Internal::String *,std::_Wrap_alloc<std::allocator<Windows::Internal::String> > &,Windows::Internal::String *,std::_Nonscalar_ptr_iterator_tag);
	Windows::Internal::String * _Unique<Windows::Internal::String *>(Windows::Internal::String *,Windows::Internal::String *);
	_PDH_RAW_COUNTER_ITEM_W * _Uninit_move<_PDH_RAW_COUNTER_ITEM_W *,_PDH_RAW_COUNTER_ITEM_W *,allocator<_PDH_RAW_COUNTER_ITEM_W>,_PDH_RAW_COUNTER_ITEM_W>(_PDH_RAW_COUNTER_ITEM_W *,_PDH_RAW_COUNTER_ITEM_W *,_PDH_RAW_COUNTER_ITEM_W *,std::_Wrap_alloc<std::allocator<_PDH_RAW_COUNTER_ITEM_W> > &,_PDH_RAW_COUNTER_ITEM_W *,std::_Nonscalar_ptr_iterator_tag);
	_PROCESSOR_POWER_INFORMATION * _Uninit_move<_PROCESSOR_POWER_INFORMATION *,_PROCESSOR_POWER_INFORMATION *,allocator<_PROCESSOR_POWER_INFORMATION>,_PROCESSOR_POWER_INFORMATION>(_PROCESSOR_POWER_INFORMATION *,_PROCESSOR_POWER_INFORMATION *,_PROCESSOR_POWER_INFORMATION *,std::_Wrap_alloc<std::allocator<_PROCESSOR_POWER_INFORMATION> > &,_PROCESSOR_POWER_INFORMATION *,std::_Nonscalar_ptr_iterator_tag);
	__int64 const _BADOFF;
	adopt_lock_t const std::adopt_lock;
	bond::FieldDef * _Copy_impl<bond::FieldDef *,bond::FieldDef *>(bond::FieldDef *,bond::FieldDef *,bond::FieldDef *,std::_Nonscalar_ptr_iterator_tag);
	bond::FieldDef * _Uninit_copy<bond::FieldDef *,bond::FieldDef *,allocator<bond::FieldDef> >(bond::FieldDef *,bond::FieldDef *,bond::FieldDef *,std::_Wrap_alloc<std::allocator<bond::FieldDef> > &,std::_Nonscalar_ptr_iterator_tag);
	bond::StructDef * _Uninit_move<bond::StructDef *,bond::StructDef *,allocator<bond::StructDef>,bond::StructDef>(bond::StructDef *,bond::StructDef *,bond::StructDef *,std::_Wrap_alloc<std::allocator<bond::StructDef> > &,bond::StructDef *,std::_Nonscalar_ptr_iterator_tag);
	bool binary_search<_Vector_const_iterator<_Vector_val<_Simple_types<Windows::Internal::String> > >,Windows::Internal::String>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Windows::Internal::String> > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Windows::Internal::String> > >,Windows::Internal::String const &);
	bool uncaught_exception();
	char * _Allocate<char>(unsigned __int64,char *);
	char * _Maklocstr<char>(char const *,char *,_Cvtvec const &);
	char * _Uninit_move<char *,char *,sfl::StlAllocator<bond::detail::stream_allocator<1040>,char>,char>(char *,char *,char *,std::_Wrap_alloc<sfl::StlAllocator<bond::detail::stream_allocator<1040>,char> > &,char *,std::_Nonscalar_ptr_iterator_tag);
	char const * _Syserror_map(int);
	char const * _Winerror_map(int);
	defer_lock_t const std::defer_lock;
	int * _Uninit_copy<_Vector_const_iterator<_Vector_val<_Simple_types<int> > >,int *,allocator<int> >(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >,int *,std::_Wrap_alloc<std::allocator<int> > &,std::_Nonscalar_ptr_iterator_tag);
	nothrow_t const std::nothrow;
	std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > rotate<_Deque_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > > >(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >);
	std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<tagPRESENTFRAME> > > _Move<_Deque_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > >,_Deque_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > > >(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<tagPRESENTFRAME> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<tagPRESENTFRAME> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<tagPRESENTFRAME> > >);
	std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<tagPRESENTFRAME> > > _Move_backward<_Deque_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > >,_Deque_iterator<_Deque_val<_Deque_simple_types<tagPRESENTFRAME> > > >(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<tagPRESENTFRAME> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<tagPRESENTFRAME> > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<tagPRESENTFRAME> > >);
	std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > _Unchecked<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >(std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >);
	std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<HWND__ *> >,std::_Iterator_base0> * _Uninit_move<_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> *,_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> *,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> > >,_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<HWND__ *> >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<HWND__ *> >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<HWND__ *> >,std::_Iterator_base0> *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<HWND__ *> >,std::_Iterator_base0> > > > &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<HWND__ *> >,std::_Iterator_base0> *,std::_Nonscalar_ptr_iterator_tag);
	std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,std::_Iterator_base0> * _Uninit_move<_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> *,_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> *,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> > >,_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,std::_Iterator_base0> *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,std::_Iterator_base0> > > > &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,std::_Iterator_base0> *,std::_Nonscalar_ptr_iterator_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > * _Uninit_move<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > *,std::_Nonscalar_ptr_iterator_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > * _Uninit_move<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > *,std::_Nonscalar_ptr_iterator_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > * _Uninit_move<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,std::_Nonscalar_ptr_iterator_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > * _Uninit_move<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > *,std::_Nonscalar_ptr_iterator_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > * _Uninit_move<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,std::_Nonscalar_ptr_iterator_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > * _Uninit_move<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > *,std::_Nonscalar_ptr_iterator_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > * _Uninit_move<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > *,std::_Nonscalar_ptr_iterator_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,EventRegistrationToken> > > > * _Uninit_move<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,EventRegistrationToken> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,EventRegistrationToken> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,EventRegistrationToken> > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,EventRegistrationToken> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,EventRegistrationToken> > > > *,std::_Nonscalar_ptr_iterator_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,std::shared_ptr<CCrashDetector> > > > > * _Uninit_move<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,std::shared_ptr<CCrashDetector> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,std::shared_ptr<CCrashDetector> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,std::shared_ptr<CCrashDetector> > > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,std::shared_ptr<CCrashDetector> > > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,std::shared_ptr<CCrashDetector> > > > > *,std::_Nonscalar_ptr_iterator_tag);
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DragViewTracker::DragDropOperationInfo> > > find<_Vector_iterator<_Vector_val<_Simple_types<DragViewTracker::DragDropOperationInfo> > >,_GUID>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DragViewTracker::DragDropOperationInfo> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DragViewTracker::DragDropOperationInfo> > >,_GUID const &);
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ShellExperienceView> > > find_if<_Vector_iterator<_Vector_val<_Simple_types<ShellExperienceView> > >,ShellExperienceViewFindByView>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ShellExperienceView> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ShellExperienceView> > >,ShellExperienceViewFindByView);
	std::basic_ostream<unsigned short,std::char_traits<unsigned short> > & operator<<<unsigned short,char_traits<unsigned short> >(std::basic_ostream<unsigned short,std::char_traits<unsigned short> > &,unsigned short const *);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > * _Uninit_move<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::_Wrap_alloc<std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::_Nonscalar_ptr_iterator_tag);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > operator+<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,unsigned short const *);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > to_wstring(unsigned int);
	std::ctype<unsigned short> const & use_facet<ctype<unsigned short> >(std::locale const &);
	std::error_category const & generic_category();
	std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > const & use_facet<num_put<unsigned short,ostreambuf_iterator<unsigned short,char_traits<unsigned short> > > >(std::locale const &);
	std::numpunct<unsigned short> const & use_facet<numpunct<unsigned short> >(std::locale const &);
	std::ostream_iterator<int,unsigned short,std::char_traits<unsigned short> > copy<_Vector_iterator<_Vector_val<_Simple_types<int> > >,ostream_iterator<int,unsigned short,char_traits<unsigned short> > >(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::ostream_iterator<int,unsigned short,std::char_traits<unsigned short> >);
	std::pair<HWND__ *,HWND__ *> * _Uninit_move<pair<HWND__ *,HWND__ *> *,pair<HWND__ *,HWND__ *> *,allocator<pair<HWND__ *,HWND__ *> >,pair<HWND__ *,HWND__ *> >(std::pair<HWND__ *,HWND__ *> *,std::pair<HWND__ *,HWND__ *> *,std::pair<HWND__ *,HWND__ *> *,std::_Wrap_alloc<std::allocator<std::pair<HWND__ *,HWND__ *> > > &,std::pair<HWND__ *,HWND__ *> *,std::_Nonscalar_ptr_iterator_tag);
	std::pair<Windows::Internal::String *,Windows::Internal::String *> _Unguarded_partition<Windows::Internal::String *>(Windows::Internal::String *,Windows::Internal::String *);
	std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *> _Unguarded_partition<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *>(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *);
	std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > * _Uninit_copy<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,allocator<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > > >(std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,std::_Wrap_alloc<std::allocator<std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > > > &,std::_Nonscalar_ptr_iterator_tag);
	std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > * _Uninit_move<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,allocator<pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > >,pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > >(std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,std::_Wrap_alloc<std::allocator<std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > > > &,std::pair<unsigned long,Microsoft::WRL::ComPtr<INotesManagerCallback> > *,std::_Nonscalar_ptr_iterator_tag);
	std::pair<unsigned long,Windows::Internal::String> * _Uninit_move<pair<unsigned long,Windows::Internal::String> *,pair<unsigned long,Windows::Internal::String> *,allocator<pair<unsigned long,Windows::Internal::String> >,pair<unsigned long,Windows::Internal::String> >(std::pair<unsigned long,Windows::Internal::String> *,std::pair<unsigned long,Windows::Internal::String> *,std::pair<unsigned long,Windows::Internal::String> *,std::_Wrap_alloc<std::allocator<std::pair<unsigned long,Windows::Internal::String> > > &,std::pair<unsigned long,Windows::Internal::String> *,std::_Nonscalar_ptr_iterator_tag);
	std::pair<unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > * _Uninit_move<pair<unsigned long,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > *,pair<unsigned long,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > *,allocator<pair<unsigned long,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,pair<unsigned long,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >(std::pair<unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > *,std::pair<unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > *,std::pair<unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > *,std::_Wrap_alloc<std::allocator<std::pair<unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,std::pair<unsigned long,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > *,std::_Nonscalar_ptr_iterator_tag);
	std::shared_ptr<CCrashDetector> make_shared<CCrashDetector>();
	std::shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> * _Uninit_move<shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> *,shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> *,allocator<shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> >,shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> >(std::shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> *,std::shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> *,std::shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> *,std::_Wrap_alloc<std::allocator<std::shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> > > &,std::shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> *,std::_Nonscalar_ptr_iterator_tag);
	std::shared_ptr<HostedApplicationExperienceManager::HostedApplicationActivationContext> make_shared<HostedApplicationExperienceManager::HostedApplicationActivationContext>();
	std::shared_ptr<InputGlobalToolHandler> make_shared<InputGlobalToolHandler>();
	std::shared_ptr<MenuSection> * _Uninit_copy<_Vector_const_iterator<_Vector_val<_Simple_types<shared_ptr<MenuSection> > > >,shared_ptr<MenuSection> *,allocator<shared_ptr<MenuSection> > >(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::shared_ptr<MenuSection> > > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::shared_ptr<MenuSection> > > >,std::shared_ptr<MenuSection> *,std::_Wrap_alloc<std::allocator<std::shared_ptr<MenuSection> > > &,std::_Nonscalar_ptr_iterator_tag);
	std::shared_ptr<MenuSection> * _Uninit_move<shared_ptr<MenuSection> *,shared_ptr<MenuSection> *,allocator<shared_ptr<MenuSection> >,shared_ptr<MenuSection> >(std::shared_ptr<MenuSection> *,std::shared_ptr<MenuSection> *,std::shared_ptr<MenuSection> *,std::_Wrap_alloc<std::allocator<std::shared_ptr<MenuSection> > > &,std::shared_ptr<MenuSection> *,std::_Nonscalar_ptr_iterator_tag);
	std::shared_ptr<MenuSection> make_shared<MenuSection,HWND__ * &>(HWND__ * &);
	std::shared_ptr<MenuSection> make_shared<MenuSection>();
	std::shared_ptr<NotesManager::ViewInfo> * _Uninit_copy<shared_ptr<NotesManager::ViewInfo> *,shared_ptr<NotesManager::ViewInfo> *,allocator<shared_ptr<NotesManager::ViewInfo> > >(std::shared_ptr<NotesManager::ViewInfo> *,std::shared_ptr<NotesManager::ViewInfo> *,std::shared_ptr<NotesManager::ViewInfo> *,std::_Wrap_alloc<std::allocator<std::shared_ptr<NotesManager::ViewInfo> > > &,std::_Nonscalar_ptr_iterator_tag);
	std::shared_ptr<NotesManager::ViewInfo> * _Uninit_move<shared_ptr<NotesManager::ViewInfo> *,shared_ptr<NotesManager::ViewInfo> *,allocator<shared_ptr<NotesManager::ViewInfo> >,shared_ptr<NotesManager::ViewInfo> >(std::shared_ptr<NotesManager::ViewInfo> *,std::shared_ptr<NotesManager::ViewInfo> *,std::shared_ptr<NotesManager::ViewInfo> *,std::_Wrap_alloc<std::allocator<std::shared_ptr<NotesManager::ViewInfo> > > &,std::shared_ptr<NotesManager::ViewInfo> *,std::_Nonscalar_ptr_iterator_tag);
	std::shared_ptr<NotesManager::ViewInfo> make_shared<NotesManager::ViewInfo,Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * &,Microsoft::WRL::ComPtr<IApplicationFrameWrapper> &>(Windows::Internal::Shell::ViewManagerInterop::IViewWrapper * &,Microsoft::WRL::ComPtr<IApplicationFrameWrapper> &);
	std::shared_ptr<SplashScreen::CSplashScreenConfiguration> make_shared<SplashScreen::CSplashScreenConfiguration,unsigned short const * &>(unsigned short const * &);
	std::shared_ptr<ViewInfoAuto> * _Uninit_move<shared_ptr<ViewInfoAuto> *,shared_ptr<ViewInfoAuto> *,allocator<shared_ptr<ViewInfoAuto> >,shared_ptr<ViewInfoAuto> >(std::shared_ptr<ViewInfoAuto> *,std::shared_ptr<ViewInfoAuto> *,std::shared_ptr<ViewInfoAuto> *,std::_Wrap_alloc<std::allocator<std::shared_ptr<ViewInfoAuto> > > &,std::shared_ptr<ViewInfoAuto> *,std::_Nonscalar_ptr_iterator_tag);
	std::shared_ptr<pplx::details::windows_scheduler> make_shared<pplx::details::windows_scheduler>();
	tagINPUT * _Uninit_move<tagINPUT *,tagINPUT *,allocator<tagINPUT>,tagINPUT>(tagINPUT *,tagINPUT *,tagINPUT *,std::_Wrap_alloc<std::allocator<tagINPUT> > &,tagINPUT *,std::_Nonscalar_ptr_iterator_tag);
	tagRECT * _Uninit_copy<_Vector_const_iterator<_Vector_val<_Simple_types<tagRECT> > >,tagRECT *,allocator<tagRECT> >(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tagRECT> > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tagRECT> > >,tagRECT *,std::_Wrap_alloc<std::allocator<tagRECT> > &,std::_Nonscalar_ptr_iterator_tag);
	tagRECT * _Uninit_move<tagRECT *,tagRECT *,allocator<tagRECT>,tagRECT>(tagRECT *,tagRECT *,tagRECT *,std::_Wrap_alloc<std::allocator<tagRECT> > &,tagRECT *,std::_Nonscalar_ptr_iterator_tag);
	try_to_lock_t const std::try_to_lock;
	unsigned __int64 _Hash_seq(unsigned char const *,unsigned __int64);
	unsigned char * _Uninit_copy<_Vector_const_iterator<_Vector_val<_Simple_types<unsigned char> > >,unsigned char *,allocator<unsigned char> >(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > &,std::_Nonscalar_ptr_iterator_tag);
	unsigned short * _Allocate<unsigned short>(unsigned __int64,unsigned short *);
	unsigned short * _Maklocstr<unsigned short>(char const *,unsigned short *,_Cvtvec const &);
	unsigned short _Maklocchr<unsigned short>(char,unsigned short *,_Cvtvec const &);
	void _Facet_Register(std::_Facet_base *);
	void _Insertion_sort1<Windows::Internal::String *,Windows::Internal::String>(Windows::Internal::String *,Windows::Internal::String *,Windows::Internal::String *);
	void _Insertion_sort1<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *);
	void _Make_heap<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,__int64,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,__int64 *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *);
	void _Med3<Windows::Internal::String *>(Windows::Internal::String *,Windows::Internal::String *,Windows::Internal::String *);
	void _Med3<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *>(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *);
	void _Median<Windows::Internal::String *>(Windows::Internal::String *,Windows::Internal::String *,Windows::Internal::String *);
	void _Median<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *>(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *);
	void _Rotate<InputDialMenuItem *,__int64,InputDialMenuItem>(InputDialMenuItem *,InputDialMenuItem *,InputDialMenuItem *,__int64 *,InputDialMenuItem *);
	void _Rotate<_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >,__int64,pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > >(std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,__int64 *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *);
	void _Rotate<shared_ptr<NotesManager::ViewInfo> *,__int64,shared_ptr<NotesManager::ViewInfo> >(std::shared_ptr<NotesManager::ViewInfo> *,std::shared_ptr<NotesManager::ViewInfo> *,std::shared_ptr<NotesManager::ViewInfo> *,__int64 *,std::shared_ptr<NotesManager::ViewInfo> *);
	void _Sort<Windows::Internal::String *,__int64>(Windows::Internal::String *,Windows::Internal::String *,__int64);
	void _Sort<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,__int64>(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,__int64);
	void _Sort_heap<Windows::Internal::String *>(Windows::Internal::String *,Windows::Internal::String *);
	void _Sort_heap<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *>(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *);
	void _Throw_C_error(int);
	void _Throw_Cpp_error(int);
	void _Uninit_def_fill_n<_PDH_RAW_COUNTER_ITEM_W *,unsigned __int64,allocator<_PDH_RAW_COUNTER_ITEM_W>,_PDH_RAW_COUNTER_ITEM_W>(_PDH_RAW_COUNTER_ITEM_W *,unsigned __int64,std::_Wrap_alloc<std::allocator<_PDH_RAW_COUNTER_ITEM_W> > &,_PDH_RAW_COUNTER_ITEM_W *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_def_fill_n<_PROCESSOR_POWER_INFORMATION *,unsigned __int64,allocator<_PROCESSOR_POWER_INFORMATION>,_PROCESSOR_POWER_INFORMATION>(_PROCESSOR_POWER_INFORMATION *,unsigned __int64,std::_Wrap_alloc<std::allocator<_PROCESSOR_POWER_INFORMATION> > &,_PROCESSOR_POWER_INFORMATION *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_def_fill_n<bond::StructDef *,unsigned __int64,allocator<bond::StructDef>,bond::StructDef>(bond::StructDef *,unsigned __int64,std::_Wrap_alloc<std::allocator<bond::StructDef> > &,bond::StructDef *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<InputDialMenuItem *,unsigned __int64,InputDialMenuItem,allocator<InputDialMenuItem>,InputDialMenuItem>(InputDialMenuItem *,unsigned __int64,InputDialMenuItem const *,std::_Wrap_alloc<std::allocator<InputDialMenuItem> > &,InputDialMenuItem *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<Windows::Data::Input::RadialControllerTool *,unsigned __int64,Windows::Data::Input::RadialControllerTool,allocator<Windows::Data::Input::RadialControllerTool>,Windows::Data::Input::RadialControllerTool>(Windows::Data::Input::RadialControllerTool *,unsigned __int64,Windows::Data::Input::RadialControllerTool const *,std::_Wrap_alloc<std::allocator<Windows::Data::Input::RadialControllerTool> > &,Windows::Data::Input::RadialControllerTool *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> *,unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> > >,_List_unchecked_const_iterator<_List_val<_List_simple_types<HWND__ *> >,_Iterator_base0> >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<HWND__ *> >,std::_Iterator_base0> *,unsigned __int64,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<HWND__ *> >,std::_Iterator_base0> const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<HWND__ *> >,std::_Iterator_base0> > > > &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<HWND__ *> >,std::_Iterator_base0> *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> *,unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> > >,_List_unchecked_const_iterator<_List_val<_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,_Iterator_base0> >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,std::_Iterator_base0> *,unsigned __int64,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,std::_Iterator_base0> const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,std::_Iterator_base0> > > > &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<Microsoft::WRL::ComPtr<IImmersiveMonitor> > >,std::_Iterator_base0> *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > *,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HMONITOR__ * const,CGlobalRudeWindowManager::MonitorRudeWindowData> > > > *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > *,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<HWINEVENTHOOK__ * const,GamingOverlayExperienceManager *> > > > *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<Microsoft::WRL::ComPtr<IApplicationView> const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > *,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<__int64 const ,shared_ptr<ViewInfoAuto> > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<__int64 const ,std::shared_ptr<ViewInfoAuto> > > > > *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,BadgeWindowPositionCache::PersistedBadgePosition> > > > *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > *,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Microsoft::WRL::ComPtr<IWICBitmap> > > > > *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > *,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned __int64 const ,GamingOverlayExperienceManager::TargetWindowContext> > > > *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > *,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,EventRegistrationToken> > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,EventRegistrationToken> > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,EventRegistrationToken> > > > const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,EventRegistrationToken> > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,EventRegistrationToken> > > > *,std::_Nonscalar_ptr_iterator_tag);
	void _Uninit_fill_n<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > *,unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > > >,_List_unchecked_iterator<_List_val<_List_simple_types<pair<unsigned long const ,shared_ptr<CCrashDetector> > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,std::shared_ptr<CCrashDetector> > > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,std::shared_ptr<CCrashDetector> > > > > const *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,std::shared_ptr<CCrashDetector> > > > > > > > &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<unsigned long const ,std::shared_ptr<CCrashDetector> > > > > *,std::_Nonscalar_ptr_iterator_tag);
	void _Xbad_alloc();
	void _Xbad_function_call();
	void _Xlength_error(char const *);
	void _Xout_of_range(char const *);
	void iter_swap<_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >,_Deque_unchecked_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > > >(std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >);
	void swap<Windows::Internal::String>(Windows::Internal::String &,Windows::Internal::String &);
};

namespace utl
{
	class _HashTable<unsigned long,pair<unsigned long const ,CTrackedProcess *>,hash<unsigned long>,equal_to<unsigned long>,allocator<pair<unsigned long const ,CTrackedProcess *> >,0>
	{
		_DlistIt<_HashNode<pair<unsigned long const ,CTrackedProcess *> >,pair<unsigned long const ,CTrackedProcess *> > _InsertNode(_HashNode<pair<unsigned long const ,CTrackedProcess *> > *,_HashNode<pair<unsigned long const ,CTrackedProcess *> > *,unsigned __int64);
		bool _Rehash(unsigned char);
		void _InitBuckets();
	};

	class _HashTable<unsigned long,pair<unsigned long const ,bool>,hash<unsigned long>,equal_to<unsigned long>,allocator<pair<unsigned long const ,bool> >,0>
	{
		bool _Rehash(unsigned char);
		void _InitBuckets();
	};

	struct unordered_map<unsigned long,CTrackedProcess *,hash<unsigned long>,equal_to<unsigned long>,allocator<pair<unsigned long const ,CTrackedProcess *> > >
	{
		~unordered_map<unsigned long,CTrackedProcess *,hash<unsigned long>,equal_to<unsigned long>,allocator<pair<unsigned long const ,CTrackedProcess *> > >();
	};

	struct unordered_map<unsigned long,bool,hash<unsigned long>,equal_to<unsigned long>,allocator<pair<unsigned long const ,bool> > >
	{
		~unordered_map<unsigned long,bool,hash<unsigned long>,equal_to<unsigned long>,allocator<pair<unsigned long const ,bool> > >();
	};

};

namespace wil
{
	class ActivityBase<AccessibilityDockLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AccessibilityDockLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<AccessibilityDockLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<AccessibilityDockLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<AccessibilityDockLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<AppCloselogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AppCloselogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<AppCloselogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<AppCloselogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<AppCloselogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<ApplicationHostLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ApplicationHostLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<ApplicationHostLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<ApplicationHostLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<ApplicationHostLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	struct ActivityBase<AssignedAccessTelemetry,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AssignedAccessTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<AssignedAccessTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

		ActivityBase<AssignedAccessTelemetry,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<AutoplayUILogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AutoplayUILogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<AutoplayUILogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<AutoplayUILogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<AutoplayUILogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<AutoplayUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<AutoplayUILogging,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<AutoplayUILogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<AutoplayUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<ClickNoteLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ClickNoteLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<ClickNoteLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<ClickNoteLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<ClickNoteLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<ClickNoteLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<ClickNoteLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<ClickNoteLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<ClickNoteLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<CoCreateInstanceAsSystemLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CoCreateInstanceAsSystemLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CoCreateInstanceAsSystemLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<CoCreateInstanceAsSystemLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<CreativeFramework::Logging::ShellPlacementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<CreativeFramework::Logging::ShellPlacementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<CreativeFramework::Logging::ShellPlacementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<CreativeFramework::Logging::ShellPlacementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<CreativeFramework::Logging::ShellPlacementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<CreativeFramework::Logging::ShellPlacementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<CreativeFramework::Logging::ShellPlacementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<CreativeFramework::Logging::ShellPlacementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<DefaultAssocLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<DefaultAssocLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<DefaultAssocLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<DefaultAssocLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<DesktopAppXProvider,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<DesktopAppXProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<DesktopAppXProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<DesktopAppXProvider,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<DesktopAppXProvider,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<DesktopAppXProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<DesktopAppXProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<DesktopAppXProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<DesktopAppXProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<DesktopAppXProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<DesktopAppXProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<DesktopAppXProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<DesktopAppXProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<DesktopAppXProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<DisplayLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<DisplayLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<DisplayLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<DisplayLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<FileExplorerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<FileExplorerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<FileExplorerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<FileExplorerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<FileExplorerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<FileExplorerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<ImmersiveIconsLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ImmersiveIconsLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<ImmersiveIconsLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<ImmersiveIconsLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<InkWorkspaceHostedAppsManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<InkWorkspaceHostedAppsManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<InkWorkspaceHostedAppsManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<InkWorkspaceHostedAppsManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<InkWorkspaceHostedAppsManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<InputDial::InputDialTelemetry,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<InputDial::InputDialTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<InputDial::InputDialTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<InputDial::InputDialTelemetry,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<InputDial::InputDialTelemetry,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<InputDial::InputDialTelemetry,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<InputDial::InputDialTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<InputDial::InputDialTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<InputDial::InputDialTelemetry,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<InputDial::InputDialTelemetry,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	struct ActivityBase<KeyboardOcclusionMitigationLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<KeyboardOcclusionMitigationLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<KeyboardOcclusionMitigationLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		ActivityBase<KeyboardOcclusionMitigationLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<LauncherTelemetryLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<LauncherTelemetryLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<MSAWindowManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<MSAWindowManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<MSAWindowManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<MSAWindowManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<MSAWindowManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<MTCUILogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<MTCUILogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<MTCUILogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<MTCUILogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<MTCUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<MTCUILogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<MTCUILogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
		void SetStopResult(long,long *);
	public:
		ActivityBase<MTCUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<MTCUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<MTCUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<MTCUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<MTCUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<ModalExperienceManagerTelemetry,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ModalExperienceManagerTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<ModalExperienceManagerTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	public:
		ActivityBase<ModalExperienceManagerTelemetry,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<ModalExperienceManagerTelemetry,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ModalExperienceManagerTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<ModalExperienceManagerTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<ModalExperienceManagerTelemetry,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<ModalExperienceManagerTelemetry,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<ModernShareLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ModernShareLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<ModernShareLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<ModernShareLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<MonitorManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<MonitorManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<MonitorManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<MonitorManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<MonitorManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<NotesManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<NotesManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<NotesManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<NotesManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<NotesManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<NotesManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<NotesManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<NotesManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<NotesManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<NotesManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	struct ActivityBase<OpenWithLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		ActivityBase<OpenWithLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<PWSExperienceManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<PWSExperienceManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<PWSExperienceManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<PWSExperienceManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<PWSExperienceManagerLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<PWSExperienceManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<PWSExperienceManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<PWSExperienceManagerLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<PenSignalManagerLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<PenSignalManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<PenSignalManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<PenSignalManagerLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	struct ActivityBase<PlayToReceiverManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<PlayToReceiverManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<PlayToReceiverManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		ActivityBase<PlayToReceiverManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<PlayToReceiverManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<PlayToReceiverManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<PlayToReceiverManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<PlayToReceiverManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<PlayToReceiverManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<ProjectionManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ProjectionManagerLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<ProjectionManagerLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<ProjectionManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<ProjectionManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<QuietHoursServiceTraceProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<QuietHoursServiceTraceProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<QuietHoursServiceTraceProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<QuietHoursServiceTraceProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<QuietHoursServiceTraceProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	struct ActivityBase<QuietHoursServiceTraceProvider,1,35184372088832,5,16777216,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<QuietHoursServiceTraceProvider,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<QuietHoursServiceTraceProvider,_TlgReflectorTag_Param0IsProviderType>();
		};

		ActivityBase<QuietHoursServiceTraceProvider,1,35184372088832,5,16777216,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<SettingsAppLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<SettingsAppLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<SettingsAppLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<SettingsAppLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	struct ActivityBase<ShellExperienceDispatcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<ShellExperienceDispatcherLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<ShellExperienceDispatcherLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<SoftLandingLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<SoftLandingLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<SoftLandingLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<SoftLandingLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	public:
		ActivityBase<SoftLandingLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	class ActivityBase<SoftLandingLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<SoftLandingLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<SoftLandingLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SoftLandingLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<SoftLandingLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SoftLandingLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<SoftLandingLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<SoftLandingLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<SoftLandingLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> & operator=(ActivityBase<SoftLandingLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SoftLandingLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(ActivityBase<SoftLandingLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType> const &);
		ActivityBase<SoftLandingLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<SoftLandingLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<WindowManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<WindowManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<WindowManagementLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		ActivityThreadWatcher ContinueOnCurrentThread();
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<WindowManagementLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<WindowManagementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<WindowManagementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<WindowManagementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	struct ActivityBase<WindowMessageServiceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<WindowMessageServiceLogging,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<WindowMessageServiceLogging,_TlgReflectorTag_Param0IsProviderType>();
		};

		ActivityBase<WindowMessageServiceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStop();
	};

	class ActivityBase<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStop();
	};

	struct ActivityThreadWatcher
	{
		ActivityThreadWatcher(details::IFailureCallback *,details::StoredCallContextInfo const &);
		~ActivityThreadWatcher();
	};

	class AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>
	{
		struct AsyncEventWorkItem
		{
			virtual void RaiseEvent();
			virtual ~AsyncEventWorkItem();
		};

		long Initialize();
	public:
		AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>();
		long AsyncInvokeAll<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>(Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager * const &,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs * const &);
		~AsyncEventSourceT<Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *>,Windows::Internal::GitEventSourceSupportsAgile,Microsoft::WRL::InvokeModeOptions<2>,1,err_returncode_policy>();
	};

	struct ErrorHandlingHelpers
	{
		static void FallbackTelemetryCallback(bool,FailureInfo const &);
	};

	struct Feature<__WilFeatureTraits_Feature_FeedsCore>
	{
		static bool IsEnabled();
	};

	struct NamedPropertyStoreHelper
	{
		~NamedPropertyStoreHelper();
	};

	struct PropVariant
	{
		bool TryDetachString(unsigned short * *);
		long ChangeType(unsigned short,tagPROPVARIANT const *);
		long GetAsBoolean(bool *);
		long SetString(unsigned short const *);
		~PropVariant();
	};

	struct PropertyStoreHelper
	{
		~PropertyStoreHelper();
	};

	struct PropertyStoreHelperBase<INamedPropertyStore>
	{
		long GetAsBoolWithDefault<unsigned short const *>(unsigned short const *,bool,bool *);
		long GetFailIfEmpty<unsigned short const *>(unsigned short const *,tagPROPVARIANT *);
	};

	struct PropertyStoreHelperBase<IPropertyStore>
	{
		long GetAsBoolWithDefault<_tagpropertykey>(_tagpropertykey,bool,bool *);
		long GetAsString<_tagpropertykey>(_tagpropertykey,unsigned short * *);
		long GetFailIfEmpty<_tagpropertykey>(_tagpropertykey,tagPROPVARIANT *);
		long GetString<_tagpropertykey>(_tagpropertykey,unsigned short * *);
		long GetUInt32<_tagpropertykey>(_tagpropertykey,unsigned long *);
		long InitFromItem(IUnknown *,GETPROPERTYSTOREFLAGS,_tagpropertykey const *,unsigned int);
	};

	struct ResultException
	{
		ResultException(ResultException const &);
		virtual char const * what();
		virtual ~ResultException();
	};

	struct ShellBindContextHelper
	{
		long SetNamedBoolean(unsigned short const *);
	};

	struct StoredFailureInfo
	{
		void SetFailureInfo(FailureInfo const &);
	};

	struct ThreadErrorContext
	{
		ThreadErrorContext();
		bool GetCaughtExceptionError(FailureInfo &,DiagnosticsInfo const *,long);
		bool GetLastError(FailureInfo &,long);
		~ThreadErrorContext();
	};

	class TraceLoggingProvider
	{
		virtual bool NotifyFailure(FailureInfo const &);
	protected:
		TraceLoggingProvider();
		bool IsEnabled_(unsigned char,unsigned __int64);
		virtual void Initialize();
		virtual void OnErrorReported(bool,FailureInfo const &);
		virtual ~TraceLoggingProvider();
		void Register(_tlgProvider_t const * const,void (*)(_GUID const *,unsigned long,unsigned char,unsigned __int64,unsigned __int64,_EVENT_FILTER_DESCRIPTOR *,void *));
		void ReportTraceLoggingFailure(FailureInfo const &);
		void ReportTraceLoggingMessage(bool,char const *,char *);
	};

	class cloud_store
	{
		struct BufferDeleter
		{
			void operator()(void const *);
			~BufferDeleter();
		};

		struct validated_data_reference
		{
			~validated_data_reference();
		};

		static bond::blob buffer_to_blob(com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy> const &);
		static cloud_store::validated_data_reference validate_cloud_store_data_reference<Windows::Data::Input::RadialControllerSettings>(Windows::Data::Platform::ItemReference<Windows::Data::Input::RadialControllerSettings> const *);
		static cloud_store_data<Windows::Data::Input::RadialControllerSettings> unmarshal<Windows::Data::Input::RadialControllerSettings>(Windows::Internal::Storage::Cloud::ICloudStoreData *,cloud_store_load_options);
		static std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > get_type_name_wide_string<Windows::Data::Input::RadialControllerSettings>();
		static std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > widen_string(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		std::unique_ptr<details::cloud_store_watcher_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs> const ,std::default_delete<details::cloud_store_watcher_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs> const > > subscribe_internal<Windows::Data::Input::RadialControllerSettings>(cloud_store_subscription_parameters const &,Windows::Data::Platform::ItemReference<Windows::Data::Input::RadialControllerSettings> const *,std::function<void (cloud_store_notification<Windows::Data::Input::RadialControllerSettings> &)>);
	public:
		cloud_store(Windows::Internal::Storage::Cloud::PartitionKind,unsigned short const *,unsigned short const *,Windows::Internal::Storage::Cloud::CloudStoreOptions);
		~cloud_store();
	};

	struct cloud_store_data<Windows::Data::Input::RadialControllerSettings>
	{
		cloud_store_data<Windows::Data::Input::RadialControllerSettings>();
		~cloud_store_data<Windows::Data::Input::RadialControllerSettings>();
	};

	struct cloud_store_notification<Windows::Data::Input::RadialControllerSettings>
	{
		cloud_store_data<Windows::Data::Input::RadialControllerSettings> release_data_item();
		~cloud_store_notification<Windows::Data::Input::RadialControllerSettings>();
	};

	struct cloud_store_subscription_parameters
	{
		~cloud_store_subscription_parameters();
	};

	struct com_ptr_t<IActivationFactory,err_returncode_policy>
	{
		~com_ptr_t<IActivationFactory,err_returncode_policy>();
	};

	struct com_ptr_t<IAgileReference,err_exception_policy>
	{
		~com_ptr_t<IAgileReference,err_exception_policy>();
	};

	struct com_ptr_t<IAgileReference,err_returncode_policy>
	{
		~com_ptr_t<IAgileReference,err_returncode_policy>();
	};

	struct com_ptr_t<ICoreWindowComponentUIBridge,err_returncode_policy>
	{
		~com_ptr_t<ICoreWindowComponentUIBridge,err_returncode_policy>();
	};

	struct com_ptr_t<ICreateObject,err_returncode_policy>
	{
		~com_ptr_t<ICreateObject,err_returncode_policy>();
	};

	struct com_ptr_t<IInspectable,err_exception_policy>
	{
		com_ptr_t<Windows::Foundation::Collections::IVectorView<unsigned int>,err_exception_policy> query<Windows::Foundation::Collections::IVectorView<unsigned int> >();
		~com_ptr_t<IInspectable,err_exception_policy>();
	};

	struct com_ptr_t<IInspectable,err_returncode_policy>
	{
		~com_ptr_t<IInspectable,err_returncode_policy>();
	};

	struct com_ptr_t<IPresentationRequestedArgs,err_exception_policy>
	{
		~com_ptr_t<IPresentationRequestedArgs,err_exception_policy>();
	};

	struct com_ptr_t<IRegisteredTask,err_returncode_policy>
	{
		~com_ptr_t<IRegisteredTask,err_returncode_policy>();
	};

	struct com_ptr_t<IRunningTask,err_returncode_policy>
	{
		~com_ptr_t<IRunningTask,err_returncode_policy>();
	};

	struct com_ptr_t<IServiceProvider,err_exception_policy>
	{
		~com_ptr_t<IServiceProvider,err_exception_policy>();
	};

	struct com_ptr_t<ITaskFolder,err_returncode_policy>
	{
		~com_ptr_t<ITaskFolder,err_returncode_policy>();
	};

	struct com_ptr_t<ITaskService,err_returncode_policy>
	{
		~com_ptr_t<ITaskService,err_returncode_policy>();
	};

	struct com_ptr_t<IUserOOBEController,err_exception_policy>
	{
		~com_ptr_t<IUserOOBEController,err_exception_policy>();
	};

	struct com_ptr_t<IWindowingEnvironmentConfig,err_exception_policy>
	{
		~com_ptr_t<IWindowingEnvironmentConfig,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::AssignedAccess::AssignedAccessUserInfo *>,err_returncode_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<Windows::Internal::AssignedAccess::AssignedAccessUserInfo *>,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<unsigned int>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<unsigned int>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IAsyncOperation<bool>,err_returncode_policy>
	{
		~com_ptr_t<Windows::Foundation::IAsyncOperation<bool>,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessConfiguration,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessConfiguration,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessController,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessController,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessProfile,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessProfile,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessUserInfo,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::AssignedAccess::IAssignedAccessUserInfo,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::ComposableShell::IExtensionClassProviderStatics,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::ComposableShell::IExtensionClassProviderStatics,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirector,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirector,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirectorContext,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::Foundation::Contracts::IActivationFactoryContractRedirectorContext,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::StateRepository::IPackageFamilyStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::StateRepository::IPackageFamilyStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::StateRepository::IPackageStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::StateRepository::IPackageStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy>
	{
		void attach(Windows::Internal::Storage::Cloud::ICloudStore *);
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreData,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreData,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreFactory,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreFactory,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreItemName,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreItemName,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Management::Deployment::Internal::IPackageManagerInternal,err_exception_policy>
	{
		~com_ptr_t<Windows::Management::Deployment::Internal::IPackageManagerInternal,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Security::Credentials::IWebAccount,err_exception_policy>
	{
		~com_ptr_t<Windows::Security::Credentials::IWebAccount,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy>
	{
		com_ptr_t<Windows::Storage::Streams::IBufferByteAccess,err_exception_policy> query<Windows::Storage::Streams::IBufferByteAccess>();
		~com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Storage::Streams::IBufferByteAccess,err_exception_policy>
	{
		~com_ptr_t<Windows::Storage::Streams::IBufferByteAccess,err_exception_policy>();
	};

	struct com_ptr_t<Windows::System::IUser,err_exception_policy>
	{
		~com_ptr_t<Windows::System::IUser,err_exception_policy>();
	};

	struct com_ptr_t<Windows::System::Profile::IEducationSettingsStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::System::Profile::IEducationSettingsStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::UI::Core::ICoreWindowSite,err_returncode_policy>
	{
		~com_ptr_t<Windows::UI::Core::ICoreWindowSite,err_returncode_policy>();
	};

	struct critical_section
	{
		~critical_section();
	};

	namespace details
	{
		class AsyncEventInvocationPolicy<1>
		{
		protected:
			void HandleAsyncEventInvoke(srwlock &,AsyncEventWorkQueue &);
		};

		struct DestroyThreadPoolTimer<SystemThreadPoolMethods,0>
		{
			static void Destroy(_TP_TIMER *);
		};

		struct DestroyThreadPoolTimer<SystemThreadPoolMethods,2>
		{
			static void Destroy(_TP_TIMER *);
		};

		struct DestroyThreadPoolWait<0>
		{
			static void Destroy(_TP_WAIT *);
		};

		struct DestroyThreadPoolWork<2>
		{
			static void Destroy(_TP_WORK *);
		};

		struct DummyUnknown
		{
			DummyUnknown();
			virtual long ContextSensitiveHelp(int);
			virtual long GetClassID(_GUID *);
			virtual long GetWindow(HWND__ * *);
		};

		class EnabledStateManager
		{
			unsigned int EnsureSubscribedToFeatureConfigurationChangesImpl();
			void RecordCachedUsageUnderLock();
			void RecordCachedUsageUnderLock(EnabledStateManager::CachedUsageData const &);
		public:
			void EnsureSubscribedToUsageFlush(void (*)(void *));
			void OnStateChange();
			void OnTimer();
			void SubscribeFeatureStateCacheToConfigurationChanges(wil_details_FeatureStateCache *,wil_FeatureChangeTime,unsigned int);
			~EnabledStateManager();
		};

		class EventInvocationContext<1>
		{
			static void AsyncEventWorkCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_WORK *);
		public:
			EventInvocationContext<1>();
			long RuntimeClassInitialize();
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
			virtual ~EventInvocationContext<1>();
		};

		struct FeatureFunctorHost
		{
			FeatureFunctorHost(unsigned int,DiagnosticsInfo const &);
			virtual long ExceptionThrown(void *);
			virtual long Run(IFunctor &);
			~FeatureFunctorHost();
		};

		class FeatureImpl<__WilFeatureTraits_Feature_20H2_Enablement>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled(ReportingKind);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_20H2_Rollback>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled(ReportingKind);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ActivitiesInShell>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AlwaysShowActivationError>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AppDefaultsCloudEdition>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AppDefaultsRecommendNewEdge>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AppUriHandlerWildcardSupport>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ApplicationContent>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AppsFolderTaskbarIconLoading>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AutoGameMode>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCachedVariantState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
			wil_details_FeatureStateCache GetCurrentVariantState(int *);
		public:
			Variant_AutoGameMode __private_GetVariant(VariantReportingKind,bool);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
			void ReportVariantUsage(bool,Variant_AutoGameMode,VariantReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AutoGameModeProfile>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCachedVariantState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
			wil_details_FeatureStateCache GetCurrentVariantState(int *);
		public:
			Variant_AutoGameModeProfile __private_GetVariant(VariantReportingKind,bool);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
			void ReportVariantUsage(bool,Variant_AutoGameModeProfile,VariantReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_AutoGamePowerProfile>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCachedVariantState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
			wil_details_FeatureStateCache GetCurrentVariantState(int *);
		public:
			Variant_AutoGamePowerProfile __private_GetVariant(VariantReportingKind,bool);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
			void ReportVariantUsage(bool,Variant_AutoGamePowerProfile,VariantReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_BrowserReplacement>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Bug9772687>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_CUIPopupHelper>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_CastServerDefaultValue>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ComponentUI_ExplorerRestart>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ContentDeliveryPolicyRestrictions>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_DesktopScreenClipping>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_DesktopTouchImprovementDefaultChange>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_DesktopTouchImprovementForTabletPosture>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			bool __private_IsEnabled(ReportingKind);
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_EDPOpenWith>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_EdgePinnedSecondaryTiles>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ExperimentalKGL>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ExplorerEdu>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_FeedsCore>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_HolographicDesktopHotkeyFunctionalityHiding>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_HolographicUserExperiences>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Hub_InternalDevTools>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_IntegrateWhiteboardApp>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LIACoreNavigationClient>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LightweightWindows>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LockReliability_DisableLockSplashScreenTimerDuringCS>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LockReliability_PerformanceBoost>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_LowAnimationsOnBatterySaver>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_MinuteZeroExperiences>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_MiracastListenerAutoStart>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ModalWindowHelper_CUIHostLookup>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_NamespaceNavigationRestrictions>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_NormalizeTitlebarHeight>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_OfflineCapableUserAssocMigrationPlugin>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_PenDetachIWS>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_PenTailDockEvents>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_PeopleBar>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_RDX_SoftLanding>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_RadialControllerAppSwitchTool>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_RadialControllerCustomFontGlyphs>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_RadialControllerProcessWide>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_RedirectFilePicker>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ResizeShellExperienceViews>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SL_AllowAnchorQueryRegExMatchingForId>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SL_ImageMarginSoftLandingMetadata>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SL_IsImageQualifiedForLightThemeSoftLandingMetadata>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SL_IsUserInteractionRequiredForDismissalSoftLandingMetadata>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SL_LargeImageTwoButtonTemplateSupport>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ScreenSketchApp>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SearchUndockExperiment>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_Servicing_BrowserReplacement_SpartanDeprecation>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			bool __private_IsEnabled();
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SettingsSearchCFR>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_StickyNotesNewWindowingAPI>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_StorageLibraryFolderSuggestionsUX>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_SystemLightTheme>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TabShell>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_TaskbarSuggestions>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_UWPGameBar>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_UseNewSearchAndCortanaApps>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_ViewClosingAPIs_CloseRequested_Desktop>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_VisionReactive_OnScreen>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_VoiceAssistantPositioner>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WIWHotkeyForScreenSketch>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WindowManagement>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WindowManagementOnDesktop>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WindowTabHost>
		{
			wil_details_FeatureStateCache GetCachedVariantState();
			wil_details_FeatureStateCache GetCurrentVariantState(int *);
		public:
			bool __private_IsVariantEqual(Variant_WindowTabHost,VariantReportingKind,bool);
			void ReportVariantUsage(bool,Variant_WindowTabHost,VariantReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_WindowsTips>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureImpl<__WilFeatureTraits_Feature_XAMLFileExplorerPickerNamespaceRestrictions>
		{
			wil_details_FeatureStateCache GetCachedFeatureEnabledState();
			wil_details_FeatureStateCache GetCurrentFeatureEnabledState(int *);
		public:
			void ReportUsage(bool,ReportingKind,unsigned __int64);
		};

		class FeatureStateManager
		{
			bool EnsureStateData();
			bool EnsureSubscribedToStateChangesUnderLock();
			void EnsureSubscribedToProcessWideUsageFlushUnderLock();
		public:
			void QueueBackgroundSRUMUsageReporting(unsigned int,unsigned short,unsigned int);
			void RecordFeatureError(unsigned int,FEATURE_ERROR const &);
			void SubscribeToEnabledStateChanges(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
			void SubscribeToUsageFlush(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *));
			~FeatureStateManager();
		};

		struct IFunctor
		{
			IFunctor();
		};

		struct RequiredFeatures<Feature<__WilFeatureTraits_Feature_20H2_Enablement> >
		{
			static bool IsEnabled();
		};

		struct ScopeExitFn<<lambda_3c6b3245d56e94aa13f25a05674a2632> >
		{
			~ScopeExitFn<<lambda_3c6b3245d56e94aa13f25a05674a2632> >();
		};

		struct ScopeExitFn<<lambda_484370b527756d00cb68af6cc136cf00> >
		{
			~ScopeExitFn<<lambda_484370b527756d00cb68af6cc136cf00> >();
		};

		struct StagingFailureInformation
		{
			StagingFailureInformation(FailureInfo const &,DiagnosticsInfo const &,void *);
		};

		class StoredCallContextInfo
		{
			void AssignMessage(unsigned short const *);
		public:
			void ClearMessage();
		};

		class ThreadFailureCallbackHolder
		{
			static long volatile s_telemetryId;
		public:
			ThreadFailureCallbackHolder(IFailureCallback *,CallContextInfo *,bool);
			static bool GetThreadContext(FailureInfo *,ThreadFailureCallbackHolder *,char *,unsigned __int64);
			void StartWatching();
			void StopWatching();
		};

		struct cloud_store_watcher_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs>
		{
			cloud_store_watcher_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs>(Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher *,Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *> *);
		};

		namespace in1diag3
		{
			bool FailFast_HrIfMsg(void *,unsigned int,char const *,long,bool,char const *,...);
			bool Log_GetLastErrorIfMsg(void *,unsigned int,char const *,bool,char const *,...);
			bool Log_HrIfMsg(void *,unsigned int,char const *,long,bool,char const *,...);
			long Log_CaughtException(void *,unsigned int,char const *);
			long Log_CaughtExceptionMsg(void *,unsigned int,char const *,char const *,...);
			long Log_Hr(void *,unsigned int,char const *,long);
			long Log_HrMsg(void *,unsigned int,char const *,long,char const *,...);
			long Return_CaughtException(void *,unsigned int,char const *);
			long Return_GetLastError(void *,unsigned int,char const *);
			long Return_NtStatus(void *,unsigned int,char const *,long);
			long Return_Win32(void *,unsigned int,char const *,unsigned long);
			unsigned long Log_GetLastError(void *,unsigned int,char const *);
			unsigned long Log_Win32(void *,unsigned int,char const *,unsigned long);
			void FailFastImmediate_Unexpected();
			void FailFast_Hr(void *,unsigned int,char const *,long);
			void FailFast_Unexpected(void *,unsigned int,char const *);
			void Return_Hr(void *,unsigned int,char const *,long);
			void Return_HrMsg(void *,unsigned int,char const *,long,char const *,...);
			void Throw_Hr(void *,unsigned int,char const *,long);
			void Throw_Win32(void *,unsigned int,char const *,unsigned long);
			void _FailFastImmediate_Unexpected();
			void _FailFast_GetLastError(void *,unsigned int,char const *);
			void _FailFast_Hr(void *,unsigned int,char const *,long);
			void _FailFast_Unexpected(void *,unsigned int,char const *);
			void _Log_GetLastError(void *,unsigned int,char const *);
			void _Log_Hr(void *,unsigned int,char const *,long);
			void _Log_NtStatus(void *,unsigned int,char const *,long);
			void _Log_NullAlloc(void *,unsigned int,char const *);
			void _Log_Win32(void *,unsigned int,char const *,unsigned long);
			void _Throw_GetLastError(void *,unsigned int,char const *);
			void _Throw_Hr(void *,unsigned int,char const *,long);
			void _Throw_NtStatus(void *,unsigned int,char const *,long);
			void _Throw_NullAlloc(void *,unsigned int,char const *);
			void _Throw_Win32(void *,unsigned int,char const *,unsigned long);
		};

		struct lambda_call<<lambda_b6f65b43e152b4f7e74ce3055105f44f> >
		{
			~lambda_call<<lambda_b6f65b43e152b4f7e74ce3055105f44f> >();
		};

		struct lambda_call<<lambda_d3083553a6902a00ac598657a3217d07> >
		{
			~lambda_call<<lambda_d3083553a6902a00ac598657a3217d07> >();
		};

		struct out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreItemName,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreItemName,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy> >();
		};

		class shared_buffer
		{
			void assign(long *,unsigned __int64);
		public:
			bool create(void const *,unsigned __int64);
			void reset();
		};

		struct shared_cloud_store_state
		{
			com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy> const & get_cloud_store();
		};

		struct shared_object<ActivityBase<AccessibilityDockLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AccessibilityDockLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<AppCloselogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AppCloselogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<ApplicationHostLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ApplicationHostLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<AssignedAccessTelemetry,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AssignedAccessTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<AutoplayUILogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AutoplayUILogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<AutoplayUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<AutoplayUILogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<ClickNoteLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ClickNoteLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<ClickNoteLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ClickNoteLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<ClickNoteLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ClickNoteLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<CoCreateInstanceAsSystemLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CoCreateInstanceAsSystemLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<CreativeFramework::Logging::ShellPlacementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CreativeFramework::Logging::ShellPlacementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<CreativeFramework::Logging::ShellPlacementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CreativeFramework::Logging::ShellPlacementLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<CreativeFramework::Logging::ShellPlacementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<CreativeFramework::Logging::ShellPlacementLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<DefaultAssocLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<DefaultAssocLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<DesktopAppXProvider,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<DesktopAppXProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<DesktopAppXProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<DesktopAppXProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<DesktopAppXProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<DesktopAppXProvider,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<DesktopAppXProvider,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<DesktopAppXProvider,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<DisplayLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<DisplayLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<FileExplorerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<FileExplorerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<FileExplorerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<ImmersiveIconsLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ImmersiveIconsLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<InkWorkspaceHostedAppsManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<InkWorkspaceHostedAppsManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<InputDial::InputDialTelemetry,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<InputDial::InputDialTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<InputDial::InputDialTelemetry,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<InputDial::InputDialTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<KeyboardOcclusionMitigationLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<KeyboardOcclusionMitigationLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<LauncherTelemetryLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<LauncherTelemetryLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<LauncherTelemetryLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<MSAWindowManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<MSAWindowManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<MTCUILogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<MTCUILogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<MTCUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<MTCUILogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<MTCUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<MTCUILogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<MTCUILogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<MTCUILogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<ModalExperienceManagerTelemetry,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ModalExperienceManagerTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<ModalExperienceManagerTelemetry,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ModalExperienceManagerTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<ModernShareLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ModernShareLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<MonitorManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<MonitorManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<NotesManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<NotesManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<NotesManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<NotesManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<OpenWithLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<OpenWithLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<PWSExperienceManagerLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<PWSExperienceManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<PWSExperienceManagerLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<PWSExperienceManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<PenSignalManagerLogging,1,70368744177664,5,50331648,_TlgReflectorTag_Param0IsProviderType>::ActivityData<PenSignalManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<PlayToReceiverManagerLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<PlayToReceiverManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<PlayToReceiverManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<PlayToReceiverManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<ProjectionManagerLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ProjectionManagerLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<QuietHoursServiceTraceProvider,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<QuietHoursServiceTraceProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<QuietHoursServiceTraceProvider,1,35184372088832,5,16777216,_TlgReflectorTag_Param0IsProviderType>::ActivityData<QuietHoursServiceTraceProvider,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<SettingsAppLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SettingsAppLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<ShellExperienceDispatcherLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<ShellExperienceDispatcherLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<SingleViewExperienceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<SingleViewExperienceLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SingleViewExperienceLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<SoftLandingLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<SoftLandingLogging,1,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<SoftLandingLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<SoftLandingLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<SoftLandingLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<SoftLandingLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			shared_object<ActivityBase<SoftLandingLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType> > & operator=(shared_object<ActivityBase<SoftLandingLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<SoftLandingLogging,_TlgReflectorTag_Param0IsProviderType> > const &);
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowManagementLogging,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowManagementLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<WindowMessageServiceLogging,0,0,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<WindowMessageServiceLogging,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,1,35184372088832,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,1,70368744177664,5,0,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct static_lazy<AccessibilityDockLogging>
		{
			AccessibilityDockLogging * get(void (*)());
		};

		struct static_lazy<AppCloselogging>
		{
			AppCloselogging * get(void (*)());
		};

		struct static_lazy<ApplicationHostLogging>
		{
			ApplicationHostLogging * get(void (*)());
		};

		struct static_lazy<AssignedAccessTelemetry>
		{
			AssignedAccessTelemetry * get(void (*)());
		};

		struct static_lazy<AutoplayUILogging>
		{
			AutoplayUILogging * get(void (*)());
		};

		struct static_lazy<BroadcastDVRTraceProvider>
		{
			BroadcastDVRTraceProvider * get(void (*)());
		};

		struct static_lazy<CAppLifeCycle_UILogging>
		{
			CAppLifeCycle_UILogging * get(void (*)());
		};

		struct static_lazy<CCriticalFailureLogging>
		{
			CCriticalFailureLogging * get(void (*)());
		};

		struct static_lazy<CCriticalFailureTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			CCriticalFailureTelemetry * get(void (*)());
		};

		struct static_lazy<CSnapComponentTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			CSnapComponentTelemetry * get(void (*)());
		};

		struct static_lazy<ChromeControlsTelemetryImpl>
		{
			struct Completer
			{
				~Completer();
			};

			ChromeControlsTelemetryImpl * get(void (*)());
		};

		struct static_lazy<ClickNoteLogging>
		{
			ClickNoteLogging * get(void (*)());
		};

		struct static_lazy<CoCreateInstanceAsSystemLogging>
		{
			CoCreateInstanceAsSystemLogging * get(void (*)());
		};

		namespace static_lazy<CoCreateInstanceAsSystemTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<CreativeFramework::Logging::ShellPlacementLogging>
		{
			CreativeFramework::Logging::ShellPlacementLogging * get(void (*)());
		};

		struct static_lazy<DefaultAssocLogging>
		{
			DefaultAssocLogging * get(void (*)());
		};

		struct static_lazy<DesktopAppXProvider>
		{
			DesktopAppXProvider * get(void (*)());
		};

		struct static_lazy<DisplayLogging>
		{
			DisplayLogging * get(void (*)());
		};

		struct static_lazy<DisplayPickerHelperLogging>
		{
			DisplayPickerHelperLogging * get(void (*)());
		};

		struct static_lazy<DisplayPickerHelperTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			DisplayPickerHelperTelemetry * get(void (*)());
		};

		struct static_lazy<EdgeTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			EdgeTelemetry * get(void (*)());
		};

		namespace static_lazy<EnterpriseChrome::EnterpriseChromeTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<ExperienceHostLogging>
		{
			ExperienceHostLogging * get(void (*)());
		};

		struct static_lazy<FeatureLogging>
		{
			FeatureLogging * get(void (*)());
		};

		struct static_lazy<FileExplorerLogging>
		{
			FileExplorerLogging * get(void (*)());
		};

		struct static_lazy<GameDVRTraceProvider>
		{
			GameDVRTraceProvider * get(void (*)());
		};

		struct static_lazy<ImmersiveIconsLogging>
		{
			ImmersiveIconsLogging * get(void (*)());
		};

		struct static_lazy<InkWorkspaceHostedAppsManagerLogging>
		{
			InkWorkspaceHostedAppsManagerLogging * get(void (*)());
		};

		struct static_lazy<InputDial::InputDialTelemetry>
		{
			InputDial::InputDialTelemetry * get(void (*)());
		};

		struct static_lazy<InputDial::InputDialTraceProvider>
		{
			InputDial::InputDialTraceProvider * get(void (*)());
		};

		struct static_lazy<KeyboardOcclusionMitigationLogging>
		{
			KeyboardOcclusionMitigationLogging * get(void (*)());
		};

		struct static_lazy<LauncherTelemetryLogging>
		{
			LauncherTelemetryLogging * get(void (*)());
		};

		struct static_lazy<MSAWindowManagerLogging>
		{
			MSAWindowManagerLogging * get(void (*)());
		};

		struct static_lazy<MTCUILogging>
		{
			MTCUILogging * get(void (*)());
		};

		struct static_lazy<MTCUITelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			MTCUITelemetry * get(void (*)());
		};

		struct static_lazy<ModalExperienceManagerTelemetry>
		{
			ModalExperienceManagerTelemetry * get(void (*)());
		};

		struct static_lazy<ModernShareLogging>
		{
			ModernShareLogging * get(void (*)());
		};

		struct static_lazy<MonitorManagerLogging>
		{
			MonitorManagerLogging * get(void (*)());
		};

		struct static_lazy<NotesManagerLogging>
		{
			NotesManagerLogging * get(void (*)());
		};

		struct static_lazy<OOBEHealthLogging>
		{
			OOBEHealthLogging * get(void (*)());
		};

		struct static_lazy<OpenWithLogging>
		{
			OpenWithLogging * get(void (*)());
		};

		struct static_lazy<OpenWithTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			OpenWithTelemetry * get(void (*)());
		};

		namespace static_lazy<OverlayModeTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<OverrideScalingLogging>
		{
			OverrideScalingLogging * get(void (*)());
		};

		struct static_lazy<OverrideScalingTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			OverrideScalingTelemetry * get(void (*)());
		};

		struct static_lazy<PWSExperienceManagerLogging>
		{
			PWSExperienceManagerLogging * get(void (*)());
		};

		struct static_lazy<PenSignalManagerLogging>
		{
			PenSignalManagerLogging * get(void (*)());
		};

		namespace static_lazy<PerfTrack::AppLaunchTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<PlayToReceiverManagerLogging>
		{
			PlayToReceiverManagerLogging * get(void (*)());
		};

		struct static_lazy<PlayToReceiverManagerTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			PlayToReceiverManagerTelemetry * get(void (*)());
		};

		struct static_lazy<ProjectionManagerLogging>
		{
			ProjectionManagerLogging * get(void (*)());
		};

		struct static_lazy<ProjectionManagerTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			ProjectionManagerTelemetry * get(void (*)());
		};

		struct static_lazy<QuietHoursServiceTraceProvider>
		{
			QuietHoursServiceTraceProvider * get(void (*)());
		};

		struct static_lazy<ScalingCompatLogging>
		{
			ScalingCompatLogging * get(void (*)());
		};

		namespace static_lazy<ScalingCompatTelemetry::CScalingCompatTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

		};

		struct static_lazy<SettingsAppLogging>
		{
			SettingsAppLogging * get(void (*)());
		};

		struct static_lazy<ShareUXLogging>
		{
			ShareUXLogging * get(void (*)());
		};

		struct static_lazy<ShellExperienceDispatcherLogging>
		{
			ShellExperienceDispatcherLogging * get(void (*)());
		};

		struct static_lazy<SingleViewExperienceLogging>
		{
			SingleViewExperienceLogging * get(void (*)());
		};

		struct static_lazy<SoftLandingLogging>
		{
			SoftLandingLogging * get(void (*)());
		};

		struct static_lazy<SoftLandingTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			SoftLandingTelemetry * get(void (*)());
		};

		struct static_lazy<StoreFrontHelperTelemetry>
		{
			StoreFrontHelperTelemetry * get(void (*)());
		};

		struct static_lazy<TabletModeControllerTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			TabletModeControllerTelemetry * get(void (*)());
		};

		struct static_lazy<TouchPadGestureTelemetryImpl>
		{
			struct Completer
			{
				~Completer();
			};

			TouchPadGestureTelemetryImpl * get(void (*)());
		};

		struct static_lazy<TwinUISwitcherLogging>
		{
			TwinUISwitcherLogging * get(void (*)());
		};

		struct static_lazy<WindowManagementLogging>
		{
			WindowManagementLogging * get(void (*)());
		};

		struct static_lazy<WindowMessageServiceLogging>
		{
			WindowMessageServiceLogging * get(void (*)());
		};

		struct static_lazy<Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry>
		{
			Windows::Internal::PlatformExtensions::Details::PlatformExtensionsTelemetry * get(void (*)());
		};

		struct static_lazy<Windows::Internal::Shell::Chaining::ChainLinkTraceLogging>
		{
			Windows::Internal::Shell::Chaining::ChainLinkTraceLogging * get(void (*)());
		};

		struct wnf_array_subscription_state<_WNF_KSCAMERA_STREAMSTATE_INFO>
		{
			virtual ~wnf_array_subscription_state<_WNF_KSCAMERA_STREAMSTATE_INFO>();
		};

		struct wnf_array_subscription_state<unsigned short>
		{
			virtual ~wnf_array_subscription_state<unsigned short>();
		};

		struct wnf_subscription_state<CreativeFramework::Triggers::WnfContentIdPathData>
		{
			virtual ~wnf_subscription_state<CreativeFramework::Triggers::WnfContentIdPathData>();
		};

		struct wnf_subscription_state<_POWER_SCENARIO_CHANGE_NOTIFICATION_DATA>
		{
			virtual ~wnf_subscription_state<_POWER_SCENARIO_CHANGE_NOTIFICATION_DATA>();
		};

		struct wnf_subscription_state<__MIDL___MIDL_itf_rmuiapi_0000_0000_0001>
		{
			virtual ~wnf_subscription_state<__MIDL___MIDL_itf_rmuiapi_0000_0000_0001>();
		};

		struct wnf_subscription_state<empty_wnf_state>
		{
			virtual ~wnf_subscription_state<empty_wnf_state>();
		};

		struct wnf_subscription_state<int>
		{
			virtual ~wnf_subscription_state<int>();
			void InternalCallback<int>(int const *,unsigned long);
		};

		struct wnf_subscription_state<unsigned long>
		{
			virtual ~wnf_subscription_state<unsigned long>();
			void InternalCallback<unsigned long>(unsigned long const *,unsigned long);
		};

		struct wnf_subscription_state_base
		{
			virtual ~wnf_subscription_state_base();
		};

		FEATURE_ENABLED_STATE WilApiImpl_GetFeatureEnabledState(unsigned int,FEATURE_CHANGE_TIME,int *);
		bool (* g_pfnGetModuleInformation)(void *,unsigned int *,char *,unsigned __int64);
		bool GetModuleInformation(void *,unsigned int *,char *,unsigned __int64);
		bool GetModuleInformationFromAddress(void *,unsigned int *,char *,unsigned __int64);
		bool IsFeatureConfigured(wil_FeatureState *,unsigned int,bool,wil_FeatureStore,int *);
		bool g_processShutdownInProgress;
		bool g_resultMessageCallbackSet;
		char const * (* g_pfnGetModuleName)();
		char const * GetCurrentModuleName();
		com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy> CreateCloudStoreDefault(Windows::Internal::Storage::Cloud::CloudStoreOptions,Windows::System::IUser *,Windows::Security::Credentials::IWebAccount *,unsigned short const *);
		com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreFactory,err_exception_policy> GetActivationFactory<Windows::Internal::Storage::Cloud::ICloudStoreFactory>(unsigned short const *);
		details_abi::ProcessLocalStorage<details_abi::ProcessLocalData> g_processLocalData;
		details_abi::ThreadLocalStorage<details::ThreadFailureCallbackHolder *> * g_pThreadFailureCallbacks;
		details_abi::ThreadLocalStorage<details::ThreadFailureCallbackHolder *> g_threadFailureCallbacks;
		int RecordException(long);
		int RecordFailFast(long);
		int RecordLog(long);
		int RecordReturn(long);
		long (* g_pfnRtlDisownModuleHeapAllocation)(void *,void *);
		long (* g_pfnRunFunctorWithExceptionFilter)(details::IFunctor &,details::IFunctorHost &,void *);
		long GetLastErrorFailHr();
		long NtStatusToHr(long);
		long RecognizeCaughtExceptionFromCallback(unsigned short *,unsigned __int64);
		long ReportFailure_CaughtException(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,SupportedExceptions);
		long ReportFailure_CaughtExceptionCommon(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,unsigned short *,unsigned __int64,SupportedExceptions);
		long ReportFailure_CaughtExceptionMsg(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,char const *,char *);
		long ReportFailure_GetLastErrorHr(void *,unsigned int,char const *,char const *,char const *,void *,FailureType);
		long ReportFailure_NtStatus(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long);
		long ReportFailure_Win32(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,unsigned long);
		long ResultFromCaughtExceptionInternal(unsigned short *,unsigned __int64,bool *);
		long RtlDisownModuleHeapAllocation(void *,void *);
		long RunFunctor(details::IFunctor &,details::IFunctorHost &);
		long RunFunctorWithExceptionFilter(details::IFunctor &,details::IFunctorHost &,void *);
		long StringCchPrintfA(char *,unsigned __int64,char const *,...);
		long WaitForCompletion<Windows::Foundation::IAsyncAction *>(Windows::Foundation::IAsyncAction *,tagCOWAIT_FLAGS,unsigned long,bool *);
		long WaitForCompletion<Windows::Foundation::IAsyncOperation<Windows::Services::TargetedContent::TargetedContentContainer *> *>(Windows::Foundation::IAsyncOperation<Windows::Services::TargetedContent::TargetedContentContainer *> *,tagCOWAIT_FLAGS,unsigned long,bool *);
		long WaitForCompletion<Windows::Foundation::IAsyncOperation<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *> *>(Windows::Foundation::IAsyncOperation<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *> *,tagCOWAIT_FLAGS,unsigned long,bool *);
		long WaitForCompletion<Windows::Foundation::IAsyncOperation<bool> *>(Windows::Foundation::IAsyncOperation<bool> *,tagCOWAIT_FLAGS,unsigned long,bool *);
		shutdown_aware_object<details::EnabledStateManager> g_enabledStateManager;
		shutdown_aware_object<details::FeatureStateManager> g_featureStateManager;
		unsigned __int64 ResultStringSize(char const *);
		unsigned __int64 ResultStringSize(unsigned short const *);
		unsigned char (* g_pfnDllShutdownInProgress)();
		unsigned char * WriteResultString<char const *>(unsigned char *,unsigned char *,char const *,char const * *);
		unsigned char * WriteResultString<unsigned short const *>(unsigned char *,unsigned char *,unsigned short const *,unsigned short const * *);
		unsigned char RtlDllShutdownInProgress();
		unsigned int WilApiImpl_GetFeatureVariant(unsigned int,FEATURE_CHANGE_TIME,unsigned int *,int *,int *);
		unsigned int WilApi_GetFeatureVariant(unsigned int,FEATURE_CHANGE_TIME,unsigned int *,int *,int *);
		unsigned long (* g_pfnRtlNtStatusToDosErrorNoTeb)(long);
		unsigned long GetLastErrorFail(void *,unsigned int,char const *,char const *,char const *,void *);
		unsigned long ReportFailure_GetLastError(void *,unsigned int,char const *,char const *,char const *,void *,FailureType);
		unsigned long ReportFailure_GetLastErrorMsg(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,char const *,char *);
		unsigned long RtlNtStatusToDosErrorNoTeb(long);
		unsigned short * LogStringPrintf(unsigned short *,unsigned short const *,unsigned short const *,...);
		void (* g_pfnDebugBreak)();
		void (* g_pfnFailFastInLoaderCallout)();
		void (* g_pfnGetContextAndNotifyFailure)(FailureInfo *,char *,unsigned __int64);
		void (* g_pfnLoggingCallback)(FailureInfo const &);
		void (* g_pfnOriginateCallback)(FailureInfo const &);
		void (* g_pfnRaiseFailFastException)(_EXCEPTION_RECORD *,_CONTEXT *,unsigned long);
		void (* g_pfnRethrow)();
		void (* g_pfnTelemetryCallback)(bool,FailureInfo const &);
		void (* g_pfnThrowResultException)(FailureInfo const &);
		void * ProcessHeapAlloc(unsigned long,unsigned __int64);
		void CloseHandle(void *);
		void DebugBreak();
		void FailFastInLoaderCallout();
		void FeatureLoggingHook(unsigned int,FEATURE_LOGGED_TRAITS const *,FEATURE_ERROR const *,int,wil_ReportingKind const *,wil_VariantReportingKind const *,unsigned char,unsigned __int64);
		void FreeProcessHeap(void *);
		void GetContextAndNotifyFailure(FailureInfo *,char *,unsigned __int64);
		void LogFailure(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,unsigned short const *,bool,unsigned short *,unsigned __int64,char *,unsigned __int64,FailureInfo *);
		void MaybeGetExceptionString(ResultException const &,unsigned short *,unsigned __int64);
		void MaybeGetExceptionString(exception const &,unsigned short *,unsigned __int64);
		void PrintLoggingMessage(unsigned short *,unsigned __int64,char const *,char *);
		void RecordFeatureUsageCallback(unsigned int,wil_details_ServiceReportingKind,unsigned int,wil_details_FeatureReportingCache *,wil_details_RecordUsageResult *);
		void RecordSRUMFeatureUsage(unsigned int,unsigned int,unsigned int);
		void ReleaseMutex(void *);
		void ReportFailure(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,unsigned short const *,details::ReportFailureOptions);
		void ReportFailure_Hr(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long);
		void ReportFailure_HrMsg(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,char const *,char *);
		void ReportFailure_Msg(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,char const *,char *);
		void ReportFeatureCaughtException(ThreadErrorContext &,unsigned int,DiagnosticsInfo const &,void *);
		void ReportFeatureError(long,ThreadErrorContext &,unsigned int,DiagnosticsInfo const &);
		void ResetEvent(void *);
		void Rethrow();
		void SetEvent(void *);
		void ThrowResultExceptionInternal(FailureInfo const &);
		void UnregisterWilFeatureConfigurationChange(void *);
		void UnsubscribeProcessWideUsageFlush(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
		void UnsubscribeWilWnf(__WIL__WNF_USER_SUBSCRIPTION *);
		void WilApiImpl_RecordFeatureError(unsigned int,FEATURE_ERROR const *);
		void WilApiImpl_RecordFeatureUsage(unsigned int,unsigned int,unsigned int,char const *);
		void WilApiImpl_SubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
		void WilApiImpl_UnsubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
		void WilApi_RecordFeatureUsage(unsigned int,unsigned int,unsigned int,char const *);
		void WilApi_UnsubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
		void WilDynamicLoadRaiseFailFastException(_EXCEPTION_RECORD *,_CONTEXT *,unsigned long);
		void WilFailFast(FailureInfo const &);
		void WilRaiseFailFastException(_EXCEPTION_RECORD *,_CONTEXT *,unsigned long);
		void delete_event_watcher_state(details::event_watcher_state *);
		void delete_wnf_subscription_state(details::wnf_subscription_state_base *);
		void release_operation_guard_reference(operation_guard *);
		wistd::unique_ptr<_TOKEN_USER,wistd::default_delete<_TOKEN_USER> > GetTokenInfoWrap<_TOKEN_USER,err_exception_policy,0>(void *);
	};

	namespace details_abi
	{
		class FeatureStateData
		{
			void RetrieveUsageUnderLock(UsageIndexes &);
		public:
			bool RecordFeatureError(unsigned int,FEATURE_ERROR const &);
			void ProcessShutdown();
			void RecordUsage();
		};

		struct ProcessLocalStorage<ProcessLocalData>
		{
			~ProcessLocalStorage<ProcessLocalData>();
		};

		struct ProcessLocalStorageData<FeatureStateData>
		{
			static long Acquire(char const *,ProcessLocalStorageData<FeatureStateData> * *);
		};

		struct ProcessLocalStorageData<ProcessLocalData>
		{
			static long Acquire(char const *,ProcessLocalStorageData<ProcessLocalData> * *);
			~ProcessLocalStorageData<ProcessLocalData>();
		};

		class RawUsageIndex
		{
			bool RecordUsageInternal(void *,unsigned __int64,void *,unsigned __int64,unsigned int);
		public:
			RawUsageIndex(unsigned short,unsigned short,CountSize,unsigned short,CountSize);
			bool Iterate(wistd::function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>);
			bool RecordUsage(void *,unsigned __int64,void *,unsigned __int64,unsigned int);
			void SetBuffer(void *,unsigned __int64,unsigned __int64);
			void Swap(RawUsageIndex &);
		};

		class SemaphoreValue
		{
			long CreateFromValueInternal(unsigned short const *,bool,unsigned __int64);
			static long GetValueFromSemaphore(void *,long *);
			static long TryGetValueInternal(unsigned short const *,bool,unsigned __int64 *,bool *);
		public:
			static long TryGetPointer(unsigned short const *,void * *);
			void Destroy();
		};

		struct SerializedFailure
		{
			static bool Serialize(FEATURE_ERROR const &,unsigned __int64 *,void *,unsigned __int64);
		};

		struct SubscriptionList
		{
			SubscriptionList();
			void OnSignaled(srwlock &);
			void SubscribeUnderLock(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
			void Unsubscribe(srwlock &,FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
		};

		struct ThreadLocalData
		{
			bool GetCaughtExceptionError(FailureInfo &,unsigned int,DiagnosticsInfo const *,long,void *);
			bool GetLastError(FailureInfo &,unsigned int,long);
			void Clear();
			void SetLastError(FailureInfo const &);
		};

		struct ThreadLocalFailureInfo
		{
			void Get(FailureInfo &);
			void Set(FailureInfo const &,unsigned int);
		};

		struct ThreadLocalStorage<details::ThreadFailureCallbackHolder *>
		{
			details::ThreadFailureCallbackHolder * * GetLocal(bool);
			~ThreadLocalStorage<details::ThreadFailureCallbackHolder *>();
		};

		struct UsageIndexProperty
		{
			bool Read(unsigned char * &,unsigned char *);
			bool Write(unsigned char * &,unsigned char *);
			int Compare(void *,unsigned __int64);
			unsigned __int64 GetSize();
			void UpdateCount(unsigned int);
		};

		struct UsageIndexes
		{
			UsageIndexes();
			void Record();
			~UsageIndexes();
		};

		struct heap_buffer
		{
			bool ensure(unsigned __int64);
			bool push_back(void const *,unsigned __int64);
			bool reserve(unsigned __int64);
		};

		details_abi::ProcessLocalStorage<details_abi::ProcessLocalData> * g_pProcessLocalData;
		details_abi::ThreadLocalData * GetThreadLocalDataCache(bool);
		void RecordWnfUsageIndex(__WIL__WNF_STATE_NAME const *,unsigned __int64,details_abi::RawUsageIndex const &);
	};

	struct manually_managed_shutdown_aware_object<details::EnabledStateManager>
	{
		void construct();
		void destroy();
	};

	struct manually_managed_shutdown_aware_object<details::FeatureStateManager>
	{
		void construct();
		void destroy();
	};

	struct slim_event_t<1>
	{
		bool wait();
	};

	struct vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::Package *>,err_exception_policy>
	{
		struct vector_iterator
		{
			~vector_iterator();
		};

		vector_range<Windows::Foundation::Collections::IVectorView<Windows::Internal::StateRepository::Package *>,err_exception_policy>::vector_iterator end();
	};

	struct vector_range_nothrow<Windows::Foundation::Collections::IVectorView<Windows::Internal::AssignedAccess::AssignedAccessUserInfo *> >
	{
		void get_at_current(unsigned int);
	};

	struct vector_range_nothrow<Windows::Foundation::Collections::IVectorView<Windows::Internal::Feedback::FeedbackItem *> >
	{
		void get_at_current(unsigned int);
		~vector_range_nothrow<Windows::Foundation::Collections::IVectorView<Windows::Internal::Feedback::FeedbackItem *> >();
	};

	struct window_dc
	{
		static void close(window_dc);
	};

	bool (* g_pfnIsDebuggerPresent)();
	bool (* g_pfnWilFailFast)(wil::FailureInfo const &);
	bool ProcessShutdownInProgress();
	bool g_fBreakOnFailure;
	bool g_fIsDebuggerPresent;
	long (* g_pfnResultFromCaughtException)();
	long GetFailureLogString(unsigned short *,unsigned __int64,wil::FailureInfo const &);
	long ResultFromCaughtException();
	long com_agile_query_nothrow<Microsoft::WRL::ComPtr<IInspectable> &>(Microsoft::WRL::ComPtr<IInspectable> &,IAgileReference * *,AgileReferenceOptions);
	long get_token_information_nothrow<_TOKEN_USER,0>(wistd::unique_ptr<_TOKEN_USER,wistd::default_delete<_TOKEN_USER> > &,void *);
	long wnf_query_nothrow<_POWER_SCENARIO_CHANGE_NOTIFICATION_DATA>(_WNF_STATE_NAME const &,bool *,_POWER_SCENARIO_CHANGE_NOTIFICATION_DATA *,wil::WNF_CHANGE_STAMP_STRUCT *);
	long wnf_query_nothrow<_WNF_LM_APP_LICENSE_EVENT_DATA>(_WNF_STATE_NAME const &,bool *,_WNF_LM_APP_LICENSE_EVENT_DATA *,wil::WNF_CHANGE_STAMP_STRUCT *);
	long wnf_query_nothrow<_WNF_LM_PACKAGE_SUSPEND_REQUIRED_DATA>(_WNF_STATE_NAME const &,bool *,_WNF_LM_PACKAGE_SUSPEND_REQUIRED_DATA *,wil::WNF_CHANGE_STAMP_STRUCT *);
	long wnf_query_nothrow<unsigned long>(_WNF_STATE_NAME const &,bool *,unsigned long *,wil::WNF_CHANGE_STAMP_STRUCT *);
	unsigned short const * find_last_path_segment(unsigned short const *);
	void RethrowCaughtException();
	void SetLastError(wil::FailureInfo const &);
	void SetResultTelemetryFallback(void (*)(bool,wil::FailureInfo const &));
	wil::com_ptr_t<IAgileReference,wil::err_exception_policy> com_agile_query<IServiceProvider * &>(IServiceProvider * &,AgileReferenceOptions);
	wil::com_ptr_t<IServiceProvider,wil::err_exception_policy> com_query<IServiceProvider,com_ptr_t<IAgileReference,err_exception_policy> &>(wil::com_ptr_t<IAgileReference,wil::err_exception_policy> &);
	wil::com_ptr_t<Windows::Internal::StateRepository::IPackageFamilyStatics,wil::err_exception_policy> GetActivationFactory<Windows::Internal::StateRepository::IPackageFamilyStatics>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::StateRepository::IPackageStatics,wil::err_exception_policy> GetActivationFactory<Windows::Internal::StateRepository::IPackageStatics>(unsigned short const *);
	wil::com_ptr_t<Windows::Management::Deployment::Internal::IPackageManagerInternal,wil::err_exception_policy> ActivateInstance<Windows::Management::Deployment::Internal::IPackageManagerInternal>(unsigned short const *);
	wil::com_ptr_t<Windows::System::Profile::IEducationSettingsStatics,wil::err_exception_policy> GetActivationFactory<Windows::System::Profile::IEducationSettingsStatics>(unsigned short const *);
	wistd::unique_ptr<KnownGameList::GMRelatedProcess [0],wil::function_deleter<void (*)(void *),&void CoTaskMemFree(void *)> > make_unique_cotaskmem_nothrow<KnownGameList::GMRelatedProcess [0]>(unsigned __int64);
	wistd::unique_ptr<_GUID [0],wistd::default_delete<_GUID [0]> > make_unique_nothrow<_GUID [0]>(unsigned __int64);
	wistd::unique_ptr<tagRECT [0],wil::function_deleter<void (*)(void *),&void CoTaskMemFree(void *)> > make_unique_cotaskmem_nothrow<tagRECT [0]>(unsigned __int64);
	wistd::unique_ptr<unsigned short [0],wistd::default_delete<unsigned short [0]> > make_unique_nothrow<unsigned short [0]>(unsigned __int64);
};

namespace wistd
{
	namespace __function
	{
		struct __func<<lambda_1270c61b6aa5a9d53fb2a200659f5a0b>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_1440ad00aecfc62cef9a027d69052829>,void ()>
		{
			virtual void __clone(__base<void ()> *);
			virtual void __move(__base<void ()> *);
			virtual void destroy();
			virtual void operator()();
		};

		struct __func<<lambda_177f885874e5dbb087afd88a0fdceb47>,long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> *)>
		{
			virtual void __clone(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> *)> *);
			virtual void __move(__base<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_22b29394cce4f5b532d8017d9ea441e0>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_233c39743297002cdf3755857b2c1972>,long (Windows::Internal::PlatformExtensions::Details::ExtensionRegistration const *,bool,bool *)>
		{
			virtual void __clone(__base<long (Windows::Internal::PlatformExtensions::Details::ExtensionRegistration const *,bool,bool *)> *);
			virtual void __move(__base<long (Windows::Internal::PlatformExtensions::Details::ExtensionRegistration const *,bool,bool *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_249509923af87f6585b52fe2ec73553d>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_2a60d4507bfbd943bc5dae464d704ba2>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_30bfe5059f6b039907141bbab87933a6>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_53c49f66d44cbcfb37b7a439d6d279a0>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_59417f5883afab7ae77057a8266662f6>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_5ca10be2184c00a8498991bb789c6d13>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_63cba2399be7b7ddfb0cc6753f4319db>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_6c4cc57c5f15153226539c2f4fc5fdd3>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_7d7192d2aa37bb1bb7a7cc0f5edb00d8>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_7de15694039c0fb0c9a5338c14c783f4>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_7f24983b1a83aaccdf04480eb4aca37b>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_89fdd01574f863cc8d1912f8b4a7f9f9>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_8db0ce862824541f40dfb767113f1e28>,bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>
		{
			virtual void __clone(__base<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)> *);
			virtual void __move(__base<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)> *);
			virtual void destroy();
		};

		struct __func<<lambda_beb4fad464f10757ed59469ee0ae8c52>,long (Windows::Internal::PlatformExtensions::Details::ExtensionRegistration const *,bool,bool *)>
		{
			virtual void __clone(__base<long (Windows::Internal::PlatformExtensions::Details::ExtensionRegistration const *,bool,bool *)> *);
			virtual void __move(__base<long (Windows::Internal::PlatformExtensions::Details::ExtensionRegistration const *,bool,bool *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_c77ebd57e75c5492ee747e3492d1d178>,long (unsigned short *,unsigned __int64,unsigned __int64 *)>
		{
			virtual void __clone(__base<long (unsigned short *,unsigned __int64,unsigned __int64 *)> *);
			virtual void __move(__base<long (unsigned short *,unsigned __int64,unsigned __int64 *)> *);
			virtual void destroy();
		};

		struct __func<<lambda_d63049db28db707a7bf81452b9eb29dd>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_e7f27465a6a62ba440d1f6dc1e10acd4>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<<lambda_eed8c0ae914be24852732a43a103fd0e>,long (unsigned long)>
		{
			virtual void __clone(__base<long (unsigned long)> *);
			virtual void __move(__base<long (unsigned long)> *);
			virtual void destroy();
		};

		struct __func<std::_Bind<1,void,std::_Pmf_wrap<void ( NotesManager::*)(),void,NotesManager,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>,NotesManager *,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>,void ()>
		{
			virtual void __clone(__base<void ()> *);
			virtual void __move(__base<void ()> *);
			virtual void destroy();
			virtual void operator()();
		};

	};

	struct function<bool (unsigned short const *)>
	{
		~function<bool (unsigned short const *)>();
	};

	struct function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>
	{
		~function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>();
	};

	struct function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> *)>
	{
		~function<long (Windows::Foundation::ITypedEventHandler<Windows::Internal::Shell::ModalExperience::IModalWindowExperienceManager *,Windows::Internal::Shell::ModalExperience::IModalExperienceEventArgs *> *)>();
	};

	struct function<long (Windows::Internal::PlatformExtensions::Details::ExtensionRegistration const *,bool,bool *)>
	{
		~function<long (Windows::Internal::PlatformExtensions::Details::ExtensionRegistration const *,bool,bool *)>();
	};

	struct function<long (unsigned short *,unsigned __int64,unsigned __int64 *)>
	{
		long operator()(unsigned short *,unsigned __int64,unsigned __int64 *);
		~function<long (unsigned short *,unsigned __int64,unsigned __int64 *)>();
	};

	struct function<void ()>
	{
		void operator()();
		~function<void ()>();
	};

	struct function<void (CreativeFramework::Triggers::WnfContentIdPathData const &)>
	{
		~function<void (CreativeFramework::Triggers::WnfContentIdPathData const &)>();
	};

	struct function<void (_POWER_SCENARIO_CHANGE_NOTIFICATION_DATA const &)>
	{
		~function<void (_POWER_SCENARIO_CHANGE_NOTIFICATION_DATA const &)>();
	};

	struct function<void (_WNF_KSCAMERA_STREAMSTATE_INFO const *,unsigned __int64)>
	{
		~function<void (_WNF_KSCAMERA_STREAMSTATE_INFO const *,unsigned __int64)>();
	};

	struct function<void (__MIDL___MIDL_itf_rmuiapi_0000_0000_0001 const &)>
	{
		~function<void (__MIDL___MIDL_itf_rmuiapi_0000_0000_0001 const &)>();
	};

	struct function<void (int const &)>
	{
		~function<void (int const &)>();
	};

	struct function<void (unsigned long const &)>
	{
		~function<void (unsigned long const &)>();
	};

	struct function<void (unsigned short const *,unsigned __int64)>
	{
		~function<void (unsigned short const *,unsigned __int64)>();
	};

	struct unique_ptr<DirectUI::Element,SafeElementDeleter>
	{
		void reset(DirectUI::Element *);
		~unique_ptr<DirectUI::Element,SafeElementDeleter>();
	};

	struct unique_ptr<_GUID [0],default_delete<_GUID [0]> >
	{
		~unique_ptr<_GUID [0],default_delete<_GUID [0]> >();
	};

	struct unique_ptr<_TOKEN_USER,default_delete<_TOKEN_USER> >
	{
		~unique_ptr<_TOKEN_USER,default_delete<_TOKEN_USER> >();
	};

	struct unique_ptr<char,default_delete<char> >
	{
		~unique_ptr<char,default_delete<char> >();
	};

	struct unique_ptr<unsigned char [0],default_delete<unsigned char [0]> >
	{
		~unique_ptr<unsigned char [0],default_delete<unsigned char [0]> >();
	};

	struct unique_ptr<unsigned short [0],default_delete<unsigned short [0]> >
	{
		~unique_ptr<unsigned short [0],default_delete<unsigned short [0]> >();
	};

};

;
?AddRunningShareEntry@@YAJAEBU_GUID@@PEAUSHARING_ACTIVATION_INFO@@KKPEAUHWND__@@$$QEAVAgileGitPtr@@33@Z;
ActionCastMapping const * GetActionCast(unsigned short const *);
AnimatedTouchButton * element_cast<AnimatedTouchButton>(DirectUI::Element *);
AppItemList * element_cast<AppItemList>(DirectUI::Element *);
CAutoplayUIManager g_AutoplayUIManager;
CDUIResourceManager g_AccountActionsDUIResourceManager;
CDUIResourceManager g_AccountsSettingsDUIResourceManager;
CDUIResourceManager g_AutoPlayDUILifetimeManager;
CDUIResourceManager g_DUIresmgrTileUIFactory;
CDUIResourceManager g_ImmersiveOpenWithDUILifetimeManager;
CDUIResourceManager g_PermissionsDUIResourceManager;
CDUIResourceManager g_SettingsDUIResourceManager;
CDUIResourceManager g_SharingAndDevicesDUILifetimeManager;
CDUIResourceManager g_appCrashUIResourceManager;
CDUIResourceManager g_resmgrActivationErrorPopupDUI;
CDUIResourceManager g_resmgrHardwareButtonFlyout;
CDUIResourceManager g_resmgrLockScreenFlyoutDUI;
CDUIResourceManager g_resmgrSplashScreenDUI;
CKoreanDecomposition g_koreanDecomposition;
CLauncherSettings g_launcherSettings;
CScriptAutoDetection g_scriptAutoDetection;
CTimeZoneInformationCache_InitOnDemand g_tziCache;
ClientRevisionNumber g_clientRevisionNumber;
CloudExperienceHostResult GetCloudExperienceHostResult();
CloudExperienceHostResult GetCloudExperienceHostResultFromString(unsigned short const *);
D3DKMT_MIRACAST_DEVICE_STATUS HolographicStartMiracastDisplayDeviceEx(_D3DKMT_MIRACAST_START *);
DEVICE_SCALE_FACTOR GetLegacyModernScaleFactor(unsigned long);
DEVICE_SCALE_FACTOR GetLegacyPhoneScaleFactor(tagSIZE,tagSIZE);
DEVICE_SCALE_FACTOR GetScaleFactorForRect(tagRECT const &);
DEVICE_SCALE_FACTOR g_legacyCompatScalingOverride;
DISPLAYCONFIG_TOPOLOGY_ID CcdGetDisplayProjectionMode();
DPI_AWARENESS_CONTEXT__ * (* s_pfnGetWindowDpiAwarenessContext)(HWND__ *);
DirectUI::Element * DUI_BubbleGetAdjacent(DirectUI::Element *,DirectUI::Element *,int);
DirectUI::Element * DUI_ElementGetAdjacent(DirectUI::Element *,DirectUI::Element *,DirectUI::Element *,int);
DirectUI::Element * DUI_GetElementChild(DirectUI::Element *,int);
DirectUI::Element * _FindAncestorElement(DirectUI::Element *,DirectUI::IClassInfo *);
DirectUI::Element * _FindDescendentElement(DirectUI::Element *,DirectUI::IClassInfo *);
DirectUI::Element * _WalkChildElements(DirectUI::Element *,DirectUI::IClassInfo *);
DirectUI::Element * element_cast<DirectUI::Element>(DirectUI::Element *);
DirectUI::HWNDElement * element_cast<DirectUI::HWNDElement>(DirectUI::Element *);
DirectUI::ItemList * element_cast<DirectUI::ItemList>(DirectUI::Element *);
DirectUI::RichText * element_cast<DirectUI::RichText>(DirectUI::Element *);
DirectUI::TouchButton * element_cast<DirectUI::TouchButton>(DirectUI::Element *);
DirectUI::TouchCheckBox * element_cast<DirectUI::TouchCheckBox>(DirectUI::Element *);
DirectUI::TouchScrollViewer * element_cast<DirectUI::TouchScrollViewer>(DirectUI::Element *);
DirectUI::Value * DUI_ShellStyleSheet_GetSheetCB(unsigned short const *,void *);
EnterpriseChromeManager * g_enterpriseChromeManager;
FEATURE_ENABLED_STATE (* g_wil_details_apiGetFeatureEnabledState)(unsigned int,FEATURE_CHANGE_TIME,int *);
FEATURE_ENABLED_STATE (* g_wil_details_internalGetFeatureEnabledState)(unsigned int,FEATURE_CHANGE_TIME,int *);
FLYOUT_PLACEMENT WinRtPlacementToFlyoutPlacement(Windows::UI::Popups::Placement);
FlowUIBase * element_cast<FlowUIBase>(DirectUI::Element *);
HINSTANCE__ * GetShellStyleHInstance(unsigned short * *);
HINSTANCE__ * g_hInstance;
HINSTANCE__ * g_wil_details_ntdllModuleHandle;
HINSTANCE__ * wil_details_GetNtDllModuleHandle();
KGLUpdateLocationInfo * g_rgKGLUpdateLocations;
KIND_FLAGS GetKindFlags(IShellItem2 *);
KIND_FLAGS ParseKindFlags(tagPROPVARIANT const &);
LOCK_SCREEN_APPLICATION_CAPABILITIES GetRegisteredTypesForApp(unsigned short const *);
Microsoft::WRL::ComPtr<CRefCountedObject<CMarshalInterfaceOnce<IShellItem> > > CreateMarshaledInterface<IShellItem>(IShellItem *);
Microsoft::WRL::ComPtr<Microsoft::WRL::SimpleClassFactory<TabletModeToast,0> > g_toastFactory;
Microsoft::WRL::ComPtr<Windows::Foundation::IUriRuntimeClass> CreateAppLaunchUriFromComponents(unsigned short const *,unsigned short const *,unsigned short const *);
Microsoft::WRL::Details::CreatorMap const __object_AvailableNetworksExperienceFlowCF_COM;
Microsoft::WRL::Details::CreatorMap const __object_AvailableNetworksExperienceFlow_COM;
Microsoft::WRL::Details::CreatorMap const __object_BackTracker_COM;
Microsoft::WRL::Details::CreatorMap const __object_BroadcastDVRComponent_COM;
Microsoft::WRL::Details::CreatorMap const __object_CAccessibilityDock_COM;
Microsoft::WRL::Details::CreatorMap const __object_CActionExecutionBrokerCF_COM;
Microsoft::WRL::Details::CreatorMap const __object_CActionExecutionBroker_COM;
Microsoft::WRL::Details::CreatorMap const __object_CActivationErrorPopupFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_CActivationStoreHelper_COM;
Microsoft::WRL::Details::CreatorMap const __object_CAlarmApplicationManager;
Microsoft::WRL::Details::CreatorMap const __object_CAppCrusher_COM;
Microsoft::WRL::Details::CreatorMap const __object_CAppInstanceFolder_COM;
Microsoft::WRL::Details::CreatorMap const __object_CAppListTileFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_CApplicabilityCacheMonitor_COM;
Microsoft::WRL::Details::CreatorMap const __object_CApplicationPreLaunch_COM;
Microsoft::WRL::Details::CreatorMap const __object_CApplicationTargetingTracker_COM;
Microsoft::WRL::Details::CreatorMap const __object_CAudioFlyoutController_COM;
Microsoft::WRL::Details::CreatorMap const __object_CAutoPlayUI_COM;
Microsoft::WRL::Details::CreatorMap const __object_CBackstackManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CBamThrottleSettings_COM;
Microsoft::WRL::Details::CreatorMap const __object_CBrokeredAppointmentsManager;
Microsoft::WRL::Details::CreatorMap const __object_CCachedFileUpdateManager;
Microsoft::WRL::Details::CreatorMap const __object_CCompatibilityPolicyManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CConnectedSearchShellService_COM;
Microsoft::WRL::Details::CreatorMap const __object_CContactManagerBroker;
Microsoft::WRL::Details::CreatorMap const __object_CCortanaExperienceFlowCF_COM;
Microsoft::WRL::Details::CreatorMap const __object_CCortanaExperienceFlow_COM;
Microsoft::WRL::Details::CreatorMap const __object_CDeviceSettingsProvider_COM;
Microsoft::WRL::Details::CreatorMap const __object_CDevicesFlowCF_COM;
Microsoft::WRL::Details::CreatorMap const __object_CDevicesFlow_COM;
Microsoft::WRL::Details::CreatorMap const __object_CEdgeUiDeviceManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CEdgeUiManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CExtensionListContextMenu_COM;
Microsoft::WRL::Details::CreatorMap const __object_CGlobalRudeWindowManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CHostedApplicationActivationManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CIconicRepresentationLoader_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveHotkeyNotification_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveMonitorManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveMonitorNotificationServiceProxy_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveOpenWithUI_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveSessionIdleDetector_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveSettingsCache_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveShellHookService_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveShellNotifier_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveSplashScreenCF_COM;
Microsoft::WRL::Details::CreatorMap const __object_CImmersiveWindowMessageService_COM;
Microsoft::WRL::Details::CreatorMap const __object_CInputHostLayout_COM;
Microsoft::WRL::Details::CreatorMap const __object_CKeyboardOcclusionMitigation_COM;
Microsoft::WRL::Details::CreatorMap const __object_CLauncherTipContextMenu_COM;
Microsoft::WRL::Details::CreatorMap const __object_CLayoutManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CLegacyProcessLifetimeManagerProxy_COM;
Microsoft::WRL::Details::CreatorMap const __object_CLocalObjectCreator_COM;
Microsoft::WRL::Details::CreatorMap const __object_CLockScreen;
Microsoft::WRL::Details::CreatorMap const __object_CLockScreenApplicationManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CLockScreenCallBrokerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_CLockScreenSettingProvider_COM;
Microsoft::WRL::Details::CreatorMap const __object_CNotificationManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CNotificationsSettingProvider_COM;
Microsoft::WRL::Details::CreatorMap const __object_COverrideScaling_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPickerControllerInProcServer_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPlayToReceiverManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CPlaybackManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CProjectionManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CQuietHoursManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CRawInputProvider_COM;
Microsoft::WRL::Details::CreatorMap const __object_CRudeWindowManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSearchServicesProvider_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSearchSuggestionsService_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSettingsFlow_COM;
Microsoft::WRL::Details::CreatorMap const __object_CShareFlowCF_COM;
Microsoft::WRL::Details::CreatorMap const __object_CShareFlow_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSharePlatformHost_COM;
Microsoft::WRL::Details::CreatorMap const __object_CShellChromeControls_COM;
Microsoft::WRL::Details::CreatorMap const __object_CShellExperienceDispatcher_COM;
Microsoft::WRL::Details::CreatorMap const __object_CShellExperienceManagerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_CShellFeedbackService_COM;
Microsoft::WRL::Details::CreatorMap const __object_CShellSnapComponent_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSoftLandingManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSplashScreenEvents_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSplashScreenTimer_COM;
Microsoft::WRL::Details::CreatorMap const __object_CStorageLibraryUI_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSwitchThumbnailDeviceManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSyncIAMEventHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_CSyncSettingsProvider_COM;
Microsoft::WRL::Details::CreatorMap const __object_ClickNote_COM;
Microsoft::WRL::Details::CreatorMap const __object_CompactOverlayManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_CompactOverlayPositioner_COM;
Microsoft::WRL::Details::CreatorMap const __object_ComponentUIPlugin_COM;
Microsoft::WRL::Details::CreatorMap const __object_ContactCardExperienceContractRedirector;
Microsoft::WRL::Details::CreatorMap const __object_CredentialResetExperienceManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_DesktopAppXActivator_COM;
Microsoft::WRL::Details::CreatorMap const __object_DesktopAppXImmersiveBrokerInterop_COM;
Microsoft::WRL::Details::CreatorMap const __object_DesktopContactCardExperience;
Microsoft::WRL::Details::CreatorMap const __object_DesktopStoreRemediationHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_DevicesFlowExperienceFlowCF_COM;
Microsoft::WRL::Details::CreatorMap const __object_DevicesFlowExperienceFlow_COM;
Microsoft::WRL::Details::CreatorMap const __object_DialogManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_EDPNotificationHost_COM;
Microsoft::WRL::Details::CreatorMap const __object_EnterpriseChromeServiceProvider_COM;
Microsoft::WRL::Details::CreatorMap const __object_ExpansionExperienceController_COM;
Microsoft::WRL::Details::CreatorMap const __object_GamingOverlayExperienceManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_HostedApplicationExperienceManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_InkWorkspaceHostedAppsManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_ModalWindowExperienceManagerComponent_COM;
Microsoft::WRL::Details::CreatorMap const __object_MsaWindowManagerImpl_COM;
Microsoft::WRL::Details::CreatorMap const __object_NotesManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_OOBEExperienceManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_PackagedApplicationExecuteCommand_COM;
Microsoft::WRL::Details::CreatorMap const __object_PenSignalManagerImpl_COM;
Microsoft::WRL::Details::CreatorMap const __object_PublicShellFeedbackBroker_COM;
Microsoft::WRL::Details::CreatorMap const __object_QuietHoursService_COM;
Microsoft::WRL::Details::CreatorMap const __object_RemoteAppBrokerFactory_COM;
Microsoft::WRL::Details::CreatorMap const __object_RetailDemoHost_COM;
Microsoft::WRL::Details::CreatorMap const __object_ShellDropTarget_COM;
Microsoft::WRL::Details::CreatorMap const __object_ShellImmersiveComponentCreator_COM;
Microsoft::WRL::Details::CreatorMap const __object_ShellTargetingTracker_COM;
Microsoft::WRL::Details::CreatorMap const __object_StoreFrontHelper_COM;
Microsoft::WRL::Details::CreatorMap const __object_SttExperienceManager_COM;
Microsoft::WRL::Details::CreatorMap const __object_TabletModeController_COM;
Microsoft::WRL::Details::CreatorMap const __object_TouchpadActionsComponent_COM;
Microsoft::WRL::Details::CreatorMap const __object_TouchpadActionsGestureHandler_COM;
Microsoft::WRL::Details::CreatorMap const __object_TouchpadGestureComponent_COM;
Microsoft::WRL::Details::CreatorMap const __object_TransitionCoordinator_COM;
Microsoft::WRL::Details::CreatorMap const __object_WindowManagementEvents_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__AvailableNetworksExperienceFlowCF_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__AvailableNetworksExperienceFlow_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__BackTracker_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__BroadcastDVRComponent_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CAccessibilityDock_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CActionExecutionBrokerCF_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CActionExecutionBroker_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CActivationErrorPopupFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CActivationStoreHelper_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CAlarmApplicationManager;
Microsoft::WRL::Details::FactoryCache __objectFactory__CAppCrusher_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CAppInstanceFolder_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CAppListTileFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CApplicabilityCacheMonitor_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CApplicationPreLaunch_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CApplicationTargetingTracker_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CAudioFlyoutController_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CAutoPlayUI_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CBackstackManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CBamThrottleSettings_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CBrokeredAppointmentsManager;
Microsoft::WRL::Details::FactoryCache __objectFactory__CCachedFileUpdateManager;
Microsoft::WRL::Details::FactoryCache __objectFactory__CCompatibilityPolicyManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CConnectedSearchShellService_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CContactManagerBroker;
Microsoft::WRL::Details::FactoryCache __objectFactory__CCortanaExperienceFlowCF_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CCortanaExperienceFlow_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CDeviceSettingsProvider_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CDevicesFlowCF_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CDevicesFlow_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CEdgeUiDeviceManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CEdgeUiManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CExtensionListContextMenu_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CGlobalRudeWindowManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CHostedApplicationActivationManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CIconicRepresentationLoader_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveHotkeyNotification_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveMonitorManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveMonitorNotificationServiceProxy_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveOpenWithUI_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveSessionIdleDetector_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveSettingsCache_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveShellHookService_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveShellNotifier_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveSplashScreenCF_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CImmersiveWindowMessageService_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CInputHostLayout_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CKeyboardOcclusionMitigation_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CLauncherTipContextMenu_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CLayoutManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CLegacyProcessLifetimeManagerProxy_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CLocalObjectCreator_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CLockScreen;
Microsoft::WRL::Details::FactoryCache __objectFactory__CLockScreenApplicationManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CLockScreenCallBrokerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CLockScreenSettingProvider_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CNotificationManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CNotificationsSettingProvider_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__COverrideScaling_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPickerControllerInProcServer_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPlayToReceiverManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CPlaybackManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CProjectionManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CQuietHoursManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CRawInputProvider_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CRudeWindowManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSearchServicesProvider_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSearchSuggestionsService_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSettingsFlow_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CShareFlowCF_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CShareFlow_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSharePlatformHost_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CShellChromeControls_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CShellExperienceDispatcher_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CShellExperienceManagerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CShellFeedbackService_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CShellSnapComponent_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSoftLandingManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSplashScreenEvents_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSplashScreenTimer_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CStorageLibraryUI_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSwitchThumbnailDeviceManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSyncIAMEventHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CSyncSettingsProvider_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ClickNote_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CompactOverlayManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CompactOverlayPositioner_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ComponentUIPlugin_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ContactCardExperienceContractRedirector;
Microsoft::WRL::Details::FactoryCache __objectFactory__CredentialResetExperienceManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__DesktopAppXActivator_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__DesktopAppXImmersiveBrokerInterop_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__DesktopContactCardExperience;
Microsoft::WRL::Details::FactoryCache __objectFactory__DesktopStoreRemediationHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__DevicesFlowExperienceFlowCF_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__DevicesFlowExperienceFlow_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__DialogManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__EDPNotificationHost_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__EnterpriseChromeServiceProvider_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ExpansionExperienceController_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__GamingOverlayExperienceManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__HostedApplicationExperienceManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__InkWorkspaceHostedAppsManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ModalWindowExperienceManagerComponent_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__MsaWindowManagerImpl_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__NotesManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__OOBEExperienceManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PackagedApplicationExecuteCommand_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PenSignalManagerImpl_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__PublicShellFeedbackBroker_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__QuietHoursService_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__RemoteAppBrokerFactory_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__RetailDemoHost_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ShellDropTarget_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ShellImmersiveComponentCreator_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__ShellTargetingTracker_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__StoreFrontHelper_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__SttExperienceManager_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TabletModeController_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TouchpadActionsComponent_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TouchpadActionsGestureHandler_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TouchpadGestureComponent_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__TransitionCoordinator_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__WindowManagementEvents_COM;
MicrosoftTelemetryAssertTriggeredNode * g_MicrosoftTelemetryAssertsTriggeredList;
ORIENTATION_PREFERENCES GetOrientationPreferences(unsigned short const *);
PROPDESC_TYPE_FLAGS GetPropertyTypeFlags(_tagpropertykey const &,PROPDESC_TYPE_FLAGS);
ParsedAppLaunchUri ParseAppLaunchUriFromString(unsigned short const *);
PreviousShareLink * element_cast<PreviousShareLink>(DirectUI::Element *);
ProgressTile * element_cast<ProgressTile>(DirectUI::Element *);
QuickLinkTile * element_cast<QuickLinkTile>(DirectUI::Element *);
SJpegQuantizationTable const * const JpegQuantizationTables;
SharedModeType GetSharedModeType();
Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > g_spszConnect;
Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > g_spszError;
_DevicesHierarchyTile * rgDeviceHierarchyTiles;
_GUID CLSID_IsolatedMessageDialogFactory;
_GUID GetFirstRunTelemetryCorrelationId();
_GUID const GUID_CAUSALITY_WINDOWS_PLATFORM_ID;
_GUID const SID_ViewEventDispatcher;
_HIDDENITEMID const * ILFindFirstHiddenID(_ITEMIDLIST_RELATIVE const *);
_HIDDENITEMID const * ILFindHiddenIDOn(_ITEMIDLIST_RELATIVE const *,IDLHID,int);
_NgcPinResetScenarioState GetPinResetPolicyFailureState();
_RTL_RUN_ONCE g_InitOnce;
_RTL_RUN_ONCE s_InitOnce;
_RTL_SRWLOCK g_MicrosoftTelemetryAssertLock;
_RTL_SRWLOCK s_srwElsServiceLock;
__int64 TimerProc(HWND__ *,unsigned int,unsigned __int64,__int64);
__int64 WindowToTakeForegroundProc(HWND__ *,unsigned int,unsigned __int64,__int64);
bool AreAppDefaultsRestricted(unsigned short const *,ASSOC_MAKE_DEFAULT_FLAGS);
bool AreNewHandlersFound(AssocType,unsigned short const *,ASSOC_FILTER,IAssocHandler * *,IEnumAssocHandlers * *);
bool AreSystemTimesEqual(_SYSTEMTIME const &,_SYSTEMTIME const &);
bool AssocElementQueryExists(unsigned short const *,unsigned short const *);
bool CanAppFallbackWithoutNCB(IBackgroundTaskCapability *,unsigned short const *);
bool CanVolumeBeAdjusted(float,bool);
bool CheckIsDebuggerPresent(void *);
bool ElementIsValid(ISoftLandingQueryEntry *,IUIAutomationElement *);
bool FindSearchVisitedGroupId(__int64 *);
bool GetInstalledBrowserChannelInfo(BrowserChannels::ChannelId,BrowserChannels::InstallationLevel,BrowserChannels::Info *);
bool IShellItem_IsAdminShare(IShellItem *);
bool IShellItem_IsApp(IShellItem *);
bool IsAOAC();
bool IsAgile(IUnknown *);
bool IsApp(IShellItem *);
bool IsAppExecutionRestrictedToStore();
bool IsAppLockerErrorAndCustomSupportStringSuccessfullyRead(long);
bool IsAppNCBCapable(IBackgroundTaskCapability *,unsigned short const *);
bool IsAvailablePositionForApp(unsigned short const *,unsigned short const *,LOCK_SCREEN_APPLICATION_CAPABILITIES,ILockScreenApplicationManager *);
bool IsBackgroundExtensionContract(unsigned short const *);
bool IsCheckStateRepositoryMocked(bool *,unsigned char *);
bool IsCodeIntegrityError(long);
bool IsCredentialReset();
bool IsDesktopInputContext();
bool IsDeviceInterfaceEnabled(unsigned short const *);
bool IsFeaturedApplicationDisabled(Windows::Internal::ApplicationDefaults::ApplicationDefaultCategory);
bool IsFullscreenCXHRunning();
bool IsInternalPenWithMatchingMonitor(void *);
bool IsItemUnderStorageProvider(IShellItem *,unsigned short const *);
bool IsMiracastSupported();
bool IsNCBAvailableForApp(unsigned short const *,unsigned short const *);
bool IsPPIEdition();
bool IsProcessShutdownInProgress();
bool IsProgIdWin32Edge(unsigned short const *);
bool IsPropertyStringValueEqual(IUIAutomationElement *,int,unsigned short const *,PropertyConditionFlags,bool);
bool IsPropertyStringValueRegExMatch(IUIAutomationElement *,int,unsigned short const *,PropertyConditionFlags);
bool IsPropertyValueEqual<bool>(IUIAutomationElement *,int,bool,bool);
bool IsPropertyVariantValueEqual(IUIAutomationElement *,int,tagVARIANT &,bool);
bool IsRestrictedItemInSearch(IShellItem *);
bool IsRunningInContainerOS();
bool IsRunningInImmersiveSimulator();
bool IsRunningWdagContainer();
bool IsSessionConnected();
bool IsShellLauncherEnabledForCurrentUser();
bool IsSkyDriveAvailable();
bool IsSoftLandingEnabled(bool);
bool IsSoftLandingSupported();
bool IsSourceAppOrShareBrokerUnderDebugger(unsigned short const *);
bool IsStandardProxy(IUnknown *);
bool IsStartScreenFilterEnabled();
bool IsUiLanguageRtl();
bool IsUiaElementOnScreen(HWND__ *,IUIAutomationElement *);
bool IsUserOOBE();
bool IsUserOOBEOrCredentialReset();
bool IsVerbHandlerAppxPackaged(IAssociationArray *,unsigned short const *);
bool IsVerbHandlerAppxPackaged(IQueryAssociations *,unsigned short const *);
bool IsVerbHandlerAppxPackaged(unsigned short const *,unsigned short const *);
bool IsWin32EdgeAssociationRecommended(unsigned short const *);
bool IsWindowCloaked(HWND__ *);
bool IsWindowsServer();
bool ProximitySendSupportsDataPackage(Windows::ApplicationModel::DataTransfer::IDataPackage *);
bool ReducedVisualEffects();
bool STRINGS_ARE_EQUAL(unsigned short const *,unsigned short const *);
bool ShouldLaunchStoreForError(long);
bool ShouldPowershellReplaceCmd();
bool TryGetDominantColorFromHBITMAP(HBITMAP__ *,bool,bool,unsigned long *,bool *);
bool WICIsOrientationSupported(IWICBitmapDecoder *);
bool WinIsProximityProviderAvailable();
bool _GetNthMostDominantColorFromBits(tagRGBQUAD *,int,int,int,unsigned int,bool,bool,unsigned long *);
bool _ShouldAddItemToHistory(ConnectedSearchHistoryType,IShellItem *);
bool _ShouldCheckApartments(ApartmentCheckEnum);
bool _tlgGuidIsZero(_GUID const &);
bool operator==(UID (*const &)(),UID const &);
bool operator==(UID const &,UID (*const &)());
char * GuidRepA(_GUID const &);
char * RsiRepA(RUNNING_SHARE_INFO const &);
char const * DebugStringPopupHwnd(wil::com_ptr_t<IAgileReference,wil::err_returncode_policy> &);
double CalculateColorLuminosity(unsigned long);
double LinearizeRGBColorValue(double);
int (* s_pfnAreDpiAwarenessContextsEqual)(DPI_AWARENESS_CONTEXT__ *,DPI_AWARENESS_CONTEXT__ *);
int (* s_pfnGetDpiForWindow)(HWND__ *);
int (* s_pfnGetSystemMetricsForDpi)(int,int);
int AdapterInfoCompareLUID(_AdapterInfo const *,_AdapterInfo const *,__int64);
int AdapterInfoSort(_AdapterInfo const *,_AdapterInfo const *,__int64);
int BindCtx_ContainsObject(IBindCtx *,unsigned short const *);
int CompareSortKeys(unsigned char const *,unsigned long,unsigned char const *,unsigned long);
int DPA_DeleteCB<ImmersiveMonitorInfo>(ImmersiveMonitorInfo *,void *);
int DPA_ReleaseCB<CAutoplayUIData>(CAutoplayUIData *,void *);
int DPA_ReleaseCB<IFilterCondition>(IFilterCondition *,void *);
int DSACompareBitsCache(CONDITIONBITSSETCACHE const *,CONDITIONBITSSETCACHE const *,__int64);
int DUI_GetLocalHeight(DirectUI::Element *);
int DUI_GetLocalWidth(DirectUI::Element *);
int DUI_IsDragDelta(DirectUI::MouseDragEvent *);
int DoesCurrentUserOwnLibrary(ILibraryDescription *);
int DoesPropertyStoreMatchCondition(IPropertyStore *,ICondition *,int,IQueryContinue *);
int DoesPropertyStoreMatchFilter(IPropertyStore *,IFilterCondition *,IShellItem *,IPropertyInfoProvider *,IQueryContinue *);
int EnumChildWindowsCallback(HWND__ *,__int64);
int GenerateSortKeyForMatching(unsigned short const *,int,SORTKEY_MODIFIER,tagPROPVARIANT *);
int GetDefaultTitlebarHeightForDpi(int);
int GetDefaultTitlebarHeightInLogicalPixels();
int GetShouldNavPaneShowLibrariesFromRegistry();
int ILCompareHidden(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,IDLHID);
int ILCompareHiddenLibraryEnum(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,IDLHID);
int ILCompareHiddenStackData(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,IDLHID);
int ILCompareHiddenString(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,IDLHID);
int ILIsHiddenEqual(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE const *,IIEIHE);
int IShellItem_IsFolder(IShellItem *);
int InitClientRevisionNumber(_RTL_RUN_ONCE *,void *,void * *);
int InitializeUserAPIs(_RTL_RUN_ONCE *,void *,void * *);
int InlineIsEqualGUID(_GUID const &,_GUID const &);
int IsBiDiLocale(unsigned long);
int IsCompatibleVarType(unsigned short,unsigned short);
int IsExpectedCLSID(_GUID const * const *,unsigned int,_GUID const &);
int IsHighContrast();
int IsLaptop();
int IsLibrary(IShellItem *);
int IsLibraryLocationOwnedByAnotherMachine(ILocationDescription *);
int IsMobilityCenterEnabledWithOverride(int);
int IsOS_OS_ANYSERVER();
int IsSubclassOf<DirectUI::Element>(DirectUI::Element *);
int IsSubclassOf<DirectUI::HWNDElement>(DirectUI::Element *);
int IsSubclassOf<DirectUI::ItemList>(DirectUI::Element *);
int IsSubclassOf<DirectUI::RichText>(DirectUI::Element *);
int IsSubclassOf<DirectUI::TouchButton>(DirectUI::Element *);
int IsSubclassOf<DirectUI::TouchCheckBox>(DirectUI::Element *);
int IsSubclassOf<DirectUI::TouchScrollViewer>(DirectUI::Element *);
int IsSubclassOf<DirectUI::TouchSwitch>(DirectUI::Element *);
int IsSubclassOf<FlowUIBase>(DirectUI::Element *);
int IsVK_TABCycler(tagMSG *);
int LUIDCompare(_LUID const &,_LUID const &);
int MonitorCallback(HMONITOR__ *,HDC__ *,tagRECT *,__int64);
int OutputTechPriority(DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY);
int SHIsSameObject(IUnknown *,IUnknown *);
int SHProcessMessagesUpdateTimeout(unsigned long,unsigned long,unsigned long *);
int SHRegValueExists(HKEY__ *,unsigned short const *,unsigned long *);
int SafeCloseHandle(void * *);
int SourceInfoCompareID(_SourceInfo const *,_SourceInfo const *,__int64);
int TargetInfoCompareID(_TargetInfo const *,_TargetInfo const *,__int64);
int TargetInfoSort(_TargetInfo const *,_TargetInfo const *,__int64);
int UAIsTrackingEnabledInRegistry(unsigned short const *);
int _LikeOpCompareValuesWorker(tagPROPVARIANT const &,tagPROPVARIANT const &,tagCONDITION_OPERATION,unsigned long,unsigned long);
int __crtTypeinfoOperatorEquality_Stub(type_info const &,type_info const &);
int g_bResLoaded;
int operator==(_tagpropertykey const &,_tagpropertykey const &);
int swprintf_s<260>(unsigned short (&)[260],unsigned short const *,...);
int swprintf_s<512>(unsigned short (&)[512],unsigned short const *,...);
int wil_QueryFeatureState(wil_FeatureState *,unsigned int,int,wil_FeatureStore,int *,int *);
int wil_RtlStagingConfig_QueryFeatureState(wil_FeatureState *,unsigned int,int,int *);
int wil_StagingConfig_QueryFeatureState(wil_FeatureStore,wil_FeatureState *,unsigned int,int,int *);
int wil_details_FeatureReporting_ReportUsageToServiceDirect(wil_details_FeatureReportingCache *,unsigned int,int,int,wil_details_ServiceReportingKind,unsigned int,unsigned __int64);
int wil_details_StagingConfigFeature_HasUniqueState(wil_details_StagingConfigFeature const *);
int wil_details_StagingConfig_QueryFeatureState(wil_details_StagingConfig *,wil_FeatureState *,unsigned int,int);
long (* g_pfnGetThreadRef)(IUnknown * *);
long (* g_wil_details_pfnNtQueryWnfStateData)(__WIL__WNF_STATE_NAME const *,__WIL__WNF_TYPE_ID const *,void const *,unsigned long *,void *,unsigned long *);
long (* g_wil_details_pfnNtUpdateWnfStateData)(__WIL__WNF_STATE_NAME const *,void const *,unsigned long,__WIL__WNF_TYPE_ID const *,void const *,unsigned long,unsigned long);
long (* g_wil_details_pfnRtlNotifyFeatureUsage)(_RTL_FEATURE_USAGE_REPORT *);
long (* g_wil_details_pfnRtlQueryFeatureConfiguration)(unsigned int,_RTL_FEATURE_CONFIGURATION_TYPE,unsigned __int64 *,_RTL_FEATURE_CONFIGURATION *);
long (* g_wil_details_pfnRtlRegisterFeatureConfigurationChangeNotification)(void (*)(void *),void *,unsigned __int64 *,void * *);
long (* g_wil_details_pfnRtlSubscribeWnfStateChangeNotification)(__WIL__WNF_USER_SUBSCRIPTION * *,__WIL__WNF_STATE_NAME,unsigned long,long (*)(__WIL__WNF_STATE_NAME,unsigned long,__WIL__WNF_TYPE_ID *,void *,void const *,unsigned long),void *,__WIL__WNF_TYPE_ID *,unsigned long,unsigned long);
long (* g_wil_details_pfnRtlUnsubscribeWnfNotificationWaitForCompletion)(__WIL__WNF_USER_SUBSCRIPTION *);
long (** g_appCrashUIRegisterProc)();
long (** g_rgSplashScreenRegisterProcs)();
long AccountsSettingsPane_ParserCreateSubstituteElement<AccountsCommandsLink>(unsigned short const *,AccountsCommandsLink *,DirectUI::Element *,unsigned long *);
long AccountsSettingsPane_ParserCreateSubstituteElement<AccountsSettingsButton>(unsigned short const *,AccountsSettingsButton *,DirectUI::Element *,unsigned long *);
long ActivateApplicationForExperienceWithPropertySet(unsigned short const *,unsigned short const *,unsigned short const *,Windows::Foundation::Collections::IPropertySet *,ActivateApplicationForExperienceOptions,unsigned long *);
long ActivateApplicationForLaunch(unsigned short const *,unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,HMONITOR__ *,unsigned long *);
long ActivateApplicationReturnsAppForExperienceBootstrapping(IUnknown *,unsigned short const *,IInspectable *,unsigned short const *,IInspectable *,ACTIVATEOPTIONSINTERNAL,IInspectable * *);
long ActivateExtensionForExperienceWithPropertySetAndPlugin(unsigned short const *,unsigned short const *,_GUID,IInspectable *,unsigned short const *,Windows::Foundation::Collections::IPropertySet *,ActivateApplicationForExperienceOptions,unsigned long *);
long AddContactServiceInformationToMap(IPropertyStore *,Windows::Foundation::Collections::Internal::AgileHashMap<HSTRING__ *,IInspectable *,Windows::Foundation::Collections::Internal::DefaultHash<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<IInspectable *>,0> *);
long AddFrameToWICBitmap(IWICImagingFactory *,IWICBitmapEncoder *,IWICBitmapSource *,_GUID,EncodingOptions);
long AdjustTokenIntegrity(unsigned long,void *);
long AllocAndCopySid(void *,void * *);
long AppModelPolicy_GetPolicy_Internal(void *,AppModelPolicy_Type,AppModelPolicy_PolicyValue *,_PS_PKG_CLAIM *,unsigned __int64 *);
long AppOnLockScreen(unsigned short const *,LOCK_SCREEN_APPLICATION_CAPABILITIES,int *,int *,unsigned int *);
long ApplicationViewFilteredCollection_CreateInstance(IApplicationViewCollection *,IApplicationViewVisibilityDebouncedNotificationService *,IObjectCollection *,_GUID const &,void * *);
long AssocCreateAndInit(unsigned short const *,_GUID const &,void * *);
long AssocElemCreateForClass(_GUID const &,unsigned short const *,_GUID const &,void * *);
long AttemptStoreDownloadedPackageRepair(unsigned short const *);
long AttemptStoreRepairAsync();
long BadgeWindowAcc_CreateInstance(HWND__ *,_GUID const &,void * *);
long BadgeWindowController_CreateInstance(IEnterpriseChromeManagerInternal *,IBadgeWindow *,_GUID const &,void * *);
long BadgeWindowPositionCache_CreateInstance(_GUID const &,void * *);
long BadgeWindow_CreateInstance(_GUID const &,void * *);
long BitwiseCompareValues(tagPROPVARIANT const &,tagPROPVARIANT const &,BITSSET,int,int *);
long BlockOnCompletionAndGetResults<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *,Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> >(Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *> *,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> > >,tagCOWAIT_FLAGS,void *);
long BlockOnCompletionAndGetResults<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *>,Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *>,Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *>(Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *> *,Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> * *,tagCOWAIT_FLAGS,void *);
long CAppBar_CreateInstance(_GUID const &,void * *);
long CAppCrusherPopup_CreateInstance(HWND__ *,IImmersiveApplication *,PLM_TASKCOMPLETION_CATEGORY_FLAGS,tagRECT const &,_GUID const &,void * *);
long CAppInstanceFolder_CreateInstance(_GUID const &,void * *);
long CCourtesyEngineFactory_CreateInstance(_GUID const &,void * *);
long CCv6s_HeapAllocArray<unsigned short>(void *,unsigned long,unsigned __int64,unsigned __int64,unsigned short * *);
long CCv6s_HeapAllocArray<void *>(void *,unsigned long,unsigned __int64,unsigned __int64,void * * *);
long CCv6s_HeapAllocArray<void>(void *,unsigned long,unsigned __int64,unsigned __int64,void * *);
long CCv6s_HeapFree(void *,void *);
long CCv6s_HeapReallocArray<void *>(void *,unsigned long,void *,unsigned __int64,unsigned __int64,void * * *);
long CCv6s_HeapReallocArray<void>(void *,unsigned long,void *,unsigned __int64,unsigned __int64,void * *);
long CDCompDesktopThumbnail_CreateInstance(tagSIZE *,tagRECT const &,HWND__ *,IDCompThumbnailParent *,ISwitchThumbnailDeviceManager *,ISwitchThumbnailFactory *,_GUID const &,void * *);
long CDCompShellTabThumbnail_CreateInstance(DCompShellTabThumbnailInfo,tagSIZE const *,tagRECT *,IDCompThumbnailParent *,ISwitchThumbnailDeviceManager *,ISwitchThumbnailFactory *,_GUID const &,void * *);
long CDCompVirtualDesktopThumbnail_CreateInstance(tagSIZE const *,tagRECT const &,HWND__ *,IDCompThumbnailParent *,ISwitchThumbnailDeviceManager *,ISwitchThumbnailFactory *,_GUID const &,void * *);
long CDataTransferBroker_CreateInstance(HWND__ *,IDataTransferBroker * *);
long CEdgeInvoker_CreateInstance(EDGEUI_COMPONENT,_GUID const &,void * *);
long CFilePickerController_CreateInstance(_GUID const &,void * *);
long CImmersiveSplashScreen_CreateInstance(_GUID const &,void * *);
long CImmersiveSplash_RequestSplashScreenIconicThumbnail(HWND__ *,int);
long CMultipleValues_CreateInstance(tagPROPVARIANT const *,_tagpropertykey const &,_GUID const &,void * *);
long CPerWindowNotificationQueue_CreateInstance(HWND__ *,IPerWindowNotificationQueue * *);
long CRegistryChangeListener_CreateInstance(HKEY__ *,unsigned short const *,REGISTRY_LISTENER_FLAGS,void (*)(void *),void *,IRegistryChangeListener * *);
long CRootThumbnail_CreateInstance(IDCompositionDesktopDevicePartner *,IDCompositionTarget *,DCOMPOSITION_BITMAP_INTERPOLATION_MODE,_GUID const &,void * *);
long CSearchPaneBrokerWrapper_CreateInstance(ISearchControlBroker *,_GUID const &,void * *);
long CSearchSuggestionsProvider_CreateInstance(_GUID const &,void * *);
long CSharedBitmap_CreateInstance(HBITMAP__ *,WTS_ALPHATYPE,_GUID const &,void * *);
long CSnappedWindowModel_CreateInstance(IApplicationView *,IApplicationViewCollection *,IImmersiveMonitorManager *,SnappedWindowOcclusionModel,_GUID const &,void * *);
long CSolidColorThumbnail_CreateInstance(unsigned long,tagSIZE const &,IDCompThumbnailParent *,ISwitchThumbnailDeviceManager *,ISwitchThumbnailFactory *,_GUID const &,void * *);
long CachedFileUpdateActivator_CreateInstance(IBackgroundActivator * *);
long CachedSTAObject_QueryInterface(unsigned long,int *,_GUID const &,void * *);
long CachedSTAObject_SetObject(unsigned long,IUnknown *);
long CalculateEdgeWeight(IUIAutomation *,IUIAutomationElement *,IUIAutomationElement *,Windows::Internal::UI::SoftLanding::SoftLandingAlignmentPreference,tagRECT *);
long CcdPollAllDisplayAdapters(bool);
long CcdSetDisplayProjectionMode(DISPLAYCONFIG_TOPOLOGY_ID);
long CheckAndReportError(long,unsigned int,...);
long CleanupHistoryItems(bool);
long CloneRunningShareInfo(RUNNING_SHARE_INFO const &,RUNNING_SHARE_INFO *);
long CloneSharableItemDescriptor(SHARABLE_ITEM_DESCRIPTOR const *,SHARABLE_ITEM_DESCRIPTOR *);
long CloudExperienceHostCreateAdminElevatedObject(_GUID const &,_GUID const &,void * *);
long CloudExperienceHostCreateElevatedObject(_GUID const &,_GUID const &,void * *);
long CoCreateActivationManagerAndSetProperties(Windows::Storage::Streams::IBuffer *,IApplicationActivationManagerPriv * *);
long CombinePaths(unsigned short const *,unsigned short const *,unsigned short * *);
long ComponentUIHostedActivationManager_CreateInstance(IComponentUIHostedActivationManager * *);
long ComponentUIHostedAppFrame_CreateInstance(IHostedApplicationFrameWindow * *);
long ComputeHashFromString(Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > const &,unsigned short * *);
long ComputeUserHash(unsigned short const *,unsigned short * *);
long ConcatenateFileTime(_SYSTEMTIME const &,Windows::Internal::NativeString<Windows::Internal::CoTaskMemPolicy<unsigned short> > &);
long ContractRegistrationInfo_CreateInstance(SHELL_TARGET_IDENTIFIER,SHELL_TARGET_CONTRACT_FLAGS,IShellTargetingContractNotification *,unsigned long,_GUID const &,void * *);
long Convert32bppIWICBitmapSourceToHBITMAP(IWICBitmapSource *,HBITMAP__ * *);
long Convert32bppWICBitmapSourceToHBITMAP(IWICBitmapSource *,HBITMAP__ * *);
long ConvertHBITMAPToWICBitmap(IWICImagingFactory *,HBITMAP__ *,WICBitmapAlphaChannelOption,IWICBitmapSource * *);
long ConvertIWICBitmapSourcePixelFormat(IWICBitmapSource *,_GUID,IWICImagingFactory *,IWICBitmapSource * *);
long ConvertIWICBitmapSourceTo32bppHBITMAP(IWICBitmapSource *,IWICImagingFactory *,HBITMAP__ * *);
long ConvertWICBitmapPixelFormat(IWICImagingFactory *,IWICBitmapSource *,_GUID,WICBitmapDitherType,IWICBitmapSource * *);
long ConvertWICBitmapToHBITMAP(IWICImagingFactory *,IWICBitmapSource *,HBITMAP__ * *);
long CopyNamedPropertyStore(INamedPropertyStore *,INamedPropertyStore *);
long CopyStreamToOutputStream(IStream *,Windows::Storage::Streams::IOutputStream *);
long CopyStringArray(unsigned long,unsigned short * *,unsigned short * * *,unsigned long *);
long Create32BitHBITMAP(HDC__ *,tagSIZE const *,void * *,HBITMAP__ * *);
long CreateAndAppendTextNode(HSTRING__ *,Windows::Data::Xml::Dom::IXmlNode *,Windows::Data::Xml::Dom::IXmlNode * *);
long CreateAndInitActive<CSplashScreenElement>(unsigned int,DirectUI::Element *,unsigned long *,DirectUI::Element * *,int);
long CreateConditionForExtensionList(EXTENSIONLIST_PINNED_OPTION,EXTENSIONLIST_HIDDEN_OPTION,EXTENSIONLIST_USAGE_OPTION,_tagpropertykey const &,unsigned short const * *,unsigned int,ICondition * *);
long CreateDefaultTaskScheduler(_GUID const &,void * *);
long CreateFileSystemBindData(_GUID const &,void * *);
long CreateIconFromBitmap(unsigned int,HBITMAP__ *,HICON__ * *);
long CreateIconFromImagePath(AppInfo *,unsigned short const *,HICON__ * *);
long CreateIconFromImagePathWithWIC(IWICImagingFactory *,unsigned short const *,unsigned int,bool,HICON__ * *);
long CreateIsGameManager(IIsGameManager * *);
long CreateLastVisitedItem(unsigned short const *,_ITEMIDLIST_ABSOLUTE const *,unsigned long *,unsigned char * *);
long CreateNotification(Windows::Internal::UI::SoftLanding::SOFTLANDING_NOTIFICATION const &,HSTRING__ *,Windows::UI::Notifications::IToastNotificationManagerStatics *,HWND__ *,tagRECT *,tagRECT *,HSTRING__ *,HSTRING__ *,Windows::Internal::UI::SoftLanding::SOFTLANDING_BUTTON *,Windows::Internal::UI::SoftLanding::SOFTLANDING_BUTTON *,HSTRING__ *,HSTRING__ *,HSTRING__ *,Windows::UI::Notifications::IToastNotification * *);
long CreatePushNotificationsHelpers(IWpnSettingsEndpoint * *,IWpnRegistrationEndpoint * *);
long CreateReadOnlyRandomAccessStreamFromHBITMAP(HBITMAP__ *,_GUID const &,Windows::Storage::Streams::IRandomAccessStream * *);
long CreateReadOnlyRandomAccessStreamOverStream(IStream *,Windows::Storage::Streams::IRandomAccessStream * *);
long CreateReadOnlyWrapperOnRandomAccessStream(Windows::Storage::Streams::IRandomAccessStream *,Windows::Storage::Streams::IRandomAccessStream * *);
long CreateRunningShareInfo(_GUID const &,SHARING_ACTIVATION_INFO *,unsigned long,unsigned long,RUNNING_SHARE_INFO *);
long CreateSharingActivationInfo(unsigned short const *,__MIDL___MIDL_itf_sharinganddevicesprivate_0000_0000_0001,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short,SHARABLE_ITEM_DESCRIPTOR const *,SHARING_ACTIVATION_INFO *);
long CreateShellItemWithActionInformation(IShellItem *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,IShellItem * *);
long CreateShellSessionKey(unsigned long,HKEY__ * *);
long CreateShellSessionSubKey(unsigned short const *,unsigned long,bool *,HKEY__ * *);
long CreateSplashScreenTimer(ISplashScreenTimer * *);
long CreateSplashScreenUI(HWND__ *,unsigned short const *,SPLASHSCREEN_IMAGE_TYPE,bool,ISplashScreenUI * *);
long CreateSyncEventName(unsigned short const *,unsigned short const *,unsigned short * *);
long CreateUriRuntimeClassFromShellItem(IShellItem *,Windows::Foundation::IUriRuntimeClass * *);
long CreateWindowsTipWpnRegistration();
long DUI_CreateParserFromResource(HINSTANCE__ *,unsigned int,DUI_PARSER_LOAD_FLAGS,DEVICE_SCALE_FACTOR,HWND__ *,DirectUI::DUIXmlParser * *);
long DUI_CreateParserWithCallbackFromResource(HINSTANCE__ *,unsigned int,DEVICE_SCALE_FACTOR,HWND__ *,DirectUI::DUIXmlParser * *,DirectUI::Value * (*)(unsigned short const *,void *),void *);
long DUI_GetElementIndex(DirectUI::Element *,unsigned int *);
long DUI_GetElementRootHWND(DirectUI::Element *,HWND__ * *);
long DUI_GetElementRootHWNDElement(DirectUI::Element *,DirectUI::HWNDElement * *);
long DUI_GetElementScreenBounds(DirectUI::Element *,tagRECT *);
long DUI_GetMouseEventAbsolutePos(DirectUI::Element *,tagPOINT const *,tagPOINT *);
long DUI_GetRootRelativeBounds(DirectUI::Element *,DUI_COORDINATES_SYSTEM,tagRECT *);
long DUI_SetDescendentElementBitmap(DirectUI::Element *,unsigned short const *,HBITMAP__ *,unsigned char,unsigned int,ImageRtlMode);
long DUI_SetDescendentElementFontSizeForScaleFactor(DirectUI::Element *,unsigned short const *,double);
long DUI_SetDescendentElementPreferredFontWithMinimumHeight(DirectUI::Element *,unsigned short const *,unsigned short const *,int,bool *);
long DUI_SetDescendentElementText(DirectUI::Element *,unsigned short const *,unsigned short const *,HINSTANCE__ *);
long DUI_SetDescendentElementTextAndAccName(DirectUI::Element *,unsigned short const *,unsigned short const *,HINSTANCE__ *);
long DUI_SetElementBitmap(DirectUI::Element *,HBITMAP__ *,unsigned char,unsigned int,ImageRtlMode,bool);
long DUI_SetElementFontSizeForScaleFactor(DirectUI::Element *,double);
long DUI_SetElementIcon(DirectUI::Element *,HICON__ *,ImageRtlMode);
long DUI_SetElementStringProperty(DirectUI::Element *,DirectUI::PropertyInfo const * (*)(),unsigned short const *,HINSTANCE__ *);
long DUI_SetElementTextAndAccName(DirectUI::Element *,unsigned short const *,HINSTANCE__ *);
long DUI_SetSize(DirectUI::Element *,int,int);
long DeserializeQuickLink(void *,QUICK_LINK_INFO_PRIV *);
long DetermineHostMode(IUnknown *,HWND__ *,EC_HOST_UI_MODE *);
long DisconnectDisplay(HSTRING__ *,unsigned long);
long DisplayNameOfAsString(IShellFolder *,_ITEMIDLIST_RELATIVE const *,unsigned long,unsigned short * *);
long DragViewEventSource_CreateInstance(_GUID const &,void * *);
long DragViewTracker_CreateInstance(_GUID const &,void * *);
long EdgeUiHint_CreateInstance(EDGEUI_INDEX,_GUID const &,void * *);
long ElementCast<CAppListTileElement>(DirectUI::Element *,CAppListTileElement * *);
long ElementCast<CShellItemThumbnailElement>(DirectUI::Element *,CShellItemThumbnailElement * *);
long ElementCast<DirectUI::Element>(DirectUI::Element *,DirectUI::Element * *);
long ElementCast<DirectUI::RichText>(DirectUI::Element *,DirectUI::RichText * *);
long ElementCast<PermissionsUI>(DirectUI::Element *,PermissionsUI * *);
long EnterpriseChromeManager_CreateInstance(IApplicationViewCollection *,IImmersiveApplicationNotificationService *,_GUID const &,void * *);
long ExecuteQuery(unsigned short const *,_GUID const &,void * *);
long ExitUserOOBE(UserOOBEExitReason);
long FacadeWindow_CreateInstance(IImmersiveLauncher *,IImmersiveMonitorNotificationService *,ISwitchThumbnailDeviceManager *,IFacadeWindow * *);
long FillFileTypesArray(Windows::Foundation::Collections::IVectorView<HSTRING__ *> *,CDPACoTaskMem<unsigned short> *);
long FindAndCreatePickerController(HWND__ *,IPickerController * *);
long FindFirstAppItemForAppIdAndContractId(unsigned short const *,unsigned short const *,IAppListItem * *);
long FindObjectInListAndCallCreator(tagLOCAL_OBJECT_ENTRY const *,_GUID const &,_GUID const &,void * *);
long FindPerAppFromFallbackAppList(unsigned short const *,bool *,Windows::Data::Input::RadialControllerActions *);
long FireContentTransition(DirectUI::Element *,DirectUI::Element *,unsigned long *);
long FlattenHSTRINGVectorIntoExtensionList(Windows::Foundation::Collections::IVector<HSTRING__ *> *,unsigned short * *);
long GenerateAppLogoBackgroundColorFromAppId(unsigned short const *,Windows::UI::Color *);
long GenerateAppLogoFromAppId(unsigned short const *,Windows::Storage::Streams::IRandomAccessStreamReference * *);
long GenerateAppNameFromAppId(unsigned short const *,AppNameType,unsigned short * *);
long GenerateAppUserModelId(unsigned short const *,unsigned short const *,unsigned short * *);
long GeneratePackageFamilyNameFromAppId(unsigned short const *,unsigned short * *);
long GenerateSortKey(unsigned short const *,unsigned char * *,unsigned long *);
long GenerateStringWithSourceTitle(SOURCE_TYPE,unsigned short const *,HWND__ *,AppNameType,int,unsigned short *,unsigned __int64);
long GenerateTitleFromHwnd(HWND__ *,unsigned short * *);
long GetActionInformation(IShellItem *,unsigned short * *,unsigned short * *,unsigned short * *,unsigned short * *);
long GetAllowedOverrideFolderParsingName(unsigned short const * const,unsigned short * *);
long GetAnimationDuration(int,int,unsigned long *);
long GetAppDisplayNameFromAppId(unsigned short const *,unsigned short * *);
long GetAppID(IShellItem *,unsigned short * *);
long GetAppIdForExtensionListItem(IExtensionListItem *,unsigned short * *);
long GetApplicationWithTargetingIndicator(IUnknown *,IImmersiveMonitor *,IImmersiveApplication * *);
long GetAvailableDisplayInformation(bool *,bool *,bool *,bool *);
long GetCacheLocationForImage(unsigned short const *,unsigned short *,unsigned __int64);
long GetCachedWordBreakerFromLCID(unsigned long,WORDBREAKERFLAGS,unsigned long,_GUID const &,void * *);
long GetCallerWindow(HWND__ * *);
long GetCategoryForFileExtension(unsigned short const *,Windows::Internal::ApplicationDefaults::ApplicationDefaultCategory *);
long GetConnectedSearchPaneLauncherMode(IUnknown *,HWND__ *,HWND__ *,IUnknown * *);
long GetConnectedSearchResultsLauncherMode(IUnknown *,HWND__ *,IShellItem *,IUnknown * *);
long GetContactDisplayAddress(Windows::ApplicationModel::Contacts::IContactAddress *,HSTRING__ * *);
long GetContactServicesInformation(Windows::Foundation::Collections::IMapView<HSTRING__ *,IInspectable *> * *);
long GetContactsProviderAppDataLocalFileUri(unsigned short * *,HSTRING__ * *);
long GetCurrentContextParameters(AppInfo *,unsigned short * *,IMrtResourceManager * *,unsigned short * *,unsigned short * *);
long GetCurrentUserSid(void * *);
long GetCurrentUserSidString(unsigned short * *);
long GetDefaultSaveLocation(DSLFLAGS,ILibraryDescription *,_GUID const &,void * *);
long GetDefaultSaveLocationFromItem(IShellItem *,_GUID const &,void * *);
long GetDeviceContainerIDFromInterfaceID(unsigned short const *,unsigned short * *);
long GetDeviceInstanceIDFromInterfaceID(unsigned short const *,unsigned short * *);
long GetDevicesCharmProjectionManagerInstance(IDevicesCharmProjectionManager * *);
long GetFastPropertyStore(IShellItem *,IPropertyStore * *);
long GetFilePathNoMRTProtocol(unsigned short const *,unsigned short *,unsigned int);
long GetFileUriStringFromAppDataUri(unsigned short const *,IUri *,unsigned short * *);
long GetForceDownload(IShellItem *,bool *);
long GetFutureFileTime(unsigned long,_FILETIME *);
long GetGenericCloudExperienceHostInfo(_CXH_SCENARIO_INFO * *,bool *);
long GetHMONITORFromDeviceId(unsigned short const *,HMONITOR__ * *);
long GetIdentityItemName(IShellItem *,_SIGDN,unsigned short * *);
long GetIdentityProviderForConnectedUser(_GUID const &,_GUID const &,void * *);
long GetInfoFor32BitHBITMAP(HBITMAP__ *,int *,int *,tagRGBQUAD * *,int *);
long GetItemHistoryIdentity(unsigned short const *,IShellItem *,GETPROPERTYSTOREFLAGS,unsigned short * *,ConnectedSearchHistoryType *);
long GetItemNamespaceCLSID(IShellItem *,_GUID *);
long GetKnownFolderSubFolder(_GUID const &,unsigned short const *,unsigned short const *,Windows::Internal::String *);
long GetLastVisitedFolder(unsigned short const *,unsigned short const *,_ITEMIDLIST_ABSOLUTE * *);
long GetLibraryAncestor(IShellItem *,int,IShellItem * *);
long GetLocalizedIconPath(unsigned short const *,unsigned short const *,unsigned short const *,DEVICE_SCALE_FACTOR,TILE_THEME_SELECTOR,unsigned short const *,IMrtResourceManager *,unsigned short * *);
long GetLockAppHost(ILockAppHost * *);
long GetMRTFilePath(unsigned short const *,unsigned short const *,unsigned short * *,LS_IMAGE_QUALIFIERS *,unsigned long *);
long GetMSACloudExperienceHostInfo(unsigned short * *,bool *);
long GetMainWindowViewPreferenceSite(Windows::ApplicationModel::Actions::IMainWindowActivationInfo *,unsigned short const *,unsigned short const *,IUnknown * *);
long GetMiracastDeviceInterfaceIDFromDisplayName(unsigned short const *,unsigned short * *);
long GetMostRecentApplication(IUnknown *,IImmersiveMonitor *,IImmersiveApplication * *);
long GetNotificationIdentity(HSTRING__ *,unsigned short *,unsigned __int64);
long GetObjectFromBindCtx(IBindCtx *,unsigned short const *,_GUID const &,void * *);
long GetOfflineRegLocationSubKey(HKEY__ *,unsigned short const *,IMigrationContext *,unsigned short * *);
long GetPCSettingsCommandStringFromItem(PCSetting::PCSettingsValueType,IShellItem2 *,unsigned short * *);
long GetPackageActivationSettings(unsigned short const *,PACKAGEACTIVATIONSETTINGS *);
long GetPackageFullNameFromAppId(unsigned short const *,unsigned short * *);
long GetParentAppId(unsigned short const *,IPropertyStore *,unsigned short * *);
long GetParsingBindCtx(IShellFolder2 *,_ITEMID_CHILD const *,int,IBindCtx * *);
long GetParsingBindCtxFromItem(IShellItem *,int,IBindCtx * *);
long GetQuickLinkAtIndex(IMruDataList2 *,int,QUICK_LINK_INFO_PRIV *);
long GetQuickLinkDataList(IMruDataCompare *,IMruDataList2 * *);
long GetRedirectionKeyPath(unsigned short const *,unsigned short const *,unsigned short * *);
long GetRegisteredAppsForPackage(ILockScreenApplicationManager *,unsigned short const *,CSimpleCaseInsensitiveOrdinalStringArray *);
long GetRegisteredLockscreenApps(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,bool,unsigned short * * *,unsigned short * * *,unsigned int *);
long GetRegisteredNCBEntries(IBackgroundTaskCapability *,ILockScreenApplicationManager *,unsigned short const *,REGISTERED_NCB_ENTRY * *,unsigned int *);
long GetRegisteredNCBEntriesForType(LOCK_SCREEN_APPLICATION_CAPABILITIES,IBackgroundTaskCapability *,ILockScreenApplicationManager *,unsigned short const *,unsigned int,REGISTERED_NCB_ENTRY *,unsigned int *);
long GetRelatedItem<IDelegateItem>(IShellItem *,IBindCtx *,bool,_GUID const &,void * *);
long GetRelatedItem<IIdentityName>(IShellItem *,IBindCtx *,bool,_GUID const &,void * *);
long GetRowPropertyStoreFromRowsetLocate(IRowsetLocate *,__int64,bool *,IPropertyStore * *);
long GetRunningShareManager(IRunningShareManager * *);
long GetSeralizedPropertysetAndActivateOptions(unsigned short const *,Windows::Foundation::Collections::IPropertySet *,ActivateApplicationForExperienceOptions,Windows::Storage::Streams::IBuffer * *,ACTIVATEOPTIONSINTERNAL *);
long GetStreamFromHBITMAP(HBITMAP__ *,BITMAP_VERSION,WTS_STREAMTYPE *,_GUID const &,void * *);
long GetStreamFromSharedBitmap(ISharedBitmap *,BITMAP_VERSION,WTS_STREAMTYPE *,_GUID const &,void * *);
long GetStreamOfWICBitmapSourceWithOptions(IWICImagingFactory *,IWICBitmapSource *,_GUID const &,_GUID,EncodingOptions,IStream * *);
long GetStringFromResource(AppInfo *,unsigned short const *,unsigned short * *);
long GetSystemAppDataKey(unsigned short const *,unsigned long,HKEY__ * *);
long GetSystemToastPrompt(ISystemToastPrompt * *);
long GetTaskSchedulerTask(ITaskService *,unsigned short const *,IRegisteredTask * *);
long GetTelemetryIdFromLocalType(UI_LOCAL_RESULT_TYPE,bool,unsigned short * *);
long GetTemplateStringForTaskCompletionFlags(PLM_TASKCOMPLETION_CATEGORY_FLAGS,unsigned short *,int);
long GetThreadThumbnailCache(_GUID const &,void * *);
long GetTruncatedSystemTimeFromRegKey(HKEY__ *,unsigned short const *,_SYSTEMTIME *);
long GetUILanguage(unsigned short * *);
long GetUpdateInformation(IShellItem *,HSTRING__ * *,HSTRING__ * *,SUpdateContext *,IPropertyStore * *);
long GetUpdateInformationFromBuffer(void const *,unsigned __int64,HSTRING__ * *,HSTRING__ * *,SUpdateContext *,IPropertyStore * *);
long GetUrlPartFromShellItemName(IShellItem *,_SIGDN,URL_PART,unsigned short * *);
long GetUrlPartFromString(unsigned short const *,URL_PART,unsigned short * *);
long GetUrlPartFromUrlHandler(IShellItem *,URL_PART,unsigned short * *);
long GetValidatedLocationItem(ILocationDescription *,_GUID const &,void * *);
long GetVersionFromPackageFullName(unsigned short const *,unsigned __int64 *);
long GetVersionFromPackageFullName(unsigned short const *,unsigned short *,unsigned int);
long GetWindowsSearchCommandObj(_GUID const &,void * *);
long GlobalRudeWindowManager_CreateInstance(IRudeWindowWin32Functions *,_GUID const &,void * *);
long GlobalRudeWindowNotifications_CreateInstance(unsigned long,_GUID const &,void * *);
long GrepDoesItemMatchCondition(CONDITIONEVALINFO const *,int *,CONDITIONEVALPROPS *);
long HRESULTFromLastErrorError();
long HashAssociation(unsigned short const *,unsigned short const *,unsigned short const *,_SYSTEMTIME const &,unsigned short * *);
long HiddenProperties_CreateIDListWithPropStore(IDLHID,_ITEMIDLIST_ABSOLUTE const *,IUnknown *,_ITEMIDLIST_ABSOLUTE * *);
long HiddenProperties_CreateItemWithPropStore(IDLHID,IShellItem *,IUnknown *,_GUID const &,void * *);
long HiddenProperties_GetPropStoreFromIDList(IDLHID,_ITEMIDLIST_RELATIVE const *,_GUID const &,void * *);
long HiddenProperties_GetPropStoreFromItem(IDLHID,IShellItem *,_GUID const &,void * *);
long ILCloneWithHiddenID(_ITEMIDLIST_RELATIVE const *,_HIDDENITEMID const *,_ITEMIDLIST_RELATIVE * *);
long IShellItem_GetEnterpriseId(IShellItem *,unsigned short * *);
long IUnknown_GetParentWindow(IUnknown *,HWND__ * *);
long IUnknown_GetScaleFactor(IUnknown *,DEVICE_SCALE_FACTOR *);
long IUnknown_GetServerProcessHandle(IUnknown *,unsigned long,void * *);
long IUnknown_LoadFromStream(IStream *,IUnknown *);
long IUnknown_LoadKnownImplFromStream(IStream *,_GUID const * const *,unsigned int,_GUID const &,void * *);
long IUnknown_SaveKnownImplToStream(IStream *,_GUID const * const *,unsigned int,IUnknown *);
long IUnknown_SaveToStream(IStream *,int,IUnknown *);
long InitGameConfigFromEntry(KnownGameList::IGameEntry *,KnownGameList::KGLGameConfig *);
long InitPropVariantFromPropVariantDSA(CDSA<tagPROPVARIANT> *,tagPROPVARIANT *);
long InitPropVariantFromString(unsigned short const *,tagPROPVARIANT *);
long InitVariantFromString(unsigned short const *,tagVARIANT *);
long InitializePrivilegedOperationsHelper<Microsoft::WRL::ComPtr<IPrivilegedWindowOwnershipOperations>,Microsoft::WRL::ComPtr<IPrivilegedForegroundOperations> >(_GUID const &,IUnknown *,Microsoft::WRL::ComPtr<IPrivilegedWindowOwnershipOperations> &,Microsoft::WRL::ComPtr<IPrivilegedForegroundOperations> &);
long InputTracker_CreateInstance(_GUID const &,void * *);
long InsertExperienceIdAndSerialize(Windows::Foundation::Collections::IPropertySet *,unsigned short const *,Windows::Storage::Streams::IBuffer * *);
long InternalGetContactsProvider(HSTRING__ * *,HSTRING__ * *,HSTRING__ * *);
long IsAppAlarmCapable(unsigned short const *,unsigned short const *,int *);
long IsAppContainerToken(void *,bool *);
long IsAppLockScreenCapable(IPropertyStore *,IBackgroundTaskCapability *,LOCK_SCREEN_APPLICATION_CAPABILITIES,int *);
long IsAppLockScreenCapable(IShellItem2 *,IBackgroundTaskCapability *,LOCK_SCREEN_APPLICATION_CAPABILITIES,int *);
long IsConditionBitwiseOperation(ICondition *,tagCONDITION_OPERATION,BITSSET *);
long IsLegacyApp(unsigned short const *,bool *);
long IsNCBEnabledForApplication(unsigned short const *,unsigned short const *,int *);
long IsNCBEnabledForType(unsigned short const *,unsigned short const *,LOCK_SCREEN_APPLICATION_CAPABILITIES,int *);
long IsRunningInAppContainer(void *,bool *);
long IsWindowServiceSupportedWithDelegationToAppWindow(HWND__ *,_GUID const &);
long JoinActionAndServiceId(HSTRING__ *,HSTRING__ *,HSTRING__ * *);
long LaunchCloudExperienceHostForCredentialReset(unsigned short const *,bool);
long LaunchCloudExperienceHostForNthUserScenario(unsigned short const *);
long LaunchCortanaApp(unsigned short const *,CortanaAppLaunchType,bool);
long LaunchDisplaySwitchUI(IPopupBase *,unsigned short const *,bool);
long LaunchStoreForError(long,unsigned short const *,unsigned short const *,unsigned int,PackageOrigin,unsigned __int64,bool);
long LauncherContract_CreateInstance(IShellTargetingContractManager *,IImmersiveMonitorManager *,_GUID const &,void * *);
long LoadConditionFromStream(IStream *,_GUID const &,void * *);
long LoadDefaultIcon(bool,unsigned int,HICON__ * *);
long LoadImageWithWIC(IWICImagingFactory *,HINSTANCE__ *,unsigned short const *,LOAD_IMAGE_WITH_WIC_OPTION,IWICBitmapSource * *);
long LoadImageWithWIC(IWICImagingFactory *,IStream *,LOAD_IMAGE_WITH_WIC_OPTION,IWICBitmapSource * *,IWICBitmapFrameDecode * *,_GUID *);
long LoadImageWithWIC(IWICImagingFactory *,unsigned short const *,LOAD_IMAGE_WITH_WIC_OPTION,IWICBitmapSource * *,_GUID *,IWICBitmapFrameDecode * *);
long LoadSplashScreenImageForRect(unsigned short const *,Windows::Foundation::Rect const &,HBITMAP__ * *);
long LoadSplashScreenImageWithWindow(HWND__ *,unsigned short const *,SPLASHSCREEN_IMAGE_TYPE,HBITMAP__ * *);
long LoadStringAlloc(unsigned int,unsigned short * *);
long LockScreenConsentAlreadyShown(unsigned short const *,int,int *);
long LogAppDefaultInfo(unsigned short const *,...);
long LookupAnchorPosition(IUIAutomation *,unsigned short const *,IUIAutomationElement * *,HWND__ * *);
long MakeTileShareDataPackage(IShellItem *,Windows::ApplicationModel::DataTransfer::IDataPackage * *);
long MakeUniqueScreenshotName(unsigned short *,unsigned long,unsigned short const *,unsigned short const *);
long MapExtensionsToAppItemsSorted(IExtensionList *,SORTCOLUMN const *,unsigned int,IObjectArray * *);
long MarkItemAsSimple(IShellItem *);
long MarkLeftToRightEmbedding(HSTRING__ *,HSTRING__ * *);
long MaybeShowActivationErrorPopupIfCritical(long,PackageOrigin,unsigned short const *,ACTIVATION_PHASE,ACTIVATIONERROR_DISMISS_METHOD *);
long Mtc_AlbumArtImagePathFromUri(unsigned short const *,unsigned short const *,unsigned short *,unsigned int);
long Mtc_GetAppLogoImageStream(unsigned short const *,unsigned long,IStream * *);
long Mtc_GetAppLogoImageStream(unsigned short const *,unsigned short const *,unsigned long,IStream * *);
long Mtc_GetAppLogoPath(unsigned short const *,unsigned short * *);
long Mtc_GetFullyQualifiedFilePath(IShellItem2 *,unsigned short const *,unsigned short * *);
long Mtc_GetImageStreamData(IStream *,unsigned long,unsigned char * *,unsigned long *);
long Mtc_GetLogoBackground(unsigned short const *,unsigned long *);
long Mtc_ValidateFileSize(unsigned short const *,unsigned long);
long NotificationSLBubbleStateChangedCallback(CreativeFramework::Triggers::WnfContentIdPathData);
long OpenSystemDataRegistryPathForCurrentUser(unsigned short const *,HKEY__ * *);
long OpenSystemDataRegistryPathForUser(unsigned short const *,unsigned short const *,HKEY__ * *);
long ParseAppUserModelId(unsigned short const *,unsigned short * *,unsigned short * *);
long ParseAppUserModelId(unsigned short const *,unsigned short *,unsigned __int64,unsigned short *,unsigned __int64);
long ParseDisplayNameChild(IShellFolder *,HWND__ *,IBindCtx *,unsigned short const *,unsigned long *,_ITEMID_CHILD * *,unsigned long *);
long PiiFilterpAddEnvironment(_PII_FILTER *);
long PiiFilterpAddItemSorted(_PII_FILTER *,unsigned short *,unsigned short *);
long PiiFilterpAddProfiles(_PII_FILTER *);
long PostImmersiveShellMessage(unsigned int,void *);
long ProcessCreativeEvent(ContentManagement::CreativeEventType,HSTRING__ *);
long PropVariantToPropVariantDSA(tagPROPVARIANT const &,CDSA<tagPROPVARIANT> *);
long ReplaceString(unsigned short const *,unsigned int,unsigned short * *);
long ReplaceStringStartInPlace(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
long ResultFromKnownLastError();
long ResultFromWin32Handle(void *,void * *);
long RudeWindowManager_CreateInstance(IRudeWindowWin32Functions *,_GUID const &,void * *);
long RunTaskSchedulerTask(unsigned short const *);
long SHCoGetApartmentId(unsigned long *);
long SHCombineMultipleConditionsEx(tagCONDITION_TYPE,ICondition * *,unsigned int,IConditionFactory2 *,_GUID const &,void * *);
long SHCopyPropertyStore(IPropertyStore *,IPropertyStore *);
long SHCreateDUIThreadRef(long *,IUnknown * *);
long SHCreateFileOperation(HWND__ *,unsigned long,_GUID const &,void * *);
long SHCreateOriginalItemBindCtx(_ITEMIDLIST_ABSOLUTE const *,IShellFolder *,_ITEMID_CHILD const *,unsigned long,REPARSE_PARTIAL_IDLIST_MODE,IBindCtx * *);
long SHExePathFromPid(unsigned long,unsigned short *,unsigned int);
long SHGetComparisonInfo(ICondition *,_tagpropertykey *,tagCONDITION_OPERATION *,tagPROPVARIANT *);
long SHGetDefaultConnectedIdentityProvider(_GUID *);
long SHGetMachineGUID(_GUID *,unsigned short *,unsigned int);
long SHILClone(_ITEMIDLIST const *,_ITEMIDLIST * *);
long SHILClone(_ITEMIDLIST_RELATIVE const *,_ITEMIDLIST_RELATIVE * *);
long SHKeepDUIInitializedForThread(unsigned int);
long SHLoadFilterFromStream(IStream *,_GUID const &,void * *);
long SHNextObjectFromEnumUnknown(IEnumUnknown *,_GUID const &,void * *);
long SHOpenControlPanel(unsigned short const *,unsigned short const *,IUnknown *);
long SHOpenEffectiveToken(unsigned long,int,void * *);
long SHQueryToken<_TOKEN_USER>(void *,_TOKEN_INFORMATION_CLASS,int,_TOKEN_USER * *);
long SHRegAllocData(HKEY__ *,unsigned short const *,unsigned short const *,int,void * *,unsigned long *);
long SHRegGetBOOL(HKEY__ *,unsigned short const *,unsigned short const *,int *);
long SHRegGetBOOLWithREGSAM(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,int *);
long SHRegGetDWORD(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long *);
long SHRegGetFILETIME(HKEY__ *,unsigned short const *,unsigned short const *,_FILETIME *);
long SHRegGetGUID(HKEY__ *,unsigned short const *,unsigned short const *,_GUID *);
long SHRegGetStringEx(HKEY__ *,unsigned short const *,unsigned short const *,int,unsigned short *,unsigned long);
long SHRegSetBOOL(HKEY__ *,unsigned short const *,unsigned short const *,int);
long SHRegSetDWORD(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long);
long SHRegSetGUID(HKEY__ *,unsigned short const *,unsigned short const *,_GUID);
long SHRegSetString(HKEY__ *,unsigned short const *,unsigned short const *,unsigned short const *);
long SHSimpleItemFromAttributes(unsigned short const *,unsigned long,_GUID const &,void * *);
long SHSysAllocString(unsigned short const *,unsigned short * *);
long SaveImageWithWIC(IWICImagingFactory *,HBITMAP__ *,_GUID const &,IStream *);
long ScaleImageWithWIC(IWICImagingFactory *,HBITMAP__ *,tagSIZE,bool,HBITMAP__ * *);
long ScaleImageWithWIC(IWICImagingFactory *,IWICBitmapSource *,tagSIZE,bool,IWICBitmapSource * *);
long ScaleWICBitmapSource(IWICImagingFactory *,IWICBitmapSource *,WICBitmapInterpolationMode,tagSIZE,bool,IWICBitmapSource * *);
long SetActivationPropertySet(IUnknown *,Windows::Storage::Streams::IBuffer *);
long SetCreativeImpression(unsigned short const *);
long SetElementHIcon(DirectUI::Element *,HICON__ *);
long SetElementIcon(DirectUI::Element *,unsigned short);
long SetForceDownload(IShellItem *,bool);
long SetForceDownloadIfNeeded(IShellItem *,bool);
long SetFullscreenCXHRunning(bool);
long SetJpegQuantizationTableOptions(JpegQuantizationTableTypes,IPropertyBag2 *);
long SetLastVisitedFolder(unsigned short const *,unsigned short const *,IShellItem *);
long SetNodeAttribute(Windows::Data::Xml::Dom::IXmlNode *,unsigned short const *,unsigned short const *);
long SetNotificationIdentity(Windows::UI::Notifications::IToastNotification *,bool,HSTRING__ *);
long SetTileIconAsync(DirectUI::Element *,IShellItem2 *,IShellTaskScheduler *);
long SetTimeValueFromRegistryWithDefault(unsigned short const *,unsigned long,unsigned __int64 *);
long SetToastActions(Windows::Data::Xml::Dom::IXmlDocument *);
long SetToastImageSrc(Windows::Data::Xml::Dom::IXmlDocument *,unsigned short const *,unsigned short const *);
long SetToastTemplateToToastGeneric(Windows::Data::Xml::Dom::IXmlDocument *);
long SetUserAssoc(UASET,unsigned short const *,unsigned short const *,ASSOC_MAKE_DEFAULT_FLAGS);
long SettingsPane_ParserCreateSubstituteElement<SettingsButton>(unsigned short const *,SettingsButton *,DirectUI::Element *,unsigned long *);
long SharedConvertHResultToOpportunisticWinRTFileAPIError(long,bool,unsigned int,unsigned int,void *);
long SharedConvertHResultToWinRTFileAPIError(long,unsigned int,unsigned int,void *);
long SharingUI_Register();
long ShowAddToLockScreenDialog(HWND__ *,unsigned short const *,unsigned short const *,int,int,int,int *,int *);
long ShowToast(unsigned short const *,unsigned short const *,Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification *,IInspectable *> *);
long SnapHotkeyHandler_CreateInstance(IPriviledgedPositioner *,ISnapAssistController *,IImmersiveMonitorManager *,IApplicationViewCollection *,IImmersiveSettingsCache *,ITabletModeController *,IInputTracker *,_GUID const &,void * *);
long SnapServiceProvider_CreateInstance(_GUID const &,void * *);
long SortKeyCompareValues(tagPROPVARIANT const &,tagPROPVARIANT const &,tagCONDITION_OPERATION,int,int *);
long SplitActionAndServiceId(HSTRING__ *,HSTRING__ * *,HSTRING__ * *);
long StoreItemInHistory(IShellItem *);
long StringCchCatExW(unsigned short *,unsigned __int64,unsigned short const *,unsigned short * *,unsigned __int64 *,unsigned long);
long StringCchCatW(unsigned short *,unsigned __int64,unsigned short const *);
long StringCchCopyA(char *,unsigned __int64,char const *);
long StringCchCopyNExW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64,unsigned short * *,unsigned __int64 *,unsigned long);
long StringCchCopyNW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
long StringCchCopyW(unsigned short *,unsigned __int64,unsigned short const *);
long StringCchLengthW(unsigned short const *,unsigned __int64,unsigned __int64 *);
long StringCchPrintfA(char *,unsigned __int64,char const *,...);
long StringCchPrintfExW(unsigned short *,unsigned __int64,unsigned short * *,unsigned __int64 *,unsigned long,unsigned short const *,...);
long StringCchPrintfW(unsigned short *,unsigned __int64,unsigned short const *,...);
long StringCchVPrintfExW(unsigned short *,unsigned __int64,unsigned short * *,unsigned __int64 *,unsigned long,unsigned short const *,char *);
long StringCchVPrintfW(unsigned short *,unsigned __int64,unsigned short const *,char *);
long SuppressToastPopup(Windows::UI::Notifications::IToastNotification *);
long TResourceStringAllocCopyEx<unsigned short *>(HINSTANCE__ *,unsigned int,unsigned short,long (*)(void *,unsigned __int64,unsigned short * *),void *,unsigned short * *);
long TabletModeToast_Initialize();
long TabletModeToast_ShowToast(_TABLETMODESTATE,_TMCTRIGGER);
long TmExpandMemory(void * *,unsigned __int64);
long TouchpadActionsGestureHandler_CreateInstance(_GUID const &,void * *);
long TouchpadActionsManager_CreateInstance(_GUID const &,void * *);
long TouchpadGestureInputProvider_CreateInstance(ITouchpadGestureHandler *,_GUID const &,void * *);
long TouchpadKeyboardAction_CreateInstance(unsigned short,unsigned short,_GUID const &,void * *);
long TouchpadMediaAction_CreateInstance(MediaPlaybackCommands,_GUID const &,void * *);
long TouchpadSettingsManager_CreateInstance(_GUID const &,void * *);
long TouchpadVolumeAction_CreateInstance(VolumeAction,IAudioFlyoutController *,_GUID const &,void * *);
long TryBack(IApplicationView *,IInAppBackHandlerNotifications *);
long TryCheckAndOpenRestrictionKey(HKEY__ *,NamespaceRestrictionKeyArea,NamespaceRestrictionCategory,unsigned short const *,unsigned short const *,HKEY__ * *);
long TryGetRestrictionAccessHKEY(NamespaceRestrictionCategory,unsigned short const *,HKEY__ * *,HKEY__ * *);
long TryGetRestrictionAccessHKEYWorker(NamespaceRestrictionKeyArea,NamespaceRestrictionCategory,unsigned short const *,unsigned short const *,HKEY__ * *);
long UADeleteEntry(_GUID const *,unsigned short const *);
long UAFireEvent(_GUID const *,tagUAEVENT,unsigned short const *,unsigned long);
long UAGetLoggerIDByContractID(unsigned short const *,_GUID *);
long UAQueryEntry(_GUID const *,unsigned short const *,tagUEMINFO *);
long UShortAdd(unsigned short,unsigned short,unsigned short *);
long UpdateActiveToolIndex(unsigned short const *,std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,int,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,int> > > const &,bool,Windows::Data::Input::RadialControllerActions *);
long UpdateSoftLandingMetadata(Windows::Data::Xml::Dom::IXmlDocument *,unsigned short const *,unsigned short const *,unsigned short const *,Windows::Internal::UI::SoftLanding::SoftLandingTemplateType,HWND__ *,tagRECT const *,tagRECT const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *);
long UpdateToastTemplateWithData(Windows::Data::Xml::Dom::IXmlDocument *,Windows::Internal::UI::SoftLanding::SOFTLANDING_NOTIFICATION const &,HSTRING__ *,bool);
long UpdateWorkAreaTask(ZBID,IInternalImmersiveLayout *);
long UriEscapeString(HSTRING__ *,HSTRING__ * *);
long UriUnescapeString(HSTRING__ *,HSTRING__ * *);
long ValidateParams(LOCK_SCREEN_APPLICATION_CAPABILITIES,unsigned short const *,unsigned short * *);
long WICCreateCachedOrientedBitmapSource(IWICImagingFactory *,IWICBitmapSource *,IWICMetadataQueryReader *,IWICBitmapSource * *);
long WICCreateOrientedBitmapSource(IWICImagingFactory *,IWICBitmapSource *,IWICMetadataQueryReader *,IWICBitmapSource * *);
long WICGetTransformOptionFromMetadata(IWICMetadataQueryReader *,WICBitmapTransformOptions *);
long WICOrientateFrame(IWICImagingFactory *,IWICBitmapDecoder *,IWICBitmapFrameDecode *,bool,IWICBitmapSource * *);
long WaitForCompletion<Windows::Foundation::IAsyncActionCompletedHandler,Windows::Foundation::IAsyncAction>(Windows::Foundation::IAsyncAction *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *>,Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *> >(Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::Preview::InstallControl::AppInstallItem *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Devices::Geolocation::Geoposition *>,Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition *> >(Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *>,Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *> >(Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo *> *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Security::Authentication::OnlineId::UserIdentity *>,Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::OnlineId::UserIdentity *> >(Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::OnlineId::UserIdentity *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Storage::StorageFile *>,Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile *> >(Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Storage::StorageFolder *>,Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder *> >(Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::UI::Popups::IUICommand *>,Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand *> >(Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *>,Windows::Foundation::IAsyncOperation<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *> >(Windows::Foundation::IAsyncOperation<WindowsInternal::Shell::UnifiedTile::UnifiedTileManager *> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Windows::Foundation::IAsyncOperation<bool> >(Windows::Foundation::IAsyncOperation<bool> *,tagCOWAIT_FLAGS,void *);
long WaitForCompletion<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64>,Windows::Foundation::IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> >(Windows::Foundation::IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> *,tagCOWAIT_FLAGS,void *);
long WaitForEventIfPresent(unsigned short const *,unsigned long);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IAppInstanceViewPriv> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IAppInstanceViewPriv> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ICachedFileUpdaterEventSink> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ICachedFileUpdaterEventSink> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ICachedFileUpdaterInternal> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<ICachedFileUpdaterInternal> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IComponentUIHostedAppFrame> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IComponentUIHostedAppFrame> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IFileSavePickerEventSink> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IFileSavePickerEventSink> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IHostedApplicationEventSink> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IHostedApplicationEventSink> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IHostedViewEventSink> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IHostedViewEventSink> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IItemDeselectedSink> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<IItemDeselectedSink> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::ApplicationModel::Actions::IHostedActionHandler> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::ApplicationModel::Actions::IHostedActionHandler> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Pickers::Provider::ICurrentLocationRequestDeferral> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Pickers::Provider::IPickerClosingDeferral> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Pickers::Provider::IPickerClosingDeferral> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> >);
long WeakRefAs<Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Provider::IFileUpdateRequestDeferral> > >(Microsoft::WRL::WeakRef const &,Microsoft::WRL::Details::ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Provider::IFileUpdateRequestDeferral> >);
long _ActivateApplicationForLaunchHelperWithWindowFactory(IApplicationActivationManagerPriv *,unsigned short const *,unsigned short const *,unsigned short const *,ACTIVATEOPTIONSINTERNAL,HMONITOR__ *,Windows::UI::Core::ICoreWindowFactory *,unsigned long *);
long _AddConditionToArray(CCoSimpleArray<ICondition *,4294967294,CSimpleArrayStandardCompareHelper<ICondition *> > &,ICondition *);
long _AddFileTypeToArray(unsigned short const *,CDPACoTaskMem<unsigned short> *);
long _AllocArray<unsigned short,CTCoAllocPolicy>(void *,unsigned long,unsigned __int64,unsigned short * *);
long _AllocArray<unsigned short,CTLocalAllocPolicy>(void *,unsigned long,unsigned __int64,unsigned short * *);
long _AllocStringWorker<CTCoAllocPolicy>(void *,unsigned long,unsigned short const *,unsigned __int64,unsigned __int64,unsigned short * *);
long _AppxUriToResourceUri(IUri *,unsigned short const *,unsigned short * *);
long _BuildDisplayIndex(DISPLAYCONFIG_PATH_INFO *,DISPLAYCONFIG_PATH_INFO *,unsigned int,CDSA<_AdapterInfo> *,int,unsigned int,bool,int *,int *);
long _ConvertFromSystemTime(_SYSTEMTIME const *,void *,SHTIME_FLAGS);
long _ConvertPixelFormat(IWICBitmapSource *,IWICImagingFactory *,IWICBitmapSource * *);
long _ConvertTimeZone(_SYSTEMTIME *,SHTIME_FLAGS,SHTIME_FLAGS);
long _ConvertToSystemTime(void const *,SHTIME_FLAGS,_SYSTEMTIME *);
long _CopyStringArray(CSimpleCaseInsensitiveOrdinalStringArray &,unsigned short const * const *,unsigned __int64);
long _CreateAndAddCDataToNode(Windows::Data::Xml::Dom::IXmlDocument *,Windows::Data::Xml::Dom::IXmlNode *,unsigned short const *);
long _CreateAndAddElementWithText(unsigned short const *,unsigned short const *,Windows::Data::Xml::Dom::IXmlDocument *,Windows::Data::Xml::Dom::IXmlNode *,ElementTextType);
long _CreateFileSysBindCtx(IBindCtx *,_WIN32_FIND_DATAW const *,IBindCtx * *);
long _CreatePackageInfo(unsigned short const *,unsigned char * *);
long _CreatePropertyBagBindCtx<unsigned long>(IBindCtx *,unsigned short const *,unsigned long,IBindCtx * *);
long _CreatePropertyBagBindCtx<unsigned short const *>(IBindCtx *,unsigned short const *,unsigned short const *,IBindCtx * *);
long _CreateRestrictedTokenFromSpecifiedToken(unsigned long,void *,void * *);
long _CreateUri(unsigned short const *,IUri * *);
long _DUI_CreateParserFromResourceNoCallback(HINSTANCE__ *,unsigned int,DEVICE_SCALE_FACTOR,HWND__ *,DirectUI::DUIXmlParser * *);
long _GetActivationContext(IShellItem *,unsigned short * *);
long _GetAppID(IShellFolder *,unsigned short * *);
long _GetAssociationPath(unsigned short const *,bool,unsigned short *,unsigned int);
long _GetCachedSTAObject(unsigned long,int *,CCachedSTAObject * *);
long _GetCommandLine(unsigned short const *,unsigned short *,unsigned int);
long _GetEnterpriseId(IUnknown *,HSTRING__ * *);
long _GetExtensionIdFromExtensionItem(IExtensionListItem *,Windows::Internal::String *);
long _GetExtensionListItemPropertyStoreForAppItem(IShellItem *,unsigned short const *,_GUID const &,void * *);
long _GetFastPropertyStore(IShellFolder *,IPropertyStore * *);
long _GetFilePath(unsigned short const *,unsigned short * *);
long _GetHashFromActionInformation(IShellItem *,CPropertyStoreHelper const &,unsigned short * *);
long _GetHashFromConnectedSearchSuggestion(unsigned short const *,unsigned short const *,CPropertyStoreHelper const &,unsigned short * *);
long _GetIDListFromObject(IUnknown *,_ITEMIDLIST * *);
long _GetItemAt(IObjectArray *,unsigned int,IShellItem * *);
long _GetItemDisplayName(IShellItem *,unsigned short * *);
long _GetLanguageResourcePool(_GUID const &,void * *);
long _GetLocalWeights(IShellItem *,unsigned short * *);
long _GetPackageFamilyName(IShellFolder *,unsigned short * *);
long _GetPlmSentinel(unsigned short const *,unsigned short const *,GET_PACKAGE_SENTINEL_DISPOSITION,void * *);
long _GetRegKeyLastWriteTime(HKEY__ *,unsigned short const *,unsigned short const *,REG_LAST_WRITE_OPTION,_FILETIME *);
long _GetRegisteredAppsForPackageForType(LOCK_SCREEN_APPLICATION_CAPABILITIES,ILockScreenApplicationManager *,unsigned short const *,CSimpleCaseInsensitiveOrdinalStringArray *);
long _GetSyncEventForDownload(IShellItem *,_tagpropertykey const &,unsigned short const *,bool,void * *);
long _HStringVectorToStringArray(bool,Windows::Foundation::Collections::IVector<HSTRING__ *> *,unsigned long *,unsigned short * * *);
long _HistoryItemExists(unsigned short const *,bool *);
long _ImpersonateProcessToken(void *,void * *);
long _InitRestrictedProcess(void * *,void * *);
long _LaunchCloudExperienceHostModal(IHostAppManager *,unsigned short const *,unsigned long);
long _LaunchCloudExperienceHostModalForCredentialReset(IHostAppManager *,unsigned short const *,unsigned long,bool);
long _MapExtensionToAppItem(IExtensionListItem *,IShellItem *,IAppListItem * *);
long _MapExtensionToAppItem(IExtensionListItem *,IShellItem *,IShellItem * *);
long _MapExtensionsToAppItems(IExtensionList *,CCoSimpleArray<Microsoft::WRL::ComPtr<IAppListItem>,4294967294,CSimpleArrayStandardCompareHelper<Microsoft::WRL::ComPtr<IAppListItem> > > *);
long _RecursiveAddCData(Windows::Data::Xml::Dom::IXmlDocument *,Windows::Data::Xml::Dom::IXmlNode *,unsigned short const *);
long _SaveImageWithWIC(IWICImagingFactory *,IWICBitmapSource *,_GUID const &,unsigned short const *,IStream *);
long _ScaleImageIfNeeded(IWICBitmapSource *,IWICImagingFactory *,Windows::Foundation::Rect const &,IWICBitmapSource * *);
long _SerializeAsShellLink(IShellItem *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *);
long _SetTextOnNode(Windows::Data::Xml::Dom::IXmlNode *,Windows::Data::Xml::Dom::IXmlText *);
long _SetUserChoiceAndHash(unsigned short const *,unsigned short const *);
long _SimpleOpCompareResult(int,tagCONDITION_OPERATION,int,int *);
long _SimpleOpCompareValues(tagPROPVARIANT const &,tagPROPVARIANT const &,tagCONDITION_OPERATION,int,int *);
long _ValidateAndConvertMsAppxUri(unsigned short const *,unsigned short const *,unsigned short * *);
long _ValidateApplication(unsigned short const *);
long _ValidateUri(IUri *);
long s_GetAppStringProperty(unsigned short const *,_tagpropertykey const &,unsigned short * *);
long s_GetExtensionRegistrationByAppId(unsigned short const *,Windows::Foundation::IExtensionRegistration * *);
long wil_RtlStagingConfig_RecordFeatureUsage(unsigned int,unsigned int,int);
long wil_StagingConfig_RecordFeatureUsage(unsigned int,unsigned int,int);
long wil_details_NtQueryWnfStateData(__WIL__WNF_STATE_NAME const *,__WIL__WNF_TYPE_ID const *,void const *,unsigned long *,void *,unsigned long *);
long wil_details_NtUpdateWnfStateData(__WIL__WNF_STATE_NAME const *,void const *,unsigned long,__WIL__WNF_TYPE_ID const *,void const *,unsigned long,unsigned long);
long wil_details_RtlRegisterFeatureConfigurationChangeNotification(void (*)(void *),void *,unsigned __int64 *,void * *);
long wil_details_RtlSubscribeWnfStateChangeNotification(__WIL__WNF_USER_SUBSCRIPTION * *,__WIL__WNF_STATE_NAME,unsigned long,long (*)(__WIL__WNF_STATE_NAME,unsigned long,__WIL__WNF_TYPE_ID *,void *,void const *,unsigned long),void *,__WIL__WNF_TYPE_ID *,unsigned long,unsigned long);
long wil_details_StagingConfig_FireNotification(wil_details_StagingConfig *,unsigned int,unsigned short,int);
long wil_details_StagingConfig_Load(wil_details_StagingConfig *,wil_FeatureStore,unsigned __int64,void *,int);
long wil_details_WriteSRUMWnfUsageBuffer(wil::details_abi::heap_vector<wil_details_FeatureUsageSRUM> *);
std::basic_string<char,std::char_traits<char>,std::allocator<char> > ExtendCorrelationVector(char const *);
std::basic_string<char,std::char_traits<char>,std::allocator<char> > HSTRINGtoUTF8(HSTRING__ *);
std::basic_string<char,std::char_traits<char>,std::allocator<char> > IncrementCorrelationVector(char const *);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > EscapeString(Windows::Foundation::IUriEscapeStatics *,unsigned short const *);
std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > UnescapeString(Windows::Foundation::IUriEscapeStatics *,unsigned short const *);
tagPOINT DUI_GetLocation(DirectUI::Element *,DUI_COORDINATES_SYSTEM);
tagSIZE DUI_GetElementExtent(DirectUI::Element *);
unsigned int (* g_wil_details_apiGetFeatureVariant)(unsigned int,FEATURE_CHANGE_TIME,unsigned int *,int *,int *);
unsigned int (* g_wil_details_internalGetFeatureVariant)(unsigned int,FEATURE_CHANGE_TIME,unsigned int *,int *,int *);
unsigned int CalcBucketedScaleFactor(tagSIZE,tagSIZE);
unsigned int CalculateZobelHash(void const *,unsigned __int64);
unsigned int DUI_GetChildElementCount(DirectUI::Element *);
unsigned int GetDataSourceIdFromLocalType(UI_LOCAL_RESULT_TYPE);
unsigned int GetNCBAvailableEntries();
unsigned int g_windowOverride;
unsigned long GetARGBColorFromValue(DirectUI::Value *);
unsigned long GetColorFromValue(DirectUI::Value *);
unsigned long GetFileAttributesFromSFGAOFlags(unsigned long);
unsigned long GetQuickLinkDisplayCountSetting();
unsigned long GetSystemNormalization();
unsigned long GetSystemPreferredLocale();
unsigned long RegGetContentDeliveryManagerDWORDWithDefault(unsigned short const *,unsigned long);
unsigned long RegGetSoftLandingDWORDWithDefault(unsigned short const *,unsigned long);
unsigned long SHDeleteProtectedValue(HKEY__ *,unsigned short const *,unsigned short const *,int);
unsigned long SHProcessMessagesUntilEvent(HWND__ *,void *,unsigned long);
unsigned long SHProcessMessagesUntilEventsEx(HWND__ *,void * *,unsigned long,unsigned long,unsigned long,unsigned long);
unsigned long SHSetProtectedValue(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,void const *,unsigned long);
unsigned long _ComputeNotificationDuration(NotificationDurationType);
unsigned long _RegSetKeyValueWithSDDL(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,void const *,unsigned long,_SECURITY_ATTRIBUTES *);
unsigned long g_callingContext;
unsigned long g_dwNormalization;
unsigned long g_dwTicksNormalization;
unsigned long g_msContractDelay;
unsigned long g_toastFactoryCookie;
unsigned short const * * c_rgszBrowserExts;
unsigned short const * * g_rgExplorerApps;
unsigned short const * GetPCSettingsFormatString(PCSetting::PCSettingsValueType,PCSetting::PCSettingsFormatType);
unsigned short const * const AppointmentsManagerShowTimeFrameAsyncOperationName;
unsigned short const * const InterfaceName_Windows_Storage_Streams_IRandomAccessStream;
unsigned short const * const RuntimeClass_ApplicationTheme_AppThemeAPI;
unsigned short const * const RuntimeClass_ContentManagement_ContentManagementService;
unsigned short const * const RuntimeClass_WindowsInternal_Shell_UnifiedTile_PackagedUnifiedTileIdentifier;
unsigned short const * const RuntimeClass_WindowsInternal_Shell_UnifiedTile_UnifiedTileManager;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_AppointmentsProviderAddAppointmentActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_AppointmentsProviderRemoveAppointmentActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_AppointmentsProviderReplaceAppointmentActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_AppointmentsProviderShowTimeFrameActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_CachedFileUpdaterActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_ContactCallActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_ContactMapActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_ContactMessageActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_ContactPostActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_ContactVideoCallActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_DeviceActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_FileOpenPickerActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_FileSavePickerActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_LaunchActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_Private_ApplicationActivation;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_Private_ApplicationActivationProperties;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_ProtocolActivatedEventArgs;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Activation_SplashScreen;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Appointments_AppointmentsProvider_AddAppointmentOperation;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Appointments_AppointmentsProvider_RemoveAppointmentOperation;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Appointments_AppointmentsProvider_ReplaceAppointmentOperation;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Background_AlarmApplicationManager;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Background_BackgroundExecutionManager;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Contacts_Contact;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Contacts_ContactAddress;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Contacts_Internal_ContactManagerBroker;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Core_CoreApplication;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_DataTransfer_DataPackage;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_DataTransfer_DataTransferManager;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_DataTransfer_HtmlFormatHelper;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_DataTransfer_SharedStorageAccessManager;
unsigned short const * const RuntimeClass_Windows_ApplicationModel_Store_Preview_InstallControl_AppInstallManager;
unsigned short const * const RuntimeClass_Windows_Data_Json_JsonArray;
unsigned short const * const RuntimeClass_Windows_Data_Json_JsonObject;
unsigned short const * const RuntimeClass_Windows_Data_Json_JsonValue;
unsigned short const * const RuntimeClass_Windows_Data_Xml_Dom_XmlDocument;
unsigned short const * const RuntimeClass_Windows_Devices_Geolocation_Geolocator;
unsigned short const * const RuntimeClass_Windows_FamilySafety_Internal_UserSettings;
unsigned short const * const RuntimeClass_Windows_Foundation_Collections_PropertySet;
unsigned short const * const RuntimeClass_Windows_Foundation_Collections_ValueSet;
unsigned short const * const RuntimeClass_Windows_Foundation_Diagnostics_AsyncCausalityTracer;
unsigned short const * const RuntimeClass_Windows_Foundation_ExtensionCatalog;
unsigned short const * const RuntimeClass_Windows_Foundation_Private_CompositionDevice;
unsigned short const * const RuntimeClass_Windows_Foundation_PropertyValue;
unsigned short const * const RuntimeClass_Windows_Foundation_Uri;
unsigned short const * const RuntimeClass_Windows_Gaming_GameBar_PresenceServer_Internal_PresenceWriter;
unsigned short const * const RuntimeClass_Windows_Globalization_NumberFormatting_DecimalFormatter;
unsigned short const * const RuntimeClass_Windows_Internal_AddFolderSuggestion_AddFolderSuggestionActivatedArgs;
unsigned short const * const RuntimeClass_Windows_Internal_ApplicationDefaults_ApplicationDefaultHelpers;
unsigned short const * const RuntimeClass_Windows_Internal_AssignedAccess_AssignedAccessController;
unsigned short const * const RuntimeClass_Windows_Internal_AssignedAccess_AssignedAccessManager;
unsigned short const * const RuntimeClass_Windows_Internal_ComposableShell_ExtensionClassProvider;
unsigned short const * const RuntimeClass_Windows_Internal_Devices_Input_PenButtonListenerPartner;
unsigned short const * const RuntimeClass_Windows_Internal_Devices_Input_PenDockListenerPartner;
unsigned short const * const RuntimeClass_Windows_Internal_Feedback_FeedbackBroker;
unsigned short const * const RuntimeClass_Windows_Internal_Feedback_FeedbackItem;
unsigned short const * const RuntimeClass_Windows_Internal_Feedback_StringFeedback_StringFeedbackEngine;
unsigned short const * const RuntimeClass_Windows_Internal_Foundation_Contracts_ActivationFactoryContractRedirectorContext;
unsigned short const * const RuntimeClass_Windows_Internal_Holographic_Miracast_HolographicMiracastControl;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_AssignedAccess_AssignedAccessControllerProxy;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_DeviceDiscoveryExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_DevicePickerExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ExpansionExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_HostExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_MiracastBannerExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_MiracastBannerResizeEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_NetworkFlyoutExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_PenWorkspaceExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_SharePickerExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ShellExperienceDispatcher;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ShellExperienceManagerFactory;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_ShellExperienceViewStateChangedEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_SoftLandingExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_TestExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_TrayBatteryFlyoutExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_TrayClockFlyoutExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Experience_TrayMtcUvcFlyoutExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Holographic_ContextIdentifier;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceManager;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_ModalExperience_ModalExperienceOptions;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_Popups_PopupClient;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_RadialControllerMenuItemInvokedArgs;
unsigned short const * const RuntimeClass_Windows_Internal_Shell_ShellLauncher_ShellLauncherManager;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_Application;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_ApplicationResourceResolver;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_Package;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_PackageFamily;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_PackageLocation;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_PackagePolicy;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_Protocol;
unsigned short const * const RuntimeClass_Windows_Internal_StateRepository_User;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_CloudStore;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_ObservableObjectFactory;
unsigned short const * const RuntimeClass_Windows_Internal_UI_StartScreen_JumpListBrokered;
unsigned short const * const RuntimeClass_Windows_Management_Core_ApplicationDataManager;
unsigned short const * const RuntimeClass_Windows_Management_Deployment_Internal_PackageManagerInternal;
unsigned short const * const RuntimeClass_Windows_Management_Deployment_PackageManager;
unsigned short const * const RuntimeClass_Windows_Media_Capture_Internal_AppCaptureShell;
unsigned short const * const RuntimeClass_Windows_Media_Casting_Internal_DeviceAssociationAndAccessHelper;
unsigned short const * const RuntimeClass_Windows_Networking_Connectivity_NetworkInformation;
unsigned short const * const RuntimeClass_Windows_Security_Authentication_OnlineId_OnlineIdAuthenticator;
unsigned short const * const RuntimeClass_Windows_Security_Authentication_OnlineId_OnlineIdServiceTicketRequest;
unsigned short const * const RuntimeClass_Windows_Services_TargetedContent_TargetedContentContainer;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_CachedFileUpdateManager;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_FileExtensionVector;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_PickerFileType;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_CurrentLocationRequest;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_CurrentLocationRequestDeferral;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_CurrentLocationRequestedEventArgs;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_FileOpenPickerUI;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_FileOpenPickerUIInternal;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_FileRemovedEventArgs;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_FileSavePickerUI;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_FileSavePickerUIInternal;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_PickerClosingDeferral;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_PickerClosingEventArgs;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_PickerClosingOperation;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_TargetFileRequest;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_TargetFileRequestDeferral;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_Provider_TargetFileRequestedEventArgs;
unsigned short const * const RuntimeClass_Windows_Storage_Pickers_UpdateFilesResult;
unsigned short const * const RuntimeClass_Windows_Storage_Provider_CachedFileUpdaterUI;
unsigned short const * const RuntimeClass_Windows_Storage_Provider_FileUpdateRequest;
unsigned short const * const RuntimeClass_Windows_Storage_Provider_FileUpdateRequestDeferral;
unsigned short const * const RuntimeClass_Windows_Storage_Provider_FileUpdateRequestedEventArgs;
unsigned short const * const RuntimeClass_Windows_Storage_StorageFile;
unsigned short const * const RuntimeClass_Windows_Storage_StorageFolder;
unsigned short const * const RuntimeClass_Windows_Storage_Streams_DataReader;
unsigned short const * const RuntimeClass_Windows_Storage_Streams_RandomAccessStream;
unsigned short const * const RuntimeClass_Windows_Storage_Streams_RandomAccessStreamReference;
unsigned short const * const RuntimeClass_Windows_System_Internal_UserManager;
unsigned short const * const RuntimeClass_Windows_System_Launcher;
unsigned short const * const RuntimeClass_Windows_System_LauncherOptions;
unsigned short const * const RuntimeClass_Windows_System_Profile_EducationSettings;
unsigned short const * const RuntimeClass_Windows_System_UserProfile_AssignedAccessSettings;
unsigned short const * const RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences;
unsigned short const * const RuntimeClass_Windows_UI_Composition_Compositor;
unsigned short const * const RuntimeClass_Windows_UI_Core_CoreWindow;
unsigned short const * const RuntimeClass_Windows_UI_Core_ImmersiveCoreWindowFactory;
unsigned short const * const RuntimeClass_Windows_UI_Notifications_ToastNotification;
unsigned short const * const RuntimeClass_Windows_UI_Notifications_ToastNotificationManager;
unsigned short const * const RuntimeClass_Windows_UI_Popups_MessageDialog;
unsigned short const * const RuntimeClass_Windows_UI_Popups_PopupMenu;
unsigned short const * const RuntimeClass_Windows_UI_Popups_UICommand;
unsigned short const * const RuntimeClass_Windows_UI_StartScreen_JumpList;
unsigned short const * const RuntimeClass_Windows_UI_StartScreen_JumpListItem;
unsigned short const * const RuntimeClass_Windows_UI_ViewManagement_ApplicationViewTransferContext;
unsigned short const * const RuntimeClass_Windows_UI_ViewManagement_UISettings;
unsigned short const * const RuntimeClass_lockframework_LockAppBroker;
unsigned short const * const c_AppId;
unsigned short const * const c_AppProtocol;
unsigned short const * const c_AppProtocolUri;
unsigned short const * const c_GamingOverlayAppId;
unsigned short const * const c_PluginAppId;
unsigned short const * const c_gammaFlashAsyncOperationName;
unsigned short const * const c_retailDemoKeyOobeWrite;
unsigned short const * const c_retailDemoValueEnabled;
unsigned short const * const c_szActionServiceDelimiter;
unsigned short const * const c_szCPLSearchFileName;
unsigned short const * const c_szFeedbackAppID;
unsigned short const * const c_szSoftLandingAppIdentity;
unsigned short const * const c_wzGameBarPfn;
unsigned short const * const c_wzGameBarProtocolScheme;
unsigned short const * const c_wzGameBarStartupTipsUri;
unsigned short const * const c_wzGameBarUpdateKGLUri;
void (* g_wil_details_RecordSRUMFeatureUsage)(unsigned int,unsigned int,unsigned int);
void (* g_wil_details_apiRecordFeatureError)(unsigned int,FEATURE_ERROR const *);
void (* g_wil_details_apiRecordFeatureUsage)(unsigned int,unsigned int,unsigned int,char const *);
void (* g_wil_details_apiSubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
void (* g_wil_details_apiUnsubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
void (* g_wil_details_internalRecordFeatureError)(unsigned int,FEATURE_ERROR const *);
void (* g_wil_details_internalRecordFeatureUsage)(unsigned int,unsigned int,unsigned int,char const *);
void (* g_wil_details_internalSubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
void (* g_wil_details_internalUnsubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
void (* g_wil_details_pfnFeatureLoggingHook)(unsigned int,FEATURE_LOGGED_TRAITS const *,FEATURE_ERROR const *,int,wil_ReportingKind const *,wil_VariantReportingKind const *,unsigned char,unsigned __int64);
void (* g_wil_details_pfnRtlUnregisterFeatureConfigurationChangeNotification)(void *);
void (* g_wil_details_recordFeatureUsage)(unsigned int,wil_details_ServiceReportingKind,unsigned int,wil_details_FeatureReportingCache *,wil_details_RecordUsageResult *);
void * MemoryAlloc(unsigned __int64);
void * operator new(unsigned __int64);
void * operator new(unsigned __int64,std::nothrow_t const &);
void * operator new[](unsigned __int64);
void * operator new[](unsigned __int64,std::nothrow_t const &);
void CancelPendingComTaskPoolTasks(unsigned long,bool);
void ClearAdapterInfo(CDSA<_AdapterInfo> *,bool);
void ClearUserChoice(HKEY__ *,unsigned short const *,bool);
void ComputeSystemDPI(int *,int *);
void DUI_GetElementRelativeRect(DirectUI::Element *,DirectUI::Element *,DUI_COORDINATES_SYSTEM,tagRECT *);
void DUI_MapElementPoint(DirectUI::Element *,DirectUI::Element *,DUI_COORDINATES_SYSTEM,tagPOINT const *,tagPOINT *);
void DUI_ParserErrorCallback(unsigned short const *,unsigned short const *,int,void *);
void DUI_SafeDestroyElement(DirectUI::Element * *);
void DUI_SafeSyncDestroyElement(DirectUI::Element * *);
void DUI_SetGadgetZOrder(DirectUI::Element *,unsigned int);
void FreeGameConfig(ExecutionModel::GameConfig *);
void FreeQuickLinkPrivInfo(QUICK_LINK_INFO_PRIV *);
void FreeRegisteredAppsList(unsigned short * * *,unsigned int);
void FreeRegisteredNCBEntries(REGISTERED_NCB_ENTRY * *,unsigned int);
void FreeRunningShareInfo(RUNNING_SHARE_INFO *);
void FreeSharableItemDescriptor(SHARABLE_ITEM_DESCRIPTOR *);
void FreeSharingActivationInfo(SHARING_ACTIVATION_INFO *);
void FreeStringArray(unsigned long,unsigned short * *);
void FreeTLS(unsigned long *);
void GameBarTerminationCallback(void *,unsigned char);
void GetRegValue(unsigned short const *,unsigned short const *,unsigned long,unsigned long *);
void InvokeEnsureFlyout(AgileGitPtr);
void LoadScalingOverrides();
void LogAppxContactServiceQuerySQMData(unsigned short const *,bool);
void MemoryFree(void *);
void OriginateErrorWithFormattedResourceStringArgsList(long,HINSTANCE__ *,unsigned int,char * *);
void OriginateErrorWithResourceString(long,HINSTANCE__ *,unsigned int);
void RaiseUiaPropertyChangedEvents(DirectUI::Element *,UiaChangedProperty const *,unsigned __int64);
void SHCoFreeArray<unsigned short>(unsigned short * *,unsigned __int64);
void SHComputeDPI(HWND__ *,int *,int *);
void SHPhysicalToLogicalDPI(HWND__ *,int *,int *);
void SafeDestroy<DirectUI::Element>(DirectUI::Element * *);
void SafeRelease<CDummyUnknown>(CDummyUnknown * *);
void SafeRelease<DirectUI::Value>(DirectUI::Value * *);
void SafeRelease<IBindCtx>(IBindCtx * *);
void SafeRelease<ICondition>(ICondition * *);
void SafeRelease<IDCompositionAnimation>(IDCompositionAnimation * *);
void SafeRelease<IPopupCommand>(IPopupCommand * *);
void SafeRelease<IQueryAssociations>(IQueryAssociations * *);
void SafeRelease<IQueryContinue>(IQueryContinue * *);
void SafeRelease<IQuerySource>(IQuerySource * *);
void SafeRelease<IShellItem>(IShellItem * *);
void SafeRelease<IShellItemArray>(IShellItemArray * *);
void SafeRelease<IUnknown>(IUnknown * *);
void ScheduleThumbnailDownload(IBindCtx *,IShellFolder *,_ITEMID_CHILD const *,IPropertyStore *);
void SetDescendentLayoutPos(DirectUI::Element *,unsigned short const *,int,bool);
void SetVisibleWithFade(DirectUI::Element *,bool);
void SyncActionProtocolSettings(unsigned short const *);
void UpdateScaleContext();
void ValidateScheme(Windows::Foundation::IUriRuntimeClass *);
void _Atexit(void (*)());
void _ClearTime(void *,SHTIME_FLAGS);
void _DeleteUserChoice(HKEY__ *,unsigned short const *,bool,bool);
void _GetImageResourceQualifiers(IResourceCandidate *,LS_IMAGE_QUALIFIERS *,unsigned long *);
void _TypeFromId(unsigned short const *,ConnectedSearchHistoryType *);
void __ArrayUnwind(void *,unsigned __int64,int,void (*)(void *));
void _tlgWriteActivityAutoStop<0,5>(_tlgProvider_t const *,_GUID const *);
void _tlgWriteActivityAutoStop<35184372088832,5>(_tlgProvider_t const *,_GUID const *);
void _tlgWriteActivityAutoStop<70368744177664,5>(_tlgProvider_t const *,_GUID const *);
void g_winEventProc(HWINEVENTHOOK__ *,unsigned long,HWND__ *,long,long,unsigned long,unsigned long);
void operator delete(void *);
void operator delete(void *,std::nothrow_t const &);
void operator delete(void *,void *);
void operator delete[](void *);
void operator delete[](void *,std::nothrow_t const &);
void s_CreateAndShowTransparentOverlay();
void s_SetTileTooltip(DirectUI::Element *);
void wil_details_FeatureReporting_IncrementOpportunityInCache(wil_details_FeatureReportingCache *,wil_details_ServiceReportingKind,unsigned int,wil_details_RecordUsageResult *);
void wil_details_FeatureReporting_IncrementUsageInCache(wil_details_FeatureReportingCache *,wil_details_ServiceReportingKind,unsigned int,wil_details_RecordUsageResult *);
void wil_details_FeatureReporting_ReportUsageToService(wil_details_FeatureReportingCache *,unsigned int,int,int,FEATURE_LOGGED_TRAITS const *,int,wil_ReportingKind,unsigned __int64);
void wil_details_FeatureReporting_ReportVariantUsageToService(wil_details_FeatureReportingCache *,unsigned int,int,int,FEATURE_LOGGED_TRAITS const *,int,unsigned char,unsigned int,wil_VariantReportingKind,unsigned __int64);
