
namespace __vc_attributes {

	namespace atl {

		struct aggregatesAttribute {
			void aggregatesAttribute( CHAR const * );
			void aggregatesAttribute();
			/*0000*/ CHAR const * clsid;
			/*0008*/
		};

		struct com_interface_entryAttribute {
			void com_interface_entryAttribute( CHAR const * );
			void com_interface_entryAttribute();
			/*0000*/ CHAR const * value;
			/*0008*/
		};

		struct db_accessorAttribute {
			void db_accessorAttribute( INT , BOOLEAN );
			void db_accessorAttribute();
			/*0000*/ INT id;
			/*0004*/ BOOLEAN auto_;
			/*0008*/
		};

		struct db_columnAttribute {
			void db_columnAttribute( CHAR const * , CHAR const * , CHAR const * , CHAR const * , CHAR const * , CHAR const * );
			void db_columnAttribute( CHAR const * );
			void db_columnAttribute();
			/*0000*/ CHAR const * ordinal;
			/*0008*/ CHAR const * dbtype;
			/*0010*/ CHAR const * precision;
			/*0018*/ CHAR const * scale;
			/*0020*/ CHAR const * status;
			/*0028*/ CHAR const * length;
			/*0030*/
		};

		struct db_commandAttribute {
			void db_commandAttribute( USHORT const * , USHORT const * , USHORT const * , USHORT const * , USHORT const * , USHORT const * );
			void db_commandAttribute( USHORT const * );
			void db_commandAttribute( CHAR const * , CHAR const * , CHAR const * , CHAR const * , CHAR const * , CHAR const * );
			void db_commandAttribute( CHAR const * );
			void db_commandAttribute();
			/*0000*/ CHAR const * command;
			/*0008*/ CHAR const * name;
			/*0010*/ CHAR const * source_name;
			/*0018*/ CHAR const * hresult;
			/*0020*/ CHAR const * bindings;
			/*0028*/ CHAR const * bulk_fetch;
			/*0030*/
		};

		struct db_paramAttribute {
			void db_paramAttribute( CHAR const * , CHAR const * , CHAR const * , CHAR const * , CHAR const * , CHAR const * , CHAR const * );
			void db_paramAttribute( CHAR const * );
			void db_paramAttribute();
			/*0000*/ CHAR const * ordinal;
			/*0008*/ CHAR const * paramtype;
			/*0010*/ CHAR const * dbtype;
			/*0018*/ CHAR const * precision;
			/*0020*/ CHAR const * scale;
			/*0028*/ CHAR const * status;
			/*0030*/ CHAR const * length;
			/*0038*/
		};

		struct db_sourceAttribute {
			void db_sourceAttribute( USHORT const * , USHORT const * , USHORT const * );
			void db_sourceAttribute( USHORT const * );
			void db_sourceAttribute( CHAR const * , CHAR const * , CHAR const * );
			void db_sourceAttribute( CHAR const * );
			void db_sourceAttribute();
			/*0000*/ CHAR const * source;
			/*0008*/ CHAR const * name;
			/*0010*/ CHAR const * hresult;
			/*0018*/
		};

		struct db_tableAttribute {
			void db_tableAttribute( USHORT const * , USHORT const * , USHORT const * , USHORT const * , USHORT const * );
			void db_tableAttribute( USHORT const * );
			void db_tableAttribute( CHAR const * , CHAR const * , CHAR const * , CHAR const * , CHAR const * );
			void db_tableAttribute( CHAR const * );
			void db_tableAttribute();
			/*0000*/ CHAR const * table;
			/*0008*/ CHAR const * name;
			/*0010*/ CHAR const * source_name;
			/*0018*/ CHAR const * hresult;
			/*0020*/ CHAR const * bulk_fetch;
			/*0028*/
		};

		struct implements_categoryAttribute {
			void implements_categoryAttribute( CHAR const * );
			/*0000*/ CHAR const * value;
			/*0008*/
		};

		struct perf_counterAttribute {
			void perf_counterAttribute( CHAR const * , CHAR const * , INT , INT , INT , INT , BOOLEAN , INT , INT , CHAR const * );
			void perf_counterAttribute();
			/*0000*/ CHAR const * namestring;
			/*0008*/ CHAR const * helpstring;
			/*0010*/ INT name_res;
			/*0014*/ INT help_res;
			/*0018*/ INT countertype;
			/*001c*/ INT defscale;
			/*0020*/ BOOLEAN default_counter;
			/*0024*/ INT detail;
			/*0028*/ INT max_counter_size;
			/*0030*/ CHAR const * countertype_string;
			/*0038*/
		};

		struct perf_objectAttribute {
			void perf_objectAttribute( INT , INT , CHAR const * , CHAR const * , INT , BOOLEAN , CHAR const * , INT );
			void perf_objectAttribute();
			/*0000*/ INT name_res;
			/*0004*/ INT help_res;
			/*0008*/ CHAR const * namestring;
			/*0010*/ CHAR const * helpstring;
			/*0018*/ INT detail;
			/*001c*/ BOOLEAN no_instances;
			/*0020*/ CHAR const * class_;
			/*0028*/ INT maxinstnamelen;
			/*0030*/
		};

		struct perfmonAttribute {
			void perfmonAttribute( CHAR const * , BOOLEAN );
			void perfmonAttribute( CHAR const * );
			void perfmonAttribute();
			/*0000*/ CHAR const * name;
			/*0008*/ BOOLEAN register;
			/*0010*/
		};

		struct rdxAttribute {
			void rdxAttribute( CHAR const * , CHAR const * , CHAR const * );
			void rdxAttribute( CHAR const * , CHAR const * );
			void rdxAttribute();
			/*0000*/ CHAR const * key;
			/*0008*/ CHAR const * valuename;
			/*0010*/ CHAR const * regtype;
			/*0018*/
		};

		struct registration_scriptAttribute {
			void registration_scriptAttribute( CHAR const * );
			void registration_scriptAttribute();
			/*0000*/ CHAR const * script;
			/*0008*/
		};

		struct request_handlerAttribute {
			void request_handlerAttribute( CHAR const * , CHAR const * );
			void request_handlerAttribute( CHAR const * );
			void request_handlerAttribute();
			/*0000*/ CHAR const * name;
			/*0008*/ CHAR const * sdl;
			/*0010*/
		};

		struct requires_categoryAttribute {
			void requires_categoryAttribute( CHAR const * );
			/*0000*/ CHAR const * value;
			/*0008*/
		};

		struct soap_handlerAttribute {
			void soap_handlerAttribute( CHAR const * , CHAR const * , CHAR const * , CHAR const * , CHAR const * );
			void soap_handlerAttribute();
			/*0000*/ CHAR const * name;
			/*0008*/ CHAR const * namespace;
			/*0010*/ CHAR const * protocol;
			/*0018*/ CHAR const * style;
			/*0020*/ CHAR const * use;
			/*0028*/
		};

		struct soap_headerAttribute {
			void soap_headerAttribute( CHAR const * , BOOLEAN , BOOLEAN , BOOLEAN );
			void soap_headerAttribute( CHAR const * );
			void soap_headerAttribute();
			/*0000*/ CHAR const * value;
			/*0008*/ BOOLEAN required;
			/*0009*/ BOOLEAN in;
			/*000a*/ BOOLEAN out;
			/*0010*/
		};

		struct soap_methodAttribute {
			void soap_methodAttribute( CHAR const * );
			void soap_methodAttribute();
			/*0000*/ CHAR const * name;
			/*0008*/
		};

		struct soap_namespaceAttribute {
			void soap_namespaceAttribute( CHAR const * );
			void soap_namespaceAttribute();
			/*0000*/ CHAR const * value;
			/*0008*/
		};

		struct support_error_infoAttribute {
			void support_error_infoAttribute( CHAR const * );
			/*0000*/ CHAR const * error_interface;
			/*0008*/
		};

		struct synchronizeAttribute {
			void synchronizeAttribute();
			/*0001*/
		};

		struct tag_nameAttribute {
			void tag_nameAttribute( CHAR const * , CHAR const * );
			void tag_nameAttribute( CHAR const * );
			void tag_nameAttribute();
			/*0000*/ CHAR const * name;
			/*0008*/ CHAR const * parse_func;
			/*0010*/
		};

	}

	namespace helper_attributes {

		struct as_stringAttribute {
			void as_stringAttribute();
			/*0001*/
		};

		struct attributeAttribute {
			static INT const All;
			static INT const Assembly;
			static INT const Class;
			static INT const Constructor;
			static INT const Delegate;
			static INT const Enum;
			static INT const Event;
			static INT const Field;
			static INT const GenericParameter;
			static INT const Interface;
			static INT const Method;
			static INT const Module;
			static INT const Parameter;
			static INT const Property;
			static INT const ReturnValue;
			static INT const Struct;
			void attributeAttribute( INT );
			void attributeAttribute();
			/*0000*/ INT ValidOn;
			/*0004*/ BOOLEAN AllowMultiple;
			/*0005*/ BOOLEAN Inherited;
			/*0008*/
		};

		struct default_valueAttribute {
			void default_valueAttribute( ... );
			/*0000*/ void * value;
			/*0008*/
		};

		struct help_stringAttribute {
			void help_stringAttribute( CHAR const * );
			/*0000*/ CHAR const * value;
			/*0008*/
		};

		struct multi_valueAttribute {
			void multi_valueAttribute();
			/*0001*/
		};

		struct notify_atlprovAttribute {
			void notify_atlprovAttribute();
			/*0001*/
		};

		struct process_earlyAttribute {
			void process_earlyAttribute();
			/*0001*/
		};

		struct repeatableAttribute {
			void repeatableAttribute();
			/*0001*/
		};

		struct requires_valueAttribute {
			void requires_valueAttribute();
			/*0001*/
		};

		struct source_annotation_attributeAttribute {
			static INT const All;
			static INT const Assembly;
			static INT const Class;
			static INT const Constructor;
			static INT const Delegate;
			static INT const Enum;
			static INT const Event;
			static INT const Field;
			static INT const GenericParameter;
			static INT const Interface;
			static INT const Method;
			static INT const Module;
			static INT const Parameter;
			static INT const Property;
			static INT const ReturnValue;
			static INT const Struct;
			static INT const Typedef;
			void source_annotation_attributeAttribute( INT );
			void source_annotation_attributeAttribute();
			/*0000*/ INT ValidOn;
			/*0004*/ BOOLEAN AllowMultiple;
			/*0008*/
		};

		struct usageAttribute {
		
			enum usage_e {
				eAnyUsage = 0x0,
				eCoClassUsage = 0x1,
				eCOMInterfaceUsage = 0x2,
				eInterfaceUsage = 0x6,
				eMemberUsage = 0x8,
				eMethodUsage = 0x10,
				eInterfaceMethodUsage = 0x20,
				eInterfaceMemberUsage = 0x40,
				eCoClassMemberUsage = 0x80,
				eCoClassMethodUsage = 0x100,
				eGlobalMethodUsage = 0x300,
				eGlobalDataUsage = 0x400,
				eClassUsage = 0x800,
				eInterfaceParameterUsage = 0x1000,
				eMethodParameterUsage = 0x3000,
				eIDLModuleUsage = 0x4000,
				eAnonymousUsage = 0x8000,
				eTypedefUsage = 0x10000,
				eUnionUsage = 0x20000,
				eEnumUsage = 0x40000,
				eDefineTagUsage = 0x80000,
				eStructUsage = 0x100000,
				eLocalUsage = 0x200000,
				ePropertyUsage = 0x400000,
				eEventUsage = 0x800000,
				eTemplateUsage = 0x1000000,
				eModuleUsage = 0x1000000,
				eIllegalUsage = 0x2000000,
				eAsynchronousUsage = 0x4000000,
				eAnyIDLUsage = 0x3f7fff
			};

			void usageAttribute( UINT );
			/*0000*/ UINT value;
			/*0004*/
		};

		struct v1_alttypeAttribute {
		
			enum type_e {
				eBoolean = 0x0,
				eInteger = 0x1,
				eFloat = 0x2,
				eDouble = 0x3
			};

			void v1_alttypeAttribute( type_e );
			/*0000*/ type_e type;
			/*0004*/
		};

		struct v1_earlyAttribute {
			void v1_earlyAttribute();
			/*0001*/
		};

		struct v1_nameAttribute {
			void v1_nameAttribute( CHAR const * );
			/*0000*/ CHAR const * name;
			/*0008*/
		};

	}

	struct aggregatableAttribute {
	
		enum type_e {
			never = 0x0,
			allowed = 0x1,
			always = 0x2
		};

		void aggregatableAttribute( type_e );
		void aggregatableAttribute();
		/*0000*/ type_e type;
		/*0004*/
	};

	struct appobjectAttribute {
		void appobjectAttribute();
		/*0001*/
	};

	struct async_uuidAttribute {
		void async_uuidAttribute( CHAR const * );
		/*0000*/ CHAR const * uuid;
		/*0008*/
	};

	struct bindableAttribute {
		void bindableAttribute();
		/*0001*/
	};

	struct call_asAttribute {
		void call_asAttribute( void * );
		/*0000*/ void * local_proc;
		/*0008*/
	};

	struct caseAttribute {
		void caseAttribute( INT );
		/*0000*/ INT value;
		/*0004*/
	};

	struct coclassAttribute {
		void coclassAttribute();
		/*0001*/
	};

	struct controlAttribute {
		void controlAttribute();
		/*0001*/
	};

	struct cpp_quoteAttribute {
		void cpp_quoteAttribute( CHAR const * );
		/*0000*/ CHAR const * string;
		/*0008*/
	};

	struct customAttribute {
		void customAttribute( CHAR const * );
		/*0000*/ CHAR * value;
		/*0008*/
	};

	struct defaultAttribute {
		void defaultAttribute( CHAR const * );
		void defaultAttribute();
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct defaultbindAttribute {
		void defaultbindAttribute();
		/*0001*/
	};

	struct defaultcollelemAttribute {
		void defaultcollelemAttribute();
		/*0001*/
	};

	struct defaultvalueAttribute {
		void defaultvalueAttribute( CHAR const * );
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct defaultvtableAttribute {
		void defaultvtableAttribute( CHAR const * );
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct dispinterfaceAttribute {
		void dispinterfaceAttribute();
		/*0001*/
	};

	struct displaybindAttribute {
		void displaybindAttribute();
		/*0001*/
	};

	struct dualAttribute {
		void dualAttribute();
		/*0001*/
	};

	struct emitidlAttribute {
		static INT const restricted;
		static INT const forced;
		static INT const push;
		static INT const pop;
		void emitidlAttribute( INT , BOOLEAN );
		void emitidlAttribute( INT );
		void emitidlAttribute();
		/*0000*/ INT value;
		/*0004*/ BOOLEAN defaultimports;
		/*0008*/
	};

	struct entryAttribute {
		void entryAttribute( CHAR const * );
		/*0000*/ CHAR const * entry_id;
		/*0008*/
	};

	struct event_receiverAttribute {
	
		enum type_e {
			native = 0x0,
			com = 0x1,
			managed = 0x2
		};

		void event_receiverAttribute( type_e , BOOLEAN );
		void event_receiverAttribute( type_e );
		void event_receiverAttribute();
		/*0000*/ type_e type;
		/*0004*/ BOOLEAN layout_dependent;
		/*0008*/
	};

	struct event_sourceAttribute {
	
		enum type_e {
			native = 0x0,
			com = 0x1,
			managed = 0x2
		};

	
		enum optimize_e {
			speed = 0x0,
			size = 0x1
		};

		void event_sourceAttribute( type_e );
		void event_sourceAttribute();
		/*0000*/ type_e type;
		/*0004*/ optimize_e optimize;
		/*0008*/ BOOLEAN decorate;
		/*000c*/
	};

	struct exportAttribute {
		void exportAttribute();
		/*0001*/
	};

	struct first_isAttribute {
		void first_isAttribute( CHAR const * );
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct helpcontextAttribute {
		void helpcontextAttribute( CHAR const * );
		/*0000*/ CHAR const * helpcontext_value;
		/*0008*/
	};

	struct helpfileAttribute {
		void helpfileAttribute( CHAR const * );
		/*0000*/ CHAR const * filename;
		/*0008*/
	};

	struct helpstringAttribute {
		void helpstringAttribute( CHAR const * );
		/*0000*/ CHAR const * help_text_string;
		/*0008*/
	};

	struct helpstringcontextAttribute {
		void helpstringcontextAttribute( INT );
		/*0000*/ INT contextid;
		/*0004*/
	};

	struct helpstringdllAttribute {
		void helpstringdllAttribute( CHAR const * );
		/*0000*/ CHAR const * dllname;
		/*0008*/
	};

	struct hiddenAttribute {
		void hiddenAttribute();
		/*0001*/
	};

	struct hookAttribute {
		void hookAttribute( CHAR const * , CHAR const * , CHAR const * , CHAR const * );
		void hookAttribute( CHAR const * , CHAR const * , CHAR const * );
		void hookAttribute( CHAR const * , CHAR const * );
		void hookAttribute();
		/*0000*/ CHAR const * event;
		/*0008*/ CHAR const * source;
		/*0010*/ CHAR const * handler;
		/*0018*/ CHAR const * receiver;
		/*0020*/
	};

	struct idAttribute {
		void idAttribute( INT );
		/*0000*/ INT id_num;
		/*0004*/
	};

	struct idl_moduleAttribute {
		void idl_moduleAttribute( CHAR const * , CHAR const * , CHAR const * , CHAR const * , CHAR const * , INT , INT , BOOLEAN , BOOLEAN );
		void idl_moduleAttribute();
		/*0000*/ CHAR const * name;
		/*0008*/ CHAR const * dllname;
		/*0010*/ CHAR const * version;
		/*0018*/ CHAR const * uuid;
		/*0020*/ CHAR const * helpstring;
		/*0028*/ INT helpstringcontext;
		/*002c*/ INT helpcontext;
		/*0030*/ BOOLEAN hidden;
		/*0031*/ BOOLEAN restricted;
		/*0038*/
	};

	struct idl_quoteAttribute {
		void idl_quoteAttribute( CHAR const * );
		void idl_quoteAttribute();
		/*0000*/ CHAR const * text;
		/*0008*/
	};

	struct iid_isAttribute {
		void iid_isAttribute( CHAR const * );
		/*0000*/ CHAR const * limited_expression;
		/*0008*/
	};

	struct immediatebindAttribute {
		void immediatebindAttribute();
		/*0001*/
	};

	struct implementsAttribute {
		void implementsAttribute( CHAR const * );
		void implementsAttribute();
		/*0000*/ CHAR const * interfaces;
		/*0008*/ CHAR const * dispinterfaces;
		/*0010*/
	};

	struct importAttribute {
		void importAttribute( CHAR const * );
		/*0000*/ CHAR const * idl_file;
		/*0008*/
	};

	struct importidlAttribute {
		void importidlAttribute( CHAR const * );
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct importlibAttribute {
		void importlibAttribute( CHAR const * );
		/*0000*/ CHAR const * tlb_file;
		/*0008*/
	};

	struct inAttribute {
		void inAttribute();
		/*0001*/
	};

	struct includeAttribute {
		void includeAttribute( CHAR const * );
		/*0000*/ CHAR const * include_file;
		/*0008*/
	};

	struct includelibAttribute {
		void includelibAttribute( CHAR const * );
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct last_isAttribute {
		void last_isAttribute( CHAR const * );
		/*0000*/ CHAR const * expression;
		/*0008*/
	};

	struct lcidAttribute {
		void lcidAttribute();
		/*0001*/
	};

	struct length_isAttribute {
		void length_isAttribute( CHAR const * );
		/*0000*/ CHAR const * expression;
		/*0008*/
	};

	struct library_blockAttribute {
		void library_blockAttribute();
		/*0001*/
	};

	struct licensedAttribute {
		void licensedAttribute();
		/*0001*/
	};

	struct localAttribute {
		void localAttribute();
		/*0001*/
	};

	struct max_isAttribute {
		void max_isAttribute( CHAR const * );
		/*0000*/ CHAR const * expression;
		/*0008*/
	};

	struct moduleAttribute {
	
		enum type_e {
			dll = 0x1,
			exe = 0x2,
			service = 0x3,
			unspecified = 0x4,
			EXE = 0x2,
			SERVICE = 0x3
		};

		void moduleAttribute( type_e , CHAR const * , CHAR const * , CHAR const * , INT , BOOLEAN , CHAR const * , INT , CHAR const * , CHAR const * , INT , BOOLEAN , BOOLEAN , CHAR const * , CHAR const * );
		void moduleAttribute( type_e );
		void moduleAttribute();
		/*0000*/ type_e type;
		/*0008*/ CHAR const * name;
		/*0010*/ CHAR const * version;
		/*0018*/ CHAR const * uuid;
		/*0020*/ INT lcid;
		/*0024*/ BOOLEAN control;
		/*0028*/ CHAR const * helpstring;
		/*0030*/ INT helpstringcontext;
		/*0038*/ CHAR const * helpstringdll;
		/*0040*/ CHAR const * helpfile;
		/*0048*/ INT helpcontext;
		/*004c*/ BOOLEAN hidden;
		/*004d*/ BOOLEAN restricted;
		/*0050*/ CHAR const * custom;
		/*0058*/ CHAR const * resource_name;
		/*0060*/
	};

	struct ms_unionAttribute {
		void ms_unionAttribute();
		/*0001*/
	};

	struct no_injected_textAttribute {
		void no_injected_textAttribute( BOOLEAN );
		void no_injected_textAttribute();
		/*0000*/ BOOLEAN value;
		/*0001*/
	};

	struct nonbrowsableAttribute {
		void nonbrowsableAttribute();
		/*0001*/
	};

	struct noncreatableAttribute {
		void noncreatableAttribute();
		/*0001*/
	};

	struct nonextensibleAttribute {
		void nonextensibleAttribute();
		/*0001*/
	};

	struct objectAttribute {
		void objectAttribute();
		/*0001*/
	};

	struct odlAttribute {
		void odlAttribute();
		/*0001*/
	};

	struct oleautomationAttribute {
		void oleautomationAttribute();
		/*0001*/
	};

	struct optionalAttribute {
		void optionalAttribute();
		/*0001*/
	};

	struct outAttribute {
		void outAttribute();
		/*0001*/
	};

	struct pointer_defaultAttribute {
	
		enum type_e {
			ptr = 0x0,
			ref = 0x1,
			unique = 0x2
		};

		void pointer_defaultAttribute( type_e );
		/*0000*/ type_e type;
		/*0004*/
	};

	struct pragmaAttribute {
		void pragmaAttribute( CHAR const * );
		/*0000*/ CHAR const * token_sequence;
		/*0008*/
	};

	struct progidAttribute {
		void progidAttribute( CHAR const * );
		/*0000*/ CHAR const * name;
		/*0008*/
	};

	struct propgetAttribute {
		void propgetAttribute();
		/*0001*/
	};

	struct propputAttribute {
		void propputAttribute();
		/*0001*/
	};

	struct propputrefAttribute {
		void propputrefAttribute();
		/*0001*/
	};

	struct providerAttribute {
		void providerAttribute( CHAR const * , CHAR const * , INT );
		void providerAttribute();
		/*0000*/ CHAR const * name;
		/*0008*/ CHAR const * uuid;
		/*0010*/ INT cookies;
		/*0018*/
	};

	struct ptrAttribute {
		void ptrAttribute();
		/*0001*/
	};

	struct publicAttribute {
		void publicAttribute();
		/*0001*/
	};

	struct rangeAttribute {
		void rangeAttribute( INT , INT );
		/*0000*/ INT low_val;
		/*0004*/ INT high_val;
		/*0008*/
	};

	struct readonlyAttribute {
		void readonlyAttribute();
		/*0001*/
	};

	struct refAttribute {
		void refAttribute();
		/*0001*/
	};

	struct requesteditAttribute {
		void requesteditAttribute();
		/*0001*/
	};

	struct restrictedAttribute {
		void restrictedAttribute( CHAR const * );
		void restrictedAttribute();
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct retvalAttribute {
		void retvalAttribute();
		/*0001*/
	};

	struct satypeAttribute {
		void satypeAttribute( CHAR const * );
		void satypeAttribute();
		/*0000*/ CHAR const * type;
		/*0008*/
	};

	struct size_isAttribute {
		void size_isAttribute( CHAR const * );
		/*0000*/ CHAR const * expression;
		/*0008*/
	};

	struct sourceAttribute {
		void sourceAttribute( CHAR const * );
		void sourceAttribute();
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct stringAttribute {
		void stringAttribute();
		/*0001*/
	};

	struct switch_isAttribute {
		void switch_isAttribute( CHAR const * );
		/*0000*/ CHAR const * limited_expression;
		/*0008*/
	};

	struct switch_typeAttribute {
		void switch_typeAttribute( CHAR const * );
		/*0000*/ CHAR const * switch_type_specifier;
		/*0008*/
	};

	struct threadingAttribute {
	
		enum threading_e {
			apartment = 0x1,
			single = 0x2,
			free = 0x3,
			neutral = 0x4,
			both = 0x5
		};

		void threadingAttribute( threading_e );
		void threadingAttribute();
		/*0000*/ threading_e value;
		/*0004*/
	};

	struct transmit_asAttribute {
		void transmit_asAttribute( CHAR const * );
		/*0000*/ CHAR const * xmit_type;
		/*0008*/
	};

	struct uidefaultAttribute {
		void uidefaultAttribute();
		/*0001*/
	};

	struct unhookAttribute {
		void unhookAttribute( CHAR const * , CHAR const * , CHAR const * , CHAR const * );
		void unhookAttribute( CHAR const * , CHAR const * , CHAR const * );
		void unhookAttribute( CHAR const * , CHAR const * );
		void unhookAttribute();
		/*0000*/ CHAR const * event;
		/*0008*/ CHAR const * source;
		/*0010*/ CHAR const * handler;
		/*0018*/ CHAR const * receiver;
		/*0020*/
	};

	struct uniqueAttribute {
		void uniqueAttribute();
		/*0001*/
	};

	struct usesgetlasterrorAttribute {
		void usesgetlasterrorAttribute();
		/*0001*/
	};

	struct uuidAttribute {
		void uuidAttribute( CHAR const * );
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct v1_enumAttribute {
		void v1_enumAttribute();
		/*0001*/
	};

	struct varargAttribute {
		void varargAttribute();
		/*0001*/
	};

	struct versionAttribute {
		void versionAttribute( CHAR const * );
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct vi_progidAttribute {
		void vi_progidAttribute( CHAR const * );
		/*0000*/ CHAR const * value;
		/*0008*/
	};

	struct wire_marshalAttribute {
		void wire_marshalAttribute( CHAR const * );
		/*0000*/ CHAR const * wire_type;
		/*0008*/
	};

}

namespace ABI {

	namespace Windows {

		namespace Foundation {

			namespace Diagnostics {

				enum RoErrorReportingFlags {
					None = 0x0,
					SuppressExceptions = 0x1,
					ForceExceptions = 0x2,
					UseSetErrorInfo = 0x4,
					SuppressSetErrorInfo = 0x8
				};

			}

			enum AsyncStatus {
				Started = 0x0,
				Completed = 0x1,
				Canceled = 0x2,
				Error = 0x3
			};

		}

	}

}

namespace Microsoft {

	namespace WRL {

		namespace Wrappers {

			namespace HandleTraits {

				struct CDCTraits : HDCTraits {
					/*0001*/
				};

				struct ClientDCTraits : HDCTraits {
					/*0001*/
				};

				struct CriticalSectionTraits {
					static _RTL_CRITICAL_SECTION * GetInvalidValue();
					static void Unlock( _RTL_CRITICAL_SECTION * );
					/*0001*/
				};

				struct EventTraits : HANDLENullTraits {
					/*0001*/
				};

				struct FileHandleTraits : HANDLETraits {
					/*0001*/
				};

				struct GdiHandleTraits {
					static void * GetInvalidValue();
					static BOOLEAN Close( void * );
					/*0001*/
				};

				struct HANDLENullTraits {
					static BOOLEAN Close( void * );
					static void * GetInvalidValue();
					/*0001*/
				};

				struct HANDLETraits {
					static BOOLEAN Close( void * );
					static void * GetInvalidValue();
					/*0001*/
				};

				struct HBITMAPTraits : GdiHandleTraits {
					static HBITMAP__ * GetInvalidValue();
					/*0001*/
				};

				struct HBRUSHTraits : GdiHandleTraits {
					static HBRUSH__ * GetInvalidValue();
					/*0001*/
				};

				struct HDCTraits : GdiHandleTraits {
					static HDC__ * GetInvalidValue();
					static BOOLEAN Close( HDC__ * );
					/*0001*/
				};

				struct HFONTTraits : GdiHandleTraits {
					static HFONT__ * GetInvalidValue();
					/*0001*/
				};

				struct HPALETTETraits : GdiHandleTraits {
					static HPALETTE__ * GetInvalidValue();
					/*0001*/
				};

				struct HPENTraits : GdiHandleTraits {
					static HPEN__ * GetInvalidValue();
					/*0001*/
				};

				struct HRGNTraits : GdiHandleTraits {
					static HRGN__ * GetInvalidValue();
					/*0001*/
				};

				struct MutexTraits : HANDLENullTraits {
					static void Unlock( void * );
					/*0001*/
				};

				struct PaintDCTraits : HDCTraits {
					/*0001*/
				};

				struct SRWLockExclusiveTraits {
					static _RTL_SRWLOCK * GetInvalidValue();
					static void Unlock( _RTL_SRWLOCK * );
					/*0001*/
				};

				struct SRWLockSharedTraits {
					static _RTL_SRWLOCK * GetInvalidValue();
					static void Unlock( _RTL_SRWLOCK * );
					/*0001*/
				};

				struct SemaphoreTraits : HANDLENullTraits {
					static void Unlock( void * );
					/*0001*/
				};

				struct WindowDCTraits : HDCTraits {
					/*0001*/
				};

			}

			namespace Details {

				class SyncLockCriticalSection {
				protected:
					void SyncLockCriticalSection( _RTL_CRITICAL_SECTION * );
				public:
					void SyncLockCriticalSection( SyncLockCriticalSection const & );
					void SyncLockCriticalSection( SyncLockCriticalSection && );
					SyncLockCriticalSection & operator=( SyncLockCriticalSection const & );
					void ~SyncLockCriticalSection();
					void Unlock();
					BOOLEAN IsLocked() const;
				protected:
					/*0000*/ _RTL_CRITICAL_SECTION * sync_;
				private:
					void InternalUnlock();
				public:
					void __dflt_ctor_closure();
					void * __vecDelDtor( UINT );
					/*0008*/
				};

				class SyncLockExclusive {
				protected:
					void SyncLockExclusive( _RTL_SRWLOCK * );
				public:
					void SyncLockExclusive( SyncLockExclusive const & );
					void SyncLockExclusive( SyncLockExclusive && );
					SyncLockExclusive & operator=( SyncLockExclusive const & );
					void ~SyncLockExclusive();
					void Unlock();
					BOOLEAN IsLocked() const;
				protected:
					/*0000*/ _RTL_SRWLOCK * sync_;
				private:
					void InternalUnlock();
				public:
					void __dflt_ctor_closure();
					void * __vecDelDtor( UINT );
					/*0008*/
				};

				class SyncLockShared {
				protected:
					void SyncLockShared( _RTL_SRWLOCK * );
				public:
					void SyncLockShared( SyncLockShared const & );
					void SyncLockShared( SyncLockShared && );
					SyncLockShared & operator=( SyncLockShared const & );
					void ~SyncLockShared();
					void Unlock();
					BOOLEAN IsLocked() const;
				protected:
					/*0000*/ _RTL_SRWLOCK * sync_;
				private:
					void InternalUnlock();
				public:
					void __dflt_ctor_closure();
					void * __vecDelDtor( UINT );
					/*0008*/
				};

				class SyncLockWithStatusT<HandleTraits::MutexTraits> {
				protected:
					void SyncLockWithStatusT<Microsoft::WRL::Wrappers::HandleTraits::MutexTraits>( void * , ULONG );
				public:
					void SyncLockWithStatusT<Microsoft::WRL::Wrappers::HandleTraits::MutexTraits>( SyncLockWithStatusT<HandleTraits::MutexTraits> const & );
					void SyncLockWithStatusT<Microsoft::WRL::Wrappers::HandleTraits::MutexTraits>( SyncLockWithStatusT<HandleTraits::MutexTraits> && );
					SyncLockWithStatusT<HandleTraits::MutexTraits> & operator=( SyncLockWithStatusT<HandleTraits::MutexTraits> const & );
					void ~SyncLockWithStatusT<Microsoft::WRL::Wrappers::HandleTraits::MutexTraits>();
					void Unlock();
					BOOLEAN IsLocked() const;
					ULONG GetStatus() const;
				protected:
					/*0000*/ ULONG status_;
					/*0008*/ void * sync_;
				private:
					void InternalUnlock();
				public:
					void * __vecDelDtor( UINT );
					/*0010*/
				};

				class SyncLockWithStatusT<HandleTraits::SemaphoreTraits> {
				protected:
					void SyncLockWithStatusT<Microsoft::WRL::Wrappers::HandleTraits::SemaphoreTraits>( void * , ULONG );
				public:
					void SyncLockWithStatusT<Microsoft::WRL::Wrappers::HandleTraits::SemaphoreTraits>( SyncLockWithStatusT<HandleTraits::SemaphoreTraits> const & );
					void SyncLockWithStatusT<Microsoft::WRL::Wrappers::HandleTraits::SemaphoreTraits>( SyncLockWithStatusT<HandleTraits::SemaphoreTraits> && );
					SyncLockWithStatusT<HandleTraits::SemaphoreTraits> & operator=( SyncLockWithStatusT<HandleTraits::SemaphoreTraits> const & );
					void ~SyncLockWithStatusT<Microsoft::WRL::Wrappers::HandleTraits::SemaphoreTraits>();
					void Unlock();
					BOOLEAN IsLocked() const;
					ULONG GetStatus() const;
				protected:
					/*0000*/ ULONG status_;
					/*0008*/ void * sync_;
				private:
					void InternalUnlock();
				public:
					void * __vecDelDtor( UINT );
					/*0010*/
				};

			}

			class CDC : public HandleT<HandleTraits::CDCTraits> {
			public:
				void CDC( CDC && );
				void CDC( HDC__ * );
				void ~CDC();
				CDC & operator=( CDC && );
			protected:
				/*    */ virtual BOOLEAN InternalClose();
			private:
				HDC__ * Detach();
				void Attach( HDC__ * );
			public:
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class ClientDC : public HandleT<HandleTraits::ClientDCTraits> {
			public:
				void ClientDC( ClientDC && );
				void ClientDC( HWND__ * );
				void ~ClientDC();
				ClientDC & operator=( ClientDC && );
			protected:
				/*    */ virtual BOOLEAN InternalClose();
				/*0010*/ HWND__ * hwnd_;
			private:
				HDC__ * Detach();
				void Attach( HDC__ * );
				HDC__ * * GetAddressOf();
				HDC__ * * ReleaseAndGetAddressOf();
			public:
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0018*/
			};

			class CriticalSection {
			public:
				void CriticalSection( CriticalSection const & );
				void CriticalSection( ULONG );
				void CriticalSection();
				CriticalSection & operator=( CriticalSection const & );
				void ~CriticalSection();
				static SyncLockCriticalSection Lock( _RTL_CRITICAL_SECTION * );
				SyncLockCriticalSection Lock();
				static SyncLockCriticalSection TryLock( _RTL_CRITICAL_SECTION * );
				SyncLockCriticalSection TryLock();
				BOOLEAN IsValid() const;
			protected:
				/*0000*/ _RTL_CRITICAL_SECTION cs_;
			public:
				void * __vecDelDtor( UINT );
				/*0028*/
			};

			class Event : public HandleT<HandleTraits::EventTraits> {
			public:
				void Event( Event && );
				void Event( void * );
				void Event();
				Event & operator=( Event && );
				void ~Event();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class HString {
			public:
				void HString( HString const & );
				void HString( HString && );
				void HString();
				HString & operator=( HString && );
				HString & operator=( HString const & );
				HSTRING__ * operator struct HSTRING__ *() const;
				void ~HString();
				HRESULT Set( HSTRING__ * const & );
				HRESULT Set( WCHAR const * , UINT );
				void Attach( HSTRING__ * );
				HSTRING__ * Detach();
				HSTRING__ * * GetAddressOf();
				HSTRING__ * * ReleaseAndGetAddressOf();
				HSTRING__ * Get() const;
				void Release();
				BOOLEAN IsValid() const;
				UINT Length() const;
				WCHAR const * GetRawBuffer( UINT * ) const;
				HRESULT CopyTo( HSTRING__ * * ) const;
				HRESULT Duplicate( HString const & );
				BOOLEAN IsEmpty() const;
				HRESULT Concat( HString const & , HString & ) const;
				HRESULT TrimStart( HString const & , HString & ) const;
				HRESULT TrimEnd( HString const & , HString & ) const;
				HRESULT Substring( UINT , UINT , HString & ) const;
				HRESULT Substring( UINT , HString & ) const;
				HRESULT Replace( HString const & , HString const & , HString & ) const;
			private:
				static HRESULT ReleaseAndAssignOnSuccess( HRESULT , HSTRING__ * , HString & );
			protected:
				/*0000*/ HSTRING__ * hstr_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class HStringReference {
				HString const & AsString() const;
				void CreateReference( WCHAR const * , UINT , UINT );
			public:
				void HStringReference( HStringReference const & );
				void HStringReference( WCHAR const * , UINT );
			private:
				void HStringReference();
				static UINT AddOne( UINT const );
			public:
				void ~HStringReference();
				HStringReference & operator=( HStringReference const & );
				HSTRING__ * Get() const;
				HString const & operator const class Microsoft::WRL::Wrappers::HString &() const;
				WCHAR const * GetRawBuffer( UINT * ) const;
				HRESULT CopyTo( HSTRING__ * * ) const;
				HRESULT Concat( HString const & , HString & ) const;
				HRESULT TrimStart( HString const & , HString & ) const;
				HRESULT TrimEnd( HString const & , HString & ) const;
				HRESULT Substring( UINT , UINT , HString & ) const;
				HRESULT Substring( UINT , HString & ) const;
				HRESULT Replace( HString const & , HString const & , HString & ) const;
				UINT Length() const;
			protected:
				/*0000*/ HSTRING_HEADER header_;
				/*0018*/ HSTRING__ * hstr_;
			public:
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			class HandleT<HandleTraits::CDCTraits> {
			public:
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::CDCTraits>( HandleT<HandleTraits::CDCTraits> const & );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::CDCTraits>( HandleT<HandleTraits::CDCTraits> && );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::CDCTraits>( HDC__ * );
				HandleT<HandleTraits::CDCTraits> & operator=( HandleT<HandleTraits::CDCTraits> && );
				HandleT<HandleTraits::CDCTraits> & operator=( HandleT<HandleTraits::CDCTraits> const & );
				void ~HandleT<Microsoft::WRL::Wrappers::HandleTraits::CDCTraits>();
				void Attach( HDC__ * );
				HDC__ * Detach();
				HDC__ * Get() const;
				void Close();
				BOOLEAN IsValid() const;
				HDC__ * * GetAddressOf();
				HDC__ * * ReleaseAndGetAddressOf();
			protected:
				/*0000*/ virtual BOOLEAN InternalClose();
				/*0008*/ HDC__ * handle_;
			public:
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class HandleT<HandleTraits::ClientDCTraits> {
			public:
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::ClientDCTraits>( HandleT<HandleTraits::ClientDCTraits> const & );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::ClientDCTraits>( HandleT<HandleTraits::ClientDCTraits> && );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::ClientDCTraits>( HDC__ * );
				HandleT<HandleTraits::ClientDCTraits> & operator=( HandleT<HandleTraits::ClientDCTraits> && );
				HandleT<HandleTraits::ClientDCTraits> & operator=( HandleT<HandleTraits::ClientDCTraits> const & );
				void ~HandleT<Microsoft::WRL::Wrappers::HandleTraits::ClientDCTraits>();
				void Attach( HDC__ * );
				HDC__ * Detach();
				HDC__ * Get() const;
				void Close();
				BOOLEAN IsValid() const;
				HDC__ * * GetAddressOf();
				HDC__ * * ReleaseAndGetAddressOf();
			protected:
				/*0000*/ virtual BOOLEAN InternalClose();
				/*0008*/ HDC__ * handle_;
			public:
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class HandleT<HandleTraits::EventTraits> {
			public:
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::EventTraits>( HandleT<HandleTraits::EventTraits> const & );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::EventTraits>( HandleT<HandleTraits::EventTraits> && );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::EventTraits>( void * );
				HandleT<HandleTraits::EventTraits> & operator=( HandleT<HandleTraits::EventTraits> && );
				HandleT<HandleTraits::EventTraits> & operator=( HandleT<HandleTraits::EventTraits> const & );
				void ~HandleT<Microsoft::WRL::Wrappers::HandleTraits::EventTraits>();
				void Attach( void * );
				void * Detach();
				void * Get() const;
				void Close();
				BOOLEAN IsValid() const;
				void * * GetAddressOf();
				void * * ReleaseAndGetAddressOf();
			protected:
				/*0000*/ virtual BOOLEAN InternalClose();
				/*0008*/ void * handle_;
			public:
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class HandleT<HandleTraits::FileHandleTraits>;

			class HandleT<HandleTraits::HBITMAPTraits>;

			class HandleT<HandleTraits::HBRUSHTraits>;

			class HandleT<HandleTraits::HFONTTraits>;

			class HandleT<HandleTraits::HPALETTETraits>;

			class HandleT<HandleTraits::HPENTraits>;

			class HandleT<HandleTraits::HRGNTraits>;

			class HandleT<HandleTraits::MutexTraits> {
			public:
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::MutexTraits>( HandleT<HandleTraits::MutexTraits> const & );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::MutexTraits>( HandleT<HandleTraits::MutexTraits> && );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::MutexTraits>( void * );
				HandleT<HandleTraits::MutexTraits> & operator=( HandleT<HandleTraits::MutexTraits> && );
				HandleT<HandleTraits::MutexTraits> & operator=( HandleT<HandleTraits::MutexTraits> const & );
				void ~HandleT<Microsoft::WRL::Wrappers::HandleTraits::MutexTraits>();
				void Attach( void * );
				void * Detach();
				void * Get() const;
				void Close();
				BOOLEAN IsValid() const;
				void * * GetAddressOf();
				void * * ReleaseAndGetAddressOf();
			protected:
				/*0000*/ virtual BOOLEAN InternalClose();
				/*0008*/ void * handle_;
			public:
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class HandleT<HandleTraits::PaintDCTraits> {
			public:
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::PaintDCTraits>( HandleT<HandleTraits::PaintDCTraits> const & );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::PaintDCTraits>( HandleT<HandleTraits::PaintDCTraits> && );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::PaintDCTraits>( HDC__ * );
				HandleT<HandleTraits::PaintDCTraits> & operator=( HandleT<HandleTraits::PaintDCTraits> && );
				HandleT<HandleTraits::PaintDCTraits> & operator=( HandleT<HandleTraits::PaintDCTraits> const & );
				void ~HandleT<Microsoft::WRL::Wrappers::HandleTraits::PaintDCTraits>();
				void Attach( HDC__ * );
				HDC__ * Detach();
				HDC__ * Get() const;
				void Close();
				BOOLEAN IsValid() const;
				HDC__ * * GetAddressOf();
				HDC__ * * ReleaseAndGetAddressOf();
			protected:
				/*0000*/ virtual BOOLEAN InternalClose();
				/*0008*/ HDC__ * handle_;
			public:
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class HandleT<HandleTraits::SemaphoreTraits> {
			public:
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::SemaphoreTraits>( HandleT<HandleTraits::SemaphoreTraits> const & );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::SemaphoreTraits>( HandleT<HandleTraits::SemaphoreTraits> && );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::SemaphoreTraits>( void * );
				HandleT<HandleTraits::SemaphoreTraits> & operator=( HandleT<HandleTraits::SemaphoreTraits> && );
				HandleT<HandleTraits::SemaphoreTraits> & operator=( HandleT<HandleTraits::SemaphoreTraits> const & );
				void ~HandleT<Microsoft::WRL::Wrappers::HandleTraits::SemaphoreTraits>();
				void Attach( void * );
				void * Detach();
				void * Get() const;
				void Close();
				BOOLEAN IsValid() const;
				void * * GetAddressOf();
				void * * ReleaseAndGetAddressOf();
			protected:
				/*0000*/ virtual BOOLEAN InternalClose();
				/*0008*/ void * handle_;
			public:
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class HandleT<HandleTraits::WindowDCTraits> {
			public:
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::WindowDCTraits>( HandleT<HandleTraits::WindowDCTraits> const & );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::WindowDCTraits>( HandleT<HandleTraits::WindowDCTraits> && );
				void HandleT<Microsoft::WRL::Wrappers::HandleTraits::WindowDCTraits>( HDC__ * );
				HandleT<HandleTraits::WindowDCTraits> & operator=( HandleT<HandleTraits::WindowDCTraits> && );
				HandleT<HandleTraits::WindowDCTraits> & operator=( HandleT<HandleTraits::WindowDCTraits> const & );
				void ~HandleT<Microsoft::WRL::Wrappers::HandleTraits::WindowDCTraits>();
				void Attach( HDC__ * );
				HDC__ * Detach();
				HDC__ * Get() const;
				void Close();
				BOOLEAN IsValid() const;
				HDC__ * * GetAddressOf();
				HDC__ * * ReleaseAndGetAddressOf();
			protected:
				/*0000*/ virtual BOOLEAN InternalClose();
				/*0008*/ HDC__ * handle_;
			public:
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class Mutex : public HandleT<HandleTraits::MutexTraits> {
			public:
				void Mutex( Mutex && );
				void Mutex( void * );
				Mutex & operator=( Mutex && );
				static SyncLockWithStatusT<HandleTraits::MutexTraits> Lock( void * , ULONG );
				SyncLockWithStatusT<HandleTraits::MutexTraits> Lock( ULONG );
			private:
				void Close();
				void * Detach();
				void Attach( void * );
				void * * GetAddressOf();
				void * * ReleaseAndGetAddressOf();
			public:
				void ~Mutex();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class PaintDC : public HandleT<HandleTraits::PaintDCTraits> {
			public:
				void PaintDC( PaintDC && );
				void PaintDC( HWND__ * );
				void ~PaintDC();
				PaintDC & operator=( PaintDC && );
			protected:
				/*    */ virtual BOOLEAN InternalClose();
				/*0010*/ tagPAINTSTRUCT ps_;
				/*0058*/ HWND__ * hwnd_;
			private:
				HDC__ * Detach();
				void Attach( HDC__ * );
				HDC__ * * GetAddressOf();
				HDC__ * * ReleaseAndGetAddressOf();
			public:
				void * __vecDelDtor( UINT );
				/*0060*/
			};

			class RoInitializeWrapper {
				/*0000*/ HRESULT _hr;
			public:
				void RoInitializeWrapper( RO_INIT_TYPE );
				void ~RoInitializeWrapper();
				HRESULT operator long();
				void * __vecDelDtor( UINT );
				/*0004*/
			};

			class SRWLock {
			public:
				void SRWLock( SRWLock const & );
				void SRWLock();
				SRWLock & operator=( SRWLock const & );
				void ~SRWLock();
				static SyncLockExclusive LockExclusive( _RTL_SRWLOCK * );
				SyncLockExclusive LockExclusive();
				static SyncLockExclusive TryLockExclusive( _RTL_SRWLOCK * );
				SyncLockExclusive TryLockExclusive();
				static SyncLockShared LockShared( _RTL_SRWLOCK * );
				SyncLockShared LockShared();
				static SyncLockShared TryLockShared( _RTL_SRWLOCK * );
				SyncLockShared TryLockShared();
			protected:
				/*0000*/ _RTL_SRWLOCK SRWLock_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class Semaphore : public HandleT<HandleTraits::SemaphoreTraits> {
			public:
				void Semaphore( Semaphore && );
				void Semaphore( void * );
				Semaphore & operator=( Semaphore && );
				static SyncLockWithStatusT<HandleTraits::SemaphoreTraits> Lock( void * , ULONG );
				SyncLockWithStatusT<HandleTraits::SemaphoreTraits> Lock( ULONG );
			private:
				void Close();
				void * Detach();
				void Attach( void * );
				void * * GetAddressOf();
				void * * ReleaseAndGetAddressOf();
			public:
				void ~Semaphore();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			class WindowDC : public HandleT<HandleTraits::WindowDCTraits> {
			public:
				void WindowDC( WindowDC && );
				void WindowDC( HWND__ * );
				void ~WindowDC();
				WindowDC & operator=( WindowDC && );
			protected:
				/*    */ virtual BOOLEAN InternalClose();
				/*0010*/ HWND__ * hwnd_;
			private:
				HDC__ * Detach();
				void Attach( HDC__ * );
				HDC__ * * GetAddressOf();
				HDC__ * * ReleaseAndGetAddressOf();
			public:
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0018*/
			};

		}

		namespace Details {

			struct AdjustImplements<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<13>,0,Nil,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<13>,0,Nil,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<13>,1,Nil,Nil,Nil> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<13>,1,Nil,Nil> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<13>,1,Nil> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<13>,1> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<19>,0,Nil,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<19>,1,CloakedIid<IMarshal>,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<19>,1,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<19>,1,IMarshal> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<19>,1,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<19>,1> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,0,Nil,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,0,Nil,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,0,Nil,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,0,Nil,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,0,Nil,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,IAsyncInfo> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<1>,1> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<2>,0,IUnknown> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<2>,0,IWeakReference> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<2>,1> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<3>,1,AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<3>,1,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<3>,1,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<3>,1,CloakedIid<IMarshal> > {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<3>,1,FtmBase> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<3>,1,IMarshal> {
				/*0001*/
			};

			struct AdjustImplements<RuntimeClassFlags<3>,1> {
				/*0001*/
			};

			struct AreAllNil<Nil> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct ArgTraits<long (__cdecl Windows::Foundation::IAsyncOperationCompletedHandler_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >::*)(Windows::Foundation::IAsyncOperation<bool> *,enum ABI::Windows::Foundation::AsyncStatus)> {
				static INT const args;
				/*0001*/
			};

			struct ArgTraits<long (__cdecl Windows::Foundation::IAsyncOperationProgressHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned int>::*)(Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> *,unsigned int)> {
				static INT const args;
				/*0001*/
			};

			struct ArgTraits<long (__cdecl Windows::Foundation::IAsyncOperationProgressHandler_impl<unsigned int,unsigned int>::*)(Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> *,unsigned int)> {
				static INT const args;
				/*0001*/
			};

			struct ArgTraits<long (__cdecl Windows::Foundation::IAsyncOperationWithProgressCompletedHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned int>::*)(Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> *,enum ABI::Windows::Foundation::AsyncStatus)> {
				static INT const args;
				/*0001*/
			};

			struct ArgTraits<long (__cdecl Windows::Foundation::IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int>::*)(Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> *,enum ABI::Windows::Foundation::AsyncStatus)> {
				static INT const args;
				/*0001*/
			};

			struct ArgTraitsHelper<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,0> {
				static INT const args;
				/*0001*/
			};

			struct ArgTraitsHelper<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,0> {
				static INT const args;
				/*0001*/
			};

			struct ArgTraitsHelper<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,0> {
				static INT const args;
				/*0001*/
			};

			struct ArgTraitsHelper<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,0> {
				static INT const args;
				/*0001*/
			};

			struct ArgTraitsHelper<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,0> {
				static INT const args;
				/*0001*/
			};

			struct AsyncCausalityOptionsHelper<1,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				static WCHAR const * GetAsyncOperationName();
				static _GUID const GetPlatformId();
				static CausalitySource GetCausalitySource();
				static BOOLEAN const CausalityEnabled;
				/*0001*/
			};

			struct AsyncCausalityOptionsHelper<1,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				static WCHAR const * GetAsyncOperationName();
				static _GUID const GetPlatformId();
				static CausalitySource GetCausalitySource();
				static BOOLEAN const CausalityEnabled;
				/*0001*/
			};

			struct AsyncCausalityOptionsHelper<1,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				static WCHAR const * GetAsyncOperationName();
				static _GUID const GetPlatformId();
				static CausalitySource GetCausalitySource();
				static BOOLEAN const CausalityEnabled;
				/*0001*/
			};

			struct AsyncOptionsBase {
				static BOOLEAN const hasCausalityOptions;
				static BOOLEAN const hasErrorPropagationPolicy;
				static BOOLEAN const hasCausalityOperationName;
				static BOOLEAN const isCausalityEnabled;
				/*0001*/
			};

			struct AsyncOptionsHelper<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : AsyncCausalityOptionsHelper<1,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >, ErrorPropagationOptionsHelper<1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				/*0001*/
			};

			struct AsyncOptionsHelper<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : AsyncCausalityOptionsHelper<1,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >, ErrorPropagationOptionsHelper<1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				/*0001*/
			};

			struct AsyncOptionsHelper<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : AsyncCausalityOptionsHelper<1,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >, ErrorPropagationOptionsHelper<1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				/*0001*/
			};

			enum AsyncStatusInternal {
				_Undefined = 0xfffffffe,
				_Created = 0xffffffff,
				_Started = 0x0,
				_Completed = 0x1,
				_Canceled = 0x2,
				_Error = 0x3,
				_Closed = 0x4
			};

			struct BoolStruct {
				/*0000*/ INT Member;
				/*0004*/
			};

			struct CausalityNameHelper<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,0,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				static WCHAR const * GetName();
				/*0001*/
			};

			struct CausalityNameHelper<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,0,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				static WCHAR const * GetName();
				/*0001*/
			};

			struct CausalityNameHelper<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,0,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				static WCHAR const * GetName();
				/*0001*/
			};

			class ComPtrRef<AgileRef const > : public ComPtrRefBase<AgileRef const > {
			public:
				void ComPtrRef<Microsoft::WRL::AgileRef const >( AgileRef const * );
				void * * operator void **() const;
				AgileRef const * operator const class Microsoft::WRL::AgileRef *();
				IAgileReference * * operator struct IAgileReference **();
				IAgileReference * operator*();
				IAgileReference * const * GetAddressOf() const;
				IAgileReference * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<AgileRef> : public ComPtrRefBase<AgileRef> {
			public:
				void ComPtrRef<Microsoft::WRL::AgileRef>( AgileRef * );
				void * * operator void **() const;
				AgileRef * operator class Microsoft::WRL::AgileRef *();
				IAgileReference * * operator struct IAgileReference **();
				IAgileReference * operator*();
				IAgileReference * const * GetAddressOf() const;
				IAgileReference * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<EventTargetArray> >;

			class ComPtrRef<ComPtr<EventTargetArray> const >;

			class ComPtrRef<ComPtr<IAgileReference> >;

			class ComPtrRef<ComPtr<IAgileReference> const >;

			class ComPtrRef<ComPtr<IAsyncInfo> > : public ComPtrRefBase<ComPtr<IAsyncInfo> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<IAsyncInfo> >( ComPtr<IAsyncInfo> * );
				void * * operator void **() const;
				ComPtr<IAsyncInfo> * operator class Microsoft::WRL::ComPtr<struct IAsyncInfo> *();
				IAsyncInfo * * operator struct IAsyncInfo **();
				IAsyncInfo * operator*();
				IAsyncInfo * const * GetAddressOf() const;
				IAsyncInfo * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<IAsyncInfo> const >;

			class ComPtrRef<ComPtr<IGlobalInterfaceTable> > : public ComPtrRefBase<ComPtr<IGlobalInterfaceTable> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<IGlobalInterfaceTable> >( ComPtr<IGlobalInterfaceTable> * );
				void * * operator void **() const;
				ComPtr<IGlobalInterfaceTable> * operator class Microsoft::WRL::ComPtr<struct IGlobalInterfaceTable> *();
				IGlobalInterfaceTable * * operator struct IGlobalInterfaceTable **();
				IGlobalInterfaceTable * operator*();
				IGlobalInterfaceTable * const * GetAddressOf() const;
				IGlobalInterfaceTable * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<IGlobalInterfaceTable> const >;

			class ComPtrRef<ComPtr<IGlobalOptions> >;

			class ComPtrRef<ComPtr<IGlobalOptions> const >;

			class ComPtrRef<ComPtr<IInspectable> >;

			class ComPtrRef<ComPtr<IInspectable> const >;

			class ComPtrRef<ComPtr<IMarshal> > : public ComPtrRefBase<ComPtr<IMarshal> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<IMarshal> >( ComPtr<IMarshal> * );
				void * * operator void **() const;
				ComPtr<IMarshal> * operator class Microsoft::WRL::ComPtr<struct IMarshal> *();
				IMarshal * * operator struct IMarshal **();
				IMarshal * operator*();
				IMarshal * const * GetAddressOf() const;
				IMarshal * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<IMarshal> const >;

			class ComPtrRef<ComPtr<IRestrictedErrorInfo> > : public ComPtrRefBase<ComPtr<IRestrictedErrorInfo> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<IRestrictedErrorInfo> >( ComPtr<IRestrictedErrorInfo> * );
				void * * operator void **() const;
				ComPtr<IRestrictedErrorInfo> * operator class Microsoft::WRL::ComPtr<struct IRestrictedErrorInfo> *();
				IRestrictedErrorInfo * * operator struct IRestrictedErrorInfo **();
				IRestrictedErrorInfo * operator*();
				IRestrictedErrorInfo * const * GetAddressOf() const;
				IRestrictedErrorInfo * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<IRestrictedErrorInfo> const >;

			class ComPtrRef<ComPtr<IRpcOptions> > : public ComPtrRefBase<ComPtr<IRpcOptions> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<IRpcOptions> >( ComPtr<IRpcOptions> * );
				void * * operator void **() const;
				ComPtr<IRpcOptions> * operator class Microsoft::WRL::ComPtr<struct IRpcOptions> *();
				IRpcOptions * * operator struct IRpcOptions **();
				IRpcOptions * operator*();
				IRpcOptions * const * GetAddressOf() const;
				IRpcOptions * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<IRpcOptions> const >;

			class ComPtrRef<ComPtr<IStream> > : public ComPtrRefBase<ComPtr<IStream> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<IStream> >( ComPtr<IStream> * );
				void * * operator void **() const;
				ComPtr<IStream> * operator class Microsoft::WRL::ComPtr<struct IStream> *();
				IStream * * operator struct IStream **();
				IStream * operator*();
				IStream * const * GetAddressOf() const;
				IStream * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<IStream> const >;

			class ComPtrRef<ComPtr<IUnknown> > : public ComPtrRefBase<ComPtr<IUnknown> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<IUnknown> >( ComPtr<IUnknown> * );
				void * * operator void **() const;
				ComPtr<IUnknown> * operator class Microsoft::WRL::ComPtr<struct IUnknown> *();
				IUnknown * * operator struct IUnknown **();
				IUnknown * operator*();
				IUnknown * const * GetAddressOf() const;
				IUnknown * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<IUnknown> const >;

			class ComPtrRef<ComPtr<IWeakReference> >;

			class ComPtrRef<ComPtr<IWeakReference> const >;

			class ComPtrRef<ComPtr<WeakReferenceImpl> >;

			class ComPtrRef<ComPtr<WeakReferenceImpl> const >;

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperation<bool> > > : public ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperation<bool> > > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::IAsyncOperation<bool> > >( ComPtr<Windows::Foundation::IAsyncOperation<bool> > * );
				void * * operator void **() const;
				ComPtr<Windows::Foundation::IAsyncOperation<bool> > * operator class Microsoft::WRL::ComPtr<struct Windows::Foundation::IAsyncOperation<bool> > *();
				IAsyncOperation<bool> * * operator struct Windows::Foundation::IAsyncOperation<bool> **();
				IAsyncOperation<bool> * operator*();
				IAsyncOperation<bool> * const * GetAddressOf() const;
				IAsyncOperation<bool> * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperation<bool> > const >;

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > > : public ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > >( ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > * );
				void * * operator void **() const;
				ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > * operator class Microsoft::WRL::ComPtr<struct Windows::Foundation::IAsyncOperationCompletedHandler<bool> > *();
				IAsyncOperationCompletedHandler<bool> * * operator struct Windows::Foundation::IAsyncOperationCompletedHandler<bool> **();
				IAsyncOperationCompletedHandler<bool> * operator*();
				IAsyncOperationCompletedHandler<bool> * const * GetAddressOf() const;
				IAsyncOperationCompletedHandler<bool> * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > const >;

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > > : public ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > >( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > * );
				void * * operator void **() const;
				ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > * operator class Microsoft::WRL::ComPtr<struct Windows::Foundation::IAsyncOperationProgressHandler<struct Windows::Storage::Streams::IBuffer *,unsigned int> > *();
				IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * * operator struct Windows::Foundation::IAsyncOperationProgressHandler<struct Windows::Storage::Streams::IBuffer *,unsigned int> **();
				IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * operator*();
				IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * const * GetAddressOf() const;
				IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const >;

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > > : public ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > >( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > * );
				void * * operator void **() const;
				ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > * operator class Microsoft::WRL::ComPtr<struct Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > *();
				IAsyncOperationProgressHandler<unsigned int,unsigned int> * * operator struct Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> **();
				IAsyncOperationProgressHandler<unsigned int,unsigned int> * operator*();
				IAsyncOperationProgressHandler<unsigned int,unsigned int> * const * GetAddressOf() const;
				IAsyncOperationProgressHandler<unsigned int,unsigned int> * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > const >;

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > > : public ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > >( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > * );
				void * * operator void **() const;
				ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > * operator class Microsoft::WRL::ComPtr<struct Windows::Foundation::IAsyncOperationWithProgress<struct Windows::Storage::Streams::IBuffer *,unsigned int> > *();
				IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * * operator struct Windows::Foundation::IAsyncOperationWithProgress<struct Windows::Storage::Streams::IBuffer *,unsigned int> **();
				IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * operator*();
				IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * const * GetAddressOf() const;
				IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > const >;

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > > : public ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > >( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > * );
				void * * operator void **() const;
				ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > * operator class Microsoft::WRL::ComPtr<struct Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > *();
				IAsyncOperationWithProgress<unsigned int,unsigned int> * * operator struct Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> **();
				IAsyncOperationWithProgress<unsigned int,unsigned int> * operator*();
				IAsyncOperationWithProgress<unsigned int,unsigned int> * const * GetAddressOf() const;
				IAsyncOperationWithProgress<unsigned int,unsigned int> * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > const >;

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > > : public ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > >( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > * );
				void * * operator void **() const;
				ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > * operator class Microsoft::WRL::ComPtr<struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<struct Windows::Storage::Streams::IBuffer *,unsigned int> > *();
				IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * * operator struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<struct Windows::Storage::Streams::IBuffer *,unsigned int> **();
				IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * operator*();
				IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * const * GetAddressOf() const;
				IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const >;

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > > : public ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > >( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > * );
				void * * operator void **() const;
				ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > * operator class Microsoft::WRL::ComPtr<struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > *();
				IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * * operator struct Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> **();
				IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * operator*();
				IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * const * GetAddressOf() const;
				IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > const >;

			class ComPtrRef<ComPtr<Windows::Foundation::IClosable> > : public ComPtrRefBase<ComPtr<Windows::Foundation::IClosable> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Foundation::IClosable> >( ComPtr<Windows::Foundation::IClosable> * );
				void * * operator void **() const;
				ComPtr<Windows::Foundation::IClosable> * operator class Microsoft::WRL::ComPtr<struct Windows::Foundation::IClosable> *();
				IClosable * * operator struct Windows::Foundation::IClosable **();
				IClosable * operator*();
				IClosable * const * GetAddressOf() const;
				IClosable * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Foundation::IClosable> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::CompressFlushOperation> >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::CompressFlushOperation> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::CompressWriteOperation> >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::CompressWriteOperation> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::CompressorFactoryServer> >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::CompressorFactoryServer> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::CompressorServer> >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::CompressorServer> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressReadOperation> >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressReadOperation> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressorServer> >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressorServer> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::FlushListener> >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::FlushListener> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::ReadListener> >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::ReadListener> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::WriteListener> >;

			class ComPtrRef<ComPtr<Windows::Storage::Compression::WriteListener> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > >;

			class ComPtrRef<ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > const >;

			class ComPtrRef<ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > >;

			class ComPtrRef<ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > const >;

			class ComPtrRef<ComPtr<Windows::Storage::Streams::IBuffer> > : public ComPtrRefBase<ComPtr<Windows::Storage::Streams::IBuffer> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Streams::IBuffer> >( ComPtr<Windows::Storage::Streams::IBuffer> * );
				void * * operator void **() const;
				ComPtr<Windows::Storage::Streams::IBuffer> * operator class Microsoft::WRL::ComPtr<struct Windows::Storage::Streams::IBuffer> *();
				IBuffer * * operator struct Windows::Storage::Streams::IBuffer **();
				IBuffer * operator*();
				IBuffer * const * GetAddressOf() const;
				IBuffer * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Storage::Streams::IBuffer> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Streams::IBufferByteAccess> > : public ComPtrRefBase<ComPtr<Windows::Storage::Streams::IBufferByteAccess> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Streams::IBufferByteAccess> >( ComPtr<Windows::Storage::Streams::IBufferByteAccess> * );
				void * * operator void **() const;
				ComPtr<Windows::Storage::Streams::IBufferByteAccess> * operator class Microsoft::WRL::ComPtr<struct Windows::Storage::Streams::IBufferByteAccess> *();
				IBufferByteAccess * * operator struct Windows::Storage::Streams::IBufferByteAccess **();
				IBufferByteAccess * operator*();
				IBufferByteAccess * const * GetAddressOf() const;
				IBufferByteAccess * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Storage::Streams::IBufferByteAccess> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Streams::IInputStream> > : public ComPtrRefBase<ComPtr<Windows::Storage::Streams::IInputStream> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Streams::IInputStream> >( ComPtr<Windows::Storage::Streams::IInputStream> * );
				void * * operator void **() const;
				ComPtr<Windows::Storage::Streams::IInputStream> * operator class Microsoft::WRL::ComPtr<struct Windows::Storage::Streams::IInputStream> *();
				IInputStream * * operator struct Windows::Storage::Streams::IInputStream **();
				IInputStream * operator*();
				IInputStream * const * GetAddressOf() const;
				IInputStream * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Storage::Streams::IInputStream> const >;

			class ComPtrRef<ComPtr<Windows::Storage::Streams::IOutputStream> > : public ComPtrRefBase<ComPtr<Windows::Storage::Streams::IOutputStream> > {
			public:
				void ComPtrRef<Microsoft::WRL::ComPtr<Windows::Storage::Streams::IOutputStream> >( ComPtr<Windows::Storage::Streams::IOutputStream> * );
				void * * operator void **() const;
				ComPtr<Windows::Storage::Streams::IOutputStream> * operator class Microsoft::WRL::ComPtr<struct Windows::Storage::Streams::IOutputStream> *();
				IOutputStream * * operator struct Windows::Storage::Streams::IOutputStream **();
				IOutputStream * operator*();
				IOutputStream * const * GetAddressOf() const;
				IOutputStream * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<ComPtr<Windows::Storage::Streams::IOutputStream> const >;

			class ComPtrRef<WeakRef const > : public ComPtrRefBase<WeakRef const > {
			public:
				void ComPtrRef<Microsoft::WRL::WeakRef const >( WeakRef const * );
				void * * operator void **() const;
				WeakRef const * operator const class Microsoft::WRL::WeakRef *();
				IWeakReference * * operator struct IWeakReference **();
				IWeakReference * operator*();
				IWeakReference * const * GetAddressOf() const;
				IWeakReference * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRef<WeakRef> : public ComPtrRefBase<WeakRef> {
			public:
				void ComPtrRef<Microsoft::WRL::WeakRef>( WeakRef * );
				void * * operator void **() const;
				WeakRef * operator class Microsoft::WRL::WeakRef *();
				IWeakReference * * operator struct IWeakReference **();
				IWeakReference * operator*();
				IWeakReference * const * GetAddressOf() const;
				IWeakReference * * ReleaseAndGetAddressOf();
				/*0008*/
			};

			class ComPtrRefBase<AgileRef const > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ AgileRef const * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<AgileRef> {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ AgileRef * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<IAsyncInfo> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<IAsyncInfo> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<IGlobalInterfaceTable> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<IGlobalInterfaceTable> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<IMarshal> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<IMarshal> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<IRestrictedErrorInfo> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<IRestrictedErrorInfo> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<IRpcOptions> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<IRpcOptions> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<IStream> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<IStream> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<IUnknown> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<IUnknown> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperation<bool> > > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Foundation::IAsyncOperation<bool> > * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Foundation::IClosable> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Foundation::IClosable> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Storage::Streams::IBuffer> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Storage::Streams::IBuffer> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Storage::Streams::IBufferByteAccess> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Storage::Streams::IBufferByteAccess> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Storage::Streams::IInputStream> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Storage::Streams::IInputStream> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<ComPtr<Windows::Storage::Streams::IOutputStream> > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ ComPtr<Windows::Storage::Streams::IOutputStream> * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<WeakRef const > {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ WeakRef const * ptr_;
				/*0008*/
			};

			class ComPtrRefBase<WeakRef> {
			public:
				IInspectable * * operator struct IInspectable **() const;
				IUnknown * * operator struct IUnknown **() const;
			protected:
				/*0000*/ WeakRef * ptr_;
				/*0008*/
			};

			struct CreatorMap {
				
				/*0000*/ HRESULT (* factoryCreator)( UINT * , CreatorMap const * , _GUID const & , IUnknown * * );
				/*0008*/ <unnamed-type-activationId> activationId;
				/*0010*/ TrustLevel (* getTrustLevel)();
				/*0018*/ FactoryCache * factoryCache;
				/*0020*/ WCHAR const * serverName;
				/*0028*/
			};

			class DefaultModule<1> : public Module<1,Details::DefaultModule<1> > {
			public:
				void DefaultModule<1>();
				/*    */ virtual void ~DefaultModule<1>();
				void __local_vftable_ctor_closure();
				/*0000*/ virtual void * __vecDelDtor( UINT );
				/*0008*/
			};

			struct DerefHelper<Windows::Foundation::IAsyncOperation<bool> *> {
				/*0001*/
			};

			struct DerefHelper<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> *> {
				/*0001*/
			};

			struct DerefHelper<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> *> {
				/*0001*/
			};

			class DontUseNewUseMake {
			public:
				static void * operator new( ULONGLONG , void * );
			private:
				static void * operator new( ULONGLONG );
				/*0001*/
			};

			struct Dummy {
				/*0001*/
			};

			struct EnableIf<1,Dummy> {
				/*0001*/
			};

			struct EnableIf<1,void *> {
				/*0001*/
			};

			struct ErrorPropagationOptionsHelper<1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				static ErrorPropagationPolicy const PropagationPolicy;
				/*0001*/
			};

			class EventTargetArray : public RuntimeClass<RuntimeClassFlags<2>,IUnknown> {
			public:
				void EventTargetArray();
				HRESULT RuntimeClassInitialize( ULONGLONG );
				/*    */ virtual void ~EventTargetArray();
				ComPtr<IUnknown> * Begin();
				ComPtr<IUnknown> * End();
				void AddTail( IUnknown * , void * );
				void AddTail( IUnknown * );
				ULONGLONG Length();
				void * * Begin_BucketAssists();
				void * * End_BucketAssists();
			private:
				/*0010*/ ComPtr<IUnknown> * begin_;
				/*0018*/ ComPtr<IUnknown> * end_;
				/*0020*/ void * * bucketAssists_;
			public:
				void __local_vftable_ctor_closure();
				/*0018*/ virtual void * __vecDelDtor( UINT );
				/*0028*/
			};

			class FactoryBase {
				/*0001*/
			};

			struct FactoryCache {
				
				/*0000*/ IUnknown * factory;
				/*0008*/ <unnamed-type-cookie> cookie;
				/*0010*/
			};

			class FtmBaseMarker {
				/*0001*/
			};

			struct HasIInspectable<IActivationFactory,0> {
				static BOOLEAN const isIInspectable;
				/*0001*/
			};

			struct HasIInspectable<Windows::Foundation::IAsyncOperation<bool>,0> {
				static BOOLEAN const isIInspectable;
				/*0001*/
			};

			struct HasIInspectable<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,0> {
				static BOOLEAN const isIInspectable;
				/*0001*/
			};

			struct HasIInspectable<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,0> {
				static BOOLEAN const isIInspectable;
				/*0001*/
			};

			struct HasIInspectable<Windows::Storage::Streams::IBuffer,0> {
				static BOOLEAN const isIInspectable;
				/*0001*/
			};

			struct HasIInspectable<Windows::Storage::Streams::IInputStream,0> {
				static BOOLEAN const isIInspectable;
				/*0001*/
			};

			struct HasIInspectable<Windows::Storage::Streams::IOutputStream,0> {
				static BOOLEAN const isIInspectable;
				/*0001*/
			};

			struct IInspectableInjector<IActivationFactory,1> {
				/*0001*/
			};

			struct IInspectableInjector<Windows::Foundation::IAsyncOperation<bool>,1> {
				/*0001*/
			};

			struct IInspectableInjector<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,1> {
				/*0001*/
			};

			struct IInspectableInjector<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,1> {
				/*0001*/
			};

			struct IInspectableInjector<Windows::Storage::Streams::IBuffer,1> {
				/*0001*/
			};

			struct IInspectableInjector<Windows::Storage::Streams::IInputStream,1> {
				/*0001*/
			};

			struct IInspectableInjector<Windows::Storage::Streams::IOutputStream,1> {
				/*0001*/
			};

			struct Identity<<lambda_8fcabb03306c9f8765c03020018d7da6> &> {
				/*0001*/
			};

			struct Identity<IUnknown * &> {
				/*0001*/
			};

			struct Identity<Windows::Storage::Streams::CBuffer_StandardCleanup &> {
				/*0001*/
			};

			struct Identity<unsigned char * &> {
				/*0001*/
			};

			struct Identity<unsigned int &> {
				/*0001*/
			};

			struct ImplementsBase {
				/*0001*/
			};

			struct ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> : IActivationFactory, ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>( ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>( ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>();
				ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> & operator=( ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> && );
				ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> & operator=( ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> const & );
				/*0010*/
			};

			struct ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> : IActivationFactory, ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>( ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>( ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>();
				ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> & operator=( ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> && );
				ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> & operator=( ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> const & );
				/*0010*/
			};

			struct ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> : ICompressorFactory, ImplementsHelper<RuntimeClassFlags<13>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>( ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>( ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>();
				ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> & operator=( ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> && );
				ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> & operator=( ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> const & );
				/*0008*/
			};

			struct ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> : IDecompressorFactory, ImplementsHelper<RuntimeClassFlags<13>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>( ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>( ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>();
				ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> & operator=( ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> && );
				ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> & operator=( ImplementsHelper<RuntimeClassFlags<13>,1,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> const & );
				/*0008*/
			};

			struct ImplementsHelper<RuntimeClassFlags<13>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
				/*0001*/
			};

			struct ImplementsHelper<RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> : IBuffer, ImplementsHelper<RuntimeClassFlags<19>,1,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0040*/
			};

			struct ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<IMarshal>,FtmBase> : ImplementsHelper<RuntimeClassFlags<19>,1,IMarshal>, ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<IMarshal>,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<IMarshal>,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<IMarshal>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<IMarshal>,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<IMarshal>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<IMarshal>,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0028*/
			};

			struct ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> : ImplementsHelper<RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess>, ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<IMarshal>,FtmBase> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0030*/
			};

			struct ImplementsHelper<RuntimeClassFlags<19>,1,IMarshal> : IMarshal, ImplementsHelper<RuntimeClassFlags<19>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,IMarshal>( ImplementsHelper<RuntimeClassFlags<19>,1,IMarshal> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,IMarshal>( ImplementsHelper<RuntimeClassFlags<19>,1,IMarshal> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,IMarshal>();
				ImplementsHelper<RuntimeClassFlags<19>,1,IMarshal> & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,IMarshal> && );
				ImplementsHelper<RuntimeClassFlags<19>,1,IMarshal> & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,IMarshal> const & );
				/*0008*/
			};

			struct ImplementsHelper<RuntimeClassFlags<19>,1,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> : IWeakReferenceSource, ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,IWeakReferenceSource,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<19>,1,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,IWeakReferenceSource,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<19>,1,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,IWeakReferenceSource,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,IWeakReferenceSource,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<19>,1,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<19>,1,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0038*/
			};

			struct ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > : Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > >, Selector<ImplementsHelper<RuntimeClassFlags<19>,1>,ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >( ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >( ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >();
				ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > && );
				ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct ImplementsHelper<RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess> : IBufferByteAccess, ImplementsHelper<RuntimeClassFlags<19>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess>( ImplementsHelper<RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess>( ImplementsHelper<RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess>();
				ImplementsHelper<RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess> & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess> && );
				ImplementsHelper<RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess> & operator=( ImplementsHelper<RuntimeClassFlags<19>,1,Windows::Storage::Streams::IBufferByteAccess> const & );
				/*0008*/
			};

			struct ImplementsHelper<RuntimeClassFlags<19>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
				/*0001*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : IAsyncOperation<bool>, ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAU( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAU( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAU();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CA();
				ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*0098*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int>, ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperatio( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperatio( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperatio();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperati();
				ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00b0*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : IAsyncOperationWithProgress<unsigned int,unsigned int>, ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHa( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHa( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHa();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedH();
				ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00b0*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> : IInputStream, ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0040*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> : IOutputStream, ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0040*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,IAsyncInfo> : IAsyncInfo, ImplementsHelper<RuntimeClassFlags<1>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IAsyncInfo>( ImplementsHelper<RuntimeClassFlags<1>,1,IAsyncInfo> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IAsyncInfo>( ImplementsHelper<RuntimeClassFlags<1>,1,IAsyncInfo> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IAsyncInfo>();
				ImplementsHelper<RuntimeClassFlags<1>,1,IAsyncInfo> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IAsyncInfo> && );
				ImplementsHelper<RuntimeClassFlags<1>,1,IAsyncInfo> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IAsyncInfo> const & );
				/*0008*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : IWeakReferenceSource, ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >();
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*0090*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : IWeakReferenceSource, ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundatio();
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00a8*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : IWeakReferenceSource, ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgres( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgres( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgres();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgre();
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > && );
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00a8*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> : IWeakReferenceSource, ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0038*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> : IWeakReferenceSource, ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0038*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > : Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > >, Selector<ImplementsHelper<RuntimeClassFlags<1>,1>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >();
				ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > && );
				ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > : Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > >, Selector<ImplementsHelper<RuntimeClassFlags<1>,1>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFOR( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFOR( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFOR();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFO();
				ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > && );
				ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*0088*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > : Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > >, Selector<ImplementsHelper<RuntimeClassFlags<1>,1>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned in();
				ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > && );
				ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00a0*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > : Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > >, Selector<ImplementsHelper<RuntimeClassFlags<1>,1>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::I( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::I( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::I();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::();
				ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > && );
				ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00a0*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,FtmBase> : IClosable, ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0028*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> : ICompressor, ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,FtmBase> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0030*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> : IDecompressor, ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Foundation::IClosable,FtmBase> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<1>,1,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0030*/
			};

			struct ImplementsHelper<RuntimeClassFlags<1>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
				/*0001*/
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,0,IUnknown> : IUnknown, ImplementsHelper<RuntimeClassFlags<2>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,IUnknown>( ImplementsHelper<RuntimeClassFlags<2>,0,IUnknown> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,IUnknown>( ImplementsHelper<RuntimeClassFlags<2>,0,IUnknown> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,IUnknown>();
				ImplementsHelper<RuntimeClassFlags<2>,0,IUnknown> & operator=( ImplementsHelper<RuntimeClassFlags<2>,0,IUnknown> && );
				ImplementsHelper<RuntimeClassFlags<2>,0,IUnknown> & operator=( ImplementsHelper<RuntimeClassFlags<2>,0,IUnknown> const & );
				/*0008*/
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,0,IWeakReference> : IWeakReference, ImplementsHelper<RuntimeClassFlags<2>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,IWeakReference>( ImplementsHelper<RuntimeClassFlags<2>,0,IWeakReference> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,IWeakReference>( ImplementsHelper<RuntimeClassFlags<2>,0,IWeakReference> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,IWeakReference>();
				ImplementsHelper<RuntimeClassFlags<2>,0,IWeakReference> & operator=( ImplementsHelper<RuntimeClassFlags<2>,0,IWeakReference> && );
				ImplementsHelper<RuntimeClassFlags<2>,0,IWeakReference> & operator=( ImplementsHelper<RuntimeClassFlags<2>,0,IWeakReference> const & );
				/*0008*/
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> : IAsyncOperationCompletedHandler<bool>, ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0028*/
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> : IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>, ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0028*/
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> : IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>, ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::FtmBase>( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::FtmBase>();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::FtmBase>();
				ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> const & );
				void * __vecDelDtor( UINT );
				/*0028*/
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > : Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > >, Selector<ImplementsHelper<RuntimeClassFlags<2>,1>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >( ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >( ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >();
				ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > & operator=( ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > && );
				ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > & operator=( ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct ImplementsHelper<RuntimeClassFlags<2>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
				/*0001*/
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IMarshal> > : ImplementsHelper<RuntimeClassFlags<3>,1,IMarshal> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::CloakedIid<IMarshal> >( ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IMarshal> > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::CloakedIid<IMarshal> >( ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IMarshal> > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::CloakedIid<IMarshal> >();
				ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IMarshal> > & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IMarshal> > && );
				ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IMarshal> > & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IMarshal> > const & );
				/*0008*/
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,IMarshal> : IMarshal, ImplementsHelper<RuntimeClassFlags<3>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,IMarshal>( ImplementsHelper<RuntimeClassFlags<3>,1,IMarshal> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,IMarshal>( ImplementsHelper<RuntimeClassFlags<3>,1,IMarshal> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,IMarshal>();
				ImplementsHelper<RuntimeClassFlags<3>,1,IMarshal> & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,IMarshal> && );
				ImplementsHelper<RuntimeClassFlags<3>,1,IMarshal> & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,IMarshal> const & );
				/*0008*/
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> : Selector<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> >, Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CA( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CA( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CA();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_C();
				ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*0068*/
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> : Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> >, Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL:();
				ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*0068*/
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> : Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> >, Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft();
				/*    */ virtual void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsof();
				ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> && );
				ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*0068*/
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > : Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > >, Selector<ImplementsHelper<RuntimeClassFlags<3>,1>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > > {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				IUnknown * CastToUnknown();
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
			public:
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > && );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > const & );
				void ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >();
				void ~ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >();
				ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > && );
				ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > & operator=( ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct ImplementsHelper<RuntimeClassFlags<3>,1> {
			protected:
				HRESULT CanCastTo( _GUID const & , void * * , BOOLEAN * );
				ULONG GetIidCount();
				void FillArrayWithIid( ULONG * , _GUID * );
				/*0001*/
			};

			struct ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >;

			struct ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >;

			struct ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >;

			struct ImplementsMarker<FtmBase>;

			struct ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >;

			struct ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >;

			struct ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >;

			struct InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> {
				/*0001*/
			};

			struct InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> {
				/*0001*/
			};

			struct InterfaceTraits<Nil> {
				static ULONG const IidCount;
				static void FillArrayWithIid( ULONG * , _GUID * );
				/*0001*/
			};

			struct IsConvertible<IAgileReference *,IAgileReference *> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsConvertible<IWeakReference *,IWeakReference *> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsOperationName<&DisableCausalityAsyncOperationName> {
				static BOOLEAN const Value;
				/*0001*/
			};

			struct IsOperationName<0> {
				static BOOLEAN const Value;
				/*0001*/
			};

			struct IsSame<EventTargetArray,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<EventTargetArray,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IAgileReference,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IAgileReference,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IAgileReference,Windows::Foundation::IAsyncOperationCompletedHandler<bool> > {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IAgileReference,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IAgileReference,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IAgileReference,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IAgileReference,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IAsyncInfo,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IAsyncInfo,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IGlobalInterfaceTable,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IGlobalInterfaceTable,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IInspectable,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IInspectable,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IMarshal,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IMarshal,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IRestrictedErrorInfo,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IRestrictedErrorInfo,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IRpcOptions,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IRpcOptions,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IStream,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IStream,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IUnknown,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IUnknown,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IWeakReference,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<IWeakReference,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<WeakReferenceImpl,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<WeakReferenceImpl,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperation<bool>,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperation<bool>,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Compression::CompressorServer,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Compression::CompressorServer,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Compression::DecompressorServer,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Compression::DecompressorServer,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Compression::FlushListener,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Compression::FlushListener,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Compression::ReadListener,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Compression::ReadListener,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Compression::WriteListener,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Compression::WriteListener,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler>,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler>,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler>,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler>,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Streams::IBuffer,IInspectable> {
				static BOOLEAN const value;
				/*0001*/
			};

			struct IsSame<Windows::Storage::Streams::IBuffer,IUnknown> {
				static BOOLEAN const value;
				/*0001*/
			};

			class MakeAllocator<WeakReferenceImpl> {
			public:
				void MakeAllocator<Microsoft::WRL::Details::WeakReferenceImpl>();
				void ~MakeAllocator<Microsoft::WRL::Details::WeakReferenceImpl>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Compression::CompressFlushOperation> {
			public:
				void MakeAllocator<Windows::Storage::Compression::CompressFlushOperation>();
				void ~MakeAllocator<Windows::Storage::Compression::CompressFlushOperation>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Compression::CompressWriteOperation> {
			public:
				void MakeAllocator<Windows::Storage::Compression::CompressWriteOperation>();
				void ~MakeAllocator<Windows::Storage::Compression::CompressWriteOperation>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Compression::CompressorFactoryServer> {
			public:
				void MakeAllocator<Windows::Storage::Compression::CompressorFactoryServer>();
				void ~MakeAllocator<Windows::Storage::Compression::CompressorFactoryServer>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Compression::CompressorServer> {
			public:
				void MakeAllocator<Windows::Storage::Compression::CompressorServer>();
				void ~MakeAllocator<Windows::Storage::Compression::CompressorServer>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Compression::DecompressReadOperation> {
			public:
				void MakeAllocator<Windows::Storage::Compression::DecompressReadOperation>();
				void ~MakeAllocator<Windows::Storage::Compression::DecompressReadOperation>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Compression::DecompressorFactoryServer> {
			public:
				void MakeAllocator<Windows::Storage::Compression::DecompressorFactoryServer>();
				void ~MakeAllocator<Windows::Storage::Compression::DecompressorFactoryServer>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Compression::DecompressorServer> {
			public:
				void MakeAllocator<Windows::Storage::Compression::DecompressorServer>();
				void ~MakeAllocator<Windows::Storage::Compression::DecompressorServer>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Compression::FlushListener> {
			public:
				void MakeAllocator<Windows::Storage::Compression::FlushListener>();
				void ~MakeAllocator<Windows::Storage::Compression::FlushListener>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Compression::ReadListener> {
			public:
				void MakeAllocator<Windows::Storage::Compression::ReadListener>();
				void ~MakeAllocator<Windows::Storage::Compression::ReadListener>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Compression::WriteListener> {
			public:
				void MakeAllocator<Windows::Storage::Compression::WriteListener>();
				void ~MakeAllocator<Windows::Storage::Compression::WriteListener>();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > {
			public:
				void MakeAllocator<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> >();
				void ~MakeAllocator<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> >();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			class MakeAllocator<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > {
			public:
				void MakeAllocator<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> >();
				void ~MakeAllocator<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> >();
				void * Allocate();
				void Detach();
			private:
				/*0000*/ CHAR * buffer_;
			public:
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			struct MarkImplements<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1> {
				/*0001*/
			};

			struct MarkImplements<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1> {
				/*0001*/
			};

			struct MarkImplements<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1> {
				/*0001*/
			};

			struct MarkImplements<CloakedIid<IMarshal>,0> {
				/*0001*/
			};

			struct MarkImplements<CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,0> {
				/*0001*/
			};

			struct MarkImplements<FtmBase,1> {
				/*0001*/
			};

			struct MarkImplements<IActivationFactory,0> {
				/*0001*/
			};

			struct MarkImplements<IAsyncInfo,0> {
				/*0001*/
			};

			struct MarkImplements<IMarshal,0> {
				/*0001*/
			};

			struct MarkImplements<IUnknown,0> {
				/*0001*/
			};

			struct MarkImplements<IWeakReference,0> {
				/*0001*/
			};

			struct MarkImplements<IWeakReferenceSource,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Foundation::IAsyncOperation<bool>,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Foundation::IClosable,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1> {
				/*0001*/
			};

			struct MarkImplements<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1> {
				/*0001*/
			};

			struct MarkImplements<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1> {
				/*0001*/
			};

			struct MarkImplements<Windows::Storage::Compression::ICompressor,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Storage::Compression::ICompressorFactory,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Storage::Compression::IDecompressor,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Storage::Compression::IDecompressorFactory,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Storage::Streams::IBuffer,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Storage::Streams::IBufferByteAccess,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Storage::Streams::IInputStream,0> {
				/*0001*/
			};

			struct MarkImplements<Windows::Storage::Streams::IOutputStream,0> {
				/*0001*/
			};

			class ModuleBase {
				static void * moduleLock_;
			protected:
				static ULONG volatile objectCount_;
			public:
				static ModuleBase * module_;
				void ModuleBase( ModuleBase const & );
				void ModuleBase();
				ModuleBase & operator=( ModuleBase const & );
				/*0000*/ virtual void ~ModuleBase();
				/*0008*/ virtual ULONG IncrementObjectCount() = 0;
				/*0010*/ virtual ULONG DecrementObjectCount() = 0;
				/*0018*/ virtual ULONG GetObjectCount() const;
				/*0020*/ virtual CreatorMap const * * GetFirstEntryPointer() const;
				/*0028*/ virtual CreatorMap const * * GetMidEntryPointer() const;
				/*0030*/ virtual CreatorMap const * * GetLastEntryPointer() const;
				/*0038*/ virtual _RTL_SRWLOCK * GetLock() const;
				/*0040*/ virtual HRESULT RegisterWinRTObject( WCHAR const * , WCHAR const * * , _RO_REGISTRATION_COOKIE * * , UINT ) = 0;
				/*0048*/ virtual HRESULT UnregisterWinRTObject( WCHAR const * , _RO_REGISTRATION_COOKIE * ) = 0;
				/*0050*/ virtual HRESULT RegisterCOMObject( WCHAR const * , _GUID * , IClassFactory * * , ULONG * , UINT ) = 0;
				/*0058*/ virtual HRESULT UnregisterCOMObject( WCHAR const * , ULONG * , UINT ) = 0;
				void __local_vftable_ctor_closure();
				/*0000*/ virtual void * __vecDelDtor( UINT );
				/*0008*/
			};

			class Nil {
				/*0001*/
			};

			union ReferenceCountOrWeakReferencePointer {
				/*0000*/ ULONGLONG refCount;
				/*0000*/ LONGLONG rawValue;
				/*0000*/ void * ifHighBitIsSetThenShiftLeftToYieldPointerToWeakReference;
				/*0008*/
			};

			struct RemoveReference<Wrappers::Event &> {
				/*0001*/
			};

			struct RemoveReference<Wrappers::Mutex &> {
				/*0001*/
			};

			struct RemoveReference<Wrappers::Semaphore &> {
				/*0001*/
			};

			class RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> : public RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> {
			protected:
				HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
			public:
				void RuntimeClass<Microsoft::WRL::Details::InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>,Microsoft::WRL::RuntimeClassFlags<13>,0,1( RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> && );
				void RuntimeClass<Microsoft::WRL::Details::InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>,Microsoft::WRL::RuntimeClassFlags<13>,0,1( RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> const & );
				void RuntimeClass<Microsoft::WRL::Details::InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>,Microsoft::WRL::RuntimeClassFlags<13>,0,1();
				/*    */ virtual void ~RuntimeClass<Microsoft::WRL::Details::InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>,Microsoft::WRL::RuntimeClassFlags<13>,0,();
				RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> & operator=( RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> && );
				RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> & operator=( RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> const & );
				void __local_vftable_ctor_closure();
				/*0038*/ virtual void * __vecDelDtor( UINT );
				/*0018*/
			};

			class RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> : public RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> {
			protected:
				HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
			public:
				void RuntimeClass<Microsoft::WRL::Details::InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>,Microsoft::WRL::RuntimeClassFlags<13>,0( RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> && );
				void RuntimeClass<Microsoft::WRL::Details::InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>,Microsoft::WRL::RuntimeClassFlags<13>,0( RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> const & );
				void RuntimeClass<Microsoft::WRL::Details::InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>,Microsoft::WRL::RuntimeClassFlags<13>,0();
				/*    */ virtual void ~RuntimeClass<Microsoft::WRL::Details::InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>,Microsoft::WRL::RuntimeClassFlags<13>,();
				RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> & operator=( RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> && );
				RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> & operator=( RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0> const & );
				void __local_vftable_ctor_closure();
				/*0038*/ virtual void * __vecDelDtor( UINT );
				/*0018*/
			};

			class RuntimeClassBase {
				/*0001*/
			};

			class RuntimeClassBaseT<13> : RuntimeClassBase {
			public:
				HRESULT RuntimeClassInitialize();
				/*0001*/
			};

			class RuntimeClassBaseT<19> : RuntimeClassBase {
			public:
				HRESULT RuntimeClassInitialize();
				/*0001*/
			};

			class RuntimeClassBaseT<1> : RuntimeClassBase {
			public:
				HRESULT RuntimeClassInitialize();
				/*0001*/
			};

			class RuntimeClassBaseT<2> : RuntimeClassBase {
			public:
				HRESULT RuntimeClassInitialize();
				/*0001*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> : public ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil>, public RuntimeClassBaseT<13>, protected RuntimeClassFlags<4>, public DontUseNewUseMake {
			public:
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>( RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> const & );
			protected:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>();
				/*0038*/ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>();
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*0014*/ LONG volatile refcount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> & operator=( RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil> const & );
				void __local_vftable_ctor_closure();
			protected:
				/*0038*/ virtual void * __vecDelDtor( UINT );
				/*0018*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> : public ImplementsHelper<RuntimeClassFlags<13>,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil>, public RuntimeClassBaseT<13>, protected RuntimeClassFlags<4>, public DontUseNewUseMake {
			public:
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>( RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> const & );
			protected:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>();
				/*0038*/ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil>();
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*0014*/ LONG volatile refcount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> & operator=( RuntimeClassImpl<RuntimeClassFlags<13>,0,1,0,IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil> const & );
				void __local_vftable_ctor_closure();
			protected:
				/*0038*/ virtual void * __vecDelDtor( UINT );
				/*0018*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> : public ImplementsHelper<RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>, public RuntimeClassBaseT<19>, public DontUseNewUseMake {
			public:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>( RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> const & );
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetWeakReference( IWeakReference * * );
				/*0048*/ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
			protected:
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*0048*/ ReferenceCountOrWeakReferencePointer refCount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> & operator=( RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> const & );
				void __local_vftable_ctor_closure();
				/*0048*/ virtual void * __vecDelDtor( UINT );
				/*0050*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : public ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperation<bool>,IWeakReferenceSource,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >, public RuntimeClassBaseT<1>, public DontUseNewUseMake {
			public:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PL( RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PL();
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetWeakReference( IWeakReference * * );
				/*    */ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_P();
			protected:
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*00a0*/ ReferenceCountOrWeakReferencePointer refCount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00a8*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : public ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >, public RuntimeClassBaseT<1>, public DontUseNewUseMake {
			public:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressComp( RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressComp();
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetWeakReference( IWeakReference * * );
				/*    */ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCom();
			protected:
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*00b8*/ ReferenceCountOrWeakReferencePointer refCount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00c0*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : public ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,IWeakReferenceSource,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >, public RuntimeClassBaseT<1>, public DontUseNewUseMake {
			public:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned in( RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned in();
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetWeakReference( IWeakReference * * );
				/*    */ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned i();
			protected:
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*00b8*/ ReferenceCountOrWeakReferencePointer refCount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00c0*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> : public ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IInputStream,IWeakReferenceSource,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase>, public RuntimeClassBaseT<1>, public DontUseNewUseMake {
			public:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetWeakReference( IWeakReference * * );
				/*0038*/ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
			protected:
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*0048*/ ReferenceCountOrWeakReferencePointer refCount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> & operator=( RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void __local_vftable_ctor_closure();
				/*0038*/ virtual void * __vecDelDtor( UINT );
				/*0050*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> : public ImplementsHelper<RuntimeClassFlags<1>,0,Windows::Storage::Streams::IOutputStream,IWeakReferenceSource,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase>, public RuntimeClassBaseT<1>, public DontUseNewUseMake {
			public:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetWeakReference( IWeakReference * * );
				/*0040*/ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
			protected:
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*0048*/ ReferenceCountOrWeakReferencePointer refCount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> & operator=( RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> const & );
				void __local_vftable_ctor_closure();
				/*0040*/ virtual void * __vecDelDtor( UINT );
				/*0050*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUnknown> : public ImplementsHelper<RuntimeClassFlags<2>,0,IUnknown>, public RuntimeClassBaseT<2>, protected RuntimeClassFlags<4>, public DontUseNewUseMake {
			public:
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,IUnknown>( RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUnknown> const & );
			protected:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,IUnknown>();
				/*0018*/ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,IUnknown>();
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*000c*/ LONG volatile refcount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUnknown> & operator=( RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUnknown> const & );
				void __local_vftable_ctor_closure();
			protected:
				/*0018*/ virtual void * __vecDelDtor( UINT );
				/*0010*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IWeakReference> : public ImplementsHelper<RuntimeClassFlags<2>,0,IWeakReference>, public RuntimeClassBaseT<2>, protected RuntimeClassFlags<4>, public DontUseNewUseMake {
			public:
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,IWeakReference>( RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IWeakReference> const & );
			protected:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,IWeakReference>();
				/*0020*/ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,IWeakReference>();
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*000c*/ LONG volatile refcount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IWeakReference> & operator=( RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IWeakReference> const & );
				void __local_vftable_ctor_closure();
			protected:
				/*0020*/ virtual void * __vecDelDtor( UINT );
				/*0010*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> : public ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase>, public RuntimeClassBaseT<2>, protected RuntimeClassFlags<4>, public DontUseNewUseMake {
			public:
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::FtmBase>( RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> const & );
			protected:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::FtmBase>();
				/*0020*/ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::FtmBase>();
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*002c*/ LONG volatile refcount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> & operator=( RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> const & );
				void __local_vftable_ctor_closure();
			protected:
				/*0020*/ virtual void * __vecDelDtor( UINT );
				/*0030*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> : public ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase>, public RuntimeClassBaseT<2>, protected RuntimeClassFlags<4>, public DontUseNewUseMake {
			public:
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::FtmBase>( RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> const & );
			protected:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::FtmBase>();
				/*0020*/ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::FtmBase>();
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*002c*/ LONG volatile refcount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> & operator=( RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> const & );
				void __local_vftable_ctor_closure();
			protected:
				/*0020*/ virtual void * __vecDelDtor( UINT );
				/*0030*/
			};

			class RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> : public ImplementsHelper<RuntimeClassFlags<2>,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase>, public RuntimeClassBaseT<2>, protected RuntimeClassFlags<4>, public DontUseNewUseMake {
			public:
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG AddRef();
				/*    */ virtual ULONG Release();
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::FtmBase>( RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> const & );
			protected:
				void RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::FtmBase>();
				/*0020*/ virtual void ~RuntimeClassImpl<Microsoft::WRL::RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::FtmBase>();
				ULONG InternalAddRef();
				ULONG InternalRelease();
				ULONG GetRefCount() const;
			private:
				/*002c*/ LONG volatile refcount_;
			public:
				RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> & operator=( RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> const & );
				void __local_vftable_ctor_closure();
			protected:
				/*0020*/ virtual void * __vecDelDtor( UINT );
				/*0030*/
			};

			struct Selector<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > : AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				void Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL( Selector<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				void Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL( Selector<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL();
				/*    */ virtual void ~Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WR();
				Selector<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				Selector<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*0048*/
			};

			struct Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > : AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				void Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				void Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
				/*    */ virtual void ~Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> ();
				Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*0048*/
			};

			struct Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > : AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				void Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details( Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				void Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details( Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details();
				/*    */ virtual void ~Selector<Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Detail();
				Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*0048*/
			};

			struct Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > > : FtmBase {
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > > && );
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > > const & );
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >();
				void ~Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<19>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >();
				Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > > & operator=( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > > && );
				Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > > & operator=( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > > : FtmBase {
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > > && );
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > > const & );
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >();
				void ~Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >();
				Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > > & operator=( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > > && );
				Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > > & operator=( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > > : FtmBase {
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > > && );
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > > const & );
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >();
				void ~Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<2>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >();
				Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > > & operator=( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > > && );
				Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > > & operator=( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > > : FtmBase {
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > > && );
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > > const & );
				void Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >();
				void ~Selector<Microsoft::WRL::FtmBase,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> > >();
				Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > > & operator=( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > > && );
				Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > > & operator=( Selector<FtmBase,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<19>,1>,ImplementsHelper<RuntimeClassFlags<19>,1,ImplementsMarker<FtmBase> > > : ImplementsHelper<RuntimeClassFlags<19>,1> {
				/*0001*/
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<FtmBase> > > : ImplementsHelper<RuntimeClassFlags<1>,1> {
				/*0001*/
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > : ImplementsHelper<RuntimeClassFlags<1>,1> {
				/*0001*/
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > : ImplementsHelper<RuntimeClassFlags<1>,1> {
				/*0001*/
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<1>,1>,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > : ImplementsHelper<RuntimeClassFlags<1>,1> {
				/*0001*/
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<2>,1>,ImplementsHelper<RuntimeClassFlags<2>,1,ImplementsMarker<FtmBase> > > : ImplementsHelper<RuntimeClassFlags<2>,1> {
				/*0001*/
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > : ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > {
				void Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				void Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::();
				void ~Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL:();
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > : ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > {
				void Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				void Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::();
				void ~Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL:();
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > : ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > {
				void Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				void Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::();
				void ~Selector<Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL::Details::ImplementsMarker<Microsoft::WRL::FtmBase> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<3>,1,Microsoft::WRL:();
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > && );
				Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > & operator=( Selector<ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> >,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase> > const & );
				void * __vecDelDtor( UINT );
				/*0020*/
			};

			struct Selector<ImplementsHelper<RuntimeClassFlags<3>,1>,ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<FtmBase> > > : ImplementsHelper<RuntimeClassFlags<3>,1> {
				/*0001*/
			};

			struct Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > : AsyncBaseFTM<Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				void Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,( Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > && );
				void Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,( Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > const & );
				void Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>,();
				/*    */ virtual void ~Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::Details::ImplementsHelper<Microsoft::WRL::RuntimeClassFlags<1>();
				Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > & operator=( Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > && );
				Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > & operator=( Selector<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*0088*/
			};

			struct Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > : AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				void Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer ( Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > && );
				void Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer ( Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > const & );
				void Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer ();
				/*    */ virtual void ~Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer();
				Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > & operator=( Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > && );
				Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > & operator=( Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00a0*/
			};

			struct Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > : AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
				void Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-( Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > && );
				void Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-( Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > const & );
				void Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-();
				/*    */ virtual void ~Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<();
				Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > & operator=( Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > && );
				Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > & operator=( Selector<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,ImplementsHelper<RuntimeClassFlags<1>,1,ImplementsMarker<Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > > > const & );
				void __local_vftable_ctor_closure();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00a0*/
			};

			class StaticStorage<DefaultModule<1>,0,int> {
				/*0000*/ UCHAR data_[0x8];
				/*0008*/ BOOLEAN initialized_;
				static StaticStorage<DefaultModule<1>,0,int> instance_;
			public:
				void StaticStorage<Microsoft::WRL::Details::DefaultModule<1>,0,int>();
				void ~StaticStorage<Microsoft::WRL::Details::DefaultModule<1>,0,int>();
				static DefaultModule<1> * Data();
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			enum StorageInstance {
				InProcCreate = 0x0,
				OutOfProcCreate = 0x1,
				OutOfProcCallbackBuffer1 = 0x2,
				OutOfProcCallbackBuffer2 = 0x3
			};

			class StrongReference {
			public:
				void StrongReference( LONG );
				void ~StrongReference();
				ULONG IncrementStrongReference();
				ULONG DecrementStrongReference();
				ULONG GetStrongReferenceCount();
				void SetStrongReference( ULONG );
				/*0000*/ LONG strongRefCount_;
				void __dflt_ctor_closure();
				void * __vecDelDtor( UINT );
				/*0004*/
			};

			struct VerifyInterfaceHelper<1,FtmBase,1,1> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,IActivationFactory,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,IAsyncInfo,1,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,IWeakReferenceSource,1,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Foundation::IAsyncOperation<bool>,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Foundation::IClosable,1,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1,1> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1,1> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1,1> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Storage::Compression::ICompressor,1,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Storage::Compression::ICompressorFactory,1,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Storage::Compression::IDecompressor,1,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Storage::Compression::IDecompressorFactory,1,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Storage::Streams::IInputStream,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<1,Windows::Storage::Streams::IOutputStream,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<2,FtmBase,1,1> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<2,IUnknown,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<2,IWeakReference,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<2,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<2,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<2,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<3,AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1,1> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<3,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1,1> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<3,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,1,1> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<3,FtmBase,1,1> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<3,IMarshal,1,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<3,IWeakReferenceSource,1,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<3,Windows::Storage::Streams::IBuffer,0,0> {
				static void Verify();
				/*0001*/
			};

			struct VerifyInterfaceHelper<3,Windows::Storage::Streams::IBufferByteAccess,1,0> {
				static void Verify();
				/*0001*/
			};

			class WeakReferenceImpl : public RuntimeClass<RuntimeClassFlags<2>,IWeakReference>, public StrongReference {
			public:
				void WeakReferenceImpl( IUnknown * );
				/*    */ virtual void ~WeakReferenceImpl();
				/*    */ virtual HRESULT Resolve( _GUID const & , IInspectable * * );
			private:
				/*0018*/ IUnknown * unknown_;
			public:
				/*0020*/ virtual void * __vecDelDtor( UINT );
				/*0020*/
			};

		}

		class ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Details::Nil,Details::Nil,0> : public RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::ICompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0>, FactoryBase {
			static UINT const cacheFlag;
		public:
			void ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,0>( ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Details::Nil,Details::Nil,0> && );
			void ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,0>( ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Details::Nil,Details::Nil,0> const & );
			void ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,0>();
			/*    */ virtual ULONG AddRef();
			/*    */ virtual ULONG Release();
			/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
			/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
			/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
			/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
			/*    */ virtual HRESULT ActivateInstance( IInspectable * * );
		private:
			/*0020*/ CreatorMap * entry_;
			/*0028*/ UINT flags_;
		public:
			/*    */ virtual void ~ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,0>();
			ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Details::Nil,Details::Nil,0> & operator=( ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Details::Nil,Details::Nil,0> && );
			ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Details::Nil,Details::Nil,0> & operator=( ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Details::Nil,Details::Nil,0> const & );
			void __local_vftable_ctor_closure();
			/*0038*/ virtual void * __vecDelDtor( UINT );
			/*0030*/
		};

		class ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Details::Nil,Details::Nil,0> : public RuntimeClass<InterfaceListHelper<IActivationFactory,Windows::Storage::Compression::IDecompressorFactory,Nil,Nil,Nil>,RuntimeClassFlags<13>,0,1,0>, FactoryBase {
			static UINT const cacheFlag;
		public:
			void ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,0>( ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Details::Nil,Details::Nil,0> && );
			void ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,0>( ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Details::Nil,Details::Nil,0> const & );
			void ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,0>();
			/*    */ virtual ULONG AddRef();
			/*    */ virtual ULONG Release();
			/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
			/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
			/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
			/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
			/*    */ virtual HRESULT ActivateInstance( IInspectable * * );
		private:
			/*0020*/ CreatorMap * entry_;
			/*0028*/ UINT flags_;
		public:
			/*    */ virtual void ~ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Microsoft::WRL::Details::Nil,Microsoft::WRL::Details::Nil,0>();
			ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Details::Nil,Details::Nil,0> & operator=( ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Details::Nil,Details::Nil,0> && );
			ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Details::Nil,Details::Nil,0> & operator=( ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Details::Nil,Details::Nil,0> const & );
			void __local_vftable_ctor_closure();
			/*0038*/ virtual void * __vecDelDtor( UINT );
			/*0030*/
		};

		class AgileRef : public ComPtr<IAgileReference> {
		protected:
			HRESULT InternalResolve( _GUID const & , void * * ) const;
		public:
			ComPtrRef<AgileRef const > const operator&() const;
			ComPtrRef<AgileRef> operator&();
			void AgileRef( AgileRef && );
			void AgileRef( AgileRef const & );
			void AgileRef( ComPtr<IAgileReference> const & );
			void AgileRef( IAgileReference * );
			void AgileRef( void * );
			void AgileRef();
			void ~AgileRef();
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT CopyTo( IAgileReference * * ) const;
			HRESULT CopyTo( _GUID const & , IUnknown * * ) const;
			AgileRef & operator=( AgileRef && );
			AgileRef & operator=( AgileRef const & );
			void operator->();
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : public Implements<IAsyncInfo> {
		public:
			void AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			/*0058*/ virtual void ~AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			/*0060*/ virtual HRESULT put_Id( UINT const );
			/*    */ virtual HRESULT get_Id( UINT * );
			/*    */ virtual HRESULT get_Status( AsyncStatus * );
			/*    */ virtual HRESULT get_ErrorCode( HRESULT * );
		protected:
			/*0068*/ virtual HRESULT Start();
		public:
			/*    */ virtual HRESULT Cancel();
			/*    */ virtual HRESULT Close();
			/*0070*/ virtual HRESULT PutOnComplete( IAsyncOperationCompletedHandler<bool> * );
			/*0078*/ virtual HRESULT GetOnComplete( IAsyncOperationCompletedHandler<bool> * * );
			/*0080*/ virtual HRESULT FireCompletion();
		protected:
			void CurrentStatus( AsyncStatusInternal * );
			void ErrorCode( HRESULT * );
			BOOLEAN TryTransitionToCompleted( CancelTransitionPolicy );
			BOOLEAN TryTransitionToError( HRESULT const , CancelTransitionPolicy , void * );
			HRESULT CheckValidStateForDelegateCall();
			HRESULT CheckValidStateForResultsCall();
			BOOLEAN ContinueAsyncOperation();
			/*0088*/ virtual HRESULT OnStart() = 0;
			/*0090*/ virtual void OnClose() = 0;
			/*0098*/ virtual void OnCancel() = 0;
		private:
			static INT InitCausality( _RTL_RUN_ONCE * , void * , void * * );
			HRESULT CheckValidStateForAsyncInfoCall();
			BOOLEAN TransitionToState( AsyncStatusInternal const );
		protected:
			BOOLEAN TransitionCanceledToCompleted();
			BOOLEAN TransitionCanceledToError();
			BOOLEAN IsTerminalState( AsyncStatusInternal );
			BOOLEAN IsTerminalState();
			/*0010*/ LONG cCallbackMade_;
			/*0014*/ LONG cCompleteDelegateAssigned_;
			void TraceOperationStart();
			void TraceOperationComplete();
			void TraceProgressNotificationStart();
			void TraceProgressNotificationComplete();
			void TraceCompletionNotificationStart();
			void TraceCompletionNotificationComplete();
			void TraceExecutionStart( CausalityTraceLevel );
			void TraceExecutionComplete( CausalityTraceLevel );
			void TraceDelegateAssigned();
			void TraceError();
			void TraceCancellation();
		private:
			/*0018*/ ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > completeDelegate_;
			/*0020*/ void * completeDelegateBucketAssist_;
			/*0028*/ ComPtr<IRestrictedErrorInfo> errorInfo_;
			/*0030*/ AsyncStatusInternal volatile currentStatus_;
			/*0034*/ HRESULT volatile errorCode_;
			/*0038*/ UINT id_;
		protected:
			/*0040*/ void * asyncOperationBucketAssist_;
		public:
			AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*0048*/
		};

		class AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : public Implements<IAsyncInfo> {
		public:
			void AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			/*0058*/ virtual void ~AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			/*0060*/ virtual HRESULT put_Id( UINT const );
			/*    */ virtual HRESULT get_Id( UINT * );
			/*    */ virtual HRESULT get_Status( AsyncStatus * );
			/*    */ virtual HRESULT get_ErrorCode( HRESULT * );
		protected:
			/*0068*/ virtual HRESULT Start();
		public:
			/*    */ virtual HRESULT Cancel();
			/*    */ virtual HRESULT Close();
			/*0070*/ virtual HRESULT PutOnComplete( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * );
			/*0078*/ virtual HRESULT GetOnComplete( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * * );
			/*0080*/ virtual HRESULT FireCompletion();
		protected:
			void CurrentStatus( AsyncStatusInternal * );
			void ErrorCode( HRESULT * );
			BOOLEAN TryTransitionToCompleted( CancelTransitionPolicy );
			BOOLEAN TryTransitionToError( HRESULT const , CancelTransitionPolicy , void * );
			HRESULT CheckValidStateForDelegateCall();
			HRESULT CheckValidStateForResultsCall();
			BOOLEAN ContinueAsyncOperation();
			/*0088*/ virtual HRESULT OnStart() = 0;
			/*0090*/ virtual void OnClose() = 0;
			/*0098*/ virtual void OnCancel() = 0;
		private:
			static INT InitCausality( _RTL_RUN_ONCE * , void * , void * * );
			HRESULT CheckValidStateForAsyncInfoCall();
			BOOLEAN TransitionToState( AsyncStatusInternal const );
		protected:
			BOOLEAN TransitionCanceledToCompleted();
			BOOLEAN TransitionCanceledToError();
			BOOLEAN IsTerminalState( AsyncStatusInternal );
			BOOLEAN IsTerminalState();
			/*0010*/ LONG cCallbackMade_;
			/*0014*/ LONG cCompleteDelegateAssigned_;
			void TraceOperationStart();
			void TraceOperationComplete();
			void TraceProgressNotificationStart();
			void TraceProgressNotificationComplete();
			void TraceCompletionNotificationStart();
			void TraceCompletionNotificationComplete();
			void TraceExecutionStart( CausalityTraceLevel );
			void TraceExecutionComplete( CausalityTraceLevel );
			void TraceDelegateAssigned();
			void TraceError();
			void TraceCancellation();
		private:
			/*0018*/ ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > completeDelegate_;
			/*0020*/ void * completeDelegateBucketAssist_;
			/*0028*/ ComPtr<IRestrictedErrorInfo> errorInfo_;
			/*0030*/ AsyncStatusInternal volatile currentStatus_;
			/*0034*/ HRESULT volatile errorCode_;
			/*0038*/ UINT id_;
		protected:
			/*0040*/ void * asyncOperationBucketAssist_;
		public:
			AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*0048*/
		};

		class AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : public Implements<IAsyncInfo> {
		public:
			void AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			/*0058*/ virtual void ~AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			/*0060*/ virtual HRESULT put_Id( UINT const );
			/*    */ virtual HRESULT get_Id( UINT * );
			/*    */ virtual HRESULT get_Status( AsyncStatus * );
			/*    */ virtual HRESULT get_ErrorCode( HRESULT * );
		protected:
			/*0068*/ virtual HRESULT Start();
		public:
			/*    */ virtual HRESULT Cancel();
			/*    */ virtual HRESULT Close();
			/*0070*/ virtual HRESULT PutOnComplete( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * );
			/*0078*/ virtual HRESULT GetOnComplete( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * * );
			/*0080*/ virtual HRESULT FireCompletion();
		protected:
			void CurrentStatus( AsyncStatusInternal * );
			void ErrorCode( HRESULT * );
			BOOLEAN TryTransitionToCompleted( CancelTransitionPolicy );
			BOOLEAN TryTransitionToError( HRESULT const , CancelTransitionPolicy , void * );
			HRESULT CheckValidStateForDelegateCall();
			HRESULT CheckValidStateForResultsCall();
			BOOLEAN ContinueAsyncOperation();
			/*0088*/ virtual HRESULT OnStart() = 0;
			/*0090*/ virtual void OnClose() = 0;
			/*0098*/ virtual void OnCancel() = 0;
		private:
			static INT InitCausality( _RTL_RUN_ONCE * , void * , void * * );
			HRESULT CheckValidStateForAsyncInfoCall();
			BOOLEAN TransitionToState( AsyncStatusInternal const );
		protected:
			BOOLEAN TransitionCanceledToCompleted();
			BOOLEAN TransitionCanceledToError();
			BOOLEAN IsTerminalState( AsyncStatusInternal );
			BOOLEAN IsTerminalState();
			/*0010*/ LONG cCallbackMade_;
			/*0014*/ LONG cCompleteDelegateAssigned_;
			void TraceOperationStart();
			void TraceOperationComplete();
			void TraceProgressNotificationStart();
			void TraceProgressNotificationComplete();
			void TraceCompletionNotificationStart();
			void TraceCompletionNotificationComplete();
			void TraceExecutionStart( CausalityTraceLevel );
			void TraceExecutionComplete( CausalityTraceLevel );
			void TraceDelegateAssigned();
			void TraceError();
			void TraceCancellation();
		private:
			/*0018*/ ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > completeDelegate_;
			/*0020*/ void * completeDelegateBucketAssist_;
			/*0028*/ ComPtr<IRestrictedErrorInfo> errorInfo_;
			/*0030*/ AsyncStatusInternal volatile currentStatus_;
			/*0034*/ HRESULT volatile errorCode_;
			/*0038*/ UINT id_;
		protected:
			/*0040*/ void * asyncOperationBucketAssist_;
		public:
			AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*0048*/
		};

		struct AsyncCausalityOptions<&DisableCausalityAsyncOperationName,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> : AsyncOptionsBase {
			static WCHAR const * GetAsyncOperationName();
			static _GUID const GetPlatformId();
			static CausalitySource GetCausalitySource();
			static BOOLEAN const hasCausalityOptions;
			static BOOLEAN const hasCausalityOperationName;
			/*0001*/
		};

		struct AsyncCausalityOptions<0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> : AsyncOptionsBase {
			static WCHAR const * GetAsyncOperationName();
			static _GUID const GetPlatformId();
			static CausalitySource GetCausalitySource();
			static BOOLEAN const hasCausalityOptions;
			static BOOLEAN const hasCausalityOperationName;
			/*0001*/
		};

		struct AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> : AsyncCausalityOptions<0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2>, ErrorPropagationOptions<-1> {
			static BOOLEAN const hasCausalityOptions;
			static BOOLEAN const hasErrorPropagationPolicy;
			static BOOLEAN const hasCausalityOperationName;
			static BOOLEAN const isCausalityEnabled;
			/*0001*/
		};

		enum AsyncResultType {
			SingleResult = 0x1,
			MultipleResults = 0x2
		};

		enum CancelTransitionPolicy {
			RemainCanceled = 0x0,
			TransitionFromCanceled = 0x1
		};

		struct CloakedIid<IMarshal> : IMarshal {
			void CloakedIid<IMarshal>( CloakedIid<IMarshal> && );
			void CloakedIid<IMarshal>( CloakedIid<IMarshal> const & );
			void CloakedIid<IMarshal>();
			CloakedIid<IMarshal> & operator=( CloakedIid<IMarshal> && );
			CloakedIid<IMarshal> & operator=( CloakedIid<IMarshal> const & );
			/*0008*/
		};

		struct CloakedIid<Windows::Storage::Streams::IBufferByteAccess> : IBufferByteAccess {
			void CloakedIid<Windows::Storage::Streams::IBufferByteAccess>( CloakedIid<Windows::Storage::Streams::IBufferByteAccess> && );
			void CloakedIid<Windows::Storage::Streams::IBufferByteAccess>( CloakedIid<Windows::Storage::Streams::IBufferByteAccess> const & );
			void CloakedIid<Windows::Storage::Streams::IBufferByteAccess>();
			CloakedIid<Windows::Storage::Streams::IBufferByteAccess> & operator=( CloakedIid<Windows::Storage::Streams::IBufferByteAccess> && );
			CloakedIid<Windows::Storage::Streams::IBufferByteAccess> & operator=( CloakedIid<Windows::Storage::Streams::IBufferByteAccess> const & );
			/*0008*/
		};

		class ComPtr<Details::EventTargetArray> {
		protected:
			/*0000*/ EventTargetArray * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Microsoft::WRL::Details::EventTargetArray>( ComPtr<Details::EventTargetArray> && );
			void ComPtr<Microsoft::WRL::Details::EventTargetArray>( ComPtr<Details::EventTargetArray> const & );
			void ComPtr<Microsoft::WRL::Details::EventTargetArray>( void * );
			void ComPtr<Microsoft::WRL::Details::EventTargetArray>();
			void ~ComPtr<Microsoft::WRL::Details::EventTargetArray>();
			ComPtr<Details::EventTargetArray> & operator=( ComPtr<Details::EventTargetArray> && );
			ComPtr<Details::EventTargetArray> & operator=( ComPtr<Details::EventTargetArray> const & );
			ComPtr<Details::EventTargetArray> & operator=( EventTargetArray * );
			ComPtr<Details::EventTargetArray> & operator=( void * );
			void Swap( ComPtr<Details::EventTargetArray> & );
			void Swap( ComPtr<Details::EventTargetArray> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			EventTargetArray * Get() const;
			EventTargetArray * operator->() const;
			ComPtrRef<ComPtr<EventTargetArray> const > const operator&() const;
			ComPtrRef<ComPtr<EventTargetArray> > operator&();
			EventTargetArray * * GetAddressOf();
			EventTargetArray * const * GetAddressOf() const;
			EventTargetArray * * ReleaseAndGetAddressOf();
			EventTargetArray * Detach();
			void Attach( EventTargetArray * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( EventTargetArray * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Details::WeakReferenceImpl> {
		protected:
			/*0000*/ WeakReferenceImpl * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Microsoft::WRL::Details::WeakReferenceImpl>( ComPtr<Details::WeakReferenceImpl> && );
			void ComPtr<Microsoft::WRL::Details::WeakReferenceImpl>( ComPtr<Details::WeakReferenceImpl> const & );
			void ComPtr<Microsoft::WRL::Details::WeakReferenceImpl>( void * );
			void ComPtr<Microsoft::WRL::Details::WeakReferenceImpl>();
			void ~ComPtr<Microsoft::WRL::Details::WeakReferenceImpl>();
			ComPtr<Details::WeakReferenceImpl> & operator=( ComPtr<Details::WeakReferenceImpl> && );
			ComPtr<Details::WeakReferenceImpl> & operator=( ComPtr<Details::WeakReferenceImpl> const & );
			ComPtr<Details::WeakReferenceImpl> & operator=( WeakReferenceImpl * );
			ComPtr<Details::WeakReferenceImpl> & operator=( void * );
			void Swap( ComPtr<Details::WeakReferenceImpl> & );
			void Swap( ComPtr<Details::WeakReferenceImpl> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			WeakReferenceImpl * Get() const;
			WeakReferenceImpl * operator->() const;
			ComPtrRef<ComPtr<WeakReferenceImpl> const > const operator&() const;
			ComPtrRef<ComPtr<WeakReferenceImpl> > operator&();
			WeakReferenceImpl * * GetAddressOf();
			WeakReferenceImpl * const * GetAddressOf() const;
			WeakReferenceImpl * * ReleaseAndGetAddressOf();
			WeakReferenceImpl * Detach();
			void Attach( WeakReferenceImpl * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( WeakReferenceImpl * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IAgileReference> {
		protected:
			/*0000*/ IAgileReference * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IAgileReference>( ComPtr<IAgileReference> && );
			void ComPtr<IAgileReference>( ComPtr<IAgileReference> const & );
			void ComPtr<IAgileReference>( void * );
			void ComPtr<IAgileReference>();
			void ~ComPtr<IAgileReference>();
			ComPtr<IAgileReference> & operator=( ComPtr<IAgileReference> && );
			ComPtr<IAgileReference> & operator=( ComPtr<IAgileReference> const & );
			ComPtr<IAgileReference> & operator=( IAgileReference * );
			ComPtr<IAgileReference> & operator=( void * );
			void Swap( ComPtr<IAgileReference> & );
			void Swap( ComPtr<IAgileReference> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IAgileReference * Get() const;
			IAgileReference * operator->() const;
			ComPtrRef<ComPtr<IAgileReference> const > const operator&() const;
			ComPtrRef<ComPtr<IAgileReference> > operator&();
			IAgileReference * * GetAddressOf();
			IAgileReference * const * GetAddressOf() const;
			IAgileReference * * ReleaseAndGetAddressOf();
			IAgileReference * Detach();
			void Attach( IAgileReference * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IAgileReference * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IAsyncInfo> {
		protected:
			/*0000*/ IAsyncInfo * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IAsyncInfo>( ComPtr<IAsyncInfo> && );
			void ComPtr<IAsyncInfo>( ComPtr<IAsyncInfo> const & );
			void ComPtr<IAsyncInfo>( void * );
			void ComPtr<IAsyncInfo>();
			void ~ComPtr<IAsyncInfo>();
			ComPtr<IAsyncInfo> & operator=( ComPtr<IAsyncInfo> && );
			ComPtr<IAsyncInfo> & operator=( ComPtr<IAsyncInfo> const & );
			ComPtr<IAsyncInfo> & operator=( IAsyncInfo * );
			ComPtr<IAsyncInfo> & operator=( void * );
			void Swap( ComPtr<IAsyncInfo> & );
			void Swap( ComPtr<IAsyncInfo> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IAsyncInfo * Get() const;
			IAsyncInfo * operator->() const;
			ComPtrRef<ComPtr<IAsyncInfo> const > const operator&() const;
			ComPtrRef<ComPtr<IAsyncInfo> > operator&();
			IAsyncInfo * * GetAddressOf();
			IAsyncInfo * const * GetAddressOf() const;
			IAsyncInfo * * ReleaseAndGetAddressOf();
			IAsyncInfo * Detach();
			void Attach( IAsyncInfo * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IAsyncInfo * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IGlobalInterfaceTable> {
		protected:
			/*0000*/ IGlobalInterfaceTable * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IGlobalInterfaceTable>( ComPtr<IGlobalInterfaceTable> && );
			void ComPtr<IGlobalInterfaceTable>( ComPtr<IGlobalInterfaceTable> const & );
			void ComPtr<IGlobalInterfaceTable>( void * );
			void ComPtr<IGlobalInterfaceTable>();
			void ~ComPtr<IGlobalInterfaceTable>();
			ComPtr<IGlobalInterfaceTable> & operator=( ComPtr<IGlobalInterfaceTable> && );
			ComPtr<IGlobalInterfaceTable> & operator=( ComPtr<IGlobalInterfaceTable> const & );
			ComPtr<IGlobalInterfaceTable> & operator=( IGlobalInterfaceTable * );
			ComPtr<IGlobalInterfaceTable> & operator=( void * );
			void Swap( ComPtr<IGlobalInterfaceTable> & );
			void Swap( ComPtr<IGlobalInterfaceTable> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IGlobalInterfaceTable * Get() const;
			IGlobalInterfaceTable * operator->() const;
			ComPtrRef<ComPtr<IGlobalInterfaceTable> const > const operator&() const;
			ComPtrRef<ComPtr<IGlobalInterfaceTable> > operator&();
			IGlobalInterfaceTable * * GetAddressOf();
			IGlobalInterfaceTable * const * GetAddressOf() const;
			IGlobalInterfaceTable * * ReleaseAndGetAddressOf();
			IGlobalInterfaceTable * Detach();
			void Attach( IGlobalInterfaceTable * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IGlobalInterfaceTable * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IGlobalOptions> {
		protected:
			/*0000*/ IGlobalOptions * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IGlobalOptions>( ComPtr<IGlobalOptions> && );
			void ComPtr<IGlobalOptions>( ComPtr<IGlobalOptions> const & );
			void ComPtr<IGlobalOptions>( void * );
			void ComPtr<IGlobalOptions>();
			void ~ComPtr<IGlobalOptions>();
			ComPtr<IGlobalOptions> & operator=( ComPtr<IGlobalOptions> && );
			ComPtr<IGlobalOptions> & operator=( ComPtr<IGlobalOptions> const & );
			ComPtr<IGlobalOptions> & operator=( IGlobalOptions * );
			ComPtr<IGlobalOptions> & operator=( void * );
			void Swap( ComPtr<IGlobalOptions> & );
			void Swap( ComPtr<IGlobalOptions> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IGlobalOptions * Get() const;
			IGlobalOptions * operator->() const;
			ComPtrRef<ComPtr<IGlobalOptions> const > const operator&() const;
			ComPtrRef<ComPtr<IGlobalOptions> > operator&();
			IGlobalOptions * * GetAddressOf();
			IGlobalOptions * const * GetAddressOf() const;
			IGlobalOptions * * ReleaseAndGetAddressOf();
			IGlobalOptions * Detach();
			void Attach( IGlobalOptions * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IGlobalOptions * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IInspectable> {
		protected:
			/*0000*/ IInspectable * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IInspectable>( ComPtr<IInspectable> && );
			void ComPtr<IInspectable>( ComPtr<IInspectable> const & );
			void ComPtr<IInspectable>( void * );
			void ComPtr<IInspectable>();
			void ~ComPtr<IInspectable>();
			ComPtr<IInspectable> & operator=( ComPtr<IInspectable> && );
			ComPtr<IInspectable> & operator=( ComPtr<IInspectable> const & );
			ComPtr<IInspectable> & operator=( IInspectable * );
			ComPtr<IInspectable> & operator=( void * );
			void Swap( ComPtr<IInspectable> & );
			void Swap( ComPtr<IInspectable> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IInspectable * Get() const;
			IInspectable * operator->() const;
			ComPtrRef<ComPtr<IInspectable> const > const operator&() const;
			ComPtrRef<ComPtr<IInspectable> > operator&();
			IInspectable * * GetAddressOf();
			IInspectable * const * GetAddressOf() const;
			IInspectable * * ReleaseAndGetAddressOf();
			IInspectable * Detach();
			void Attach( IInspectable * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IInspectable * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IMarshal> {
		protected:
			/*0000*/ IMarshal * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IMarshal>( ComPtr<IMarshal> && );
			void ComPtr<IMarshal>( ComPtr<IMarshal> const & );
			void ComPtr<IMarshal>( void * );
			void ComPtr<IMarshal>();
			void ~ComPtr<IMarshal>();
			ComPtr<IMarshal> & operator=( ComPtr<IMarshal> && );
			ComPtr<IMarshal> & operator=( ComPtr<IMarshal> const & );
			ComPtr<IMarshal> & operator=( IMarshal * );
			ComPtr<IMarshal> & operator=( void * );
			void Swap( ComPtr<IMarshal> & );
			void Swap( ComPtr<IMarshal> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IMarshal * Get() const;
			IMarshal * operator->() const;
			ComPtrRef<ComPtr<IMarshal> const > const operator&() const;
			ComPtrRef<ComPtr<IMarshal> > operator&();
			IMarshal * * GetAddressOf();
			IMarshal * const * GetAddressOf() const;
			IMarshal * * ReleaseAndGetAddressOf();
			IMarshal * Detach();
			void Attach( IMarshal * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IMarshal * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IRestrictedErrorInfo> {
		protected:
			/*0000*/ IRestrictedErrorInfo * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IRestrictedErrorInfo>( ComPtr<IRestrictedErrorInfo> && );
			void ComPtr<IRestrictedErrorInfo>( ComPtr<IRestrictedErrorInfo> const & );
			void ComPtr<IRestrictedErrorInfo>( void * );
			void ComPtr<IRestrictedErrorInfo>();
			void ~ComPtr<IRestrictedErrorInfo>();
			ComPtr<IRestrictedErrorInfo> & operator=( ComPtr<IRestrictedErrorInfo> && );
			ComPtr<IRestrictedErrorInfo> & operator=( ComPtr<IRestrictedErrorInfo> const & );
			ComPtr<IRestrictedErrorInfo> & operator=( IRestrictedErrorInfo * );
			ComPtr<IRestrictedErrorInfo> & operator=( void * );
			void Swap( ComPtr<IRestrictedErrorInfo> & );
			void Swap( ComPtr<IRestrictedErrorInfo> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IRestrictedErrorInfo * Get() const;
			IRestrictedErrorInfo * operator->() const;
			ComPtrRef<ComPtr<IRestrictedErrorInfo> const > const operator&() const;
			ComPtrRef<ComPtr<IRestrictedErrorInfo> > operator&();
			IRestrictedErrorInfo * * GetAddressOf();
			IRestrictedErrorInfo * const * GetAddressOf() const;
			IRestrictedErrorInfo * * ReleaseAndGetAddressOf();
			IRestrictedErrorInfo * Detach();
			void Attach( IRestrictedErrorInfo * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IRestrictedErrorInfo * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IRpcOptions> {
		protected:
			/*0000*/ IRpcOptions * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IRpcOptions>( ComPtr<IRpcOptions> && );
			void ComPtr<IRpcOptions>( ComPtr<IRpcOptions> const & );
			void ComPtr<IRpcOptions>( void * );
			void ComPtr<IRpcOptions>();
			void ~ComPtr<IRpcOptions>();
			ComPtr<IRpcOptions> & operator=( ComPtr<IRpcOptions> && );
			ComPtr<IRpcOptions> & operator=( ComPtr<IRpcOptions> const & );
			ComPtr<IRpcOptions> & operator=( IRpcOptions * );
			ComPtr<IRpcOptions> & operator=( void * );
			void Swap( ComPtr<IRpcOptions> & );
			void Swap( ComPtr<IRpcOptions> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IRpcOptions * Get() const;
			IRpcOptions * operator->() const;
			ComPtrRef<ComPtr<IRpcOptions> const > const operator&() const;
			ComPtrRef<ComPtr<IRpcOptions> > operator&();
			IRpcOptions * * GetAddressOf();
			IRpcOptions * const * GetAddressOf() const;
			IRpcOptions * * ReleaseAndGetAddressOf();
			IRpcOptions * Detach();
			void Attach( IRpcOptions * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IRpcOptions * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IStream> {
		protected:
			/*0000*/ IStream * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IStream>( ComPtr<IStream> && );
			void ComPtr<IStream>( ComPtr<IStream> const & );
			void ComPtr<IStream>( void * );
			void ComPtr<IStream>();
			void ~ComPtr<IStream>();
			ComPtr<IStream> & operator=( ComPtr<IStream> && );
			ComPtr<IStream> & operator=( ComPtr<IStream> const & );
			ComPtr<IStream> & operator=( IStream * );
			ComPtr<IStream> & operator=( void * );
			void Swap( ComPtr<IStream> & );
			void Swap( ComPtr<IStream> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IStream * Get() const;
			IStream * operator->() const;
			ComPtrRef<ComPtr<IStream> const > const operator&() const;
			ComPtrRef<ComPtr<IStream> > operator&();
			IStream * * GetAddressOf();
			IStream * const * GetAddressOf() const;
			IStream * * ReleaseAndGetAddressOf();
			IStream * Detach();
			void Attach( IStream * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IStream * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IUnknown> {
		protected:
			/*0000*/ IUnknown * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IUnknown>( ComPtr<IUnknown> && );
			void ComPtr<IUnknown>( ComPtr<IUnknown> const & );
			void ComPtr<IUnknown>( void * );
			void ComPtr<IUnknown>();
			void ~ComPtr<IUnknown>();
			ComPtr<IUnknown> & operator=( ComPtr<IUnknown> && );
			ComPtr<IUnknown> & operator=( ComPtr<IUnknown> const & );
			ComPtr<IUnknown> & operator=( IUnknown * );
			ComPtr<IUnknown> & operator=( void * );
			void Swap( ComPtr<IUnknown> & );
			void Swap( ComPtr<IUnknown> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IUnknown * Get() const;
			IUnknown * operator->() const;
			ComPtrRef<ComPtr<IUnknown> const > const operator&() const;
			ComPtrRef<ComPtr<IUnknown> > operator&();
			IUnknown * * GetAddressOf();
			IUnknown * const * GetAddressOf() const;
			IUnknown * * ReleaseAndGetAddressOf();
			IUnknown * Detach();
			void Attach( IUnknown * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IUnknown * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<IWeakReference> {
		protected:
			/*0000*/ IWeakReference * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<IWeakReference>( ComPtr<IWeakReference> && );
			void ComPtr<IWeakReference>( ComPtr<IWeakReference> const & );
			void ComPtr<IWeakReference>( void * );
			void ComPtr<IWeakReference>();
			void ~ComPtr<IWeakReference>();
			ComPtr<IWeakReference> & operator=( ComPtr<IWeakReference> && );
			ComPtr<IWeakReference> & operator=( ComPtr<IWeakReference> const & );
			ComPtr<IWeakReference> & operator=( IWeakReference * );
			ComPtr<IWeakReference> & operator=( void * );
			void Swap( ComPtr<IWeakReference> & );
			void Swap( ComPtr<IWeakReference> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IWeakReference * Get() const;
			IWeakReference * operator->() const;
			ComPtrRef<ComPtr<IWeakReference> const > const operator&() const;
			ComPtrRef<ComPtr<IWeakReference> > operator&();
			IWeakReference * * GetAddressOf();
			IWeakReference * const * GetAddressOf() const;
			IWeakReference * * ReleaseAndGetAddressOf();
			IWeakReference * Detach();
			void Attach( IWeakReference * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IWeakReference * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Foundation::IAsyncOperation<bool> > {
		protected:
			/*0000*/ IAsyncOperation<bool> * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Foundation::IAsyncOperation<bool> >( ComPtr<Windows::Foundation::IAsyncOperation<bool> > && );
			void ComPtr<Windows::Foundation::IAsyncOperation<bool> >( ComPtr<Windows::Foundation::IAsyncOperation<bool> > const & );
			void ComPtr<Windows::Foundation::IAsyncOperation<bool> >( void * );
			void ComPtr<Windows::Foundation::IAsyncOperation<bool> >();
			void ~ComPtr<Windows::Foundation::IAsyncOperation<bool> >();
			ComPtr<Windows::Foundation::IAsyncOperation<bool> > & operator=( ComPtr<Windows::Foundation::IAsyncOperation<bool> > && );
			ComPtr<Windows::Foundation::IAsyncOperation<bool> > & operator=( ComPtr<Windows::Foundation::IAsyncOperation<bool> > const & );
			ComPtr<Windows::Foundation::IAsyncOperation<bool> > & operator=( IAsyncOperation<bool> * );
			ComPtr<Windows::Foundation::IAsyncOperation<bool> > & operator=( void * );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperation<bool> > & );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperation<bool> > && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IAsyncOperation<bool> * Get() const;
			IAsyncOperation<bool> * operator->() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperation<bool> > const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperation<bool> > > operator&();
			IAsyncOperation<bool> * * GetAddressOf();
			IAsyncOperation<bool> * const * GetAddressOf() const;
			IAsyncOperation<bool> * * ReleaseAndGetAddressOf();
			IAsyncOperation<bool> * Detach();
			void Attach( IAsyncOperation<bool> * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IAsyncOperation<bool> * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > {
		protected:
			/*0000*/ IAsyncOperationCompletedHandler<bool> * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >( ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > && );
			void ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >( ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > const & );
			void ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >( void * );
			void ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >();
			void ~ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >();
			ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > && );
			ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > const & );
			ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > & operator=( IAsyncOperationCompletedHandler<bool> * );
			ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > & operator=( void * );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > & );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IAsyncOperationCompletedHandler<bool> * Get() const;
			IAsyncOperationCompletedHandler<bool> * operator->() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationCompletedHandler<bool> > > operator&();
			IAsyncOperationCompletedHandler<bool> * * GetAddressOf();
			IAsyncOperationCompletedHandler<bool> * const * GetAddressOf() const;
			IAsyncOperationCompletedHandler<bool> * * ReleaseAndGetAddressOf();
			IAsyncOperationCompletedHandler<bool> * Detach();
			void Attach( IAsyncOperationCompletedHandler<bool> * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IAsyncOperationCompletedHandler<bool> * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > {
		protected:
			/*0000*/ IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > && );
			void ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const & );
			void ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( void * );
			void ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >();
			void ~ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >();
			ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > && );
			ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const & );
			ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * );
			ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( void * );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * Get() const;
			IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * operator->() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > > operator&();
			IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * * GetAddressOf();
			IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * const * GetAddressOf() const;
			IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * * ReleaseAndGetAddressOf();
			IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * Detach();
			void Attach( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > {
		protected:
			/*0000*/ IAsyncOperationProgressHandler<unsigned int,unsigned int> * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > && );
			void ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > const & );
			void ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >( void * );
			void ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >();
			void ~ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >();
			ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > && );
			ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > const & );
			ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > & operator=( IAsyncOperationProgressHandler<unsigned int,unsigned int> * );
			ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > & operator=( void * );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > & );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IAsyncOperationProgressHandler<unsigned int,unsigned int> * Get() const;
			IAsyncOperationProgressHandler<unsigned int,unsigned int> * operator->() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > > operator&();
			IAsyncOperationProgressHandler<unsigned int,unsigned int> * * GetAddressOf();
			IAsyncOperationProgressHandler<unsigned int,unsigned int> * const * GetAddressOf() const;
			IAsyncOperationProgressHandler<unsigned int,unsigned int> * * ReleaseAndGetAddressOf();
			IAsyncOperationProgressHandler<unsigned int,unsigned int> * Detach();
			void Attach( IAsyncOperationProgressHandler<unsigned int,unsigned int> * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IAsyncOperationProgressHandler<unsigned int,unsigned int> * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > {
		protected:
			/*0000*/ IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > && );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > const & );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> >( void * );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> >();
			void ~ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> >();
			ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > && );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > const & );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( void * );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > & );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * Get() const;
			IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * operator->() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > > operator&();
			IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * * GetAddressOf();
			IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * const * GetAddressOf() const;
			IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * * ReleaseAndGetAddressOf();
			IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * Detach();
			void Attach( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > {
		protected:
			/*0000*/ IAsyncOperationWithProgress<unsigned int,unsigned int> * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > && );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > const & );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> >( void * );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> >();
			void ~ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> >();
			ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > && );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > const & );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > & operator=( IAsyncOperationWithProgress<unsigned int,unsigned int> * );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > & operator=( void * );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > & );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IAsyncOperationWithProgress<unsigned int,unsigned int> * Get() const;
			IAsyncOperationWithProgress<unsigned int,unsigned int> * operator->() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > > operator&();
			IAsyncOperationWithProgress<unsigned int,unsigned int> * * GetAddressOf();
			IAsyncOperationWithProgress<unsigned int,unsigned int> * const * GetAddressOf() const;
			IAsyncOperationWithProgress<unsigned int,unsigned int> * * ReleaseAndGetAddressOf();
			IAsyncOperationWithProgress<unsigned int,unsigned int> * Detach();
			void Attach( IAsyncOperationWithProgress<unsigned int,unsigned int> * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IAsyncOperationWithProgress<unsigned int,unsigned int> * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > {
		protected:
			/*0000*/ IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > && );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const & );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( void * );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >();
			void ~ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >();
			ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > && );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const & );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( void * );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * Get() const;
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * operator->() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > > operator&();
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * * GetAddressOf();
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * const * GetAddressOf() const;
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * * ReleaseAndGetAddressOf();
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * Detach();
			void Attach( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > {
		protected:
			/*0000*/ IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > && );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > const & );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >( void * );
			void ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >();
			void ~ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >();
			ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > && );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > & operator=( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > const & );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > & operator=( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * );
			ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > & operator=( void * );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > & );
			void Swap( ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * Get() const;
			IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * operator->() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > > operator&();
			IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * * GetAddressOf();
			IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * const * GetAddressOf() const;
			IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * * ReleaseAndGetAddressOf();
			IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * Detach();
			void Attach( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Foundation::IClosable> {
		protected:
			/*0000*/ IClosable * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Foundation::IClosable>( ComPtr<Windows::Foundation::IClosable> && );
			void ComPtr<Windows::Foundation::IClosable>( ComPtr<Windows::Foundation::IClosable> const & );
			void ComPtr<Windows::Foundation::IClosable>( void * );
			void ComPtr<Windows::Foundation::IClosable>();
			void ~ComPtr<Windows::Foundation::IClosable>();
			ComPtr<Windows::Foundation::IClosable> & operator=( ComPtr<Windows::Foundation::IClosable> && );
			ComPtr<Windows::Foundation::IClosable> & operator=( ComPtr<Windows::Foundation::IClosable> const & );
			ComPtr<Windows::Foundation::IClosable> & operator=( IClosable * );
			ComPtr<Windows::Foundation::IClosable> & operator=( void * );
			void Swap( ComPtr<Windows::Foundation::IClosable> & );
			void Swap( ComPtr<Windows::Foundation::IClosable> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IClosable * Get() const;
			IClosable * operator->() const;
			ComPtrRef<ComPtr<Windows::Foundation::IClosable> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Foundation::IClosable> > operator&();
			IClosable * * GetAddressOf();
			IClosable * const * GetAddressOf() const;
			IClosable * * ReleaseAndGetAddressOf();
			IClosable * Detach();
			void Attach( IClosable * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IClosable * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Compression::CompressFlushOperation> {
		protected:
			/*0000*/ CompressFlushOperation * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Compression::CompressFlushOperation>( ComPtr<Windows::Storage::Compression::CompressFlushOperation> && );
			void ComPtr<Windows::Storage::Compression::CompressFlushOperation>( ComPtr<Windows::Storage::Compression::CompressFlushOperation> const & );
			void ComPtr<Windows::Storage::Compression::CompressFlushOperation>( void * );
			void ComPtr<Windows::Storage::Compression::CompressFlushOperation>();
			void ~ComPtr<Windows::Storage::Compression::CompressFlushOperation>();
			ComPtr<Windows::Storage::Compression::CompressFlushOperation> & operator=( ComPtr<Windows::Storage::Compression::CompressFlushOperation> && );
			ComPtr<Windows::Storage::Compression::CompressFlushOperation> & operator=( ComPtr<Windows::Storage::Compression::CompressFlushOperation> const & );
			ComPtr<Windows::Storage::Compression::CompressFlushOperation> & operator=( CompressFlushOperation * );
			ComPtr<Windows::Storage::Compression::CompressFlushOperation> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Compression::CompressFlushOperation> & );
			void Swap( ComPtr<Windows::Storage::Compression::CompressFlushOperation> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			CompressFlushOperation * Get() const;
			CompressFlushOperation * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::CompressFlushOperation> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::CompressFlushOperation> > operator&();
			CompressFlushOperation * * GetAddressOf();
			CompressFlushOperation * const * GetAddressOf() const;
			CompressFlushOperation * * ReleaseAndGetAddressOf();
			CompressFlushOperation * Detach();
			void Attach( CompressFlushOperation * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( CompressFlushOperation * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Compression::CompressWriteOperation> {
		protected:
			/*0000*/ CompressWriteOperation * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Compression::CompressWriteOperation>( ComPtr<Windows::Storage::Compression::CompressWriteOperation> && );
			void ComPtr<Windows::Storage::Compression::CompressWriteOperation>( ComPtr<Windows::Storage::Compression::CompressWriteOperation> const & );
			void ComPtr<Windows::Storage::Compression::CompressWriteOperation>( void * );
			void ComPtr<Windows::Storage::Compression::CompressWriteOperation>();
			void ~ComPtr<Windows::Storage::Compression::CompressWriteOperation>();
			ComPtr<Windows::Storage::Compression::CompressWriteOperation> & operator=( ComPtr<Windows::Storage::Compression::CompressWriteOperation> && );
			ComPtr<Windows::Storage::Compression::CompressWriteOperation> & operator=( ComPtr<Windows::Storage::Compression::CompressWriteOperation> const & );
			ComPtr<Windows::Storage::Compression::CompressWriteOperation> & operator=( CompressWriteOperation * );
			ComPtr<Windows::Storage::Compression::CompressWriteOperation> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Compression::CompressWriteOperation> & );
			void Swap( ComPtr<Windows::Storage::Compression::CompressWriteOperation> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			CompressWriteOperation * Get() const;
			CompressWriteOperation * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::CompressWriteOperation> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::CompressWriteOperation> > operator&();
			CompressWriteOperation * * GetAddressOf();
			CompressWriteOperation * const * GetAddressOf() const;
			CompressWriteOperation * * ReleaseAndGetAddressOf();
			CompressWriteOperation * Detach();
			void Attach( CompressWriteOperation * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( CompressWriteOperation * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Compression::CompressorFactoryServer> {
		protected:
			/*0000*/ CompressorFactoryServer * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Compression::CompressorFactoryServer>( ComPtr<Windows::Storage::Compression::CompressorFactoryServer> && );
			void ComPtr<Windows::Storage::Compression::CompressorFactoryServer>( ComPtr<Windows::Storage::Compression::CompressorFactoryServer> const & );
			void ComPtr<Windows::Storage::Compression::CompressorFactoryServer>( void * );
			void ComPtr<Windows::Storage::Compression::CompressorFactoryServer>();
			void ~ComPtr<Windows::Storage::Compression::CompressorFactoryServer>();
			ComPtr<Windows::Storage::Compression::CompressorFactoryServer> & operator=( ComPtr<Windows::Storage::Compression::CompressorFactoryServer> && );
			ComPtr<Windows::Storage::Compression::CompressorFactoryServer> & operator=( ComPtr<Windows::Storage::Compression::CompressorFactoryServer> const & );
			ComPtr<Windows::Storage::Compression::CompressorFactoryServer> & operator=( CompressorFactoryServer * );
			ComPtr<Windows::Storage::Compression::CompressorFactoryServer> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Compression::CompressorFactoryServer> & );
			void Swap( ComPtr<Windows::Storage::Compression::CompressorFactoryServer> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			CompressorFactoryServer * Get() const;
			CompressorFactoryServer * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::CompressorFactoryServer> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::CompressorFactoryServer> > operator&();
			CompressorFactoryServer * * GetAddressOf();
			CompressorFactoryServer * const * GetAddressOf() const;
			CompressorFactoryServer * * ReleaseAndGetAddressOf();
			CompressorFactoryServer * Detach();
			void Attach( CompressorFactoryServer * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( CompressorFactoryServer * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Compression::CompressorServer> {
		protected:
			/*0000*/ CompressorServer * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Compression::CompressorServer>( ComPtr<Windows::Storage::Compression::CompressorServer> && );
			void ComPtr<Windows::Storage::Compression::CompressorServer>( ComPtr<Windows::Storage::Compression::CompressorServer> const & );
			void ComPtr<Windows::Storage::Compression::CompressorServer>( void * );
			void ComPtr<Windows::Storage::Compression::CompressorServer>();
			void ~ComPtr<Windows::Storage::Compression::CompressorServer>();
			ComPtr<Windows::Storage::Compression::CompressorServer> & operator=( ComPtr<Windows::Storage::Compression::CompressorServer> && );
			ComPtr<Windows::Storage::Compression::CompressorServer> & operator=( ComPtr<Windows::Storage::Compression::CompressorServer> const & );
			ComPtr<Windows::Storage::Compression::CompressorServer> & operator=( CompressorServer * );
			ComPtr<Windows::Storage::Compression::CompressorServer> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Compression::CompressorServer> & );
			void Swap( ComPtr<Windows::Storage::Compression::CompressorServer> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			CompressorServer * Get() const;
			CompressorServer * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::CompressorServer> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::CompressorServer> > operator&();
			CompressorServer * * GetAddressOf();
			CompressorServer * const * GetAddressOf() const;
			CompressorServer * * ReleaseAndGetAddressOf();
			CompressorServer * Detach();
			void Attach( CompressorServer * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( CompressorServer * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Compression::DecompressReadOperation> {
		protected:
			/*0000*/ DecompressReadOperation * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Compression::DecompressReadOperation>( ComPtr<Windows::Storage::Compression::DecompressReadOperation> && );
			void ComPtr<Windows::Storage::Compression::DecompressReadOperation>( ComPtr<Windows::Storage::Compression::DecompressReadOperation> const & );
			void ComPtr<Windows::Storage::Compression::DecompressReadOperation>( void * );
			void ComPtr<Windows::Storage::Compression::DecompressReadOperation>();
			void ~ComPtr<Windows::Storage::Compression::DecompressReadOperation>();
			ComPtr<Windows::Storage::Compression::DecompressReadOperation> & operator=( ComPtr<Windows::Storage::Compression::DecompressReadOperation> && );
			ComPtr<Windows::Storage::Compression::DecompressReadOperation> & operator=( ComPtr<Windows::Storage::Compression::DecompressReadOperation> const & );
			ComPtr<Windows::Storage::Compression::DecompressReadOperation> & operator=( DecompressReadOperation * );
			ComPtr<Windows::Storage::Compression::DecompressReadOperation> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Compression::DecompressReadOperation> & );
			void Swap( ComPtr<Windows::Storage::Compression::DecompressReadOperation> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			DecompressReadOperation * Get() const;
			DecompressReadOperation * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressReadOperation> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressReadOperation> > operator&();
			DecompressReadOperation * * GetAddressOf();
			DecompressReadOperation * const * GetAddressOf() const;
			DecompressReadOperation * * ReleaseAndGetAddressOf();
			DecompressReadOperation * Detach();
			void Attach( DecompressReadOperation * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( DecompressReadOperation * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> {
		protected:
			/*0000*/ DecompressorFactoryServer * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Compression::DecompressorFactoryServer>( ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> && );
			void ComPtr<Windows::Storage::Compression::DecompressorFactoryServer>( ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> const & );
			void ComPtr<Windows::Storage::Compression::DecompressorFactoryServer>( void * );
			void ComPtr<Windows::Storage::Compression::DecompressorFactoryServer>();
			void ~ComPtr<Windows::Storage::Compression::DecompressorFactoryServer>();
			ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> & operator=( ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> && );
			ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> & operator=( ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> const & );
			ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> & operator=( DecompressorFactoryServer * );
			ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> & );
			void Swap( ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			DecompressorFactoryServer * Get() const;
			DecompressorFactoryServer * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressorFactoryServer> > operator&();
			DecompressorFactoryServer * * GetAddressOf();
			DecompressorFactoryServer * const * GetAddressOf() const;
			DecompressorFactoryServer * * ReleaseAndGetAddressOf();
			DecompressorFactoryServer * Detach();
			void Attach( DecompressorFactoryServer * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( DecompressorFactoryServer * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Compression::DecompressorServer> {
		protected:
			/*0000*/ DecompressorServer * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Compression::DecompressorServer>( ComPtr<Windows::Storage::Compression::DecompressorServer> && );
			void ComPtr<Windows::Storage::Compression::DecompressorServer>( ComPtr<Windows::Storage::Compression::DecompressorServer> const & );
			void ComPtr<Windows::Storage::Compression::DecompressorServer>( void * );
			void ComPtr<Windows::Storage::Compression::DecompressorServer>();
			void ~ComPtr<Windows::Storage::Compression::DecompressorServer>();
			ComPtr<Windows::Storage::Compression::DecompressorServer> & operator=( ComPtr<Windows::Storage::Compression::DecompressorServer> && );
			ComPtr<Windows::Storage::Compression::DecompressorServer> & operator=( ComPtr<Windows::Storage::Compression::DecompressorServer> const & );
			ComPtr<Windows::Storage::Compression::DecompressorServer> & operator=( DecompressorServer * );
			ComPtr<Windows::Storage::Compression::DecompressorServer> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Compression::DecompressorServer> & );
			void Swap( ComPtr<Windows::Storage::Compression::DecompressorServer> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			DecompressorServer * Get() const;
			DecompressorServer * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressorServer> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::DecompressorServer> > operator&();
			DecompressorServer * * GetAddressOf();
			DecompressorServer * const * GetAddressOf() const;
			DecompressorServer * * ReleaseAndGetAddressOf();
			DecompressorServer * Detach();
			void Attach( DecompressorServer * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( DecompressorServer * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Compression::FlushListener> {
		protected:
			/*0000*/ FlushListener * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Compression::FlushListener>( ComPtr<Windows::Storage::Compression::FlushListener> && );
			void ComPtr<Windows::Storage::Compression::FlushListener>( ComPtr<Windows::Storage::Compression::FlushListener> const & );
			void ComPtr<Windows::Storage::Compression::FlushListener>( void * );
			void ComPtr<Windows::Storage::Compression::FlushListener>();
			void ~ComPtr<Windows::Storage::Compression::FlushListener>();
			ComPtr<Windows::Storage::Compression::FlushListener> & operator=( ComPtr<Windows::Storage::Compression::FlushListener> && );
			ComPtr<Windows::Storage::Compression::FlushListener> & operator=( ComPtr<Windows::Storage::Compression::FlushListener> const & );
			ComPtr<Windows::Storage::Compression::FlushListener> & operator=( FlushListener * );
			ComPtr<Windows::Storage::Compression::FlushListener> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Compression::FlushListener> & );
			void Swap( ComPtr<Windows::Storage::Compression::FlushListener> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			FlushListener * Get() const;
			FlushListener * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::FlushListener> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::FlushListener> > operator&();
			FlushListener * * GetAddressOf();
			FlushListener * const * GetAddressOf() const;
			FlushListener * * ReleaseAndGetAddressOf();
			FlushListener * Detach();
			void Attach( FlushListener * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( FlushListener * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Compression::ReadListener> {
		protected:
			/*0000*/ ReadListener * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Compression::ReadListener>( ComPtr<Windows::Storage::Compression::ReadListener> && );
			void ComPtr<Windows::Storage::Compression::ReadListener>( ComPtr<Windows::Storage::Compression::ReadListener> const & );
			void ComPtr<Windows::Storage::Compression::ReadListener>( void * );
			void ComPtr<Windows::Storage::Compression::ReadListener>();
			void ~ComPtr<Windows::Storage::Compression::ReadListener>();
			ComPtr<Windows::Storage::Compression::ReadListener> & operator=( ComPtr<Windows::Storage::Compression::ReadListener> && );
			ComPtr<Windows::Storage::Compression::ReadListener> & operator=( ComPtr<Windows::Storage::Compression::ReadListener> const & );
			ComPtr<Windows::Storage::Compression::ReadListener> & operator=( ReadListener * );
			ComPtr<Windows::Storage::Compression::ReadListener> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Compression::ReadListener> & );
			void Swap( ComPtr<Windows::Storage::Compression::ReadListener> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			ReadListener * Get() const;
			ReadListener * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::ReadListener> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::ReadListener> > operator&();
			ReadListener * * GetAddressOf();
			ReadListener * const * GetAddressOf() const;
			ReadListener * * ReleaseAndGetAddressOf();
			ReadListener * Detach();
			void Attach( ReadListener * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( ReadListener * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Compression::WriteListener> {
		protected:
			/*0000*/ WriteListener * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Compression::WriteListener>( ComPtr<Windows::Storage::Compression::WriteListener> && );
			void ComPtr<Windows::Storage::Compression::WriteListener>( ComPtr<Windows::Storage::Compression::WriteListener> const & );
			void ComPtr<Windows::Storage::Compression::WriteListener>( void * );
			void ComPtr<Windows::Storage::Compression::WriteListener>();
			void ~ComPtr<Windows::Storage::Compression::WriteListener>();
			ComPtr<Windows::Storage::Compression::WriteListener> & operator=( ComPtr<Windows::Storage::Compression::WriteListener> && );
			ComPtr<Windows::Storage::Compression::WriteListener> & operator=( ComPtr<Windows::Storage::Compression::WriteListener> const & );
			ComPtr<Windows::Storage::Compression::WriteListener> & operator=( WriteListener * );
			ComPtr<Windows::Storage::Compression::WriteListener> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Compression::WriteListener> & );
			void Swap( ComPtr<Windows::Storage::Compression::WriteListener> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			WriteListener * Get() const;
			WriteListener * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::WriteListener> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Compression::WriteListener> > operator&();
			WriteListener * * GetAddressOf();
			WriteListener * const * GetAddressOf() const;
			WriteListener * * ReleaseAndGetAddressOf();
			WriteListener * Detach();
			void Attach( WriteListener * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( WriteListener * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > {
		protected:
			/*0000*/ CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> >( ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > && );
			void ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> >( ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > const & );
			void ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> >( void * );
			void ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> >();
			void ~ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> >();
			ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > & operator=( ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > && );
			ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > & operator=( ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > const & );
			ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > & operator=( CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> * );
			ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > & );
			void Swap( ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> * Get() const;
			CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler> > > operator&();
			CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> * * GetAddressOf();
			CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> * const * GetAddressOf() const;
			CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> * * ReleaseAndGetAddressOf();
			CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> * Detach();
			void Attach( CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > {
		protected:
			/*0000*/ CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> >( ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > && );
			void ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> >( ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > const & );
			void ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> >( void * );
			void ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> >();
			void ~ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> >();
			ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > & operator=( ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > && );
			ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > & operator=( ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > const & );
			ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > & operator=( CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> * );
			ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > & );
			void Swap( ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> * Get() const;
			CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler> > > operator&();
			CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> * * GetAddressOf();
			CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> * const * GetAddressOf() const;
			CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> * * ReleaseAndGetAddressOf();
			CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> * Detach();
			void Attach( CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Streams::IBuffer> {
		protected:
			/*0000*/ IBuffer * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Streams::IBuffer>( ComPtr<Windows::Storage::Streams::IBuffer> && );
			void ComPtr<Windows::Storage::Streams::IBuffer>( ComPtr<Windows::Storage::Streams::IBuffer> const & );
			void ComPtr<Windows::Storage::Streams::IBuffer>( void * );
			void ComPtr<Windows::Storage::Streams::IBuffer>();
			void ~ComPtr<Windows::Storage::Streams::IBuffer>();
			ComPtr<Windows::Storage::Streams::IBuffer> & operator=( ComPtr<Windows::Storage::Streams::IBuffer> && );
			ComPtr<Windows::Storage::Streams::IBuffer> & operator=( ComPtr<Windows::Storage::Streams::IBuffer> const & );
			ComPtr<Windows::Storage::Streams::IBuffer> & operator=( IBuffer * );
			ComPtr<Windows::Storage::Streams::IBuffer> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Streams::IBuffer> & );
			void Swap( ComPtr<Windows::Storage::Streams::IBuffer> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IBuffer * Get() const;
			IBuffer * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::IBuffer> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::IBuffer> > operator&();
			IBuffer * * GetAddressOf();
			IBuffer * const * GetAddressOf() const;
			IBuffer * * ReleaseAndGetAddressOf();
			IBuffer * Detach();
			void Attach( IBuffer * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IBuffer * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Streams::IBufferByteAccess> {
		protected:
			/*0000*/ IBufferByteAccess * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Streams::IBufferByteAccess>( ComPtr<Windows::Storage::Streams::IBufferByteAccess> && );
			void ComPtr<Windows::Storage::Streams::IBufferByteAccess>( ComPtr<Windows::Storage::Streams::IBufferByteAccess> const & );
			void ComPtr<Windows::Storage::Streams::IBufferByteAccess>( void * );
			void ComPtr<Windows::Storage::Streams::IBufferByteAccess>();
			void ~ComPtr<Windows::Storage::Streams::IBufferByteAccess>();
			ComPtr<Windows::Storage::Streams::IBufferByteAccess> & operator=( ComPtr<Windows::Storage::Streams::IBufferByteAccess> && );
			ComPtr<Windows::Storage::Streams::IBufferByteAccess> & operator=( ComPtr<Windows::Storage::Streams::IBufferByteAccess> const & );
			ComPtr<Windows::Storage::Streams::IBufferByteAccess> & operator=( IBufferByteAccess * );
			ComPtr<Windows::Storage::Streams::IBufferByteAccess> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Streams::IBufferByteAccess> & );
			void Swap( ComPtr<Windows::Storage::Streams::IBufferByteAccess> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IBufferByteAccess * Get() const;
			IBufferByteAccess * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::IBufferByteAccess> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::IBufferByteAccess> > operator&();
			IBufferByteAccess * * GetAddressOf();
			IBufferByteAccess * const * GetAddressOf() const;
			IBufferByteAccess * * ReleaseAndGetAddressOf();
			IBufferByteAccess * Detach();
			void Attach( IBufferByteAccess * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IBufferByteAccess * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Streams::IInputStream> {
		protected:
			/*0000*/ IInputStream * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Streams::IInputStream>( ComPtr<Windows::Storage::Streams::IInputStream> && );
			void ComPtr<Windows::Storage::Streams::IInputStream>( ComPtr<Windows::Storage::Streams::IInputStream> const & );
			void ComPtr<Windows::Storage::Streams::IInputStream>( void * );
			void ComPtr<Windows::Storage::Streams::IInputStream>();
			void ~ComPtr<Windows::Storage::Streams::IInputStream>();
			ComPtr<Windows::Storage::Streams::IInputStream> & operator=( ComPtr<Windows::Storage::Streams::IInputStream> && );
			ComPtr<Windows::Storage::Streams::IInputStream> & operator=( ComPtr<Windows::Storage::Streams::IInputStream> const & );
			ComPtr<Windows::Storage::Streams::IInputStream> & operator=( IInputStream * );
			ComPtr<Windows::Storage::Streams::IInputStream> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Streams::IInputStream> & );
			void Swap( ComPtr<Windows::Storage::Streams::IInputStream> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IInputStream * Get() const;
			IInputStream * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::IInputStream> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::IInputStream> > operator&();
			IInputStream * * GetAddressOf();
			IInputStream * const * GetAddressOf() const;
			IInputStream * * ReleaseAndGetAddressOf();
			IInputStream * Detach();
			void Attach( IInputStream * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IInputStream * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class ComPtr<Windows::Storage::Streams::IOutputStream> {
		protected:
			/*0000*/ IOutputStream * ptr_;
			void InternalAddRef() const;
			ULONG InternalRelease();
		public:
			void ComPtr<Windows::Storage::Streams::IOutputStream>( ComPtr<Windows::Storage::Streams::IOutputStream> && );
			void ComPtr<Windows::Storage::Streams::IOutputStream>( ComPtr<Windows::Storage::Streams::IOutputStream> const & );
			void ComPtr<Windows::Storage::Streams::IOutputStream>( void * );
			void ComPtr<Windows::Storage::Streams::IOutputStream>();
			void ~ComPtr<Windows::Storage::Streams::IOutputStream>();
			ComPtr<Windows::Storage::Streams::IOutputStream> & operator=( ComPtr<Windows::Storage::Streams::IOutputStream> && );
			ComPtr<Windows::Storage::Streams::IOutputStream> & operator=( ComPtr<Windows::Storage::Streams::IOutputStream> const & );
			ComPtr<Windows::Storage::Streams::IOutputStream> & operator=( IOutputStream * );
			ComPtr<Windows::Storage::Streams::IOutputStream> & operator=( void * );
			void Swap( ComPtr<Windows::Storage::Streams::IOutputStream> & );
			void Swap( ComPtr<Windows::Storage::Streams::IOutputStream> && );
			INT BoolStruct::* operator int Microsoft::WRL::Details::BoolStruct::*() const;
			IOutputStream * Get() const;
			IOutputStream * operator->() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::IOutputStream> const > const operator&() const;
			ComPtrRef<ComPtr<Windows::Storage::Streams::IOutputStream> > operator&();
			IOutputStream * * GetAddressOf();
			IOutputStream * const * GetAddressOf() const;
			IOutputStream * * ReleaseAndGetAddressOf();
			IOutputStream * Detach();
			void Attach( IOutputStream * );
			ULONG Reset();
			HRESULT CopyTo( _GUID const & , void * * ) const;
			HRESULT CopyTo( IOutputStream * * ) const;
			HRESULT AsIID( _GUID const & , ComPtr<IUnknown> * ) const;
			HRESULT AsWeak( WeakRef * ) const;
			HRESULT AsAgile( AgileRef * ) const;
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		enum DelegateCheckMode {
			NoCheck = 0x1
		};

		struct DelegateTraits<-1> {
			static void EnsureStackSnapshot( HRESULT );
			static HRESULT CheckReturn( HRESULT );
			/*0001*/
		};

		struct DelegateTraits<1> {
			static HRESULT CheckReturn( HRESULT );
			/*0001*/
		};

		struct DisableCausality : AsyncCausalityOptions<&DisableCausalityAsyncOperationName,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> {
			static BOOLEAN const isCausalityEnabled;
			/*0001*/
		};

		struct ErrorHelper<0> {
			static void OriginateError( HRESULT , HSTRING__ * );
			/*0001*/
		};

		struct ErrorHelper<16> {
			static void OriginateError( HRESULT , HSTRING__ * );
			/*0001*/
		};

		struct ErrorPropagationOptions<-1> : AsyncOptionsBase {
			static ErrorPropagationPolicy const PropagationPolicy;
			static BOOLEAN const hasErrorPropagationPolicy;
			/*0001*/
		};

		enum ErrorPropagationPolicy {
			PropagateDelegateError = 0x1,
			IgnoreDelegateError = 0x2,
			PropagateErrorWithWin8Quirk = 0xffffffff
		};

		struct ErrorPropagationPolicyTraits<-1> {
			static HRESULT FireCompletionErrorPropagationPolicyFilter( HRESULT , IUnknown * , void * );
			static HRESULT FireProgressErrorPropagationPolicyFilter( HRESULT , IUnknown * , void * );
			/*0001*/
		};

		struct ErrorPropagationPolicyTraits<1> {
			static HRESULT FireCompletionErrorPropagationPolicyFilter( HRESULT , IUnknown * , void * );
			static HRESULT FireProgressErrorPropagationPolicyFilter( HRESULT , IUnknown * , void * );
			/*0001*/
		};

		struct ErrorPropagationPolicyTraits<2> {
			static HRESULT FireCompletionErrorPropagationPolicyFilter( HRESULT , IUnknown * , void * );
			static HRESULT FireProgressErrorPropagationPolicyFilter( HRESULT , IUnknown * , void * );
			/*0001*/
		};

		enum FactoryCacheFlags {
			FactoryCacheDefault = 0x0,
			FactoryCacheEnabled = 0x1,
			FactoryCacheDisabled = 0x2
		};

		class FtmBase : public Implements<RuntimeClassFlags<3>,CloakedIid<IMarshal> >, FtmBaseMarker {
		protected:
			HRESULT CanCastTo( _GUID const & , void * * );
		public:
			void FtmBase( FtmBase && );
			void FtmBase( FtmBase const & );
			void FtmBase();
			/*    */ virtual HRESULT GetUnmarshalClass( _GUID const & , void * , ULONG , void * , ULONG , _GUID * );
			/*    */ virtual HRESULT GetMarshalSizeMax( _GUID const & , void * , ULONG , void * , ULONG , ULONG * );
			/*    */ virtual HRESULT MarshalInterface( IStream * , _GUID const & , void * , ULONG , void * , ULONG );
			/*    */ virtual HRESULT UnmarshalInterface( IStream * , _GUID const & , void * * );
			/*    */ virtual HRESULT ReleaseMarshalData( IStream * );
			/*    */ virtual HRESULT DisconnectObject( ULONG );
			static HRESULT CreateGlobalInterfaceTable( IGlobalInterfaceTable * * );
			/*0018*/ ComPtr<IMarshal> marshaller_;
			void ~FtmBase();
			FtmBase & operator=( FtmBase && );
			FtmBase & operator=( FtmBase const & );
			void * __vecDelDtor( UINT );
			/*0020*/
		};

		struct Implements<IAsyncInfo> : ImplementsHelper<RuntimeClassFlags<1>,1,IAsyncInfo>, ImplementsBase {
		protected:
			HRESULT CanCastTo( _GUID const & , void * * );
			IUnknown * CastToUnknown();
			ULONG GetIidCount();
			void FillArrayWithIid( ULONG * , _GUID * );
		public:
			void Implements<IAsyncInfo>( Implements<IAsyncInfo> && );
			void Implements<IAsyncInfo>( Implements<IAsyncInfo> const & );
			void Implements<IAsyncInfo>();
			Implements<IAsyncInfo> & operator=( Implements<IAsyncInfo> && );
			Implements<IAsyncInfo> & operator=( Implements<IAsyncInfo> const & );
			/*0010*/
		};

		struct Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> : ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase>, ImplementsBase {
		protected:
			HRESULT CanCastTo( _GUID const & , void * * );
			IUnknown * CastToUnknown();
			ULONG GetIidCount();
			void FillArrayWithIid( ULONG * , _GUID * );
		public:
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::F( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> && );
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::F( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> const & );
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::F();
			/*    */ virtual void ~Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,Microsoft::WRL::();
			Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> & operator=( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> && );
			Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> & operator=( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*0070*/
		};

		struct Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> : ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase>, ImplementsBase {
		protected:
			HRESULT CanCastTo( _GUID const & , void * * );
			IUnknown * CastToUnknown();
			ULONG GetIidCount();
			void FillArrayWithIid( ULONG * , _GUID * );
		public:
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> && );
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> const & );
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&();
			/*    */ virtual void ~Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,();
			Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> & operator=( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> && );
			Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> & operator=( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*0070*/
		};

		struct Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> : ImplementsHelper<RuntimeClassFlags<3>,1,ImplementsMarker<AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >,FtmBase>, ImplementsBase {
		protected:
			HRESULT CanCastTo( _GUID const & , void * * );
			IUnknown * CastToUnknown();
			ULONG GetIidCount();
			void FillArrayWithIid( ULONG * , _GUID * );
		public:
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_P( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> && );
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_P( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> const & );
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_P();
			/*    */ virtual void ~Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::Details::Nil,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_();
			Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> & operator=( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> && );
			Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> & operator=( Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*0070*/
		};

		struct Implements<RuntimeClassFlags<3>,CloakedIid<IMarshal> > : ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IMarshal> >, ImplementsBase {
		protected:
			HRESULT CanCastTo( _GUID const & , void * * );
			IUnknown * CastToUnknown();
			ULONG GetIidCount();
			void FillArrayWithIid( ULONG * , _GUID * );
		public:
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::CloakedIid<IMarshal> >( Implements<RuntimeClassFlags<3>,CloakedIid<IMarshal> > && );
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::CloakedIid<IMarshal> >( Implements<RuntimeClassFlags<3>,CloakedIid<IMarshal> > const & );
			void Implements<Microsoft::WRL::RuntimeClassFlags<3>,Microsoft::WRL::CloakedIid<IMarshal> >();
			Implements<RuntimeClassFlags<3>,CloakedIid<IMarshal> > & operator=( Implements<RuntimeClassFlags<3>,CloakedIid<IMarshal> > && );
			Implements<RuntimeClassFlags<3>,CloakedIid<IMarshal> > & operator=( Implements<RuntimeClassFlags<3>,CloakedIid<IMarshal> > const & );
			/*0010*/
		};

		enum InvokeMode {
			StopOnFirstError = 0x1,
			FireAll = 0x2
		};

		struct InvokeTraits<-1> {
			/*0001*/
		};

		struct InvokeTraits<-2> {
			/*0001*/
		};

		struct InvokeTraits<1> {
			/*0001*/
		};

		struct InvokeTraits<2> {
			/*0001*/
		};

		class Module<1,Details::DefaultModule<1> > : public ModuleBase {
			void VerifyEntries();
			static BOOLEAN StaticInitialize();
			static BOOLEAN isInitialized;
		protected:
			void Module<1,Microsoft::WRL::Details::DefaultModule<1> >();
			static _RTL_RUN_ONCE initOnceInProc_;
		public:
			/*    */ virtual void ~Module<1,Microsoft::WRL::Details::DefaultModule<1> >();
			static DefaultModule<1> & Create();
			static DefaultModule<1> & GetModule();
			HRESULT GetActivationFactory( HSTRING__ * , IActivationFactory * * , WCHAR const * );
			HRESULT GetClassObject( _GUID const & , _GUID const & , void * * , WCHAR const * );
			BOOLEAN Terminate( WCHAR const * , BOOLEAN );
			/*    */ virtual ULONG IncrementObjectCount();
			/*    */ virtual ULONG DecrementObjectCount();
			/*    */ virtual HRESULT RegisterWinRTObject( WCHAR const * , WCHAR const * * , _RO_REGISTRATION_COOKIE * * , UINT );
			/*    */ virtual HRESULT UnregisterWinRTObject( WCHAR const * , _RO_REGISTRATION_COOKIE * );
			/*    */ virtual HRESULT RegisterCOMObject( WCHAR const * , _GUID * , IClassFactory * * , ULONG * , UINT );
			/*    */ virtual HRESULT UnregisterCOMObject( WCHAR const * , ULONG * , UINT );
			void __local_vftable_ctor_closure();
			/*0000*/ virtual void * __vecDelDtor( UINT );
			/*0008*/
		};

		enum ModuleType {
			InProc = 0x1,
			OutOfProc = 0x2,
			DisableCaching = 0x4,
			InProcDisableCaching = 0x5,
			OutOfProcDisableCaching = 0x6
		};

		class RuntimeClass<RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> : public RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> {
		public:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
		private:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>( RuntimeClass<RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> const & );
			RuntimeClass<RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> & operator=( RuntimeClass<RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Microsoft::WRL::RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,Microsoft::WRL::CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,Microsoft::WRL::CloakedIid<IMarshal>,Microsoft::WRL::FtmBase>();
			void __local_vftable_ctor_closure();
			/*0048*/ virtual void * __vecDelDtor( UINT );
			/*0050*/
		};

		class RuntimeClass<RuntimeClassFlags<2>,IUnknown> : public RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUnknown> {
		public:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,IUnknown>();
		private:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,IUnknown>( RuntimeClass<RuntimeClassFlags<2>,IUnknown> const & );
			RuntimeClass<RuntimeClassFlags<2>,IUnknown> & operator=( RuntimeClass<RuntimeClassFlags<2>,IUnknown> const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,IUnknown>();
			void __local_vftable_ctor_closure();
			/*0018*/ virtual void * __vecDelDtor( UINT );
			/*0010*/
		};

		class RuntimeClass<RuntimeClassFlags<2>,IWeakReference> : public RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IWeakReference> {
		public:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,IWeakReference>();
		private:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,IWeakReference>( RuntimeClass<RuntimeClassFlags<2>,IWeakReference> const & );
			RuntimeClass<RuntimeClassFlags<2>,IWeakReference> & operator=( RuntimeClass<RuntimeClassFlags<2>,IWeakReference> const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,IWeakReference>();
			void __local_vftable_ctor_closure();
			/*0020*/ virtual void * __vecDelDtor( UINT );
			/*0010*/
		};

		class RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> : public RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> {
		public:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::FtmBase>();
		private:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::FtmBase>( RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> const & );
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> & operator=( RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Microsoft::WRL::FtmBase>();
			void __local_vftable_ctor_closure();
			/*0020*/ virtual void * __vecDelDtor( UINT );
			/*0030*/
		};

		class RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> : public RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> {
		public:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::FtmBase>();
		private:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::FtmBase>( RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> const & );
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> & operator=( RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Microsoft::WRL::FtmBase>();
			void __local_vftable_ctor_closure();
			/*0020*/ virtual void * __vecDelDtor( UINT );
			/*0030*/
		};

		class RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> : public RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> {
		public:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::FtmBase>();
		private:
			void RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::FtmBase>( RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> const & );
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> & operator=( RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Microsoft::WRL::RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Microsoft::WRL::FtmBase>();
			void __local_vftable_ctor_closure();
			/*0020*/ virtual void * __vecDelDtor( UINT );
			/*0030*/
		};

		class RuntimeClass<Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : public RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
		public:
			void RuntimeClass<Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >();
		private:
			void RuntimeClass<Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >( RuntimeClass<Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
			RuntimeClass<Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( RuntimeClass<Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > >();
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*00a8*/
		};

		class RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : public RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
		public:
			void RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer();
		private:
			void RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer( RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
			RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffe();
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*00c0*/
		};

		class RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > : public RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
		public:
			void RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOper();
		private:
			void RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOper( RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
			RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > & operator=( RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOpe();
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*00c0*/
		};

		class RuntimeClass<Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> : public RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> {
		public:
			void RuntimeClass<Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
		private:
			void RuntimeClass<Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( RuntimeClass<Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> const & );
			RuntimeClass<Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> & operator=( RuntimeClass<Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
			void __local_vftable_ctor_closure();
			/*0038*/ virtual void * __vecDelDtor( UINT );
			/*0050*/
		};

		class RuntimeClass<Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> : public RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> {
		public:
			void RuntimeClass<Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
		private:
			void RuntimeClass<Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>( RuntimeClass<Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> const & );
			RuntimeClass<Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> & operator=( RuntimeClass<Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> const & );
		protected:
			HRESULT CustomQueryInterface( _GUID const & , void * * , BOOLEAN * );
		public:
			/*    */ virtual void ~RuntimeClass<Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,Microsoft::WRL::FtmBase>();
			void __local_vftable_ctor_closure();
			/*0040*/ virtual void * __vecDelDtor( UINT );
			/*0050*/
		};

		struct RuntimeClassFlags<13> {
			static UINT const value;
			/*0001*/
		};

		struct RuntimeClassFlags<19> {
			static UINT const value;
			/*0001*/
		};

		struct RuntimeClassFlags<1> {
			static UINT const value;
			/*0001*/
		};

		struct RuntimeClassFlags<2> {
			static UINT const value;
			/*0001*/
		};

		struct RuntimeClassFlags<3> {
			static UINT const value;
			/*0001*/
		};

		struct RuntimeClassFlags<4> {
			static UINT const value;
			/*0001*/
		};

		struct RuntimeClassFlags<5>;

		struct RuntimeClassFlags<6> {
			static UINT const value;
			/*0001*/
		};

		enum RuntimeClassType {
			WinRt = 0x1,
			ClassicCom = 0x2,
			WinRtClassicComMix = 0x3,
			InhibitWeakReference = 0x4,
			Delegate = 0x2,
			InhibitFtmBase = 0x8,
			InhibitRoOriginateError = 0x10
		};

		class WeakRef : public ComPtr<IWeakReference> {
			void operator->();
		protected:
			HRESULT InternalResolve( _GUID const & , IInspectable * * ) const;
		public:
			ComPtrRef<WeakRef const > const operator&() const;
			ComPtrRef<WeakRef> operator&();
			void WeakRef( WeakRef && );
			void WeakRef( WeakRef const & );
			void WeakRef( ComPtr<IWeakReference> const & );
			void WeakRef( IWeakReference * );
			void WeakRef( void * );
			void WeakRef();
			void ~WeakRef();
			HRESULT AsIID( _GUID const & , ComPtr<IInspectable> * ) const;
			HRESULT CopyTo( IWeakReference * * ) const;
			HRESULT CopyTo( _GUID const & , IInspectable * * ) const;
			WeakRef & operator=( WeakRef && );
			WeakRef & operator=( WeakRef const & );
			void * __vecDelDtor( UINT );
			/*0008*/
		};

	}

}

namespace Windows {

	namespace Internal {

		namespace _StringDetail {

			struct dummy_t {
				/*0001*/
			};

		}

		namespace Details {

			class Git {
			public:
				void Git( Git && );
				void Git( Git const & );
				void Git();
				HRESULT Acquire();
				void Release();
				IGlobalInterfaceTable * operator struct IGlobalInterfaceTable *() const;
				IGlobalInterfaceTable * operator->() const;
			private:
				/*0000*/ ULONG _cAcquired;
				/*0008*/ ComPtr<IGlobalInterfaceTable> _spGit;
			public:
				void ~Git();
				Git & operator=( Git && );
				Git & operator=( Git const & );
				void * __vecDelDtor( UINT );
				/*0010*/
			};

		}

		class AsyncBaseFTM<Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : public Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> {
		public:
			void AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( AsyncBaseFTM<Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > && );
			void AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( AsyncBaseFTM<Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			/*    */ virtual HRESULT PutOnComplete( IAsyncOperationCompletedHandler<bool> * );
			/*    */ virtual HRESULT GetOnComplete( IAsyncOperationCompletedHandler<bool> * * );
			/*    */ virtual HRESULT FireCompletion();
		protected:
			/*00a0*/ virtual BOOLEAN v_ShouldSetNoWake();
			/*00a8*/ virtual BOOLEAN v_MustDoNoWake();
		private:
			/*0070*/ GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<bool> > completedDelegate_;
			/*0078*/ void * completedDelegateBucketAssist_;
			/*0080*/ LONG completedDelegateLockCount_;
			static INT CheckExecutionEnvironment( _RTL_RUN_ONCE * , void * , void * * );
			BOOLEAN TryLockCompleteDelegate();
			void UnlockCompleteDelegate();
		public:
			/*    */ virtual void ~AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			AsyncBaseFTM<Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBaseFTM<Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > && );
			AsyncBaseFTM<Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBaseFTM<Foundation::IAsyncOperationCompletedHandler<bool>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*0088*/
		};

		class AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : public Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> {
		public:
			void AsyncBaseFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > && );
			void AsyncBaseFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void AsyncBaseFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			/*    */ virtual HRESULT PutOnComplete( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * );
			/*    */ virtual HRESULT GetOnComplete( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * * );
			/*    */ virtual HRESULT FireCompletion();
		protected:
			/*00a0*/ virtual BOOLEAN v_ShouldSetNoWake();
			/*00a8*/ virtual BOOLEAN v_MustDoNoWake();
		private:
			/*0070*/ GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> > completedDelegate_;
			/*0078*/ void * completedDelegateBucketAssist_;
			/*0080*/ LONG completedDelegateLockCount_;
			static INT CheckExecutionEnvironment( _RTL_RUN_ONCE * , void * , void * * );
			BOOLEAN TryLockCompleteDelegate();
			void UnlockCompleteDelegate();
		public:
			/*    */ virtual void ~AsyncBaseFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > && );
			AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*0088*/
		};

		class AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : public Implements<RuntimeClassFlags<3>,AsyncBase<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Details::Nil,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >,FtmBase> {
		public:
			void AsyncBaseFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > && );
			void AsyncBaseFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >( AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void AsyncBaseFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			/*    */ virtual HRESULT PutOnComplete( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * );
			/*    */ virtual HRESULT GetOnComplete( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * * );
			/*    */ virtual HRESULT FireCompletion();
		protected:
			/*00a0*/ virtual BOOLEAN v_ShouldSetNoWake();
			/*00a8*/ virtual BOOLEAN v_MustDoNoWake();
		private:
			/*0070*/ GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > completedDelegate_;
			/*0078*/ void * completedDelegateBucketAssist_;
			/*0080*/ LONG completedDelegateLockCount_;
			static INT CheckExecutionEnvironment( _RTL_RUN_ONCE * , void * , void * * );
			BOOLEAN TryLockCompleteDelegate();
			void UnlockCompleteDelegate();
		public:
			/*    */ virtual void ~AsyncBaseFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> >();
			AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > && );
			AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*0088*/
		};

		class AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : public AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
		public:
			/*00b0*/ virtual HRESULT PutOnProgress( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * );
			/*00b8*/ virtual HRESULT GetOnProgress( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * * );
			HRESULT FireProgress( UINT const );
			/*    */ virtual HRESULT FireCompletion();
		private:
			/*0088*/ GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> > progressedDelegate_;
			/*0090*/ void * progressedDelegateBucketAssist_;
			/*0098*/ LONG progressDelegateLockCount_;
			/*009c*/ LONG cProgressDelegateAssigned_;
			BOOLEAN TryLockProgressDelegate();
			void UnlockProgressDelegate();
		public:
			void AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,Microsoft:( AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > && );
			void AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,Microsoft:( AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,Microsoft:();
			/*    */ virtual void ~AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,Microsoft();
			AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > && );
			AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int>,Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*00a0*/
		};

		class AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > : public AsyncBaseFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > {
		public:
			/*00b0*/ virtual HRESULT PutOnProgress( IAsyncOperationProgressHandler<unsigned int,unsigned int> * );
			/*00b8*/ virtual HRESULT GetOnProgress( IAsyncOperationProgressHandler<unsigned int,unsigned int> * * );
			HRESULT FireProgress( UINT const );
			/*    */ virtual HRESULT FireCompletion();
		private:
			/*0088*/ GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > progressedDelegate_;
			/*0090*/ void * progressedDelegateBucketAssist_;
			/*0098*/ LONG progressDelegateLockCount_;
			/*009c*/ LONG cProgressDelegateAssigned_;
			BOOLEAN TryLockProgressDelegate();
			void UnlockProgressDelegate();
		public:
			void AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_( AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > && );
			void AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_( AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_();
			/*    */ virtual void ~AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS();
			AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > && );
			AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > & operator=( AsyncBaseWithProgressFTM<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,Microsoft::WRL::AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > const & );
			void __local_vftable_ctor_closure();
			/*0058*/ virtual void * __vecDelDtor( UINT );
			/*00a0*/
		};

		class GitPtr : public GitPtrImpl<GitPtr> {
		public:
			void GitPtr();
			/*    */ virtual void ~GitPtr();
			void __local_vftable_ctor_closure();
			/*0000*/ virtual void * __vecDelDtor( UINT );
			/*0010*/
		};

		class GitPtrImpl<GitPtr> {
		public:
			void GitPtrImpl<Windows::Internal::GitPtr>( GitPtrImpl<GitPtr> const & );
			void GitPtrImpl<Windows::Internal::GitPtr>();
			GitPtrImpl<GitPtr> & operator=( GitPtrImpl<GitPtr> const & );
			/*0000*/ virtual void ~GitPtrImpl<Windows::Internal::GitPtr>();
			/*0008*/ virtual BOOLEAN IsInitialized() const;
			BOOLEAN operator bool() const;
			ULONG Get() const;
			ULONG Detach();
			void Attach( ULONG );
			HRESULT Register();
			HRESULT CopyLocal( _GUID const & , void * * );
			HRESULT Revoke();
		protected:
			HRESULT Localize( _GUID const & , void * * );
			/*0008*/ ULONG _cookie;
		private:
			/*000c*/ HRESULT _hrInitGit;
		public:
			void __local_vftable_ctor_closure();
			/*0000*/ virtual void * __vecDelDtor( UINT );
			/*0010*/
		};

		class GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<bool> > {
		public:
			BOOLEAN IsInitialized() const;
			HRESULT CopyLocal( _GUID const & , void * * );
			HRESULT Revoke();
		protected:
			/*0000*/ AgileRef m_agileRef;
		public:
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >( GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<bool> > && );
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >( GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<bool> > const & );
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >();
			void ~GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationCompletedHandler<bool> >();
			GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<bool> > & operator=( GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<bool> > && );
			GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<bool> > & operator=( GitPtrSupportsAgile<Foundation::IAsyncOperationCompletedHandler<bool> > const & );
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> > {
		public:
			BOOLEAN IsInitialized() const;
			HRESULT CopyLocal( _GUID const & , void * * );
			HRESULT Revoke();
		protected:
			/*0000*/ AgileRef m_agileRef;
		public:
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> > && );
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> > const & );
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >();
			void ~GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >();
			GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> > & operator=( GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> > && );
			GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> > & operator=( GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> > const & );
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > {
		public:
			BOOLEAN IsInitialized() const;
			HRESULT CopyLocal( _GUID const & , void * * );
			HRESULT Revoke();
		protected:
			/*0000*/ AgileRef m_agileRef;
		public:
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >( GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > && );
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >( GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > const & );
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >();
			void ~GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >();
			GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > & operator=( GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > && );
			GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > & operator=( GitPtrSupportsAgile<Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > const & );
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> > {
		public:
			BOOLEAN IsInitialized() const;
			HRESULT CopyLocal( _GUID const & , void * * );
			HRESULT Revoke();
		protected:
			/*0000*/ AgileRef m_agileRef;
		public:
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> > && );
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> > const & );
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >();
			void ~GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >();
			GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> > & operator=( GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> > && );
			GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> > & operator=( GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> > const & );
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > {
		public:
			BOOLEAN IsInitialized() const;
			HRESULT CopyLocal( _GUID const & , void * * );
			HRESULT Revoke();
		protected:
			/*0000*/ AgileRef m_agileRef;
		public:
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >( GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > && );
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >( GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > const & );
			void GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >();
			void ~GitPtrSupportsAgile<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >();
			GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > & operator=( GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > && );
			GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > & operator=( GitPtrSupportsAgile<Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > const & );
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class String {
			void String( String const & );
		public:
			void String( String && );
			void String();
		private:
			String & operator=( String const & );
		public:
			String & operator=( String && );
			HRESULT Initialize( HSTRING__ * const & );
			HRESULT Initialize( WCHAR const * , UINT );
			void ~String();
			void Release();
			void Detach( HSTRING__ * * );
			HRESULT Duplicate( String const & );
			HRESULT CopyTo( HSTRING__ * * ) const;
			HSTRING__ * const & operator struct HSTRING__ *const &() const;
			HSTRING__ * Get() const;
			HSTRING__ * * Address();
			HSTRING__ * * GetAddressOf();
			HSTRING__ * * ReleaseAndGetAddressOf();
			void Attach( HSTRING__ * );
			UINT length() const;
			UINT size() const;
			INT IsEmpty() const;
			INT HasEmbeddedNull() const;
			WCHAR const * GetRawBuffer( UINT * ) const;
			HRESULT GetLpcwstr( WCHAR const * * ) const;
			INT CompareOrdinal( String const & ) const;
			HRESULT Concat( String const & , String * ) const;
			HRESULT TrimStart( String const & , String * ) const;
			HRESULT TrimEnd( String const & , String * ) const;
			HRESULT Substring( UINT , UINT , String * ) const;
			HRESULT Substring( UINT , String * ) const;
			HRESULT Replace( String const & , String const & , String * ) const;
		private:
			HRESULT _InitializeHelper( WCHAR const * );
			static HRESULT FreeAndAssignOnSuccess( HRESULT , HSTRING__ * , HSTRING__ * * );
			/*0000*/ HSTRING__ * _hstring;
		public:
			void * __vecDelDtor( UINT );
			/*0008*/
		};

		class StringReference {
			void StringReference( String const & );
		public:
			void StringReference( HSTRING__ * const & );
			void StringReference( WCHAR const * , UINT );
			void StringReference( StringReference const & );
		private:
			StringReference const & operator=( String const & );
		public:
			StringReference & operator=( StringReference const & );
			String const & operator const class Windows::Internal::String &() const;
			HSTRING__ * Get() const;
			INT CompareOrdinal( String const & ) const;
			UINT length() const;
			UINT size() const;
			INT IsEmpty() const;
			INT HasEmbeddedNull() const;
			WCHAR const * GetRawBuffer( UINT * ) const;
			HRESULT GetLpcwstr( WCHAR const * * ) const;
			HRESULT CopyTo( HSTRING__ * * ) const;
			HRESULT Concat( String const & , String * ) const;
			HRESULT TrimStart( String const & , String * ) const;
			HRESULT TrimEnd( String const & , String * ) const;
			HRESULT Substring( UINT , UINT , String * ) const;
			HRESULT Substring( UINT , String * ) const;
			HRESULT Replace( String const & , String const & , String * ) const;
		private:
			static void * operator new( ULONGLONG );
			static void operator delete( void * , ULONGLONG );
			void _ConstructorHelper( WCHAR const * );
			String const & _AsString() const;
			/*0000*/ HSTRING__ * _hstring;
			/*0008*/ HSTRING_HEADER _header;
			/*0020*/
		};

	}

	namespace Foundation {

		namespace Metadata {

			enum GCPressureAmount {
				GCPressureAmount_Low = 0x0,
				GCPressureAmount_Medium = 0x1,
				GCPressureAmount_High = 0x2
			};

		}

		namespace Internal {

			struct AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *>;

			struct AggregateType<bool,unsigned char>;

			struct GetAbiType<AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *> > {
				/*0001*/
			};

			struct GetAbiType<AggregateType<bool,unsigned char> > {
				/*0001*/
			};

			struct GetAbiType<Collections::IIterable<Point> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<EventRegistrationToken,int> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,Collections::IVector<HSTRING__ *> *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,IPropertyValue *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,__int64> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,double> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,float> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,short> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,unsigned char> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<HSTRING__ *,unsigned int> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<IInspectable *,IInspectable *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<_GUID,HSTRING__ *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<_GUID,IInspectable *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<_GUID,bool> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<__int64,HSTRING__ *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<__int64,__int64> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<__int64,double> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<__int64,float> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<unsigned int,HSTRING__ *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<unsigned int,IInspectable *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IKeyValuePair<unsigned int,IWeakReference *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IMap<HSTRING__ *,HSTRING__ *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IMap<HSTRING__ *,IInspectable *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IPropertySet *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IVector<HSTRING__ *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IVector<unsigned int> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IVectorView<Collections::IPropertySet *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IVectorView<HSTRING__ *> *> {
				/*0001*/
			};

			struct GetAbiType<Collections::IVectorView<bool> *> {
				/*0001*/
			};

			struct GetAbiType<DateTime> {
				/*0001*/
			};

			struct GetAbiType<EventRegistrationToken> {
				/*0001*/
			};

			struct GetAbiType<HSTRING__ *> {
				/*0001*/
			};

			struct GetAbiType<IInspectable *> {
				/*0001*/
			};

			struct GetAbiType<IMemoryBufferReference *> {
				/*0001*/
			};

			struct GetAbiType<IPropertyValue *> {
				/*0001*/
			};

			struct GetAbiType<IWeakReference *> {
				/*0001*/
			};

			struct GetAbiType<Point> {
				/*0001*/
			};

			struct GetAbiType<Rect> {
				/*0001*/
			};

			struct GetAbiType<Size> {
				/*0001*/
			};

			struct GetAbiType<Storage::Streams::IBuffer *> {
				/*0001*/
			};

			struct GetAbiType<Storage::Streams::IInputStream *> {
				/*0001*/
			};

			struct GetAbiType<Storage::Streams::IOutputStream *> {
				/*0001*/
			};

			struct GetAbiType<Storage::Streams::IRandomAccessStream *> {
				/*0001*/
			};

			struct GetAbiType<TimeSpan> {
				/*0001*/
			};

			struct GetAbiType<_GUID> {
				/*0001*/
			};

			struct GetAbiType<__int64> {
				/*0001*/
			};

			struct GetAbiType<double> {
				/*0001*/
			};

			struct GetAbiType<float> {
				/*0001*/
			};

			struct GetAbiType<int> {
				/*0001*/
			};

			struct GetAbiType<short> {
				/*0001*/
			};

			struct GetAbiType<unsigned __int64> {
				/*0001*/
			};

			struct GetAbiType<unsigned char> {
				/*0001*/
			};

			struct GetAbiType<unsigned int> {
				/*0001*/
			};

			struct GetLogicalType<AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *> > {
				/*0001*/
			};

			struct GetLogicalType<AggregateType<bool,unsigned char> > {
				/*0001*/
			};

			struct GetLogicalType<Collections::IIterable<Point> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<EventRegistrationToken,int> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,Collections::IVector<HSTRING__ *> *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,IPropertyValue *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,__int64> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,double> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,float> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,short> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,unsigned char> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<HSTRING__ *,unsigned int> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<IInspectable *,IInspectable *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<_GUID,HSTRING__ *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<_GUID,IInspectable *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<_GUID,bool> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<__int64,HSTRING__ *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<__int64,__int64> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<__int64,double> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<__int64,float> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<unsigned int,HSTRING__ *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<unsigned int,IInspectable *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IKeyValuePair<unsigned int,IWeakReference *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IMap<HSTRING__ *,HSTRING__ *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IMap<HSTRING__ *,IInspectable *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IPropertySet *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IVector<HSTRING__ *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IVector<unsigned int> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IVectorView<Collections::IPropertySet *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IVectorView<HSTRING__ *> *> {
				/*0001*/
			};

			struct GetLogicalType<Collections::IVectorView<bool> *> {
				/*0001*/
			};

			struct GetLogicalType<DateTime> {
				/*0001*/
			};

			struct GetLogicalType<EventRegistrationToken> {
				/*0001*/
			};

			struct GetLogicalType<HSTRING__ *> {
				/*0001*/
			};

			struct GetLogicalType<IInspectable *> {
				/*0001*/
			};

			struct GetLogicalType<IMemoryBufferReference *> {
				/*0001*/
			};

			struct GetLogicalType<IPropertyValue *> {
				/*0001*/
			};

			struct GetLogicalType<IWeakReference *> {
				/*0001*/
			};

			struct GetLogicalType<Point> {
				/*0001*/
			};

			struct GetLogicalType<Rect> {
				/*0001*/
			};

			struct GetLogicalType<Size> {
				/*0001*/
			};

			struct GetLogicalType<Storage::Streams::IBuffer *> {
				/*0001*/
			};

			struct GetLogicalType<Storage::Streams::IInputStream *> {
				/*0001*/
			};

			struct GetLogicalType<Storage::Streams::IOutputStream *> {
				/*0001*/
			};

			struct GetLogicalType<Storage::Streams::IRandomAccessStream *> {
				/*0001*/
			};

			struct GetLogicalType<TimeSpan> {
				/*0001*/
			};

			struct GetLogicalType<_GUID> {
				/*0001*/
			};

			struct GetLogicalType<__int64> {
				/*0001*/
			};

			struct GetLogicalType<double> {
				/*0001*/
			};

			struct GetLogicalType<float> {
				/*0001*/
			};

			struct GetLogicalType<int> {
				/*0001*/
			};

			struct GetLogicalType<short> {
				/*0001*/
			};

			struct GetLogicalType<unsigned __int64> {
				/*0001*/
			};

			struct GetLogicalType<unsigned char> {
				/*0001*/
			};

			struct GetLogicalType<unsigned int> {
				/*0001*/
			};

		}

		namespace Collections {

			namespace Detail {

				struct enable_if<0,void *> {
					/*0001*/
				};

				struct enable_if<1,void *> {
					/*0001*/
				};

			}

			enum CollectionChange {
				CollectionChange_Reset = 0x0,
				CollectionChange_ItemInserted = 0x1,
				CollectionChange_ItemRemoved = 0x2,
				CollectionChange_ItemChanged = 0x3
			};

			struct IIterable<HSTRING__ *> : IIterable_impl<HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<HSTRING__ *>( IIterable<HSTRING__ *> && );
				void IIterable<HSTRING__ *>( IIterable<HSTRING__ *> const & );
				void IIterable<HSTRING__ *>();
				IIterable<HSTRING__ *> & operator=( IIterable<HSTRING__ *> && );
				IIterable<HSTRING__ *> & operator=( IIterable<HSTRING__ *> const & );
				/*0008*/
			};

			struct IIterable<IInspectable *> : IIterable_impl<IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<IInspectable *>( IIterable<IInspectable *> && );
				void IIterable<IInspectable *>( IIterable<IInspectable *> const & );
				void IIterable<IInspectable *>();
				IIterable<IInspectable *> & operator=( IIterable<IInspectable *> && );
				IIterable<IInspectable *> & operator=( IIterable<IInspectable *> const & );
				/*0008*/
			};

			struct IIterable<IIterable<Point> *> : IIterable_impl<IIterable<Point> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *>( IIterable<IIterable<Point> *> && );
				void IIterable<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *>( IIterable<IIterable<Point> *> const & );
				void IIterable<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *>();
				IIterable<IIterable<Point> *> & operator=( IIterable<IIterable<Point> *> && );
				IIterable<IIterable<Point> *> & operator=( IIterable<IIterable<Point> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<EventRegistrationToken,int> *> : IIterable_impl<IKeyValuePair<EventRegistrationToken,int> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *>( IIterable<IKeyValuePair<EventRegistrationToken,int> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *>( IIterable<IKeyValuePair<EventRegistrationToken,int> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *>();
				IIterable<IKeyValuePair<EventRegistrationToken,int> *> & operator=( IIterable<IKeyValuePair<EventRegistrationToken,int> *> && );
				IIterable<IKeyValuePair<EventRegistrationToken,int> *> & operator=( IIterable<IKeyValuePair<EventRegistrationToken,int> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *>( IIterable<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *>( IIterable<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *>();
				IIterable<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,IInspectable *> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>( IIterable<IKeyValuePair<HSTRING__ *,IInspectable *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>( IIterable<IKeyValuePair<HSTRING__ *,IInspectable *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>();
				IIterable<IKeyValuePair<HSTRING__ *,IInspectable *> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,IInspectable *> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,IInspectable *> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *>( IIterable<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *>( IIterable<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *>();
				IIterable<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *>( IIterable<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *>( IIterable<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *>();
				IIterable<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,IWeakReference *> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *>( IIterable<IKeyValuePair<HSTRING__ *,IWeakReference *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *>( IIterable<IKeyValuePair<HSTRING__ *,IWeakReference *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *>();
				IIterable<IKeyValuePair<HSTRING__ *,IWeakReference *> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,IWeakReference *> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,IWeakReference *> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,IWeakReference *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,__int64> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,__int64> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *>( IIterable<IKeyValuePair<HSTRING__ *,__int64> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *>( IIterable<IKeyValuePair<HSTRING__ *,__int64> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *>();
				IIterable<IKeyValuePair<HSTRING__ *,__int64> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,__int64> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,__int64> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,__int64> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,double> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,double> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *>( IIterable<IKeyValuePair<HSTRING__ *,double> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *>( IIterable<IKeyValuePair<HSTRING__ *,double> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *>();
				IIterable<IKeyValuePair<HSTRING__ *,double> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,double> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,double> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,double> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,float> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,float> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *>( IIterable<IKeyValuePair<HSTRING__ *,float> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *>( IIterable<IKeyValuePair<HSTRING__ *,float> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *>();
				IIterable<IKeyValuePair<HSTRING__ *,float> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,float> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,float> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,float> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,short> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,short> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *>( IIterable<IKeyValuePair<HSTRING__ *,short> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *>( IIterable<IKeyValuePair<HSTRING__ *,short> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *>();
				IIterable<IKeyValuePair<HSTRING__ *,short> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,short> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,short> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,short> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,unsigned char> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned char> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *>( IIterable<IKeyValuePair<HSTRING__ *,unsigned char> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *>( IIterable<IKeyValuePair<HSTRING__ *,unsigned char> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *>();
				IIterable<IKeyValuePair<HSTRING__ *,unsigned char> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,unsigned char> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,unsigned char> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,unsigned char> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<HSTRING__ *,unsigned int> *> : IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned int> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *>( IIterable<IKeyValuePair<HSTRING__ *,unsigned int> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *>( IIterable<IKeyValuePair<HSTRING__ *,unsigned int> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *>();
				IIterable<IKeyValuePair<HSTRING__ *,unsigned int> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,unsigned int> *> && );
				IIterable<IKeyValuePair<HSTRING__ *,unsigned int> *> & operator=( IIterable<IKeyValuePair<HSTRING__ *,unsigned int> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<IInspectable *,IInspectable *> *> : IIterable_impl<IKeyValuePair<IInspectable *,IInspectable *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>( IIterable<IKeyValuePair<IInspectable *,IInspectable *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>( IIterable<IKeyValuePair<IInspectable *,IInspectable *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>();
				IIterable<IKeyValuePair<IInspectable *,IInspectable *> *> & operator=( IIterable<IKeyValuePair<IInspectable *,IInspectable *> *> && );
				IIterable<IKeyValuePair<IInspectable *,IInspectable *> *> & operator=( IIterable<IKeyValuePair<IInspectable *,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<_GUID,HSTRING__ *> *> : IIterable_impl<IKeyValuePair<_GUID,HSTRING__ *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *>( IIterable<IKeyValuePair<_GUID,HSTRING__ *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *>( IIterable<IKeyValuePair<_GUID,HSTRING__ *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *>();
				IIterable<IKeyValuePair<_GUID,HSTRING__ *> *> & operator=( IIterable<IKeyValuePair<_GUID,HSTRING__ *> *> && );
				IIterable<IKeyValuePair<_GUID,HSTRING__ *> *> & operator=( IIterable<IKeyValuePair<_GUID,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<_GUID,IInspectable *> *> : IIterable_impl<IKeyValuePair<_GUID,IInspectable *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *>( IIterable<IKeyValuePair<_GUID,IInspectable *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *>( IIterable<IKeyValuePair<_GUID,IInspectable *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *>();
				IIterable<IKeyValuePair<_GUID,IInspectable *> *> & operator=( IIterable<IKeyValuePair<_GUID,IInspectable *> *> && );
				IIterable<IKeyValuePair<_GUID,IInspectable *> *> & operator=( IIterable<IKeyValuePair<_GUID,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<_GUID,bool> *> : IIterable_impl<IKeyValuePair<_GUID,bool> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *>( IIterable<IKeyValuePair<_GUID,bool> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *>( IIterable<IKeyValuePair<_GUID,bool> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *>();
				IIterable<IKeyValuePair<_GUID,bool> *> & operator=( IIterable<IKeyValuePair<_GUID,bool> *> && );
				IIterable<IKeyValuePair<_GUID,bool> *> & operator=( IIterable<IKeyValuePair<_GUID,bool> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<__int64,HSTRING__ *> *> : IIterable_impl<IKeyValuePair<__int64,HSTRING__ *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *>( IIterable<IKeyValuePair<__int64,HSTRING__ *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *>( IIterable<IKeyValuePair<__int64,HSTRING__ *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *>();
				IIterable<IKeyValuePair<__int64,HSTRING__ *> *> & operator=( IIterable<IKeyValuePair<__int64,HSTRING__ *> *> && );
				IIterable<IKeyValuePair<__int64,HSTRING__ *> *> & operator=( IIterable<IKeyValuePair<__int64,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<__int64,__int64> *> : IIterable_impl<IKeyValuePair<__int64,__int64> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *>( IIterable<IKeyValuePair<__int64,__int64> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *>( IIterable<IKeyValuePair<__int64,__int64> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *>();
				IIterable<IKeyValuePair<__int64,__int64> *> & operator=( IIterable<IKeyValuePair<__int64,__int64> *> && );
				IIterable<IKeyValuePair<__int64,__int64> *> & operator=( IIterable<IKeyValuePair<__int64,__int64> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<__int64,double> *> : IIterable_impl<IKeyValuePair<__int64,double> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *>( IIterable<IKeyValuePair<__int64,double> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *>( IIterable<IKeyValuePair<__int64,double> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *>();
				IIterable<IKeyValuePair<__int64,double> *> & operator=( IIterable<IKeyValuePair<__int64,double> *> && );
				IIterable<IKeyValuePair<__int64,double> *> & operator=( IIterable<IKeyValuePair<__int64,double> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<__int64,float> *> : IIterable_impl<IKeyValuePair<__int64,float> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *>( IIterable<IKeyValuePair<__int64,float> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *>( IIterable<IKeyValuePair<__int64,float> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *>();
				IIterable<IKeyValuePair<__int64,float> *> & operator=( IIterable<IKeyValuePair<__int64,float> *> && );
				IIterable<IKeyValuePair<__int64,float> *> & operator=( IIterable<IKeyValuePair<__int64,float> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<unsigned int,HSTRING__ *> *> : IIterable_impl<IKeyValuePair<unsigned int,HSTRING__ *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *>( IIterable<IKeyValuePair<unsigned int,HSTRING__ *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *>( IIterable<IKeyValuePair<unsigned int,HSTRING__ *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *>();
				IIterable<IKeyValuePair<unsigned int,HSTRING__ *> *> & operator=( IIterable<IKeyValuePair<unsigned int,HSTRING__ *> *> && );
				IIterable<IKeyValuePair<unsigned int,HSTRING__ *> *> & operator=( IIterable<IKeyValuePair<unsigned int,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<unsigned int,IInspectable *> *> : IIterable_impl<IKeyValuePair<unsigned int,IInspectable *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *>( IIterable<IKeyValuePair<unsigned int,IInspectable *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *>( IIterable<IKeyValuePair<unsigned int,IInspectable *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *>();
				IIterable<IKeyValuePair<unsigned int,IInspectable *> *> & operator=( IIterable<IKeyValuePair<unsigned int,IInspectable *> *> && );
				IIterable<IKeyValuePair<unsigned int,IInspectable *> *> & operator=( IIterable<IKeyValuePair<unsigned int,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterable<IKeyValuePair<unsigned int,IWeakReference *> *> : IIterable_impl<IKeyValuePair<unsigned int,IWeakReference *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *>( IIterable<IKeyValuePair<unsigned int,IWeakReference *> *> && );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *>( IIterable<IKeyValuePair<unsigned int,IWeakReference *> *> const & );
				void IIterable<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *>();
				IIterable<IKeyValuePair<unsigned int,IWeakReference *> *> & operator=( IIterable<IKeyValuePair<unsigned int,IWeakReference *> *> && );
				IIterable<IKeyValuePair<unsigned int,IWeakReference *> *> & operator=( IIterable<IKeyValuePair<unsigned int,IWeakReference *> *> const & );
				/*0008*/
			};

			struct IIterable<IPropertySet *> : IIterable_impl<IPropertySet *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Collections::IPropertySet *>( IIterable<IPropertySet *> && );
				void IIterable<Windows::Foundation::Collections::IPropertySet *>( IIterable<IPropertySet *> const & );
				void IIterable<Windows::Foundation::Collections::IPropertySet *>();
				IIterable<IPropertySet *> & operator=( IIterable<IPropertySet *> && );
				IIterable<IPropertySet *> & operator=( IIterable<IPropertySet *> const & );
				/*0008*/
			};

			struct IIterable<Point> : IIterable_impl<Point> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Point>( IIterable<Point> && );
				void IIterable<Windows::Foundation::Point>( IIterable<Point> const & );
				void IIterable<Windows::Foundation::Point>();
				IIterable<Point> & operator=( IIterable<Point> && );
				IIterable<Point> & operator=( IIterable<Point> const & );
				/*0008*/
			};

			struct IIterable<Rect> : IIterable_impl<Rect> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Foundation::Rect>( IIterable<Rect> && );
				void IIterable<Windows::Foundation::Rect>( IIterable<Rect> const & );
				void IIterable<Windows::Foundation::Rect>();
				IIterable<Rect> & operator=( IIterable<Rect> && );
				IIterable<Rect> & operator=( IIterable<Rect> const & );
				/*0008*/
			};

			struct IIterable<Storage::Streams::IBuffer *> : IIterable_impl<Storage::Streams::IBuffer *> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<Windows::Storage::Streams::IBuffer *>( IIterable<Storage::Streams::IBuffer *> && );
				void IIterable<Windows::Storage::Streams::IBuffer *>( IIterable<Storage::Streams::IBuffer *> const & );
				void IIterable<Windows::Storage::Streams::IBuffer *>();
				IIterable<Storage::Streams::IBuffer *> & operator=( IIterable<Storage::Streams::IBuffer *> && );
				IIterable<Storage::Streams::IBuffer *> & operator=( IIterable<Storage::Streams::IBuffer *> const & );
				/*0008*/
			};

			struct IIterable<_GUID> : IIterable_impl<_GUID> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<_GUID>( IIterable<_GUID> && );
				void IIterable<_GUID>( IIterable<_GUID> const & );
				void IIterable<_GUID>();
				IIterable<_GUID> & operator=( IIterable<_GUID> && );
				IIterable<_GUID> & operator=( IIterable<_GUID> const & );
				/*0008*/
			};

			struct IIterable<__int64> : IIterable_impl<__int64> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<__int64>( IIterable<__int64> && );
				void IIterable<__int64>( IIterable<__int64> const & );
				void IIterable<__int64>();
				IIterable<__int64> & operator=( IIterable<__int64> && );
				IIterable<__int64> & operator=( IIterable<__int64> const & );
				/*0008*/
			};

			struct IIterable<bool> : IIterable_impl<Internal::AggregateType<bool,unsigned char> > {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<bool>( IIterable<bool> && );
				void IIterable<bool>( IIterable<bool> const & );
				void IIterable<bool>();
				IIterable<bool> & operator=( IIterable<bool> && );
				IIterable<bool> & operator=( IIterable<bool> const & );
				/*0008*/
			};

			struct IIterable<double> : IIterable_impl<double> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<double>( IIterable<double> && );
				void IIterable<double>( IIterable<double> const & );
				void IIterable<double>();
				IIterable<double> & operator=( IIterable<double> && );
				IIterable<double> & operator=( IIterable<double> const & );
				/*0008*/
			};

			struct IIterable<float> : IIterable_impl<float> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<float>( IIterable<float> && );
				void IIterable<float>( IIterable<float> const & );
				void IIterable<float>();
				IIterable<float> & operator=( IIterable<float> && );
				IIterable<float> & operator=( IIterable<float> const & );
				/*0008*/
			};

			struct IIterable<int> : IIterable_impl<int> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<int>( IIterable<int> && );
				void IIterable<int>( IIterable<int> const & );
				void IIterable<int>();
				IIterable<int> & operator=( IIterable<int> && );
				IIterable<int> & operator=( IIterable<int> const & );
				/*0008*/
			};

			struct IIterable<short> : IIterable_impl<short> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<short>( IIterable<short> && );
				void IIterable<short>( IIterable<short> const & );
				void IIterable<short>();
				IIterable<short> & operator=( IIterable<short> && );
				IIterable<short> & operator=( IIterable<short> const & );
				/*0008*/
			};

			struct IIterable<unsigned __int64> : IIterable_impl<unsigned __int64> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<unsigned __int64>( IIterable<unsigned __int64> && );
				void IIterable<unsigned __int64>( IIterable<unsigned __int64> const & );
				void IIterable<unsigned __int64>();
				IIterable<unsigned __int64> & operator=( IIterable<unsigned __int64> && );
				IIterable<unsigned __int64> & operator=( IIterable<unsigned __int64> const & );
				/*0008*/
			};

			struct IIterable<unsigned char> : IIterable_impl<unsigned char> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<unsigned char>( IIterable<unsigned char> && );
				void IIterable<unsigned char>( IIterable<unsigned char> const & );
				void IIterable<unsigned char>();
				IIterable<unsigned char> & operator=( IIterable<unsigned char> && );
				IIterable<unsigned char> & operator=( IIterable<unsigned char> const & );
				/*0008*/
			};

			struct IIterable<unsigned int> : IIterable_impl<unsigned int> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterable<unsigned int>( IIterable<unsigned int> && );
				void IIterable<unsigned int>( IIterable<unsigned int> const & );
				void IIterable<unsigned int>();
				IIterable<unsigned int> & operator=( IIterable<unsigned int> && );
				IIterable<unsigned int> & operator=( IIterable<unsigned int> const & );
				/*0008*/
			};

			struct IIterable_impl<HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<HSTRING__ *> * * ) = 0;
				void IIterable_impl<HSTRING__ *>( IIterable_impl<HSTRING__ *> && );
				void IIterable_impl<HSTRING__ *>( IIterable_impl<HSTRING__ *> const & );
				void IIterable_impl<HSTRING__ *>();
				IIterable_impl<HSTRING__ *> & operator=( IIterable_impl<HSTRING__ *> && );
				IIterable_impl<HSTRING__ *> & operator=( IIterable_impl<HSTRING__ *> const & );
				/*0008*/
			};

			struct IIterable_impl<IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IInspectable *> * * ) = 0;
				void IIterable_impl<IInspectable *>( IIterable_impl<IInspectable *> && );
				void IIterable_impl<IInspectable *>( IIterable_impl<IInspectable *> const & );
				void IIterable_impl<IInspectable *>();
				IIterable_impl<IInspectable *> & operator=( IIterable_impl<IInspectable *> && );
				IIterable_impl<IInspectable *> & operator=( IIterable_impl<IInspectable *> const & );
				/*0008*/
			};

			struct IIterable_impl<IIterable<Point> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IIterable<Point> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *>( IIterable_impl<IIterable<Point> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *>( IIterable_impl<IIterable<Point> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *>();
				IIterable_impl<IIterable<Point> *> & operator=( IIterable_impl<IIterable<Point> *> && );
				IIterable_impl<IIterable<Point> *> & operator=( IIterable_impl<IIterable<Point> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<EventRegistrationToken,int> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<EventRegistrationToken,int> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *>( IIterable_impl<IKeyValuePair<EventRegistrationToken,int> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *>( IIterable_impl<IKeyValuePair<EventRegistrationToken,int> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *>();
				IIterable_impl<IKeyValuePair<EventRegistrationToken,int> *> & operator=( IIterable_impl<IKeyValuePair<EventRegistrationToken,int> *> && );
				IIterable_impl<IKeyValuePair<EventRegistrationToken,int> *> & operator=( IIterable_impl<IKeyValuePair<EventRegistrationToken,int> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,IWeakReference *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,__int64> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,__int64> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,__int64> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,__int64> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,__int64> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,__int64> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,__int64> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,__int64> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,double> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,double> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,double> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,double> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,double> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,double> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,double> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,double> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,float> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,float> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,float> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,float> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,float> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,float> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,float> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,float> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,short> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,short> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,short> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,short> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,short> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,short> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,short> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,short> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned char> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,unsigned char> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned char> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned char> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned char> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned char> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned char> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned char> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned int> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<HSTRING__ *,unsigned int> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned int> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *>( IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned int> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *>();
				IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned int> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned int> *> && );
				IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned int> *> & operator=( IIterable_impl<IKeyValuePair<HSTRING__ *,unsigned int> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<IInspectable *,IInspectable *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<IInspectable *,IInspectable *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>( IIterable_impl<IKeyValuePair<IInspectable *,IInspectable *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>( IIterable_impl<IKeyValuePair<IInspectable *,IInspectable *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>();
				IIterable_impl<IKeyValuePair<IInspectable *,IInspectable *> *> & operator=( IIterable_impl<IKeyValuePair<IInspectable *,IInspectable *> *> && );
				IIterable_impl<IKeyValuePair<IInspectable *,IInspectable *> *> & operator=( IIterable_impl<IKeyValuePair<IInspectable *,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<_GUID,HSTRING__ *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<_GUID,HSTRING__ *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *>( IIterable_impl<IKeyValuePair<_GUID,HSTRING__ *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *>( IIterable_impl<IKeyValuePair<_GUID,HSTRING__ *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *>();
				IIterable_impl<IKeyValuePair<_GUID,HSTRING__ *> *> & operator=( IIterable_impl<IKeyValuePair<_GUID,HSTRING__ *> *> && );
				IIterable_impl<IKeyValuePair<_GUID,HSTRING__ *> *> & operator=( IIterable_impl<IKeyValuePair<_GUID,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<_GUID,IInspectable *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<_GUID,IInspectable *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *>( IIterable_impl<IKeyValuePair<_GUID,IInspectable *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *>( IIterable_impl<IKeyValuePair<_GUID,IInspectable *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *>();
				IIterable_impl<IKeyValuePair<_GUID,IInspectable *> *> & operator=( IIterable_impl<IKeyValuePair<_GUID,IInspectable *> *> && );
				IIterable_impl<IKeyValuePair<_GUID,IInspectable *> *> & operator=( IIterable_impl<IKeyValuePair<_GUID,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<_GUID,bool> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<_GUID,bool> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *>( IIterable_impl<IKeyValuePair<_GUID,bool> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *>( IIterable_impl<IKeyValuePair<_GUID,bool> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *>();
				IIterable_impl<IKeyValuePair<_GUID,bool> *> & operator=( IIterable_impl<IKeyValuePair<_GUID,bool> *> && );
				IIterable_impl<IKeyValuePair<_GUID,bool> *> & operator=( IIterable_impl<IKeyValuePair<_GUID,bool> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<__int64,HSTRING__ *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<__int64,HSTRING__ *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *>( IIterable_impl<IKeyValuePair<__int64,HSTRING__ *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *>( IIterable_impl<IKeyValuePair<__int64,HSTRING__ *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *>();
				IIterable_impl<IKeyValuePair<__int64,HSTRING__ *> *> & operator=( IIterable_impl<IKeyValuePair<__int64,HSTRING__ *> *> && );
				IIterable_impl<IKeyValuePair<__int64,HSTRING__ *> *> & operator=( IIterable_impl<IKeyValuePair<__int64,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<__int64,__int64> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<__int64,__int64> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *>( IIterable_impl<IKeyValuePair<__int64,__int64> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *>( IIterable_impl<IKeyValuePair<__int64,__int64> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *>();
				IIterable_impl<IKeyValuePair<__int64,__int64> *> & operator=( IIterable_impl<IKeyValuePair<__int64,__int64> *> && );
				IIterable_impl<IKeyValuePair<__int64,__int64> *> & operator=( IIterable_impl<IKeyValuePair<__int64,__int64> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<__int64,double> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<__int64,double> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *>( IIterable_impl<IKeyValuePair<__int64,double> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *>( IIterable_impl<IKeyValuePair<__int64,double> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *>();
				IIterable_impl<IKeyValuePair<__int64,double> *> & operator=( IIterable_impl<IKeyValuePair<__int64,double> *> && );
				IIterable_impl<IKeyValuePair<__int64,double> *> & operator=( IIterable_impl<IKeyValuePair<__int64,double> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<__int64,float> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<__int64,float> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *>( IIterable_impl<IKeyValuePair<__int64,float> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *>( IIterable_impl<IKeyValuePair<__int64,float> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *>();
				IIterable_impl<IKeyValuePair<__int64,float> *> & operator=( IIterable_impl<IKeyValuePair<__int64,float> *> && );
				IIterable_impl<IKeyValuePair<__int64,float> *> & operator=( IIterable_impl<IKeyValuePair<__int64,float> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<unsigned int,HSTRING__ *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<unsigned int,HSTRING__ *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *>( IIterable_impl<IKeyValuePair<unsigned int,HSTRING__ *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *>( IIterable_impl<IKeyValuePair<unsigned int,HSTRING__ *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *>();
				IIterable_impl<IKeyValuePair<unsigned int,HSTRING__ *> *> & operator=( IIterable_impl<IKeyValuePair<unsigned int,HSTRING__ *> *> && );
				IIterable_impl<IKeyValuePair<unsigned int,HSTRING__ *> *> & operator=( IIterable_impl<IKeyValuePair<unsigned int,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<unsigned int,IInspectable *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<unsigned int,IInspectable *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *>( IIterable_impl<IKeyValuePair<unsigned int,IInspectable *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *>( IIterable_impl<IKeyValuePair<unsigned int,IInspectable *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *>();
				IIterable_impl<IKeyValuePair<unsigned int,IInspectable *> *> & operator=( IIterable_impl<IKeyValuePair<unsigned int,IInspectable *> *> && );
				IIterable_impl<IKeyValuePair<unsigned int,IInspectable *> *> & operator=( IIterable_impl<IKeyValuePair<unsigned int,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IKeyValuePair<unsigned int,IWeakReference *> *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IKeyValuePair<unsigned int,IWeakReference *> *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *>( IIterable_impl<IKeyValuePair<unsigned int,IWeakReference *> *> && );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *>( IIterable_impl<IKeyValuePair<unsigned int,IWeakReference *> *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *>();
				IIterable_impl<IKeyValuePair<unsigned int,IWeakReference *> *> & operator=( IIterable_impl<IKeyValuePair<unsigned int,IWeakReference *> *> && );
				IIterable_impl<IKeyValuePair<unsigned int,IWeakReference *> *> & operator=( IIterable_impl<IKeyValuePair<unsigned int,IWeakReference *> *> const & );
				/*0008*/
			};

			struct IIterable_impl<IPropertySet *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<IPropertySet *> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Collections::IPropertySet *>( IIterable_impl<IPropertySet *> && );
				void IIterable_impl<Windows::Foundation::Collections::IPropertySet *>( IIterable_impl<IPropertySet *> const & );
				void IIterable_impl<Windows::Foundation::Collections::IPropertySet *>();
				IIterable_impl<IPropertySet *> & operator=( IIterable_impl<IPropertySet *> && );
				IIterable_impl<IPropertySet *> & operator=( IIterable_impl<IPropertySet *> const & );
				/*0008*/
			};

			struct IIterable_impl<Internal::AggregateType<bool,unsigned char> > : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<bool> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IIterable_impl<Internal::AggregateType<bool,unsigned char> > && );
				void IIterable_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IIterable_impl<Internal::AggregateType<bool,unsigned char> > const & );
				void IIterable_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >();
				IIterable_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IIterable_impl<Internal::AggregateType<bool,unsigned char> > && );
				IIterable_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IIterable_impl<Internal::AggregateType<bool,unsigned char> > const & );
				/*0008*/
			};

			struct IIterable_impl<Point> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<Point> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Point>( IIterable_impl<Point> && );
				void IIterable_impl<Windows::Foundation::Point>( IIterable_impl<Point> const & );
				void IIterable_impl<Windows::Foundation::Point>();
				IIterable_impl<Point> & operator=( IIterable_impl<Point> && );
				IIterable_impl<Point> & operator=( IIterable_impl<Point> const & );
				/*0008*/
			};

			struct IIterable_impl<Rect> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<Rect> * * ) = 0;
				void IIterable_impl<Windows::Foundation::Rect>( IIterable_impl<Rect> && );
				void IIterable_impl<Windows::Foundation::Rect>( IIterable_impl<Rect> const & );
				void IIterable_impl<Windows::Foundation::Rect>();
				IIterable_impl<Rect> & operator=( IIterable_impl<Rect> && );
				IIterable_impl<Rect> & operator=( IIterable_impl<Rect> const & );
				/*0008*/
			};

			struct IIterable_impl<Storage::Streams::IBuffer *> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<Storage::Streams::IBuffer *> * * ) = 0;
				void IIterable_impl<Windows::Storage::Streams::IBuffer *>( IIterable_impl<Storage::Streams::IBuffer *> && );
				void IIterable_impl<Windows::Storage::Streams::IBuffer *>( IIterable_impl<Storage::Streams::IBuffer *> const & );
				void IIterable_impl<Windows::Storage::Streams::IBuffer *>();
				IIterable_impl<Storage::Streams::IBuffer *> & operator=( IIterable_impl<Storage::Streams::IBuffer *> && );
				IIterable_impl<Storage::Streams::IBuffer *> & operator=( IIterable_impl<Storage::Streams::IBuffer *> const & );
				/*0008*/
			};

			struct IIterable_impl<_GUID> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<_GUID> * * ) = 0;
				void IIterable_impl<_GUID>( IIterable_impl<_GUID> && );
				void IIterable_impl<_GUID>( IIterable_impl<_GUID> const & );
				void IIterable_impl<_GUID>();
				IIterable_impl<_GUID> & operator=( IIterable_impl<_GUID> && );
				IIterable_impl<_GUID> & operator=( IIterable_impl<_GUID> const & );
				/*0008*/
			};

			struct IIterable_impl<__int64> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<__int64> * * ) = 0;
				void IIterable_impl<__int64>( IIterable_impl<__int64> && );
				void IIterable_impl<__int64>( IIterable_impl<__int64> const & );
				void IIterable_impl<__int64>();
				IIterable_impl<__int64> & operator=( IIterable_impl<__int64> && );
				IIterable_impl<__int64> & operator=( IIterable_impl<__int64> const & );
				/*0008*/
			};

			struct IIterable_impl<double> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<double> * * ) = 0;
				void IIterable_impl<double>( IIterable_impl<double> && );
				void IIterable_impl<double>( IIterable_impl<double> const & );
				void IIterable_impl<double>();
				IIterable_impl<double> & operator=( IIterable_impl<double> && );
				IIterable_impl<double> & operator=( IIterable_impl<double> const & );
				/*0008*/
			};

			struct IIterable_impl<float> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<float> * * ) = 0;
				void IIterable_impl<float>( IIterable_impl<float> && );
				void IIterable_impl<float>( IIterable_impl<float> const & );
				void IIterable_impl<float>();
				IIterable_impl<float> & operator=( IIterable_impl<float> && );
				IIterable_impl<float> & operator=( IIterable_impl<float> const & );
				/*0008*/
			};

			struct IIterable_impl<int> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<int> * * ) = 0;
				void IIterable_impl<int>( IIterable_impl<int> && );
				void IIterable_impl<int>( IIterable_impl<int> const & );
				void IIterable_impl<int>();
				IIterable_impl<int> & operator=( IIterable_impl<int> && );
				IIterable_impl<int> & operator=( IIterable_impl<int> const & );
				/*0008*/
			};

			struct IIterable_impl<short> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<short> * * ) = 0;
				void IIterable_impl<short>( IIterable_impl<short> && );
				void IIterable_impl<short>( IIterable_impl<short> const & );
				void IIterable_impl<short>();
				IIterable_impl<short> & operator=( IIterable_impl<short> && );
				IIterable_impl<short> & operator=( IIterable_impl<short> const & );
				/*0008*/
			};

			struct IIterable_impl<unsigned __int64> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<unsigned __int64> * * ) = 0;
				void IIterable_impl<unsigned __int64>( IIterable_impl<unsigned __int64> && );
				void IIterable_impl<unsigned __int64>( IIterable_impl<unsigned __int64> const & );
				void IIterable_impl<unsigned __int64>();
				IIterable_impl<unsigned __int64> & operator=( IIterable_impl<unsigned __int64> && );
				IIterable_impl<unsigned __int64> & operator=( IIterable_impl<unsigned __int64> const & );
				/*0008*/
			};

			struct IIterable_impl<unsigned char> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<unsigned char> * * ) = 0;
				void IIterable_impl<unsigned char>( IIterable_impl<unsigned char> && );
				void IIterable_impl<unsigned char>( IIterable_impl<unsigned char> const & );
				void IIterable_impl<unsigned char>();
				IIterable_impl<unsigned char> & operator=( IIterable_impl<unsigned char> && );
				IIterable_impl<unsigned char> & operator=( IIterable_impl<unsigned char> const & );
				/*0008*/
			};

			struct IIterable_impl<unsigned int> : IInspectable {
				/*0030*/ virtual HRESULT First( IIterator<unsigned int> * * ) = 0;
				void IIterable_impl<unsigned int>( IIterable_impl<unsigned int> && );
				void IIterable_impl<unsigned int>( IIterable_impl<unsigned int> const & );
				void IIterable_impl<unsigned int>();
				IIterable_impl<unsigned int> & operator=( IIterable_impl<unsigned int> && );
				IIterable_impl<unsigned int> & operator=( IIterable_impl<unsigned int> const & );
				/*0008*/
			};

			struct IIterator<HSTRING__ *> : IIterator_impl<HSTRING__ *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<HSTRING__ *>( IIterator<HSTRING__ *> && );
				void IIterator<HSTRING__ *>( IIterator<HSTRING__ *> const & );
				void IIterator<HSTRING__ *>();
				IIterator<HSTRING__ *> & operator=( IIterator<HSTRING__ *> && );
				IIterator<HSTRING__ *> & operator=( IIterator<HSTRING__ *> const & );
				/*0008*/
			};

			struct IIterator<IInspectable *> : IIterator_impl<IInspectable *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<IInspectable *>( IIterator<IInspectable *> && );
				void IIterator<IInspectable *>( IIterator<IInspectable *> const & );
				void IIterator<IInspectable *>();
				IIterator<IInspectable *> & operator=( IIterator<IInspectable *> && );
				IIterator<IInspectable *> & operator=( IIterator<IInspectable *> const & );
				/*0008*/
			};

			struct IIterator<IIterable<Point> *> : IIterator_impl<IIterable<Point> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *>( IIterator<IIterable<Point> *> && );
				void IIterator<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *>( IIterator<IIterable<Point> *> const & );
				void IIterator<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *>();
				IIterator<IIterable<Point> *> & operator=( IIterator<IIterable<Point> *> && );
				IIterator<IIterable<Point> *> & operator=( IIterator<IIterable<Point> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<EventRegistrationToken,int> *> : IIterator_impl<IKeyValuePair<EventRegistrationToken,int> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *>( IIterator<IKeyValuePair<EventRegistrationToken,int> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *>( IIterator<IKeyValuePair<EventRegistrationToken,int> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *>();
				IIterator<IKeyValuePair<EventRegistrationToken,int> *> & operator=( IIterator<IKeyValuePair<EventRegistrationToken,int> *> && );
				IIterator<IKeyValuePair<EventRegistrationToken,int> *> & operator=( IIterator<IKeyValuePair<EventRegistrationToken,int> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *>( IIterator<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *>( IIterator<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *>();
				IIterator<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>( IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>( IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>();
				IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *>( IIterator<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *>( IIterator<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *>();
				IIterator<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *>( IIterator<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *>( IIterator<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *>();
				IIterator<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,IWeakReference *> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *>( IIterator<IKeyValuePair<HSTRING__ *,IWeakReference *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *>( IIterator<IKeyValuePair<HSTRING__ *,IWeakReference *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *>();
				IIterator<IKeyValuePair<HSTRING__ *,IWeakReference *> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,IWeakReference *> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,IWeakReference *> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,IWeakReference *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,__int64> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,__int64> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *>( IIterator<IKeyValuePair<HSTRING__ *,__int64> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *>( IIterator<IKeyValuePair<HSTRING__ *,__int64> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *>();
				IIterator<IKeyValuePair<HSTRING__ *,__int64> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,__int64> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,__int64> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,__int64> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,double> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,double> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *>( IIterator<IKeyValuePair<HSTRING__ *,double> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *>( IIterator<IKeyValuePair<HSTRING__ *,double> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *>();
				IIterator<IKeyValuePair<HSTRING__ *,double> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,double> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,double> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,double> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,float> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,float> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *>( IIterator<IKeyValuePair<HSTRING__ *,float> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *>( IIterator<IKeyValuePair<HSTRING__ *,float> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *>();
				IIterator<IKeyValuePair<HSTRING__ *,float> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,float> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,float> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,float> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,short> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,short> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *>( IIterator<IKeyValuePair<HSTRING__ *,short> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *>( IIterator<IKeyValuePair<HSTRING__ *,short> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *>();
				IIterator<IKeyValuePair<HSTRING__ *,short> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,short> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,short> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,short> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,unsigned char> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned char> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *>( IIterator<IKeyValuePair<HSTRING__ *,unsigned char> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *>( IIterator<IKeyValuePair<HSTRING__ *,unsigned char> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *>();
				IIterator<IKeyValuePair<HSTRING__ *,unsigned char> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,unsigned char> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,unsigned char> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,unsigned char> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<HSTRING__ *,unsigned int> *> : IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned int> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *>( IIterator<IKeyValuePair<HSTRING__ *,unsigned int> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *>( IIterator<IKeyValuePair<HSTRING__ *,unsigned int> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *>();
				IIterator<IKeyValuePair<HSTRING__ *,unsigned int> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,unsigned int> *> && );
				IIterator<IKeyValuePair<HSTRING__ *,unsigned int> *> & operator=( IIterator<IKeyValuePair<HSTRING__ *,unsigned int> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<IInspectable *,IInspectable *> *> : IIterator_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>( IIterator<IKeyValuePair<IInspectable *,IInspectable *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>( IIterator<IKeyValuePair<IInspectable *,IInspectable *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>();
				IIterator<IKeyValuePair<IInspectable *,IInspectable *> *> & operator=( IIterator<IKeyValuePair<IInspectable *,IInspectable *> *> && );
				IIterator<IKeyValuePair<IInspectable *,IInspectable *> *> & operator=( IIterator<IKeyValuePair<IInspectable *,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<_GUID,HSTRING__ *> *> : IIterator_impl<IKeyValuePair<_GUID,HSTRING__ *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *>( IIterator<IKeyValuePair<_GUID,HSTRING__ *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *>( IIterator<IKeyValuePair<_GUID,HSTRING__ *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *>();
				IIterator<IKeyValuePair<_GUID,HSTRING__ *> *> & operator=( IIterator<IKeyValuePair<_GUID,HSTRING__ *> *> && );
				IIterator<IKeyValuePair<_GUID,HSTRING__ *> *> & operator=( IIterator<IKeyValuePair<_GUID,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<_GUID,IInspectable *> *> : IIterator_impl<IKeyValuePair<_GUID,IInspectable *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *>( IIterator<IKeyValuePair<_GUID,IInspectable *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *>( IIterator<IKeyValuePair<_GUID,IInspectable *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *>();
				IIterator<IKeyValuePair<_GUID,IInspectable *> *> & operator=( IIterator<IKeyValuePair<_GUID,IInspectable *> *> && );
				IIterator<IKeyValuePair<_GUID,IInspectable *> *> & operator=( IIterator<IKeyValuePair<_GUID,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<_GUID,bool> *> : IIterator_impl<IKeyValuePair<_GUID,bool> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *>( IIterator<IKeyValuePair<_GUID,bool> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *>( IIterator<IKeyValuePair<_GUID,bool> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *>();
				IIterator<IKeyValuePair<_GUID,bool> *> & operator=( IIterator<IKeyValuePair<_GUID,bool> *> && );
				IIterator<IKeyValuePair<_GUID,bool> *> & operator=( IIterator<IKeyValuePair<_GUID,bool> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<__int64,HSTRING__ *> *> : IIterator_impl<IKeyValuePair<__int64,HSTRING__ *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *>( IIterator<IKeyValuePair<__int64,HSTRING__ *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *>( IIterator<IKeyValuePair<__int64,HSTRING__ *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *>();
				IIterator<IKeyValuePair<__int64,HSTRING__ *> *> & operator=( IIterator<IKeyValuePair<__int64,HSTRING__ *> *> && );
				IIterator<IKeyValuePair<__int64,HSTRING__ *> *> & operator=( IIterator<IKeyValuePair<__int64,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<__int64,__int64> *> : IIterator_impl<IKeyValuePair<__int64,__int64> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *>( IIterator<IKeyValuePair<__int64,__int64> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *>( IIterator<IKeyValuePair<__int64,__int64> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *>();
				IIterator<IKeyValuePair<__int64,__int64> *> & operator=( IIterator<IKeyValuePair<__int64,__int64> *> && );
				IIterator<IKeyValuePair<__int64,__int64> *> & operator=( IIterator<IKeyValuePair<__int64,__int64> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<__int64,double> *> : IIterator_impl<IKeyValuePair<__int64,double> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *>( IIterator<IKeyValuePair<__int64,double> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *>( IIterator<IKeyValuePair<__int64,double> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *>();
				IIterator<IKeyValuePair<__int64,double> *> & operator=( IIterator<IKeyValuePair<__int64,double> *> && );
				IIterator<IKeyValuePair<__int64,double> *> & operator=( IIterator<IKeyValuePair<__int64,double> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<__int64,float> *> : IIterator_impl<IKeyValuePair<__int64,float> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *>( IIterator<IKeyValuePair<__int64,float> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *>( IIterator<IKeyValuePair<__int64,float> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *>();
				IIterator<IKeyValuePair<__int64,float> *> & operator=( IIterator<IKeyValuePair<__int64,float> *> && );
				IIterator<IKeyValuePair<__int64,float> *> & operator=( IIterator<IKeyValuePair<__int64,float> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<unsigned int,HSTRING__ *> *> : IIterator_impl<IKeyValuePair<unsigned int,HSTRING__ *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *>( IIterator<IKeyValuePair<unsigned int,HSTRING__ *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *>( IIterator<IKeyValuePair<unsigned int,HSTRING__ *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *>();
				IIterator<IKeyValuePair<unsigned int,HSTRING__ *> *> & operator=( IIterator<IKeyValuePair<unsigned int,HSTRING__ *> *> && );
				IIterator<IKeyValuePair<unsigned int,HSTRING__ *> *> & operator=( IIterator<IKeyValuePair<unsigned int,HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<unsigned int,IInspectable *> *> : IIterator_impl<IKeyValuePair<unsigned int,IInspectable *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *>( IIterator<IKeyValuePair<unsigned int,IInspectable *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *>( IIterator<IKeyValuePair<unsigned int,IInspectable *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *>();
				IIterator<IKeyValuePair<unsigned int,IInspectable *> *> & operator=( IIterator<IKeyValuePair<unsigned int,IInspectable *> *> && );
				IIterator<IKeyValuePair<unsigned int,IInspectable *> *> & operator=( IIterator<IKeyValuePair<unsigned int,IInspectable *> *> const & );
				/*0008*/
			};

			struct IIterator<IKeyValuePair<unsigned int,IWeakReference *> *> : IIterator_impl<IKeyValuePair<unsigned int,IWeakReference *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *>( IIterator<IKeyValuePair<unsigned int,IWeakReference *> *> && );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *>( IIterator<IKeyValuePair<unsigned int,IWeakReference *> *> const & );
				void IIterator<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *>();
				IIterator<IKeyValuePair<unsigned int,IWeakReference *> *> & operator=( IIterator<IKeyValuePair<unsigned int,IWeakReference *> *> && );
				IIterator<IKeyValuePair<unsigned int,IWeakReference *> *> & operator=( IIterator<IKeyValuePair<unsigned int,IWeakReference *> *> const & );
				/*0008*/
			};

			struct IIterator<IPropertySet *> : IIterator_impl<IPropertySet *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Collections::IPropertySet *>( IIterator<IPropertySet *> && );
				void IIterator<Windows::Foundation::Collections::IPropertySet *>( IIterator<IPropertySet *> const & );
				void IIterator<Windows::Foundation::Collections::IPropertySet *>();
				IIterator<IPropertySet *> & operator=( IIterator<IPropertySet *> && );
				IIterator<IPropertySet *> & operator=( IIterator<IPropertySet *> const & );
				/*0008*/
			};

			struct IIterator<Point> : IIterator_impl<Point,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Point>( IIterator<Point> && );
				void IIterator<Windows::Foundation::Point>( IIterator<Point> const & );
				void IIterator<Windows::Foundation::Point>();
				IIterator<Point> & operator=( IIterator<Point> && );
				IIterator<Point> & operator=( IIterator<Point> const & );
				/*0008*/
			};

			struct IIterator<Rect> : IIterator_impl<Rect,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Foundation::Rect>( IIterator<Rect> && );
				void IIterator<Windows::Foundation::Rect>( IIterator<Rect> const & );
				void IIterator<Windows::Foundation::Rect>();
				IIterator<Rect> & operator=( IIterator<Rect> && );
				IIterator<Rect> & operator=( IIterator<Rect> const & );
				/*0008*/
			};

			struct IIterator<Storage::Streams::IBuffer *> : IIterator_impl<Storage::Streams::IBuffer *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<Windows::Storage::Streams::IBuffer *>( IIterator<Storage::Streams::IBuffer *> && );
				void IIterator<Windows::Storage::Streams::IBuffer *>( IIterator<Storage::Streams::IBuffer *> const & );
				void IIterator<Windows::Storage::Streams::IBuffer *>();
				IIterator<Storage::Streams::IBuffer *> & operator=( IIterator<Storage::Streams::IBuffer *> && );
				IIterator<Storage::Streams::IBuffer *> & operator=( IIterator<Storage::Streams::IBuffer *> const & );
				/*0008*/
			};

			struct IIterator<_GUID> : IIterator_impl<_GUID,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<_GUID>( IIterator<_GUID> && );
				void IIterator<_GUID>( IIterator<_GUID> const & );
				void IIterator<_GUID>();
				IIterator<_GUID> & operator=( IIterator<_GUID> && );
				IIterator<_GUID> & operator=( IIterator<_GUID> const & );
				/*0008*/
			};

			struct IIterator<__int64> : IIterator_impl<__int64,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<__int64>( IIterator<__int64> && );
				void IIterator<__int64>( IIterator<__int64> const & );
				void IIterator<__int64>();
				IIterator<__int64> & operator=( IIterator<__int64> && );
				IIterator<__int64> & operator=( IIterator<__int64> const & );
				/*0008*/
			};

			struct IIterator<bool> : IIterator_impl<Internal::AggregateType<bool,unsigned char>,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<bool>( IIterator<bool> && );
				void IIterator<bool>( IIterator<bool> const & );
				void IIterator<bool>();
				IIterator<bool> & operator=( IIterator<bool> && );
				IIterator<bool> & operator=( IIterator<bool> const & );
				/*0008*/
			};

			struct IIterator<double> : IIterator_impl<double,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<double>( IIterator<double> && );
				void IIterator<double>( IIterator<double> const & );
				void IIterator<double>();
				IIterator<double> & operator=( IIterator<double> && );
				IIterator<double> & operator=( IIterator<double> const & );
				/*0008*/
			};

			struct IIterator<float> : IIterator_impl<float,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<float>( IIterator<float> && );
				void IIterator<float>( IIterator<float> const & );
				void IIterator<float>();
				IIterator<float> & operator=( IIterator<float> && );
				IIterator<float> & operator=( IIterator<float> const & );
				/*0008*/
			};

			struct IIterator<int> : IIterator_impl<int,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<int>( IIterator<int> && );
				void IIterator<int>( IIterator<int> const & );
				void IIterator<int>();
				IIterator<int> & operator=( IIterator<int> && );
				IIterator<int> & operator=( IIterator<int> const & );
				/*0008*/
			};

			struct IIterator<short> : IIterator_impl<short,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<short>( IIterator<short> && );
				void IIterator<short>( IIterator<short> const & );
				void IIterator<short>();
				IIterator<short> & operator=( IIterator<short> && );
				IIterator<short> & operator=( IIterator<short> const & );
				/*0008*/
			};

			struct IIterator<unsigned __int64> : IIterator_impl<unsigned __int64,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<unsigned __int64>( IIterator<unsigned __int64> && );
				void IIterator<unsigned __int64>( IIterator<unsigned __int64> const & );
				void IIterator<unsigned __int64>();
				IIterator<unsigned __int64> & operator=( IIterator<unsigned __int64> && );
				IIterator<unsigned __int64> & operator=( IIterator<unsigned __int64> const & );
				/*0008*/
			};

			struct IIterator<unsigned char> : IIterator_impl<unsigned char,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<unsigned char>( IIterator<unsigned char> && );
				void IIterator<unsigned char>( IIterator<unsigned char> const & );
				void IIterator<unsigned char>();
				IIterator<unsigned char> & operator=( IIterator<unsigned char> && );
				IIterator<unsigned char> & operator=( IIterator<unsigned char> const & );
				/*0008*/
			};

			struct IIterator<unsigned int> : IIterator_impl<unsigned int,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IIterator<unsigned int>( IIterator<unsigned int> && );
				void IIterator<unsigned int>( IIterator<unsigned int> const & );
				void IIterator<unsigned int>();
				IIterator<unsigned int> & operator=( IIterator<unsigned int> && );
				IIterator<unsigned int> & operator=( IIterator<unsigned int> const & );
				/*0008*/
			};

			struct IIterator_impl<HSTRING__ *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , HSTRING__ * * , UINT * );
				void IIterator_impl<HSTRING__ *,1>( IIterator_impl<HSTRING__ *,1> && );
				void IIterator_impl<HSTRING__ *,1>( IIterator_impl<HSTRING__ *,1> const & );
				void IIterator_impl<HSTRING__ *,1>();
				IIterator_impl<HSTRING__ *,1> & operator=( IIterator_impl<HSTRING__ *,1> && );
				IIterator_impl<HSTRING__ *,1> & operator=( IIterator_impl<HSTRING__ *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IInspectable *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IInspectable * * , UINT * );
				void IIterator_impl<IInspectable *,1>( IIterator_impl<IInspectable *,1> && );
				void IIterator_impl<IInspectable *,1>( IIterator_impl<IInspectable *,1> const & );
				void IIterator_impl<IInspectable *,1>();
				IIterator_impl<IInspectable *,1> & operator=( IIterator_impl<IInspectable *,1> && );
				IIterator_impl<IInspectable *,1> & operator=( IIterator_impl<IInspectable *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IIterable<Point> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IIterable<Point> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IIterable<Point> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *,1>( IIterator_impl<IIterable<Point> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *,1>( IIterator_impl<IIterable<Point> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IIterable<Windows::Foundation::Point> *,1>();
				IIterator_impl<IIterable<Point> *,1> & operator=( IIterator_impl<IIterable<Point> *,1> && );
				IIterator_impl<IIterable<Point> *,1> & operator=( IIterator_impl<IIterable<Point> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<EventRegistrationToken,int> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<EventRegistrationToken,int> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<EventRegistrationToken,int> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *,1>( IIterator_impl<IKeyValuePair<EventRegistrationToken,int> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *,1>( IIterator_impl<IKeyValuePair<EventRegistrationToken,int> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<EventRegistrationToken,int> *,1>();
				IIterator_impl<IKeyValuePair<EventRegistrationToken,int> *,1> & operator=( IIterator_impl<IKeyValuePair<EventRegistrationToken,int> *,1> && );
				IIterator_impl<IKeyValuePair<EventRegistrationToken,int> *,1> & operator=( IIterator_impl<IKeyValuePair<EventRegistrationToken,int> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,HSTRING__ *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,HSTRING__ *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,HSTRING__ *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,IInspectable *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,IInspectable *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,IPropertyValue *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,IPropertyValue *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,IPropertyValue *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,IWeakReference *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,IWeakReference *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IWeakReference *> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,IWeakReference *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,__int64> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,__int64> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,__int64> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,__int64> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,__int64> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,__int64> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,__int64> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,__int64> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,__int64> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,__int64> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,double> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,double> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,double> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,double> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,double> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,double> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,double> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,double> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,double> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,double> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,float> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,float> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,float> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,float> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,float> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,float> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,float> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,float> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,float> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,float> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,short> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,short> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,short> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,short> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,short> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,short> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,short> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,short> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,short> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,short> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned char> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,unsigned char> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,unsigned char> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned char> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned char> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned char> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned char> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned char> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned char> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned char> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned int> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<HSTRING__ *,unsigned int> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<HSTRING__ *,unsigned int> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned int> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *,1>( IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned int> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,unsigned int> *,1>();
				IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned int> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned int> *,1> && );
				IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned int> *,1> & operator=( IIterator_impl<IKeyValuePair<HSTRING__ *,unsigned int> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<IInspectable *,IInspectable *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<IInspectable *,IInspectable *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *,1>( IIterator_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *,1>( IIterator_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *,1>();
				IIterator_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> & operator=( IIterator_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> && );
				IIterator_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> & operator=( IIterator_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<_GUID,HSTRING__ *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<_GUID,HSTRING__ *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<_GUID,HSTRING__ *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *,1>( IIterator_impl<IKeyValuePair<_GUID,HSTRING__ *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *,1>( IIterator_impl<IKeyValuePair<_GUID,HSTRING__ *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,HSTRING__ *> *,1>();
				IIterator_impl<IKeyValuePair<_GUID,HSTRING__ *> *,1> & operator=( IIterator_impl<IKeyValuePair<_GUID,HSTRING__ *> *,1> && );
				IIterator_impl<IKeyValuePair<_GUID,HSTRING__ *> *,1> & operator=( IIterator_impl<IKeyValuePair<_GUID,HSTRING__ *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<_GUID,IInspectable *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<_GUID,IInspectable *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<_GUID,IInspectable *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *,1>( IIterator_impl<IKeyValuePair<_GUID,IInspectable *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *,1>( IIterator_impl<IKeyValuePair<_GUID,IInspectable *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,IInspectable *> *,1>();
				IIterator_impl<IKeyValuePair<_GUID,IInspectable *> *,1> & operator=( IIterator_impl<IKeyValuePair<_GUID,IInspectable *> *,1> && );
				IIterator_impl<IKeyValuePair<_GUID,IInspectable *> *,1> & operator=( IIterator_impl<IKeyValuePair<_GUID,IInspectable *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<_GUID,bool> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<_GUID,bool> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<_GUID,bool> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *,1>( IIterator_impl<IKeyValuePair<_GUID,bool> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *,1>( IIterator_impl<IKeyValuePair<_GUID,bool> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<_GUID,bool> *,1>();
				IIterator_impl<IKeyValuePair<_GUID,bool> *,1> & operator=( IIterator_impl<IKeyValuePair<_GUID,bool> *,1> && );
				IIterator_impl<IKeyValuePair<_GUID,bool> *,1> & operator=( IIterator_impl<IKeyValuePair<_GUID,bool> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<__int64,HSTRING__ *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<__int64,HSTRING__ *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<__int64,HSTRING__ *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *,1>( IIterator_impl<IKeyValuePair<__int64,HSTRING__ *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *,1>( IIterator_impl<IKeyValuePair<__int64,HSTRING__ *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,HSTRING__ *> *,1>();
				IIterator_impl<IKeyValuePair<__int64,HSTRING__ *> *,1> & operator=( IIterator_impl<IKeyValuePair<__int64,HSTRING__ *> *,1> && );
				IIterator_impl<IKeyValuePair<__int64,HSTRING__ *> *,1> & operator=( IIterator_impl<IKeyValuePair<__int64,HSTRING__ *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<__int64,__int64> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<__int64,__int64> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<__int64,__int64> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *,1>( IIterator_impl<IKeyValuePair<__int64,__int64> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *,1>( IIterator_impl<IKeyValuePair<__int64,__int64> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,__int64> *,1>();
				IIterator_impl<IKeyValuePair<__int64,__int64> *,1> & operator=( IIterator_impl<IKeyValuePair<__int64,__int64> *,1> && );
				IIterator_impl<IKeyValuePair<__int64,__int64> *,1> & operator=( IIterator_impl<IKeyValuePair<__int64,__int64> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<__int64,double> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<__int64,double> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<__int64,double> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *,1>( IIterator_impl<IKeyValuePair<__int64,double> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *,1>( IIterator_impl<IKeyValuePair<__int64,double> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,double> *,1>();
				IIterator_impl<IKeyValuePair<__int64,double> *,1> & operator=( IIterator_impl<IKeyValuePair<__int64,double> *,1> && );
				IIterator_impl<IKeyValuePair<__int64,double> *,1> & operator=( IIterator_impl<IKeyValuePair<__int64,double> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<__int64,float> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<__int64,float> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<__int64,float> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *,1>( IIterator_impl<IKeyValuePair<__int64,float> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *,1>( IIterator_impl<IKeyValuePair<__int64,float> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<__int64,float> *,1>();
				IIterator_impl<IKeyValuePair<__int64,float> *,1> & operator=( IIterator_impl<IKeyValuePair<__int64,float> *,1> && );
				IIterator_impl<IKeyValuePair<__int64,float> *,1> & operator=( IIterator_impl<IKeyValuePair<__int64,float> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<unsigned int,HSTRING__ *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<unsigned int,HSTRING__ *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<unsigned int,HSTRING__ *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *,1>( IIterator_impl<IKeyValuePair<unsigned int,HSTRING__ *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *,1>( IIterator_impl<IKeyValuePair<unsigned int,HSTRING__ *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,HSTRING__ *> *,1>();
				IIterator_impl<IKeyValuePair<unsigned int,HSTRING__ *> *,1> & operator=( IIterator_impl<IKeyValuePair<unsigned int,HSTRING__ *> *,1> && );
				IIterator_impl<IKeyValuePair<unsigned int,HSTRING__ *> *,1> & operator=( IIterator_impl<IKeyValuePair<unsigned int,HSTRING__ *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<unsigned int,IInspectable *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<unsigned int,IInspectable *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<unsigned int,IInspectable *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *,1>( IIterator_impl<IKeyValuePair<unsigned int,IInspectable *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *,1>( IIterator_impl<IKeyValuePair<unsigned int,IInspectable *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IInspectable *> *,1>();
				IIterator_impl<IKeyValuePair<unsigned int,IInspectable *> *,1> & operator=( IIterator_impl<IKeyValuePair<unsigned int,IInspectable *> *,1> && );
				IIterator_impl<IKeyValuePair<unsigned int,IInspectable *> *,1> & operator=( IIterator_impl<IKeyValuePair<unsigned int,IInspectable *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IKeyValuePair<unsigned int,IWeakReference *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IKeyValuePair<unsigned int,IWeakReference *> * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IKeyValuePair<unsigned int,IWeakReference *> * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *,1>( IIterator_impl<IKeyValuePair<unsigned int,IWeakReference *> *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *,1>( IIterator_impl<IKeyValuePair<unsigned int,IWeakReference *> *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IKeyValuePair<unsigned int,IWeakReference *> *,1>();
				IIterator_impl<IKeyValuePair<unsigned int,IWeakReference *> *,1> & operator=( IIterator_impl<IKeyValuePair<unsigned int,IWeakReference *> *,1> && );
				IIterator_impl<IKeyValuePair<unsigned int,IWeakReference *> *,1> & operator=( IIterator_impl<IKeyValuePair<unsigned int,IWeakReference *> *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<IPropertySet *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IPropertySet * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IPropertySet * * , UINT * );
				void IIterator_impl<Windows::Foundation::Collections::IPropertySet *,1>( IIterator_impl<IPropertySet *,1> && );
				void IIterator_impl<Windows::Foundation::Collections::IPropertySet *,1>( IIterator_impl<IPropertySet *,1> const & );
				void IIterator_impl<Windows::Foundation::Collections::IPropertySet *,1>();
				IIterator_impl<IPropertySet *,1> & operator=( IIterator_impl<IPropertySet *,1> && );
				IIterator_impl<IPropertySet *,1> & operator=( IIterator_impl<IPropertySet *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<Internal::AggregateType<bool,unsigned char>,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UCHAR * , UINT * );
				void IIterator_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char>,1>( IIterator_impl<Internal::AggregateType<bool,unsigned char>,1> && );
				void IIterator_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char>,1>( IIterator_impl<Internal::AggregateType<bool,unsigned char>,1> const & );
				void IIterator_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char>,1>();
				IIterator_impl<Internal::AggregateType<bool,unsigned char>,1> & operator=( IIterator_impl<Internal::AggregateType<bool,unsigned char>,1> && );
				IIterator_impl<Internal::AggregateType<bool,unsigned char>,1> & operator=( IIterator_impl<Internal::AggregateType<bool,unsigned char>,1> const & );
				/*0008*/
			};

			struct IIterator_impl<Point,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( Point * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , Point * , UINT * );
				void IIterator_impl<Windows::Foundation::Point,1>( IIterator_impl<Point,1> && );
				void IIterator_impl<Windows::Foundation::Point,1>( IIterator_impl<Point,1> const & );
				void IIterator_impl<Windows::Foundation::Point,1>();
				IIterator_impl<Point,1> & operator=( IIterator_impl<Point,1> && );
				IIterator_impl<Point,1> & operator=( IIterator_impl<Point,1> const & );
				/*0008*/
			};

			struct IIterator_impl<Rect,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( Rect * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , Rect * , UINT * );
				void IIterator_impl<Windows::Foundation::Rect,1>( IIterator_impl<Rect,1> && );
				void IIterator_impl<Windows::Foundation::Rect,1>( IIterator_impl<Rect,1> const & );
				void IIterator_impl<Windows::Foundation::Rect,1>();
				IIterator_impl<Rect,1> & operator=( IIterator_impl<Rect,1> && );
				IIterator_impl<Rect,1> & operator=( IIterator_impl<Rect,1> const & );
				/*0008*/
			};

			struct IIterator_impl<Storage::Streams::IBuffer *,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( IBuffer * * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , IBuffer * * , UINT * );
				void IIterator_impl<Windows::Storage::Streams::IBuffer *,1>( IIterator_impl<Storage::Streams::IBuffer *,1> && );
				void IIterator_impl<Windows::Storage::Streams::IBuffer *,1>( IIterator_impl<Storage::Streams::IBuffer *,1> const & );
				void IIterator_impl<Windows::Storage::Streams::IBuffer *,1>();
				IIterator_impl<Storage::Streams::IBuffer *,1> & operator=( IIterator_impl<Storage::Streams::IBuffer *,1> && );
				IIterator_impl<Storage::Streams::IBuffer *,1> & operator=( IIterator_impl<Storage::Streams::IBuffer *,1> const & );
				/*0008*/
			};

			struct IIterator_impl<_GUID,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( _GUID * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , _GUID * , UINT * );
				void IIterator_impl<_GUID,1>( IIterator_impl<_GUID,1> && );
				void IIterator_impl<_GUID,1>( IIterator_impl<_GUID,1> const & );
				void IIterator_impl<_GUID,1>();
				IIterator_impl<_GUID,1> & operator=( IIterator_impl<_GUID,1> && );
				IIterator_impl<_GUID,1> & operator=( IIterator_impl<_GUID,1> const & );
				/*0008*/
			};

			struct IIterator_impl<__int64,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , LONGLONG * , UINT * );
				void IIterator_impl<__int64,1>( IIterator_impl<__int64,1> && );
				void IIterator_impl<__int64,1>( IIterator_impl<__int64,1> const & );
				void IIterator_impl<__int64,1>();
				IIterator_impl<__int64,1> & operator=( IIterator_impl<__int64,1> && );
				IIterator_impl<__int64,1> & operator=( IIterator_impl<__int64,1> const & );
				/*0008*/
			};

			struct IIterator_impl<double,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( double * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , double * , UINT * );
				void IIterator_impl<double,1>( IIterator_impl<double,1> && );
				void IIterator_impl<double,1>( IIterator_impl<double,1> const & );
				void IIterator_impl<double,1>();
				IIterator_impl<double,1> & operator=( IIterator_impl<double,1> && );
				IIterator_impl<double,1> & operator=( IIterator_impl<double,1> const & );
				/*0008*/
			};

			struct IIterator_impl<float,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( float * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , float * , UINT * );
				void IIterator_impl<float,1>( IIterator_impl<float,1> && );
				void IIterator_impl<float,1>( IIterator_impl<float,1> const & );
				void IIterator_impl<float,1>();
				IIterator_impl<float,1> & operator=( IIterator_impl<float,1> && );
				IIterator_impl<float,1> & operator=( IIterator_impl<float,1> const & );
				/*0008*/
			};

			struct IIterator_impl<int,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( INT * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , INT * , UINT * );
				void IIterator_impl<int,1>( IIterator_impl<int,1> && );
				void IIterator_impl<int,1>( IIterator_impl<int,1> const & );
				void IIterator_impl<int,1>();
				IIterator_impl<int,1> & operator=( IIterator_impl<int,1> && );
				IIterator_impl<int,1> & operator=( IIterator_impl<int,1> const & );
				/*0008*/
			};

			struct IIterator_impl<short,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( SHORT * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , SHORT * , UINT * );
				void IIterator_impl<short,1>( IIterator_impl<short,1> && );
				void IIterator_impl<short,1>( IIterator_impl<short,1> const & );
				void IIterator_impl<short,1>();
				IIterator_impl<short,1> & operator=( IIterator_impl<short,1> && );
				IIterator_impl<short,1> & operator=( IIterator_impl<short,1> const & );
				/*0008*/
			};

			struct IIterator_impl<unsigned __int64,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( ULONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , ULONGLONG * , UINT * );
				void IIterator_impl<unsigned __int64,1>( IIterator_impl<unsigned __int64,1> && );
				void IIterator_impl<unsigned __int64,1>( IIterator_impl<unsigned __int64,1> const & );
				void IIterator_impl<unsigned __int64,1>();
				IIterator_impl<unsigned __int64,1> & operator=( IIterator_impl<unsigned __int64,1> && );
				IIterator_impl<unsigned __int64,1> & operator=( IIterator_impl<unsigned __int64,1> const & );
				/*0008*/
			};

			struct IIterator_impl<unsigned char,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UCHAR * , UINT * );
				void IIterator_impl<unsigned char,1>( IIterator_impl<unsigned char,1> && );
				void IIterator_impl<unsigned char,1>( IIterator_impl<unsigned char,1> const & );
				void IIterator_impl<unsigned char,1>();
				IIterator_impl<unsigned char,1> & operator=( IIterator_impl<unsigned char,1> && );
				IIterator_impl<unsigned char,1> & operator=( IIterator_impl<unsigned char,1> const & );
				/*0008*/
			};

			struct IIterator_impl<unsigned int,1> : IInspectable {
				/*0030*/ virtual HRESULT get_Current( UINT * ) = 0;
				/*0038*/ virtual HRESULT get_HasCurrent( UCHAR * ) = 0;
				/*0040*/ virtual HRESULT MoveNext( UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT * , UINT * );
				void IIterator_impl<unsigned int,1>( IIterator_impl<unsigned int,1> && );
				void IIterator_impl<unsigned int,1>( IIterator_impl<unsigned int,1> const & );
				void IIterator_impl<unsigned int,1>();
				IIterator_impl<unsigned int,1> & operator=( IIterator_impl<unsigned int,1> && );
				IIterator_impl<unsigned int,1> & operator=( IIterator_impl<unsigned int,1> const & );
				/*0008*/
			};

			struct IKeyValuePair<EventRegistrationToken,int> : IKeyValuePair_impl<EventRegistrationToken,int> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<EventRegistrationToken,int>( IKeyValuePair<EventRegistrationToken,int> && );
				void IKeyValuePair<EventRegistrationToken,int>( IKeyValuePair<EventRegistrationToken,int> const & );
				void IKeyValuePair<EventRegistrationToken,int>();
				IKeyValuePair<EventRegistrationToken,int> & operator=( IKeyValuePair<EventRegistrationToken,int> && );
				IKeyValuePair<EventRegistrationToken,int> & operator=( IKeyValuePair<EventRegistrationToken,int> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,HSTRING__ *> : IKeyValuePair_impl<HSTRING__ *,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,HSTRING__ *>( IKeyValuePair<HSTRING__ *,HSTRING__ *> && );
				void IKeyValuePair<HSTRING__ *,HSTRING__ *>( IKeyValuePair<HSTRING__ *,HSTRING__ *> const & );
				void IKeyValuePair<HSTRING__ *,HSTRING__ *>();
				IKeyValuePair<HSTRING__ *,HSTRING__ *> & operator=( IKeyValuePair<HSTRING__ *,HSTRING__ *> && );
				IKeyValuePair<HSTRING__ *,HSTRING__ *> & operator=( IKeyValuePair<HSTRING__ *,HSTRING__ *> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,IInspectable *> : IKeyValuePair_impl<HSTRING__ *,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,IInspectable *>( IKeyValuePair<HSTRING__ *,IInspectable *> && );
				void IKeyValuePair<HSTRING__ *,IInspectable *>( IKeyValuePair<HSTRING__ *,IInspectable *> const & );
				void IKeyValuePair<HSTRING__ *,IInspectable *>();
				IKeyValuePair<HSTRING__ *,IInspectable *> & operator=( IKeyValuePair<HSTRING__ *,IInspectable *> && );
				IKeyValuePair<HSTRING__ *,IInspectable *> & operator=( IKeyValuePair<HSTRING__ *,IInspectable *> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,IPropertyValue *> : IKeyValuePair_impl<HSTRING__ *,IPropertyValue *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IKeyValuePair<HSTRING__ *,IPropertyValue *> && );
				void IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IKeyValuePair<HSTRING__ *,IPropertyValue *> const & );
				void IKeyValuePair<HSTRING__ *,Windows::Foundation::IPropertyValue *>();
				IKeyValuePair<HSTRING__ *,IPropertyValue *> & operator=( IKeyValuePair<HSTRING__ *,IPropertyValue *> && );
				IKeyValuePair<HSTRING__ *,IPropertyValue *> & operator=( IKeyValuePair<HSTRING__ *,IPropertyValue *> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> : IKeyValuePair_impl<HSTRING__ *,IVector<HSTRING__ *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> && );
				void IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				void IKeyValuePair<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>();
				IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> && );
				IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,IWeakReference *> : IKeyValuePair_impl<HSTRING__ *,IWeakReference *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,IWeakReference *>( IKeyValuePair<HSTRING__ *,IWeakReference *> && );
				void IKeyValuePair<HSTRING__ *,IWeakReference *>( IKeyValuePair<HSTRING__ *,IWeakReference *> const & );
				void IKeyValuePair<HSTRING__ *,IWeakReference *>();
				IKeyValuePair<HSTRING__ *,IWeakReference *> & operator=( IKeyValuePair<HSTRING__ *,IWeakReference *> && );
				IKeyValuePair<HSTRING__ *,IWeakReference *> & operator=( IKeyValuePair<HSTRING__ *,IWeakReference *> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,__int64> : IKeyValuePair_impl<HSTRING__ *,__int64> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,__int64>( IKeyValuePair<HSTRING__ *,__int64> && );
				void IKeyValuePair<HSTRING__ *,__int64>( IKeyValuePair<HSTRING__ *,__int64> const & );
				void IKeyValuePair<HSTRING__ *,__int64>();
				IKeyValuePair<HSTRING__ *,__int64> & operator=( IKeyValuePair<HSTRING__ *,__int64> && );
				IKeyValuePair<HSTRING__ *,__int64> & operator=( IKeyValuePair<HSTRING__ *,__int64> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,double> : IKeyValuePair_impl<HSTRING__ *,double> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,double>( IKeyValuePair<HSTRING__ *,double> && );
				void IKeyValuePair<HSTRING__ *,double>( IKeyValuePair<HSTRING__ *,double> const & );
				void IKeyValuePair<HSTRING__ *,double>();
				IKeyValuePair<HSTRING__ *,double> & operator=( IKeyValuePair<HSTRING__ *,double> && );
				IKeyValuePair<HSTRING__ *,double> & operator=( IKeyValuePair<HSTRING__ *,double> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,float> : IKeyValuePair_impl<HSTRING__ *,float> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,float>( IKeyValuePair<HSTRING__ *,float> && );
				void IKeyValuePair<HSTRING__ *,float>( IKeyValuePair<HSTRING__ *,float> const & );
				void IKeyValuePair<HSTRING__ *,float>();
				IKeyValuePair<HSTRING__ *,float> & operator=( IKeyValuePair<HSTRING__ *,float> && );
				IKeyValuePair<HSTRING__ *,float> & operator=( IKeyValuePair<HSTRING__ *,float> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,short> : IKeyValuePair_impl<HSTRING__ *,short> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,short>( IKeyValuePair<HSTRING__ *,short> && );
				void IKeyValuePair<HSTRING__ *,short>( IKeyValuePair<HSTRING__ *,short> const & );
				void IKeyValuePair<HSTRING__ *,short>();
				IKeyValuePair<HSTRING__ *,short> & operator=( IKeyValuePair<HSTRING__ *,short> && );
				IKeyValuePair<HSTRING__ *,short> & operator=( IKeyValuePair<HSTRING__ *,short> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,unsigned char> : IKeyValuePair_impl<HSTRING__ *,unsigned char> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,unsigned char>( IKeyValuePair<HSTRING__ *,unsigned char> && );
				void IKeyValuePair<HSTRING__ *,unsigned char>( IKeyValuePair<HSTRING__ *,unsigned char> const & );
				void IKeyValuePair<HSTRING__ *,unsigned char>();
				IKeyValuePair<HSTRING__ *,unsigned char> & operator=( IKeyValuePair<HSTRING__ *,unsigned char> && );
				IKeyValuePair<HSTRING__ *,unsigned char> & operator=( IKeyValuePair<HSTRING__ *,unsigned char> const & );
				/*0008*/
			};

			struct IKeyValuePair<HSTRING__ *,unsigned int> : IKeyValuePair_impl<HSTRING__ *,unsigned int> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<HSTRING__ *,unsigned int>( IKeyValuePair<HSTRING__ *,unsigned int> && );
				void IKeyValuePair<HSTRING__ *,unsigned int>( IKeyValuePair<HSTRING__ *,unsigned int> const & );
				void IKeyValuePair<HSTRING__ *,unsigned int>();
				IKeyValuePair<HSTRING__ *,unsigned int> & operator=( IKeyValuePair<HSTRING__ *,unsigned int> && );
				IKeyValuePair<HSTRING__ *,unsigned int> & operator=( IKeyValuePair<HSTRING__ *,unsigned int> const & );
				/*0008*/
			};

			struct IKeyValuePair<IInspectable *,IInspectable *> : IKeyValuePair_impl<IInspectable *,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<IInspectable *,IInspectable *>( IKeyValuePair<IInspectable *,IInspectable *> && );
				void IKeyValuePair<IInspectable *,IInspectable *>( IKeyValuePair<IInspectable *,IInspectable *> const & );
				void IKeyValuePair<IInspectable *,IInspectable *>();
				IKeyValuePair<IInspectable *,IInspectable *> & operator=( IKeyValuePair<IInspectable *,IInspectable *> && );
				IKeyValuePair<IInspectable *,IInspectable *> & operator=( IKeyValuePair<IInspectable *,IInspectable *> const & );
				/*0008*/
			};

			struct IKeyValuePair<_GUID,HSTRING__ *> : IKeyValuePair_impl<_GUID,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<_GUID,HSTRING__ *>( IKeyValuePair<_GUID,HSTRING__ *> && );
				void IKeyValuePair<_GUID,HSTRING__ *>( IKeyValuePair<_GUID,HSTRING__ *> const & );
				void IKeyValuePair<_GUID,HSTRING__ *>();
				IKeyValuePair<_GUID,HSTRING__ *> & operator=( IKeyValuePair<_GUID,HSTRING__ *> && );
				IKeyValuePair<_GUID,HSTRING__ *> & operator=( IKeyValuePair<_GUID,HSTRING__ *> const & );
				/*0008*/
			};

			struct IKeyValuePair<_GUID,IInspectable *> : IKeyValuePair_impl<_GUID,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<_GUID,IInspectable *>( IKeyValuePair<_GUID,IInspectable *> && );
				void IKeyValuePair<_GUID,IInspectable *>( IKeyValuePair<_GUID,IInspectable *> const & );
				void IKeyValuePair<_GUID,IInspectable *>();
				IKeyValuePair<_GUID,IInspectable *> & operator=( IKeyValuePair<_GUID,IInspectable *> && );
				IKeyValuePair<_GUID,IInspectable *> & operator=( IKeyValuePair<_GUID,IInspectable *> const & );
				/*0008*/
			};

			struct IKeyValuePair<_GUID,bool> : IKeyValuePair_impl<_GUID,Internal::AggregateType<bool,unsigned char> > {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<_GUID,bool>( IKeyValuePair<_GUID,bool> && );
				void IKeyValuePair<_GUID,bool>( IKeyValuePair<_GUID,bool> const & );
				void IKeyValuePair<_GUID,bool>();
				IKeyValuePair<_GUID,bool> & operator=( IKeyValuePair<_GUID,bool> && );
				IKeyValuePair<_GUID,bool> & operator=( IKeyValuePair<_GUID,bool> const & );
				/*0008*/
			};

			struct IKeyValuePair<__int64,HSTRING__ *> : IKeyValuePair_impl<__int64,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<__int64,HSTRING__ *>( IKeyValuePair<__int64,HSTRING__ *> && );
				void IKeyValuePair<__int64,HSTRING__ *>( IKeyValuePair<__int64,HSTRING__ *> const & );
				void IKeyValuePair<__int64,HSTRING__ *>();
				IKeyValuePair<__int64,HSTRING__ *> & operator=( IKeyValuePair<__int64,HSTRING__ *> && );
				IKeyValuePair<__int64,HSTRING__ *> & operator=( IKeyValuePair<__int64,HSTRING__ *> const & );
				/*0008*/
			};

			struct IKeyValuePair<__int64,__int64> : IKeyValuePair_impl<__int64,__int64> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<__int64,__int64>( IKeyValuePair<__int64,__int64> && );
				void IKeyValuePair<__int64,__int64>( IKeyValuePair<__int64,__int64> const & );
				void IKeyValuePair<__int64,__int64>();
				IKeyValuePair<__int64,__int64> & operator=( IKeyValuePair<__int64,__int64> && );
				IKeyValuePair<__int64,__int64> & operator=( IKeyValuePair<__int64,__int64> const & );
				/*0008*/
			};

			struct IKeyValuePair<__int64,double> : IKeyValuePair_impl<__int64,double> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<__int64,double>( IKeyValuePair<__int64,double> && );
				void IKeyValuePair<__int64,double>( IKeyValuePair<__int64,double> const & );
				void IKeyValuePair<__int64,double>();
				IKeyValuePair<__int64,double> & operator=( IKeyValuePair<__int64,double> && );
				IKeyValuePair<__int64,double> & operator=( IKeyValuePair<__int64,double> const & );
				/*0008*/
			};

			struct IKeyValuePair<__int64,float> : IKeyValuePair_impl<__int64,float> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<__int64,float>( IKeyValuePair<__int64,float> && );
				void IKeyValuePair<__int64,float>( IKeyValuePair<__int64,float> const & );
				void IKeyValuePair<__int64,float>();
				IKeyValuePair<__int64,float> & operator=( IKeyValuePair<__int64,float> && );
				IKeyValuePair<__int64,float> & operator=( IKeyValuePair<__int64,float> const & );
				/*0008*/
			};

			struct IKeyValuePair<unsigned int,HSTRING__ *> : IKeyValuePair_impl<unsigned int,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<unsigned int,HSTRING__ *>( IKeyValuePair<unsigned int,HSTRING__ *> && );
				void IKeyValuePair<unsigned int,HSTRING__ *>( IKeyValuePair<unsigned int,HSTRING__ *> const & );
				void IKeyValuePair<unsigned int,HSTRING__ *>();
				IKeyValuePair<unsigned int,HSTRING__ *> & operator=( IKeyValuePair<unsigned int,HSTRING__ *> && );
				IKeyValuePair<unsigned int,HSTRING__ *> & operator=( IKeyValuePair<unsigned int,HSTRING__ *> const & );
				/*0008*/
			};

			struct IKeyValuePair<unsigned int,IInspectable *> : IKeyValuePair_impl<unsigned int,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<unsigned int,IInspectable *>( IKeyValuePair<unsigned int,IInspectable *> && );
				void IKeyValuePair<unsigned int,IInspectable *>( IKeyValuePair<unsigned int,IInspectable *> const & );
				void IKeyValuePair<unsigned int,IInspectable *>();
				IKeyValuePair<unsigned int,IInspectable *> & operator=( IKeyValuePair<unsigned int,IInspectable *> && );
				IKeyValuePair<unsigned int,IInspectable *> & operator=( IKeyValuePair<unsigned int,IInspectable *> const & );
				/*0008*/
			};

			struct IKeyValuePair<unsigned int,IWeakReference *> : IKeyValuePair_impl<unsigned int,IWeakReference *> {
				static WCHAR const * z_get_rc_name_impl();
				void IKeyValuePair<unsigned int,IWeakReference *>( IKeyValuePair<unsigned int,IWeakReference *> && );
				void IKeyValuePair<unsigned int,IWeakReference *>( IKeyValuePair<unsigned int,IWeakReference *> const & );
				void IKeyValuePair<unsigned int,IWeakReference *>();
				IKeyValuePair<unsigned int,IWeakReference *> & operator=( IKeyValuePair<unsigned int,IWeakReference *> && );
				IKeyValuePair<unsigned int,IWeakReference *> & operator=( IKeyValuePair<unsigned int,IWeakReference *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<EventRegistrationToken,int> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( EventRegistrationToken * ) = 0;
				/*0038*/ virtual HRESULT get_Value( INT * ) = 0;
				void IKeyValuePair_impl<EventRegistrationToken,int>( IKeyValuePair_impl<EventRegistrationToken,int> && );
				void IKeyValuePair_impl<EventRegistrationToken,int>( IKeyValuePair_impl<EventRegistrationToken,int> const & );
				void IKeyValuePair_impl<EventRegistrationToken,int>();
				IKeyValuePair_impl<EventRegistrationToken,int> & operator=( IKeyValuePair_impl<EventRegistrationToken,int> && );
				IKeyValuePair_impl<EventRegistrationToken,int> & operator=( IKeyValuePair_impl<EventRegistrationToken,int> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( HSTRING__ * * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,HSTRING__ *>( IKeyValuePair_impl<HSTRING__ *,HSTRING__ *> && );
				void IKeyValuePair_impl<HSTRING__ *,HSTRING__ *>( IKeyValuePair_impl<HSTRING__ *,HSTRING__ *> const & );
				void IKeyValuePair_impl<HSTRING__ *,HSTRING__ *>();
				IKeyValuePair_impl<HSTRING__ *,HSTRING__ *> & operator=( IKeyValuePair_impl<HSTRING__ *,HSTRING__ *> && );
				IKeyValuePair_impl<HSTRING__ *,HSTRING__ *> & operator=( IKeyValuePair_impl<HSTRING__ *,HSTRING__ *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( IInspectable * * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,IInspectable *>( IKeyValuePair_impl<HSTRING__ *,IInspectable *> && );
				void IKeyValuePair_impl<HSTRING__ *,IInspectable *>( IKeyValuePair_impl<HSTRING__ *,IInspectable *> const & );
				void IKeyValuePair_impl<HSTRING__ *,IInspectable *>();
				IKeyValuePair_impl<HSTRING__ *,IInspectable *> & operator=( IKeyValuePair_impl<HSTRING__ *,IInspectable *> && );
				IKeyValuePair_impl<HSTRING__ *,IInspectable *> & operator=( IKeyValuePair_impl<HSTRING__ *,IInspectable *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,IPropertyValue *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( IPropertyValue * * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IKeyValuePair_impl<HSTRING__ *,IPropertyValue *> && );
				void IKeyValuePair_impl<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IKeyValuePair_impl<HSTRING__ *,IPropertyValue *> const & );
				void IKeyValuePair_impl<HSTRING__ *,Windows::Foundation::IPropertyValue *>();
				IKeyValuePair_impl<HSTRING__ *,IPropertyValue *> & operator=( IKeyValuePair_impl<HSTRING__ *,IPropertyValue *> && );
				IKeyValuePair_impl<HSTRING__ *,IPropertyValue *> & operator=( IKeyValuePair_impl<HSTRING__ *,IPropertyValue *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,IVector<HSTRING__ *> *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( IVector<HSTRING__ *> * * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IKeyValuePair_impl<HSTRING__ *,IVector<HSTRING__ *> *> && );
				void IKeyValuePair_impl<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IKeyValuePair_impl<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				void IKeyValuePair_impl<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>();
				IKeyValuePair_impl<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IKeyValuePair_impl<HSTRING__ *,IVector<HSTRING__ *> *> && );
				IKeyValuePair_impl<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IKeyValuePair_impl<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,IWeakReference *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( IWeakReference * * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,IWeakReference *>( IKeyValuePair_impl<HSTRING__ *,IWeakReference *> && );
				void IKeyValuePair_impl<HSTRING__ *,IWeakReference *>( IKeyValuePair_impl<HSTRING__ *,IWeakReference *> const & );
				void IKeyValuePair_impl<HSTRING__ *,IWeakReference *>();
				IKeyValuePair_impl<HSTRING__ *,IWeakReference *> & operator=( IKeyValuePair_impl<HSTRING__ *,IWeakReference *> && );
				IKeyValuePair_impl<HSTRING__ *,IWeakReference *> & operator=( IKeyValuePair_impl<HSTRING__ *,IWeakReference *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,__int64> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( LONGLONG * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,__int64>( IKeyValuePair_impl<HSTRING__ *,__int64> && );
				void IKeyValuePair_impl<HSTRING__ *,__int64>( IKeyValuePair_impl<HSTRING__ *,__int64> const & );
				void IKeyValuePair_impl<HSTRING__ *,__int64>();
				IKeyValuePair_impl<HSTRING__ *,__int64> & operator=( IKeyValuePair_impl<HSTRING__ *,__int64> && );
				IKeyValuePair_impl<HSTRING__ *,__int64> & operator=( IKeyValuePair_impl<HSTRING__ *,__int64> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,double> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( double * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,double>( IKeyValuePair_impl<HSTRING__ *,double> && );
				void IKeyValuePair_impl<HSTRING__ *,double>( IKeyValuePair_impl<HSTRING__ *,double> const & );
				void IKeyValuePair_impl<HSTRING__ *,double>();
				IKeyValuePair_impl<HSTRING__ *,double> & operator=( IKeyValuePair_impl<HSTRING__ *,double> && );
				IKeyValuePair_impl<HSTRING__ *,double> & operator=( IKeyValuePair_impl<HSTRING__ *,double> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,float> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( float * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,float>( IKeyValuePair_impl<HSTRING__ *,float> && );
				void IKeyValuePair_impl<HSTRING__ *,float>( IKeyValuePair_impl<HSTRING__ *,float> const & );
				void IKeyValuePair_impl<HSTRING__ *,float>();
				IKeyValuePair_impl<HSTRING__ *,float> & operator=( IKeyValuePair_impl<HSTRING__ *,float> && );
				IKeyValuePair_impl<HSTRING__ *,float> & operator=( IKeyValuePair_impl<HSTRING__ *,float> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,short> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( SHORT * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,short>( IKeyValuePair_impl<HSTRING__ *,short> && );
				void IKeyValuePair_impl<HSTRING__ *,short>( IKeyValuePair_impl<HSTRING__ *,short> const & );
				void IKeyValuePair_impl<HSTRING__ *,short>();
				IKeyValuePair_impl<HSTRING__ *,short> & operator=( IKeyValuePair_impl<HSTRING__ *,short> && );
				IKeyValuePair_impl<HSTRING__ *,short> & operator=( IKeyValuePair_impl<HSTRING__ *,short> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,unsigned char> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( UCHAR * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,unsigned char>( IKeyValuePair_impl<HSTRING__ *,unsigned char> && );
				void IKeyValuePair_impl<HSTRING__ *,unsigned char>( IKeyValuePair_impl<HSTRING__ *,unsigned char> const & );
				void IKeyValuePair_impl<HSTRING__ *,unsigned char>();
				IKeyValuePair_impl<HSTRING__ *,unsigned char> & operator=( IKeyValuePair_impl<HSTRING__ *,unsigned char> && );
				IKeyValuePair_impl<HSTRING__ *,unsigned char> & operator=( IKeyValuePair_impl<HSTRING__ *,unsigned char> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<HSTRING__ *,unsigned int> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( UINT * ) = 0;
				void IKeyValuePair_impl<HSTRING__ *,unsigned int>( IKeyValuePair_impl<HSTRING__ *,unsigned int> && );
				void IKeyValuePair_impl<HSTRING__ *,unsigned int>( IKeyValuePair_impl<HSTRING__ *,unsigned int> const & );
				void IKeyValuePair_impl<HSTRING__ *,unsigned int>();
				IKeyValuePair_impl<HSTRING__ *,unsigned int> & operator=( IKeyValuePair_impl<HSTRING__ *,unsigned int> && );
				IKeyValuePair_impl<HSTRING__ *,unsigned int> & operator=( IKeyValuePair_impl<HSTRING__ *,unsigned int> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<IInspectable *,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Value( IInspectable * * ) = 0;
				void IKeyValuePair_impl<IInspectable *,IInspectable *>( IKeyValuePair_impl<IInspectable *,IInspectable *> && );
				void IKeyValuePair_impl<IInspectable *,IInspectable *>( IKeyValuePair_impl<IInspectable *,IInspectable *> const & );
				void IKeyValuePair_impl<IInspectable *,IInspectable *>();
				IKeyValuePair_impl<IInspectable *,IInspectable *> & operator=( IKeyValuePair_impl<IInspectable *,IInspectable *> && );
				IKeyValuePair_impl<IInspectable *,IInspectable *> & operator=( IKeyValuePair_impl<IInspectable *,IInspectable *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<_GUID,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( _GUID * ) = 0;
				/*0038*/ virtual HRESULT get_Value( HSTRING__ * * ) = 0;
				void IKeyValuePair_impl<_GUID,HSTRING__ *>( IKeyValuePair_impl<_GUID,HSTRING__ *> && );
				void IKeyValuePair_impl<_GUID,HSTRING__ *>( IKeyValuePair_impl<_GUID,HSTRING__ *> const & );
				void IKeyValuePair_impl<_GUID,HSTRING__ *>();
				IKeyValuePair_impl<_GUID,HSTRING__ *> & operator=( IKeyValuePair_impl<_GUID,HSTRING__ *> && );
				IKeyValuePair_impl<_GUID,HSTRING__ *> & operator=( IKeyValuePair_impl<_GUID,HSTRING__ *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<_GUID,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( _GUID * ) = 0;
				/*0038*/ virtual HRESULT get_Value( IInspectable * * ) = 0;
				void IKeyValuePair_impl<_GUID,IInspectable *>( IKeyValuePair_impl<_GUID,IInspectable *> && );
				void IKeyValuePair_impl<_GUID,IInspectable *>( IKeyValuePair_impl<_GUID,IInspectable *> const & );
				void IKeyValuePair_impl<_GUID,IInspectable *>();
				IKeyValuePair_impl<_GUID,IInspectable *> & operator=( IKeyValuePair_impl<_GUID,IInspectable *> && );
				IKeyValuePair_impl<_GUID,IInspectable *> & operator=( IKeyValuePair_impl<_GUID,IInspectable *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<_GUID,Internal::AggregateType<bool,unsigned char> > : IInspectable {
				/*0030*/ virtual HRESULT get_Key( _GUID * ) = 0;
				/*0038*/ virtual HRESULT get_Value( UCHAR * ) = 0;
				void IKeyValuePair_impl<_GUID,Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IKeyValuePair_impl<_GUID,Internal::AggregateType<bool,unsigned char> > && );
				void IKeyValuePair_impl<_GUID,Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IKeyValuePair_impl<_GUID,Internal::AggregateType<bool,unsigned char> > const & );
				void IKeyValuePair_impl<_GUID,Windows::Foundation::Internal::AggregateType<bool,unsigned char> >();
				IKeyValuePair_impl<_GUID,Internal::AggregateType<bool,unsigned char> > & operator=( IKeyValuePair_impl<_GUID,Internal::AggregateType<bool,unsigned char> > && );
				IKeyValuePair_impl<_GUID,Internal::AggregateType<bool,unsigned char> > & operator=( IKeyValuePair_impl<_GUID,Internal::AggregateType<bool,unsigned char> > const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<__int64,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Value( HSTRING__ * * ) = 0;
				void IKeyValuePair_impl<__int64,HSTRING__ *>( IKeyValuePair_impl<__int64,HSTRING__ *> && );
				void IKeyValuePair_impl<__int64,HSTRING__ *>( IKeyValuePair_impl<__int64,HSTRING__ *> const & );
				void IKeyValuePair_impl<__int64,HSTRING__ *>();
				IKeyValuePair_impl<__int64,HSTRING__ *> & operator=( IKeyValuePair_impl<__int64,HSTRING__ *> && );
				IKeyValuePair_impl<__int64,HSTRING__ *> & operator=( IKeyValuePair_impl<__int64,HSTRING__ *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<__int64,__int64> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Value( LONGLONG * ) = 0;
				void IKeyValuePair_impl<__int64,__int64>( IKeyValuePair_impl<__int64,__int64> && );
				void IKeyValuePair_impl<__int64,__int64>( IKeyValuePair_impl<__int64,__int64> const & );
				void IKeyValuePair_impl<__int64,__int64>();
				IKeyValuePair_impl<__int64,__int64> & operator=( IKeyValuePair_impl<__int64,__int64> && );
				IKeyValuePair_impl<__int64,__int64> & operator=( IKeyValuePair_impl<__int64,__int64> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<__int64,double> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Value( double * ) = 0;
				void IKeyValuePair_impl<__int64,double>( IKeyValuePair_impl<__int64,double> && );
				void IKeyValuePair_impl<__int64,double>( IKeyValuePair_impl<__int64,double> const & );
				void IKeyValuePair_impl<__int64,double>();
				IKeyValuePair_impl<__int64,double> & operator=( IKeyValuePair_impl<__int64,double> && );
				IKeyValuePair_impl<__int64,double> & operator=( IKeyValuePair_impl<__int64,double> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<__int64,float> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Value( float * ) = 0;
				void IKeyValuePair_impl<__int64,float>( IKeyValuePair_impl<__int64,float> && );
				void IKeyValuePair_impl<__int64,float>( IKeyValuePair_impl<__int64,float> const & );
				void IKeyValuePair_impl<__int64,float>();
				IKeyValuePair_impl<__int64,float> & operator=( IKeyValuePair_impl<__int64,float> && );
				IKeyValuePair_impl<__int64,float> & operator=( IKeyValuePair_impl<__int64,float> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<unsigned int,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( UINT * ) = 0;
				/*0038*/ virtual HRESULT get_Value( HSTRING__ * * ) = 0;
				void IKeyValuePair_impl<unsigned int,HSTRING__ *>( IKeyValuePair_impl<unsigned int,HSTRING__ *> && );
				void IKeyValuePair_impl<unsigned int,HSTRING__ *>( IKeyValuePair_impl<unsigned int,HSTRING__ *> const & );
				void IKeyValuePair_impl<unsigned int,HSTRING__ *>();
				IKeyValuePair_impl<unsigned int,HSTRING__ *> & operator=( IKeyValuePair_impl<unsigned int,HSTRING__ *> && );
				IKeyValuePair_impl<unsigned int,HSTRING__ *> & operator=( IKeyValuePair_impl<unsigned int,HSTRING__ *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<unsigned int,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( UINT * ) = 0;
				/*0038*/ virtual HRESULT get_Value( IInspectable * * ) = 0;
				void IKeyValuePair_impl<unsigned int,IInspectable *>( IKeyValuePair_impl<unsigned int,IInspectable *> && );
				void IKeyValuePair_impl<unsigned int,IInspectable *>( IKeyValuePair_impl<unsigned int,IInspectable *> const & );
				void IKeyValuePair_impl<unsigned int,IInspectable *>();
				IKeyValuePair_impl<unsigned int,IInspectable *> & operator=( IKeyValuePair_impl<unsigned int,IInspectable *> && );
				IKeyValuePair_impl<unsigned int,IInspectable *> & operator=( IKeyValuePair_impl<unsigned int,IInspectable *> const & );
				/*0008*/
			};

			struct IKeyValuePair_impl<unsigned int,IWeakReference *> : IInspectable {
				/*0030*/ virtual HRESULT get_Key( UINT * ) = 0;
				/*0038*/ virtual HRESULT get_Value( IWeakReference * * ) = 0;
				void IKeyValuePair_impl<unsigned int,IWeakReference *>( IKeyValuePair_impl<unsigned int,IWeakReference *> && );
				void IKeyValuePair_impl<unsigned int,IWeakReference *>( IKeyValuePair_impl<unsigned int,IWeakReference *> const & );
				void IKeyValuePair_impl<unsigned int,IWeakReference *>();
				IKeyValuePair_impl<unsigned int,IWeakReference *> & operator=( IKeyValuePair_impl<unsigned int,IWeakReference *> && );
				IKeyValuePair_impl<unsigned int,IWeakReference *> & operator=( IKeyValuePair_impl<unsigned int,IWeakReference *> const & );
				/*0008*/
			};

			struct IMap<EventRegistrationToken,int> : IMap_impl<EventRegistrationToken,int> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<EventRegistrationToken,int>( IMap<EventRegistrationToken,int> && );
				void IMap<EventRegistrationToken,int>( IMap<EventRegistrationToken,int> const & );
				void IMap<EventRegistrationToken,int>();
				IMap<EventRegistrationToken,int> & operator=( IMap<EventRegistrationToken,int> && );
				IMap<EventRegistrationToken,int> & operator=( IMap<EventRegistrationToken,int> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,HSTRING__ *> : IMap_impl<HSTRING__ *,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,HSTRING__ *>( IMap<HSTRING__ *,HSTRING__ *> && );
				void IMap<HSTRING__ *,HSTRING__ *>( IMap<HSTRING__ *,HSTRING__ *> const & );
				void IMap<HSTRING__ *,HSTRING__ *>();
				IMap<HSTRING__ *,HSTRING__ *> & operator=( IMap<HSTRING__ *,HSTRING__ *> && );
				IMap<HSTRING__ *,HSTRING__ *> & operator=( IMap<HSTRING__ *,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,IInspectable *> : IMap_impl<HSTRING__ *,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,IInspectable *>( IMap<HSTRING__ *,IInspectable *> && );
				void IMap<HSTRING__ *,IInspectable *>( IMap<HSTRING__ *,IInspectable *> const & );
				void IMap<HSTRING__ *,IInspectable *>();
				IMap<HSTRING__ *,IInspectable *> & operator=( IMap<HSTRING__ *,IInspectable *> && );
				IMap<HSTRING__ *,IInspectable *> & operator=( IMap<HSTRING__ *,IInspectable *> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,IPropertyValue *> : IMap_impl<HSTRING__ *,IPropertyValue *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IMap<HSTRING__ *,IPropertyValue *> && );
				void IMap<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IMap<HSTRING__ *,IPropertyValue *> const & );
				void IMap<HSTRING__ *,Windows::Foundation::IPropertyValue *>();
				IMap<HSTRING__ *,IPropertyValue *> & operator=( IMap<HSTRING__ *,IPropertyValue *> && );
				IMap<HSTRING__ *,IPropertyValue *> & operator=( IMap<HSTRING__ *,IPropertyValue *> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,IVector<HSTRING__ *> *> : IMap_impl<HSTRING__ *,IVector<HSTRING__ *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IMap<HSTRING__ *,IVector<HSTRING__ *> *> && );
				void IMap<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IMap<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				void IMap<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>();
				IMap<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IMap<HSTRING__ *,IVector<HSTRING__ *> *> && );
				IMap<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IMap<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,IWeakReference *> : IMap_impl<HSTRING__ *,IWeakReference *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,IWeakReference *>( IMap<HSTRING__ *,IWeakReference *> && );
				void IMap<HSTRING__ *,IWeakReference *>( IMap<HSTRING__ *,IWeakReference *> const & );
				void IMap<HSTRING__ *,IWeakReference *>();
				IMap<HSTRING__ *,IWeakReference *> & operator=( IMap<HSTRING__ *,IWeakReference *> && );
				IMap<HSTRING__ *,IWeakReference *> & operator=( IMap<HSTRING__ *,IWeakReference *> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,__int64> : IMap_impl<HSTRING__ *,__int64> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,__int64>( IMap<HSTRING__ *,__int64> && );
				void IMap<HSTRING__ *,__int64>( IMap<HSTRING__ *,__int64> const & );
				void IMap<HSTRING__ *,__int64>();
				IMap<HSTRING__ *,__int64> & operator=( IMap<HSTRING__ *,__int64> && );
				IMap<HSTRING__ *,__int64> & operator=( IMap<HSTRING__ *,__int64> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,double> : IMap_impl<HSTRING__ *,double> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,double>( IMap<HSTRING__ *,double> && );
				void IMap<HSTRING__ *,double>( IMap<HSTRING__ *,double> const & );
				void IMap<HSTRING__ *,double>();
				IMap<HSTRING__ *,double> & operator=( IMap<HSTRING__ *,double> && );
				IMap<HSTRING__ *,double> & operator=( IMap<HSTRING__ *,double> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,float> : IMap_impl<HSTRING__ *,float> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,float>( IMap<HSTRING__ *,float> && );
				void IMap<HSTRING__ *,float>( IMap<HSTRING__ *,float> const & );
				void IMap<HSTRING__ *,float>();
				IMap<HSTRING__ *,float> & operator=( IMap<HSTRING__ *,float> && );
				IMap<HSTRING__ *,float> & operator=( IMap<HSTRING__ *,float> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,short> : IMap_impl<HSTRING__ *,short> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,short>( IMap<HSTRING__ *,short> && );
				void IMap<HSTRING__ *,short>( IMap<HSTRING__ *,short> const & );
				void IMap<HSTRING__ *,short>();
				IMap<HSTRING__ *,short> & operator=( IMap<HSTRING__ *,short> && );
				IMap<HSTRING__ *,short> & operator=( IMap<HSTRING__ *,short> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,unsigned char> : IMap_impl<HSTRING__ *,unsigned char> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,unsigned char>( IMap<HSTRING__ *,unsigned char> && );
				void IMap<HSTRING__ *,unsigned char>( IMap<HSTRING__ *,unsigned char> const & );
				void IMap<HSTRING__ *,unsigned char>();
				IMap<HSTRING__ *,unsigned char> & operator=( IMap<HSTRING__ *,unsigned char> && );
				IMap<HSTRING__ *,unsigned char> & operator=( IMap<HSTRING__ *,unsigned char> const & );
				/*0008*/
			};

			struct IMap<HSTRING__ *,unsigned int> : IMap_impl<HSTRING__ *,unsigned int> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<HSTRING__ *,unsigned int>( IMap<HSTRING__ *,unsigned int> && );
				void IMap<HSTRING__ *,unsigned int>( IMap<HSTRING__ *,unsigned int> const & );
				void IMap<HSTRING__ *,unsigned int>();
				IMap<HSTRING__ *,unsigned int> & operator=( IMap<HSTRING__ *,unsigned int> && );
				IMap<HSTRING__ *,unsigned int> & operator=( IMap<HSTRING__ *,unsigned int> const & );
				/*0008*/
			};

			struct IMap<IInspectable *,IInspectable *> : IMap_impl<IInspectable *,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<IInspectable *,IInspectable *>( IMap<IInspectable *,IInspectable *> && );
				void IMap<IInspectable *,IInspectable *>( IMap<IInspectable *,IInspectable *> const & );
				void IMap<IInspectable *,IInspectable *>();
				IMap<IInspectable *,IInspectable *> & operator=( IMap<IInspectable *,IInspectable *> && );
				IMap<IInspectable *,IInspectable *> & operator=( IMap<IInspectable *,IInspectable *> const & );
				/*0008*/
			};

			struct IMap<_GUID,HSTRING__ *> : IMap_impl<_GUID,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<_GUID,HSTRING__ *>( IMap<_GUID,HSTRING__ *> && );
				void IMap<_GUID,HSTRING__ *>( IMap<_GUID,HSTRING__ *> const & );
				void IMap<_GUID,HSTRING__ *>();
				IMap<_GUID,HSTRING__ *> & operator=( IMap<_GUID,HSTRING__ *> && );
				IMap<_GUID,HSTRING__ *> & operator=( IMap<_GUID,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMap<_GUID,IInspectable *> : IMap_impl<_GUID,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<_GUID,IInspectable *>( IMap<_GUID,IInspectable *> && );
				void IMap<_GUID,IInspectable *>( IMap<_GUID,IInspectable *> const & );
				void IMap<_GUID,IInspectable *>();
				IMap<_GUID,IInspectable *> & operator=( IMap<_GUID,IInspectable *> && );
				IMap<_GUID,IInspectable *> & operator=( IMap<_GUID,IInspectable *> const & );
				/*0008*/
			};

			struct IMap<_GUID,bool> : IMap_impl<_GUID,Internal::AggregateType<bool,unsigned char> > {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<_GUID,bool>( IMap<_GUID,bool> && );
				void IMap<_GUID,bool>( IMap<_GUID,bool> const & );
				void IMap<_GUID,bool>();
				IMap<_GUID,bool> & operator=( IMap<_GUID,bool> && );
				IMap<_GUID,bool> & operator=( IMap<_GUID,bool> const & );
				/*0008*/
			};

			struct IMap<__int64,HSTRING__ *> : IMap_impl<__int64,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<__int64,HSTRING__ *>( IMap<__int64,HSTRING__ *> && );
				void IMap<__int64,HSTRING__ *>( IMap<__int64,HSTRING__ *> const & );
				void IMap<__int64,HSTRING__ *>();
				IMap<__int64,HSTRING__ *> & operator=( IMap<__int64,HSTRING__ *> && );
				IMap<__int64,HSTRING__ *> & operator=( IMap<__int64,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMap<__int64,__int64> : IMap_impl<__int64,__int64> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<__int64,__int64>( IMap<__int64,__int64> && );
				void IMap<__int64,__int64>( IMap<__int64,__int64> const & );
				void IMap<__int64,__int64>();
				IMap<__int64,__int64> & operator=( IMap<__int64,__int64> && );
				IMap<__int64,__int64> & operator=( IMap<__int64,__int64> const & );
				/*0008*/
			};

			struct IMap<__int64,double> : IMap_impl<__int64,double> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<__int64,double>( IMap<__int64,double> && );
				void IMap<__int64,double>( IMap<__int64,double> const & );
				void IMap<__int64,double>();
				IMap<__int64,double> & operator=( IMap<__int64,double> && );
				IMap<__int64,double> & operator=( IMap<__int64,double> const & );
				/*0008*/
			};

			struct IMap<__int64,float> : IMap_impl<__int64,float> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<__int64,float>( IMap<__int64,float> && );
				void IMap<__int64,float>( IMap<__int64,float> const & );
				void IMap<__int64,float>();
				IMap<__int64,float> & operator=( IMap<__int64,float> && );
				IMap<__int64,float> & operator=( IMap<__int64,float> const & );
				/*0008*/
			};

			struct IMap<unsigned int,HSTRING__ *> : IMap_impl<unsigned int,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<unsigned int,HSTRING__ *>( IMap<unsigned int,HSTRING__ *> && );
				void IMap<unsigned int,HSTRING__ *>( IMap<unsigned int,HSTRING__ *> const & );
				void IMap<unsigned int,HSTRING__ *>();
				IMap<unsigned int,HSTRING__ *> & operator=( IMap<unsigned int,HSTRING__ *> && );
				IMap<unsigned int,HSTRING__ *> & operator=( IMap<unsigned int,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMap<unsigned int,IInspectable *> : IMap_impl<unsigned int,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<unsigned int,IInspectable *>( IMap<unsigned int,IInspectable *> && );
				void IMap<unsigned int,IInspectable *>( IMap<unsigned int,IInspectable *> const & );
				void IMap<unsigned int,IInspectable *>();
				IMap<unsigned int,IInspectable *> & operator=( IMap<unsigned int,IInspectable *> && );
				IMap<unsigned int,IInspectable *> & operator=( IMap<unsigned int,IInspectable *> const & );
				/*0008*/
			};

			struct IMap<unsigned int,IWeakReference *> : IMap_impl<unsigned int,IWeakReference *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMap<unsigned int,IWeakReference *>( IMap<unsigned int,IWeakReference *> && );
				void IMap<unsigned int,IWeakReference *>( IMap<unsigned int,IWeakReference *> const & );
				void IMap<unsigned int,IWeakReference *>();
				IMap<unsigned int,IWeakReference *> & operator=( IMap<unsigned int,IWeakReference *> && );
				IMap<unsigned int,IWeakReference *> & operator=( IMap<unsigned int,IWeakReference *> const & );
				/*0008*/
			};

			struct IMapChangedEventArgs<HSTRING__ *> : IMapChangedEventArgs_impl<HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapChangedEventArgs<HSTRING__ *>( IMapChangedEventArgs<HSTRING__ *> && );
				void IMapChangedEventArgs<HSTRING__ *>( IMapChangedEventArgs<HSTRING__ *> const & );
				void IMapChangedEventArgs<HSTRING__ *>();
				IMapChangedEventArgs<HSTRING__ *> & operator=( IMapChangedEventArgs<HSTRING__ *> && );
				IMapChangedEventArgs<HSTRING__ *> & operator=( IMapChangedEventArgs<HSTRING__ *> const & );
				/*0008*/
			};

			struct IMapChangedEventArgs<_GUID> : IMapChangedEventArgs_impl<_GUID> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapChangedEventArgs<_GUID>( IMapChangedEventArgs<_GUID> && );
				void IMapChangedEventArgs<_GUID>( IMapChangedEventArgs<_GUID> const & );
				void IMapChangedEventArgs<_GUID>();
				IMapChangedEventArgs<_GUID> & operator=( IMapChangedEventArgs<_GUID> && );
				IMapChangedEventArgs<_GUID> & operator=( IMapChangedEventArgs<_GUID> const & );
				/*0008*/
			};

			struct IMapChangedEventArgs_impl<HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT get_CollectionChange( CollectionChange * ) = 0;
				/*0038*/ virtual HRESULT get_Key( HSTRING__ * * ) = 0;
				void IMapChangedEventArgs_impl<HSTRING__ *>( IMapChangedEventArgs_impl<HSTRING__ *> && );
				void IMapChangedEventArgs_impl<HSTRING__ *>( IMapChangedEventArgs_impl<HSTRING__ *> const & );
				void IMapChangedEventArgs_impl<HSTRING__ *>();
				IMapChangedEventArgs_impl<HSTRING__ *> & operator=( IMapChangedEventArgs_impl<HSTRING__ *> && );
				IMapChangedEventArgs_impl<HSTRING__ *> & operator=( IMapChangedEventArgs_impl<HSTRING__ *> const & );
				/*0008*/
			};

			struct IMapChangedEventArgs_impl<_GUID> : IInspectable {
				/*0030*/ virtual HRESULT get_CollectionChange( CollectionChange * ) = 0;
				/*0038*/ virtual HRESULT get_Key( _GUID * ) = 0;
				void IMapChangedEventArgs_impl<_GUID>( IMapChangedEventArgs_impl<_GUID> && );
				void IMapChangedEventArgs_impl<_GUID>( IMapChangedEventArgs_impl<_GUID> const & );
				void IMapChangedEventArgs_impl<_GUID>();
				IMapChangedEventArgs_impl<_GUID> & operator=( IMapChangedEventArgs_impl<_GUID> && );
				IMapChangedEventArgs_impl<_GUID> & operator=( IMapChangedEventArgs_impl<_GUID> const & );
				/*0008*/
			};

			struct IMapView<EventRegistrationToken,int> : IMapView_impl<EventRegistrationToken,int> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<EventRegistrationToken,int>( IMapView<EventRegistrationToken,int> && );
				void IMapView<EventRegistrationToken,int>( IMapView<EventRegistrationToken,int> const & );
				void IMapView<EventRegistrationToken,int>();
				IMapView<EventRegistrationToken,int> & operator=( IMapView<EventRegistrationToken,int> && );
				IMapView<EventRegistrationToken,int> & operator=( IMapView<EventRegistrationToken,int> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,HSTRING__ *> : IMapView_impl<HSTRING__ *,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,HSTRING__ *>( IMapView<HSTRING__ *,HSTRING__ *> && );
				void IMapView<HSTRING__ *,HSTRING__ *>( IMapView<HSTRING__ *,HSTRING__ *> const & );
				void IMapView<HSTRING__ *,HSTRING__ *>();
				IMapView<HSTRING__ *,HSTRING__ *> & operator=( IMapView<HSTRING__ *,HSTRING__ *> && );
				IMapView<HSTRING__ *,HSTRING__ *> & operator=( IMapView<HSTRING__ *,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,IInspectable *> : IMapView_impl<HSTRING__ *,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,IInspectable *>( IMapView<HSTRING__ *,IInspectable *> && );
				void IMapView<HSTRING__ *,IInspectable *>( IMapView<HSTRING__ *,IInspectable *> const & );
				void IMapView<HSTRING__ *,IInspectable *>();
				IMapView<HSTRING__ *,IInspectable *> & operator=( IMapView<HSTRING__ *,IInspectable *> && );
				IMapView<HSTRING__ *,IInspectable *> & operator=( IMapView<HSTRING__ *,IInspectable *> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,IPropertyValue *> : IMapView_impl<HSTRING__ *,IPropertyValue *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IMapView<HSTRING__ *,IPropertyValue *> && );
				void IMapView<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IMapView<HSTRING__ *,IPropertyValue *> const & );
				void IMapView<HSTRING__ *,Windows::Foundation::IPropertyValue *>();
				IMapView<HSTRING__ *,IPropertyValue *> & operator=( IMapView<HSTRING__ *,IPropertyValue *> && );
				IMapView<HSTRING__ *,IPropertyValue *> & operator=( IMapView<HSTRING__ *,IPropertyValue *> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,IVector<HSTRING__ *> *> : IMapView_impl<HSTRING__ *,IVector<HSTRING__ *> *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IMapView<HSTRING__ *,IVector<HSTRING__ *> *> && );
				void IMapView<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IMapView<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				void IMapView<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>();
				IMapView<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IMapView<HSTRING__ *,IVector<HSTRING__ *> *> && );
				IMapView<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IMapView<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,IWeakReference *> : IMapView_impl<HSTRING__ *,IWeakReference *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,IWeakReference *>( IMapView<HSTRING__ *,IWeakReference *> && );
				void IMapView<HSTRING__ *,IWeakReference *>( IMapView<HSTRING__ *,IWeakReference *> const & );
				void IMapView<HSTRING__ *,IWeakReference *>();
				IMapView<HSTRING__ *,IWeakReference *> & operator=( IMapView<HSTRING__ *,IWeakReference *> && );
				IMapView<HSTRING__ *,IWeakReference *> & operator=( IMapView<HSTRING__ *,IWeakReference *> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,__int64> : IMapView_impl<HSTRING__ *,__int64> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,__int64>( IMapView<HSTRING__ *,__int64> && );
				void IMapView<HSTRING__ *,__int64>( IMapView<HSTRING__ *,__int64> const & );
				void IMapView<HSTRING__ *,__int64>();
				IMapView<HSTRING__ *,__int64> & operator=( IMapView<HSTRING__ *,__int64> && );
				IMapView<HSTRING__ *,__int64> & operator=( IMapView<HSTRING__ *,__int64> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,double> : IMapView_impl<HSTRING__ *,double> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,double>( IMapView<HSTRING__ *,double> && );
				void IMapView<HSTRING__ *,double>( IMapView<HSTRING__ *,double> const & );
				void IMapView<HSTRING__ *,double>();
				IMapView<HSTRING__ *,double> & operator=( IMapView<HSTRING__ *,double> && );
				IMapView<HSTRING__ *,double> & operator=( IMapView<HSTRING__ *,double> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,float> : IMapView_impl<HSTRING__ *,float> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,float>( IMapView<HSTRING__ *,float> && );
				void IMapView<HSTRING__ *,float>( IMapView<HSTRING__ *,float> const & );
				void IMapView<HSTRING__ *,float>();
				IMapView<HSTRING__ *,float> & operator=( IMapView<HSTRING__ *,float> && );
				IMapView<HSTRING__ *,float> & operator=( IMapView<HSTRING__ *,float> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,short> : IMapView_impl<HSTRING__ *,short> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,short>( IMapView<HSTRING__ *,short> && );
				void IMapView<HSTRING__ *,short>( IMapView<HSTRING__ *,short> const & );
				void IMapView<HSTRING__ *,short>();
				IMapView<HSTRING__ *,short> & operator=( IMapView<HSTRING__ *,short> && );
				IMapView<HSTRING__ *,short> & operator=( IMapView<HSTRING__ *,short> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,unsigned char> : IMapView_impl<HSTRING__ *,unsigned char> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,unsigned char>( IMapView<HSTRING__ *,unsigned char> && );
				void IMapView<HSTRING__ *,unsigned char>( IMapView<HSTRING__ *,unsigned char> const & );
				void IMapView<HSTRING__ *,unsigned char>();
				IMapView<HSTRING__ *,unsigned char> & operator=( IMapView<HSTRING__ *,unsigned char> && );
				IMapView<HSTRING__ *,unsigned char> & operator=( IMapView<HSTRING__ *,unsigned char> const & );
				/*0008*/
			};

			struct IMapView<HSTRING__ *,unsigned int> : IMapView_impl<HSTRING__ *,unsigned int> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<HSTRING__ *,unsigned int>( IMapView<HSTRING__ *,unsigned int> && );
				void IMapView<HSTRING__ *,unsigned int>( IMapView<HSTRING__ *,unsigned int> const & );
				void IMapView<HSTRING__ *,unsigned int>();
				IMapView<HSTRING__ *,unsigned int> & operator=( IMapView<HSTRING__ *,unsigned int> && );
				IMapView<HSTRING__ *,unsigned int> & operator=( IMapView<HSTRING__ *,unsigned int> const & );
				/*0008*/
			};

			struct IMapView<IInspectable *,IInspectable *> : IMapView_impl<IInspectable *,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<IInspectable *,IInspectable *>( IMapView<IInspectable *,IInspectable *> && );
				void IMapView<IInspectable *,IInspectable *>( IMapView<IInspectable *,IInspectable *> const & );
				void IMapView<IInspectable *,IInspectable *>();
				IMapView<IInspectable *,IInspectable *> & operator=( IMapView<IInspectable *,IInspectable *> && );
				IMapView<IInspectable *,IInspectable *> & operator=( IMapView<IInspectable *,IInspectable *> const & );
				/*0008*/
			};

			struct IMapView<_GUID,HSTRING__ *> : IMapView_impl<_GUID,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<_GUID,HSTRING__ *>( IMapView<_GUID,HSTRING__ *> && );
				void IMapView<_GUID,HSTRING__ *>( IMapView<_GUID,HSTRING__ *> const & );
				void IMapView<_GUID,HSTRING__ *>();
				IMapView<_GUID,HSTRING__ *> & operator=( IMapView<_GUID,HSTRING__ *> && );
				IMapView<_GUID,HSTRING__ *> & operator=( IMapView<_GUID,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMapView<_GUID,IInspectable *> : IMapView_impl<_GUID,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<_GUID,IInspectable *>( IMapView<_GUID,IInspectable *> && );
				void IMapView<_GUID,IInspectable *>( IMapView<_GUID,IInspectable *> const & );
				void IMapView<_GUID,IInspectable *>();
				IMapView<_GUID,IInspectable *> & operator=( IMapView<_GUID,IInspectable *> && );
				IMapView<_GUID,IInspectable *> & operator=( IMapView<_GUID,IInspectable *> const & );
				/*0008*/
			};

			struct IMapView<_GUID,bool> : IMapView_impl<_GUID,Internal::AggregateType<bool,unsigned char> > {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<_GUID,bool>( IMapView<_GUID,bool> && );
				void IMapView<_GUID,bool>( IMapView<_GUID,bool> const & );
				void IMapView<_GUID,bool>();
				IMapView<_GUID,bool> & operator=( IMapView<_GUID,bool> && );
				IMapView<_GUID,bool> & operator=( IMapView<_GUID,bool> const & );
				/*0008*/
			};

			struct IMapView<__int64,HSTRING__ *> : IMapView_impl<__int64,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<__int64,HSTRING__ *>( IMapView<__int64,HSTRING__ *> && );
				void IMapView<__int64,HSTRING__ *>( IMapView<__int64,HSTRING__ *> const & );
				void IMapView<__int64,HSTRING__ *>();
				IMapView<__int64,HSTRING__ *> & operator=( IMapView<__int64,HSTRING__ *> && );
				IMapView<__int64,HSTRING__ *> & operator=( IMapView<__int64,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMapView<__int64,__int64> : IMapView_impl<__int64,__int64> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<__int64,__int64>( IMapView<__int64,__int64> && );
				void IMapView<__int64,__int64>( IMapView<__int64,__int64> const & );
				void IMapView<__int64,__int64>();
				IMapView<__int64,__int64> & operator=( IMapView<__int64,__int64> && );
				IMapView<__int64,__int64> & operator=( IMapView<__int64,__int64> const & );
				/*0008*/
			};

			struct IMapView<__int64,double> : IMapView_impl<__int64,double> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<__int64,double>( IMapView<__int64,double> && );
				void IMapView<__int64,double>( IMapView<__int64,double> const & );
				void IMapView<__int64,double>();
				IMapView<__int64,double> & operator=( IMapView<__int64,double> && );
				IMapView<__int64,double> & operator=( IMapView<__int64,double> const & );
				/*0008*/
			};

			struct IMapView<__int64,float> : IMapView_impl<__int64,float> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<__int64,float>( IMapView<__int64,float> && );
				void IMapView<__int64,float>( IMapView<__int64,float> const & );
				void IMapView<__int64,float>();
				IMapView<__int64,float> & operator=( IMapView<__int64,float> && );
				IMapView<__int64,float> & operator=( IMapView<__int64,float> const & );
				/*0008*/
			};

			struct IMapView<unsigned int,HSTRING__ *> : IMapView_impl<unsigned int,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<unsigned int,HSTRING__ *>( IMapView<unsigned int,HSTRING__ *> && );
				void IMapView<unsigned int,HSTRING__ *>( IMapView<unsigned int,HSTRING__ *> const & );
				void IMapView<unsigned int,HSTRING__ *>();
				IMapView<unsigned int,HSTRING__ *> & operator=( IMapView<unsigned int,HSTRING__ *> && );
				IMapView<unsigned int,HSTRING__ *> & operator=( IMapView<unsigned int,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMapView<unsigned int,IInspectable *> : IMapView_impl<unsigned int,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<unsigned int,IInspectable *>( IMapView<unsigned int,IInspectable *> && );
				void IMapView<unsigned int,IInspectable *>( IMapView<unsigned int,IInspectable *> const & );
				void IMapView<unsigned int,IInspectable *>();
				IMapView<unsigned int,IInspectable *> & operator=( IMapView<unsigned int,IInspectable *> && );
				IMapView<unsigned int,IInspectable *> & operator=( IMapView<unsigned int,IInspectable *> const & );
				/*0008*/
			};

			struct IMapView<unsigned int,IWeakReference *> : IMapView_impl<unsigned int,IWeakReference *> {
				static WCHAR const * z_get_rc_name_impl();
				void IMapView<unsigned int,IWeakReference *>( IMapView<unsigned int,IWeakReference *> && );
				void IMapView<unsigned int,IWeakReference *>( IMapView<unsigned int,IWeakReference *> const & );
				void IMapView<unsigned int,IWeakReference *>();
				IMapView<unsigned int,IWeakReference *> & operator=( IMapView<unsigned int,IWeakReference *> && );
				IMapView<unsigned int,IWeakReference *> & operator=( IMapView<unsigned int,IWeakReference *> const & );
				/*0008*/
			};

			struct IMapView_impl<EventRegistrationToken,int> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( EventRegistrationToken , INT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( EventRegistrationToken , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<EventRegistrationToken,int> * * , IMapView<EventRegistrationToken,int> * * ) = 0;
				void IMapView_impl<EventRegistrationToken,int>( IMapView_impl<EventRegistrationToken,int> && );
				void IMapView_impl<EventRegistrationToken,int>( IMapView_impl<EventRegistrationToken,int> const & );
				void IMapView_impl<EventRegistrationToken,int>();
				IMapView_impl<EventRegistrationToken,int> & operator=( IMapView_impl<EventRegistrationToken,int> && );
				IMapView_impl<EventRegistrationToken,int> & operator=( IMapView_impl<EventRegistrationToken,int> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,HSTRING__ *> * * , IMapView<HSTRING__ *,HSTRING__ *> * * ) = 0;
				void IMapView_impl<HSTRING__ *,HSTRING__ *>( IMapView_impl<HSTRING__ *,HSTRING__ *> && );
				void IMapView_impl<HSTRING__ *,HSTRING__ *>( IMapView_impl<HSTRING__ *,HSTRING__ *> const & );
				void IMapView_impl<HSTRING__ *,HSTRING__ *>();
				IMapView_impl<HSTRING__ *,HSTRING__ *> & operator=( IMapView_impl<HSTRING__ *,HSTRING__ *> && );
				IMapView_impl<HSTRING__ *,HSTRING__ *> & operator=( IMapView_impl<HSTRING__ *,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,IInspectable *> * * , IMapView<HSTRING__ *,IInspectable *> * * ) = 0;
				void IMapView_impl<HSTRING__ *,IInspectable *>( IMapView_impl<HSTRING__ *,IInspectable *> && );
				void IMapView_impl<HSTRING__ *,IInspectable *>( IMapView_impl<HSTRING__ *,IInspectable *> const & );
				void IMapView_impl<HSTRING__ *,IInspectable *>();
				IMapView_impl<HSTRING__ *,IInspectable *> & operator=( IMapView_impl<HSTRING__ *,IInspectable *> && );
				IMapView_impl<HSTRING__ *,IInspectable *> & operator=( IMapView_impl<HSTRING__ *,IInspectable *> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,IPropertyValue *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , IPropertyValue * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,IPropertyValue *> * * , IMapView<HSTRING__ *,IPropertyValue *> * * ) = 0;
				void IMapView_impl<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IMapView_impl<HSTRING__ *,IPropertyValue *> && );
				void IMapView_impl<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IMapView_impl<HSTRING__ *,IPropertyValue *> const & );
				void IMapView_impl<HSTRING__ *,Windows::Foundation::IPropertyValue *>();
				IMapView_impl<HSTRING__ *,IPropertyValue *> & operator=( IMapView_impl<HSTRING__ *,IPropertyValue *> && );
				IMapView_impl<HSTRING__ *,IPropertyValue *> & operator=( IMapView_impl<HSTRING__ *,IPropertyValue *> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,IVector<HSTRING__ *> *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , IVector<HSTRING__ *> * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,IVector<HSTRING__ *> *> * * , IMapView<HSTRING__ *,IVector<HSTRING__ *> *> * * ) = 0;
				void IMapView_impl<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IMapView_impl<HSTRING__ *,IVector<HSTRING__ *> *> && );
				void IMapView_impl<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IMapView_impl<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				void IMapView_impl<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>();
				IMapView_impl<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IMapView_impl<HSTRING__ *,IVector<HSTRING__ *> *> && );
				IMapView_impl<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IMapView_impl<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,IWeakReference *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , IWeakReference * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,IWeakReference *> * * , IMapView<HSTRING__ *,IWeakReference *> * * ) = 0;
				void IMapView_impl<HSTRING__ *,IWeakReference *>( IMapView_impl<HSTRING__ *,IWeakReference *> && );
				void IMapView_impl<HSTRING__ *,IWeakReference *>( IMapView_impl<HSTRING__ *,IWeakReference *> const & );
				void IMapView_impl<HSTRING__ *,IWeakReference *>();
				IMapView_impl<HSTRING__ *,IWeakReference *> & operator=( IMapView_impl<HSTRING__ *,IWeakReference *> && );
				IMapView_impl<HSTRING__ *,IWeakReference *> & operator=( IMapView_impl<HSTRING__ *,IWeakReference *> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,__int64> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,__int64> * * , IMapView<HSTRING__ *,__int64> * * ) = 0;
				void IMapView_impl<HSTRING__ *,__int64>( IMapView_impl<HSTRING__ *,__int64> && );
				void IMapView_impl<HSTRING__ *,__int64>( IMapView_impl<HSTRING__ *,__int64> const & );
				void IMapView_impl<HSTRING__ *,__int64>();
				IMapView_impl<HSTRING__ *,__int64> & operator=( IMapView_impl<HSTRING__ *,__int64> && );
				IMapView_impl<HSTRING__ *,__int64> & operator=( IMapView_impl<HSTRING__ *,__int64> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,double> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , double * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,double> * * , IMapView<HSTRING__ *,double> * * ) = 0;
				void IMapView_impl<HSTRING__ *,double>( IMapView_impl<HSTRING__ *,double> && );
				void IMapView_impl<HSTRING__ *,double>( IMapView_impl<HSTRING__ *,double> const & );
				void IMapView_impl<HSTRING__ *,double>();
				IMapView_impl<HSTRING__ *,double> & operator=( IMapView_impl<HSTRING__ *,double> && );
				IMapView_impl<HSTRING__ *,double> & operator=( IMapView_impl<HSTRING__ *,double> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,float> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , float * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,float> * * , IMapView<HSTRING__ *,float> * * ) = 0;
				void IMapView_impl<HSTRING__ *,float>( IMapView_impl<HSTRING__ *,float> && );
				void IMapView_impl<HSTRING__ *,float>( IMapView_impl<HSTRING__ *,float> const & );
				void IMapView_impl<HSTRING__ *,float>();
				IMapView_impl<HSTRING__ *,float> & operator=( IMapView_impl<HSTRING__ *,float> && );
				IMapView_impl<HSTRING__ *,float> & operator=( IMapView_impl<HSTRING__ *,float> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,short> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , SHORT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,short> * * , IMapView<HSTRING__ *,short> * * ) = 0;
				void IMapView_impl<HSTRING__ *,short>( IMapView_impl<HSTRING__ *,short> && );
				void IMapView_impl<HSTRING__ *,short>( IMapView_impl<HSTRING__ *,short> const & );
				void IMapView_impl<HSTRING__ *,short>();
				IMapView_impl<HSTRING__ *,short> & operator=( IMapView_impl<HSTRING__ *,short> && );
				IMapView_impl<HSTRING__ *,short> & operator=( IMapView_impl<HSTRING__ *,short> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,unsigned char> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,unsigned char> * * , IMapView<HSTRING__ *,unsigned char> * * ) = 0;
				void IMapView_impl<HSTRING__ *,unsigned char>( IMapView_impl<HSTRING__ *,unsigned char> && );
				void IMapView_impl<HSTRING__ *,unsigned char>( IMapView_impl<HSTRING__ *,unsigned char> const & );
				void IMapView_impl<HSTRING__ *,unsigned char>();
				IMapView_impl<HSTRING__ *,unsigned char> & operator=( IMapView_impl<HSTRING__ *,unsigned char> && );
				IMapView_impl<HSTRING__ *,unsigned char> & operator=( IMapView_impl<HSTRING__ *,unsigned char> const & );
				/*0008*/
			};

			struct IMapView_impl<HSTRING__ *,unsigned int> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , UINT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<HSTRING__ *,unsigned int> * * , IMapView<HSTRING__ *,unsigned int> * * ) = 0;
				void IMapView_impl<HSTRING__ *,unsigned int>( IMapView_impl<HSTRING__ *,unsigned int> && );
				void IMapView_impl<HSTRING__ *,unsigned int>( IMapView_impl<HSTRING__ *,unsigned int> const & );
				void IMapView_impl<HSTRING__ *,unsigned int>();
				IMapView_impl<HSTRING__ *,unsigned int> & operator=( IMapView_impl<HSTRING__ *,unsigned int> && );
				IMapView_impl<HSTRING__ *,unsigned int> & operator=( IMapView_impl<HSTRING__ *,unsigned int> const & );
				/*0008*/
			};

			struct IMapView_impl<IInspectable *,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( IInspectable * , IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( IInspectable * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<IInspectable *,IInspectable *> * * , IMapView<IInspectable *,IInspectable *> * * ) = 0;
				void IMapView_impl<IInspectable *,IInspectable *>( IMapView_impl<IInspectable *,IInspectable *> && );
				void IMapView_impl<IInspectable *,IInspectable *>( IMapView_impl<IInspectable *,IInspectable *> const & );
				void IMapView_impl<IInspectable *,IInspectable *>();
				IMapView_impl<IInspectable *,IInspectable *> & operator=( IMapView_impl<IInspectable *,IInspectable *> && );
				IMapView_impl<IInspectable *,IInspectable *> & operator=( IMapView_impl<IInspectable *,IInspectable *> const & );
				/*0008*/
			};

			struct IMapView_impl<_GUID,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( _GUID , HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( _GUID , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<_GUID,HSTRING__ *> * * , IMapView<_GUID,HSTRING__ *> * * ) = 0;
				void IMapView_impl<_GUID,HSTRING__ *>( IMapView_impl<_GUID,HSTRING__ *> && );
				void IMapView_impl<_GUID,HSTRING__ *>( IMapView_impl<_GUID,HSTRING__ *> const & );
				void IMapView_impl<_GUID,HSTRING__ *>();
				IMapView_impl<_GUID,HSTRING__ *> & operator=( IMapView_impl<_GUID,HSTRING__ *> && );
				IMapView_impl<_GUID,HSTRING__ *> & operator=( IMapView_impl<_GUID,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMapView_impl<_GUID,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( _GUID , IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( _GUID , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<_GUID,IInspectable *> * * , IMapView<_GUID,IInspectable *> * * ) = 0;
				void IMapView_impl<_GUID,IInspectable *>( IMapView_impl<_GUID,IInspectable *> && );
				void IMapView_impl<_GUID,IInspectable *>( IMapView_impl<_GUID,IInspectable *> const & );
				void IMapView_impl<_GUID,IInspectable *>();
				IMapView_impl<_GUID,IInspectable *> & operator=( IMapView_impl<_GUID,IInspectable *> && );
				IMapView_impl<_GUID,IInspectable *> & operator=( IMapView_impl<_GUID,IInspectable *> const & );
				/*0008*/
			};

			struct IMapView_impl<_GUID,Internal::AggregateType<bool,unsigned char> > : IInspectable {
				/*0030*/ virtual HRESULT Lookup( _GUID , UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( _GUID , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<_GUID,bool> * * , IMapView<_GUID,bool> * * ) = 0;
				void IMapView_impl<_GUID,Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IMapView_impl<_GUID,Internal::AggregateType<bool,unsigned char> > && );
				void IMapView_impl<_GUID,Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IMapView_impl<_GUID,Internal::AggregateType<bool,unsigned char> > const & );
				void IMapView_impl<_GUID,Windows::Foundation::Internal::AggregateType<bool,unsigned char> >();
				IMapView_impl<_GUID,Internal::AggregateType<bool,unsigned char> > & operator=( IMapView_impl<_GUID,Internal::AggregateType<bool,unsigned char> > && );
				IMapView_impl<_GUID,Internal::AggregateType<bool,unsigned char> > & operator=( IMapView_impl<_GUID,Internal::AggregateType<bool,unsigned char> > const & );
				/*0008*/
			};

			struct IMapView_impl<__int64,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( LONGLONG , HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( LONGLONG , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<__int64,HSTRING__ *> * * , IMapView<__int64,HSTRING__ *> * * ) = 0;
				void IMapView_impl<__int64,HSTRING__ *>( IMapView_impl<__int64,HSTRING__ *> && );
				void IMapView_impl<__int64,HSTRING__ *>( IMapView_impl<__int64,HSTRING__ *> const & );
				void IMapView_impl<__int64,HSTRING__ *>();
				IMapView_impl<__int64,HSTRING__ *> & operator=( IMapView_impl<__int64,HSTRING__ *> && );
				IMapView_impl<__int64,HSTRING__ *> & operator=( IMapView_impl<__int64,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMapView_impl<__int64,__int64> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( LONGLONG , LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( LONGLONG , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<__int64,__int64> * * , IMapView<__int64,__int64> * * ) = 0;
				void IMapView_impl<__int64,__int64>( IMapView_impl<__int64,__int64> && );
				void IMapView_impl<__int64,__int64>( IMapView_impl<__int64,__int64> const & );
				void IMapView_impl<__int64,__int64>();
				IMapView_impl<__int64,__int64> & operator=( IMapView_impl<__int64,__int64> && );
				IMapView_impl<__int64,__int64> & operator=( IMapView_impl<__int64,__int64> const & );
				/*0008*/
			};

			struct IMapView_impl<__int64,double> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( LONGLONG , double * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( LONGLONG , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<__int64,double> * * , IMapView<__int64,double> * * ) = 0;
				void IMapView_impl<__int64,double>( IMapView_impl<__int64,double> && );
				void IMapView_impl<__int64,double>( IMapView_impl<__int64,double> const & );
				void IMapView_impl<__int64,double>();
				IMapView_impl<__int64,double> & operator=( IMapView_impl<__int64,double> && );
				IMapView_impl<__int64,double> & operator=( IMapView_impl<__int64,double> const & );
				/*0008*/
			};

			struct IMapView_impl<__int64,float> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( LONGLONG , float * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( LONGLONG , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<__int64,float> * * , IMapView<__int64,float> * * ) = 0;
				void IMapView_impl<__int64,float>( IMapView_impl<__int64,float> && );
				void IMapView_impl<__int64,float>( IMapView_impl<__int64,float> const & );
				void IMapView_impl<__int64,float>();
				IMapView_impl<__int64,float> & operator=( IMapView_impl<__int64,float> && );
				IMapView_impl<__int64,float> & operator=( IMapView_impl<__int64,float> const & );
				/*0008*/
			};

			struct IMapView_impl<unsigned int,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( UINT , HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( UINT , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<unsigned int,HSTRING__ *> * * , IMapView<unsigned int,HSTRING__ *> * * ) = 0;
				void IMapView_impl<unsigned int,HSTRING__ *>( IMapView_impl<unsigned int,HSTRING__ *> && );
				void IMapView_impl<unsigned int,HSTRING__ *>( IMapView_impl<unsigned int,HSTRING__ *> const & );
				void IMapView_impl<unsigned int,HSTRING__ *>();
				IMapView_impl<unsigned int,HSTRING__ *> & operator=( IMapView_impl<unsigned int,HSTRING__ *> && );
				IMapView_impl<unsigned int,HSTRING__ *> & operator=( IMapView_impl<unsigned int,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMapView_impl<unsigned int,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( UINT , IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( UINT , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<unsigned int,IInspectable *> * * , IMapView<unsigned int,IInspectable *> * * ) = 0;
				void IMapView_impl<unsigned int,IInspectable *>( IMapView_impl<unsigned int,IInspectable *> && );
				void IMapView_impl<unsigned int,IInspectable *>( IMapView_impl<unsigned int,IInspectable *> const & );
				void IMapView_impl<unsigned int,IInspectable *>();
				IMapView_impl<unsigned int,IInspectable *> & operator=( IMapView_impl<unsigned int,IInspectable *> && );
				IMapView_impl<unsigned int,IInspectable *> & operator=( IMapView_impl<unsigned int,IInspectable *> const & );
				/*0008*/
			};

			struct IMapView_impl<unsigned int,IWeakReference *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( UINT , IWeakReference * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( UINT , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT Split( IMapView<unsigned int,IWeakReference *> * * , IMapView<unsigned int,IWeakReference *> * * ) = 0;
				void IMapView_impl<unsigned int,IWeakReference *>( IMapView_impl<unsigned int,IWeakReference *> && );
				void IMapView_impl<unsigned int,IWeakReference *>( IMapView_impl<unsigned int,IWeakReference *> const & );
				void IMapView_impl<unsigned int,IWeakReference *>();
				IMapView_impl<unsigned int,IWeakReference *> & operator=( IMapView_impl<unsigned int,IWeakReference *> && );
				IMapView_impl<unsigned int,IWeakReference *> & operator=( IMapView_impl<unsigned int,IWeakReference *> const & );
				/*0008*/
			};

			struct IMap_impl<EventRegistrationToken,int> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( EventRegistrationToken , INT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( EventRegistrationToken , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<EventRegistrationToken,int> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( EventRegistrationToken , INT , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( EventRegistrationToken ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<EventRegistrationToken,int>( IMap_impl<EventRegistrationToken,int> && );
				void IMap_impl<EventRegistrationToken,int>( IMap_impl<EventRegistrationToken,int> const & );
				void IMap_impl<EventRegistrationToken,int>();
				IMap_impl<EventRegistrationToken,int> & operator=( IMap_impl<EventRegistrationToken,int> && );
				IMap_impl<EventRegistrationToken,int> & operator=( IMap_impl<EventRegistrationToken,int> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,HSTRING__ *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , HSTRING__ * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,HSTRING__ *>( IMap_impl<HSTRING__ *,HSTRING__ *> && );
				void IMap_impl<HSTRING__ *,HSTRING__ *>( IMap_impl<HSTRING__ *,HSTRING__ *> const & );
				void IMap_impl<HSTRING__ *,HSTRING__ *>();
				IMap_impl<HSTRING__ *,HSTRING__ *> & operator=( IMap_impl<HSTRING__ *,HSTRING__ *> && );
				IMap_impl<HSTRING__ *,HSTRING__ *> & operator=( IMap_impl<HSTRING__ *,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,IInspectable *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , IInspectable * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,IInspectable *>( IMap_impl<HSTRING__ *,IInspectable *> && );
				void IMap_impl<HSTRING__ *,IInspectable *>( IMap_impl<HSTRING__ *,IInspectable *> const & );
				void IMap_impl<HSTRING__ *,IInspectable *>();
				IMap_impl<HSTRING__ *,IInspectable *> & operator=( IMap_impl<HSTRING__ *,IInspectable *> && );
				IMap_impl<HSTRING__ *,IInspectable *> & operator=( IMap_impl<HSTRING__ *,IInspectable *> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,IPropertyValue *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , IPropertyValue * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,IPropertyValue *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , IPropertyValue * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IMap_impl<HSTRING__ *,IPropertyValue *> && );
				void IMap_impl<HSTRING__ *,Windows::Foundation::IPropertyValue *>( IMap_impl<HSTRING__ *,IPropertyValue *> const & );
				void IMap_impl<HSTRING__ *,Windows::Foundation::IPropertyValue *>();
				IMap_impl<HSTRING__ *,IPropertyValue *> & operator=( IMap_impl<HSTRING__ *,IPropertyValue *> && );
				IMap_impl<HSTRING__ *,IPropertyValue *> & operator=( IMap_impl<HSTRING__ *,IPropertyValue *> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,IVector<HSTRING__ *> *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , IVector<HSTRING__ *> * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,IVector<HSTRING__ *> *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , IVector<HSTRING__ *> * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IMap_impl<HSTRING__ *,IVector<HSTRING__ *> *> && );
				void IMap_impl<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IMap_impl<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				void IMap_impl<HSTRING__ *,Windows::Foundation::Collections::IVector<HSTRING__ *> *>();
				IMap_impl<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IMap_impl<HSTRING__ *,IVector<HSTRING__ *> *> && );
				IMap_impl<HSTRING__ *,IVector<HSTRING__ *> *> & operator=( IMap_impl<HSTRING__ *,IVector<HSTRING__ *> *> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,IWeakReference *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , IWeakReference * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,IWeakReference *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , IWeakReference * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,IWeakReference *>( IMap_impl<HSTRING__ *,IWeakReference *> && );
				void IMap_impl<HSTRING__ *,IWeakReference *>( IMap_impl<HSTRING__ *,IWeakReference *> const & );
				void IMap_impl<HSTRING__ *,IWeakReference *>();
				IMap_impl<HSTRING__ *,IWeakReference *> & operator=( IMap_impl<HSTRING__ *,IWeakReference *> && );
				IMap_impl<HSTRING__ *,IWeakReference *> & operator=( IMap_impl<HSTRING__ *,IWeakReference *> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,__int64> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,__int64> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , LONGLONG , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,__int64>( IMap_impl<HSTRING__ *,__int64> && );
				void IMap_impl<HSTRING__ *,__int64>( IMap_impl<HSTRING__ *,__int64> const & );
				void IMap_impl<HSTRING__ *,__int64>();
				IMap_impl<HSTRING__ *,__int64> & operator=( IMap_impl<HSTRING__ *,__int64> && );
				IMap_impl<HSTRING__ *,__int64> & operator=( IMap_impl<HSTRING__ *,__int64> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,double> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , double * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,double> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , double , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,double>( IMap_impl<HSTRING__ *,double> && );
				void IMap_impl<HSTRING__ *,double>( IMap_impl<HSTRING__ *,double> const & );
				void IMap_impl<HSTRING__ *,double>();
				IMap_impl<HSTRING__ *,double> & operator=( IMap_impl<HSTRING__ *,double> && );
				IMap_impl<HSTRING__ *,double> & operator=( IMap_impl<HSTRING__ *,double> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,float> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , float * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,float> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , float , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,float>( IMap_impl<HSTRING__ *,float> && );
				void IMap_impl<HSTRING__ *,float>( IMap_impl<HSTRING__ *,float> const & );
				void IMap_impl<HSTRING__ *,float>();
				IMap_impl<HSTRING__ *,float> & operator=( IMap_impl<HSTRING__ *,float> && );
				IMap_impl<HSTRING__ *,float> & operator=( IMap_impl<HSTRING__ *,float> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,short> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , SHORT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,short> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , SHORT , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,short>( IMap_impl<HSTRING__ *,short> && );
				void IMap_impl<HSTRING__ *,short>( IMap_impl<HSTRING__ *,short> const & );
				void IMap_impl<HSTRING__ *,short>();
				IMap_impl<HSTRING__ *,short> & operator=( IMap_impl<HSTRING__ *,short> && );
				IMap_impl<HSTRING__ *,short> & operator=( IMap_impl<HSTRING__ *,short> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,unsigned char> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,unsigned char> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , UCHAR , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,unsigned char>( IMap_impl<HSTRING__ *,unsigned char> && );
				void IMap_impl<HSTRING__ *,unsigned char>( IMap_impl<HSTRING__ *,unsigned char> const & );
				void IMap_impl<HSTRING__ *,unsigned char>();
				IMap_impl<HSTRING__ *,unsigned char> & operator=( IMap_impl<HSTRING__ *,unsigned char> && );
				IMap_impl<HSTRING__ *,unsigned char> & operator=( IMap_impl<HSTRING__ *,unsigned char> const & );
				/*0008*/
			};

			struct IMap_impl<HSTRING__ *,unsigned int> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( HSTRING__ * , UINT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( HSTRING__ * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<HSTRING__ *,unsigned int> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( HSTRING__ * , UINT , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<HSTRING__ *,unsigned int>( IMap_impl<HSTRING__ *,unsigned int> && );
				void IMap_impl<HSTRING__ *,unsigned int>( IMap_impl<HSTRING__ *,unsigned int> const & );
				void IMap_impl<HSTRING__ *,unsigned int>();
				IMap_impl<HSTRING__ *,unsigned int> & operator=( IMap_impl<HSTRING__ *,unsigned int> && );
				IMap_impl<HSTRING__ *,unsigned int> & operator=( IMap_impl<HSTRING__ *,unsigned int> const & );
				/*0008*/
			};

			struct IMap_impl<IInspectable *,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( IInspectable * , IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( IInspectable * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<IInspectable *,IInspectable *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( IInspectable * , IInspectable * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( IInspectable * ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<IInspectable *,IInspectable *>( IMap_impl<IInspectable *,IInspectable *> && );
				void IMap_impl<IInspectable *,IInspectable *>( IMap_impl<IInspectable *,IInspectable *> const & );
				void IMap_impl<IInspectable *,IInspectable *>();
				IMap_impl<IInspectable *,IInspectable *> & operator=( IMap_impl<IInspectable *,IInspectable *> && );
				IMap_impl<IInspectable *,IInspectable *> & operator=( IMap_impl<IInspectable *,IInspectable *> const & );
				/*0008*/
			};

			struct IMap_impl<_GUID,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( _GUID , HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( _GUID , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<_GUID,HSTRING__ *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( _GUID , HSTRING__ * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( _GUID ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<_GUID,HSTRING__ *>( IMap_impl<_GUID,HSTRING__ *> && );
				void IMap_impl<_GUID,HSTRING__ *>( IMap_impl<_GUID,HSTRING__ *> const & );
				void IMap_impl<_GUID,HSTRING__ *>();
				IMap_impl<_GUID,HSTRING__ *> & operator=( IMap_impl<_GUID,HSTRING__ *> && );
				IMap_impl<_GUID,HSTRING__ *> & operator=( IMap_impl<_GUID,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMap_impl<_GUID,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( _GUID , IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( _GUID , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<_GUID,IInspectable *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( _GUID , IInspectable * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( _GUID ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<_GUID,IInspectable *>( IMap_impl<_GUID,IInspectable *> && );
				void IMap_impl<_GUID,IInspectable *>( IMap_impl<_GUID,IInspectable *> const & );
				void IMap_impl<_GUID,IInspectable *>();
				IMap_impl<_GUID,IInspectable *> & operator=( IMap_impl<_GUID,IInspectable *> && );
				IMap_impl<_GUID,IInspectable *> & operator=( IMap_impl<_GUID,IInspectable *> const & );
				/*0008*/
			};

			struct IMap_impl<_GUID,Internal::AggregateType<bool,unsigned char> > : IInspectable {
				/*0030*/ virtual HRESULT Lookup( _GUID , UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( _GUID , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<_GUID,bool> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( _GUID , UCHAR , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( _GUID ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<_GUID,Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IMap_impl<_GUID,Internal::AggregateType<bool,unsigned char> > && );
				void IMap_impl<_GUID,Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IMap_impl<_GUID,Internal::AggregateType<bool,unsigned char> > const & );
				void IMap_impl<_GUID,Windows::Foundation::Internal::AggregateType<bool,unsigned char> >();
				IMap_impl<_GUID,Internal::AggregateType<bool,unsigned char> > & operator=( IMap_impl<_GUID,Internal::AggregateType<bool,unsigned char> > && );
				IMap_impl<_GUID,Internal::AggregateType<bool,unsigned char> > & operator=( IMap_impl<_GUID,Internal::AggregateType<bool,unsigned char> > const & );
				/*0008*/
			};

			struct IMap_impl<__int64,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( LONGLONG , HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( LONGLONG , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<__int64,HSTRING__ *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( LONGLONG , HSTRING__ * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( LONGLONG ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<__int64,HSTRING__ *>( IMap_impl<__int64,HSTRING__ *> && );
				void IMap_impl<__int64,HSTRING__ *>( IMap_impl<__int64,HSTRING__ *> const & );
				void IMap_impl<__int64,HSTRING__ *>();
				IMap_impl<__int64,HSTRING__ *> & operator=( IMap_impl<__int64,HSTRING__ *> && );
				IMap_impl<__int64,HSTRING__ *> & operator=( IMap_impl<__int64,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMap_impl<__int64,__int64> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( LONGLONG , LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( LONGLONG , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<__int64,__int64> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( LONGLONG , LONGLONG , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( LONGLONG ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<__int64,__int64>( IMap_impl<__int64,__int64> && );
				void IMap_impl<__int64,__int64>( IMap_impl<__int64,__int64> const & );
				void IMap_impl<__int64,__int64>();
				IMap_impl<__int64,__int64> & operator=( IMap_impl<__int64,__int64> && );
				IMap_impl<__int64,__int64> & operator=( IMap_impl<__int64,__int64> const & );
				/*0008*/
			};

			struct IMap_impl<__int64,double> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( LONGLONG , double * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( LONGLONG , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<__int64,double> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( LONGLONG , double , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( LONGLONG ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<__int64,double>( IMap_impl<__int64,double> && );
				void IMap_impl<__int64,double>( IMap_impl<__int64,double> const & );
				void IMap_impl<__int64,double>();
				IMap_impl<__int64,double> & operator=( IMap_impl<__int64,double> && );
				IMap_impl<__int64,double> & operator=( IMap_impl<__int64,double> const & );
				/*0008*/
			};

			struct IMap_impl<__int64,float> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( LONGLONG , float * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( LONGLONG , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<__int64,float> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( LONGLONG , float , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( LONGLONG ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<__int64,float>( IMap_impl<__int64,float> && );
				void IMap_impl<__int64,float>( IMap_impl<__int64,float> const & );
				void IMap_impl<__int64,float>();
				IMap_impl<__int64,float> & operator=( IMap_impl<__int64,float> && );
				IMap_impl<__int64,float> & operator=( IMap_impl<__int64,float> const & );
				/*0008*/
			};

			struct IMap_impl<unsigned int,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( UINT , HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( UINT , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<unsigned int,HSTRING__ *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( UINT , HSTRING__ * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( UINT ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<unsigned int,HSTRING__ *>( IMap_impl<unsigned int,HSTRING__ *> && );
				void IMap_impl<unsigned int,HSTRING__ *>( IMap_impl<unsigned int,HSTRING__ *> const & );
				void IMap_impl<unsigned int,HSTRING__ *>();
				IMap_impl<unsigned int,HSTRING__ *> & operator=( IMap_impl<unsigned int,HSTRING__ *> && );
				IMap_impl<unsigned int,HSTRING__ *> & operator=( IMap_impl<unsigned int,HSTRING__ *> const & );
				/*0008*/
			};

			struct IMap_impl<unsigned int,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( UINT , IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( UINT , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<unsigned int,IInspectable *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( UINT , IInspectable * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( UINT ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<unsigned int,IInspectable *>( IMap_impl<unsigned int,IInspectable *> && );
				void IMap_impl<unsigned int,IInspectable *>( IMap_impl<unsigned int,IInspectable *> const & );
				void IMap_impl<unsigned int,IInspectable *>();
				IMap_impl<unsigned int,IInspectable *> & operator=( IMap_impl<unsigned int,IInspectable *> && );
				IMap_impl<unsigned int,IInspectable *> & operator=( IMap_impl<unsigned int,IInspectable *> const & );
				/*0008*/
			};

			struct IMap_impl<unsigned int,IWeakReference *> : IInspectable {
				/*0030*/ virtual HRESULT Lookup( UINT , IWeakReference * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT HasKey( UINT , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetView( IMapView<unsigned int,IWeakReference *> * * ) = 0;
				/*0050*/ virtual HRESULT Insert( UINT , IWeakReference * , UCHAR * ) = 0;
				/*0058*/ virtual HRESULT Remove( UINT ) = 0;
				/*0060*/ virtual HRESULT Clear() = 0;
				void IMap_impl<unsigned int,IWeakReference *>( IMap_impl<unsigned int,IWeakReference *> && );
				void IMap_impl<unsigned int,IWeakReference *>( IMap_impl<unsigned int,IWeakReference *> const & );
				void IMap_impl<unsigned int,IWeakReference *>();
				IMap_impl<unsigned int,IWeakReference *> & operator=( IMap_impl<unsigned int,IWeakReference *> && );
				IMap_impl<unsigned int,IWeakReference *> & operator=( IMap_impl<unsigned int,IWeakReference *> const & );
				/*0008*/
			};

			struct IObservableMap<HSTRING__ *,HSTRING__ *> : IObservableMap_impl<HSTRING__ *,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IObservableMap<HSTRING__ *,HSTRING__ *>( IObservableMap<HSTRING__ *,HSTRING__ *> && );
				void IObservableMap<HSTRING__ *,HSTRING__ *>( IObservableMap<HSTRING__ *,HSTRING__ *> const & );
				void IObservableMap<HSTRING__ *,HSTRING__ *>();
				IObservableMap<HSTRING__ *,HSTRING__ *> & operator=( IObservableMap<HSTRING__ *,HSTRING__ *> && );
				IObservableMap<HSTRING__ *,HSTRING__ *> & operator=( IObservableMap<HSTRING__ *,HSTRING__ *> const & );
				/*0008*/
			};

			struct IObservableMap<HSTRING__ *,IInspectable *> : IObservableMap_impl<HSTRING__ *,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IObservableMap<HSTRING__ *,IInspectable *>( IObservableMap<HSTRING__ *,IInspectable *> && );
				void IObservableMap<HSTRING__ *,IInspectable *>( IObservableMap<HSTRING__ *,IInspectable *> const & );
				void IObservableMap<HSTRING__ *,IInspectable *>();
				IObservableMap<HSTRING__ *,IInspectable *> & operator=( IObservableMap<HSTRING__ *,IInspectable *> && );
				IObservableMap<HSTRING__ *,IInspectable *> & operator=( IObservableMap<HSTRING__ *,IInspectable *> const & );
				/*0008*/
			};

			struct IObservableMap_impl<HSTRING__ *,HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT add_MapChanged( MapChangedEventHandler<HSTRING__ *,HSTRING__ *> * , EventRegistrationToken * ) = 0;
				/*0038*/ virtual HRESULT remove_MapChanged( EventRegistrationToken ) = 0;
				void IObservableMap_impl<HSTRING__ *,HSTRING__ *>( IObservableMap_impl<HSTRING__ *,HSTRING__ *> && );
				void IObservableMap_impl<HSTRING__ *,HSTRING__ *>( IObservableMap_impl<HSTRING__ *,HSTRING__ *> const & );
				void IObservableMap_impl<HSTRING__ *,HSTRING__ *>();
				IObservableMap_impl<HSTRING__ *,HSTRING__ *> & operator=( IObservableMap_impl<HSTRING__ *,HSTRING__ *> && );
				IObservableMap_impl<HSTRING__ *,HSTRING__ *> & operator=( IObservableMap_impl<HSTRING__ *,HSTRING__ *> const & );
				/*0008*/
			};

			struct IObservableMap_impl<HSTRING__ *,IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT add_MapChanged( MapChangedEventHandler<HSTRING__ *,IInspectable *> * , EventRegistrationToken * ) = 0;
				/*0038*/ virtual HRESULT remove_MapChanged( EventRegistrationToken ) = 0;
				void IObservableMap_impl<HSTRING__ *,IInspectable *>( IObservableMap_impl<HSTRING__ *,IInspectable *> && );
				void IObservableMap_impl<HSTRING__ *,IInspectable *>( IObservableMap_impl<HSTRING__ *,IInspectable *> const & );
				void IObservableMap_impl<HSTRING__ *,IInspectable *>();
				IObservableMap_impl<HSTRING__ *,IInspectable *> & operator=( IObservableMap_impl<HSTRING__ *,IInspectable *> && );
				IObservableMap_impl<HSTRING__ *,IInspectable *> & operator=( IObservableMap_impl<HSTRING__ *,IInspectable *> const & );
				/*0008*/
			};

			struct IObservableVector<HSTRING__ *> : IObservableVector_impl<HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void IObservableVector<HSTRING__ *>( IObservableVector<HSTRING__ *> && );
				void IObservableVector<HSTRING__ *>( IObservableVector<HSTRING__ *> const & );
				void IObservableVector<HSTRING__ *>();
				IObservableVector<HSTRING__ *> & operator=( IObservableVector<HSTRING__ *> && );
				IObservableVector<HSTRING__ *> & operator=( IObservableVector<HSTRING__ *> const & );
				/*0008*/
			};

			struct IObservableVector<IInspectable *> : IObservableVector_impl<IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void IObservableVector<IInspectable *>( IObservableVector<IInspectable *> && );
				void IObservableVector<IInspectable *>( IObservableVector<IInspectable *> const & );
				void IObservableVector<IInspectable *>();
				IObservableVector<IInspectable *> & operator=( IObservableVector<IInspectable *> && );
				IObservableVector<IInspectable *> & operator=( IObservableVector<IInspectable *> const & );
				/*0008*/
			};

			struct IObservableVector<float> : IObservableVector_impl<float> {
				static WCHAR const * z_get_rc_name_impl();
				void IObservableVector<float>( IObservableVector<float> && );
				void IObservableVector<float>( IObservableVector<float> const & );
				void IObservableVector<float>();
				IObservableVector<float> & operator=( IObservableVector<float> && );
				IObservableVector<float> & operator=( IObservableVector<float> const & );
				/*0008*/
			};

			struct IObservableVector_impl<HSTRING__ *> : IInspectable {
				/*0030*/ virtual HRESULT add_VectorChanged( VectorChangedEventHandler<HSTRING__ *> * , EventRegistrationToken * ) = 0;
				/*0038*/ virtual HRESULT remove_VectorChanged( EventRegistrationToken ) = 0;
				void IObservableVector_impl<HSTRING__ *>( IObservableVector_impl<HSTRING__ *> && );
				void IObservableVector_impl<HSTRING__ *>( IObservableVector_impl<HSTRING__ *> const & );
				void IObservableVector_impl<HSTRING__ *>();
				IObservableVector_impl<HSTRING__ *> & operator=( IObservableVector_impl<HSTRING__ *> && );
				IObservableVector_impl<HSTRING__ *> & operator=( IObservableVector_impl<HSTRING__ *> const & );
				/*0008*/
			};

			struct IObservableVector_impl<IInspectable *> : IInspectable {
				/*0030*/ virtual HRESULT add_VectorChanged( VectorChangedEventHandler<IInspectable *> * , EventRegistrationToken * ) = 0;
				/*0038*/ virtual HRESULT remove_VectorChanged( EventRegistrationToken ) = 0;
				void IObservableVector_impl<IInspectable *>( IObservableVector_impl<IInspectable *> && );
				void IObservableVector_impl<IInspectable *>( IObservableVector_impl<IInspectable *> const & );
				void IObservableVector_impl<IInspectable *>();
				IObservableVector_impl<IInspectable *> & operator=( IObservableVector_impl<IInspectable *> && );
				IObservableVector_impl<IInspectable *> & operator=( IObservableVector_impl<IInspectable *> const & );
				/*0008*/
			};

			struct IObservableVector_impl<float> : IInspectable {
				/*0030*/ virtual HRESULT add_VectorChanged( VectorChangedEventHandler<float> * , EventRegistrationToken * ) = 0;
				/*0038*/ virtual HRESULT remove_VectorChanged( EventRegistrationToken ) = 0;
				void IObservableVector_impl<float>( IObservableVector_impl<float> && );
				void IObservableVector_impl<float>( IObservableVector_impl<float> const & );
				void IObservableVector_impl<float>();
				IObservableVector_impl<float> & operator=( IObservableVector_impl<float> && );
				IObservableVector_impl<float> & operator=( IObservableVector_impl<float> const & );
				/*0008*/
			};

			struct IPropertySet : IInspectable {
				void IPropertySet( IPropertySet && );
				void IPropertySet( IPropertySet const & );
				void IPropertySet();
				IPropertySet & operator=( IPropertySet && );
				IPropertySet & operator=( IPropertySet const & );
				/*0008*/
			};

			struct IVector<HSTRING__ *> : IVector_impl<HSTRING__ *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<HSTRING__ *>( IVector<HSTRING__ *> && );
				void IVector<HSTRING__ *>( IVector<HSTRING__ *> const & );
				void IVector<HSTRING__ *>();
				IVector<HSTRING__ *> & operator=( IVector<HSTRING__ *> && );
				IVector<HSTRING__ *> & operator=( IVector<HSTRING__ *> const & );
				/*0008*/
			};

			struct IVector<IInspectable *> : IVector_impl<IInspectable *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<IInspectable *>( IVector<IInspectable *> && );
				void IVector<IInspectable *>( IVector<IInspectable *> const & );
				void IVector<IInspectable *>();
				IVector<IInspectable *> & operator=( IVector<IInspectable *> && );
				IVector<IInspectable *> & operator=( IVector<IInspectable *> const & );
				/*0008*/
			};

			struct IVector<IKeyValuePair<IInspectable *,IInspectable *> *> : IVector_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>( IVector<IKeyValuePair<IInspectable *,IInspectable *> *> && );
				void IVector<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>( IVector<IKeyValuePair<IInspectable *,IInspectable *> *> const & );
				void IVector<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>();
				IVector<IKeyValuePair<IInspectable *,IInspectable *> *> & operator=( IVector<IKeyValuePair<IInspectable *,IInspectable *> *> && );
				IVector<IKeyValuePair<IInspectable *,IInspectable *> *> & operator=( IVector<IKeyValuePair<IInspectable *,IInspectable *> *> const & );
				/*0008*/
			};

			struct IVector<IPropertySet *> : IVector_impl<IPropertySet *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<Windows::Foundation::Collections::IPropertySet *>( IVector<IPropertySet *> && );
				void IVector<Windows::Foundation::Collections::IPropertySet *>( IVector<IPropertySet *> const & );
				void IVector<Windows::Foundation::Collections::IPropertySet *>();
				IVector<IPropertySet *> & operator=( IVector<IPropertySet *> && );
				IVector<IPropertySet *> & operator=( IVector<IPropertySet *> const & );
				/*0008*/
			};

			struct IVector<Point> : IVector_impl<Point,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<Windows::Foundation::Point>( IVector<Point> && );
				void IVector<Windows::Foundation::Point>( IVector<Point> const & );
				void IVector<Windows::Foundation::Point>();
				IVector<Point> & operator=( IVector<Point> && );
				IVector<Point> & operator=( IVector<Point> const & );
				/*0008*/
			};

			struct IVector<Rect> : IVector_impl<Rect,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<Windows::Foundation::Rect>( IVector<Rect> && );
				void IVector<Windows::Foundation::Rect>( IVector<Rect> const & );
				void IVector<Windows::Foundation::Rect>();
				IVector<Rect> & operator=( IVector<Rect> && );
				IVector<Rect> & operator=( IVector<Rect> const & );
				/*0008*/
			};

			struct IVector<Storage::Streams::IBuffer *> : IVector_impl<Storage::Streams::IBuffer *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<Windows::Storage::Streams::IBuffer *>( IVector<Storage::Streams::IBuffer *> && );
				void IVector<Windows::Storage::Streams::IBuffer *>( IVector<Storage::Streams::IBuffer *> const & );
				void IVector<Windows::Storage::Streams::IBuffer *>();
				IVector<Storage::Streams::IBuffer *> & operator=( IVector<Storage::Streams::IBuffer *> && );
				IVector<Storage::Streams::IBuffer *> & operator=( IVector<Storage::Streams::IBuffer *> const & );
				/*0008*/
			};

			struct IVector<_GUID> : IVector_impl<_GUID,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<_GUID>( IVector<_GUID> && );
				void IVector<_GUID>( IVector<_GUID> const & );
				void IVector<_GUID>();
				IVector<_GUID> & operator=( IVector<_GUID> && );
				IVector<_GUID> & operator=( IVector<_GUID> const & );
				/*0008*/
			};

			struct IVector<__int64> : IVector_impl<__int64,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<__int64>( IVector<__int64> && );
				void IVector<__int64>( IVector<__int64> const & );
				void IVector<__int64>();
				IVector<__int64> & operator=( IVector<__int64> && );
				IVector<__int64> & operator=( IVector<__int64> const & );
				/*0008*/
			};

			struct IVector<bool> : IVector_impl<Internal::AggregateType<bool,unsigned char>,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<bool>( IVector<bool> && );
				void IVector<bool>( IVector<bool> const & );
				void IVector<bool>();
				IVector<bool> & operator=( IVector<bool> && );
				IVector<bool> & operator=( IVector<bool> const & );
				/*0008*/
			};

			struct IVector<double> : IVector_impl<double,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<double>( IVector<double> && );
				void IVector<double>( IVector<double> const & );
				void IVector<double>();
				IVector<double> & operator=( IVector<double> && );
				IVector<double> & operator=( IVector<double> const & );
				/*0008*/
			};

			struct IVector<float> : IVector_impl<float,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<float>( IVector<float> && );
				void IVector<float>( IVector<float> const & );
				void IVector<float>();
				IVector<float> & operator=( IVector<float> && );
				IVector<float> & operator=( IVector<float> const & );
				/*0008*/
			};

			struct IVector<int> : IVector_impl<int,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<int>( IVector<int> && );
				void IVector<int>( IVector<int> const & );
				void IVector<int>();
				IVector<int> & operator=( IVector<int> && );
				IVector<int> & operator=( IVector<int> const & );
				/*0008*/
			};

			struct IVector<short> : IVector_impl<short,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<short>( IVector<short> && );
				void IVector<short>( IVector<short> const & );
				void IVector<short>();
				IVector<short> & operator=( IVector<short> && );
				IVector<short> & operator=( IVector<short> const & );
				/*0008*/
			};

			struct IVector<unsigned __int64> : IVector_impl<unsigned __int64,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<unsigned __int64>( IVector<unsigned __int64> && );
				void IVector<unsigned __int64>( IVector<unsigned __int64> const & );
				void IVector<unsigned __int64>();
				IVector<unsigned __int64> & operator=( IVector<unsigned __int64> && );
				IVector<unsigned __int64> & operator=( IVector<unsigned __int64> const & );
				/*0008*/
			};

			struct IVector<unsigned char> : IVector_impl<unsigned char,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<unsigned char>( IVector<unsigned char> && );
				void IVector<unsigned char>( IVector<unsigned char> const & );
				void IVector<unsigned char>();
				IVector<unsigned char> & operator=( IVector<unsigned char> && );
				IVector<unsigned char> & operator=( IVector<unsigned char> const & );
				/*0008*/
			};

			struct IVector<unsigned int> : IVector_impl<unsigned int,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVector<unsigned int>( IVector<unsigned int> && );
				void IVector<unsigned int>( IVector<unsigned int> const & );
				void IVector<unsigned int>();
				IVector<unsigned int> & operator=( IVector<unsigned int> && );
				IVector<unsigned int> & operator=( IVector<unsigned int> const & );
				/*0008*/
			};

			struct IVectorChangedEventArgs : IInspectable {
				/*0030*/ virtual HRESULT get_CollectionChange( CollectionChange * ) = 0;
				/*0038*/ virtual HRESULT get_Index( UINT * ) = 0;
				void IVectorChangedEventArgs( IVectorChangedEventArgs && );
				void IVectorChangedEventArgs( IVectorChangedEventArgs const & );
				void IVectorChangedEventArgs();
				IVectorChangedEventArgs & operator=( IVectorChangedEventArgs && );
				IVectorChangedEventArgs & operator=( IVectorChangedEventArgs const & );
				/*0008*/
			};

			struct IVectorView<HSTRING__ *> : IVectorView_impl<HSTRING__ *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<HSTRING__ *>( IVectorView<HSTRING__ *> && );
				void IVectorView<HSTRING__ *>( IVectorView<HSTRING__ *> const & );
				void IVectorView<HSTRING__ *>();
				IVectorView<HSTRING__ *> & operator=( IVectorView<HSTRING__ *> && );
				IVectorView<HSTRING__ *> & operator=( IVectorView<HSTRING__ *> const & );
				/*0008*/
			};

			struct IVectorView<IInspectable *> : IVectorView_impl<IInspectable *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<IInspectable *>( IVectorView<IInspectable *> && );
				void IVectorView<IInspectable *>( IVectorView<IInspectable *> const & );
				void IVectorView<IInspectable *>();
				IVectorView<IInspectable *> & operator=( IVectorView<IInspectable *> && );
				IVectorView<IInspectable *> & operator=( IVectorView<IInspectable *> const & );
				/*0008*/
			};

			struct IVectorView<IKeyValuePair<HSTRING__ *,IInspectable *> *> : IVectorView_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>( IVectorView<IKeyValuePair<HSTRING__ *,IInspectable *> *> && );
				void IVectorView<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>( IVectorView<IKeyValuePair<HSTRING__ *,IInspectable *> *> const & );
				void IVectorView<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *>();
				IVectorView<IKeyValuePair<HSTRING__ *,IInspectable *> *> & operator=( IVectorView<IKeyValuePair<HSTRING__ *,IInspectable *> *> && );
				IVectorView<IKeyValuePair<HSTRING__ *,IInspectable *> *> & operator=( IVectorView<IKeyValuePair<HSTRING__ *,IInspectable *> *> const & );
				/*0008*/
			};

			struct IVectorView<IKeyValuePair<IInspectable *,IInspectable *> *> : IVectorView_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>( IVectorView<IKeyValuePair<IInspectable *,IInspectable *> *> && );
				void IVectorView<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>( IVectorView<IKeyValuePair<IInspectable *,IInspectable *> *> const & );
				void IVectorView<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *>();
				IVectorView<IKeyValuePair<IInspectable *,IInspectable *> *> & operator=( IVectorView<IKeyValuePair<IInspectable *,IInspectable *> *> && );
				IVectorView<IKeyValuePair<IInspectable *,IInspectable *> *> & operator=( IVectorView<IKeyValuePair<IInspectable *,IInspectable *> *> const & );
				/*0008*/
			};

			struct IVectorView<IPropertySet *> : IVectorView_impl<IPropertySet *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<Windows::Foundation::Collections::IPropertySet *>( IVectorView<IPropertySet *> && );
				void IVectorView<Windows::Foundation::Collections::IPropertySet *>( IVectorView<IPropertySet *> const & );
				void IVectorView<Windows::Foundation::Collections::IPropertySet *>();
				IVectorView<IPropertySet *> & operator=( IVectorView<IPropertySet *> && );
				IVectorView<IPropertySet *> & operator=( IVectorView<IPropertySet *> const & );
				/*0008*/
			};

			struct IVectorView<Point> : IVectorView_impl<Point,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<Windows::Foundation::Point>( IVectorView<Point> && );
				void IVectorView<Windows::Foundation::Point>( IVectorView<Point> const & );
				void IVectorView<Windows::Foundation::Point>();
				IVectorView<Point> & operator=( IVectorView<Point> && );
				IVectorView<Point> & operator=( IVectorView<Point> const & );
				/*0008*/
			};

			struct IVectorView<Rect> : IVectorView_impl<Rect,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<Windows::Foundation::Rect>( IVectorView<Rect> && );
				void IVectorView<Windows::Foundation::Rect>( IVectorView<Rect> const & );
				void IVectorView<Windows::Foundation::Rect>();
				IVectorView<Rect> & operator=( IVectorView<Rect> && );
				IVectorView<Rect> & operator=( IVectorView<Rect> const & );
				/*0008*/
			};

			struct IVectorView<Storage::Streams::IBuffer *> : IVectorView_impl<Storage::Streams::IBuffer *,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<Windows::Storage::Streams::IBuffer *>( IVectorView<Storage::Streams::IBuffer *> && );
				void IVectorView<Windows::Storage::Streams::IBuffer *>( IVectorView<Storage::Streams::IBuffer *> const & );
				void IVectorView<Windows::Storage::Streams::IBuffer *>();
				IVectorView<Storage::Streams::IBuffer *> & operator=( IVectorView<Storage::Streams::IBuffer *> && );
				IVectorView<Storage::Streams::IBuffer *> & operator=( IVectorView<Storage::Streams::IBuffer *> const & );
				/*0008*/
			};

			struct IVectorView<_GUID> : IVectorView_impl<_GUID,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<_GUID>( IVectorView<_GUID> && );
				void IVectorView<_GUID>( IVectorView<_GUID> const & );
				void IVectorView<_GUID>();
				IVectorView<_GUID> & operator=( IVectorView<_GUID> && );
				IVectorView<_GUID> & operator=( IVectorView<_GUID> const & );
				/*0008*/
			};

			struct IVectorView<__int64> : IVectorView_impl<__int64,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<__int64>( IVectorView<__int64> && );
				void IVectorView<__int64>( IVectorView<__int64> const & );
				void IVectorView<__int64>();
				IVectorView<__int64> & operator=( IVectorView<__int64> && );
				IVectorView<__int64> & operator=( IVectorView<__int64> const & );
				/*0008*/
			};

			struct IVectorView<bool> : IVectorView_impl<Internal::AggregateType<bool,unsigned char>,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<bool>( IVectorView<bool> && );
				void IVectorView<bool>( IVectorView<bool> const & );
				void IVectorView<bool>();
				IVectorView<bool> & operator=( IVectorView<bool> && );
				IVectorView<bool> & operator=( IVectorView<bool> const & );
				/*0008*/
			};

			struct IVectorView<double> : IVectorView_impl<double,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<double>( IVectorView<double> && );
				void IVectorView<double>( IVectorView<double> const & );
				void IVectorView<double>();
				IVectorView<double> & operator=( IVectorView<double> && );
				IVectorView<double> & operator=( IVectorView<double> const & );
				/*0008*/
			};

			struct IVectorView<float> : IVectorView_impl<float,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<float>( IVectorView<float> && );
				void IVectorView<float>( IVectorView<float> const & );
				void IVectorView<float>();
				IVectorView<float> & operator=( IVectorView<float> && );
				IVectorView<float> & operator=( IVectorView<float> const & );
				/*0008*/
			};

			struct IVectorView<int> : IVectorView_impl<int,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<int>( IVectorView<int> && );
				void IVectorView<int>( IVectorView<int> const & );
				void IVectorView<int>();
				IVectorView<int> & operator=( IVectorView<int> && );
				IVectorView<int> & operator=( IVectorView<int> const & );
				/*0008*/
			};

			struct IVectorView<short> : IVectorView_impl<short,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<short>( IVectorView<short> && );
				void IVectorView<short>( IVectorView<short> const & );
				void IVectorView<short>();
				IVectorView<short> & operator=( IVectorView<short> && );
				IVectorView<short> & operator=( IVectorView<short> const & );
				/*0008*/
			};

			struct IVectorView<unsigned __int64> : IVectorView_impl<unsigned __int64,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<unsigned __int64>( IVectorView<unsigned __int64> && );
				void IVectorView<unsigned __int64>( IVectorView<unsigned __int64> const & );
				void IVectorView<unsigned __int64>();
				IVectorView<unsigned __int64> & operator=( IVectorView<unsigned __int64> && );
				IVectorView<unsigned __int64> & operator=( IVectorView<unsigned __int64> const & );
				/*0008*/
			};

			struct IVectorView<unsigned char> : IVectorView_impl<unsigned char,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<unsigned char>( IVectorView<unsigned char> && );
				void IVectorView<unsigned char>( IVectorView<unsigned char> const & );
				void IVectorView<unsigned char>();
				IVectorView<unsigned char> & operator=( IVectorView<unsigned char> && );
				IVectorView<unsigned char> & operator=( IVectorView<unsigned char> const & );
				/*0008*/
			};

			struct IVectorView<unsigned int> : IVectorView_impl<unsigned int,1> {
				static WCHAR const * z_get_rc_name_impl();
				void IVectorView<unsigned int>( IVectorView<unsigned int> && );
				void IVectorView<unsigned int>( IVectorView<unsigned int> const & );
				void IVectorView<unsigned int>();
				IVectorView<unsigned int> & operator=( IVectorView<unsigned int> && );
				IVectorView<unsigned int> & operator=( IVectorView<unsigned int> const & );
				/*0008*/
			};

			struct IVectorView_impl<HSTRING__ *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( HSTRING__ * , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , HSTRING__ * * , UINT * );
				void IVectorView_impl<HSTRING__ *,1>( IVectorView_impl<HSTRING__ *,1> && );
				void IVectorView_impl<HSTRING__ *,1>( IVectorView_impl<HSTRING__ *,1> const & );
				void IVectorView_impl<HSTRING__ *,1>();
				IVectorView_impl<HSTRING__ *,1> & operator=( IVectorView_impl<HSTRING__ *,1> && );
				IVectorView_impl<HSTRING__ *,1> & operator=( IVectorView_impl<HSTRING__ *,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<IInspectable *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( IInspectable * , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , IInspectable * * , UINT * );
				void IVectorView_impl<IInspectable *,1>( IVectorView_impl<IInspectable *,1> && );
				void IVectorView_impl<IInspectable *,1>( IVectorView_impl<IInspectable *,1> const & );
				void IVectorView_impl<IInspectable *,1>();
				IVectorView_impl<IInspectable *,1> & operator=( IVectorView_impl<IInspectable *,1> && );
				IVectorView_impl<IInspectable *,1> & operator=( IVectorView_impl<IInspectable *,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , IKeyValuePair<HSTRING__ *,IInspectable *> * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( IKeyValuePair<HSTRING__ *,IInspectable *> * , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , IKeyValuePair<HSTRING__ *,IInspectable *> * * , UINT * );
				void IVectorView_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *,1>( IVectorView_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> && );
				void IVectorView_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *,1>( IVectorView_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> const & );
				void IVectorView_impl<Windows::Foundation::Collections::IKeyValuePair<HSTRING__ *,IInspectable *> *,1>();
				IVectorView_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> & operator=( IVectorView_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> && );
				IVectorView_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> & operator=( IVectorView_impl<IKeyValuePair<HSTRING__ *,IInspectable *> *,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , IKeyValuePair<IInspectable *,IInspectable *> * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( IKeyValuePair<IInspectable *,IInspectable *> * , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , IKeyValuePair<IInspectable *,IInspectable *> * * , UINT * );
				void IVectorView_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *,1>( IVectorView_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> && );
				void IVectorView_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *,1>( IVectorView_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> const & );
				void IVectorView_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *,1>();
				IVectorView_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> & operator=( IVectorView_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> && );
				IVectorView_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> & operator=( IVectorView_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<IPropertySet *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , IPropertySet * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( IPropertySet * , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , IPropertySet * * , UINT * );
				void IVectorView_impl<Windows::Foundation::Collections::IPropertySet *,1>( IVectorView_impl<IPropertySet *,1> && );
				void IVectorView_impl<Windows::Foundation::Collections::IPropertySet *,1>( IVectorView_impl<IPropertySet *,1> const & );
				void IVectorView_impl<Windows::Foundation::Collections::IPropertySet *,1>();
				IVectorView_impl<IPropertySet *,1> & operator=( IVectorView_impl<IPropertySet *,1> && );
				IVectorView_impl<IPropertySet *,1> & operator=( IVectorView_impl<IPropertySet *,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<Internal::AggregateType<bool,unsigned char>,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( UCHAR , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , UCHAR * , UINT * );
				void IVectorView_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char>,1>( IVectorView_impl<Internal::AggregateType<bool,unsigned char>,1> && );
				void IVectorView_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char>,1>( IVectorView_impl<Internal::AggregateType<bool,unsigned char>,1> const & );
				void IVectorView_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char>,1>();
				IVectorView_impl<Internal::AggregateType<bool,unsigned char>,1> & operator=( IVectorView_impl<Internal::AggregateType<bool,unsigned char>,1> && );
				IVectorView_impl<Internal::AggregateType<bool,unsigned char>,1> & operator=( IVectorView_impl<Internal::AggregateType<bool,unsigned char>,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<Point,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , Point * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( Point , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , Point * , UINT * );
				void IVectorView_impl<Windows::Foundation::Point,1>( IVectorView_impl<Point,1> && );
				void IVectorView_impl<Windows::Foundation::Point,1>( IVectorView_impl<Point,1> const & );
				void IVectorView_impl<Windows::Foundation::Point,1>();
				IVectorView_impl<Point,1> & operator=( IVectorView_impl<Point,1> && );
				IVectorView_impl<Point,1> & operator=( IVectorView_impl<Point,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<Rect,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , Rect * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( Rect , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , Rect * , UINT * );
				void IVectorView_impl<Windows::Foundation::Rect,1>( IVectorView_impl<Rect,1> && );
				void IVectorView_impl<Windows::Foundation::Rect,1>( IVectorView_impl<Rect,1> const & );
				void IVectorView_impl<Windows::Foundation::Rect,1>();
				IVectorView_impl<Rect,1> & operator=( IVectorView_impl<Rect,1> && );
				IVectorView_impl<Rect,1> & operator=( IVectorView_impl<Rect,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<Storage::Streams::IBuffer *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , IBuffer * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( IBuffer * , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , IBuffer * * , UINT * );
				void IVectorView_impl<Windows::Storage::Streams::IBuffer *,1>( IVectorView_impl<Storage::Streams::IBuffer *,1> && );
				void IVectorView_impl<Windows::Storage::Streams::IBuffer *,1>( IVectorView_impl<Storage::Streams::IBuffer *,1> const & );
				void IVectorView_impl<Windows::Storage::Streams::IBuffer *,1>();
				IVectorView_impl<Storage::Streams::IBuffer *,1> & operator=( IVectorView_impl<Storage::Streams::IBuffer *,1> && );
				IVectorView_impl<Storage::Streams::IBuffer *,1> & operator=( IVectorView_impl<Storage::Streams::IBuffer *,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<_GUID,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , _GUID * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( _GUID , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , _GUID * , UINT * );
				void IVectorView_impl<_GUID,1>( IVectorView_impl<_GUID,1> && );
				void IVectorView_impl<_GUID,1>( IVectorView_impl<_GUID,1> const & );
				void IVectorView_impl<_GUID,1>();
				IVectorView_impl<_GUID,1> & operator=( IVectorView_impl<_GUID,1> && );
				IVectorView_impl<_GUID,1> & operator=( IVectorView_impl<_GUID,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<__int64,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( LONGLONG , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , LONGLONG * , UINT * );
				void IVectorView_impl<__int64,1>( IVectorView_impl<__int64,1> && );
				void IVectorView_impl<__int64,1>( IVectorView_impl<__int64,1> const & );
				void IVectorView_impl<__int64,1>();
				IVectorView_impl<__int64,1> & operator=( IVectorView_impl<__int64,1> && );
				IVectorView_impl<__int64,1> & operator=( IVectorView_impl<__int64,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<double,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , double * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( double , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , double * , UINT * );
				void IVectorView_impl<double,1>( IVectorView_impl<double,1> && );
				void IVectorView_impl<double,1>( IVectorView_impl<double,1> const & );
				void IVectorView_impl<double,1>();
				IVectorView_impl<double,1> & operator=( IVectorView_impl<double,1> && );
				IVectorView_impl<double,1> & operator=( IVectorView_impl<double,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<float,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , float * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( float , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , float * , UINT * );
				void IVectorView_impl<float,1>( IVectorView_impl<float,1> && );
				void IVectorView_impl<float,1>( IVectorView_impl<float,1> const & );
				void IVectorView_impl<float,1>();
				IVectorView_impl<float,1> & operator=( IVectorView_impl<float,1> && );
				IVectorView_impl<float,1> & operator=( IVectorView_impl<float,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<int,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , INT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( INT , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , INT * , UINT * );
				void IVectorView_impl<int,1>( IVectorView_impl<int,1> && );
				void IVectorView_impl<int,1>( IVectorView_impl<int,1> const & );
				void IVectorView_impl<int,1>();
				IVectorView_impl<int,1> & operator=( IVectorView_impl<int,1> && );
				IVectorView_impl<int,1> & operator=( IVectorView_impl<int,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<short,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , SHORT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( SHORT , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , SHORT * , UINT * );
				void IVectorView_impl<short,1>( IVectorView_impl<short,1> && );
				void IVectorView_impl<short,1>( IVectorView_impl<short,1> const & );
				void IVectorView_impl<short,1>();
				IVectorView_impl<short,1> & operator=( IVectorView_impl<short,1> && );
				IVectorView_impl<short,1> & operator=( IVectorView_impl<short,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<unsigned __int64,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , ULONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( ULONGLONG , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , ULONGLONG * , UINT * );
				void IVectorView_impl<unsigned __int64,1>( IVectorView_impl<unsigned __int64,1> && );
				void IVectorView_impl<unsigned __int64,1>( IVectorView_impl<unsigned __int64,1> const & );
				void IVectorView_impl<unsigned __int64,1>();
				IVectorView_impl<unsigned __int64,1> & operator=( IVectorView_impl<unsigned __int64,1> && );
				IVectorView_impl<unsigned __int64,1> & operator=( IVectorView_impl<unsigned __int64,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<unsigned char,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( UCHAR , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , UCHAR * , UINT * );
				void IVectorView_impl<unsigned char,1>( IVectorView_impl<unsigned char,1> && );
				void IVectorView_impl<unsigned char,1>( IVectorView_impl<unsigned char,1> const & );
				void IVectorView_impl<unsigned char,1>();
				IVectorView_impl<unsigned char,1> & operator=( IVectorView_impl<unsigned char,1> && );
				IVectorView_impl<unsigned char,1> & operator=( IVectorView_impl<unsigned char,1> const & );
				/*0008*/
			};

			struct IVectorView_impl<unsigned int,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , UINT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT IndexOf( UINT , UINT * , UCHAR * ) = 0;
				/*0048*/ virtual HRESULT GetMany( UINT , UINT , UINT * , UINT * );
				void IVectorView_impl<unsigned int,1>( IVectorView_impl<unsigned int,1> && );
				void IVectorView_impl<unsigned int,1>( IVectorView_impl<unsigned int,1> const & );
				void IVectorView_impl<unsigned int,1>();
				IVectorView_impl<unsigned int,1> & operator=( IVectorView_impl<unsigned int,1> && );
				IVectorView_impl<unsigned int,1> & operator=( IVectorView_impl<unsigned int,1> const & );
				/*0008*/
			};

			struct IVector_impl<HSTRING__ *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , HSTRING__ * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<HSTRING__ *> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( HSTRING__ * , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , HSTRING__ * ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , HSTRING__ * ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( HSTRING__ * ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , HSTRING__ * * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , HSTRING__ * * );
				void IVector_impl<HSTRING__ *,1>( IVector_impl<HSTRING__ *,1> && );
				void IVector_impl<HSTRING__ *,1>( IVector_impl<HSTRING__ *,1> const & );
				void IVector_impl<HSTRING__ *,1>();
				IVector_impl<HSTRING__ *,1> & operator=( IVector_impl<HSTRING__ *,1> && );
				IVector_impl<HSTRING__ *,1> & operator=( IVector_impl<HSTRING__ *,1> const & );
				/*0008*/
			};

			struct IVector_impl<IInspectable *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , IInspectable * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<IInspectable *> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( IInspectable * , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , IInspectable * ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , IInspectable * ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( IInspectable * ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , IInspectable * * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , IInspectable * * );
				void IVector_impl<IInspectable *,1>( IVector_impl<IInspectable *,1> && );
				void IVector_impl<IInspectable *,1>( IVector_impl<IInspectable *,1> const & );
				void IVector_impl<IInspectable *,1>();
				IVector_impl<IInspectable *,1> & operator=( IVector_impl<IInspectable *,1> && );
				IVector_impl<IInspectable *,1> & operator=( IVector_impl<IInspectable *,1> const & );
				/*0008*/
			};

			struct IVector_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , IKeyValuePair<IInspectable *,IInspectable *> * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<IKeyValuePair<IInspectable *,IInspectable *> *> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( IKeyValuePair<IInspectable *,IInspectable *> * , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , IKeyValuePair<IInspectable *,IInspectable *> * ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , IKeyValuePair<IInspectable *,IInspectable *> * ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( IKeyValuePair<IInspectable *,IInspectable *> * ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , IKeyValuePair<IInspectable *,IInspectable *> * * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , IKeyValuePair<IInspectable *,IInspectable *> * * );
				void IVector_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *,1>( IVector_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> && );
				void IVector_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *,1>( IVector_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> const & );
				void IVector_impl<Windows::Foundation::Collections::IKeyValuePair<IInspectable *,IInspectable *> *,1>();
				IVector_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> & operator=( IVector_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> && );
				IVector_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> & operator=( IVector_impl<IKeyValuePair<IInspectable *,IInspectable *> *,1> const & );
				/*0008*/
			};

			struct IVector_impl<IPropertySet *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , IPropertySet * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<IPropertySet *> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( IPropertySet * , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , IPropertySet * ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , IPropertySet * ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( IPropertySet * ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , IPropertySet * * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , IPropertySet * * );
				void IVector_impl<Windows::Foundation::Collections::IPropertySet *,1>( IVector_impl<IPropertySet *,1> && );
				void IVector_impl<Windows::Foundation::Collections::IPropertySet *,1>( IVector_impl<IPropertySet *,1> const & );
				void IVector_impl<Windows::Foundation::Collections::IPropertySet *,1>();
				IVector_impl<IPropertySet *,1> & operator=( IVector_impl<IPropertySet *,1> && );
				IVector_impl<IPropertySet *,1> & operator=( IVector_impl<IPropertySet *,1> const & );
				/*0008*/
			};

			struct IVector_impl<Internal::AggregateType<bool,unsigned char>,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<bool> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( UCHAR , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , UCHAR ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , UCHAR ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( UCHAR ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , UCHAR * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , UCHAR * );
				void IVector_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char>,1>( IVector_impl<Internal::AggregateType<bool,unsigned char>,1> && );
				void IVector_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char>,1>( IVector_impl<Internal::AggregateType<bool,unsigned char>,1> const & );
				void IVector_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char>,1>();
				IVector_impl<Internal::AggregateType<bool,unsigned char>,1> & operator=( IVector_impl<Internal::AggregateType<bool,unsigned char>,1> && );
				IVector_impl<Internal::AggregateType<bool,unsigned char>,1> & operator=( IVector_impl<Internal::AggregateType<bool,unsigned char>,1> const & );
				/*0008*/
			};

			struct IVector_impl<Point,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , Point * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<Point> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( Point , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , Point ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , Point ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( Point ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , Point * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , Point * );
				void IVector_impl<Windows::Foundation::Point,1>( IVector_impl<Point,1> && );
				void IVector_impl<Windows::Foundation::Point,1>( IVector_impl<Point,1> const & );
				void IVector_impl<Windows::Foundation::Point,1>();
				IVector_impl<Point,1> & operator=( IVector_impl<Point,1> && );
				IVector_impl<Point,1> & operator=( IVector_impl<Point,1> const & );
				/*0008*/
			};

			struct IVector_impl<Rect,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , Rect * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<Rect> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( Rect , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , Rect ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , Rect ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( Rect ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , Rect * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , Rect * );
				void IVector_impl<Windows::Foundation::Rect,1>( IVector_impl<Rect,1> && );
				void IVector_impl<Windows::Foundation::Rect,1>( IVector_impl<Rect,1> const & );
				void IVector_impl<Windows::Foundation::Rect,1>();
				IVector_impl<Rect,1> & operator=( IVector_impl<Rect,1> && );
				IVector_impl<Rect,1> & operator=( IVector_impl<Rect,1> const & );
				/*0008*/
			};

			struct IVector_impl<Storage::Streams::IBuffer *,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , IBuffer * * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<Storage::Streams::IBuffer *> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( IBuffer * , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , IBuffer * ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , IBuffer * ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( IBuffer * ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , IBuffer * * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , IBuffer * * );
				void IVector_impl<Windows::Storage::Streams::IBuffer *,1>( IVector_impl<Storage::Streams::IBuffer *,1> && );
				void IVector_impl<Windows::Storage::Streams::IBuffer *,1>( IVector_impl<Storage::Streams::IBuffer *,1> const & );
				void IVector_impl<Windows::Storage::Streams::IBuffer *,1>();
				IVector_impl<Storage::Streams::IBuffer *,1> & operator=( IVector_impl<Storage::Streams::IBuffer *,1> && );
				IVector_impl<Storage::Streams::IBuffer *,1> & operator=( IVector_impl<Storage::Streams::IBuffer *,1> const & );
				/*0008*/
			};

			struct IVector_impl<_GUID,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , _GUID * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<_GUID> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( _GUID , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , _GUID ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , _GUID ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( _GUID ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , _GUID * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , _GUID * );
				void IVector_impl<_GUID,1>( IVector_impl<_GUID,1> && );
				void IVector_impl<_GUID,1>( IVector_impl<_GUID,1> const & );
				void IVector_impl<_GUID,1>();
				IVector_impl<_GUID,1> & operator=( IVector_impl<_GUID,1> && );
				IVector_impl<_GUID,1> & operator=( IVector_impl<_GUID,1> const & );
				/*0008*/
			};

			struct IVector_impl<__int64,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , LONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<__int64> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( LONGLONG , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , LONGLONG ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , LONGLONG ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( LONGLONG ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , LONGLONG * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , LONGLONG * );
				void IVector_impl<__int64,1>( IVector_impl<__int64,1> && );
				void IVector_impl<__int64,1>( IVector_impl<__int64,1> const & );
				void IVector_impl<__int64,1>();
				IVector_impl<__int64,1> & operator=( IVector_impl<__int64,1> && );
				IVector_impl<__int64,1> & operator=( IVector_impl<__int64,1> const & );
				/*0008*/
			};

			struct IVector_impl<double,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , double * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<double> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( double , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , double ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , double ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( double ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , double * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , double * );
				void IVector_impl<double,1>( IVector_impl<double,1> && );
				void IVector_impl<double,1>( IVector_impl<double,1> const & );
				void IVector_impl<double,1>();
				IVector_impl<double,1> & operator=( IVector_impl<double,1> && );
				IVector_impl<double,1> & operator=( IVector_impl<double,1> const & );
				/*0008*/
			};

			struct IVector_impl<float,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , float * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<float> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( float , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , float ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , float ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( float ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , float * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , float * );
				void IVector_impl<float,1>( IVector_impl<float,1> && );
				void IVector_impl<float,1>( IVector_impl<float,1> const & );
				void IVector_impl<float,1>();
				IVector_impl<float,1> & operator=( IVector_impl<float,1> && );
				IVector_impl<float,1> & operator=( IVector_impl<float,1> const & );
				/*0008*/
			};

			struct IVector_impl<int,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , INT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<int> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( INT , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , INT ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , INT ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( INT ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , INT * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , INT * );
				void IVector_impl<int,1>( IVector_impl<int,1> && );
				void IVector_impl<int,1>( IVector_impl<int,1> const & );
				void IVector_impl<int,1>();
				IVector_impl<int,1> & operator=( IVector_impl<int,1> && );
				IVector_impl<int,1> & operator=( IVector_impl<int,1> const & );
				/*0008*/
			};

			struct IVector_impl<short,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , SHORT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<short> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( SHORT , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , SHORT ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , SHORT ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( SHORT ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , SHORT * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , SHORT * );
				void IVector_impl<short,1>( IVector_impl<short,1> && );
				void IVector_impl<short,1>( IVector_impl<short,1> const & );
				void IVector_impl<short,1>();
				IVector_impl<short,1> & operator=( IVector_impl<short,1> && );
				IVector_impl<short,1> & operator=( IVector_impl<short,1> const & );
				/*0008*/
			};

			struct IVector_impl<unsigned __int64,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , ULONGLONG * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<unsigned __int64> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( ULONGLONG , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , ULONGLONG ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , ULONGLONG ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( ULONGLONG ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , ULONGLONG * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , ULONGLONG * );
				void IVector_impl<unsigned __int64,1>( IVector_impl<unsigned __int64,1> && );
				void IVector_impl<unsigned __int64,1>( IVector_impl<unsigned __int64,1> const & );
				void IVector_impl<unsigned __int64,1>();
				IVector_impl<unsigned __int64,1> & operator=( IVector_impl<unsigned __int64,1> && );
				IVector_impl<unsigned __int64,1> & operator=( IVector_impl<unsigned __int64,1> const & );
				/*0008*/
			};

			struct IVector_impl<unsigned char,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<unsigned char> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( UCHAR , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , UCHAR ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , UCHAR ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( UCHAR ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , UCHAR * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , UCHAR * );
				void IVector_impl<unsigned char,1>( IVector_impl<unsigned char,1> && );
				void IVector_impl<unsigned char,1>( IVector_impl<unsigned char,1> const & );
				void IVector_impl<unsigned char,1>();
				IVector_impl<unsigned char,1> & operator=( IVector_impl<unsigned char,1> && );
				IVector_impl<unsigned char,1> & operator=( IVector_impl<unsigned char,1> const & );
				/*0008*/
			};

			struct IVector_impl<unsigned int,1> : IInspectable {
				/*0030*/ virtual HRESULT GetAt( UINT , UINT * ) = 0;
				/*0038*/ virtual HRESULT get_Size( UINT * ) = 0;
				/*0040*/ virtual HRESULT GetView( IVectorView<unsigned int> * * ) = 0;
				/*0048*/ virtual HRESULT IndexOf( UINT , UINT * , UCHAR * ) = 0;
				/*0050*/ virtual HRESULT SetAt( UINT , UINT ) = 0;
				/*0058*/ virtual HRESULT InsertAt( UINT , UINT ) = 0;
				/*0060*/ virtual HRESULT RemoveAt( UINT ) = 0;
				/*0068*/ virtual HRESULT Append( UINT ) = 0;
				/*0070*/ virtual HRESULT RemoveAtEnd() = 0;
				/*0078*/ virtual HRESULT Clear() = 0;
				/*0080*/ virtual HRESULT GetMany( UINT , UINT , UINT * , UINT * );
				/*0088*/ virtual HRESULT ReplaceAll( UINT , UINT * );
				void IVector_impl<unsigned int,1>( IVector_impl<unsigned int,1> && );
				void IVector_impl<unsigned int,1>( IVector_impl<unsigned int,1> const & );
				void IVector_impl<unsigned int,1>();
				IVector_impl<unsigned int,1> & operator=( IVector_impl<unsigned int,1> && );
				IVector_impl<unsigned int,1> & operator=( IVector_impl<unsigned int,1> const & );
				/*0008*/
			};

			struct MapChangedEventHandler<HSTRING__ *,HSTRING__ *> : MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void MapChangedEventHandler<HSTRING__ *,HSTRING__ *>( MapChangedEventHandler<HSTRING__ *,HSTRING__ *> && );
				void MapChangedEventHandler<HSTRING__ *,HSTRING__ *>( MapChangedEventHandler<HSTRING__ *,HSTRING__ *> const & );
				void MapChangedEventHandler<HSTRING__ *,HSTRING__ *>();
				MapChangedEventHandler<HSTRING__ *,HSTRING__ *> & operator=( MapChangedEventHandler<HSTRING__ *,HSTRING__ *> && );
				MapChangedEventHandler<HSTRING__ *,HSTRING__ *> & operator=( MapChangedEventHandler<HSTRING__ *,HSTRING__ *> const & );
				/*0008*/
			};

			struct MapChangedEventHandler<HSTRING__ *,IInspectable *> : MapChangedEventHandler_impl<HSTRING__ *,IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void MapChangedEventHandler<HSTRING__ *,IInspectable *>( MapChangedEventHandler<HSTRING__ *,IInspectable *> && );
				void MapChangedEventHandler<HSTRING__ *,IInspectable *>( MapChangedEventHandler<HSTRING__ *,IInspectable *> const & );
				void MapChangedEventHandler<HSTRING__ *,IInspectable *>();
				MapChangedEventHandler<HSTRING__ *,IInspectable *> & operator=( MapChangedEventHandler<HSTRING__ *,IInspectable *> && );
				MapChangedEventHandler<HSTRING__ *,IInspectable *> & operator=( MapChangedEventHandler<HSTRING__ *,IInspectable *> const & );
				/*0008*/
			};

			struct MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *> : IUnknown {
				/*0018*/ virtual HRESULT Invoke( IObservableMap<HSTRING__ *,HSTRING__ *> * , IMapChangedEventArgs<HSTRING__ *> * ) = 0;
				void MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *>( MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *> && );
				void MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *>( MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *> const & );
				void MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *>();
				MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *> & operator=( MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *> && );
				MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *> & operator=( MapChangedEventHandler_impl<HSTRING__ *,HSTRING__ *> const & );
				/*0008*/
			};

			struct MapChangedEventHandler_impl<HSTRING__ *,IInspectable *> : IUnknown {
				/*0018*/ virtual HRESULT Invoke( IObservableMap<HSTRING__ *,IInspectable *> * , IMapChangedEventArgs<HSTRING__ *> * ) = 0;
				void MapChangedEventHandler_impl<HSTRING__ *,IInspectable *>( MapChangedEventHandler_impl<HSTRING__ *,IInspectable *> && );
				void MapChangedEventHandler_impl<HSTRING__ *,IInspectable *>( MapChangedEventHandler_impl<HSTRING__ *,IInspectable *> const & );
				void MapChangedEventHandler_impl<HSTRING__ *,IInspectable *>();
				MapChangedEventHandler_impl<HSTRING__ *,IInspectable *> & operator=( MapChangedEventHandler_impl<HSTRING__ *,IInspectable *> && );
				MapChangedEventHandler_impl<HSTRING__ *,IInspectable *> & operator=( MapChangedEventHandler_impl<HSTRING__ *,IInspectable *> const & );
				/*0008*/
			};

			struct VectorChangedEventHandler<HSTRING__ *> : VectorChangedEventHandler_impl<HSTRING__ *> {
				static WCHAR const * z_get_rc_name_impl();
				void VectorChangedEventHandler<HSTRING__ *>( VectorChangedEventHandler<HSTRING__ *> && );
				void VectorChangedEventHandler<HSTRING__ *>( VectorChangedEventHandler<HSTRING__ *> const & );
				void VectorChangedEventHandler<HSTRING__ *>();
				VectorChangedEventHandler<HSTRING__ *> & operator=( VectorChangedEventHandler<HSTRING__ *> && );
				VectorChangedEventHandler<HSTRING__ *> & operator=( VectorChangedEventHandler<HSTRING__ *> const & );
				/*0008*/
			};

			struct VectorChangedEventHandler<IInspectable *> : VectorChangedEventHandler_impl<IInspectable *> {
				static WCHAR const * z_get_rc_name_impl();
				void VectorChangedEventHandler<IInspectable *>( VectorChangedEventHandler<IInspectable *> && );
				void VectorChangedEventHandler<IInspectable *>( VectorChangedEventHandler<IInspectable *> const & );
				void VectorChangedEventHandler<IInspectable *>();
				VectorChangedEventHandler<IInspectable *> & operator=( VectorChangedEventHandler<IInspectable *> && );
				VectorChangedEventHandler<IInspectable *> & operator=( VectorChangedEventHandler<IInspectable *> const & );
				/*0008*/
			};

			struct VectorChangedEventHandler<float> : VectorChangedEventHandler_impl<float> {
				static WCHAR const * z_get_rc_name_impl();
				void VectorChangedEventHandler<float>( VectorChangedEventHandler<float> && );
				void VectorChangedEventHandler<float>( VectorChangedEventHandler<float> const & );
				void VectorChangedEventHandler<float>();
				VectorChangedEventHandler<float> & operator=( VectorChangedEventHandler<float> && );
				VectorChangedEventHandler<float> & operator=( VectorChangedEventHandler<float> const & );
				/*0008*/
			};

			struct VectorChangedEventHandler_impl<HSTRING__ *> : IUnknown {
				/*0018*/ virtual HRESULT Invoke( IObservableVector<HSTRING__ *> * , IVectorChangedEventArgs * ) = 0;
				void VectorChangedEventHandler_impl<HSTRING__ *>( VectorChangedEventHandler_impl<HSTRING__ *> && );
				void VectorChangedEventHandler_impl<HSTRING__ *>( VectorChangedEventHandler_impl<HSTRING__ *> const & );
				void VectorChangedEventHandler_impl<HSTRING__ *>();
				VectorChangedEventHandler_impl<HSTRING__ *> & operator=( VectorChangedEventHandler_impl<HSTRING__ *> && );
				VectorChangedEventHandler_impl<HSTRING__ *> & operator=( VectorChangedEventHandler_impl<HSTRING__ *> const & );
				/*0008*/
			};

			struct VectorChangedEventHandler_impl<IInspectable *> : IUnknown {
				/*0018*/ virtual HRESULT Invoke( IObservableVector<IInspectable *> * , IVectorChangedEventArgs * ) = 0;
				void VectorChangedEventHandler_impl<IInspectable *>( VectorChangedEventHandler_impl<IInspectable *> && );
				void VectorChangedEventHandler_impl<IInspectable *>( VectorChangedEventHandler_impl<IInspectable *> const & );
				void VectorChangedEventHandler_impl<IInspectable *>();
				VectorChangedEventHandler_impl<IInspectable *> & operator=( VectorChangedEventHandler_impl<IInspectable *> && );
				VectorChangedEventHandler_impl<IInspectable *> & operator=( VectorChangedEventHandler_impl<IInspectable *> const & );
				/*0008*/
			};

			struct VectorChangedEventHandler_impl<float> : IUnknown {
				/*0018*/ virtual HRESULT Invoke( IObservableVector<float> * , IVectorChangedEventArgs * ) = 0;
				void VectorChangedEventHandler_impl<float>( VectorChangedEventHandler_impl<float> && );
				void VectorChangedEventHandler_impl<float>( VectorChangedEventHandler_impl<float> const & );
				void VectorChangedEventHandler_impl<float>();
				VectorChangedEventHandler_impl<float> & operator=( VectorChangedEventHandler_impl<float> && );
				VectorChangedEventHandler_impl<float> & operator=( VectorChangedEventHandler_impl<float> const & );
				/*0008*/
			};

			struct is_foundation_struct<DateTime> {
				
				/*0001*/
			};

			struct is_foundation_struct<HSTRING__ *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IInspectable *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IIterable<Point> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<EventRegistrationToken,int> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,IInspectable *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,IWeakReference *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,__int64> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,double> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,float> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,short> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,unsigned char> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<HSTRING__ *,unsigned int> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<IInspectable *,IInspectable *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<_GUID,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<_GUID,IInspectable *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<_GUID,bool> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<__int64,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<__int64,__int64> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<__int64,double> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<__int64,float> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<unsigned int,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<unsigned int,IInspectable *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IKeyValuePair<unsigned int,IWeakReference *> *> {
				
				/*0001*/
			};

			struct is_foundation_struct<IPropertySet *> {
				
				/*0001*/
			};

			struct is_foundation_struct<Point> {
				
				/*0001*/
			};

			struct is_foundation_struct<Rect> {
				
				/*0001*/
			};

			struct is_foundation_struct<Size> {
				
				/*0001*/
			};

			struct is_foundation_struct<Storage::Streams::IBuffer *> {
				
				/*0001*/
			};

			struct is_foundation_struct<TimeSpan> {
				
				/*0001*/
			};

			struct is_foundation_struct<_GUID> {
				
				/*0001*/
			};

			struct is_foundation_struct<__int64> {
				
				/*0001*/
			};

			struct is_foundation_struct<double> {
				
				/*0001*/
			};

			struct is_foundation_struct<float> {
				
				/*0001*/
			};

			struct is_foundation_struct<int> {
				
				/*0001*/
			};

			struct is_foundation_struct<short> {
				
				/*0001*/
			};

			struct is_foundation_struct<unsigned __int64> {
				
				/*0001*/
			};

			struct is_foundation_struct<unsigned char> {
				
				/*0001*/
			};

			struct is_foundation_struct<unsigned int> {
				
				/*0001*/
			};

			struct is_pointer<HSTRING__ *> {
				
				/*0001*/
			};

			struct is_pointer<IInspectable *> {
				
				/*0001*/
			};

			struct is_pointer<IIterable<Point> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<EventRegistrationToken,int> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,IInspectable *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,IWeakReference *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,__int64> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,double> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,float> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,short> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,unsigned char> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<HSTRING__ *,unsigned int> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<IInspectable *,IInspectable *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<_GUID,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<_GUID,IInspectable *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<_GUID,bool> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<__int64,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<__int64,__int64> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<__int64,double> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<__int64,float> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<unsigned int,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<unsigned int,IInspectable *> *> {
				
				/*0001*/
			};

			struct is_pointer<IKeyValuePair<unsigned int,IWeakReference *> *> {
				
				/*0001*/
			};

			struct is_pointer<IPropertySet *> {
				
				/*0001*/
			};

			struct is_pointer<Point> {
				
				/*0001*/
			};

			struct is_pointer<Rect> {
				
				/*0001*/
			};

			struct is_pointer<Storage::Streams::IBuffer *> {
				
				/*0001*/
			};

			struct is_pointer<_GUID> {
				
				/*0001*/
			};

			struct is_pointer<__int64> {
				
				/*0001*/
			};

			struct is_pointer<double> {
				
				/*0001*/
			};

			struct is_pointer<float> {
				
				/*0001*/
			};

			struct is_pointer<int> {
				
				/*0001*/
			};

			struct is_pointer<short> {
				
				/*0001*/
			};

			struct is_pointer<unsigned __int64> {
				
				/*0001*/
			};

			struct is_pointer<unsigned char> {
				
				/*0001*/
			};

			struct is_pointer<unsigned int> {
				
				/*0001*/
			};

			struct supports_cleanup<HSTRING__ *> {
				
				/*0001*/
			};

			struct supports_cleanup<IInspectable *> {
				
				/*0001*/
			};

			struct supports_cleanup<IIterable<Point> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<EventRegistrationToken,int> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,IInspectable *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,IPropertyValue *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,IVector<HSTRING__ *> *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,IWeakReference *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,__int64> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,double> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,float> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,short> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,unsigned char> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<HSTRING__ *,unsigned int> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<IInspectable *,IInspectable *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<_GUID,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<_GUID,IInspectable *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<_GUID,bool> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<__int64,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<__int64,__int64> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<__int64,double> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<__int64,float> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<unsigned int,HSTRING__ *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<unsigned int,IInspectable *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IKeyValuePair<unsigned int,IWeakReference *> *> {
				
				/*0001*/
			};

			struct supports_cleanup<IPropertySet *> {
				
				/*0001*/
			};

			struct supports_cleanup<Internal::AggregateType<bool,unsigned char> > {
				
				/*0001*/
			};

			struct supports_cleanup<Point> {
				
				/*0001*/
			};

			struct supports_cleanup<Rect> {
				
				/*0001*/
			};

			struct supports_cleanup<Storage::Streams::IBuffer *> {
				
				/*0001*/
			};

			struct supports_cleanup<_GUID> {
				
				/*0001*/
			};

			struct supports_cleanup<__int64> {
				
				/*0001*/
			};

			struct supports_cleanup<double> {
				
				/*0001*/
			};

			struct supports_cleanup<float> {
				
				/*0001*/
			};

			struct supports_cleanup<int> {
				
				/*0001*/
			};

			struct supports_cleanup<short> {
				
				/*0001*/
			};

			struct supports_cleanup<unsigned __int64> {
				
				/*0001*/
			};

			struct supports_cleanup<unsigned char> {
				
				/*0001*/
			};

			struct supports_cleanup<unsigned int> {
				
				/*0001*/
			};

		}

		namespace Diagnostics {

			enum CausalityRelation {
				CausalityRelation_AssignDelegate = 0x0,
				CausalityRelation_Join = 0x1,
				CausalityRelation_Choice = 0x2,
				CausalityRelation_Cancel = 0x3,
				CausalityRelation_Error = 0x4
			};

			enum CausalitySource {
				CausalitySource_Application = 0x0,
				CausalitySource_Library = 0x1,
				CausalitySource_System = 0x2
			};

			enum CausalitySynchronousWork {
				CausalitySynchronousWork_CompletionNotification = 0x0,
				CausalitySynchronousWork_ProgressNotification = 0x1,
				CausalitySynchronousWork_Execution = 0x2
			};

			enum CausalityTraceLevel {
				CausalityTraceLevel_Required = 0x0,
				CausalityTraceLevel_Important = 0x1,
				CausalityTraceLevel_Verbose = 0x2
			};

			enum ErrorOptions : UINT {
				ErrorOptions_None = 0x0,
				ErrorOptions_SuppressExceptions = 0x1,
				ErrorOptions_ForceExceptions = 0x2,
				ErrorOptions_UseSetErrorInfo = 0x4,
				ErrorOptions_SuppressSetErrorInfo = 0x8
			};

			struct IAsyncCausalityTracerStatics : IInspectable {
				/*0030*/ virtual HRESULT TraceOperationCreation( CausalityTraceLevel , CausalitySource , _GUID , ULONGLONG , HSTRING__ * , ULONGLONG ) = 0;
				/*0038*/ virtual HRESULT TraceOperationCompletion( CausalityTraceLevel , CausalitySource , _GUID , ULONGLONG , AsyncStatus ) = 0;
				/*0040*/ virtual HRESULT TraceOperationRelation( CausalityTraceLevel , CausalitySource , _GUID , ULONGLONG , CausalityRelation ) = 0;
				/*0048*/ virtual HRESULT TraceSynchronousWorkStart( CausalityTraceLevel , CausalitySource , _GUID , ULONGLONG , CausalitySynchronousWork ) = 0;
				/*0050*/ virtual HRESULT TraceSynchronousWorkCompletion( CausalityTraceLevel , CausalitySource , CausalitySynchronousWork ) = 0;
				/*0058*/ virtual HRESULT add_TracingStatusChanged( IEventHandler<Diagnostics::TracingStatusChangedEventArgs *> * , EventRegistrationToken * ) = 0;
				/*0060*/ virtual HRESULT remove_TracingStatusChanged( EventRegistrationToken ) = 0;
				void IAsyncCausalityTracerStatics( IAsyncCausalityTracerStatics && );
				void IAsyncCausalityTracerStatics( IAsyncCausalityTracerStatics const & );
				void IAsyncCausalityTracerStatics();
				IAsyncCausalityTracerStatics & operator=( IAsyncCausalityTracerStatics && );
				IAsyncCausalityTracerStatics & operator=( IAsyncCausalityTracerStatics const & );
				/*0008*/
			};

			struct IErrorReportingSettings : IInspectable {
				/*0030*/ virtual HRESULT SetErrorOptions( ErrorOptions ) = 0;
				/*0038*/ virtual HRESULT GetErrorOptions( ErrorOptions * ) = 0;
				void IErrorReportingSettings( IErrorReportingSettings && );
				void IErrorReportingSettings( IErrorReportingSettings const & );
				void IErrorReportingSettings();
				IErrorReportingSettings & operator=( IErrorReportingSettings && );
				IErrorReportingSettings & operator=( IErrorReportingSettings const & );
				/*0008*/
			};

			struct ITracingStatusChangedEventArgs : IInspectable {
				/*0030*/ virtual HRESULT get_Enabled( UCHAR * ) = 0;
				/*0038*/ virtual HRESULT get_TraceLevel( CausalityTraceLevel * ) = 0;
				void ITracingStatusChangedEventArgs( ITracingStatusChangedEventArgs && );
				void ITracingStatusChangedEventArgs( ITracingStatusChangedEventArgs const & );
				void ITracingStatusChangedEventArgs();
				ITracingStatusChangedEventArgs & operator=( ITracingStatusChangedEventArgs && );
				ITracingStatusChangedEventArgs & operator=( ITracingStatusChangedEventArgs const & );
				/*0008*/
			};

			enum RoErrorReportingFlags {
				None = 0x0,
				SuppressExceptions = 0x1,
				ForceExceptions = 0x2,
				UseSetErrorInfo = 0x4,
				SuppressSetErrorInfo = 0x8
			};

			class TracingStatusChangedEventArgs;

		}

		struct DateTime {
			/*0000*/ LONGLONG UniversalTime;
			/*0008*/
		};

		struct IAsyncAction : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncActionCompletedHandler * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncActionCompletedHandler * * ) = 0;
			/*0040*/ virtual HRESULT GetResults() = 0;
			void IAsyncAction( IAsyncAction && );
			void IAsyncAction( IAsyncAction const & );
			void IAsyncAction();
			IAsyncAction & operator=( IAsyncAction && );
			IAsyncAction & operator=( IAsyncAction const & );
			/*0008*/
		};

		struct IAsyncActionCompletedHandler : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncAction * , AsyncStatus ) = 0;
			void IAsyncActionCompletedHandler( IAsyncActionCompletedHandler && );
			void IAsyncActionCompletedHandler( IAsyncActionCompletedHandler const & );
			void IAsyncActionCompletedHandler();
			IAsyncActionCompletedHandler & operator=( IAsyncActionCompletedHandler && );
			IAsyncActionCompletedHandler & operator=( IAsyncActionCompletedHandler const & );
			/*0008*/
		};

		struct IAsyncActionProgressHandler<double> : IAsyncActionProgressHandler_impl<double> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncActionProgressHandler<double>( IAsyncActionProgressHandler<double> && );
			void IAsyncActionProgressHandler<double>( IAsyncActionProgressHandler<double> const & );
			void IAsyncActionProgressHandler<double>();
			IAsyncActionProgressHandler<double> & operator=( IAsyncActionProgressHandler<double> && );
			IAsyncActionProgressHandler<double> & operator=( IAsyncActionProgressHandler<double> const & );
			/*0008*/
		};

		struct IAsyncActionProgressHandler<unsigned __int64> : IAsyncActionProgressHandler_impl<unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncActionProgressHandler<unsigned __int64>( IAsyncActionProgressHandler<unsigned __int64> && );
			void IAsyncActionProgressHandler<unsigned __int64>( IAsyncActionProgressHandler<unsigned __int64> const & );
			void IAsyncActionProgressHandler<unsigned __int64>();
			IAsyncActionProgressHandler<unsigned __int64> & operator=( IAsyncActionProgressHandler<unsigned __int64> && );
			IAsyncActionProgressHandler<unsigned __int64> & operator=( IAsyncActionProgressHandler<unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncActionProgressHandler<unsigned int> : IAsyncActionProgressHandler_impl<unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncActionProgressHandler<unsigned int>( IAsyncActionProgressHandler<unsigned int> && );
			void IAsyncActionProgressHandler<unsigned int>( IAsyncActionProgressHandler<unsigned int> const & );
			void IAsyncActionProgressHandler<unsigned int>();
			IAsyncActionProgressHandler<unsigned int> & operator=( IAsyncActionProgressHandler<unsigned int> && );
			IAsyncActionProgressHandler<unsigned int> & operator=( IAsyncActionProgressHandler<unsigned int> const & );
			/*0008*/
		};

		struct IAsyncActionProgressHandler_impl<double> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncActionWithProgress<double> * , double ) = 0;
			void IAsyncActionProgressHandler_impl<double>( IAsyncActionProgressHandler_impl<double> && );
			void IAsyncActionProgressHandler_impl<double>( IAsyncActionProgressHandler_impl<double> const & );
			void IAsyncActionProgressHandler_impl<double>();
			IAsyncActionProgressHandler_impl<double> & operator=( IAsyncActionProgressHandler_impl<double> && );
			IAsyncActionProgressHandler_impl<double> & operator=( IAsyncActionProgressHandler_impl<double> const & );
			/*0008*/
		};

		struct IAsyncActionProgressHandler_impl<unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncActionWithProgress<unsigned __int64> * , ULONGLONG ) = 0;
			void IAsyncActionProgressHandler_impl<unsigned __int64>( IAsyncActionProgressHandler_impl<unsigned __int64> && );
			void IAsyncActionProgressHandler_impl<unsigned __int64>( IAsyncActionProgressHandler_impl<unsigned __int64> const & );
			void IAsyncActionProgressHandler_impl<unsigned __int64>();
			IAsyncActionProgressHandler_impl<unsigned __int64> & operator=( IAsyncActionProgressHandler_impl<unsigned __int64> && );
			IAsyncActionProgressHandler_impl<unsigned __int64> & operator=( IAsyncActionProgressHandler_impl<unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncActionProgressHandler_impl<unsigned int> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncActionWithProgress<unsigned int> * , UINT ) = 0;
			void IAsyncActionProgressHandler_impl<unsigned int>( IAsyncActionProgressHandler_impl<unsigned int> && );
			void IAsyncActionProgressHandler_impl<unsigned int>( IAsyncActionProgressHandler_impl<unsigned int> const & );
			void IAsyncActionProgressHandler_impl<unsigned int>();
			IAsyncActionProgressHandler_impl<unsigned int> & operator=( IAsyncActionProgressHandler_impl<unsigned int> && );
			IAsyncActionProgressHandler_impl<unsigned int> & operator=( IAsyncActionProgressHandler_impl<unsigned int> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgress<double> : IAsyncActionWithProgress_impl<double> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncActionWithProgress<double>( IAsyncActionWithProgress<double> && );
			void IAsyncActionWithProgress<double>( IAsyncActionWithProgress<double> const & );
			void IAsyncActionWithProgress<double>();
			IAsyncActionWithProgress<double> & operator=( IAsyncActionWithProgress<double> && );
			IAsyncActionWithProgress<double> & operator=( IAsyncActionWithProgress<double> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgress<unsigned __int64> : IAsyncActionWithProgress_impl<unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncActionWithProgress<unsigned __int64>( IAsyncActionWithProgress<unsigned __int64> && );
			void IAsyncActionWithProgress<unsigned __int64>( IAsyncActionWithProgress<unsigned __int64> const & );
			void IAsyncActionWithProgress<unsigned __int64>();
			IAsyncActionWithProgress<unsigned __int64> & operator=( IAsyncActionWithProgress<unsigned __int64> && );
			IAsyncActionWithProgress<unsigned __int64> & operator=( IAsyncActionWithProgress<unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgress<unsigned int> : IAsyncActionWithProgress_impl<unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncActionWithProgress<unsigned int>( IAsyncActionWithProgress<unsigned int> && );
			void IAsyncActionWithProgress<unsigned int>( IAsyncActionWithProgress<unsigned int> const & );
			void IAsyncActionWithProgress<unsigned int>();
			IAsyncActionWithProgress<unsigned int> & operator=( IAsyncActionWithProgress<unsigned int> && );
			IAsyncActionWithProgress<unsigned int> & operator=( IAsyncActionWithProgress<unsigned int> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgressCompletedHandler<double> : IAsyncActionWithProgressCompletedHandler_impl<double> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncActionWithProgressCompletedHandler<double>( IAsyncActionWithProgressCompletedHandler<double> && );
			void IAsyncActionWithProgressCompletedHandler<double>( IAsyncActionWithProgressCompletedHandler<double> const & );
			void IAsyncActionWithProgressCompletedHandler<double>();
			IAsyncActionWithProgressCompletedHandler<double> & operator=( IAsyncActionWithProgressCompletedHandler<double> && );
			IAsyncActionWithProgressCompletedHandler<double> & operator=( IAsyncActionWithProgressCompletedHandler<double> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgressCompletedHandler<unsigned __int64> : IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncActionWithProgressCompletedHandler<unsigned __int64>( IAsyncActionWithProgressCompletedHandler<unsigned __int64> && );
			void IAsyncActionWithProgressCompletedHandler<unsigned __int64>( IAsyncActionWithProgressCompletedHandler<unsigned __int64> const & );
			void IAsyncActionWithProgressCompletedHandler<unsigned __int64>();
			IAsyncActionWithProgressCompletedHandler<unsigned __int64> & operator=( IAsyncActionWithProgressCompletedHandler<unsigned __int64> && );
			IAsyncActionWithProgressCompletedHandler<unsigned __int64> & operator=( IAsyncActionWithProgressCompletedHandler<unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgressCompletedHandler<unsigned int> : IAsyncActionWithProgressCompletedHandler_impl<unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncActionWithProgressCompletedHandler<unsigned int>( IAsyncActionWithProgressCompletedHandler<unsigned int> && );
			void IAsyncActionWithProgressCompletedHandler<unsigned int>( IAsyncActionWithProgressCompletedHandler<unsigned int> const & );
			void IAsyncActionWithProgressCompletedHandler<unsigned int>();
			IAsyncActionWithProgressCompletedHandler<unsigned int> & operator=( IAsyncActionWithProgressCompletedHandler<unsigned int> && );
			IAsyncActionWithProgressCompletedHandler<unsigned int> & operator=( IAsyncActionWithProgressCompletedHandler<unsigned int> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgressCompletedHandler_impl<double> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncActionWithProgress<double> * , AsyncStatus ) = 0;
			void IAsyncActionWithProgressCompletedHandler_impl<double>( IAsyncActionWithProgressCompletedHandler_impl<double> && );
			void IAsyncActionWithProgressCompletedHandler_impl<double>( IAsyncActionWithProgressCompletedHandler_impl<double> const & );
			void IAsyncActionWithProgressCompletedHandler_impl<double>();
			IAsyncActionWithProgressCompletedHandler_impl<double> & operator=( IAsyncActionWithProgressCompletedHandler_impl<double> && );
			IAsyncActionWithProgressCompletedHandler_impl<double> & operator=( IAsyncActionWithProgressCompletedHandler_impl<double> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncActionWithProgress<unsigned __int64> * , AsyncStatus ) = 0;
			void IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64>( IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64> && );
			void IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64>( IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64> const & );
			void IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64>();
			IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64> & operator=( IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64> && );
			IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64> & operator=( IAsyncActionWithProgressCompletedHandler_impl<unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgressCompletedHandler_impl<unsigned int> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncActionWithProgress<unsigned int> * , AsyncStatus ) = 0;
			void IAsyncActionWithProgressCompletedHandler_impl<unsigned int>( IAsyncActionWithProgressCompletedHandler_impl<unsigned int> && );
			void IAsyncActionWithProgressCompletedHandler_impl<unsigned int>( IAsyncActionWithProgressCompletedHandler_impl<unsigned int> const & );
			void IAsyncActionWithProgressCompletedHandler_impl<unsigned int>();
			IAsyncActionWithProgressCompletedHandler_impl<unsigned int> & operator=( IAsyncActionWithProgressCompletedHandler_impl<unsigned int> && );
			IAsyncActionWithProgressCompletedHandler_impl<unsigned int> & operator=( IAsyncActionWithProgressCompletedHandler_impl<unsigned int> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgress_impl<double> : IInspectable {
			/*0030*/ virtual HRESULT put_Progress( IAsyncActionProgressHandler<double> * ) = 0;
			/*0038*/ virtual HRESULT get_Progress( IAsyncActionProgressHandler<double> * * ) = 0;
			/*0040*/ virtual HRESULT put_Completed( IAsyncActionWithProgressCompletedHandler<double> * ) = 0;
			/*0048*/ virtual HRESULT get_Completed( IAsyncActionWithProgressCompletedHandler<double> * * ) = 0;
			/*0050*/ virtual HRESULT GetResults() = 0;
			void IAsyncActionWithProgress_impl<double>( IAsyncActionWithProgress_impl<double> && );
			void IAsyncActionWithProgress_impl<double>( IAsyncActionWithProgress_impl<double> const & );
			void IAsyncActionWithProgress_impl<double>();
			IAsyncActionWithProgress_impl<double> & operator=( IAsyncActionWithProgress_impl<double> && );
			IAsyncActionWithProgress_impl<double> & operator=( IAsyncActionWithProgress_impl<double> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgress_impl<unsigned __int64> : IInspectable {
			/*0030*/ virtual HRESULT put_Progress( IAsyncActionProgressHandler<unsigned __int64> * ) = 0;
			/*0038*/ virtual HRESULT get_Progress( IAsyncActionProgressHandler<unsigned __int64> * * ) = 0;
			/*0040*/ virtual HRESULT put_Completed( IAsyncActionWithProgressCompletedHandler<unsigned __int64> * ) = 0;
			/*0048*/ virtual HRESULT get_Completed( IAsyncActionWithProgressCompletedHandler<unsigned __int64> * * ) = 0;
			/*0050*/ virtual HRESULT GetResults() = 0;
			void IAsyncActionWithProgress_impl<unsigned __int64>( IAsyncActionWithProgress_impl<unsigned __int64> && );
			void IAsyncActionWithProgress_impl<unsigned __int64>( IAsyncActionWithProgress_impl<unsigned __int64> const & );
			void IAsyncActionWithProgress_impl<unsigned __int64>();
			IAsyncActionWithProgress_impl<unsigned __int64> & operator=( IAsyncActionWithProgress_impl<unsigned __int64> && );
			IAsyncActionWithProgress_impl<unsigned __int64> & operator=( IAsyncActionWithProgress_impl<unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncActionWithProgress_impl<unsigned int> : IInspectable {
			/*0030*/ virtual HRESULT put_Progress( IAsyncActionProgressHandler<unsigned int> * ) = 0;
			/*0038*/ virtual HRESULT get_Progress( IAsyncActionProgressHandler<unsigned int> * * ) = 0;
			/*0040*/ virtual HRESULT put_Completed( IAsyncActionWithProgressCompletedHandler<unsigned int> * ) = 0;
			/*0048*/ virtual HRESULT get_Completed( IAsyncActionWithProgressCompletedHandler<unsigned int> * * ) = 0;
			/*0050*/ virtual HRESULT GetResults() = 0;
			void IAsyncActionWithProgress_impl<unsigned int>( IAsyncActionWithProgress_impl<unsigned int> && );
			void IAsyncActionWithProgress_impl<unsigned int>( IAsyncActionWithProgress_impl<unsigned int> const & );
			void IAsyncActionWithProgress_impl<unsigned int>();
			IAsyncActionWithProgress_impl<unsigned int> & operator=( IAsyncActionWithProgress_impl<unsigned int> && );
			IAsyncActionWithProgress_impl<unsigned int> & operator=( IAsyncActionWithProgress_impl<unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperation<Collections::IMap<HSTRING__ *,HSTRING__ *> *> : IAsyncOperation_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>( IAsyncOperation<Collections::IMap<HSTRING__ *,HSTRING__ *> *> && );
			void IAsyncOperation<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>( IAsyncOperation<Collections::IMap<HSTRING__ *,HSTRING__ *> *> const & );
			void IAsyncOperation<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>();
			IAsyncOperation<Collections::IMap<HSTRING__ *,HSTRING__ *> *> & operator=( IAsyncOperation<Collections::IMap<HSTRING__ *,HSTRING__ *> *> && );
			IAsyncOperation<Collections::IMap<HSTRING__ *,HSTRING__ *> *> & operator=( IAsyncOperation<Collections::IMap<HSTRING__ *,HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperation<Collections::IMap<HSTRING__ *,IInspectable *> *> : IAsyncOperation_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>( IAsyncOperation<Collections::IMap<HSTRING__ *,IInspectable *> *> && );
			void IAsyncOperation<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>( IAsyncOperation<Collections::IMap<HSTRING__ *,IInspectable *> *> const & );
			void IAsyncOperation<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>();
			IAsyncOperation<Collections::IMap<HSTRING__ *,IInspectable *> *> & operator=( IAsyncOperation<Collections::IMap<HSTRING__ *,IInspectable *> *> && );
			IAsyncOperation<Collections::IMap<HSTRING__ *,IInspectable *> *> & operator=( IAsyncOperation<Collections::IMap<HSTRING__ *,IInspectable *> *> const & );
			/*0008*/
		};

		struct IAsyncOperation<Collections::IPropertySet *> : IAsyncOperation_impl<Collections::IPropertySet *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Foundation::Collections::IPropertySet *>( IAsyncOperation<Collections::IPropertySet *> && );
			void IAsyncOperation<Windows::Foundation::Collections::IPropertySet *>( IAsyncOperation<Collections::IPropertySet *> const & );
			void IAsyncOperation<Windows::Foundation::Collections::IPropertySet *>();
			IAsyncOperation<Collections::IPropertySet *> & operator=( IAsyncOperation<Collections::IPropertySet *> && );
			IAsyncOperation<Collections::IPropertySet *> & operator=( IAsyncOperation<Collections::IPropertySet *> const & );
			/*0008*/
		};

		struct IAsyncOperation<Collections::IVector<HSTRING__ *> *> : IAsyncOperation_impl<Collections::IVector<HSTRING__ *> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IAsyncOperation<Collections::IVector<HSTRING__ *> *> && );
			void IAsyncOperation<Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IAsyncOperation<Collections::IVector<HSTRING__ *> *> const & );
			void IAsyncOperation<Windows::Foundation::Collections::IVector<HSTRING__ *> *>();
			IAsyncOperation<Collections::IVector<HSTRING__ *> *> & operator=( IAsyncOperation<Collections::IVector<HSTRING__ *> *> && );
			IAsyncOperation<Collections::IVector<HSTRING__ *> *> & operator=( IAsyncOperation<Collections::IVector<HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperation<Collections::IVector<unsigned int> *> : IAsyncOperation_impl<Collections::IVector<unsigned int> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Foundation::Collections::IVector<unsigned int> *>( IAsyncOperation<Collections::IVector<unsigned int> *> && );
			void IAsyncOperation<Windows::Foundation::Collections::IVector<unsigned int> *>( IAsyncOperation<Collections::IVector<unsigned int> *> const & );
			void IAsyncOperation<Windows::Foundation::Collections::IVector<unsigned int> *>();
			IAsyncOperation<Collections::IVector<unsigned int> *> & operator=( IAsyncOperation<Collections::IVector<unsigned int> *> && );
			IAsyncOperation<Collections::IVector<unsigned int> *> & operator=( IAsyncOperation<Collections::IVector<unsigned int> *> const & );
			/*0008*/
		};

		struct IAsyncOperation<Collections::IVectorView<Collections::IPropertySet *> *> : IAsyncOperation_impl<Collections::IVectorView<Collections::IPropertySet *> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>( IAsyncOperation<Collections::IVectorView<Collections::IPropertySet *> *> && );
			void IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>( IAsyncOperation<Collections::IVectorView<Collections::IPropertySet *> *> const & );
			void IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>();
			IAsyncOperation<Collections::IVectorView<Collections::IPropertySet *> *> & operator=( IAsyncOperation<Collections::IVectorView<Collections::IPropertySet *> *> && );
			IAsyncOperation<Collections::IVectorView<Collections::IPropertySet *> *> & operator=( IAsyncOperation<Collections::IVectorView<Collections::IPropertySet *> *> const & );
			/*0008*/
		};

		struct IAsyncOperation<Collections::IVectorView<HSTRING__ *> *> : IAsyncOperation_impl<Collections::IVectorView<HSTRING__ *> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>( IAsyncOperation<Collections::IVectorView<HSTRING__ *> *> && );
			void IAsyncOperation<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>( IAsyncOperation<Collections::IVectorView<HSTRING__ *> *> const & );
			void IAsyncOperation<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>();
			IAsyncOperation<Collections::IVectorView<HSTRING__ *> *> & operator=( IAsyncOperation<Collections::IVectorView<HSTRING__ *> *> && );
			IAsyncOperation<Collections::IVectorView<HSTRING__ *> *> & operator=( IAsyncOperation<Collections::IVectorView<HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperation<Collections::IVectorView<bool> *> : IAsyncOperation_impl<Collections::IVectorView<bool> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Foundation::Collections::IVectorView<bool> *>( IAsyncOperation<Collections::IVectorView<bool> *> && );
			void IAsyncOperation<Windows::Foundation::Collections::IVectorView<bool> *>( IAsyncOperation<Collections::IVectorView<bool> *> const & );
			void IAsyncOperation<Windows::Foundation::Collections::IVectorView<bool> *>();
			IAsyncOperation<Collections::IVectorView<bool> *> & operator=( IAsyncOperation<Collections::IVectorView<bool> *> && );
			IAsyncOperation<Collections::IVectorView<bool> *> & operator=( IAsyncOperation<Collections::IVectorView<bool> *> const & );
			/*0008*/
		};

		struct IAsyncOperation<HSTRING__ *> : IAsyncOperation_impl<HSTRING__ *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<HSTRING__ *>( IAsyncOperation<HSTRING__ *> && );
			void IAsyncOperation<HSTRING__ *>( IAsyncOperation<HSTRING__ *> const & );
			void IAsyncOperation<HSTRING__ *>();
			IAsyncOperation<HSTRING__ *> & operator=( IAsyncOperation<HSTRING__ *> && );
			IAsyncOperation<HSTRING__ *> & operator=( IAsyncOperation<HSTRING__ *> const & );
			/*0008*/
		};

		struct IAsyncOperation<IInspectable *> : IAsyncOperation_impl<IInspectable *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<IInspectable *>( IAsyncOperation<IInspectable *> && );
			void IAsyncOperation<IInspectable *>( IAsyncOperation<IInspectable *> const & );
			void IAsyncOperation<IInspectable *>();
			IAsyncOperation<IInspectable *> & operator=( IAsyncOperation<IInspectable *> && );
			IAsyncOperation<IInspectable *> & operator=( IAsyncOperation<IInspectable *> const & );
			/*0008*/
		};

		struct IAsyncOperation<Storage::Streams::IBuffer *> : IAsyncOperation_impl<Storage::Streams::IBuffer *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Storage::Streams::IBuffer *>( IAsyncOperation<Storage::Streams::IBuffer *> && );
			void IAsyncOperation<Windows::Storage::Streams::IBuffer *>( IAsyncOperation<Storage::Streams::IBuffer *> const & );
			void IAsyncOperation<Windows::Storage::Streams::IBuffer *>();
			IAsyncOperation<Storage::Streams::IBuffer *> & operator=( IAsyncOperation<Storage::Streams::IBuffer *> && );
			IAsyncOperation<Storage::Streams::IBuffer *> & operator=( IAsyncOperation<Storage::Streams::IBuffer *> const & );
			/*0008*/
		};

		struct IAsyncOperation<Storage::Streams::IOutputStream *> : IAsyncOperation_impl<Storage::Streams::IOutputStream *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Storage::Streams::IOutputStream *>( IAsyncOperation<Storage::Streams::IOutputStream *> && );
			void IAsyncOperation<Windows::Storage::Streams::IOutputStream *>( IAsyncOperation<Storage::Streams::IOutputStream *> const & );
			void IAsyncOperation<Windows::Storage::Streams::IOutputStream *>();
			IAsyncOperation<Storage::Streams::IOutputStream *> & operator=( IAsyncOperation<Storage::Streams::IOutputStream *> && );
			IAsyncOperation<Storage::Streams::IOutputStream *> & operator=( IAsyncOperation<Storage::Streams::IOutputStream *> const & );
			/*0008*/
		};

		struct IAsyncOperation<Storage::Streams::IRandomAccessStream *> : IAsyncOperation_impl<Storage::Streams::IRandomAccessStream *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream *>( IAsyncOperation<Storage::Streams::IRandomAccessStream *> && );
			void IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream *>( IAsyncOperation<Storage::Streams::IRandomAccessStream *> const & );
			void IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream *>();
			IAsyncOperation<Storage::Streams::IRandomAccessStream *> & operator=( IAsyncOperation<Storage::Streams::IRandomAccessStream *> && );
			IAsyncOperation<Storage::Streams::IRandomAccessStream *> & operator=( IAsyncOperation<Storage::Streams::IRandomAccessStream *> const & );
			/*0008*/
		};

		struct IAsyncOperation<TimeSpan> : IAsyncOperation_impl<TimeSpan> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<Windows::Foundation::TimeSpan>( IAsyncOperation<TimeSpan> && );
			void IAsyncOperation<Windows::Foundation::TimeSpan>( IAsyncOperation<TimeSpan> const & );
			void IAsyncOperation<Windows::Foundation::TimeSpan>();
			IAsyncOperation<TimeSpan> & operator=( IAsyncOperation<TimeSpan> && );
			IAsyncOperation<TimeSpan> & operator=( IAsyncOperation<TimeSpan> const & );
			/*0008*/
		};

		struct IAsyncOperation<_GUID> : IAsyncOperation_impl<_GUID> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<_GUID>( IAsyncOperation<_GUID> && );
			void IAsyncOperation<_GUID>( IAsyncOperation<_GUID> const & );
			void IAsyncOperation<_GUID>();
			IAsyncOperation<_GUID> & operator=( IAsyncOperation<_GUID> && );
			IAsyncOperation<_GUID> & operator=( IAsyncOperation<_GUID> const & );
			/*0008*/
		};

		struct IAsyncOperation<__int64> : IAsyncOperation_impl<__int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<__int64>( IAsyncOperation<__int64> && );
			void IAsyncOperation<__int64>( IAsyncOperation<__int64> const & );
			void IAsyncOperation<__int64>();
			IAsyncOperation<__int64> & operator=( IAsyncOperation<__int64> && );
			IAsyncOperation<__int64> & operator=( IAsyncOperation<__int64> const & );
			/*0008*/
		};

		struct IAsyncOperation<bool> : IAsyncOperation_impl<Internal::AggregateType<bool,unsigned char> > {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<bool>( IAsyncOperation<bool> && );
			void IAsyncOperation<bool>( IAsyncOperation<bool> const & );
			void IAsyncOperation<bool>();
			IAsyncOperation<bool> & operator=( IAsyncOperation<bool> && );
			IAsyncOperation<bool> & operator=( IAsyncOperation<bool> const & );
			/*0008*/
		};

		struct IAsyncOperation<double> : IAsyncOperation_impl<double> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<double>( IAsyncOperation<double> && );
			void IAsyncOperation<double>( IAsyncOperation<double> const & );
			void IAsyncOperation<double>();
			IAsyncOperation<double> & operator=( IAsyncOperation<double> && );
			IAsyncOperation<double> & operator=( IAsyncOperation<double> const & );
			/*0008*/
		};

		struct IAsyncOperation<int> : IAsyncOperation_impl<int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<int>( IAsyncOperation<int> && );
			void IAsyncOperation<int>( IAsyncOperation<int> const & );
			void IAsyncOperation<int>();
			IAsyncOperation<int> & operator=( IAsyncOperation<int> && );
			IAsyncOperation<int> & operator=( IAsyncOperation<int> const & );
			/*0008*/
		};

		struct IAsyncOperation<unsigned __int64> : IAsyncOperation_impl<unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<unsigned __int64>( IAsyncOperation<unsigned __int64> && );
			void IAsyncOperation<unsigned __int64>( IAsyncOperation<unsigned __int64> const & );
			void IAsyncOperation<unsigned __int64>();
			IAsyncOperation<unsigned __int64> & operator=( IAsyncOperation<unsigned __int64> && );
			IAsyncOperation<unsigned __int64> & operator=( IAsyncOperation<unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperation<unsigned int> : IAsyncOperation_impl<unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperation<unsigned int>( IAsyncOperation<unsigned int> && );
			void IAsyncOperation<unsigned int>( IAsyncOperation<unsigned int> const & );
			void IAsyncOperation<unsigned int>();
			IAsyncOperation<unsigned int> & operator=( IAsyncOperation<unsigned int> && );
			IAsyncOperation<unsigned int> & operator=( IAsyncOperation<unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,HSTRING__ *> *> : IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,HSTRING__ *> *> && );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,HSTRING__ *> *> const & );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>();
			IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,HSTRING__ *> *> && );
			IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,IInspectable *> *> : IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,IInspectable *> *> && );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,IInspectable *> *> const & );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>();
			IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,IInspectable *> *> & operator=( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,IInspectable *> *> && );
			IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,IInspectable *> *> & operator=( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,IInspectable *> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Collections::IPropertySet *> : IAsyncOperationCompletedHandler_impl<Collections::IPropertySet *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IPropertySet *>( IAsyncOperationCompletedHandler<Collections::IPropertySet *> && );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IPropertySet *>( IAsyncOperationCompletedHandler<Collections::IPropertySet *> const & );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IPropertySet *>();
			IAsyncOperationCompletedHandler<Collections::IPropertySet *> & operator=( IAsyncOperationCompletedHandler<Collections::IPropertySet *> && );
			IAsyncOperationCompletedHandler<Collections::IPropertySet *> & operator=( IAsyncOperationCompletedHandler<Collections::IPropertySet *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Collections::IVector<HSTRING__ *> *> : IAsyncOperationCompletedHandler_impl<Collections::IVector<HSTRING__ *> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IAsyncOperationCompletedHandler<Collections::IVector<HSTRING__ *> *> && );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IAsyncOperationCompletedHandler<Collections::IVector<HSTRING__ *> *> const & );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVector<HSTRING__ *> *>();
			IAsyncOperationCompletedHandler<Collections::IVector<HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler<Collections::IVector<HSTRING__ *> *> && );
			IAsyncOperationCompletedHandler<Collections::IVector<HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler<Collections::IVector<HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Collections::IVector<unsigned int> *> : IAsyncOperationCompletedHandler_impl<Collections::IVector<unsigned int> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVector<unsigned int> *>( IAsyncOperationCompletedHandler<Collections::IVector<unsigned int> *> && );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVector<unsigned int> *>( IAsyncOperationCompletedHandler<Collections::IVector<unsigned int> *> const & );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVector<unsigned int> *>();
			IAsyncOperationCompletedHandler<Collections::IVector<unsigned int> *> & operator=( IAsyncOperationCompletedHandler<Collections::IVector<unsigned int> *> && );
			IAsyncOperationCompletedHandler<Collections::IVector<unsigned int> *> & operator=( IAsyncOperationCompletedHandler<Collections::IVector<unsigned int> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Collections::IVectorView<Collections::IPropertySet *> *> : IAsyncOperationCompletedHandler_impl<Collections::IVectorView<Collections::IPropertySet *> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>( IAsyncOperationCompletedHandler<Collections::IVectorView<Collections::IPropertySet *> *> && );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>( IAsyncOperationCompletedHandler<Collections::IVectorView<Collections::IPropertySet *> *> const & );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>();
			IAsyncOperationCompletedHandler<Collections::IVectorView<Collections::IPropertySet *> *> & operator=( IAsyncOperationCompletedHandler<Collections::IVectorView<Collections::IPropertySet *> *> && );
			IAsyncOperationCompletedHandler<Collections::IVectorView<Collections::IPropertySet *> *> & operator=( IAsyncOperationCompletedHandler<Collections::IVectorView<Collections::IPropertySet *> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Collections::IVectorView<HSTRING__ *> *> : IAsyncOperationCompletedHandler_impl<Collections::IVectorView<HSTRING__ *> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>( IAsyncOperationCompletedHandler<Collections::IVectorView<HSTRING__ *> *> && );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>( IAsyncOperationCompletedHandler<Collections::IVectorView<HSTRING__ *> *> const & );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>();
			IAsyncOperationCompletedHandler<Collections::IVectorView<HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler<Collections::IVectorView<HSTRING__ *> *> && );
			IAsyncOperationCompletedHandler<Collections::IVectorView<HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler<Collections::IVectorView<HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Collections::IVectorView<bool> *> : IAsyncOperationCompletedHandler_impl<Collections::IVectorView<bool> *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<bool> *>( IAsyncOperationCompletedHandler<Collections::IVectorView<bool> *> && );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<bool> *>( IAsyncOperationCompletedHandler<Collections::IVectorView<bool> *> const & );
			void IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<bool> *>();
			IAsyncOperationCompletedHandler<Collections::IVectorView<bool> *> & operator=( IAsyncOperationCompletedHandler<Collections::IVectorView<bool> *> && );
			IAsyncOperationCompletedHandler<Collections::IVectorView<bool> *> & operator=( IAsyncOperationCompletedHandler<Collections::IVectorView<bool> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<HSTRING__ *> : IAsyncOperationCompletedHandler_impl<HSTRING__ *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<HSTRING__ *>( IAsyncOperationCompletedHandler<HSTRING__ *> && );
			void IAsyncOperationCompletedHandler<HSTRING__ *>( IAsyncOperationCompletedHandler<HSTRING__ *> const & );
			void IAsyncOperationCompletedHandler<HSTRING__ *>();
			IAsyncOperationCompletedHandler<HSTRING__ *> & operator=( IAsyncOperationCompletedHandler<HSTRING__ *> && );
			IAsyncOperationCompletedHandler<HSTRING__ *> & operator=( IAsyncOperationCompletedHandler<HSTRING__ *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<IInspectable *> : IAsyncOperationCompletedHandler_impl<IInspectable *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<IInspectable *>( IAsyncOperationCompletedHandler<IInspectable *> && );
			void IAsyncOperationCompletedHandler<IInspectable *>( IAsyncOperationCompletedHandler<IInspectable *> const & );
			void IAsyncOperationCompletedHandler<IInspectable *>();
			IAsyncOperationCompletedHandler<IInspectable *> & operator=( IAsyncOperationCompletedHandler<IInspectable *> && );
			IAsyncOperationCompletedHandler<IInspectable *> & operator=( IAsyncOperationCompletedHandler<IInspectable *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Storage::Streams::IBuffer *> : IAsyncOperationCompletedHandler_impl<Storage::Streams::IBuffer *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Storage::Streams::IBuffer *>( IAsyncOperationCompletedHandler<Storage::Streams::IBuffer *> && );
			void IAsyncOperationCompletedHandler<Windows::Storage::Streams::IBuffer *>( IAsyncOperationCompletedHandler<Storage::Streams::IBuffer *> const & );
			void IAsyncOperationCompletedHandler<Windows::Storage::Streams::IBuffer *>();
			IAsyncOperationCompletedHandler<Storage::Streams::IBuffer *> & operator=( IAsyncOperationCompletedHandler<Storage::Streams::IBuffer *> && );
			IAsyncOperationCompletedHandler<Storage::Streams::IBuffer *> & operator=( IAsyncOperationCompletedHandler<Storage::Streams::IBuffer *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Storage::Streams::IOutputStream *> : IAsyncOperationCompletedHandler_impl<Storage::Streams::IOutputStream *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Storage::Streams::IOutputStream *>( IAsyncOperationCompletedHandler<Storage::Streams::IOutputStream *> && );
			void IAsyncOperationCompletedHandler<Windows::Storage::Streams::IOutputStream *>( IAsyncOperationCompletedHandler<Storage::Streams::IOutputStream *> const & );
			void IAsyncOperationCompletedHandler<Windows::Storage::Streams::IOutputStream *>();
			IAsyncOperationCompletedHandler<Storage::Streams::IOutputStream *> & operator=( IAsyncOperationCompletedHandler<Storage::Streams::IOutputStream *> && );
			IAsyncOperationCompletedHandler<Storage::Streams::IOutputStream *> & operator=( IAsyncOperationCompletedHandler<Storage::Streams::IOutputStream *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStream *> : IAsyncOperationCompletedHandler_impl<Storage::Streams::IRandomAccessStream *> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Storage::Streams::IRandomAccessStream *>( IAsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStream *> && );
			void IAsyncOperationCompletedHandler<Windows::Storage::Streams::IRandomAccessStream *>( IAsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStream *> const & );
			void IAsyncOperationCompletedHandler<Windows::Storage::Streams::IRandomAccessStream *>();
			IAsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStream *> & operator=( IAsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStream *> && );
			IAsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStream *> & operator=( IAsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStream *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<TimeSpan> : IAsyncOperationCompletedHandler_impl<TimeSpan> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<Windows::Foundation::TimeSpan>( IAsyncOperationCompletedHandler<TimeSpan> && );
			void IAsyncOperationCompletedHandler<Windows::Foundation::TimeSpan>( IAsyncOperationCompletedHandler<TimeSpan> const & );
			void IAsyncOperationCompletedHandler<Windows::Foundation::TimeSpan>();
			IAsyncOperationCompletedHandler<TimeSpan> & operator=( IAsyncOperationCompletedHandler<TimeSpan> && );
			IAsyncOperationCompletedHandler<TimeSpan> & operator=( IAsyncOperationCompletedHandler<TimeSpan> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<_GUID> : IAsyncOperationCompletedHandler_impl<_GUID> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<_GUID>( IAsyncOperationCompletedHandler<_GUID> && );
			void IAsyncOperationCompletedHandler<_GUID>( IAsyncOperationCompletedHandler<_GUID> const & );
			void IAsyncOperationCompletedHandler<_GUID>();
			IAsyncOperationCompletedHandler<_GUID> & operator=( IAsyncOperationCompletedHandler<_GUID> && );
			IAsyncOperationCompletedHandler<_GUID> & operator=( IAsyncOperationCompletedHandler<_GUID> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<__int64> : IAsyncOperationCompletedHandler_impl<__int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<__int64>( IAsyncOperationCompletedHandler<__int64> && );
			void IAsyncOperationCompletedHandler<__int64>( IAsyncOperationCompletedHandler<__int64> const & );
			void IAsyncOperationCompletedHandler<__int64>();
			IAsyncOperationCompletedHandler<__int64> & operator=( IAsyncOperationCompletedHandler<__int64> && );
			IAsyncOperationCompletedHandler<__int64> & operator=( IAsyncOperationCompletedHandler<__int64> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<bool> : IAsyncOperationCompletedHandler_impl<Internal::AggregateType<bool,unsigned char> > {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<bool>( IAsyncOperationCompletedHandler<bool> && );
			void IAsyncOperationCompletedHandler<bool>( IAsyncOperationCompletedHandler<bool> const & );
			void IAsyncOperationCompletedHandler<bool>();
			IAsyncOperationCompletedHandler<bool> & operator=( IAsyncOperationCompletedHandler<bool> && );
			IAsyncOperationCompletedHandler<bool> & operator=( IAsyncOperationCompletedHandler<bool> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<double> : IAsyncOperationCompletedHandler_impl<double> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<double>( IAsyncOperationCompletedHandler<double> && );
			void IAsyncOperationCompletedHandler<double>( IAsyncOperationCompletedHandler<double> const & );
			void IAsyncOperationCompletedHandler<double>();
			IAsyncOperationCompletedHandler<double> & operator=( IAsyncOperationCompletedHandler<double> && );
			IAsyncOperationCompletedHandler<double> & operator=( IAsyncOperationCompletedHandler<double> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<int> : IAsyncOperationCompletedHandler_impl<int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<int>( IAsyncOperationCompletedHandler<int> && );
			void IAsyncOperationCompletedHandler<int>( IAsyncOperationCompletedHandler<int> const & );
			void IAsyncOperationCompletedHandler<int>();
			IAsyncOperationCompletedHandler<int> & operator=( IAsyncOperationCompletedHandler<int> && );
			IAsyncOperationCompletedHandler<int> & operator=( IAsyncOperationCompletedHandler<int> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<unsigned __int64> : IAsyncOperationCompletedHandler_impl<unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<unsigned __int64>( IAsyncOperationCompletedHandler<unsigned __int64> && );
			void IAsyncOperationCompletedHandler<unsigned __int64>( IAsyncOperationCompletedHandler<unsigned __int64> const & );
			void IAsyncOperationCompletedHandler<unsigned __int64>();
			IAsyncOperationCompletedHandler<unsigned __int64> & operator=( IAsyncOperationCompletedHandler<unsigned __int64> && );
			IAsyncOperationCompletedHandler<unsigned __int64> & operator=( IAsyncOperationCompletedHandler<unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler<unsigned int> : IAsyncOperationCompletedHandler_impl<unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationCompletedHandler<unsigned int>( IAsyncOperationCompletedHandler<unsigned int> && );
			void IAsyncOperationCompletedHandler<unsigned int>( IAsyncOperationCompletedHandler<unsigned int> const & );
			void IAsyncOperationCompletedHandler<unsigned int>();
			IAsyncOperationCompletedHandler<unsigned int> & operator=( IAsyncOperationCompletedHandler<unsigned int> && );
			IAsyncOperationCompletedHandler<unsigned int> & operator=( IAsyncOperationCompletedHandler<unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Collections::IMap<HSTRING__ *,HSTRING__ *> *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>( IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>( IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>();
			IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> && );
			IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Collections::IMap<HSTRING__ *,IInspectable *> *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>( IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>( IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>();
			IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> && );
			IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Collections::IPropertySet *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Collections::IPropertySet *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IPropertySet *>( IAsyncOperationCompletedHandler_impl<Collections::IPropertySet *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IPropertySet *>( IAsyncOperationCompletedHandler_impl<Collections::IPropertySet *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IPropertySet *>();
			IAsyncOperationCompletedHandler_impl<Collections::IPropertySet *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IPropertySet *> && );
			IAsyncOperationCompletedHandler_impl<Collections::IPropertySet *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IPropertySet *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Collections::IVector<HSTRING__ *> *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Collections::IVector<HSTRING__ *> *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IAsyncOperationCompletedHandler_impl<Collections::IVector<HSTRING__ *> *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IAsyncOperationCompletedHandler_impl<Collections::IVector<HSTRING__ *> *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVector<HSTRING__ *> *>();
			IAsyncOperationCompletedHandler_impl<Collections::IVector<HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IVector<HSTRING__ *> *> && );
			IAsyncOperationCompletedHandler_impl<Collections::IVector<HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IVector<HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Collections::IVector<unsigned int> *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Collections::IVector<unsigned int> *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVector<unsigned int> *>( IAsyncOperationCompletedHandler_impl<Collections::IVector<unsigned int> *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVector<unsigned int> *>( IAsyncOperationCompletedHandler_impl<Collections::IVector<unsigned int> *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVector<unsigned int> *>();
			IAsyncOperationCompletedHandler_impl<Collections::IVector<unsigned int> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IVector<unsigned int> *> && );
			IAsyncOperationCompletedHandler_impl<Collections::IVector<unsigned int> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IVector<unsigned int> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Collections::IVectorView<Collections::IPropertySet *> *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Collections::IVectorView<Collections::IPropertySet *> *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<Collections::IPropertySet *> *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<Collections::IPropertySet *> *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>();
			IAsyncOperationCompletedHandler_impl<Collections::IVectorView<Collections::IPropertySet *> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<Collections::IPropertySet *> *> && );
			IAsyncOperationCompletedHandler_impl<Collections::IVectorView<Collections::IPropertySet *> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<Collections::IPropertySet *> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Collections::IVectorView<HSTRING__ *> *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Collections::IVectorView<HSTRING__ *> *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<HSTRING__ *> *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<HSTRING__ *> *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>();
			IAsyncOperationCompletedHandler_impl<Collections::IVectorView<HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<HSTRING__ *> *> && );
			IAsyncOperationCompletedHandler_impl<Collections::IVectorView<HSTRING__ *> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Collections::IVectorView<bool> *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Collections::IVectorView<bool> *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVectorView<bool> *>( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<bool> *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVectorView<bool> *>( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<bool> *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Collections::IVectorView<bool> *>();
			IAsyncOperationCompletedHandler_impl<Collections::IVectorView<bool> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<bool> *> && );
			IAsyncOperationCompletedHandler_impl<Collections::IVectorView<bool> *> & operator=( IAsyncOperationCompletedHandler_impl<Collections::IVectorView<bool> *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<HSTRING__ *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<HSTRING__ *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<HSTRING__ *>( IAsyncOperationCompletedHandler_impl<HSTRING__ *> && );
			void IAsyncOperationCompletedHandler_impl<HSTRING__ *>( IAsyncOperationCompletedHandler_impl<HSTRING__ *> const & );
			void IAsyncOperationCompletedHandler_impl<HSTRING__ *>();
			IAsyncOperationCompletedHandler_impl<HSTRING__ *> & operator=( IAsyncOperationCompletedHandler_impl<HSTRING__ *> && );
			IAsyncOperationCompletedHandler_impl<HSTRING__ *> & operator=( IAsyncOperationCompletedHandler_impl<HSTRING__ *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<IInspectable *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<IInspectable *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<IInspectable *>( IAsyncOperationCompletedHandler_impl<IInspectable *> && );
			void IAsyncOperationCompletedHandler_impl<IInspectable *>( IAsyncOperationCompletedHandler_impl<IInspectable *> const & );
			void IAsyncOperationCompletedHandler_impl<IInspectable *>();
			IAsyncOperationCompletedHandler_impl<IInspectable *> & operator=( IAsyncOperationCompletedHandler_impl<IInspectable *> && );
			IAsyncOperationCompletedHandler_impl<IInspectable *> & operator=( IAsyncOperationCompletedHandler_impl<IInspectable *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Internal::AggregateType<bool,unsigned char> > : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<bool> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IAsyncOperationCompletedHandler_impl<Internal::AggregateType<bool,unsigned char> > && );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IAsyncOperationCompletedHandler_impl<Internal::AggregateType<bool,unsigned char> > const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >();
			IAsyncOperationCompletedHandler_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IAsyncOperationCompletedHandler_impl<Internal::AggregateType<bool,unsigned char> > && );
			IAsyncOperationCompletedHandler_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IAsyncOperationCompletedHandler_impl<Internal::AggregateType<bool,unsigned char> > const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Storage::Streams::IBuffer *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Storage::Streams::IBuffer *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Storage::Streams::IBuffer *>( IAsyncOperationCompletedHandler_impl<Storage::Streams::IBuffer *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Storage::Streams::IBuffer *>( IAsyncOperationCompletedHandler_impl<Storage::Streams::IBuffer *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Storage::Streams::IBuffer *>();
			IAsyncOperationCompletedHandler_impl<Storage::Streams::IBuffer *> & operator=( IAsyncOperationCompletedHandler_impl<Storage::Streams::IBuffer *> && );
			IAsyncOperationCompletedHandler_impl<Storage::Streams::IBuffer *> & operator=( IAsyncOperationCompletedHandler_impl<Storage::Streams::IBuffer *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Storage::Streams::IOutputStream *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Storage::Streams::IOutputStream *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Storage::Streams::IOutputStream *>( IAsyncOperationCompletedHandler_impl<Storage::Streams::IOutputStream *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Storage::Streams::IOutputStream *>( IAsyncOperationCompletedHandler_impl<Storage::Streams::IOutputStream *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Storage::Streams::IOutputStream *>();
			IAsyncOperationCompletedHandler_impl<Storage::Streams::IOutputStream *> & operator=( IAsyncOperationCompletedHandler_impl<Storage::Streams::IOutputStream *> && );
			IAsyncOperationCompletedHandler_impl<Storage::Streams::IOutputStream *> & operator=( IAsyncOperationCompletedHandler_impl<Storage::Streams::IOutputStream *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<Storage::Streams::IRandomAccessStream *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<Storage::Streams::IRandomAccessStream *> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Storage::Streams::IRandomAccessStream *>( IAsyncOperationCompletedHandler_impl<Storage::Streams::IRandomAccessStream *> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Storage::Streams::IRandomAccessStream *>( IAsyncOperationCompletedHandler_impl<Storage::Streams::IRandomAccessStream *> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Storage::Streams::IRandomAccessStream *>();
			IAsyncOperationCompletedHandler_impl<Storage::Streams::IRandomAccessStream *> & operator=( IAsyncOperationCompletedHandler_impl<Storage::Streams::IRandomAccessStream *> && );
			IAsyncOperationCompletedHandler_impl<Storage::Streams::IRandomAccessStream *> & operator=( IAsyncOperationCompletedHandler_impl<Storage::Streams::IRandomAccessStream *> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<TimeSpan> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<TimeSpan> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::TimeSpan>( IAsyncOperationCompletedHandler_impl<TimeSpan> && );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::TimeSpan>( IAsyncOperationCompletedHandler_impl<TimeSpan> const & );
			void IAsyncOperationCompletedHandler_impl<Windows::Foundation::TimeSpan>();
			IAsyncOperationCompletedHandler_impl<TimeSpan> & operator=( IAsyncOperationCompletedHandler_impl<TimeSpan> && );
			IAsyncOperationCompletedHandler_impl<TimeSpan> & operator=( IAsyncOperationCompletedHandler_impl<TimeSpan> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<_GUID> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<_GUID> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<_GUID>( IAsyncOperationCompletedHandler_impl<_GUID> && );
			void IAsyncOperationCompletedHandler_impl<_GUID>( IAsyncOperationCompletedHandler_impl<_GUID> const & );
			void IAsyncOperationCompletedHandler_impl<_GUID>();
			IAsyncOperationCompletedHandler_impl<_GUID> & operator=( IAsyncOperationCompletedHandler_impl<_GUID> && );
			IAsyncOperationCompletedHandler_impl<_GUID> & operator=( IAsyncOperationCompletedHandler_impl<_GUID> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<__int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<__int64> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<__int64>( IAsyncOperationCompletedHandler_impl<__int64> && );
			void IAsyncOperationCompletedHandler_impl<__int64>( IAsyncOperationCompletedHandler_impl<__int64> const & );
			void IAsyncOperationCompletedHandler_impl<__int64>();
			IAsyncOperationCompletedHandler_impl<__int64> & operator=( IAsyncOperationCompletedHandler_impl<__int64> && );
			IAsyncOperationCompletedHandler_impl<__int64> & operator=( IAsyncOperationCompletedHandler_impl<__int64> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<double> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<double> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<double>( IAsyncOperationCompletedHandler_impl<double> && );
			void IAsyncOperationCompletedHandler_impl<double>( IAsyncOperationCompletedHandler_impl<double> const & );
			void IAsyncOperationCompletedHandler_impl<double>();
			IAsyncOperationCompletedHandler_impl<double> & operator=( IAsyncOperationCompletedHandler_impl<double> && );
			IAsyncOperationCompletedHandler_impl<double> & operator=( IAsyncOperationCompletedHandler_impl<double> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<int> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<int> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<int>( IAsyncOperationCompletedHandler_impl<int> && );
			void IAsyncOperationCompletedHandler_impl<int>( IAsyncOperationCompletedHandler_impl<int> const & );
			void IAsyncOperationCompletedHandler_impl<int>();
			IAsyncOperationCompletedHandler_impl<int> & operator=( IAsyncOperationCompletedHandler_impl<int> && );
			IAsyncOperationCompletedHandler_impl<int> & operator=( IAsyncOperationCompletedHandler_impl<int> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<unsigned __int64> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<unsigned __int64>( IAsyncOperationCompletedHandler_impl<unsigned __int64> && );
			void IAsyncOperationCompletedHandler_impl<unsigned __int64>( IAsyncOperationCompletedHandler_impl<unsigned __int64> const & );
			void IAsyncOperationCompletedHandler_impl<unsigned __int64>();
			IAsyncOperationCompletedHandler_impl<unsigned __int64> & operator=( IAsyncOperationCompletedHandler_impl<unsigned __int64> && );
			IAsyncOperationCompletedHandler_impl<unsigned __int64> & operator=( IAsyncOperationCompletedHandler_impl<unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationCompletedHandler_impl<unsigned int> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperation<unsigned int> * , AsyncStatus ) = 0;
			void IAsyncOperationCompletedHandler_impl<unsigned int>( IAsyncOperationCompletedHandler_impl<unsigned int> && );
			void IAsyncOperationCompletedHandler_impl<unsigned int>( IAsyncOperationCompletedHandler_impl<unsigned int> const & );
			void IAsyncOperationCompletedHandler_impl<unsigned int>();
			IAsyncOperationCompletedHandler_impl<unsigned int> & operator=( IAsyncOperationCompletedHandler_impl<unsigned int> && );
			IAsyncOperationCompletedHandler_impl<unsigned int> & operator=( IAsyncOperationCompletedHandler_impl<unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64> : IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64>( IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64> && );
			void IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64>( IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64> const & );
			void IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64>();
			IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64> && );
			IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned __int64> : IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned __int64> && );
			void IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned __int64> const & );
			void IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned __int64>();
			IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned __int64> && );
			IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> : IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> && );
			void IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> const & );
			void IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>();
			IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> && );
			IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler<Storage::Streams::IInputStream *,unsigned __int64> : IAsyncOperationProgressHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationProgressHandler<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationProgressHandler<Storage::Streams::IInputStream *,unsigned __int64> && );
			void IAsyncOperationProgressHandler<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationProgressHandler<Storage::Streams::IInputStream *,unsigned __int64> const & );
			void IAsyncOperationProgressHandler<Windows::Storage::Streams::IInputStream *,unsigned __int64>();
			IAsyncOperationProgressHandler<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationProgressHandler<Storage::Streams::IInputStream *,unsigned __int64> && );
			IAsyncOperationProgressHandler<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationProgressHandler<Storage::Streams::IInputStream *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler<int,int> : IAsyncOperationProgressHandler_impl<int,int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationProgressHandler<int,int>( IAsyncOperationProgressHandler<int,int> && );
			void IAsyncOperationProgressHandler<int,int>( IAsyncOperationProgressHandler<int,int> const & );
			void IAsyncOperationProgressHandler<int,int>();
			IAsyncOperationProgressHandler<int,int> & operator=( IAsyncOperationProgressHandler<int,int> && );
			IAsyncOperationProgressHandler<int,int> & operator=( IAsyncOperationProgressHandler<int,int> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64> : IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64>( IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64> && );
			void IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64>( IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64> const & );
			void IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64>();
			IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64> && );
			IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler<unsigned int,unsigned int> : IAsyncOperationProgressHandler_impl<unsigned int,unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationProgressHandler<unsigned int,unsigned int>( IAsyncOperationProgressHandler<unsigned int,unsigned int> && );
			void IAsyncOperationProgressHandler<unsigned int,unsigned int>( IAsyncOperationProgressHandler<unsigned int,unsigned int> const & );
			void IAsyncOperationProgressHandler<unsigned int,unsigned int>();
			IAsyncOperationProgressHandler<unsigned int,unsigned int> & operator=( IAsyncOperationProgressHandler<unsigned int,unsigned int> && );
			IAsyncOperationProgressHandler<unsigned int,unsigned int> & operator=( IAsyncOperationProgressHandler<unsigned int,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64> * , ULONGLONG ) = 0;
			void IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64>( IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64> && );
			void IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64>( IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64> const & );
			void IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64>();
			IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64> && );
			IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationProgressHandler_impl<HSTRING__ *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned __int64> * , ULONGLONG ) = 0;
			void IAsyncOperationProgressHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> && );
			void IAsyncOperationProgressHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> const & );
			void IAsyncOperationProgressHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned __int64>();
			IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> && );
			IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned int> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * , UINT ) = 0;
			void IAsyncOperationProgressHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned int> && );
			void IAsyncOperationProgressHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned int> const & );
			void IAsyncOperationProgressHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned int>();
			IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned int> && );
			IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationProgressHandler_impl<Storage::Streams::IBuffer *,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<Storage::Streams::IInputStream *,unsigned __int64> * , ULONGLONG ) = 0;
			void IAsyncOperationProgressHandler_impl<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationProgressHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> && );
			void IAsyncOperationProgressHandler_impl<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationProgressHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> const & );
			void IAsyncOperationProgressHandler_impl<Windows::Storage::Streams::IInputStream *,unsigned __int64>();
			IAsyncOperationProgressHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationProgressHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> && );
			IAsyncOperationProgressHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationProgressHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler_impl<int,int> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<int,int> * , INT ) = 0;
			void IAsyncOperationProgressHandler_impl<int,int>( IAsyncOperationProgressHandler_impl<int,int> && );
			void IAsyncOperationProgressHandler_impl<int,int>( IAsyncOperationProgressHandler_impl<int,int> const & );
			void IAsyncOperationProgressHandler_impl<int,int>();
			IAsyncOperationProgressHandler_impl<int,int> & operator=( IAsyncOperationProgressHandler_impl<int,int> && );
			IAsyncOperationProgressHandler_impl<int,int> & operator=( IAsyncOperationProgressHandler_impl<int,int> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> * , ULONGLONG ) = 0;
			void IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64>( IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64> && );
			void IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64>( IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64> const & );
			void IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64>();
			IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64> && );
			IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationProgressHandler_impl<unsigned __int64,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationProgressHandler_impl<unsigned int,unsigned int> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<unsigned int,unsigned int> * , UINT ) = 0;
			void IAsyncOperationProgressHandler_impl<unsigned int,unsigned int>( IAsyncOperationProgressHandler_impl<unsigned int,unsigned int> && );
			void IAsyncOperationProgressHandler_impl<unsigned int,unsigned int>( IAsyncOperationProgressHandler_impl<unsigned int,unsigned int> const & );
			void IAsyncOperationProgressHandler_impl<unsigned int,unsigned int>();
			IAsyncOperationProgressHandler_impl<unsigned int,unsigned int> & operator=( IAsyncOperationProgressHandler_impl<unsigned int,unsigned int> && );
			IAsyncOperationProgressHandler_impl<unsigned int,unsigned int> & operator=( IAsyncOperationProgressHandler_impl<unsigned int,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64> : IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64>( IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64> && );
			void IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64>( IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64> const & );
			void IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64>();
			IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64> && );
			IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned __int64> : IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned __int64> && );
			void IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned __int64> const & );
			void IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned __int64>();
			IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned __int64> && );
			IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> : IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> && );
			void IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> const & );
			void IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>();
			IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> && );
			IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress<Storage::Streams::IInputStream *,unsigned __int64> : IAsyncOperationWithProgress_impl<Storage::Streams::IInputStream *,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationWithProgress<Storage::Streams::IInputStream *,unsigned __int64> && );
			void IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationWithProgress<Storage::Streams::IInputStream *,unsigned __int64> const & );
			void IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream *,unsigned __int64>();
			IAsyncOperationWithProgress<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationWithProgress<Storage::Streams::IInputStream *,unsigned __int64> && );
			IAsyncOperationWithProgress<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationWithProgress<Storage::Streams::IInputStream *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress<int,int> : IAsyncOperationWithProgress_impl<int,int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgress<int,int>( IAsyncOperationWithProgress<int,int> && );
			void IAsyncOperationWithProgress<int,int>( IAsyncOperationWithProgress<int,int> const & );
			void IAsyncOperationWithProgress<int,int>();
			IAsyncOperationWithProgress<int,int> & operator=( IAsyncOperationWithProgress<int,int> && );
			IAsyncOperationWithProgress<int,int> & operator=( IAsyncOperationWithProgress<int,int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> : IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgress<unsigned __int64,unsigned __int64>( IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> && );
			void IAsyncOperationWithProgress<unsigned __int64,unsigned __int64>( IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> const & );
			void IAsyncOperationWithProgress<unsigned __int64,unsigned __int64>();
			IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> && );
			IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress<unsigned int,unsigned int> : IAsyncOperationWithProgress_impl<unsigned int,unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgress<unsigned int,unsigned int>( IAsyncOperationWithProgress<unsigned int,unsigned int> && );
			void IAsyncOperationWithProgress<unsigned int,unsigned int>( IAsyncOperationWithProgress<unsigned int,unsigned int> const & );
			void IAsyncOperationWithProgress<unsigned int,unsigned int>();
			IAsyncOperationWithProgress<unsigned int,unsigned int> & operator=( IAsyncOperationWithProgress<unsigned int,unsigned int> && );
			IAsyncOperationWithProgress<unsigned int,unsigned int> & operator=( IAsyncOperationWithProgress<unsigned int,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64> : IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64> && );
			void IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64> const & );
			void IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64>();
			IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64> && );
			IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned __int64> : IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned __int64> && );
			void IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned __int64> const & );
			void IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned __int64>();
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned __int64> && );
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> : IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> && );
			void IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> const & );
			void IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>();
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> && );
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IInputStream *,unsigned __int64> : IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IInputStream *,unsigned __int64> && );
			void IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IInputStream *,unsigned __int64> const & );
			void IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IInputStream *,unsigned __int64>();
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IInputStream *,unsigned __int64> && );
			IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IInputStream *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler<int,int> : IAsyncOperationWithProgressCompletedHandler_impl<int,int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgressCompletedHandler<int,int>( IAsyncOperationWithProgressCompletedHandler<int,int> && );
			void IAsyncOperationWithProgressCompletedHandler<int,int>( IAsyncOperationWithProgressCompletedHandler<int,int> const & );
			void IAsyncOperationWithProgressCompletedHandler<int,int>();
			IAsyncOperationWithProgressCompletedHandler<int,int> & operator=( IAsyncOperationWithProgressCompletedHandler<int,int> && );
			IAsyncOperationWithProgressCompletedHandler<int,int> & operator=( IAsyncOperationWithProgressCompletedHandler<int,int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64> : IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64> && );
			void IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64> const & );
			void IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64>();
			IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64> && );
			IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> : IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> && );
			void IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> const & );
			void IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>();
			IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> & operator=( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> && );
			IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> & operator=( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<HSTRING__ *,unsigned __int64> * , AsyncStatus ) = 0;
			void IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64> && );
			void IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64> const & );
			void IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64>();
			IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64> && );
			IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<HSTRING__ *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned __int64> * , AsyncStatus ) = 0;
			void IAsyncOperationWithProgressCompletedHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> && );
			void IAsyncOperationWithProgressCompletedHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> const & );
			void IAsyncOperationWithProgressCompletedHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned __int64>();
			IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> && );
			IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned int> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * , AsyncStatus ) = 0;
			void IAsyncOperationWithProgressCompletedHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned int> && );
			void IAsyncOperationWithProgressCompletedHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned int> const & );
			void IAsyncOperationWithProgressCompletedHandler_impl<Windows::Storage::Streams::IBuffer *,unsigned int>();
			IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned int> && );
			IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IBuffer *,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<Storage::Streams::IInputStream *,unsigned __int64> * , AsyncStatus ) = 0;
			void IAsyncOperationWithProgressCompletedHandler_impl<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> && );
			void IAsyncOperationWithProgressCompletedHandler_impl<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> const & );
			void IAsyncOperationWithProgressCompletedHandler_impl<Windows::Storage::Streams::IInputStream *,unsigned __int64>();
			IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> && );
			IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<Storage::Streams::IInputStream *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler_impl<int,int> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<int,int> * , AsyncStatus ) = 0;
			void IAsyncOperationWithProgressCompletedHandler_impl<int,int>( IAsyncOperationWithProgressCompletedHandler_impl<int,int> && );
			void IAsyncOperationWithProgressCompletedHandler_impl<int,int>( IAsyncOperationWithProgressCompletedHandler_impl<int,int> const & );
			void IAsyncOperationWithProgressCompletedHandler_impl<int,int>();
			IAsyncOperationWithProgressCompletedHandler_impl<int,int> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<int,int> && );
			IAsyncOperationWithProgressCompletedHandler_impl<int,int> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<int,int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<unsigned __int64,unsigned __int64> * , AsyncStatus ) = 0;
			void IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64> && );
			void IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64>( IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64> const & );
			void IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64>();
			IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64> && );
			IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<unsigned __int64,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IAsyncOperationWithProgress<unsigned int,unsigned int> * , AsyncStatus ) = 0;
			void IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int>( IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int> && );
			void IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int>( IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int> const & );
			void IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int>();
			IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int> && );
			IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int> & operator=( IAsyncOperationWithProgressCompletedHandler_impl<unsigned int,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64> : IInspectable {
			/*0030*/ virtual HRESULT put_Progress( IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64> * ) = 0;
			/*0038*/ virtual HRESULT get_Progress( IAsyncOperationProgressHandler<HSTRING__ *,unsigned __int64> * * ) = 0;
			/*0040*/ virtual HRESULT put_Completed( IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64> * ) = 0;
			/*0048*/ virtual HRESULT get_Completed( IAsyncOperationWithProgressCompletedHandler<HSTRING__ *,unsigned __int64> * * ) = 0;
			/*0050*/ virtual HRESULT GetResults( HSTRING__ * * ) = 0;
			void IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64>( IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64> && );
			void IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64>( IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64> const & );
			void IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64>();
			IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64> && );
			IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64> & operator=( IAsyncOperationWithProgress_impl<HSTRING__ *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned __int64> : IInspectable {
			/*0030*/ virtual HRESULT put_Progress( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned __int64> * ) = 0;
			/*0038*/ virtual HRESULT get_Progress( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned __int64> * * ) = 0;
			/*0040*/ virtual HRESULT put_Completed( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned __int64> * ) = 0;
			/*0048*/ virtual HRESULT get_Completed( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned __int64> * * ) = 0;
			/*0050*/ virtual HRESULT GetResults( IBuffer * * ) = 0;
			void IAsyncOperationWithProgress_impl<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned __int64> && );
			void IAsyncOperationWithProgress_impl<Windows::Storage::Streams::IBuffer *,unsigned __int64>( IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned __int64> const & );
			void IAsyncOperationWithProgress_impl<Windows::Storage::Streams::IBuffer *,unsigned __int64>();
			IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned __int64> && );
			IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned __int64> & operator=( IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned int> : IInspectable {
			/*0030*/ virtual HRESULT put_Progress( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * ) = 0;
			/*0038*/ virtual HRESULT get_Progress( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * * ) = 0;
			/*0040*/ virtual HRESULT put_Completed( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * ) = 0;
			/*0048*/ virtual HRESULT get_Completed( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * * ) = 0;
			/*0050*/ virtual HRESULT GetResults( IBuffer * * ) = 0;
			void IAsyncOperationWithProgress_impl<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned int> && );
			void IAsyncOperationWithProgress_impl<Windows::Storage::Streams::IBuffer *,unsigned int>( IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned int> const & );
			void IAsyncOperationWithProgress_impl<Windows::Storage::Streams::IBuffer *,unsigned int>();
			IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned int> && );
			IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned int> & operator=( IAsyncOperationWithProgress_impl<Storage::Streams::IBuffer *,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress_impl<Storage::Streams::IInputStream *,unsigned __int64> : IInspectable {
			/*0030*/ virtual HRESULT put_Progress( IAsyncOperationProgressHandler<Storage::Streams::IInputStream *,unsigned __int64> * ) = 0;
			/*0038*/ virtual HRESULT get_Progress( IAsyncOperationProgressHandler<Storage::Streams::IInputStream *,unsigned __int64> * * ) = 0;
			/*0040*/ virtual HRESULT put_Completed( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IInputStream *,unsigned __int64> * ) = 0;
			/*0048*/ virtual HRESULT get_Completed( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IInputStream *,unsigned __int64> * * ) = 0;
			/*0050*/ virtual HRESULT GetResults( IInputStream * * ) = 0;
			void IAsyncOperationWithProgress_impl<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationWithProgress_impl<Storage::Streams::IInputStream *,unsigned __int64> && );
			void IAsyncOperationWithProgress_impl<Windows::Storage::Streams::IInputStream *,unsigned __int64>( IAsyncOperationWithProgress_impl<Storage::Streams::IInputStream *,unsigned __int64> const & );
			void IAsyncOperationWithProgress_impl<Windows::Storage::Streams::IInputStream *,unsigned __int64>();
			IAsyncOperationWithProgress_impl<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationWithProgress_impl<Storage::Streams::IInputStream *,unsigned __int64> && );
			IAsyncOperationWithProgress_impl<Storage::Streams::IInputStream *,unsigned __int64> & operator=( IAsyncOperationWithProgress_impl<Storage::Streams::IInputStream *,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress_impl<int,int> : IInspectable {
			/*0030*/ virtual HRESULT put_Progress( IAsyncOperationProgressHandler<int,int> * ) = 0;
			/*0038*/ virtual HRESULT get_Progress( IAsyncOperationProgressHandler<int,int> * * ) = 0;
			/*0040*/ virtual HRESULT put_Completed( IAsyncOperationWithProgressCompletedHandler<int,int> * ) = 0;
			/*0048*/ virtual HRESULT get_Completed( IAsyncOperationWithProgressCompletedHandler<int,int> * * ) = 0;
			/*0050*/ virtual HRESULT GetResults( INT * ) = 0;
			void IAsyncOperationWithProgress_impl<int,int>( IAsyncOperationWithProgress_impl<int,int> && );
			void IAsyncOperationWithProgress_impl<int,int>( IAsyncOperationWithProgress_impl<int,int> const & );
			void IAsyncOperationWithProgress_impl<int,int>();
			IAsyncOperationWithProgress_impl<int,int> & operator=( IAsyncOperationWithProgress_impl<int,int> && );
			IAsyncOperationWithProgress_impl<int,int> & operator=( IAsyncOperationWithProgress_impl<int,int> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64> : IInspectable {
			/*0030*/ virtual HRESULT put_Progress( IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64> * ) = 0;
			/*0038*/ virtual HRESULT get_Progress( IAsyncOperationProgressHandler<unsigned __int64,unsigned __int64> * * ) = 0;
			/*0040*/ virtual HRESULT put_Completed( IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64> * ) = 0;
			/*0048*/ virtual HRESULT get_Completed( IAsyncOperationWithProgressCompletedHandler<unsigned __int64,unsigned __int64> * * ) = 0;
			/*0050*/ virtual HRESULT GetResults( ULONGLONG * ) = 0;
			void IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64>( IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64> && );
			void IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64>( IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64> const & );
			void IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64>();
			IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64> && );
			IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64> & operator=( IAsyncOperationWithProgress_impl<unsigned __int64,unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperationWithProgress_impl<unsigned int,unsigned int> : IInspectable {
			/*0030*/ virtual HRESULT put_Progress( IAsyncOperationProgressHandler<unsigned int,unsigned int> * ) = 0;
			/*0038*/ virtual HRESULT get_Progress( IAsyncOperationProgressHandler<unsigned int,unsigned int> * * ) = 0;
			/*0040*/ virtual HRESULT put_Completed( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * ) = 0;
			/*0048*/ virtual HRESULT get_Completed( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * * ) = 0;
			/*0050*/ virtual HRESULT GetResults( UINT * ) = 0;
			void IAsyncOperationWithProgress_impl<unsigned int,unsigned int>( IAsyncOperationWithProgress_impl<unsigned int,unsigned int> && );
			void IAsyncOperationWithProgress_impl<unsigned int,unsigned int>( IAsyncOperationWithProgress_impl<unsigned int,unsigned int> const & );
			void IAsyncOperationWithProgress_impl<unsigned int,unsigned int>();
			IAsyncOperationWithProgress_impl<unsigned int,unsigned int> & operator=( IAsyncOperationWithProgress_impl<unsigned int,unsigned int> && );
			IAsyncOperationWithProgress_impl<unsigned int,unsigned int> & operator=( IAsyncOperationWithProgress_impl<unsigned int,unsigned int> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,HSTRING__ *> *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,HSTRING__ *> *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IMap<HSTRING__ *,HSTRING__ *> * * ) = 0;
			void IAsyncOperation_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>( IAsyncOperation_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> && );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>( IAsyncOperation_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> const & );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,HSTRING__ *> *>();
			IAsyncOperation_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> & operator=( IAsyncOperation_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> && );
			IAsyncOperation_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> & operator=( IAsyncOperation_impl<Collections::IMap<HSTRING__ *,HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,IInspectable *> *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Collections::IMap<HSTRING__ *,IInspectable *> *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IMap<HSTRING__ *,IInspectable *> * * ) = 0;
			void IAsyncOperation_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>( IAsyncOperation_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> && );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>( IAsyncOperation_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> const & );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IMap<HSTRING__ *,IInspectable *> *>();
			IAsyncOperation_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> & operator=( IAsyncOperation_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> && );
			IAsyncOperation_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> & operator=( IAsyncOperation_impl<Collections::IMap<HSTRING__ *,IInspectable *> *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Collections::IPropertySet *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Collections::IPropertySet *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Collections::IPropertySet *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IPropertySet * * ) = 0;
			void IAsyncOperation_impl<Windows::Foundation::Collections::IPropertySet *>( IAsyncOperation_impl<Collections::IPropertySet *> && );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IPropertySet *>( IAsyncOperation_impl<Collections::IPropertySet *> const & );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IPropertySet *>();
			IAsyncOperation_impl<Collections::IPropertySet *> & operator=( IAsyncOperation_impl<Collections::IPropertySet *> && );
			IAsyncOperation_impl<Collections::IPropertySet *> & operator=( IAsyncOperation_impl<Collections::IPropertySet *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Collections::IVector<HSTRING__ *> *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Collections::IVector<HSTRING__ *> *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Collections::IVector<HSTRING__ *> *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IVector<HSTRING__ *> * * ) = 0;
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IAsyncOperation_impl<Collections::IVector<HSTRING__ *> *> && );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVector<HSTRING__ *> *>( IAsyncOperation_impl<Collections::IVector<HSTRING__ *> *> const & );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVector<HSTRING__ *> *>();
			IAsyncOperation_impl<Collections::IVector<HSTRING__ *> *> & operator=( IAsyncOperation_impl<Collections::IVector<HSTRING__ *> *> && );
			IAsyncOperation_impl<Collections::IVector<HSTRING__ *> *> & operator=( IAsyncOperation_impl<Collections::IVector<HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Collections::IVector<unsigned int> *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Collections::IVector<unsigned int> *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Collections::IVector<unsigned int> *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IVector<unsigned int> * * ) = 0;
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVector<unsigned int> *>( IAsyncOperation_impl<Collections::IVector<unsigned int> *> && );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVector<unsigned int> *>( IAsyncOperation_impl<Collections::IVector<unsigned int> *> const & );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVector<unsigned int> *>();
			IAsyncOperation_impl<Collections::IVector<unsigned int> *> & operator=( IAsyncOperation_impl<Collections::IVector<unsigned int> *> && );
			IAsyncOperation_impl<Collections::IVector<unsigned int> *> & operator=( IAsyncOperation_impl<Collections::IVector<unsigned int> *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Collections::IVectorView<Collections::IPropertySet *> *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Collections::IVectorView<Collections::IPropertySet *> *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Collections::IVectorView<Collections::IPropertySet *> *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IVectorView<IPropertySet *> * * ) = 0;
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>( IAsyncOperation_impl<Collections::IVectorView<Collections::IPropertySet *> *> && );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>( IAsyncOperation_impl<Collections::IVectorView<Collections::IPropertySet *> *> const & );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet *> *>();
			IAsyncOperation_impl<Collections::IVectorView<Collections::IPropertySet *> *> & operator=( IAsyncOperation_impl<Collections::IVectorView<Collections::IPropertySet *> *> && );
			IAsyncOperation_impl<Collections::IVectorView<Collections::IPropertySet *> *> & operator=( IAsyncOperation_impl<Collections::IVectorView<Collections::IPropertySet *> *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Collections::IVectorView<HSTRING__ *> *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Collections::IVectorView<HSTRING__ *> *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Collections::IVectorView<HSTRING__ *> *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IVectorView<HSTRING__ *> * * ) = 0;
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>( IAsyncOperation_impl<Collections::IVectorView<HSTRING__ *> *> && );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>( IAsyncOperation_impl<Collections::IVectorView<HSTRING__ *> *> const & );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVectorView<HSTRING__ *> *>();
			IAsyncOperation_impl<Collections::IVectorView<HSTRING__ *> *> & operator=( IAsyncOperation_impl<Collections::IVectorView<HSTRING__ *> *> && );
			IAsyncOperation_impl<Collections::IVectorView<HSTRING__ *> *> & operator=( IAsyncOperation_impl<Collections::IVectorView<HSTRING__ *> *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Collections::IVectorView<bool> *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Collections::IVectorView<bool> *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Collections::IVectorView<bool> *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IVectorView<bool> * * ) = 0;
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVectorView<bool> *>( IAsyncOperation_impl<Collections::IVectorView<bool> *> && );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVectorView<bool> *>( IAsyncOperation_impl<Collections::IVectorView<bool> *> const & );
			void IAsyncOperation_impl<Windows::Foundation::Collections::IVectorView<bool> *>();
			IAsyncOperation_impl<Collections::IVectorView<bool> *> & operator=( IAsyncOperation_impl<Collections::IVectorView<bool> *> && );
			IAsyncOperation_impl<Collections::IVectorView<bool> *> & operator=( IAsyncOperation_impl<Collections::IVectorView<bool> *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<HSTRING__ *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<HSTRING__ *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<HSTRING__ *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( HSTRING__ * * ) = 0;
			void IAsyncOperation_impl<HSTRING__ *>( IAsyncOperation_impl<HSTRING__ *> && );
			void IAsyncOperation_impl<HSTRING__ *>( IAsyncOperation_impl<HSTRING__ *> const & );
			void IAsyncOperation_impl<HSTRING__ *>();
			IAsyncOperation_impl<HSTRING__ *> & operator=( IAsyncOperation_impl<HSTRING__ *> && );
			IAsyncOperation_impl<HSTRING__ *> & operator=( IAsyncOperation_impl<HSTRING__ *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<IInspectable *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<IInspectable *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<IInspectable *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IInspectable * * ) = 0;
			void IAsyncOperation_impl<IInspectable *>( IAsyncOperation_impl<IInspectable *> && );
			void IAsyncOperation_impl<IInspectable *>( IAsyncOperation_impl<IInspectable *> const & );
			void IAsyncOperation_impl<IInspectable *>();
			IAsyncOperation_impl<IInspectable *> & operator=( IAsyncOperation_impl<IInspectable *> && );
			IAsyncOperation_impl<IInspectable *> & operator=( IAsyncOperation_impl<IInspectable *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Internal::AggregateType<bool,unsigned char> > : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<bool> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<bool> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( UCHAR * ) = 0;
			void IAsyncOperation_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IAsyncOperation_impl<Internal::AggregateType<bool,unsigned char> > && );
			void IAsyncOperation_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IAsyncOperation_impl<Internal::AggregateType<bool,unsigned char> > const & );
			void IAsyncOperation_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >();
			IAsyncOperation_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IAsyncOperation_impl<Internal::AggregateType<bool,unsigned char> > && );
			IAsyncOperation_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IAsyncOperation_impl<Internal::AggregateType<bool,unsigned char> > const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Storage::Streams::IBuffer *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Storage::Streams::IBuffer *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Storage::Streams::IBuffer *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IBuffer * * ) = 0;
			void IAsyncOperation_impl<Windows::Storage::Streams::IBuffer *>( IAsyncOperation_impl<Storage::Streams::IBuffer *> && );
			void IAsyncOperation_impl<Windows::Storage::Streams::IBuffer *>( IAsyncOperation_impl<Storage::Streams::IBuffer *> const & );
			void IAsyncOperation_impl<Windows::Storage::Streams::IBuffer *>();
			IAsyncOperation_impl<Storage::Streams::IBuffer *> & operator=( IAsyncOperation_impl<Storage::Streams::IBuffer *> && );
			IAsyncOperation_impl<Storage::Streams::IBuffer *> & operator=( IAsyncOperation_impl<Storage::Streams::IBuffer *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Storage::Streams::IOutputStream *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Storage::Streams::IOutputStream *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Storage::Streams::IOutputStream *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IOutputStream * * ) = 0;
			void IAsyncOperation_impl<Windows::Storage::Streams::IOutputStream *>( IAsyncOperation_impl<Storage::Streams::IOutputStream *> && );
			void IAsyncOperation_impl<Windows::Storage::Streams::IOutputStream *>( IAsyncOperation_impl<Storage::Streams::IOutputStream *> const & );
			void IAsyncOperation_impl<Windows::Storage::Streams::IOutputStream *>();
			IAsyncOperation_impl<Storage::Streams::IOutputStream *> & operator=( IAsyncOperation_impl<Storage::Streams::IOutputStream *> && );
			IAsyncOperation_impl<Storage::Streams::IOutputStream *> & operator=( IAsyncOperation_impl<Storage::Streams::IOutputStream *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<Storage::Streams::IRandomAccessStream *> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStream *> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Storage::Streams::IRandomAccessStream *> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( IRandomAccessStream * * ) = 0;
			void IAsyncOperation_impl<Windows::Storage::Streams::IRandomAccessStream *>( IAsyncOperation_impl<Storage::Streams::IRandomAccessStream *> && );
			void IAsyncOperation_impl<Windows::Storage::Streams::IRandomAccessStream *>( IAsyncOperation_impl<Storage::Streams::IRandomAccessStream *> const & );
			void IAsyncOperation_impl<Windows::Storage::Streams::IRandomAccessStream *>();
			IAsyncOperation_impl<Storage::Streams::IRandomAccessStream *> & operator=( IAsyncOperation_impl<Storage::Streams::IRandomAccessStream *> && );
			IAsyncOperation_impl<Storage::Streams::IRandomAccessStream *> & operator=( IAsyncOperation_impl<Storage::Streams::IRandomAccessStream *> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<TimeSpan> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<TimeSpan> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<TimeSpan> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( TimeSpan * ) = 0;
			void IAsyncOperation_impl<Windows::Foundation::TimeSpan>( IAsyncOperation_impl<TimeSpan> && );
			void IAsyncOperation_impl<Windows::Foundation::TimeSpan>( IAsyncOperation_impl<TimeSpan> const & );
			void IAsyncOperation_impl<Windows::Foundation::TimeSpan>();
			IAsyncOperation_impl<TimeSpan> & operator=( IAsyncOperation_impl<TimeSpan> && );
			IAsyncOperation_impl<TimeSpan> & operator=( IAsyncOperation_impl<TimeSpan> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<_GUID> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<_GUID> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<_GUID> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( _GUID * ) = 0;
			void IAsyncOperation_impl<_GUID>( IAsyncOperation_impl<_GUID> && );
			void IAsyncOperation_impl<_GUID>( IAsyncOperation_impl<_GUID> const & );
			void IAsyncOperation_impl<_GUID>();
			IAsyncOperation_impl<_GUID> & operator=( IAsyncOperation_impl<_GUID> && );
			IAsyncOperation_impl<_GUID> & operator=( IAsyncOperation_impl<_GUID> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<__int64> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<__int64> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<__int64> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( LONGLONG * ) = 0;
			void IAsyncOperation_impl<__int64>( IAsyncOperation_impl<__int64> && );
			void IAsyncOperation_impl<__int64>( IAsyncOperation_impl<__int64> const & );
			void IAsyncOperation_impl<__int64>();
			IAsyncOperation_impl<__int64> & operator=( IAsyncOperation_impl<__int64> && );
			IAsyncOperation_impl<__int64> & operator=( IAsyncOperation_impl<__int64> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<double> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<double> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<double> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( double * ) = 0;
			void IAsyncOperation_impl<double>( IAsyncOperation_impl<double> && );
			void IAsyncOperation_impl<double>( IAsyncOperation_impl<double> const & );
			void IAsyncOperation_impl<double>();
			IAsyncOperation_impl<double> & operator=( IAsyncOperation_impl<double> && );
			IAsyncOperation_impl<double> & operator=( IAsyncOperation_impl<double> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<int> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<int> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<int> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( INT * ) = 0;
			void IAsyncOperation_impl<int>( IAsyncOperation_impl<int> && );
			void IAsyncOperation_impl<int>( IAsyncOperation_impl<int> const & );
			void IAsyncOperation_impl<int>();
			IAsyncOperation_impl<int> & operator=( IAsyncOperation_impl<int> && );
			IAsyncOperation_impl<int> & operator=( IAsyncOperation_impl<int> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<unsigned __int64> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<unsigned __int64> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<unsigned __int64> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( ULONGLONG * ) = 0;
			void IAsyncOperation_impl<unsigned __int64>( IAsyncOperation_impl<unsigned __int64> && );
			void IAsyncOperation_impl<unsigned __int64>( IAsyncOperation_impl<unsigned __int64> const & );
			void IAsyncOperation_impl<unsigned __int64>();
			IAsyncOperation_impl<unsigned __int64> & operator=( IAsyncOperation_impl<unsigned __int64> && );
			IAsyncOperation_impl<unsigned __int64> & operator=( IAsyncOperation_impl<unsigned __int64> const & );
			/*0008*/
		};

		struct IAsyncOperation_impl<unsigned int> : IInspectable {
			/*0030*/ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<unsigned int> * ) = 0;
			/*0038*/ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<unsigned int> * * ) = 0;
			/*0040*/ virtual HRESULT GetResults( UINT * ) = 0;
			void IAsyncOperation_impl<unsigned int>( IAsyncOperation_impl<unsigned int> && );
			void IAsyncOperation_impl<unsigned int>( IAsyncOperation_impl<unsigned int> const & );
			void IAsyncOperation_impl<unsigned int>();
			IAsyncOperation_impl<unsigned int> & operator=( IAsyncOperation_impl<unsigned int> && );
			IAsyncOperation_impl<unsigned int> & operator=( IAsyncOperation_impl<unsigned int> const & );
			/*0008*/
		};

		struct IClosable : IInspectable {
			/*0030*/ virtual HRESULT Close() = 0;
			void IClosable( IClosable && );
			void IClosable( IClosable const & );
			void IClosable();
			IClosable & operator=( IClosable && );
			IClosable & operator=( IClosable const & );
			/*0008*/
		};

		struct IDeferral : IInspectable {
			/*0030*/ virtual HRESULT Complete() = 0;
			void IDeferral( IDeferral && );
			void IDeferral( IDeferral const & );
			void IDeferral();
			IDeferral & operator=( IDeferral && );
			IDeferral & operator=( IDeferral const & );
			/*0008*/
		};

		struct IDeferralCompletedHandler : IUnknown {
			/*0018*/ virtual HRESULT Invoke() = 0;
			void IDeferralCompletedHandler( IDeferralCompletedHandler && );
			void IDeferralCompletedHandler( IDeferralCompletedHandler const & );
			void IDeferralCompletedHandler();
			IDeferralCompletedHandler & operator=( IDeferralCompletedHandler && );
			IDeferralCompletedHandler & operator=( IDeferralCompletedHandler const & );
			/*0008*/
		};

		struct IDeferralFactory : IInspectable {
			/*0030*/ virtual HRESULT Create( IDeferralCompletedHandler * , IDeferral * * ) = 0;
			void IDeferralFactory( IDeferralFactory && );
			void IDeferralFactory( IDeferralFactory const & );
			void IDeferralFactory();
			IDeferralFactory & operator=( IDeferralFactory && );
			IDeferralFactory & operator=( IDeferralFactory const & );
			/*0008*/
		};

		struct IEventHandler<Diagnostics::TracingStatusChangedEventArgs *> : IEventHandler_impl<Internal::AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *> > {
			static WCHAR const * z_get_rc_name_impl();
			void IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs *>( IEventHandler<Diagnostics::TracingStatusChangedEventArgs *> && );
			void IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs *>( IEventHandler<Diagnostics::TracingStatusChangedEventArgs *> const & );
			void IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs *>();
			IEventHandler<Diagnostics::TracingStatusChangedEventArgs *> & operator=( IEventHandler<Diagnostics::TracingStatusChangedEventArgs *> && );
			IEventHandler<Diagnostics::TracingStatusChangedEventArgs *> & operator=( IEventHandler<Diagnostics::TracingStatusChangedEventArgs *> const & );
			/*0008*/
		};

		struct IEventHandler<HSTRING__ *> : IEventHandler_impl<HSTRING__ *> {
			static WCHAR const * z_get_rc_name_impl();
			void IEventHandler<HSTRING__ *>( IEventHandler<HSTRING__ *> && );
			void IEventHandler<HSTRING__ *>( IEventHandler<HSTRING__ *> const & );
			void IEventHandler<HSTRING__ *>();
			IEventHandler<HSTRING__ *> & operator=( IEventHandler<HSTRING__ *> && );
			IEventHandler<HSTRING__ *> & operator=( IEventHandler<HSTRING__ *> const & );
			/*0008*/
		};

		struct IEventHandler<IInspectable *> : IEventHandler_impl<IInspectable *> {
			static WCHAR const * z_get_rc_name_impl();
			void IEventHandler<IInspectable *>( IEventHandler<IInspectable *> && );
			void IEventHandler<IInspectable *>( IEventHandler<IInspectable *> const & );
			void IEventHandler<IInspectable *>();
			IEventHandler<IInspectable *> & operator=( IEventHandler<IInspectable *> && );
			IEventHandler<IInspectable *> & operator=( IEventHandler<IInspectable *> const & );
			/*0008*/
		};

		struct IEventHandler<bool> : IEventHandler_impl<Internal::AggregateType<bool,unsigned char> > {
			static WCHAR const * z_get_rc_name_impl();
			void IEventHandler<bool>( IEventHandler<bool> && );
			void IEventHandler<bool>( IEventHandler<bool> const & );
			void IEventHandler<bool>();
			IEventHandler<bool> & operator=( IEventHandler<bool> && );
			IEventHandler<bool> & operator=( IEventHandler<bool> const & );
			/*0008*/
		};

		struct IEventHandler_impl<HSTRING__ *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IInspectable * , HSTRING__ * ) = 0;
			void IEventHandler_impl<HSTRING__ *>( IEventHandler_impl<HSTRING__ *> && );
			void IEventHandler_impl<HSTRING__ *>( IEventHandler_impl<HSTRING__ *> const & );
			void IEventHandler_impl<HSTRING__ *>();
			IEventHandler_impl<HSTRING__ *> & operator=( IEventHandler_impl<HSTRING__ *> && );
			IEventHandler_impl<HSTRING__ *> & operator=( IEventHandler_impl<HSTRING__ *> const & );
			/*0008*/
		};

		struct IEventHandler_impl<IInspectable *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IInspectable * , IInspectable * ) = 0;
			void IEventHandler_impl<IInspectable *>( IEventHandler_impl<IInspectable *> && );
			void IEventHandler_impl<IInspectable *>( IEventHandler_impl<IInspectable *> const & );
			void IEventHandler_impl<IInspectable *>();
			IEventHandler_impl<IInspectable *> & operator=( IEventHandler_impl<IInspectable *> && );
			IEventHandler_impl<IInspectable *> & operator=( IEventHandler_impl<IInspectable *> const & );
			/*0008*/
		};

		struct IEventHandler_impl<Internal::AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *> > : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IInspectable * , ITracingStatusChangedEventArgs * ) = 0;
			void IEventHandler_impl<Windows::Foundation::Internal::AggregateType<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs *,Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs *> >( IEventHandler_impl<Internal::AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *> > && );
			void IEventHandler_impl<Windows::Foundation::Internal::AggregateType<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs *,Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs *> >( IEventHandler_impl<Internal::AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *> > const & );
			void IEventHandler_impl<Windows::Foundation::Internal::AggregateType<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs *,Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs *> >();
			IEventHandler_impl<Internal::AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *> > & operator=( IEventHandler_impl<Internal::AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *> > && );
			IEventHandler_impl<Internal::AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *> > & operator=( IEventHandler_impl<Internal::AggregateType<Diagnostics::TracingStatusChangedEventArgs *,Diagnostics::ITracingStatusChangedEventArgs *> > const & );
			/*0008*/
		};

		struct IEventHandler_impl<Internal::AggregateType<bool,unsigned char> > : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IInspectable * , UCHAR ) = 0;
			void IEventHandler_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IEventHandler_impl<Internal::AggregateType<bool,unsigned char> > && );
			void IEventHandler_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IEventHandler_impl<Internal::AggregateType<bool,unsigned char> > const & );
			void IEventHandler_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >();
			IEventHandler_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IEventHandler_impl<Internal::AggregateType<bool,unsigned char> > && );
			IEventHandler_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IEventHandler_impl<Internal::AggregateType<bool,unsigned char> > const & );
			/*0008*/
		};

		struct IGuidHelperStatics : IInspectable {
			/*0030*/ virtual HRESULT CreateNewGuid( _GUID * ) = 0;
			/*0038*/ virtual HRESULT get_Empty( _GUID * ) = 0;
			/*0040*/ virtual HRESULT Equals( _GUID const * , _GUID const * , UCHAR * ) = 0;
			void IGuidHelperStatics( IGuidHelperStatics && );
			void IGuidHelperStatics( IGuidHelperStatics const & );
			void IGuidHelperStatics();
			IGuidHelperStatics & operator=( IGuidHelperStatics && );
			IGuidHelperStatics & operator=( IGuidHelperStatics const & );
			/*0008*/
		};

		struct IMemoryBuffer : IInspectable {
			/*0030*/ virtual HRESULT CreateReference( IMemoryBufferReference * * ) = 0;
			void IMemoryBuffer( IMemoryBuffer && );
			void IMemoryBuffer( IMemoryBuffer const & );
			void IMemoryBuffer();
			IMemoryBuffer & operator=( IMemoryBuffer && );
			IMemoryBuffer & operator=( IMemoryBuffer const & );
			/*0008*/
		};

		struct IMemoryBufferFactory : IInspectable {
			/*0030*/ virtual HRESULT Create( UINT , IMemoryBuffer * * ) = 0;
			void IMemoryBufferFactory( IMemoryBufferFactory && );
			void IMemoryBufferFactory( IMemoryBufferFactory const & );
			void IMemoryBufferFactory();
			IMemoryBufferFactory & operator=( IMemoryBufferFactory && );
			IMemoryBufferFactory & operator=( IMemoryBufferFactory const & );
			/*0008*/
		};

		struct IMemoryBufferReference : IInspectable {
			/*0030*/ virtual HRESULT get_Capacity( UINT * ) = 0;
			/*0038*/ virtual HRESULT add_Closed( ITypedEventHandler<IMemoryBufferReference *,IInspectable *> * , EventRegistrationToken * ) = 0;
			/*0040*/ virtual HRESULT remove_Closed( EventRegistrationToken ) = 0;
			void IMemoryBufferReference( IMemoryBufferReference && );
			void IMemoryBufferReference( IMemoryBufferReference const & );
			void IMemoryBufferReference();
			IMemoryBufferReference & operator=( IMemoryBufferReference && );
			IMemoryBufferReference & operator=( IMemoryBufferReference const & );
			/*0008*/
		};

		struct IPropertyValue : IInspectable {
			/*0030*/ virtual HRESULT get_Type( PropertyType * ) = 0;
			/*0038*/ virtual HRESULT get_IsNumericScalar( UCHAR * ) = 0;
			/*0040*/ virtual HRESULT GetUInt8( UCHAR * ) = 0;
			/*0048*/ virtual HRESULT GetInt16( SHORT * ) = 0;
			/*0050*/ virtual HRESULT GetUInt16( USHORT * ) = 0;
			/*0058*/ virtual HRESULT GetInt32( INT * ) = 0;
			/*0060*/ virtual HRESULT GetUInt32( UINT * ) = 0;
			/*0068*/ virtual HRESULT GetInt64( LONGLONG * ) = 0;
			/*0070*/ virtual HRESULT GetUInt64( ULONGLONG * ) = 0;
			/*0078*/ virtual HRESULT GetSingle( float * ) = 0;
			/*0080*/ virtual HRESULT GetDouble( double * ) = 0;
			/*0088*/ virtual HRESULT GetChar16( WCHAR * ) = 0;
			/*0090*/ virtual HRESULT GetBoolean( UCHAR * ) = 0;
			/*0098*/ virtual HRESULT GetString( HSTRING__ * * ) = 0;
			/*00a0*/ virtual HRESULT GetGuid( _GUID * ) = 0;
			/*00a8*/ virtual HRESULT GetDateTime( DateTime * ) = 0;
			/*00b0*/ virtual HRESULT GetTimeSpan( TimeSpan * ) = 0;
			/*00b8*/ virtual HRESULT GetPoint( Point * ) = 0;
			/*00c0*/ virtual HRESULT GetSize( Size * ) = 0;
			/*00c8*/ virtual HRESULT GetRect( Rect * ) = 0;
			/*00d0*/ virtual HRESULT GetUInt8Array( UINT * , UCHAR * * ) = 0;
			/*00d8*/ virtual HRESULT GetInt16Array( UINT * , SHORT * * ) = 0;
			/*00e0*/ virtual HRESULT GetUInt16Array( UINT * , USHORT * * ) = 0;
			/*00e8*/ virtual HRESULT GetInt32Array( UINT * , INT * * ) = 0;
			/*00f0*/ virtual HRESULT GetUInt32Array( UINT * , UINT * * ) = 0;
			/*00f8*/ virtual HRESULT GetInt64Array( UINT * , LONGLONG * * ) = 0;
			/*0100*/ virtual HRESULT GetUInt64Array( UINT * , ULONGLONG * * ) = 0;
			/*0108*/ virtual HRESULT GetSingleArray( UINT * , float * * ) = 0;
			/*0110*/ virtual HRESULT GetDoubleArray( UINT * , double * * ) = 0;
			/*0118*/ virtual HRESULT GetChar16Array( UINT * , WCHAR * * ) = 0;
			/*0120*/ virtual HRESULT GetBooleanArray( UINT * , UCHAR * * ) = 0;
			/*0128*/ virtual HRESULT GetStringArray( UINT * , HSTRING__ * * * ) = 0;
			/*0130*/ virtual HRESULT GetInspectableArray( UINT * , IInspectable * * * ) = 0;
			/*0138*/ virtual HRESULT GetGuidArray( UINT * , _GUID * * ) = 0;
			/*0140*/ virtual HRESULT GetDateTimeArray( UINT * , DateTime * * ) = 0;
			/*0148*/ virtual HRESULT GetTimeSpanArray( UINT * , TimeSpan * * ) = 0;
			/*0150*/ virtual HRESULT GetPointArray( UINT * , Point * * ) = 0;
			/*0158*/ virtual HRESULT GetSizeArray( UINT * , Size * * ) = 0;
			/*0160*/ virtual HRESULT GetRectArray( UINT * , Rect * * ) = 0;
			void IPropertyValue( IPropertyValue && );
			void IPropertyValue( IPropertyValue const & );
			void IPropertyValue();
			IPropertyValue & operator=( IPropertyValue && );
			IPropertyValue & operator=( IPropertyValue const & );
			/*0008*/
		};

		struct IPropertyValueStatics : IInspectable {
			/*0030*/ virtual HRESULT CreateEmpty( IInspectable * * ) = 0;
			/*0038*/ virtual HRESULT CreateUInt8( UCHAR , IInspectable * * ) = 0;
			/*0040*/ virtual HRESULT CreateInt16( SHORT , IInspectable * * ) = 0;
			/*0048*/ virtual HRESULT CreateUInt16( USHORT , IInspectable * * ) = 0;
			/*0050*/ virtual HRESULT CreateInt32( INT , IInspectable * * ) = 0;
			/*0058*/ virtual HRESULT CreateUInt32( UINT , IInspectable * * ) = 0;
			/*0060*/ virtual HRESULT CreateInt64( LONGLONG , IInspectable * * ) = 0;
			/*0068*/ virtual HRESULT CreateUInt64( ULONGLONG , IInspectable * * ) = 0;
			/*0070*/ virtual HRESULT CreateSingle( float , IInspectable * * ) = 0;
			/*0078*/ virtual HRESULT CreateDouble( double , IInspectable * * ) = 0;
			/*0080*/ virtual HRESULT CreateChar16( WCHAR , IInspectable * * ) = 0;
			/*0088*/ virtual HRESULT CreateBoolean( UCHAR , IInspectable * * ) = 0;
			/*0090*/ virtual HRESULT CreateString( HSTRING__ * , IInspectable * * ) = 0;
			/*0098*/ virtual HRESULT CreateInspectable( IInspectable * , IInspectable * * ) = 0;
			/*00a0*/ virtual HRESULT CreateGuid( _GUID , IInspectable * * ) = 0;
			/*00a8*/ virtual HRESULT CreateDateTime( DateTime , IInspectable * * ) = 0;
			/*00b0*/ virtual HRESULT CreateTimeSpan( TimeSpan , IInspectable * * ) = 0;
			/*00b8*/ virtual HRESULT CreatePoint( Point , IInspectable * * ) = 0;
			/*00c0*/ virtual HRESULT CreateSize( Size , IInspectable * * ) = 0;
			/*00c8*/ virtual HRESULT CreateRect( Rect , IInspectable * * ) = 0;
			/*00d0*/ virtual HRESULT CreateUInt8Array( UINT , UCHAR const * , IInspectable * * ) = 0;
			/*00d8*/ virtual HRESULT CreateInt16Array( UINT , SHORT const * , IInspectable * * ) = 0;
			/*00e0*/ virtual HRESULT CreateUInt16Array( UINT , USHORT const * , IInspectable * * ) = 0;
			/*00e8*/ virtual HRESULT CreateInt32Array( UINT , INT const * , IInspectable * * ) = 0;
			/*00f0*/ virtual HRESULT CreateUInt32Array( UINT , UINT const * , IInspectable * * ) = 0;
			/*00f8*/ virtual HRESULT CreateInt64Array( UINT , LONGLONG const * , IInspectable * * ) = 0;
			/*0100*/ virtual HRESULT CreateUInt64Array( UINT , ULONGLONG const * , IInspectable * * ) = 0;
			/*0108*/ virtual HRESULT CreateSingleArray( UINT , float const * , IInspectable * * ) = 0;
			/*0110*/ virtual HRESULT CreateDoubleArray( UINT , double const * , IInspectable * * ) = 0;
			/*0118*/ virtual HRESULT CreateChar16Array( UINT , WCHAR const * , IInspectable * * ) = 0;
			/*0120*/ virtual HRESULT CreateBooleanArray( UINT , UCHAR const * , IInspectable * * ) = 0;
			/*0128*/ virtual HRESULT CreateStringArray( UINT , HSTRING__ * const * , IInspectable * * ) = 0;
			/*0130*/ virtual HRESULT CreateInspectableArray( UINT , IInspectable * const * , IInspectable * * ) = 0;
			/*0138*/ virtual HRESULT CreateGuidArray( UINT , _GUID const * , IInspectable * * ) = 0;
			/*0140*/ virtual HRESULT CreateDateTimeArray( UINT , DateTime const * , IInspectable * * ) = 0;
			/*0148*/ virtual HRESULT CreateTimeSpanArray( UINT , TimeSpan const * , IInspectable * * ) = 0;
			/*0150*/ virtual HRESULT CreatePointArray( UINT , Point const * , IInspectable * * ) = 0;
			/*0158*/ virtual HRESULT CreateSizeArray( UINT , Size const * , IInspectable * * ) = 0;
			/*0160*/ virtual HRESULT CreateRectArray( UINT , Rect const * , IInspectable * * ) = 0;
			void IPropertyValueStatics( IPropertyValueStatics && );
			void IPropertyValueStatics( IPropertyValueStatics const & );
			void IPropertyValueStatics();
			IPropertyValueStatics & operator=( IPropertyValueStatics && );
			IPropertyValueStatics & operator=( IPropertyValueStatics const & );
			/*0008*/
		};

		struct IReference<DateTime> : IReference_impl<DateTime> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<Windows::Foundation::DateTime>( IReference<DateTime> && );
			void IReference<Windows::Foundation::DateTime>( IReference<DateTime> const & );
			void IReference<Windows::Foundation::DateTime>();
			IReference<DateTime> & operator=( IReference<DateTime> && );
			IReference<DateTime> & operator=( IReference<DateTime> const & );
			/*0008*/
		};

		struct IReference<HSTRING__ *> : IReference_impl<HSTRING__ *> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<HSTRING__ *>( IReference<HSTRING__ *> && );
			void IReference<HSTRING__ *>( IReference<HSTRING__ *> const & );
			void IReference<HSTRING__ *>();
			IReference<HSTRING__ *> & operator=( IReference<HSTRING__ *> && );
			IReference<HSTRING__ *> & operator=( IReference<HSTRING__ *> const & );
			/*0008*/
		};

		struct IReference<Point> : IReference_impl<Point> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<Windows::Foundation::Point>( IReference<Point> && );
			void IReference<Windows::Foundation::Point>( IReference<Point> const & );
			void IReference<Windows::Foundation::Point>();
			IReference<Point> & operator=( IReference<Point> && );
			IReference<Point> & operator=( IReference<Point> const & );
			/*0008*/
		};

		struct IReference<Rect> : IReference_impl<Rect> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<Windows::Foundation::Rect>( IReference<Rect> && );
			void IReference<Windows::Foundation::Rect>( IReference<Rect> const & );
			void IReference<Windows::Foundation::Rect>();
			IReference<Rect> & operator=( IReference<Rect> && );
			IReference<Rect> & operator=( IReference<Rect> const & );
			/*0008*/
		};

		struct IReference<Size> : IReference_impl<Size> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<Windows::Foundation::Size>( IReference<Size> && );
			void IReference<Windows::Foundation::Size>( IReference<Size> const & );
			void IReference<Windows::Foundation::Size>();
			IReference<Size> & operator=( IReference<Size> && );
			IReference<Size> & operator=( IReference<Size> const & );
			/*0008*/
		};

		struct IReference<TimeSpan> : IReference_impl<TimeSpan> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<Windows::Foundation::TimeSpan>( IReference<TimeSpan> && );
			void IReference<Windows::Foundation::TimeSpan>( IReference<TimeSpan> const & );
			void IReference<Windows::Foundation::TimeSpan>();
			IReference<TimeSpan> & operator=( IReference<TimeSpan> && );
			IReference<TimeSpan> & operator=( IReference<TimeSpan> const & );
			/*0008*/
		};

		struct IReference<_GUID> : IReference_impl<_GUID> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<_GUID>( IReference<_GUID> && );
			void IReference<_GUID>( IReference<_GUID> const & );
			void IReference<_GUID>();
			IReference<_GUID> & operator=( IReference<_GUID> && );
			IReference<_GUID> & operator=( IReference<_GUID> const & );
			/*0008*/
		};

		struct IReference<__int64> : IReference_impl<__int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<__int64>( IReference<__int64> && );
			void IReference<__int64>( IReference<__int64> const & );
			void IReference<__int64>();
			IReference<__int64> & operator=( IReference<__int64> && );
			IReference<__int64> & operator=( IReference<__int64> const & );
			/*0008*/
		};

		struct IReference<bool> : IReference_impl<Internal::AggregateType<bool,unsigned char> > {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<bool>( IReference<bool> && );
			void IReference<bool>( IReference<bool> const & );
			void IReference<bool>();
			IReference<bool> & operator=( IReference<bool> && );
			IReference<bool> & operator=( IReference<bool> const & );
			/*0008*/
		};

		struct IReference<double> : IReference_impl<double> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<double>( IReference<double> && );
			void IReference<double>( IReference<double> const & );
			void IReference<double>();
			IReference<double> & operator=( IReference<double> && );
			IReference<double> & operator=( IReference<double> const & );
			/*0008*/
		};

		struct IReference<float> : IReference_impl<float> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<float>( IReference<float> && );
			void IReference<float>( IReference<float> const & );
			void IReference<float>();
			IReference<float> & operator=( IReference<float> && );
			IReference<float> & operator=( IReference<float> const & );
			/*0008*/
		};

		struct IReference<int> : IReference_impl<int> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<int>( IReference<int> && );
			void IReference<int>( IReference<int> const & );
			void IReference<int>();
			IReference<int> & operator=( IReference<int> && );
			IReference<int> & operator=( IReference<int> const & );
			/*0008*/
		};

		struct IReference<short> : IReference_impl<short> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<short>( IReference<short> && );
			void IReference<short>( IReference<short> const & );
			void IReference<short>();
			IReference<short> & operator=( IReference<short> && );
			IReference<short> & operator=( IReference<short> const & );
			/*0008*/
		};

		struct IReference<unsigned __int64> : IReference_impl<unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<unsigned __int64>( IReference<unsigned __int64> && );
			void IReference<unsigned __int64>( IReference<unsigned __int64> const & );
			void IReference<unsigned __int64>();
			IReference<unsigned __int64> & operator=( IReference<unsigned __int64> && );
			IReference<unsigned __int64> & operator=( IReference<unsigned __int64> const & );
			/*0008*/
		};

		struct IReference<unsigned char> : IReference_impl<unsigned char> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<unsigned char>( IReference<unsigned char> && );
			void IReference<unsigned char>( IReference<unsigned char> const & );
			void IReference<unsigned char>();
			IReference<unsigned char> & operator=( IReference<unsigned char> && );
			IReference<unsigned char> & operator=( IReference<unsigned char> const & );
			/*0008*/
		};

		struct IReference<unsigned int> : IReference_impl<unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IReference<unsigned int>( IReference<unsigned int> && );
			void IReference<unsigned int>( IReference<unsigned int> const & );
			void IReference<unsigned int>();
			IReference<unsigned int> & operator=( IReference<unsigned int> && );
			IReference<unsigned int> & operator=( IReference<unsigned int> const & );
			/*0008*/
		};

		struct IReferenceArray<DateTime> : IReferenceArray_impl<DateTime> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<Windows::Foundation::DateTime>( IReferenceArray<DateTime> && );
			void IReferenceArray<Windows::Foundation::DateTime>( IReferenceArray<DateTime> const & );
			void IReferenceArray<Windows::Foundation::DateTime>();
			IReferenceArray<DateTime> & operator=( IReferenceArray<DateTime> && );
			IReferenceArray<DateTime> & operator=( IReferenceArray<DateTime> const & );
			/*0008*/
		};

		struct IReferenceArray<HSTRING__ *> : IReferenceArray_impl<HSTRING__ *> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<HSTRING__ *>( IReferenceArray<HSTRING__ *> && );
			void IReferenceArray<HSTRING__ *>( IReferenceArray<HSTRING__ *> const & );
			void IReferenceArray<HSTRING__ *>();
			IReferenceArray<HSTRING__ *> & operator=( IReferenceArray<HSTRING__ *> && );
			IReferenceArray<HSTRING__ *> & operator=( IReferenceArray<HSTRING__ *> const & );
			/*0008*/
		};

		struct IReferenceArray<IInspectable *> : IReferenceArray_impl<IInspectable *> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<IInspectable *>( IReferenceArray<IInspectable *> && );
			void IReferenceArray<IInspectable *>( IReferenceArray<IInspectable *> const & );
			void IReferenceArray<IInspectable *>();
			IReferenceArray<IInspectable *> & operator=( IReferenceArray<IInspectable *> && );
			IReferenceArray<IInspectable *> & operator=( IReferenceArray<IInspectable *> const & );
			/*0008*/
		};

		struct IReferenceArray<Point> : IReferenceArray_impl<Point> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<Windows::Foundation::Point>( IReferenceArray<Point> && );
			void IReferenceArray<Windows::Foundation::Point>( IReferenceArray<Point> const & );
			void IReferenceArray<Windows::Foundation::Point>();
			IReferenceArray<Point> & operator=( IReferenceArray<Point> && );
			IReferenceArray<Point> & operator=( IReferenceArray<Point> const & );
			/*0008*/
		};

		struct IReferenceArray<Rect> : IReferenceArray_impl<Rect> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<Windows::Foundation::Rect>( IReferenceArray<Rect> && );
			void IReferenceArray<Windows::Foundation::Rect>( IReferenceArray<Rect> const & );
			void IReferenceArray<Windows::Foundation::Rect>();
			IReferenceArray<Rect> & operator=( IReferenceArray<Rect> && );
			IReferenceArray<Rect> & operator=( IReferenceArray<Rect> const & );
			/*0008*/
		};

		struct IReferenceArray<Size> : IReferenceArray_impl<Size> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<Windows::Foundation::Size>( IReferenceArray<Size> && );
			void IReferenceArray<Windows::Foundation::Size>( IReferenceArray<Size> const & );
			void IReferenceArray<Windows::Foundation::Size>();
			IReferenceArray<Size> & operator=( IReferenceArray<Size> && );
			IReferenceArray<Size> & operator=( IReferenceArray<Size> const & );
			/*0008*/
		};

		struct IReferenceArray<TimeSpan> : IReferenceArray_impl<TimeSpan> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<Windows::Foundation::TimeSpan>( IReferenceArray<TimeSpan> && );
			void IReferenceArray<Windows::Foundation::TimeSpan>( IReferenceArray<TimeSpan> const & );
			void IReferenceArray<Windows::Foundation::TimeSpan>();
			IReferenceArray<TimeSpan> & operator=( IReferenceArray<TimeSpan> && );
			IReferenceArray<TimeSpan> & operator=( IReferenceArray<TimeSpan> const & );
			/*0008*/
		};

		struct IReferenceArray<_GUID> : IReferenceArray_impl<_GUID> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<_GUID>( IReferenceArray<_GUID> && );
			void IReferenceArray<_GUID>( IReferenceArray<_GUID> const & );
			void IReferenceArray<_GUID>();
			IReferenceArray<_GUID> & operator=( IReferenceArray<_GUID> && );
			IReferenceArray<_GUID> & operator=( IReferenceArray<_GUID> const & );
			/*0008*/
		};

		struct IReferenceArray<__int64> : IReferenceArray_impl<__int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<__int64>( IReferenceArray<__int64> && );
			void IReferenceArray<__int64>( IReferenceArray<__int64> const & );
			void IReferenceArray<__int64>();
			IReferenceArray<__int64> & operator=( IReferenceArray<__int64> && );
			IReferenceArray<__int64> & operator=( IReferenceArray<__int64> const & );
			/*0008*/
		};

		struct IReferenceArray<bool> : IReferenceArray_impl<Internal::AggregateType<bool,unsigned char> > {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<bool>( IReferenceArray<bool> && );
			void IReferenceArray<bool>( IReferenceArray<bool> const & );
			void IReferenceArray<bool>();
			IReferenceArray<bool> & operator=( IReferenceArray<bool> && );
			IReferenceArray<bool> & operator=( IReferenceArray<bool> const & );
			/*0008*/
		};

		struct IReferenceArray<double> : IReferenceArray_impl<double> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<double>( IReferenceArray<double> && );
			void IReferenceArray<double>( IReferenceArray<double> const & );
			void IReferenceArray<double>();
			IReferenceArray<double> & operator=( IReferenceArray<double> && );
			IReferenceArray<double> & operator=( IReferenceArray<double> const & );
			/*0008*/
		};

		struct IReferenceArray<float> : IReferenceArray_impl<float> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<float>( IReferenceArray<float> && );
			void IReferenceArray<float>( IReferenceArray<float> const & );
			void IReferenceArray<float>();
			IReferenceArray<float> & operator=( IReferenceArray<float> && );
			IReferenceArray<float> & operator=( IReferenceArray<float> const & );
			/*0008*/
		};

		struct IReferenceArray<int> : IReferenceArray_impl<int> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<int>( IReferenceArray<int> && );
			void IReferenceArray<int>( IReferenceArray<int> const & );
			void IReferenceArray<int>();
			IReferenceArray<int> & operator=( IReferenceArray<int> && );
			IReferenceArray<int> & operator=( IReferenceArray<int> const & );
			/*0008*/
		};

		struct IReferenceArray<short> : IReferenceArray_impl<short> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<short>( IReferenceArray<short> && );
			void IReferenceArray<short>( IReferenceArray<short> const & );
			void IReferenceArray<short>();
			IReferenceArray<short> & operator=( IReferenceArray<short> && );
			IReferenceArray<short> & operator=( IReferenceArray<short> const & );
			/*0008*/
		};

		struct IReferenceArray<unsigned __int64> : IReferenceArray_impl<unsigned __int64> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<unsigned __int64>( IReferenceArray<unsigned __int64> && );
			void IReferenceArray<unsigned __int64>( IReferenceArray<unsigned __int64> const & );
			void IReferenceArray<unsigned __int64>();
			IReferenceArray<unsigned __int64> & operator=( IReferenceArray<unsigned __int64> && );
			IReferenceArray<unsigned __int64> & operator=( IReferenceArray<unsigned __int64> const & );
			/*0008*/
		};

		struct IReferenceArray<unsigned char> : IReferenceArray_impl<unsigned char> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<unsigned char>( IReferenceArray<unsigned char> && );
			void IReferenceArray<unsigned char>( IReferenceArray<unsigned char> const & );
			void IReferenceArray<unsigned char>();
			IReferenceArray<unsigned char> & operator=( IReferenceArray<unsigned char> && );
			IReferenceArray<unsigned char> & operator=( IReferenceArray<unsigned char> const & );
			/*0008*/
		};

		struct IReferenceArray<unsigned int> : IReferenceArray_impl<unsigned int> {
			static WCHAR const * z_get_rc_name_impl();
			void IReferenceArray<unsigned int>( IReferenceArray<unsigned int> && );
			void IReferenceArray<unsigned int>( IReferenceArray<unsigned int> const & );
			void IReferenceArray<unsigned int>();
			IReferenceArray<unsigned int> & operator=( IReferenceArray<unsigned int> && );
			IReferenceArray<unsigned int> & operator=( IReferenceArray<unsigned int> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<DateTime> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , DateTime * * ) = 0;
			void IReferenceArray_impl<Windows::Foundation::DateTime>( IReferenceArray_impl<DateTime> && );
			void IReferenceArray_impl<Windows::Foundation::DateTime>( IReferenceArray_impl<DateTime> const & );
			void IReferenceArray_impl<Windows::Foundation::DateTime>();
			IReferenceArray_impl<DateTime> & operator=( IReferenceArray_impl<DateTime> && );
			IReferenceArray_impl<DateTime> & operator=( IReferenceArray_impl<DateTime> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<HSTRING__ *> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , HSTRING__ * * * ) = 0;
			void IReferenceArray_impl<HSTRING__ *>( IReferenceArray_impl<HSTRING__ *> && );
			void IReferenceArray_impl<HSTRING__ *>( IReferenceArray_impl<HSTRING__ *> const & );
			void IReferenceArray_impl<HSTRING__ *>();
			IReferenceArray_impl<HSTRING__ *> & operator=( IReferenceArray_impl<HSTRING__ *> && );
			IReferenceArray_impl<HSTRING__ *> & operator=( IReferenceArray_impl<HSTRING__ *> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<IInspectable *> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , IInspectable * * * ) = 0;
			void IReferenceArray_impl<IInspectable *>( IReferenceArray_impl<IInspectable *> && );
			void IReferenceArray_impl<IInspectable *>( IReferenceArray_impl<IInspectable *> const & );
			void IReferenceArray_impl<IInspectable *>();
			IReferenceArray_impl<IInspectable *> & operator=( IReferenceArray_impl<IInspectable *> && );
			IReferenceArray_impl<IInspectable *> & operator=( IReferenceArray_impl<IInspectable *> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<Internal::AggregateType<bool,unsigned char> > : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , UCHAR * * ) = 0;
			void IReferenceArray_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IReferenceArray_impl<Internal::AggregateType<bool,unsigned char> > && );
			void IReferenceArray_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IReferenceArray_impl<Internal::AggregateType<bool,unsigned char> > const & );
			void IReferenceArray_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >();
			IReferenceArray_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IReferenceArray_impl<Internal::AggregateType<bool,unsigned char> > && );
			IReferenceArray_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IReferenceArray_impl<Internal::AggregateType<bool,unsigned char> > const & );
			/*0008*/
		};

		struct IReferenceArray_impl<Point> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , Point * * ) = 0;
			void IReferenceArray_impl<Windows::Foundation::Point>( IReferenceArray_impl<Point> && );
			void IReferenceArray_impl<Windows::Foundation::Point>( IReferenceArray_impl<Point> const & );
			void IReferenceArray_impl<Windows::Foundation::Point>();
			IReferenceArray_impl<Point> & operator=( IReferenceArray_impl<Point> && );
			IReferenceArray_impl<Point> & operator=( IReferenceArray_impl<Point> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<Rect> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , Rect * * ) = 0;
			void IReferenceArray_impl<Windows::Foundation::Rect>( IReferenceArray_impl<Rect> && );
			void IReferenceArray_impl<Windows::Foundation::Rect>( IReferenceArray_impl<Rect> const & );
			void IReferenceArray_impl<Windows::Foundation::Rect>();
			IReferenceArray_impl<Rect> & operator=( IReferenceArray_impl<Rect> && );
			IReferenceArray_impl<Rect> & operator=( IReferenceArray_impl<Rect> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<Size> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , Size * * ) = 0;
			void IReferenceArray_impl<Windows::Foundation::Size>( IReferenceArray_impl<Size> && );
			void IReferenceArray_impl<Windows::Foundation::Size>( IReferenceArray_impl<Size> const & );
			void IReferenceArray_impl<Windows::Foundation::Size>();
			IReferenceArray_impl<Size> & operator=( IReferenceArray_impl<Size> && );
			IReferenceArray_impl<Size> & operator=( IReferenceArray_impl<Size> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<TimeSpan> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , TimeSpan * * ) = 0;
			void IReferenceArray_impl<Windows::Foundation::TimeSpan>( IReferenceArray_impl<TimeSpan> && );
			void IReferenceArray_impl<Windows::Foundation::TimeSpan>( IReferenceArray_impl<TimeSpan> const & );
			void IReferenceArray_impl<Windows::Foundation::TimeSpan>();
			IReferenceArray_impl<TimeSpan> & operator=( IReferenceArray_impl<TimeSpan> && );
			IReferenceArray_impl<TimeSpan> & operator=( IReferenceArray_impl<TimeSpan> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<_GUID> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , _GUID * * ) = 0;
			void IReferenceArray_impl<_GUID>( IReferenceArray_impl<_GUID> && );
			void IReferenceArray_impl<_GUID>( IReferenceArray_impl<_GUID> const & );
			void IReferenceArray_impl<_GUID>();
			IReferenceArray_impl<_GUID> & operator=( IReferenceArray_impl<_GUID> && );
			IReferenceArray_impl<_GUID> & operator=( IReferenceArray_impl<_GUID> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<__int64> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , LONGLONG * * ) = 0;
			void IReferenceArray_impl<__int64>( IReferenceArray_impl<__int64> && );
			void IReferenceArray_impl<__int64>( IReferenceArray_impl<__int64> const & );
			void IReferenceArray_impl<__int64>();
			IReferenceArray_impl<__int64> & operator=( IReferenceArray_impl<__int64> && );
			IReferenceArray_impl<__int64> & operator=( IReferenceArray_impl<__int64> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<double> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , double * * ) = 0;
			void IReferenceArray_impl<double>( IReferenceArray_impl<double> && );
			void IReferenceArray_impl<double>( IReferenceArray_impl<double> const & );
			void IReferenceArray_impl<double>();
			IReferenceArray_impl<double> & operator=( IReferenceArray_impl<double> && );
			IReferenceArray_impl<double> & operator=( IReferenceArray_impl<double> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<float> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , float * * ) = 0;
			void IReferenceArray_impl<float>( IReferenceArray_impl<float> && );
			void IReferenceArray_impl<float>( IReferenceArray_impl<float> const & );
			void IReferenceArray_impl<float>();
			IReferenceArray_impl<float> & operator=( IReferenceArray_impl<float> && );
			IReferenceArray_impl<float> & operator=( IReferenceArray_impl<float> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<int> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , INT * * ) = 0;
			void IReferenceArray_impl<int>( IReferenceArray_impl<int> && );
			void IReferenceArray_impl<int>( IReferenceArray_impl<int> const & );
			void IReferenceArray_impl<int>();
			IReferenceArray_impl<int> & operator=( IReferenceArray_impl<int> && );
			IReferenceArray_impl<int> & operator=( IReferenceArray_impl<int> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<short> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , SHORT * * ) = 0;
			void IReferenceArray_impl<short>( IReferenceArray_impl<short> && );
			void IReferenceArray_impl<short>( IReferenceArray_impl<short> const & );
			void IReferenceArray_impl<short>();
			IReferenceArray_impl<short> & operator=( IReferenceArray_impl<short> && );
			IReferenceArray_impl<short> & operator=( IReferenceArray_impl<short> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<unsigned __int64> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , ULONGLONG * * ) = 0;
			void IReferenceArray_impl<unsigned __int64>( IReferenceArray_impl<unsigned __int64> && );
			void IReferenceArray_impl<unsigned __int64>( IReferenceArray_impl<unsigned __int64> const & );
			void IReferenceArray_impl<unsigned __int64>();
			IReferenceArray_impl<unsigned __int64> & operator=( IReferenceArray_impl<unsigned __int64> && );
			IReferenceArray_impl<unsigned __int64> & operator=( IReferenceArray_impl<unsigned __int64> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<unsigned char> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , UCHAR * * ) = 0;
			void IReferenceArray_impl<unsigned char>( IReferenceArray_impl<unsigned char> && );
			void IReferenceArray_impl<unsigned char>( IReferenceArray_impl<unsigned char> const & );
			void IReferenceArray_impl<unsigned char>();
			IReferenceArray_impl<unsigned char> & operator=( IReferenceArray_impl<unsigned char> && );
			IReferenceArray_impl<unsigned char> & operator=( IReferenceArray_impl<unsigned char> const & );
			/*0008*/
		};

		struct IReferenceArray_impl<unsigned int> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * , UINT * * ) = 0;
			void IReferenceArray_impl<unsigned int>( IReferenceArray_impl<unsigned int> && );
			void IReferenceArray_impl<unsigned int>( IReferenceArray_impl<unsigned int> const & );
			void IReferenceArray_impl<unsigned int>();
			IReferenceArray_impl<unsigned int> & operator=( IReferenceArray_impl<unsigned int> && );
			IReferenceArray_impl<unsigned int> & operator=( IReferenceArray_impl<unsigned int> const & );
			/*0008*/
		};

		struct IReference_impl<DateTime> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( DateTime * ) = 0;
			void IReference_impl<Windows::Foundation::DateTime>( IReference_impl<DateTime> && );
			void IReference_impl<Windows::Foundation::DateTime>( IReference_impl<DateTime> const & );
			void IReference_impl<Windows::Foundation::DateTime>();
			IReference_impl<DateTime> & operator=( IReference_impl<DateTime> && );
			IReference_impl<DateTime> & operator=( IReference_impl<DateTime> const & );
			/*0008*/
		};

		struct IReference_impl<HSTRING__ *> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( HSTRING__ * * ) = 0;
			void IReference_impl<HSTRING__ *>( IReference_impl<HSTRING__ *> && );
			void IReference_impl<HSTRING__ *>( IReference_impl<HSTRING__ *> const & );
			void IReference_impl<HSTRING__ *>();
			IReference_impl<HSTRING__ *> & operator=( IReference_impl<HSTRING__ *> && );
			IReference_impl<HSTRING__ *> & operator=( IReference_impl<HSTRING__ *> const & );
			/*0008*/
		};

		struct IReference_impl<Internal::AggregateType<bool,unsigned char> > : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UCHAR * ) = 0;
			void IReference_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IReference_impl<Internal::AggregateType<bool,unsigned char> > && );
			void IReference_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >( IReference_impl<Internal::AggregateType<bool,unsigned char> > const & );
			void IReference_impl<Windows::Foundation::Internal::AggregateType<bool,unsigned char> >();
			IReference_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IReference_impl<Internal::AggregateType<bool,unsigned char> > && );
			IReference_impl<Internal::AggregateType<bool,unsigned char> > & operator=( IReference_impl<Internal::AggregateType<bool,unsigned char> > const & );
			/*0008*/
		};

		struct IReference_impl<Point> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( Point * ) = 0;
			void IReference_impl<Windows::Foundation::Point>( IReference_impl<Point> && );
			void IReference_impl<Windows::Foundation::Point>( IReference_impl<Point> const & );
			void IReference_impl<Windows::Foundation::Point>();
			IReference_impl<Point> & operator=( IReference_impl<Point> && );
			IReference_impl<Point> & operator=( IReference_impl<Point> const & );
			/*0008*/
		};

		struct IReference_impl<Rect> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( Rect * ) = 0;
			void IReference_impl<Windows::Foundation::Rect>( IReference_impl<Rect> && );
			void IReference_impl<Windows::Foundation::Rect>( IReference_impl<Rect> const & );
			void IReference_impl<Windows::Foundation::Rect>();
			IReference_impl<Rect> & operator=( IReference_impl<Rect> && );
			IReference_impl<Rect> & operator=( IReference_impl<Rect> const & );
			/*0008*/
		};

		struct IReference_impl<Size> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( Size * ) = 0;
			void IReference_impl<Windows::Foundation::Size>( IReference_impl<Size> && );
			void IReference_impl<Windows::Foundation::Size>( IReference_impl<Size> const & );
			void IReference_impl<Windows::Foundation::Size>();
			IReference_impl<Size> & operator=( IReference_impl<Size> && );
			IReference_impl<Size> & operator=( IReference_impl<Size> const & );
			/*0008*/
		};

		struct IReference_impl<TimeSpan> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( TimeSpan * ) = 0;
			void IReference_impl<Windows::Foundation::TimeSpan>( IReference_impl<TimeSpan> && );
			void IReference_impl<Windows::Foundation::TimeSpan>( IReference_impl<TimeSpan> const & );
			void IReference_impl<Windows::Foundation::TimeSpan>();
			IReference_impl<TimeSpan> & operator=( IReference_impl<TimeSpan> && );
			IReference_impl<TimeSpan> & operator=( IReference_impl<TimeSpan> const & );
			/*0008*/
		};

		struct IReference_impl<_GUID> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( _GUID * ) = 0;
			void IReference_impl<_GUID>( IReference_impl<_GUID> && );
			void IReference_impl<_GUID>( IReference_impl<_GUID> const & );
			void IReference_impl<_GUID>();
			IReference_impl<_GUID> & operator=( IReference_impl<_GUID> && );
			IReference_impl<_GUID> & operator=( IReference_impl<_GUID> const & );
			/*0008*/
		};

		struct IReference_impl<__int64> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( LONGLONG * ) = 0;
			void IReference_impl<__int64>( IReference_impl<__int64> && );
			void IReference_impl<__int64>( IReference_impl<__int64> const & );
			void IReference_impl<__int64>();
			IReference_impl<__int64> & operator=( IReference_impl<__int64> && );
			IReference_impl<__int64> & operator=( IReference_impl<__int64> const & );
			/*0008*/
		};

		struct IReference_impl<double> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( double * ) = 0;
			void IReference_impl<double>( IReference_impl<double> && );
			void IReference_impl<double>( IReference_impl<double> const & );
			void IReference_impl<double>();
			IReference_impl<double> & operator=( IReference_impl<double> && );
			IReference_impl<double> & operator=( IReference_impl<double> const & );
			/*0008*/
		};

		struct IReference_impl<float> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( float * ) = 0;
			void IReference_impl<float>( IReference_impl<float> && );
			void IReference_impl<float>( IReference_impl<float> const & );
			void IReference_impl<float>();
			IReference_impl<float> & operator=( IReference_impl<float> && );
			IReference_impl<float> & operator=( IReference_impl<float> const & );
			/*0008*/
		};

		struct IReference_impl<int> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( INT * ) = 0;
			void IReference_impl<int>( IReference_impl<int> && );
			void IReference_impl<int>( IReference_impl<int> const & );
			void IReference_impl<int>();
			IReference_impl<int> & operator=( IReference_impl<int> && );
			IReference_impl<int> & operator=( IReference_impl<int> const & );
			/*0008*/
		};

		struct IReference_impl<short> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( SHORT * ) = 0;
			void IReference_impl<short>( IReference_impl<short> && );
			void IReference_impl<short>( IReference_impl<short> const & );
			void IReference_impl<short>();
			IReference_impl<short> & operator=( IReference_impl<short> && );
			IReference_impl<short> & operator=( IReference_impl<short> const & );
			/*0008*/
		};

		struct IReference_impl<unsigned __int64> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( ULONGLONG * ) = 0;
			void IReference_impl<unsigned __int64>( IReference_impl<unsigned __int64> && );
			void IReference_impl<unsigned __int64>( IReference_impl<unsigned __int64> const & );
			void IReference_impl<unsigned __int64>();
			IReference_impl<unsigned __int64> & operator=( IReference_impl<unsigned __int64> && );
			IReference_impl<unsigned __int64> & operator=( IReference_impl<unsigned __int64> const & );
			/*0008*/
		};

		struct IReference_impl<unsigned char> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UCHAR * ) = 0;
			void IReference_impl<unsigned char>( IReference_impl<unsigned char> && );
			void IReference_impl<unsigned char>( IReference_impl<unsigned char> const & );
			void IReference_impl<unsigned char>();
			IReference_impl<unsigned char> & operator=( IReference_impl<unsigned char> && );
			IReference_impl<unsigned char> & operator=( IReference_impl<unsigned char> const & );
			/*0008*/
		};

		struct IReference_impl<unsigned int> : IInspectable {
			/*0030*/ virtual HRESULT get_Value( UINT * ) = 0;
			void IReference_impl<unsigned int>( IReference_impl<unsigned int> && );
			void IReference_impl<unsigned int>( IReference_impl<unsigned int> const & );
			void IReference_impl<unsigned int>();
			IReference_impl<unsigned int> & operator=( IReference_impl<unsigned int> && );
			IReference_impl<unsigned int> & operator=( IReference_impl<unsigned int> const & );
			/*0008*/
		};

		struct IStringable : IInspectable {
			/*0030*/ virtual HRESULT ToString( HSTRING__ * * ) = 0;
			void IStringable( IStringable && );
			void IStringable( IStringable const & );
			void IStringable();
			IStringable & operator=( IStringable && );
			IStringable & operator=( IStringable const & );
			/*0008*/
		};

		struct ITypedEventHandler<IInspectable *,IInspectable *> : ITypedEventHandler_impl<IInspectable *,IInspectable *> {
			static WCHAR const * z_get_rc_name_impl();
			void ITypedEventHandler<IInspectable *,IInspectable *>( ITypedEventHandler<IInspectable *,IInspectable *> && );
			void ITypedEventHandler<IInspectable *,IInspectable *>( ITypedEventHandler<IInspectable *,IInspectable *> const & );
			void ITypedEventHandler<IInspectable *,IInspectable *>();
			ITypedEventHandler<IInspectable *,IInspectable *> & operator=( ITypedEventHandler<IInspectable *,IInspectable *> && );
			ITypedEventHandler<IInspectable *,IInspectable *> & operator=( ITypedEventHandler<IInspectable *,IInspectable *> const & );
			/*0008*/
		};

		struct ITypedEventHandler<IMemoryBufferReference *,IInspectable *> : ITypedEventHandler_impl<IMemoryBufferReference *,IInspectable *> {
			static WCHAR const * z_get_rc_name_impl();
			void ITypedEventHandler<Windows::Foundation::IMemoryBufferReference *,IInspectable *>( ITypedEventHandler<IMemoryBufferReference *,IInspectable *> && );
			void ITypedEventHandler<Windows::Foundation::IMemoryBufferReference *,IInspectable *>( ITypedEventHandler<IMemoryBufferReference *,IInspectable *> const & );
			void ITypedEventHandler<Windows::Foundation::IMemoryBufferReference *,IInspectable *>();
			ITypedEventHandler<IMemoryBufferReference *,IInspectable *> & operator=( ITypedEventHandler<IMemoryBufferReference *,IInspectable *> && );
			ITypedEventHandler<IMemoryBufferReference *,IInspectable *> & operator=( ITypedEventHandler<IMemoryBufferReference *,IInspectable *> const & );
			/*0008*/
		};

		struct ITypedEventHandler_impl<IInspectable *,IInspectable *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IInspectable * , IInspectable * ) = 0;
			void ITypedEventHandler_impl<IInspectable *,IInspectable *>( ITypedEventHandler_impl<IInspectable *,IInspectable *> && );
			void ITypedEventHandler_impl<IInspectable *,IInspectable *>( ITypedEventHandler_impl<IInspectable *,IInspectable *> const & );
			void ITypedEventHandler_impl<IInspectable *,IInspectable *>();
			ITypedEventHandler_impl<IInspectable *,IInspectable *> & operator=( ITypedEventHandler_impl<IInspectable *,IInspectable *> && );
			ITypedEventHandler_impl<IInspectable *,IInspectable *> & operator=( ITypedEventHandler_impl<IInspectable *,IInspectable *> const & );
			/*0008*/
		};

		struct ITypedEventHandler_impl<IMemoryBufferReference *,IInspectable *> : IUnknown {
			/*0018*/ virtual HRESULT Invoke( IMemoryBufferReference * , IInspectable * ) = 0;
			void ITypedEventHandler_impl<Windows::Foundation::IMemoryBufferReference *,IInspectable *>( ITypedEventHandler_impl<IMemoryBufferReference *,IInspectable *> && );
			void ITypedEventHandler_impl<Windows::Foundation::IMemoryBufferReference *,IInspectable *>( ITypedEventHandler_impl<IMemoryBufferReference *,IInspectable *> const & );
			void ITypedEventHandler_impl<Windows::Foundation::IMemoryBufferReference *,IInspectable *>();
			ITypedEventHandler_impl<IMemoryBufferReference *,IInspectable *> & operator=( ITypedEventHandler_impl<IMemoryBufferReference *,IInspectable *> && );
			ITypedEventHandler_impl<IMemoryBufferReference *,IInspectable *> & operator=( ITypedEventHandler_impl<IMemoryBufferReference *,IInspectable *> const & );
			/*0008*/
		};

		struct Point {
			/*0000*/ float X;
			/*0004*/ float Y;
			/*0008*/
		};

		enum PropertyType {
			PropertyType_Empty = 0x0,
			PropertyType_UInt8 = 0x1,
			PropertyType_Int16 = 0x2,
			PropertyType_UInt16 = 0x3,
			PropertyType_Int32 = 0x4,
			PropertyType_UInt32 = 0x5,
			PropertyType_Int64 = 0x6,
			PropertyType_UInt64 = 0x7,
			PropertyType_Single = 0x8,
			PropertyType_Double = 0x9,
			PropertyType_Char16 = 0xa,
			PropertyType_Boolean = 0xb,
			PropertyType_String = 0xc,
			PropertyType_Inspectable = 0xd,
			PropertyType_DateTime = 0xe,
			PropertyType_TimeSpan = 0xf,
			PropertyType_Guid = 0x10,
			PropertyType_Point = 0x11,
			PropertyType_Size = 0x12,
			PropertyType_Rect = 0x13,
			PropertyType_OtherType = 0x14,
			PropertyType_UInt8Array = 0x401,
			PropertyType_Int16Array = 0x402,
			PropertyType_UInt16Array = 0x403,
			PropertyType_Int32Array = 0x404,
			PropertyType_UInt32Array = 0x405,
			PropertyType_Int64Array = 0x406,
			PropertyType_UInt64Array = 0x407,
			PropertyType_SingleArray = 0x408,
			PropertyType_DoubleArray = 0x409,
			PropertyType_Char16Array = 0x40a,
			PropertyType_BooleanArray = 0x40b,
			PropertyType_StringArray = 0x40c,
			PropertyType_InspectableArray = 0x40d,
			PropertyType_DateTimeArray = 0x40e,
			PropertyType_TimeSpanArray = 0x40f,
			PropertyType_GuidArray = 0x410,
			PropertyType_PointArray = 0x411,
			PropertyType_SizeArray = 0x412,
			PropertyType_RectArray = 0x413,
			PropertyType_OtherTypeArray = 0x414
		};

		struct Rect {
			/*0000*/ float X;
			/*0004*/ float Y;
			/*0008*/ float Width;
			/*000c*/ float Height;
			/*0010*/
		};

		struct Size {
			/*0000*/ float Width;
			/*0004*/ float Height;
			/*0008*/
		};

		struct TimeSpan {
			/*0000*/ LONGLONG Duration;
			/*0008*/
		};

	}

	namespace Storage {

		namespace Streams {

			class CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> : public CBuffer_Impl<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> {
			public:
				static WCHAR const * InternalGetRuntimeClassName();
				static TrustLevel InternalGetTrustLevel();
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG Release();
				/*    */ virtual ULONG AddRef();
				void CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler>( UINT , UINT , UCHAR * , <lambda_8fcabb03306c9f8765c03020018d7da6> );
				/*    */ virtual void ~CBuffer<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler>();
				/*0048*/ virtual void * __vecDelDtor( UINT );
				/*0070*/
			};

			class CBuffer<CBuffer_StandardCleanup,DefaultMarshaler> : public CBuffer_Impl<CBuffer_StandardCleanup,DefaultMarshaler> {
			public:
				static WCHAR const * InternalGetRuntimeClassName();
				static TrustLevel InternalGetTrustLevel();
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG Release();
				/*    */ virtual ULONG AddRef();
				void CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler>( UINT , UINT , UCHAR * , CBuffer_StandardCleanup );
				/*    */ virtual void ~CBuffer<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler>();
				/*0048*/ virtual void * __vecDelDtor( UINT );
				/*0070*/
			};

			class CBuffer_Impl<<lambda_8fcabb03306c9f8765c03020018d7da6>,DefaultMarshaler> : public RuntimeClass<RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> {
			public:
				void CBuffer_Impl<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler>( UINT , UINT , UCHAR * , <lambda_8fcabb03306c9f8765c03020018d7da6> );
				/*    */ virtual HRESULT get_Capacity( UINT * );
				/*    */ virtual HRESULT get_Length( UINT * );
				/*    */ virtual HRESULT put_Length( UINT );
				/*    */ virtual HRESULT Buffer( UCHAR * * );
				/*    */ virtual HRESULT GetUnmarshalClass( _GUID const & , void * , ULONG , void * , ULONG , _GUID * );
				/*    */ virtual HRESULT GetMarshalSizeMax( _GUID const & , void * , ULONG , void * , ULONG , ULONG * );
				/*    */ virtual HRESULT MarshalInterface( IStream * , _GUID const & , void * , ULONG , void * , ULONG );
				/*    */ virtual HRESULT UnmarshalInterface( IStream * , _GUID const & , void * * );
				/*    */ virtual HRESULT ReleaseMarshalData( IStream * );
				/*    */ virtual HRESULT DisconnectObject( ULONG );
			protected:
				/*    */ virtual void ~CBuffer_Impl<<lambda_8fcabb03306c9f8765c03020018d7da6>,Windows::Storage::Streams::DefaultMarshaler>();
			private:
				/*0050*/ UCHAR * _pBuffer;
				/*0058*/ UINT _cbCapacity;
				/*005c*/ UINT _cbLength;
				/*0060*/ <lambda_8fcabb03306c9f8765c03020018d7da6> _fnCleanup;
				/*0068*/ DefaultMarshaler _marshaler;
			protected:
				/*0048*/ virtual void * __vecDelDtor( UINT );
				/*0070*/
			};

			class CBuffer_Impl<CBuffer_StandardCleanup,DefaultMarshaler> : public RuntimeClass<RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase> {
			public:
				void CBuffer_Impl<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler>( UINT , UINT , UCHAR * , CBuffer_StandardCleanup );
				/*    */ virtual HRESULT get_Capacity( UINT * );
				/*    */ virtual HRESULT get_Length( UINT * );
				/*    */ virtual HRESULT put_Length( UINT );
				/*    */ virtual HRESULT Buffer( UCHAR * * );
				/*    */ virtual HRESULT GetUnmarshalClass( _GUID const & , void * , ULONG , void * , ULONG , _GUID * );
				/*    */ virtual HRESULT GetMarshalSizeMax( _GUID const & , void * , ULONG , void * , ULONG , ULONG * );
				/*    */ virtual HRESULT MarshalInterface( IStream * , _GUID const & , void * , ULONG , void * , ULONG );
				/*    */ virtual HRESULT UnmarshalInterface( IStream * , _GUID const & , void * * );
				/*    */ virtual HRESULT ReleaseMarshalData( IStream * );
				/*    */ virtual HRESULT DisconnectObject( ULONG );
			protected:
				/*    */ virtual void ~CBuffer_Impl<Windows::Storage::Streams::CBuffer_StandardCleanup,Windows::Storage::Streams::DefaultMarshaler>();
			private:
				/*0050*/ UCHAR * _pBuffer;
				/*0058*/ UINT _cbCapacity;
				/*005c*/ UINT _cbLength;
				/*0060*/ CBuffer_StandardCleanup _fnCleanup;
				/*0068*/ DefaultMarshaler _marshaler;
			protected:
				/*0048*/ virtual void * __vecDelDtor( UINT );
				/*0070*/
			};

			class CBuffer_StandardCleanup {
			public:
				void operator()( UCHAR * );
				/*0001*/
			};

			struct DefaultMarshaler {
				HRESULT GetUnmarshalClass( _GUID const & , void * , ULONG , void * , ULONG , _GUID * );
				HRESULT GetMarshalSizeMax( _GUID const & , void * , ULONG , void * , ULONG , ULONG * );
				HRESULT MarshalInterface( IStream * , _GUID const & , void * , ULONG , void * , ULONG );
			private:
				HRESULT _EnsureInit();
				/*0000*/ ComPtr<IMarshal> _spBufferMarshaler;
			public:
				void DefaultMarshaler( DefaultMarshaler && );
				void DefaultMarshaler( DefaultMarshaler const & );
				void DefaultMarshaler();
				void ~DefaultMarshaler();
				DefaultMarshaler & operator=( DefaultMarshaler && );
				DefaultMarshaler & operator=( DefaultMarshaler const & );
				void * __vecDelDtor( UINT );
				/*0008*/
			};

			struct IBuffer : IInspectable {
				/*0030*/ virtual HRESULT get_Capacity( UINT * ) = 0;
				/*0038*/ virtual HRESULT get_Length( UINT * ) = 0;
				/*0040*/ virtual HRESULT put_Length( UINT ) = 0;
				void IBuffer( IBuffer && );
				void IBuffer( IBuffer const & );
				void IBuffer();
				IBuffer & operator=( IBuffer && );
				IBuffer & operator=( IBuffer const & );
				/*0008*/
			};

			struct IBufferByteAccess : IUnknown {
				/*0018*/ virtual HRESULT Buffer( UCHAR * * ) = 0;
				void IBufferByteAccess( IBufferByteAccess && );
				void IBufferByteAccess( IBufferByteAccess const & );
				void IBufferByteAccess();
				IBufferByteAccess & operator=( IBufferByteAccess && );
				IBufferByteAccess & operator=( IBufferByteAccess const & );
				/*0008*/
			};

			struct IBufferFactory : IInspectable {
				/*0030*/ virtual HRESULT Create( UINT , IBuffer * * ) = 0;
				void IBufferFactory( IBufferFactory && );
				void IBufferFactory( IBufferFactory const & );
				void IBufferFactory();
				IBufferFactory & operator=( IBufferFactory && );
				IBufferFactory & operator=( IBufferFactory const & );
				/*0008*/
			};

			struct IBufferStatics : IInspectable {
				/*0030*/ virtual HRESULT CreateCopyFromMemoryBuffer( IMemoryBuffer * , IBuffer * * ) = 0;
				/*0038*/ virtual HRESULT CreateMemoryBufferOverIBuffer( IBuffer * , IMemoryBuffer * * ) = 0;
				void IBufferStatics( IBufferStatics && );
				void IBufferStatics( IBufferStatics const & );
				void IBufferStatics();
				IBufferStatics & operator=( IBufferStatics && );
				IBufferStatics & operator=( IBufferStatics const & );
				/*0008*/
			};

			struct IContentTypeProvider : IInspectable {
				/*0030*/ virtual HRESULT get_ContentType( HSTRING__ * * ) = 0;
				void IContentTypeProvider( IContentTypeProvider && );
				void IContentTypeProvider( IContentTypeProvider const & );
				void IContentTypeProvider();
				IContentTypeProvider & operator=( IContentTypeProvider && );
				IContentTypeProvider & operator=( IContentTypeProvider const & );
				/*0008*/
			};

			struct IInputStream : IInspectable {
				/*0030*/ virtual HRESULT ReadAsync( IBuffer * , UINT , InputStreamOptions , IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * * ) = 0;
				void IInputStream( IInputStream && );
				void IInputStream( IInputStream const & );
				void IInputStream();
				IInputStream & operator=( IInputStream && );
				IInputStream & operator=( IInputStream const & );
				/*0008*/
			};

			struct IOutputStream : IInspectable {
				/*0030*/ virtual HRESULT WriteAsync( IBuffer * , IAsyncOperationWithProgress<unsigned int,unsigned int> * * ) = 0;
				/*0038*/ virtual HRESULT FlushAsync( IAsyncOperation<bool> * * ) = 0;
				void IOutputStream( IOutputStream && );
				void IOutputStream( IOutputStream const & );
				void IOutputStream();
				IOutputStream & operator=( IOutputStream && );
				IOutputStream & operator=( IOutputStream const & );
				/*0008*/
			};

			struct IPropertySetSerializer : IInspectable {
				/*0030*/ virtual HRESULT Serialize( IPropertySet * , IBuffer * * ) = 0;
				/*0038*/ virtual HRESULT Deserialize( IPropertySet * , IBuffer * ) = 0;
				void IPropertySetSerializer( IPropertySetSerializer && );
				void IPropertySetSerializer( IPropertySetSerializer const & );
				void IPropertySetSerializer();
				IPropertySetSerializer & operator=( IPropertySetSerializer && );
				IPropertySetSerializer & operator=( IPropertySetSerializer const & );
				/*0008*/
			};

			struct IRandomAccessStream : IInspectable {
				/*0030*/ virtual HRESULT get_Size( ULONGLONG * ) = 0;
				/*0038*/ virtual HRESULT put_Size( ULONGLONG ) = 0;
				/*0040*/ virtual HRESULT GetInputStreamAt( ULONGLONG , IInputStream * * ) = 0;
				/*0048*/ virtual HRESULT GetOutputStreamAt( ULONGLONG , IOutputStream * * ) = 0;
				/*0050*/ virtual HRESULT get_Position( ULONGLONG * ) = 0;
				/*0058*/ virtual HRESULT Seek( ULONGLONG ) = 0;
				/*0060*/ virtual HRESULT CloneStream( IRandomAccessStream * * ) = 0;
				/*0068*/ virtual HRESULT get_CanRead( UCHAR * ) = 0;
				/*0070*/ virtual HRESULT get_CanWrite( UCHAR * ) = 0;
				void IRandomAccessStream( IRandomAccessStream && );
				void IRandomAccessStream( IRandomAccessStream const & );
				void IRandomAccessStream();
				IRandomAccessStream & operator=( IRandomAccessStream && );
				IRandomAccessStream & operator=( IRandomAccessStream const & );
				/*0008*/
			};

			struct IRandomAccessStreamWithContentType : IInspectable {
				void IRandomAccessStreamWithContentType( IRandomAccessStreamWithContentType && );
				void IRandomAccessStreamWithContentType( IRandomAccessStreamWithContentType const & );
				void IRandomAccessStreamWithContentType();
				IRandomAccessStreamWithContentType & operator=( IRandomAccessStreamWithContentType && );
				IRandomAccessStreamWithContentType & operator=( IRandomAccessStreamWithContentType const & );
				/*0008*/
			};

			enum InputStreamOptions : UINT {
				InputStreamOptions_None = 0x0,
				InputStreamOptions_Partial = 0x1,
				InputStreamOptions_ReadAhead = 0x2
			};

		}

		namespace Compression {

			struct BufferInfo {
				HRESULT Initialize( IBuffer * );
				/*0000*/ UCHAR * Contents;
				/*0008*/ UINT Length;
				/*000c*/ UINT Capacity;
				/*0010*/
			};

			class BufferPool {
				void BufferPool( BufferPool const & );
			public:
				void BufferPool();
				void ~BufferPool();
				HRESULT Initialize( ULONG , UCHAR );
				BOOLEAN Get( IBuffer * * );
				void Put( ComPtr<Windows::Storage::Streams::IBuffer> );
			private:
				BufferPool & operator=( BufferPool const & );
				/*0000*/ ComPtr<Windows::Storage::Streams::IBuffer> * Buffers;
				/*0008*/ UCHAR CurrentBuffers;
			public:
				void * __vecDelDtor( UINT );
				/*0010*/
			};

			enum CompressAlgorithm {
				CompressAlgorithm_InvalidAlgorithm = 0x0,
				CompressAlgorithm_NullAlgorithm = 0x1,
				CompressAlgorithm_Mszip = 0x2,
				CompressAlgorithm_Xpress = 0x3,
				CompressAlgorithm_XpressHuff = 0x4,
				CompressAlgorithm_Lzms = 0x5
			};

			class CompressFlushOperation : public RuntimeClass<Windows::Foundation::IAsyncOperation<bool>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
			public:
				static WCHAR const * InternalGetRuntimeClassName();
				static TrustLevel InternalGetTrustLevel();
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG Release();
				/*    */ virtual ULONG AddRef();
				void CompressFlushOperation( ComPtr<Windows::Storage::Compression::CompressorServer> , CompressorFlushMode , LONG );
				/*    */ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<bool> * );
				/*    */ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<bool> * * );
				/*    */ virtual HRESULT GetResults( UCHAR * );
				/*    */ virtual HRESULT OnStart();
				/*    */ virtual void OnClose();
				/*    */ virtual void OnCancel();
				void DoWork();
				BOOLEAN DoWorkFast();
				HRESULT StartOperation();
			private:
				void Complete( HRESULT );
				/*00a8*/ ComPtr<Windows::Storage::Compression::CompressorServer> Stream;
				/*00b0*/ CompressorFlushMode Mode;
			public:
				/*    */ virtual void ~CompressFlushOperation();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00b8*/
			};

			class CompressWriteOperation : public RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
			public:
				static WCHAR const * InternalGetRuntimeClassName();
				static TrustLevel InternalGetTrustLevel();
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG Release();
				/*    */ virtual ULONG AddRef();
				void CompressWriteOperation( ComPtr<Windows::Storage::Compression::CompressorServer> , ComPtr<Windows::Storage::Streams::IBuffer> , LONG );
				/*    */ virtual HRESULT put_Completed( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * );
				/*    */ virtual HRESULT get_Completed( IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * * );
				/*    */ virtual HRESULT put_Progress( IAsyncOperationProgressHandler<unsigned int,unsigned int> * );
				/*    */ virtual HRESULT get_Progress( IAsyncOperationProgressHandler<unsigned int,unsigned int> * * );
				/*    */ virtual HRESULT GetResults( UINT * );
				/*    */ virtual HRESULT OnStart();
				/*    */ virtual void OnClose();
				/*    */ virtual void OnCancel();
				void DoWork();
				BOOLEAN DoWorkFast();
				HRESULT StartOperation();
			private:
				void Complete( HRESULT , UINT );
				/*00c0*/ ComPtr<Windows::Storage::Compression::CompressorServer> Stream;
				/*00c8*/ ComPtr<Windows::Storage::Streams::IBuffer> Buffer;
				/*00d0*/ ULONG volatile BytesWritten;
			public:
				/*    */ virtual void ~CompressWriteOperation();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00d8*/
			};

			class CompressorFactoryServer : public ActivationFactory<Windows::Storage::Compression::ICompressorFactory,Details::Nil,Details::Nil,0> {
			public:
				/*    */ virtual HRESULT CreateCompressor( IOutputStream * , ICompressor * * );
				/*    */ virtual HRESULT CreateCompressorEx( IOutputStream * , CompressAlgorithm , UINT , ICompressor * * );
				/*    */ virtual HRESULT ActivateInstance( IInspectable * * );
				void CompressorFactoryServer( CompressorFactoryServer && );
				void CompressorFactoryServer( CompressorFactoryServer const & );
				void CompressorFactoryServer();
				/*    */ virtual void ~CompressorFactoryServer();
				CompressorFactoryServer & operator=( CompressorFactoryServer && );
				CompressorFactoryServer & operator=( CompressorFactoryServer const & );
				void __local_vftable_ctor_closure();
				/*0038*/ virtual void * __vecDelDtor( UINT );
				/*0030*/
			};

			enum CompressorFlushMode {
				COMPRESSOR_FLUSH_NORMAL = 0x0,
				COMPRESSOR_FLUSH_FINAL = 0x1,
				COMPRESSOR_FLUSH_DONE = 0x2
			};

			class CompressorServer : public RuntimeClass<Windows::Storage::Streams::IOutputStream,Windows::Storage::Compression::ICompressor,Windows::Foundation::IClosable,FtmBase> {
			public:
				static WCHAR const * InternalGetRuntimeClassName();
				static TrustLevel InternalGetTrustLevel();
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG Release();
				/*    */ virtual ULONG AddRef();
				void CompressorServer();
				/*    */ virtual void ~CompressorServer();
				HRESULT Initialize( ULONG , UINT , IOutputStream * );
				HRESULT WriteSync( void const * , UINT , CompressWriteOperation * );
				HRESULT WriteNonBlock( void const * , UINT );
				HRESULT FlushSync( CompressorFlushMode );
				void OnOperationCancelled();
				/*    */ virtual HRESULT Close();
				/*    */ virtual HRESULT DetachStream( IOutputStream * * );
				/*    */ virtual HRESULT WriteAsync( IBuffer * , IAsyncOperationWithProgress<unsigned int,unsigned int> * * );
				/*    */ virtual HRESULT FlushAsync( IAsyncOperation<bool> * * );
				/*    */ virtual HRESULT FinishAsync( IAsyncOperation<bool> * * );
				/*0050*/ WorkManager Work;
			private:
				HRESULT PrepareForOperation();
				HRESULT DrainIOQueue();
				HRESULT CompressAndQueueWrite( void const * , ULONG );
				void OnUnderlyingWriteCompleted( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int> > , ComPtr<Windows::Storage::Streams::IBuffer> );
				void OnUnderlyingFlushCompleted( ComPtr<Windows::Foundation::IAsyncOperation<bool> > );
				HRESULT CreateAsyncFlushOrFinish( IAsyncOperation<bool> * * , CompressorFlushMode );
				HRESULT IssueUnderlyingWrite( ComPtr<Windows::Storage::Streams::IBuffer> );
				HRESULT IssueUnderlyingFlush();
				HRESULT WriteHeader();
				void SetError( HRESULT );
				HRESULT WaitForBuffer( IBuffer * * );
				void ReturnBufferToPool( ComPtr<Windows::Storage::Streams::IBuffer> );
				/*00c0*/ LONG volatile NextOperationId;
				/*00c8*/ ConditionLock Lock;
				/*00e0*/ COMPRESSOR_HANDLE__ * Compressor;
				/*00e8*/ ComPtr<Windows::Storage::Streams::IBuffer> InternalBuffer;
				/*00f0*/ HRESULT ErrorCode;
				/*00f8*/ GitPtr UnderlyingStream;
				/*0108*/ GitPtr UnderlyingIO;
				/*0118*/ ComPtr<Windows::Storage::Compression::WriteListener> UnderlyingIOListener;
				/*0120*/ ComPtr<Windows::Storage::Compression::FlushListener> UnderlyingFlushListener;
				/*0128*/ BufferPool CompressedBufferPool;
				/*0138*/ ULONG CompressAlgorithm;
			public:
				void __local_vftable_ctor_closure();
				/*0040*/ virtual void * __vecDelDtor( UINT );
				/*0140*/
			};

			struct ConditionLock {
				
			private:
				void ConditionLock( ConditionLock const & );
			public:
				void ConditionLock();
				void ~ConditionLock();
				void Sleep( ULONG );
				void WakeAll();
				void WakeOne();
				void Acquire();
				void Release();
				void AssertLockHeld();
			private:
				ConditionLock & operator=( ConditionLock const & );
				/*0000*/ _RTL_SRWLOCK Lock;
				/*0008*/ _RTL_CONDITION_VARIABLE Condition;
				/*0010*/ <unnamed-type-WakeAction> WakeAction;
			public:
				void * __vecDelDtor( UINT );
				/*0018*/
			};

			class DecompressReadOperation : public RuntimeClass<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Internal::AsyncBaseWithProgressFTM<Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
			public:
				static WCHAR const * InternalGetRuntimeClassName();
				static TrustLevel InternalGetTrustLevel();
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG Release();
				/*    */ virtual ULONG AddRef();
				void DecompressReadOperation( ComPtr<Windows::Storage::Compression::DecompressorServer> , ComPtr<Windows::Storage::Streams::IBuffer> , UINT , InputStreamOptions , LONG );
				/*    */ virtual HRESULT GetResults( IBuffer * * );
				/*    */ virtual HRESULT OnStart();
				/*    */ virtual void OnClose();
				/*    */ virtual void OnCancel();
				void DoWork();
				BOOLEAN DoWorkFast();
				/*    */ virtual HRESULT put_Completed( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * );
				/*    */ virtual HRESULT get_Completed( IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * * );
				/*    */ virtual HRESULT put_Progress( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * );
				/*    */ virtual HRESULT get_Progress( IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * * );
				HRESULT StartOperation();
			private:
				void Complete( HRESULT , UINT );
				/*00c0*/ ComPtr<Windows::Storage::Compression::DecompressorServer> Stream;
				/*00c8*/ ComPtr<Windows::Storage::Streams::IBuffer> Buffer;
				/*00d0*/ InputStreamOptions ReadOptions;
				/*00d4*/ UINT BytesToRead;
			public:
				/*    */ virtual void ~DecompressReadOperation();
				/*0058*/ virtual void * __vecDelDtor( UINT );
				/*00d8*/
			};

			class DecompressorFactoryServer : public ActivationFactory<Windows::Storage::Compression::IDecompressorFactory,Details::Nil,Details::Nil,0> {
			public:
				/*    */ virtual HRESULT CreateDecompressor( IInputStream * , IDecompressor * * );
				/*    */ virtual HRESULT ActivateInstance( IInspectable * * );
				void DecompressorFactoryServer( DecompressorFactoryServer && );
				void DecompressorFactoryServer( DecompressorFactoryServer const & );
				void DecompressorFactoryServer();
				/*    */ virtual void ~DecompressorFactoryServer();
				DecompressorFactoryServer & operator=( DecompressorFactoryServer && );
				DecompressorFactoryServer & operator=( DecompressorFactoryServer const & );
				void __local_vftable_ctor_closure();
				/*0038*/ virtual void * __vecDelDtor( UINT );
				/*0030*/
			};

			class DecompressorServer : public RuntimeClass<Windows::Storage::Streams::IInputStream,Windows::Storage::Compression::IDecompressor,Windows::Foundation::IClosable,FtmBase> {
			public:
				static WCHAR const * InternalGetRuntimeClassName();
				static TrustLevel InternalGetTrustLevel();
				/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
				/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
				/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
				/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
				/*    */ virtual ULONG Release();
				/*    */ virtual ULONG AddRef();
				void DecompressorServer();
				/*    */ virtual void ~DecompressorServer();
				HRESULT Initialize( IInputStream * );
				HRESULT ReadSync( void * , UINT , UINT * , InputStreamOptions , DecompressReadOperation * );
				HRESULT ReadNonBlock( void * , UINT , UINT * , InputStreamOptions );
				void OnOperationCancelled();
				/*    */ virtual HRESULT Close();
				/*    */ virtual HRESULT DetachStream( IInputStream * * );
				/*    */ virtual HRESULT ReadAsync( IBuffer * , UINT , InputStreamOptions , IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * * );
				/*0050*/ WorkManager Work;
			private:
				HRESULT ReadPartialSync( void * , UINT , UINT * );
				void OnUnderlyingReadCompleted( ComPtr<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int> > );
				HRESULT GetCompressedBuffer( IBuffer * * , UINT * );
				HRESULT IssueUnderlyingRead( ComPtr<Windows::Storage::Streams::IBuffer> , UINT );
				HRESULT ReadHeaderAndInitialize();
				HRESULT ReadScratch( UINT , void * * );
				void SetError( HRESULT );
				/*00c0*/ LONG volatile NextOperationId;
				/*00c8*/ ConditionLock Lock;
				/*00e0*/ COMPRESSOR_HANDLE__ * Decompressor;
				/*00e8*/ UINT InternalBufferOffset;
				/*00f0*/ ComPtr<Windows::Storage::Streams::IBuffer> InternalBuffer;
				/*00f8*/ GitPtr UnderlyingStream;
				/*0108*/ HRESULT ErrorCode;
				/*010c*/ DecompressorState State;
				/*0110*/ GitPtr UnderlyingIO;
				/*0120*/ ComPtr<Windows::Storage::Streams::IBuffer> UnderlyingIOBuffer;
				/*0128*/ ComPtr<Windows::Storage::Compression::ReadListener> UnderlyingIOListener;
				/*0130*/ ComPtr<Windows::Storage::Streams::IBuffer> ScratchBuffer;
				/*0138*/ ComPtr<Windows::Storage::Streams::IBuffer> NextCompressedBlock;
				/*0140*/ UINT NextCompressedSize;
				/*0144*/ UINT NextUncompressedSize;
				/*0148*/ BufferPool CompressedBufferPool;
				/*0158*/ ULONG MaxUncompressedSize;
				/*015c*/ ULONG MaxCompressedSize;
				/*0160*/ INT IsStream;
				/*0164*/ ULONG UncompressedBlockSize;
				/*0168*/ _ULARGE_INTEGER DataRemaining;
			public:
				void __local_vftable_ctor_closure();
				/*0038*/ virtual void * __vecDelDtor( UINT );
				/*0170*/
			};

			enum DecompressorState {
				DECOMPRESSOR_WANT_SCRATCH_DATA = 0x0,
				DECOMPRESSOR_WANT_BLOCK_HEADER = 0x1,
				DECOMPRESSOR_WANT_BLOCK = 0x2,
				DECOMPRESSOR_HAVE_SCRATCH_DATA = 0x3,
				DECOMPRESSOR_HAVE_BLOCK = 0x4,
				DECOMPRESSOR_HAVE_EOF = 0x5,
				DECOMPRESSOR_HAVE_ERROR = 0x6
			};

			class FlushListener : public RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,FtmBase> {
				void FlushListener( FlushListener const & );
			public:
				void FlushListener();
				void SetCompressor( ComPtr<Windows::Storage::Compression::CompressorServer> );
				/*    */ virtual HRESULT Invoke( IAsyncOperation<bool> * , AsyncStatus );
			private:
				FlushListener & operator=( FlushListener const & );
				/*0030*/ ComPtr<Windows::Storage::Compression::CompressorServer> Stream;
			public:
				/*    */ virtual void ~FlushListener();
				void __local_vftable_ctor_closure();
				/*0020*/ virtual void * __vecDelDtor( UINT );
				/*0038*/
			};

			struct ICompressor : IInspectable {
				/*0030*/ virtual HRESULT FinishAsync( IAsyncOperation<bool> * * ) = 0;
				/*0038*/ virtual HRESULT DetachStream( IOutputStream * * ) = 0;
				void ICompressor( ICompressor && );
				void ICompressor( ICompressor const & );
				void ICompressor();
				ICompressor & operator=( ICompressor && );
				ICompressor & operator=( ICompressor const & );
				/*0008*/
			};

			struct ICompressorFactory : IInspectable {
				/*0030*/ virtual HRESULT CreateCompressor( IOutputStream * , ICompressor * * ) = 0;
				/*0038*/ virtual HRESULT CreateCompressorEx( IOutputStream * , CompressAlgorithm , UINT , ICompressor * * ) = 0;
				void ICompressorFactory( ICompressorFactory && );
				void ICompressorFactory( ICompressorFactory const & );
				void ICompressorFactory();
				ICompressorFactory & operator=( ICompressorFactory && );
				ICompressorFactory & operator=( ICompressorFactory const & );
				/*0008*/
			};

			struct IDecompressor : IInspectable {
				/*0030*/ virtual HRESULT DetachStream( IInputStream * * ) = 0;
				void IDecompressor( IDecompressor && );
				void IDecompressor( IDecompressor const & );
				void IDecompressor();
				IDecompressor & operator=( IDecompressor && );
				IDecompressor & operator=( IDecompressor const & );
				/*0008*/
			};

			struct IDecompressorFactory : IInspectable {
				/*0030*/ virtual HRESULT CreateDecompressor( IInputStream * , IDecompressor * * ) = 0;
				void IDecompressorFactory( IDecompressorFactory && );
				void IDecompressorFactory( IDecompressorFactory const & );
				void IDecompressorFactory();
				IDecompressorFactory & operator=( IDecompressorFactory && );
				IDecompressorFactory & operator=( IDecompressorFactory const & );
				/*0008*/
			};

			class ReadListener : public RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,FtmBase> {
				void ReadListener( ReadListener const & );
			public:
				void ReadListener();
				void SetDecompressor( ComPtr<Windows::Storage::Compression::DecompressorServer> );
				/*    */ virtual HRESULT Invoke( IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * , AsyncStatus );
			private:
				ReadListener & operator=( ReadListener const & );
				/*0030*/ ComPtr<Windows::Storage::Compression::DecompressorServer> Stream;
			public:
				/*    */ virtual void ~ReadListener();
				void __local_vftable_ctor_closure();
				/*0020*/ virtual void * __vecDelDtor( UINT );
				/*0038*/
			};

			class WorkManager {
				void WorkManager( WorkManager const & );
			public:
				void WorkManager();
				HRESULT Initialize();
				void ~WorkManager();
			private:
				WorkManager & operator=( WorkManager const & );
				/*0000*/ _RTL_SRWLOCK Lock;
				/*0008*/ _TP_POOL * ThreadPool;
				/*0010*/ _TP_CALLBACK_ENVIRON_V3 PoolEnvironment;
				/*0058*/ void * volatile CurrentOperation;
				/*0060*/ CO_MTA_USAGE_COOKIE__ * MTACookie;
				/*0068*/ INT MTACookieInitialized;
			public:
				void * __vecDelDtor( UINT );
				/*0070*/
			};

			class WriteListener : public RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,FtmBase> {
				void WriteListener( WriteListener const & );
			public:
				void WriteListener();
				void SetCompressor( ComPtr<Windows::Storage::Compression::CompressorServer> );
				void SetBuffer( ComPtr<Windows::Storage::Streams::IBuffer> );
				/*    */ virtual HRESULT Invoke( IAsyncOperationWithProgress<unsigned int,unsigned int> * , AsyncStatus );
			private:
				WriteListener & operator=( WriteListener const & );
				/*0030*/ ComPtr<Windows::Storage::Compression::CompressorServer> Stream;
				/*0038*/ ComPtr<Windows::Storage::Streams::IBuffer> Buffer;
			public:
				/*    */ virtual void ~WriteListener();
				void __local_vftable_ctor_closure();
				/*0020*/ virtual void * __vecDelDtor( UINT );
				/*0040*/
			};

		}

	}

}

namespace std {

	struct _Basic_container_proxy_ptr12 {
		/*0000*/ _Container_proxy * _Ptr;
		void _Release();
	protected:
		void _Basic_container_proxy_ptr12( _Basic_container_proxy_ptr12 && );
		void _Basic_container_proxy_ptr12( _Basic_container_proxy_ptr12 const & );
		void _Basic_container_proxy_ptr12();
		/*0008*/
	};

	struct _Container_base0 {
		void _Orphan_all();
		void _Swap_proxy_and_iterators( _Container_base0 & );
		void _Alloc_proxy( _Fake_allocator const & );
		void _Reload_proxy( _Fake_allocator const & , _Fake_allocator const & );
		/*0001*/
	};

	struct _Container_base12 {
		void _Container_base12( _Container_base12 const & );
		void _Container_base12();
		_Container_base12 & operator=( _Container_base12 const & );
		void _Orphan_all();
		void _Swap_proxy_and_iterators( _Container_base12 & );
		/*0000*/ _Container_proxy * _Myproxy;
	private:
		void _Orphan_all_unlocked_v3();
		void _Swap_proxy_and_iterators_unlocked( _Container_base12 & );
		void _Orphan_all_locked_v3();
		void _Swap_proxy_and_iterators_locked( _Container_base12 & );
		/*0008*/
	};

	struct _Container_proxy {
		void _Container_proxy( _Container_base12 * );
		void _Container_proxy();
		/*0000*/ _Container_base12 const * _Mycont;
		/*0008*/ _Iterator_base12 * _Myfirstiter;
		/*0010*/
	};

	struct _Default_allocate_traits {
		static void * _Allocate( ULONGLONG const );
		static void * _Allocate_aligned( ULONGLONG const , ULONGLONG const );
		/*0001*/
	};

	struct _Default_sentinel {
		/*0001*/
	};

	struct _Distance_unknown {
		_Distance_unknown operator-() const;
		/*0001*/
	};

	struct _Equal_allocators {
		/*0001*/
	};

	struct _Fake_allocator {
		/*0001*/
	};

	struct _Fake_proxy_ptr_impl {
		void _Fake_proxy_ptr_impl( _Fake_allocator const & , _Container_base0 const & );
		void _Fake_proxy_ptr_impl( _Fake_allocator const & , _Leave_proxy_unbound );
		void _Fake_proxy_ptr_impl( _Fake_proxy_ptr_impl const & );
		_Fake_proxy_ptr_impl & operator=( _Fake_proxy_ptr_impl const & );
		void _Bind( _Fake_allocator const & , _Container_base0 * );
		void _Release();
		/*0001*/
	};

	struct _False_copy_cat {
		static BOOLEAN const _Really_trivial;
		static BOOLEAN const _Trivially_copyable;
		/*0001*/
	};

	struct _Floating_type_traits<double> {
		static INT const _Mantissa_bits;
		static INT const _Exponent_bits;
		static INT const _Maximum_binary_exponent;
		static INT const _Minimum_binary_exponent;
		static INT const _Exponent_bias;
		static INT const _Sign_shift;
		static INT const _Exponent_shift;
		static ULONGLONG const _Exponent_mask;
		static ULONGLONG const _Normal_mantissa_mask;
		static ULONGLONG const _Denormal_mantissa_mask;
		static ULONGLONG const _Special_nan_mantissa_mask;
		static ULONGLONG const _Shifted_sign_mask;
		static ULONGLONG const _Shifted_exponent_mask;
		/*0001*/
	};

	struct _Floating_type_traits<float> {
		static INT const _Mantissa_bits;
		static INT const _Exponent_bits;
		static INT const _Maximum_binary_exponent;
		static INT const _Minimum_binary_exponent;
		static INT const _Exponent_bias;
		static INT const _Sign_shift;
		static INT const _Exponent_shift;
		static UINT const _Exponent_mask;
		static UINT const _Normal_mantissa_mask;
		static UINT const _Denormal_mantissa_mask;
		static UINT const _Special_nan_mantissa_mask;
		static UINT const _Shifted_sign_mask;
		static UINT const _Shifted_exponent_mask;
		/*0001*/
	};

	struct _Floating_type_traits<long double> : _Floating_type_traits<double> {
		/*0001*/
	};

	class _Init_locks {
	public:
		void _Init_locks();
		void ~_Init_locks();
	private:
		static void _Init_locks_ctor( _Init_locks * );
		static void _Init_locks_dtor( _Init_locks * );
	public:
		void * __vecDelDtor( UINT );
		/*0001*/
	};

	struct _Invoker_functor {
		static _Invoker_strategy const _Strategy;
		/*0001*/
	};

	struct _Invoker_pmd_object {
		static _Invoker_strategy const _Strategy;
		/*0001*/
	};

	struct _Invoker_pmd_pointer {
		static _Invoker_strategy const _Strategy;
		/*0001*/
	};

	struct _Invoker_pmd_refwrap {
		static _Invoker_strategy const _Strategy;
		/*0001*/
	};

	struct _Invoker_pmf_object {
		static _Invoker_strategy const _Strategy;
		/*0001*/
	};

	struct _Invoker_pmf_pointer {
		static _Invoker_strategy const _Strategy;
		/*0001*/
	};

	struct _Invoker_pmf_refwrap {
		static _Invoker_strategy const _Strategy;
		/*0001*/
	};

	enum _Invoker_strategy {
		_Functor = 0x0,
		_Pmf_object = 0x1,
		_Pmf_refwrap = 0x2,
		_Pmf_pointer = 0x3,
		_Pmd_object = 0x4,
		_Pmd_refwrap = 0x5,
		_Pmd_pointer = 0x6
	};

	struct _Is_character<char> : integral_constant<bool,1> {
		/*0001*/
	};

	struct _Is_character<signed char> : integral_constant<bool,1> {
		/*0001*/
	};

	struct _Is_character<unsigned char> : integral_constant<bool,1> {
		/*0001*/
	};

	struct _Is_character_or_bool<bool> : integral_constant<bool,1> {
		/*0001*/
	};

	struct _Iterator_base0 {
		void _Adopt( void const * );
		_Container_base0 const * _Getcont() const;
		static BOOLEAN const _Unwrap_when_unverified;
		/*0001*/
	};

	struct _Iterator_base12 {
		void _Iterator_base12( _Iterator_base12 const & );
		void _Iterator_base12();
		_Iterator_base12 & operator=( _Iterator_base12 const & );
		void _Adopt( _Container_base12 const * );
		_Container_base12 const * _Getcont() const;
		static BOOLEAN const _Unwrap_when_unverified;
		/*0000*/ _Container_proxy * _Myproxy;
		/*0008*/ _Iterator_base12 * _Mynextiter;
		/*0010*/
	};

	struct _Leave_proxy_unbound {
		/*0001*/
	};

	class _Lockit {
	public:
		void _Lockit( _Lockit const & );
		void _Lockit( INT );
		void _Lockit();
		void ~_Lockit();
	private:
		static void _Lockit_ctor( _Lockit * , INT );
		static void _Lockit_ctor( _Lockit * );
	public:
		static void _Lockit_ctor( INT );
	private:
		static void _Lockit_dtor( _Lockit * );
	public:
		static void _Lockit_dtor( INT );
		_Lockit & operator=( _Lockit const & );
	private:
		/*0000*/ INT _Locktype;
	public:
		void * __vecDelDtor( UINT );
		/*0004*/
	};

	struct _Make_signed2<1> {
		/*0001*/
	};

	struct _Make_signed2<2> {
		/*0001*/
	};

	struct _Make_signed2<4> {
		/*0001*/
	};

	struct _Make_signed2<8> {
		/*0001*/
	};

	struct _Make_unsigned2<1> {
		/*0001*/
	};

	struct _Make_unsigned2<2> {
		/*0001*/
	};

	struct _Make_unsigned2<4> {
		/*0001*/
	};

	struct _Make_unsigned2<8> {
		/*0001*/
	};

	struct _Maximum<> : integral_constant<unsigned __int64,0> {
		/*0001*/
	};

	struct _Move_allocator_tag {
		/*0001*/
	};

	struct _Nontrivial_dummy_type {
		void _Nontrivial_dummy_type();
		/*0001*/
	};

	struct _Num_base {
		static float_denorm_style const has_denorm;
		static BOOLEAN const has_denorm_loss;
		static BOOLEAN const has_infinity;
		static BOOLEAN const has_quiet_NaN;
		static BOOLEAN const has_signaling_NaN;
		static BOOLEAN const is_bounded;
		static BOOLEAN const is_exact;
		static BOOLEAN const is_iec559;
		static BOOLEAN const is_integer;
		static BOOLEAN const is_modulo;
		static BOOLEAN const is_signed;
		static BOOLEAN const is_specialized;
		static BOOLEAN const tinyness_before;
		static BOOLEAN const traps;
		static float_round_style const round_style;
		static INT const digits;
		static INT const digits10;
		static INT const max_digits10;
		static INT const max_exponent;
		static INT const max_exponent10;
		static INT const min_exponent;
		static INT const min_exponent10;
		static INT const radix;
		/*0001*/
	};

	struct _Num_float_base : _Num_base {
		static float_denorm_style const has_denorm;
		static BOOLEAN const has_infinity;
		static BOOLEAN const has_quiet_NaN;
		static BOOLEAN const has_signaling_NaN;
		static BOOLEAN const is_bounded;
		static BOOLEAN const is_iec559;
		static BOOLEAN const is_signed;
		static BOOLEAN const is_specialized;
		static float_round_style const round_style;
		static INT const radix;
		/*0001*/
	};

	struct _Num_int_base : _Num_base {
		static BOOLEAN const is_bounded;
		static BOOLEAN const is_exact;
		static BOOLEAN const is_integer;
		static BOOLEAN const is_specialized;
		static INT const radix;
		/*0001*/
	};

	struct _One_then_variadic_args_t {
		/*0001*/
	};

	struct _Select<0> {
		/*0001*/
	};

	enum _Uninitialized {
		_Noinit = 0x0
	};

	struct _Unused_parameter {
		/*0001*/
	};

	struct _Zero_then_variadic_args_t {
		/*0001*/
	};

	class __non_rtti_object : public bad_typeid {
	public:
		static __non_rtti_object __construct_from_string_literal( CHAR const * const );
		void __non_rtti_object( __non_rtti_object && );
		void __non_rtti_object( __non_rtti_object const & );
	private:
		void __non_rtti_object( CHAR const * const , INT );
	public:
		/*    */ virtual void ~__non_rtti_object();
		__non_rtti_object & operator=( __non_rtti_object && );
		__non_rtti_object & operator=( __non_rtti_object const & );
		/*0000*/ virtual void * __vecDelDtor( UINT );
		/*0018*/
	};

	enum align_val_t : ULONGLONG 
	};

	class allocator<void> {
		/*0001*/
	};

	struct allocator_arg_t {
		/*0001*/
	};

	class bad_alloc : public exception {
	public:
		void bad_alloc( bad_alloc && );
		void bad_alloc( bad_alloc const & );
	private:
		void bad_alloc( CHAR const * const );
	public:
		void bad_alloc();
		/*    */ virtual void ~bad_alloc();
		bad_alloc & operator=( bad_alloc && );
		bad_alloc & operator=( bad_alloc const & );
		void __local_vftable_ctor_closure();
		/*0000*/ virtual void * __vecDelDtor( UINT );
		/*0018*/
	};

	class bad_array_new_length : public bad_alloc {
	public:
		void bad_array_new_length( bad_array_new_length && );
		void bad_array_new_length( bad_array_new_length const & );
		void bad_array_new_length();
		/*    */ virtual void ~bad_array_new_length();
		bad_array_new_length & operator=( bad_array_new_length && );
		bad_array_new_length & operator=( bad_array_new_length const & );
		void __local_vftable_ctor_closure();
		/*0000*/ virtual void * __vecDelDtor( UINT );
		/*0018*/
	};

	class bad_cast : public exception {
	public:
		void bad_cast( bad_cast && );
		void bad_cast( bad_cast const & );
	private:
		void bad_cast( CHAR const * const , INT );
	public:
		void bad_cast();
		static bad_cast __construct_from_string_literal( CHAR const * const );
		/*    */ virtual void ~bad_cast();
		bad_cast & operator=( bad_cast && );
		bad_cast & operator=( bad_cast const & );
		void __local_vftable_ctor_closure();
		/*0000*/ virtual void * __vecDelDtor( UINT );
		/*0018*/
	};

	class bad_exception : public exception {
	public:
		void bad_exception( bad_exception && );
		void bad_exception( bad_exception const & );
		void bad_exception();
		/*    */ virtual void ~bad_exception();
		bad_exception & operator=( bad_exception && );
		bad_exception & operator=( bad_exception const & );
		void __local_vftable_ctor_closure();
		/*0000*/ virtual void * __vecDelDtor( UINT );
		/*0018*/
	};

	class bad_typeid : public exception {
	public:
		void bad_typeid( bad_typeid && );
		void bad_typeid( bad_typeid const & );
	private:
		void bad_typeid( CHAR const * const , INT );
	public:
		void bad_typeid();
		static bad_typeid __construct_from_string_literal( CHAR const * const );
		/*    */ virtual void ~bad_typeid();
		bad_typeid & operator=( bad_typeid && );
		bad_typeid & operator=( bad_typeid const & );
		void __local_vftable_ctor_closure();
		/*0000*/ virtual void * __vecDelDtor( UINT );
		/*0018*/
	};

	struct bidirectional_iterator_tag : forward_iterator_tag {
		/*0001*/
	};

	struct common_type<> {
		/*0001*/
	};

	struct equal_to<void> {
		/*0001*/
	};

	class exception {
	public:
		void exception( exception const & );
		void exception( CHAR const * const , INT );
		void exception( CHAR const * const );
		void exception();
		exception & operator=( exception const & );
		/*0000*/ virtual void ~exception();
		/*0008*/ virtual CHAR const * what() const;
	private:
		/*0008*/ __std_exception_data _Data;
	public:
		void __local_vftable_ctor_closure();
		/*0000*/ virtual void * __vecDelDtor( UINT );
		/*0018*/
	};

	class exception_ptr {
	public:
		void exception_ptr( exception_ptr const & );
		void exception_ptr( void * );
		void exception_ptr();
		void ~exception_ptr();
		exception_ptr & operator=( void * );
		exception_ptr & operator=( exception_ptr const & );
		BOOLEAN operator bool() const;
		static exception_ptr _Current_exception();
		static exception_ptr _Copy_exception( void * , void const * );
	private:
		/*0000*/ void * _Data1;
		/*0008*/ void * _Data2;
	public:
		void * __vecDelDtor( UINT );
		/*0010*/
	};

	enum float_denorm_style {
		denorm_indeterminate = 0xffffffff,
		denorm_absent = 0x0,
		denorm_present = 0x1
	};

	enum float_round_style {
		round_indeterminate = 0xffffffff,
		round_toward_zero = 0x0,
		round_to_nearest = 0x1,
		round_toward_infinity = 0x2,
		round_toward_neg_infinity = 0x3
	};

	struct forward_iterator_tag : input_iterator_tag {
		/*0001*/
	};

	struct greater<void> {
		/*0001*/
	};

	struct greater_equal<void> {
		/*0001*/
	};

	struct hash<double> {
		ULONGLONG operator()( double const ) const;
		/*0001*/
	};

	struct hash<float> {
		ULONGLONG operator()( float const ) const;
		/*0001*/
	};

	struct hash<long double> {
		ULONGLONG operator()( double const ) const;
		/*0001*/
	};

	struct hash<nullptr_t> {
		ULONGLONG operator()( void * ) const;
		/*0001*/
	};

	struct in_place_t {
		/*0001*/
	};

	struct input_iterator_tag {
		/*0001*/
	};

	struct integral_constant<bool,0> {
		static BOOLEAN const value;
		BOOLEAN operator bool() const;
		BOOLEAN operator()() const;
		/*0001*/
	};

	struct integral_constant<bool,1> {
		static BOOLEAN const value;
		BOOLEAN operator bool() const;
		BOOLEAN operator()() const;
		/*0001*/
	};

	struct integral_constant<unsigned __int64,0> {
		static ULONGLONG const value;
		ULONGLONG operator unsigned __int64() const;
		ULONGLONG operator()() const;
		/*0001*/
	};

	struct integral_constant<unsigned __int64,2> {
		static ULONGLONG const value;
		ULONGLONG operator unsigned __int64() const;
		ULONGLONG operator()() const;
		/*0001*/
	};

	struct less<void> {
		/*0001*/
	};

	struct less_equal<void> {
		/*0001*/
	};

	enum memory_order {
		memory_order_relaxed = 0x0,
		memory_order_consume = 0x1,
		memory_order_acquire = 0x2,
		memory_order_release = 0x3,
		memory_order_acq_rel = 0x4,
		memory_order_seq_cst = 0x5
	};

	struct minus<void> {
		/*0001*/
	};

	struct monostate {
		/*0001*/
	};

	struct multiplies<void> {
		/*0001*/
	};

	class nested_exception {
	public:
		void nested_exception( nested_exception const & );
		void nested_exception();
		nested_exception & operator=( nested_exception const & );
		/*0000*/ virtual void ~nested_exception();
		void rethrow_nested() const;
		exception_ptr nested_ptr() const;
	private:
		/*0008*/ exception_ptr _Exc;
	public:
		void __local_vftable_ctor_closure();
		/*0000*/ virtual void * __vecDelDtor( UINT );
		/*0018*/
	};

	struct not_equal_to<void> {
		/*0001*/
	};

	struct nothrow_t {
		/*0001*/
	};

	class numeric_limits<__int64> : public _Num_int_base {
	public:
		static LONGLONG min();
		static LONGLONG max();
		static LONGLONG lowest();
		static LONGLONG epsilon();
		static LONGLONG round_error();
		static LONGLONG denorm_min();
		static LONGLONG infinity();
		static LONGLONG quiet_NaN();
		static LONGLONG signaling_NaN();
		static BOOLEAN const is_signed;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<bool> : public _Num_int_base {
	public:
		static BOOLEAN min();
		static BOOLEAN max();
		static BOOLEAN lowest();
		static BOOLEAN epsilon();
		static BOOLEAN round_error();
		static BOOLEAN denorm_min();
		static BOOLEAN infinity();
		static BOOLEAN quiet_NaN();
		static BOOLEAN signaling_NaN();
		static INT const digits;
		/*0001*/
	};

	class numeric_limits<char16_t> : public _Num_int_base {
	public:
		static CHAR16 min();
		static CHAR16 max();
		static CHAR16 lowest();
		static CHAR16 epsilon();
		static CHAR16 round_error();
		static CHAR16 denorm_min();
		static CHAR16 infinity();
		static CHAR16 quiet_NaN();
		static CHAR16 signaling_NaN();
		static BOOLEAN const is_modulo;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<char32_t> : public _Num_int_base {
	public:
		static CHAR32 min();
		static CHAR32 max();
		static CHAR32 lowest();
		static CHAR32 epsilon();
		static CHAR32 round_error();
		static CHAR32 denorm_min();
		static CHAR32 infinity();
		static CHAR32 quiet_NaN();
		static CHAR32 signaling_NaN();
		static BOOLEAN const is_modulo;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<char> : public _Num_int_base {
	public:
		static CHAR min();
		static CHAR max();
		static CHAR lowest();
		static CHAR epsilon();
		static CHAR round_error();
		static CHAR denorm_min();
		static CHAR infinity();
		static CHAR quiet_NaN();
		static CHAR signaling_NaN();
		static BOOLEAN const is_signed;
		static BOOLEAN const is_modulo;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<double> : public _Num_float_base {
	public:
		static double min();
		static double max();
		static double lowest();
		static double epsilon();
		static double round_error();
		static double denorm_min();
		static double infinity();
		static double quiet_NaN();
		static double signaling_NaN();
		static INT const digits;
		static INT const digits10;
		static INT const max_digits10;
		static INT const max_exponent;
		static INT const max_exponent10;
		static INT const min_exponent;
		static INT const min_exponent10;
		/*0001*/
	};

	class numeric_limits<float> : public _Num_float_base {
	public:
		static float min();
		static float max();
		static float lowest();
		static float epsilon();
		static float round_error();
		static float denorm_min();
		static float infinity();
		static float quiet_NaN();
		static float signaling_NaN();
		static INT const digits;
		static INT const digits10;
		static INT const max_digits10;
		static INT const max_exponent;
		static INT const max_exponent10;
		static INT const min_exponent;
		static INT const min_exponent10;
		/*0001*/
	};

	class numeric_limits<int> : public _Num_int_base {
	public:
		static INT min();
		static INT max();
		static INT lowest();
		static INT epsilon();
		static INT round_error();
		static INT denorm_min();
		static INT infinity();
		static INT quiet_NaN();
		static INT signaling_NaN();
		static BOOLEAN const is_signed;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<long double> : public _Num_float_base {
	public:
		static double min();
		static double max();
		static double lowest();
		static double epsilon();
		static double round_error();
		static double denorm_min();
		static double infinity();
		static double quiet_NaN();
		static double signaling_NaN();
		static INT const digits;
		static INT const digits10;
		static INT const max_digits10;
		static INT const max_exponent;
		static INT const max_exponent10;
		static INT const min_exponent;
		static INT const min_exponent10;
		/*0001*/
	};

	class numeric_limits<long> : public _Num_int_base {
	public:
		static LONG min();
		static LONG max();
		static LONG lowest();
		static LONG epsilon();
		static LONG round_error();
		static LONG denorm_min();
		static LONG infinity();
		static LONG quiet_NaN();
		static LONG signaling_NaN();
		static BOOLEAN const is_signed;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<short> : public _Num_int_base {
	public:
		static SHORT min();
		static SHORT max();
		static SHORT lowest();
		static SHORT epsilon();
		static SHORT round_error();
		static SHORT denorm_min();
		static SHORT infinity();
		static SHORT quiet_NaN();
		static SHORT signaling_NaN();
		static BOOLEAN const is_signed;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<signed char> : public _Num_int_base {
	public:
		static CHAR min();
		static CHAR max();
		static CHAR lowest();
		static CHAR epsilon();
		static CHAR round_error();
		static CHAR denorm_min();
		static CHAR infinity();
		static CHAR quiet_NaN();
		static CHAR signaling_NaN();
		static BOOLEAN const is_signed;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<unsigned __int64> : public _Num_int_base {
	public:
		static ULONGLONG min();
		static ULONGLONG max();
		static ULONGLONG lowest();
		static ULONGLONG epsilon();
		static ULONGLONG round_error();
		static ULONGLONG denorm_min();
		static ULONGLONG infinity();
		static ULONGLONG quiet_NaN();
		static ULONGLONG signaling_NaN();
		static BOOLEAN const is_modulo;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<unsigned char> : public _Num_int_base {
	public:
		static UCHAR min();
		static UCHAR max();
		static UCHAR lowest();
		static UCHAR epsilon();
		static UCHAR round_error();
		static UCHAR denorm_min();
		static UCHAR infinity();
		static UCHAR quiet_NaN();
		static UCHAR signaling_NaN();
		static BOOLEAN const is_modulo;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<unsigned int> : public _Num_int_base {
	public:
		static UINT min();
		static UINT max();
		static UINT lowest();
		static UINT epsilon();
		static UINT round_error();
		static UINT denorm_min();
		static UINT infinity();
		static UINT quiet_NaN();
		static UINT signaling_NaN();
		static BOOLEAN const is_modulo;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<unsigned long> : public _Num_int_base {
	public:
		static ULONG min();
		static ULONG max();
		static ULONG lowest();
		static ULONG epsilon();
		static ULONG round_error();
		static ULONG denorm_min();
		static ULONG infinity();
		static ULONG quiet_NaN();
		static ULONG signaling_NaN();
		static BOOLEAN const is_modulo;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	class numeric_limits<unsigned short> : public _Num_int_base {
	public:
		static WCHAR min();
		static WCHAR max();
		static WCHAR lowest();
		static WCHAR epsilon();
		static WCHAR round_error();
		static WCHAR denorm_min();
		static WCHAR infinity();
		static WCHAR quiet_NaN();
		static WCHAR signaling_NaN();
		static BOOLEAN const is_modulo;
		static INT const digits;
		static INT const digits10;
		/*0001*/
	};

	struct output_iterator_tag {
		/*0001*/
	};

	struct piecewise_construct_t {
		/*0001*/
	};

	struct plus<void> {
		/*0001*/
	};

	struct random_access_iterator_tag : bidirectional_iterator_tag {
		/*0001*/
	};

}

struct $_TypeDescriptor$_extraBytes_102 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x66];
	/*0076*/
};

struct $_TypeDescriptor$_extraBytes_103 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x67];
	/*0077*/
};

struct $_TypeDescriptor$_extraBytes_104 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x68];
	/*0078*/
};

struct $_TypeDescriptor$_extraBytes_110 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x6e];
	/*007e*/
};

struct $_TypeDescriptor$_extraBytes_113 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x71];
	/*0081*/
};

struct $_TypeDescriptor$_extraBytes_118 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x76];
	/*0086*/
};

struct $_TypeDescriptor$_extraBytes_128 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x80];
	/*0090*/
};

struct $_TypeDescriptor$_extraBytes_133 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x85];
	/*0095*/
};

struct $_TypeDescriptor$_extraBytes_134 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x86];
	/*0096*/
};

struct $_TypeDescriptor$_extraBytes_137 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x89];
	/*0099*/
};

struct $_TypeDescriptor$_extraBytes_149 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x95];
	/*00a5*/
};

struct $_TypeDescriptor$_extraBytes_15 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xf];
	/*001f*/
};

struct $_TypeDescriptor$_extraBytes_169 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xa9];
	/*00b9*/
};

struct $_TypeDescriptor$_extraBytes_171 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xab];
	/*00bb*/
};

struct $_TypeDescriptor$_extraBytes_19 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x13];
	/*0023*/
};

struct $_TypeDescriptor$_extraBytes_192 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xc0];
	/*00d0*/
};

struct $_TypeDescriptor$_extraBytes_195 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xc3];
	/*00d3*/
};

struct $_TypeDescriptor$_extraBytes_196 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xc4];
	/*00d4*/
};

struct $_TypeDescriptor$_extraBytes_197 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xc5];
	/*00d5*/
};

struct $_TypeDescriptor$_extraBytes_20 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x14];
	/*0024*/
};

struct $_TypeDescriptor$_extraBytes_202 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xca];
	/*00da*/
};

struct $_TypeDescriptor$_extraBytes_203 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xcb];
	/*00db*/
};

struct $_TypeDescriptor$_extraBytes_205 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xcd];
	/*00dd*/
};

struct $_TypeDescriptor$_extraBytes_21 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x15];
	/*0025*/
};

struct $_TypeDescriptor$_extraBytes_212 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xd4];
	/*00e4*/
};

struct $_TypeDescriptor$_extraBytes_215 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xd7];
	/*00e7*/
};

struct $_TypeDescriptor$_extraBytes_219 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xdb];
	/*00eb*/
};

struct $_TypeDescriptor$_extraBytes_24 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x18];
	/*0028*/
};

struct $_TypeDescriptor$_extraBytes_25 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x19];
	/*0029*/
};

struct $_TypeDescriptor$_extraBytes_254 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0xfe];
	/*010e*/
};

struct $_TypeDescriptor$_extraBytes_27 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x1b];
	/*002b*/
};

struct $_TypeDescriptor$_extraBytes_272 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x110];
	/*0120*/
};

struct $_TypeDescriptor$_extraBytes_28 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x1c];
	/*002c*/
};

struct $_TypeDescriptor$_extraBytes_284 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x11c];
	/*012c*/
};

struct $_TypeDescriptor$_extraBytes_302 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x12e];
	/*013e*/
};

struct $_TypeDescriptor$_extraBytes_311 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x137];
	/*0147*/
};

struct $_TypeDescriptor$_extraBytes_320 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x140];
	/*0150*/
};

struct $_TypeDescriptor$_extraBytes_321 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x141];
	/*0151*/
};

struct $_TypeDescriptor$_extraBytes_345 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x159];
	/*0169*/
};

struct $_TypeDescriptor$_extraBytes_366 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x16e];
	/*017e*/
};

struct $_TypeDescriptor$_extraBytes_37 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x25];
	/*0035*/
};

struct $_TypeDescriptor$_extraBytes_375 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x177];
	/*0187*/
};

struct $_TypeDescriptor$_extraBytes_38 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x26];
	/*0036*/
};

struct $_TypeDescriptor$_extraBytes_381 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x17d];
	/*018d*/
};

struct $_TypeDescriptor$_extraBytes_43 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x2b];
	/*003b*/
};

struct $_TypeDescriptor$_extraBytes_44 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x2c];
	/*003c*/
};

struct $_TypeDescriptor$_extraBytes_447 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x1bf];
	/*01cf*/
};

struct $_TypeDescriptor$_extraBytes_45 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x2d];
	/*003d*/
};

struct $_TypeDescriptor$_extraBytes_46 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x2e];
	/*003e*/
};

struct $_TypeDescriptor$_extraBytes_48 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x30];
	/*0040*/
};

struct $_TypeDescriptor$_extraBytes_482 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x1e2];
	/*01f2*/
};

struct $_TypeDescriptor$_extraBytes_505 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x1f9];
	/*0209*/
};

struct $_TypeDescriptor$_extraBytes_53 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x35];
	/*0045*/
};

struct $_TypeDescriptor$_extraBytes_535 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x217];
	/*0227*/
};

struct $_TypeDescriptor$_extraBytes_541 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x21d];
	/*022d*/
};

struct $_TypeDescriptor$_extraBytes_55 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x37];
	/*0047*/
};

struct $_TypeDescriptor$_extraBytes_554 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x22a];
	/*023a*/
};

struct $_TypeDescriptor$_extraBytes_58 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x3a];
	/*004a*/
};

struct $_TypeDescriptor$_extraBytes_651 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x28b];
	/*029b*/
};

struct $_TypeDescriptor$_extraBytes_663 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x297];
	/*02a7*/
};

struct $_TypeDescriptor$_extraBytes_90 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x5a];
	/*006a*/
};

struct $_TypeDescriptor$_extraBytes_92 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x5c];
	/*006c*/
};

struct $_TypeDescriptor$_extraBytes_94 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x5e];
	/*006e*/
};

struct $_TypeDescriptor$_extraBytes_95 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x5f];
	/*006f*/
};

struct $_TypeDescriptor$_extraBytes_99 {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[0x63];
	/*0073*/
};

struct $_s__CatchableTypeArray$_extraBytes_24 {
	/*0000*/ INT nCatchableTypes;
	/*0004*/ _s__CatchableType const * arrayOfCatchableTypes[0x3];
	/*001c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_104 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0xd];
	/*006c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_136 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x11];
	/*008c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_144 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x12];
	/*0094*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_16 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x2];
	/*0014*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_168 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x15];
	/*00ac*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_184 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x17];
	/*00bc*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_208 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x1a];
	/*00d4*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_216 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x1b];
	/*00dc*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_224 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x1c];
	/*00e4*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_232 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x1d];
	/*00ec*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_24 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x3];
	/*001c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_240 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x1e];
	/*00f4*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_248 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x1f];
	/*00fc*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_256 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x20];
	/*0104*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_272 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x22];
	/*0114*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_280 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x23];
	/*011c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_288 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x24];
	/*0124*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_296 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x25];
	/*012c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_344 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x2b];
	/*015c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_352 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x2c];
	/*0164*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_40 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x5];
	/*002c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_56 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x7];
	/*003c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_64 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x8];
	/*0044*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_72 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x9];
	/*004c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_8 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0x1];
	/*000c*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_80 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0xa];
	/*0054*/
};

struct $_s__RTTIBaseClassArray$_extraBytes_96 {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[0xc];
	/*0064*/
};

enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE {
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0x0,
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 0x1,
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 0x2,
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 0x3
};

enum ACTCTX_REQUESTED_RUN_LEVEL {
	ACTCTX_RUN_LEVEL_UNSPECIFIED = 0x0,
	ACTCTX_RUN_LEVEL_AS_INVOKER = 0x1,
	ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 0x2,
	ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 0x3,
	ACTCTX_RUN_LEVEL_NUMBERS = 0x4
};

enum ACTIVATE_ON_HOST_FLAGS {
	ACTIVATE_ON_HOST_FLAGS_NONE = 0x0,
	ACTIVATE_ON_HOST_FLAGS_VAIL = 0x1,
	ACTIVATE_ON_HOST_FLAGS_WDAG = 0x2,
	ACTIVATE_ON_HOST_FLAGS_GAMECORE = 0x4
};

struct ANON_OBJECT_HEADER {
	/*0000*/ USHORT Sig1;
	/*0002*/ USHORT Sig2;
	/*0004*/ USHORT Version;
	/*0006*/ USHORT Machine;
	/*0008*/ ULONG TimeDateStamp;
	/*000c*/ _GUID ClassID;
	/*001c*/ ULONG SizeOfData;
	/*0020*/
};

struct ANON_OBJECT_HEADER_BIGOBJ {
	/*0000*/ USHORT Sig1;
	/*0002*/ USHORT Sig2;
	/*0004*/ USHORT Version;
	/*0006*/ USHORT Machine;
	/*0008*/ ULONG TimeDateStamp;
	/*000c*/ _GUID ClassID;
	/*001c*/ ULONG SizeOfData;
	/*0020*/ ULONG Flags;
	/*0024*/ ULONG MetaDataSize;
	/*0028*/ ULONG MetaDataOffset;
	/*002c*/ ULONG NumberOfSections;
	/*0030*/ ULONG PointerToSymbolTable;
	/*0034*/ ULONG NumberOfSymbols;
	/*0038*/
};

struct ANON_OBJECT_HEADER_V2 {
	/*0000*/ USHORT Sig1;
	/*0002*/ USHORT Sig2;
	/*0004*/ USHORT Version;
	/*0006*/ USHORT Machine;
	/*0008*/ ULONG TimeDateStamp;
	/*000c*/ _GUID ClassID;
	/*001c*/ ULONG SizeOfData;
	/*0020*/ ULONG Flags;
	/*0024*/ ULONG MetaDataSize;
	/*0028*/ ULONG MetaDataOffset;
	/*002c*/
};

struct APARTMENT_SHUTDOWN_REGISTRATION_COOKIE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct APP_LOCAL_DEVICE_ID {
	/*0000*/ UCHAR value[0x20];
	/*0020*/
};

enum ARM64_FNPDATA_CR {
	PdataCrUnchained = 0x0,
	PdataCrUnchainedSavedLr = 0x1,
	PdataCrChainedWithPac = 0x2,
	PdataCrChained = 0x3
};

enum ARM64_FNPDATA_FLAGS {
	PdataRefToFullXdata = 0x0,
	PdataPackedUnwindFunction = 0x1,
	PdataPackedUnwindFragment = 0x2
};

struct ARRAY_INFO {
	/*0000*/ LONG Dimension;
	/*0008*/ ULONG * BufferConformanceMark;
	/*0010*/ ULONG * BufferVarianceMark;
	/*0018*/ ULONG * MaxCountArray;
	/*0020*/ ULONG * OffsetArray;
	/*0028*/ ULONG * ActualCountArray;
	/*0030*/
};

enum ASTA_TEST_MODE_FLAGS {
	ASTA_TEST_MODE_NONE = 0x0,
	ASTA_TEST_MODE_RO_INIT_SINGLETHREADED_CREATES_ASTAS = 0x1,
	ASTA_TEST_MODE_GIT_LIFETIME_EXTENSION_ENABLED = 0x2,
	ASTA_TEST_MODE_ROINITIALIZEASTA_ALLOWED = 0x4
};

enum AgileReferenceOptions {
	AGILEREFERENCE_DEFAULT = 0x0,
	AGILEREFERENCE_DELAYEDMARSHAL = 0x1
};

enum ApartmentType {
	ApartmentType_STA = 0x0,
	ApartmentType_ASTA = 0x1,
	ApartmentType_MTA = 0x2,
	ApartmentType_NA = 0x3,
	ApartmentType_BSTA = 0x4
};

struct AsyncIAdviseSink : IUnknown {
	/*0018*/ virtual void Begin_OnDataChange( tagFORMATETC * , tagSTGMEDIUM * ) = 0;
	/*0020*/ virtual void Finish_OnDataChange() = 0;
	/*0028*/ virtual void Begin_OnViewChange( ULONG , LONG ) = 0;
	/*0030*/ virtual void Finish_OnViewChange() = 0;
	/*0038*/ virtual void Begin_OnRename( IMoniker * ) = 0;
	/*0040*/ virtual void Finish_OnRename() = 0;
	/*0048*/ virtual void Begin_OnSave() = 0;
	/*0050*/ virtual void Finish_OnSave() = 0;
	/*0058*/ virtual void Begin_OnClose() = 0;
	/*0060*/ virtual void Finish_OnClose() = 0;
	void AsyncIAdviseSink( AsyncIAdviseSink && );
	void AsyncIAdviseSink( AsyncIAdviseSink const & );
	void AsyncIAdviseSink();
	AsyncIAdviseSink & operator=( AsyncIAdviseSink && );
	AsyncIAdviseSink & operator=( AsyncIAdviseSink const & );
	/*0008*/
};

struct AsyncIAdviseSink2 : AsyncIAdviseSink {
	/*0068*/ virtual void Begin_OnLinkSrcChange( IMoniker * ) = 0;
	/*0070*/ virtual void Finish_OnLinkSrcChange() = 0;
	void AsyncIAdviseSink2( AsyncIAdviseSink2 && );
	void AsyncIAdviseSink2( AsyncIAdviseSink2 const & );
	void AsyncIAdviseSink2();
	AsyncIAdviseSink2 & operator=( AsyncIAdviseSink2 && );
	AsyncIAdviseSink2 & operator=( AsyncIAdviseSink2 const & );
	/*0008*/
};

struct AsyncIMultiQI : IUnknown {
	/*0018*/ virtual HRESULT Begin_QueryMultipleInterfaces( ULONG , tagMULTI_QI * ) = 0;
	/*0020*/ virtual HRESULT Finish_QueryMultipleInterfaces( tagMULTI_QI * ) = 0;
	void AsyncIMultiQI( AsyncIMultiQI && );
	void AsyncIMultiQI( AsyncIMultiQI const & );
	void AsyncIMultiQI();
	AsyncIMultiQI & operator=( AsyncIMultiQI && );
	AsyncIMultiQI & operator=( AsyncIMultiQI const & );
	/*0008*/
};

struct AsyncIPipeByte : IUnknown {
	/*0018*/ virtual HRESULT Begin_Pull( ULONG ) = 0;
	/*0020*/ virtual HRESULT Finish_Pull( UCHAR * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Begin_Push( UCHAR * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Finish_Push() = 0;
	void AsyncIPipeByte( AsyncIPipeByte && );
	void AsyncIPipeByte( AsyncIPipeByte const & );
	void AsyncIPipeByte();
	AsyncIPipeByte & operator=( AsyncIPipeByte && );
	AsyncIPipeByte & operator=( AsyncIPipeByte const & );
	/*0008*/
};

struct AsyncIPipeDouble : IUnknown {
	/*0018*/ virtual HRESULT Begin_Pull( ULONG ) = 0;
	/*0020*/ virtual HRESULT Finish_Pull( double * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Begin_Push( double * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Finish_Push() = 0;
	void AsyncIPipeDouble( AsyncIPipeDouble && );
	void AsyncIPipeDouble( AsyncIPipeDouble const & );
	void AsyncIPipeDouble();
	AsyncIPipeDouble & operator=( AsyncIPipeDouble && );
	AsyncIPipeDouble & operator=( AsyncIPipeDouble const & );
	/*0008*/
};

struct AsyncIPipeLong : IUnknown {
	/*0018*/ virtual HRESULT Begin_Pull( ULONG ) = 0;
	/*0020*/ virtual HRESULT Finish_Pull( LONG * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Begin_Push( LONG * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Finish_Push() = 0;
	void AsyncIPipeLong( AsyncIPipeLong && );
	void AsyncIPipeLong( AsyncIPipeLong const & );
	void AsyncIPipeLong();
	AsyncIPipeLong & operator=( AsyncIPipeLong && );
	AsyncIPipeLong & operator=( AsyncIPipeLong const & );
	/*0008*/
};

struct AsyncIUnknown : IUnknown {
	/*0018*/ virtual HRESULT Begin_QueryInterface( _GUID const & ) = 0;
	/*0020*/ virtual HRESULT Finish_QueryInterface( void * * ) = 0;
	/*0028*/ virtual HRESULT Begin_AddRef() = 0;
	/*0030*/ virtual ULONG Finish_AddRef() = 0;
	/*0038*/ virtual HRESULT Begin_Release() = 0;
	/*0040*/ virtual ULONG Finish_Release() = 0;
	void AsyncIUnknown( AsyncIUnknown && );
	void AsyncIUnknown( AsyncIUnknown const & );
	void AsyncIUnknown();
	AsyncIUnknown & operator=( AsyncIUnknown && );
	AsyncIUnknown & operator=( AsyncIUnknown const & );
	/*0008*/
};

enum AsyncStatus {
	Started = 0x0,
	Completed = 0x1,
	Canceled = 0x2,
	Error = 0x3
};

class AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> >( AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> >( IRpcOptions * , IAsyncOperation<bool> * , IAsyncOperationCompletedHandler<bool> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> >();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( IRpcOptions * , IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * , IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >( IRpcOptions * , IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * , IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> >();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >( AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >( IRpcOptions * , IAsyncOperationWithProgress<unsigned int,unsigned int> * , IAsyncOperationProgressHandler<unsigned int,unsigned int> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> >();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >( AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >( IRpcOptions * , IAsyncOperationWithProgress<unsigned int,unsigned int> * , IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> >();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

struct BATTERY_REPORTING_SCALE {
	/*0000*/ ULONG Granularity;
	/*0004*/ ULONG Capacity;
	/*0008*/
};

struct BITMAPV4HEADER {
	/*0000*/ ULONG bV4Size;
	/*0004*/ LONG bV4Width;
	/*0008*/ LONG bV4Height;
	/*000c*/ USHORT bV4Planes;
	/*000e*/ USHORT bV4BitCount;
	/*0010*/ ULONG bV4V4Compression;
	/*0014*/ ULONG bV4SizeImage;
	/*0018*/ LONG bV4XPelsPerMeter;
	/*001c*/ LONG bV4YPelsPerMeter;
	/*0020*/ ULONG bV4ClrUsed;
	/*0024*/ ULONG bV4ClrImportant;
	/*0028*/ ULONG bV4RedMask;
	/*002c*/ ULONG bV4GreenMask;
	/*0030*/ ULONG bV4BlueMask;
	/*0034*/ ULONG bV4AlphaMask;
	/*0038*/ ULONG bV4CSType;
	/*003c*/ tagICEXYZTRIPLE bV4Endpoints;
	/*0060*/ ULONG bV4GammaRed;
	/*0064*/ ULONG bV4GammaGreen;
	/*0068*/ ULONG bV4GammaBlue;
	/*006c*/
};

struct BITMAPV5HEADER {
	/*0000*/ ULONG bV5Size;
	/*0004*/ LONG bV5Width;
	/*0008*/ LONG bV5Height;
	/*000c*/ USHORT bV5Planes;
	/*000e*/ USHORT bV5BitCount;
	/*0010*/ ULONG bV5Compression;
	/*0014*/ ULONG bV5SizeImage;
	/*0018*/ LONG bV5XPelsPerMeter;
	/*001c*/ LONG bV5YPelsPerMeter;
	/*0020*/ ULONG bV5ClrUsed;
	/*0024*/ ULONG bV5ClrImportant;
	/*0028*/ ULONG bV5RedMask;
	/*002c*/ ULONG bV5GreenMask;
	/*0030*/ ULONG bV5BlueMask;
	/*0034*/ ULONG bV5AlphaMask;
	/*0038*/ ULONG bV5CSType;
	/*003c*/ tagICEXYZTRIPLE bV5Endpoints;
	/*0060*/ ULONG bV5GammaRed;
	/*0064*/ ULONG bV5GammaGreen;
	/*0068*/ ULONG bV5GammaBlue;
	/*006c*/ ULONG bV5Intent;
	/*0070*/ ULONG bV5ProfileData;
	/*0074*/ ULONG bV5ProfileSize;
	/*0078*/ ULONG bV5Reserved;
	/*007c*/
};

struct BREAK_ON_STATUS_BUFFER {
	/*0000*/ LONG NtStatus;
	/*0004*/ ULONG Win32Error;
	/*0008*/ ULONG ThreadId;
	/*000c*/ ULONG ProcessId;
	/*0010*/ CHAR ImageFileName[0x10];
	/*0020*/
};

struct BSMINFO {
	/*0000*/ UINT cbSize;
	/*0008*/ HDESK__ * hdesk;
	/*0010*/ HWND__ * hwnd;
	/*0018*/ _LUID luid;
	/*0020*/
};

struct BULK_SECURITY_TEST_DATA {
	/*0000*/ ULONG DesiredAccess;
	/*0004*/ ULONG SecurityIds[0x1];
	/*0008*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperation<bool>,Windows::Foundation::IAsyncOperationCompletedHandler<bool> > CreateBias( IRpcOptions * , IAsyncOperation<bool> * , IAsyncOperationCompletedHandler<bool> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > CreateBias( IRpcOptions * , IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * , IAsyncOperationProgressHandler<Storage::Streams::IBuffer *,unsigned int> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer *,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<Windows::Storage::Streams::IBuffer *,unsigned int> > CreateBias( IRpcOptions * , IAsyncOperationWithProgress<Storage::Streams::IBuffer *,unsigned int> * , IAsyncOperationWithProgressCompletedHandler<Storage::Streams::IBuffer *,unsigned int> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationProgressHandler<unsigned int,unsigned int> > CreateBias( IRpcOptions * , IAsyncOperationWithProgress<unsigned int,unsigned int> * , IAsyncOperationProgressHandler<unsigned int,unsigned int> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperationWithProgress<unsigned int,unsigned int>,Windows::Foundation::IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> > CreateBias( IRpcOptions * , IAsyncOperationWithProgress<unsigned int,unsigned int> * , IAsyncOperationWithProgressCompletedHandler<unsigned int,unsigned int> * );
	/*0001*/
};

enum CI_WINDOWS_LOCKDOWN_RESTRICTION {
	CI_WINDOWS_LOCKDOWN_RESTRICTION_NONE = 0x0,
	CI_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK = 0x1,
	CI_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK_PERMANENT = 0x2,
	CI_WINDOWS_LOCKDOWN_RESTRICTION_MAX = 0x3
};

struct CM_EXTENDED_PARAMETER {
	/*0000*/ ULONGLONG Type : 08; // 0x00000000000000ff;
	/*0000*/ ULONGLONG Reserved : 56; // 0xffffffffffffff00;
	/*0008*/ ULONGLONG ULong64;
	/*0008*/ void * Pointer;
	/*0008*/ ULONGLONG Size;
	/*0008*/ void * Handle;
	/*0008*/ ULONG ULong;
	/*0008*/ ULONG AccessMask;
	/*0010*/
};

enum CM_EXTENDED_PARAMETER_TYPE {
	CmExtendedParameterInvalidType = 0x0,
	CmExtendedParameterTrustClassKey = 0x1,
	CmExtendedParameterEvent = 0x2,
	CmExtendedParameterFileAccessToken = 0x3,
	CmExtendedParameterMax = 0x4
};

struct CM_Power_Data_s {
	/*0000*/ ULONG PD_Size;
	/*0004*/ _DEVICE_POWER_STATE PD_MostRecentPowerState;
	/*0008*/ ULONG PD_Capabilities;
	/*000c*/ ULONG PD_D1Latency;
	/*0010*/ ULONG PD_D2Latency;
	/*0014*/ ULONG PD_D3Latency;
	/*0018*/ _DEVICE_POWER_STATE PD_PowerStateMapping[0x7];
	/*0034*/ _SYSTEM_POWER_STATE PD_DeepestSystemWake;
	/*0038*/
};

enum COMPARTMENT_ID {
	UNSPECIFIED_COMPARTMENT_ID = 0x0,
	DEFAULT_COMPARTMENT_ID = 0x1
};

struct COMPRESSOR_HANDLE__ {
	/*0000*/ INT unused;
	/*0004*/
};

enum COMPRESS_INFORMATION_CLASS {
	COMPRESS_INFORMATION_CLASS_INVALID = 0x0,
	COMPRESS_INFORMATION_CLASS_BLOCK_SIZE = 0x1,
	COMPRESS_INFORMATION_CLASS_LEVEL = 0x2
};

struct CONFIRMSAFETY {
	/*0000*/ _GUID clsid;
	/*0010*/ IUnknown * pUnk;
	/*0018*/ ULONG dwFlags;
	/*0020*/
};

struct COPYFILE2_EXTENDED_PARAMETERS {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwCopyFlags;
	/*0008*/ INT * pfCancel;
	/*0010*/ _COPYFILE2_MESSAGE_ACTION (* pProgressRoutine)( COPYFILE2_MESSAGE const * , void * );
	/*0018*/ void * pvCallbackContext;
	/*0020*/
};

struct COPYFILE2_EXTENDED_PARAMETERS_V2 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwCopyFlags;
	/*0008*/ INT * pfCancel;
	/*0010*/ _COPYFILE2_MESSAGE_ACTION (* pProgressRoutine)( COPYFILE2_MESSAGE const * , void * );
	/*0018*/ void * pvCallbackContext;
	/*0020*/ ULONG dwCopyFlagsV2;
	/*0024*/ ULONG ioDesiredSize;
	/*0028*/ ULONG ioDesiredRate;
	/*0030*/ void * reserved[0x8];
	/*0070*/
};

struct COPYFILE2_MESSAGE {
	
	/*0000*/ _COPYFILE2_MESSAGE_TYPE Type;
	/*0004*/ ULONG dwPadding;
	/*0008*/ <unnamed-type-Info> Info;
	/*0050*/
};

struct CORRELATION_VECTOR {
	/*0000*/ CHAR Version;
	/*0001*/ CHAR Vector[0x81];
	/*0082*/
};

struct CO_DEVICE_CATALOG_COOKIE__ {
	/*0000*/ INT unused;
	/*0004*/
};

enum CO_MARSHALING_CONTEXT_ATTRIBUTES {
	CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0x0,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = 0x80000000,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = 0x80000001,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = 0x80000002,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = 0x80000003,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = 0x80000004,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = 0x80000005,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = 0x80000006,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = 0x80000007,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = 0x80000008,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = 0x80000009,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = 0x8000000a,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = 0x8000000b,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = 0x8000000c,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = 0x8000000d,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = 0x8000000e,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = 0x8000000f,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = 0x80000010,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = 0x80000011
};

struct CO_MTA_USAGE_COOKIE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct CREATE_USN_JOURNAL_DATA {
	/*0000*/ ULONGLONG MaximumSize;
	/*0008*/ ULONGLONG AllocationDelta;
	/*0010*/
};

enum CWMO_FLAGS {
	CWMO_DEFAULT = 0x0,
	CWMO_DISPATCH_CALLS = 0x1,
	CWMO_DISPATCH_WINDOW_MESSAGES = 0x2
};

struct CastGuardVftables {
	/*0000*/ CHAR padding[0x80];
	/*0080*/
};

struct DELETE_USN_JOURNAL_DATA {
	/*0000*/ ULONGLONG UsnJournalID;
	/*0008*/ ULONG DeleteFlags;
	/*0010*/
};

enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS {
	DCDC_DEFAULT = 0x0,
	DCDC_DISABLE_FONT_UPDATE = 0x1,
	DCDC_DISABLE_RELAYOUT = 0x2
};

enum DIALOG_DPI_CHANGE_BEHAVIORS {
	DDC_DEFAULT = 0x0,
	DDC_DISABLE_ALL = 0x1,
	DDC_DISABLE_RESIZE = 0x2,
	DDC_DISABLE_CONTROL_RELAYOUT = 0x4
};

struct DISK_SPACE_INFORMATION {
	/*0000*/ ULONGLONG ActualTotalAllocationUnits;
	/*0008*/ ULONGLONG ActualAvailableAllocationUnits;
	/*0010*/ ULONGLONG ActualPoolUnavailableAllocationUnits;
	/*0018*/ ULONGLONG CallerTotalAllocationUnits;
	/*0020*/ ULONGLONG CallerAvailableAllocationUnits;
	/*0028*/ ULONGLONG CallerPoolUnavailableAllocationUnits;
	/*0030*/ ULONGLONG UsedAllocationUnits;
	/*0038*/ ULONGLONG TotalReservedAllocationUnits;
	/*0040*/ ULONGLONG VolumeStorageReserveAllocationUnits;
	/*0048*/ ULONGLONG AvailableCommittedAllocationUnits;
	/*0050*/ ULONGLONG PoolAvailableAllocationUnits;
	/*0058*/ ULONG SectorsPerAllocationUnit;
	/*005c*/ ULONG BytesPerSector;
	/*0060*/
};

struct DISPLAYCONFIG_2DREGION {
	/*0000*/ UINT cx;
	/*0004*/ UINT cy;
	/*0008*/
};

struct DISPLAYCONFIG_ADAPTER_NAME {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ WCHAR adapterDevicePath[0x80];
	/*0114*/
};

struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO {
	/*0000*/ _POINTL PathSourceSize;
	/*0008*/ _RECTL DesktopImageRegion;
	/*0018*/ _RECTL DesktopImageClip;
	/*0028*/
};

struct DISPLAYCONFIG_DEVICE_INFO_HEADER {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_TYPE type;
	/*0004*/ UINT size;
	/*0008*/ _LUID adapterId;
	/*0010*/ UINT id;
	/*0014*/
};

enum DISPLAYCONFIG_DEVICE_INFO_TYPE {
	DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 0x1,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 0x2,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 0x3,
	DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 0x4,
	DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 0x5,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 0x6,
	DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 0x7,
	DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 0x8,
	DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 0x9,
	DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 0xa,
	DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 0xb,
	DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION = 0xc,
	DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION = 0xd,
	DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xffffffff
};

struct DISPLAYCONFIG_MODE_INFO {
	/*0000*/ DISPLAYCONFIG_MODE_INFO_TYPE infoType;
	/*0004*/ UINT id;
	/*0008*/ _LUID adapterId;
	/*0010*/ DISPLAYCONFIG_TARGET_MODE targetMode;
	/*0010*/ DISPLAYCONFIG_SOURCE_MODE sourceMode;
	/*0010*/ DISPLAYCONFIG_DESKTOP_IMAGE_INFO desktopImageInfo;
	/*0040*/
};

enum DISPLAYCONFIG_MODE_INFO_TYPE {
	DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 0x1,
	DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 0x2,
	DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 0x3,
	DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xffffffff
};

struct DISPLAYCONFIG_PATH_INFO {
	/*0000*/ DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
	/*0014*/ DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
	/*0044*/ UINT flags;
	/*0048*/
};

struct DISPLAYCONFIG_PATH_SOURCE_INFO {
	/*0000*/ _LUID adapterId;
	/*0008*/ UINT id;
	/*000c*/ UINT modeInfoIdx;
	/*000c*/ UINT cloneGroupId : 16; // 0x0000ffff;
	/*000c*/ UINT sourceModeInfoIdx : 16; // 0xffff0000;
	/*0010*/ UINT statusFlags;
	/*0014*/
};

struct DISPLAYCONFIG_PATH_TARGET_INFO {
	/*0000*/ _LUID adapterId;
	/*0008*/ UINT id;
	/*000c*/ UINT modeInfoIdx;
	/*000c*/ UINT desktopModeInfoIdx : 16; // 0x0000ffff;
	/*000c*/ UINT targetModeInfoIdx : 16; // 0xffff0000;
	/*0010*/ DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
	/*0014*/ DISPLAYCONFIG_ROTATION rotation;
	/*0018*/ DISPLAYCONFIG_SCALING scaling;
	/*001c*/ DISPLAYCONFIG_RATIONAL refreshRate;
	/*0024*/ DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
	/*0028*/ INT targetAvailable;
	/*002c*/ UINT statusFlags;
	/*0030*/
};

enum DISPLAYCONFIG_PIXELFORMAT {
	DISPLAYCONFIG_PIXELFORMAT_8BPP = 0x1,
	DISPLAYCONFIG_PIXELFORMAT_16BPP = 0x2,
	DISPLAYCONFIG_PIXELFORMAT_24BPP = 0x3,
	DISPLAYCONFIG_PIXELFORMAT_32BPP = 0x4,
	DISPLAYCONFIG_PIXELFORMAT_NONGDI = 0x5,
	DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff
};

struct DISPLAYCONFIG_RATIONAL {
	/*0000*/ UINT Numerator;
	/*0004*/ UINT Denominator;
	/*0008*/
};

enum DISPLAYCONFIG_ROTATION {
	DISPLAYCONFIG_ROTATION_IDENTITY = 0x1,
	DISPLAYCONFIG_ROTATION_ROTATE90 = 0x2,
	DISPLAYCONFIG_ROTATION_ROTATE180 = 0x3,
	DISPLAYCONFIG_ROTATION_ROTATE270 = 0x4,
	DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xffffffff
};

enum DISPLAYCONFIG_SCALING {
	DISPLAYCONFIG_SCALING_IDENTITY = 0x1,
	DISPLAYCONFIG_SCALING_CENTERED = 0x2,
	DISPLAYCONFIG_SCALING_STRETCHED = 0x3,
	DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 0x4,
	DISPLAYCONFIG_SCALING_CUSTOM = 0x5,
	DISPLAYCONFIG_SCALING_PREFERRED = 0x80,
	DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xffffffff
};

enum DISPLAYCONFIG_SCANLINE_ORDERING {
	DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0x0,
	DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 0x1,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 0x2,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 0x2,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 0x3,
	DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xffffffff
};

struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT bootPersistenceOn : 01; // 0x00000001;
	/*0014*/ UINT reserved : 31; // 0xfffffffe;
	/*0014*/ UINT value;
	/*0018*/
};

struct DISPLAYCONFIG_SOURCE_DEVICE_NAME {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ WCHAR viewGdiDeviceName[0x20];
	/*0054*/
};

struct DISPLAYCONFIG_SOURCE_MODE {
	/*0000*/ UINT width;
	/*0004*/ UINT height;
	/*0008*/ DISPLAYCONFIG_PIXELFORMAT pixelFormat;
	/*000c*/ _POINTL position;
	/*0014*/
};

struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT disableMonitorVirtualResolution : 01; // 0x00000001;
	/*0014*/ UINT reserved : 31; // 0xfffffffe;
	/*0014*/ UINT value;
	/*0018*/
};

struct DISPLAYCONFIG_TARGET_BASE_TYPE {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
	/*0018*/
};

struct DISPLAYCONFIG_TARGET_DEVICE_NAME {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
	/*0018*/ DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
	/*001c*/ USHORT edidManufactureId;
	/*001e*/ USHORT edidProductCodeId;
	/*0020*/ UINT connectorInstance;
	/*0024*/ WCHAR monitorFriendlyDeviceName[0x40];
	/*00a4*/ WCHAR monitorDevicePath[0x80];
	/*01a4*/
};

struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS {
	/*0000*/ UINT friendlyNameFromEdid : 01; // 0x00000001;
	/*0000*/ UINT friendlyNameForced : 01; // 0x00000002;
	/*0000*/ UINT edidIdsValid : 01; // 0x00000004;
	/*0000*/ UINT reserved : 29; // 0xfffffff8;
	/*0000*/ UINT value;
	/*0004*/
};

struct DISPLAYCONFIG_TARGET_MODE {
	/*0000*/ DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
	/*0030*/
};

struct DISPLAYCONFIG_TARGET_PREFERRED_MODE {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT width;
	/*0018*/ UINT height;
	/*0020*/ DISPLAYCONFIG_TARGET_MODE targetMode;
	/*0050*/
};

enum DISPLAYCONFIG_TOPOLOGY_ID {
	DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x1,
	DISPLAYCONFIG_TOPOLOGY_CLONE = 0x2,
	DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x4,
	DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x8,
	DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xffffffff
};

enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY {
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = 0xffffffff,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0x0,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 0x1,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 0x2,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 0x3,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 0x4,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 0x5,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 0x6,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 0x8,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 0x9,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 0xa,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 0xb,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 0xc,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 0xd,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 0xe,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 0xf,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 0x10,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 0x11,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL = 0x12,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xffffffff
};

struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
	
	/*0000*/ ULONGLONG pixelRate;
	/*0008*/ DISPLAYCONFIG_RATIONAL hSyncFreq;
	/*0010*/ DISPLAYCONFIG_RATIONAL vSyncFreq;
	/*0018*/ DISPLAYCONFIG_2DREGION activeSize;
	/*0020*/ DISPLAYCONFIG_2DREGION totalSize;
	/*0028*/ <unnamed-type-AdditionalSignalInfo> AdditionalSignalInfo;
	/*0028*/ UINT videoStandard;
	/*002c*/ DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
	/*0030*/
};

struct DLGITEMTEMPLATE {
	/*0000*/ ULONG style;
	/*0004*/ ULONG dwExtendedStyle;
	/*0008*/ SHORT x;
	/*000a*/ SHORT y;
	/*000c*/ SHORT cx;
	/*000e*/ SHORT cy;
	/*0010*/ USHORT id;
	/*0012*/
};

struct DLGTEMPLATE {
	/*0000*/ ULONG style;
	/*0004*/ ULONG dwExtendedStyle;
	/*0008*/ USHORT cdit;
	/*000a*/ SHORT x;
	/*000c*/ SHORT y;
	/*000e*/ SHORT cx;
	/*0010*/ SHORT cy;
	/*0012*/
};

enum DPI_AWARENESS {
	DPI_AWARENESS_INVALID = 0xffffffff,
	DPI_AWARENESS_UNAWARE = 0x0,
	DPI_AWARENESS_SYSTEM_AWARE = 0x1,
	DPI_AWARENESS_PER_MONITOR_AWARE = 0x2
};

struct DPI_AWARENESS_CONTEXT__ {
	/*0000*/ INT unused;
	/*0004*/
};

enum DPI_HOSTING_BEHAVIOR {
	DPI_HOSTING_BEHAVIOR_INVALID = 0xffffffff,
	DPI_HOSTING_BEHAVIOR_DEFAULT = 0x0,
	DPI_HOSTING_BEHAVIOR_MIXED = 0x1
};

enum EDIT_CONTROL_FEATURE {
	EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0x0,
	EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 0x1
};

struct EHExceptionRecord {

	struct EHParameters {
		/*0000*/ ULONG magicNumber;
		/*0008*/ void * pExceptionObject;
		/*0010*/ _s_ThrowInfo const * pThrowInfo;
		/*0018*/ void * pThrowImageBase;
		/*0020*/
	};

	/*0000*/ ULONG ExceptionCode;
	/*0004*/ ULONG ExceptionFlags;
	/*0008*/ _EXCEPTION_RECORD * ExceptionRecord;
	/*0010*/ void * ExceptionAddress;
	/*0018*/ ULONG NumberParameters;
	/*0020*/ EHParameters params;
	/*0040*/
};

struct EventRegistrationToken {
	/*0000*/ LONGLONG value;
	/*0008*/
};

enum FILE_FLUSH_MODE {
	FILE_FLUSH_DEFAULT = 0x0,
	FILE_FLUSH_DATA = 0x1,
	FILE_FLUSH_MIN_METADATA = 0x2,
	FILE_FLUSH_NO_SYNC = 0x3
};

struct FILE_ID_DESCRIPTOR {
	/*0000*/ ULONG dwSize;
	/*0004*/ _FILE_ID_TYPE Type;
	/*0008*/ _LARGE_INTEGER FileId;
	/*0008*/ _GUID ObjectId;
	/*0008*/ _FILE_ID_128 ExtendedFileId;
	/*0018*/
};

enum FILE_WRITE_FLAGS {
	FILE_WRITE_FLAGS_NONE = 0x0,
	FILE_WRITE_FLAGS_WRITE_THROUGH = 0x1
};

struct FIND_BY_SID_DATA {
	/*0000*/ ULONG Restart;
	/*0004*/ _SID Sid;
	/*0010*/
};

struct FIND_BY_SID_OUTPUT {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ ULONG FileNameLength;
	/*000c*/ WCHAR FileName[0x1];
	/*0010*/
};

struct FLASHWINFO {
	/*0000*/ UINT cbSize;
	/*0008*/ HWND__ * hwnd;
	/*0010*/ ULONG dwFlags;
	/*0014*/ UINT uCount;
	/*0018*/ ULONG dwTimeout;
	/*0020*/
};

union FT {
	/*0000*/ ULONGLONG ft_scalar;
	/*0000*/ _FILETIME ft_struct;
	/*0008*/
};

enum GLOBALOPT_SERVICE_REFCOUNT_ENFORCEMENT {
	GLOBALOPT_SERVICE_REFCOUNT_ENFORCEMENT_DEFAULT = 0x0,
	GLOBALOPT_SERVICE_REFCOUNT_ENFORCEMENT_DISALLOWGLOBALREFCOUNT = 0x1,
	GLOBALOPT_SERVICE_REFCOUNT_ENFORCEMENT_VALUECOUNT = 0x2
};

struct HACCEL__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HBITMAP__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HBRUSH__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HCOLORSPACE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HDC__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HDESK__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HENHMETAFILE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HFONT__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HGESTUREINFO__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HGLRC__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HHOOK__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HICON__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HIMCC__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HIMC__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HINSTANCE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HKEY__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HKL__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HLSURF__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HMENU__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HMETAFILE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HMONITOR__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HPALETTE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HPEN__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HRAWINPUT__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HRGN__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HRSRC__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSAVEDUILANGUAGES__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSPRITE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSTRING_BUFFER__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSTRING_HEADER {
	
	/*0000*/ <unnamed-type-Reserved> Reserved;
	/*0018*/
};

struct HSTRING__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSTR__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSYNTHETICPOINTERDEVICE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HTASK__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HTOUCHINPUT__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HUMPD__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HWINEVENTHOOK__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HWINSTA__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HWND__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct IActivationFactory : IInspectable {
	/*0030*/ virtual HRESULT ActivateInstance( IInspectable * * ) = 0;
	void IActivationFactory( IActivationFactory && );
	void IActivationFactory( IActivationFactory const & );
	void IActivationFactory();
	IActivationFactory & operator=( IActivationFactory && );
	IActivationFactory & operator=( IActivationFactory const & );
	/*0008*/
};

struct IActivationFilter : IUnknown {
	/*0018*/ virtual HRESULT HandleActivation( ULONG , _GUID const & , _GUID * ) = 0;
	void IActivationFilter( IActivationFilter && );
	void IActivationFilter( IActivationFilter const & );
	void IActivationFilter();
	IActivationFilter & operator=( IActivationFilter && );
	IActivationFilter & operator=( IActivationFilter const & );
	/*0008*/
};

struct IAddrExclusionControl : IUnknown {
	/*0018*/ virtual HRESULT GetCurrentAddrExclusionList( _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT UpdateAddrExclusionList( IUnknown * ) = 0;
	void IAddrExclusionControl( IAddrExclusionControl && );
	void IAddrExclusionControl( IAddrExclusionControl const & );
	void IAddrExclusionControl();
	IAddrExclusionControl & operator=( IAddrExclusionControl && );
	IAddrExclusionControl & operator=( IAddrExclusionControl const & );
	/*0008*/
};

struct IAddrTrackingControl : IUnknown {
	/*0018*/ virtual HRESULT EnableCOMDynamicAddrTracking() = 0;
	/*0020*/ virtual HRESULT DisableCOMDynamicAddrTracking() = 0;
	void IAddrTrackingControl( IAddrTrackingControl && );
	void IAddrTrackingControl( IAddrTrackingControl const & );
	void IAddrTrackingControl();
	IAddrTrackingControl & operator=( IAddrTrackingControl && );
	IAddrTrackingControl & operator=( IAddrTrackingControl const & );
	/*0008*/
};

struct IAdviseSink : IUnknown {
	/*0018*/ virtual void OnDataChange( tagFORMATETC * , tagSTGMEDIUM * ) = 0;
	/*0020*/ virtual void OnViewChange( ULONG , LONG ) = 0;
	/*0028*/ virtual void OnRename( IMoniker * ) = 0;
	/*0030*/ virtual void OnSave() = 0;
	/*0038*/ virtual void OnClose() = 0;
	void IAdviseSink( IAdviseSink && );
	void IAdviseSink( IAdviseSink const & );
	void IAdviseSink();
	IAdviseSink & operator=( IAdviseSink && );
	IAdviseSink & operator=( IAdviseSink const & );
	/*0008*/
};

struct IAdviseSink2 : IAdviseSink {
	/*0040*/ virtual void OnLinkSrcChange( IMoniker * ) = 0;
	void IAdviseSink2( IAdviseSink2 && );
	void IAdviseSink2( IAdviseSink2 const & );
	void IAdviseSink2();
	IAdviseSink2 & operator=( IAdviseSink2 && );
	IAdviseSink2 & operator=( IAdviseSink2 const & );
	/*0008*/
};

struct IAgileDataObject : IDataObject {
	void IAgileDataObject( IAgileDataObject && );
	void IAgileDataObject( IAgileDataObject const & );
	void IAgileDataObject();
	IAgileDataObject & operator=( IAgileDataObject && );
	IAgileDataObject & operator=( IAgileDataObject const & );
	/*0008*/
};

struct IAgileObject : IUnknown {
	void IAgileObject( IAgileObject && );
	void IAgileObject( IAgileObject const & );
	void IAgileObject();
	IAgileObject & operator=( IAgileObject && );
	IAgileObject & operator=( IAgileObject const & );
	/*0008*/
};

struct IAgileReference : IUnknown {
	/*0018*/ virtual HRESULT Resolve( _GUID const & , void * * ) = 0;
	void IAgileReference( IAgileReference && );
	void IAgileReference( IAgileReference const & );
	void IAgileReference();
	IAgileReference & operator=( IAgileReference && );
	IAgileReference & operator=( IAgileReference const & );
	/*0008*/
};

struct IAllowAstaToAstaDeadlockRisk : IUnknown {
	void IAllowAstaToAstaDeadlockRisk( IAllowAstaToAstaDeadlockRisk && );
	void IAllowAstaToAstaDeadlockRisk( IAllowAstaToAstaDeadlockRisk const & );
	void IAllowAstaToAstaDeadlockRisk();
	IAllowAstaToAstaDeadlockRisk & operator=( IAllowAstaToAstaDeadlockRisk && );
	IAllowAstaToAstaDeadlockRisk & operator=( IAllowAstaToAstaDeadlockRisk const & );
	/*0008*/
};

struct IApartmentShutdown : IUnknown {
	/*0018*/ virtual void OnUninitialize( ULONGLONG ) = 0;
	void IApartmentShutdown( IApartmentShutdown && );
	void IApartmentShutdown( IApartmentShutdown const & );
	void IApartmentShutdown();
	IApartmentShutdown & operator=( IApartmentShutdown && );
	IApartmentShutdown & operator=( IApartmentShutdown const & );
	/*0008*/
};

struct IAsyncInfo : IInspectable {
	/*0030*/ virtual HRESULT get_Id( UINT * ) = 0;
	/*0038*/ virtual HRESULT get_Status( AsyncStatus * ) = 0;
	/*0040*/ virtual HRESULT get_ErrorCode( HRESULT * ) = 0;
	/*0048*/ virtual HRESULT Cancel() = 0;
	/*0050*/ virtual HRESULT Close() = 0;
	void IAsyncInfo( IAsyncInfo && );
	void IAsyncInfo( IAsyncInfo const & );
	void IAsyncInfo();
	IAsyncInfo & operator=( IAsyncInfo && );
	IAsyncInfo & operator=( IAsyncInfo const & );
	/*0008*/
};

struct IAsyncManager : IUnknown {
	/*0018*/ virtual HRESULT CompleteCall( HRESULT ) = 0;
	/*0020*/ virtual HRESULT GetCallContext( _GUID const & , void * * ) = 0;
	/*0028*/ virtual HRESULT GetState( ULONG * ) = 0;
	void IAsyncManager( IAsyncManager && );
	void IAsyncManager( IAsyncManager const & );
	void IAsyncManager();
	IAsyncManager & operator=( IAsyncManager && );
	IAsyncManager & operator=( IAsyncManager const & );
	/*0008*/
};

struct IAsyncRpcChannelBuffer : IRpcChannelBuffer2 {
	/*0048*/ virtual HRESULT Send( tagRPCOLEMESSAGE * , ISynchronize * , ULONG * ) = 0;
	/*0050*/ virtual HRESULT Receive( tagRPCOLEMESSAGE * , ULONG * ) = 0;
	/*0058*/ virtual HRESULT GetDestCtxEx( tagRPCOLEMESSAGE * , ULONG * , void * * ) = 0;
	void IAsyncRpcChannelBuffer( IAsyncRpcChannelBuffer && );
	void IAsyncRpcChannelBuffer( IAsyncRpcChannelBuffer const & );
	void IAsyncRpcChannelBuffer();
	IAsyncRpcChannelBuffer & operator=( IAsyncRpcChannelBuffer && );
	IAsyncRpcChannelBuffer & operator=( IAsyncRpcChannelBuffer const & );
	/*0008*/
};

struct IAuthenticate : IUnknown {
	/*0018*/ virtual HRESULT Authenticate( HWND__ * * , WCHAR * * , WCHAR * * ) = 0;
	void IAuthenticate( IAuthenticate && );
	void IAuthenticate( IAuthenticate const & );
	void IAuthenticate();
	IAuthenticate & operator=( IAuthenticate && );
	IAuthenticate & operator=( IAuthenticate const & );
	/*0008*/
};

struct IAuthenticateEx : IAuthenticate {
	/*0020*/ virtual HRESULT AuthenticateEx( HWND__ * * , WCHAR * * , WCHAR * * , _tagAUTHENTICATEINFO * ) = 0;
	void IAuthenticateEx( IAuthenticateEx && );
	void IAuthenticateEx( IAuthenticateEx const & );
	void IAuthenticateEx();
	IAuthenticateEx & operator=( IAuthenticateEx && );
	IAuthenticateEx & operator=( IAuthenticateEx const & );
	/*0008*/
};

struct IBindCallbackRedirect : IUnknown {
	/*0018*/ virtual HRESULT Redirect( WCHAR const * , SHORT * ) = 0;
	void IBindCallbackRedirect( IBindCallbackRedirect && );
	void IBindCallbackRedirect( IBindCallbackRedirect const & );
	void IBindCallbackRedirect();
	IBindCallbackRedirect & operator=( IBindCallbackRedirect && );
	IBindCallbackRedirect & operator=( IBindCallbackRedirect const & );
	/*0008*/
};

struct IBindCtx : IUnknown {
	/*0018*/ virtual HRESULT RegisterObjectBound( IUnknown * ) = 0;
	/*0020*/ virtual HRESULT RevokeObjectBound( IUnknown * ) = 0;
	/*0028*/ virtual HRESULT ReleaseBoundObjects() = 0;
	/*0030*/ virtual HRESULT SetBindOptions( tagBIND_OPTS * ) = 0;
	/*0038*/ virtual HRESULT GetBindOptions( tagBIND_OPTS * ) = 0;
	/*0040*/ virtual HRESULT GetRunningObjectTable( IRunningObjectTable * * ) = 0;
	/*0048*/ virtual HRESULT RegisterObjectParam( WCHAR * , IUnknown * ) = 0;
	/*0050*/ virtual HRESULT GetObjectParam( WCHAR * , IUnknown * * ) = 0;
	/*0058*/ virtual HRESULT EnumObjectParam( IEnumString * * ) = 0;
	/*0060*/ virtual HRESULT RevokeObjectParam( WCHAR * ) = 0;
	void IBindCtx( IBindCtx && );
	void IBindCtx( IBindCtx const & );
	void IBindCtx();
	IBindCtx & operator=( IBindCtx && );
	IBindCtx & operator=( IBindCtx const & );
	/*0008*/
};

struct IBindHost : IUnknown {
	/*0018*/ virtual HRESULT CreateMoniker( WCHAR * , IBindCtx * , IMoniker * * , ULONG ) = 0;
	/*0020*/ virtual HRESULT MonikerBindToStorage( IMoniker * , IBindCtx * , IBindStatusCallback * , _GUID const & , void * * ) = 0;
	/*0028*/ virtual HRESULT MonikerBindToObject( IMoniker * , IBindCtx * , IBindStatusCallback * , _GUID const & , void * * ) = 0;
	void IBindHost( IBindHost && );
	void IBindHost( IBindHost const & );
	void IBindHost();
	IBindHost & operator=( IBindHost && );
	IBindHost & operator=( IBindHost const & );
	/*0008*/
};

struct IBindHttpSecurity : IUnknown {
	/*0018*/ virtual HRESULT GetIgnoreCertMask( ULONG * ) = 0;
	void IBindHttpSecurity( IBindHttpSecurity && );
	void IBindHttpSecurity( IBindHttpSecurity const & );
	void IBindHttpSecurity();
	IBindHttpSecurity & operator=( IBindHttpSecurity && );
	IBindHttpSecurity & operator=( IBindHttpSecurity const & );
	/*0008*/
};

struct IBindProtocol : IUnknown {
	/*0018*/ virtual HRESULT CreateBinding( WCHAR const * , IBindCtx * , IBinding * * ) = 0;
	void IBindProtocol( IBindProtocol && );
	void IBindProtocol( IBindProtocol const & );
	void IBindProtocol();
	IBindProtocol & operator=( IBindProtocol && );
	IBindProtocol & operator=( IBindProtocol const & );
	/*0008*/
};

struct IBindStatusCallback : IUnknown {
	/*0018*/ virtual HRESULT OnStartBinding( ULONG , IBinding * ) = 0;
	/*0020*/ virtual HRESULT GetPriority( LONG * ) = 0;
	/*0028*/ virtual HRESULT OnLowResource( ULONG ) = 0;
	/*0030*/ virtual HRESULT OnProgress( ULONG , ULONG , ULONG , WCHAR const * ) = 0;
	/*0038*/ virtual HRESULT OnStopBinding( HRESULT , WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT GetBindInfo( ULONG * , _tagBINDINFO * ) = 0;
	/*0048*/ virtual HRESULT OnDataAvailable( ULONG , ULONG , tagFORMATETC * , tagSTGMEDIUM * ) = 0;
	/*0050*/ virtual HRESULT OnObjectAvailable( _GUID const & , IUnknown * ) = 0;
	void IBindStatusCallback( IBindStatusCallback && );
	void IBindStatusCallback( IBindStatusCallback const & );
	void IBindStatusCallback();
	IBindStatusCallback & operator=( IBindStatusCallback && );
	IBindStatusCallback & operator=( IBindStatusCallback const & );
	/*0008*/
};

struct IBindStatusCallbackEx : IBindStatusCallback {
	/*0058*/ virtual HRESULT GetBindInfoEx( ULONG * , _tagBINDINFO * , ULONG * , ULONG * ) = 0;
	void IBindStatusCallbackEx( IBindStatusCallbackEx && );
	void IBindStatusCallbackEx( IBindStatusCallbackEx const & );
	void IBindStatusCallbackEx();
	IBindStatusCallbackEx & operator=( IBindStatusCallbackEx && );
	IBindStatusCallbackEx & operator=( IBindStatusCallbackEx const & );
	/*0008*/
};

struct IBinding : IUnknown {
	/*0018*/ virtual HRESULT Abort() = 0;
	/*0020*/ virtual HRESULT Suspend() = 0;
	/*0028*/ virtual HRESULT Resume() = 0;
	/*0030*/ virtual HRESULT SetPriority( LONG ) = 0;
	/*0038*/ virtual HRESULT GetPriority( LONG * ) = 0;
	/*0040*/ virtual HRESULT GetBindResult( _GUID * , ULONG * , WCHAR * * , ULONG * ) = 0;
	void IBinding( IBinding && );
	void IBinding( IBinding const & );
	void IBinding();
	IBinding & operator=( IBinding && );
	IBinding & operator=( IBinding const & );
	/*0008*/
};

struct IBlockingLock : IUnknown {
	/*0018*/ virtual HRESULT Lock( ULONG ) = 0;
	/*0020*/ virtual HRESULT Unlock() = 0;
	void IBlockingLock( IBlockingLock && );
	void IBlockingLock( IBlockingLock const & );
	void IBlockingLock();
	IBlockingLock & operator=( IBlockingLock && );
	IBlockingLock & operator=( IBlockingLock const & );
	/*0008*/
};

struct ICallFactory : IUnknown {
	/*0018*/ virtual HRESULT CreateCall( _GUID const & , IUnknown * , _GUID const & , IUnknown * * ) = 0;
	void ICallFactory( ICallFactory && );
	void ICallFactory( ICallFactory const & );
	void ICallFactory();
	ICallFactory & operator=( ICallFactory && );
	ICallFactory & operator=( ICallFactory const & );
	/*0008*/
};

struct ICancelMethodCalls : IUnknown {
	/*0018*/ virtual HRESULT Cancel( ULONG ) = 0;
	/*0020*/ virtual HRESULT TestCancel() = 0;
	void ICancelMethodCalls( ICancelMethodCalls && );
	void ICancelMethodCalls( ICancelMethodCalls const & );
	void ICancelMethodCalls();
	ICancelMethodCalls & operator=( ICancelMethodCalls && );
	ICancelMethodCalls & operator=( ICancelMethodCalls const & );
	/*0008*/
};

struct ICatalogFileInfo : IUnknown {
	/*0018*/ virtual HRESULT GetCatalogFile( CHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetJavaTrust( void * * ) = 0;
	void ICatalogFileInfo( ICatalogFileInfo && );
	void ICatalogFileInfo( ICatalogFileInfo const & );
	void ICatalogFileInfo();
	ICatalogFileInfo & operator=( ICatalogFileInfo && );
	ICatalogFileInfo & operator=( ICatalogFileInfo const & );
	/*0008*/
};

struct IChannelHook : IUnknown {
	/*0018*/ virtual void ClientGetSize( _GUID const & , _GUID const & , ULONG * ) = 0;
	/*0020*/ virtual void ClientFillBuffer( _GUID const & , _GUID const & , ULONG * , void * ) = 0;
	/*0028*/ virtual void ClientNotify( _GUID const & , _GUID const & , ULONG , void * , ULONG , HRESULT ) = 0;
	/*0030*/ virtual void ServerNotify( _GUID const & , _GUID const & , ULONG , void * , ULONG ) = 0;
	/*0038*/ virtual void ServerGetSize( _GUID const & , _GUID const & , HRESULT , ULONG * ) = 0;
	/*0040*/ virtual void ServerFillBuffer( _GUID const & , _GUID const & , ULONG * , void * , HRESULT ) = 0;
	void IChannelHook( IChannelHook && );
	void IChannelHook( IChannelHook const & );
	void IChannelHook();
	IChannelHook & operator=( IChannelHook && );
	IChannelHook & operator=( IChannelHook const & );
	/*0008*/
};

struct IClassActivator : IUnknown {
	/*0018*/ virtual HRESULT GetClassObject( _GUID const & , ULONG , ULONG , _GUID const & , void * * ) = 0;
	void IClassActivator( IClassActivator && );
	void IClassActivator( IClassActivator const & );
	void IClassActivator();
	IClassActivator & operator=( IClassActivator && );
	IClassActivator & operator=( IClassActivator const & );
	/*0008*/
};

struct IClassFactory : IUnknown {
	/*0018*/ virtual HRESULT CreateInstance( IUnknown * , _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT LockServer( INT ) = 0;
	void IClassFactory( IClassFactory && );
	void IClassFactory( IClassFactory const & );
	void IClassFactory();
	IClassFactory & operator=( IClassFactory && );
	IClassFactory & operator=( IClassFactory const & );
	/*0008*/
};

struct IClientSecurity : IUnknown {
	/*0018*/ virtual HRESULT QueryBlanket( IUnknown * , ULONG * , ULONG * , WCHAR * * , ULONG * , ULONG * , void * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT SetBlanket( IUnknown * , ULONG , ULONG , WCHAR * , ULONG , ULONG , void * , ULONG ) = 0;
	/*0028*/ virtual HRESULT CopyProxy( IUnknown * , IUnknown * * ) = 0;
	void IClientSecurity( IClientSecurity && );
	void IClientSecurity( IClientSecurity const & );
	void IClientSecurity();
	IClientSecurity & operator=( IClientSecurity && );
	IClientSecurity & operator=( IClientSecurity const & );
	/*0008*/
};

struct ICodeInstall : IWindowForBindingUI {
	/*0020*/ virtual HRESULT OnCodeInstallProblem( ULONG , WCHAR const * , WCHAR const * , ULONG ) = 0;
	void ICodeInstall( ICodeInstall && );
	void ICodeInstall( ICodeInstall const & );
	void ICodeInstall();
	ICodeInstall & operator=( ICodeInstall && );
	ICodeInstall & operator=( ICodeInstall const & );
	/*0008*/
};

struct IComThreadingInfo : IUnknown {
	/*0018*/ virtual HRESULT GetCurrentApartmentType( _APTTYPE * ) = 0;
	/*0020*/ virtual HRESULT GetCurrentThreadType( _THDTYPE * ) = 0;
	/*0028*/ virtual HRESULT GetCurrentLogicalThreadId( _GUID * ) = 0;
	/*0030*/ virtual HRESULT SetCurrentLogicalThreadId( _GUID const & ) = 0;
	void IComThreadingInfo( IComThreadingInfo && );
	void IComThreadingInfo( IComThreadingInfo const & );
	void IComThreadingInfo();
	IComThreadingInfo & operator=( IComThreadingInfo && );
	IComThreadingInfo & operator=( IComThreadingInfo const & );
	/*0008*/
};

struct IContinue : IUnknown {
	/*0018*/ virtual HRESULT FContinue() = 0;
	void IContinue( IContinue && );
	void IContinue( IContinue const & );
	void IContinue();
	IContinue & operator=( IContinue && );
	IContinue & operator=( IContinue const & );
	/*0008*/
};

struct ICreateErrorInfo : IUnknown {
	/*0018*/ virtual HRESULT SetGUID( _GUID const & ) = 0;
	/*0020*/ virtual HRESULT SetSource( WCHAR * ) = 0;
	/*0028*/ virtual HRESULT SetDescription( WCHAR * ) = 0;
	/*0030*/ virtual HRESULT SetHelpFile( WCHAR * ) = 0;
	/*0038*/ virtual HRESULT SetHelpContext( ULONG ) = 0;
	void ICreateErrorInfo( ICreateErrorInfo && );
	void ICreateErrorInfo( ICreateErrorInfo const & );
	void ICreateErrorInfo();
	ICreateErrorInfo & operator=( ICreateErrorInfo && );
	ICreateErrorInfo & operator=( ICreateErrorInfo const & );
	/*0008*/
};

struct ICreateTypeInfo : IUnknown {
	/*0018*/ virtual HRESULT SetGuid( _GUID const & ) = 0;
	/*0020*/ virtual HRESULT SetTypeFlags( UINT ) = 0;
	/*0028*/ virtual HRESULT SetDocString( WCHAR * ) = 0;
	/*0030*/ virtual HRESULT SetHelpContext( ULONG ) = 0;
	/*0038*/ virtual HRESULT SetVersion( USHORT , USHORT ) = 0;
	/*0040*/ virtual HRESULT AddRefTypeInfo( ITypeInfo * , ULONG * ) = 0;
	/*0048*/ virtual HRESULT AddFuncDesc( UINT , tagFUNCDESC * ) = 0;
	/*0050*/ virtual HRESULT AddImplType( UINT , ULONG ) = 0;
	/*0058*/ virtual HRESULT SetImplTypeFlags( UINT , INT ) = 0;
	/*0060*/ virtual HRESULT SetAlignment( USHORT ) = 0;
	/*0068*/ virtual HRESULT SetSchema( WCHAR * ) = 0;
	/*0070*/ virtual HRESULT AddVarDesc( UINT , tagVARDESC * ) = 0;
	/*0078*/ virtual HRESULT SetFuncAndParamNames( UINT , WCHAR * * , UINT ) = 0;
	/*0080*/ virtual HRESULT SetVarName( UINT , WCHAR * ) = 0;
	/*0088*/ virtual HRESULT SetTypeDescAlias( tagTYPEDESC * ) = 0;
	/*0090*/ virtual HRESULT DefineFuncAsDllEntry( UINT , WCHAR * , WCHAR * ) = 0;
	/*0098*/ virtual HRESULT SetFuncDocString( UINT , WCHAR * ) = 0;
	/*00a0*/ virtual HRESULT SetVarDocString( UINT , WCHAR * ) = 0;
	/*00a8*/ virtual HRESULT SetFuncHelpContext( UINT , ULONG ) = 0;
	/*00b0*/ virtual HRESULT SetVarHelpContext( UINT , ULONG ) = 0;
	/*00b8*/ virtual HRESULT SetMops( UINT , WCHAR * ) = 0;
	/*00c0*/ virtual HRESULT SetTypeIdldesc( tagIDLDESC * ) = 0;
	/*00c8*/ virtual HRESULT LayOut() = 0;
	void ICreateTypeInfo( ICreateTypeInfo && );
	void ICreateTypeInfo( ICreateTypeInfo const & );
	void ICreateTypeInfo();
	ICreateTypeInfo & operator=( ICreateTypeInfo && );
	ICreateTypeInfo & operator=( ICreateTypeInfo const & );
	/*0008*/
};

struct ICreateTypeInfo2 : ICreateTypeInfo {
	/*00d0*/ virtual HRESULT DeleteFuncDesc( UINT ) = 0;
	/*00d8*/ virtual HRESULT DeleteFuncDescByMemId( LONG , tagINVOKEKIND ) = 0;
	/*00e0*/ virtual HRESULT DeleteVarDesc( UINT ) = 0;
	/*00e8*/ virtual HRESULT DeleteVarDescByMemId( LONG ) = 0;
	/*00f0*/ virtual HRESULT DeleteImplType( UINT ) = 0;
	/*00f8*/ virtual HRESULT SetCustData( _GUID const & , tagVARIANT * ) = 0;
	/*0100*/ virtual HRESULT SetFuncCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*0108*/ virtual HRESULT SetParamCustData( UINT , UINT , _GUID const & , tagVARIANT * ) = 0;
	/*0110*/ virtual HRESULT SetVarCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*0118*/ virtual HRESULT SetImplTypeCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*0120*/ virtual HRESULT SetHelpStringContext( ULONG ) = 0;
	/*0128*/ virtual HRESULT SetFuncHelpStringContext( UINT , ULONG ) = 0;
	/*0130*/ virtual HRESULT SetVarHelpStringContext( UINT , ULONG ) = 0;
	/*0138*/ virtual HRESULT Invalidate() = 0;
	/*0140*/ virtual HRESULT SetName( WCHAR * ) = 0;
	void ICreateTypeInfo2( ICreateTypeInfo2 && );
	void ICreateTypeInfo2( ICreateTypeInfo2 const & );
	void ICreateTypeInfo2();
	ICreateTypeInfo2 & operator=( ICreateTypeInfo2 && );
	ICreateTypeInfo2 & operator=( ICreateTypeInfo2 const & );
	/*0008*/
};

struct ICreateTypeLib : IUnknown {
	/*0018*/ virtual HRESULT CreateTypeInfo( WCHAR * , tagTYPEKIND , ICreateTypeInfo * * ) = 0;
	/*0020*/ virtual HRESULT SetName( WCHAR * ) = 0;
	/*0028*/ virtual HRESULT SetVersion( USHORT , USHORT ) = 0;
	/*0030*/ virtual HRESULT SetGuid( _GUID const & ) = 0;
	/*0038*/ virtual HRESULT SetDocString( WCHAR * ) = 0;
	/*0040*/ virtual HRESULT SetHelpFileName( WCHAR * ) = 0;
	/*0048*/ virtual HRESULT SetHelpContext( ULONG ) = 0;
	/*0050*/ virtual HRESULT SetLcid( ULONG ) = 0;
	/*0058*/ virtual HRESULT SetLibFlags( UINT ) = 0;
	/*0060*/ virtual HRESULT SaveAllChanges() = 0;
	void ICreateTypeLib( ICreateTypeLib && );
	void ICreateTypeLib( ICreateTypeLib const & );
	void ICreateTypeLib();
	ICreateTypeLib & operator=( ICreateTypeLib && );
	ICreateTypeLib & operator=( ICreateTypeLib const & );
	/*0008*/
};

struct ICreateTypeLib2 : ICreateTypeLib {
	/*0068*/ virtual HRESULT DeleteTypeInfo( WCHAR * ) = 0;
	/*0070*/ virtual HRESULT SetCustData( _GUID const & , tagVARIANT * ) = 0;
	/*0078*/ virtual HRESULT SetHelpStringContext( ULONG ) = 0;
	/*0080*/ virtual HRESULT SetHelpStringDll( WCHAR * ) = 0;
	void ICreateTypeLib2( ICreateTypeLib2 && );
	void ICreateTypeLib2( ICreateTypeLib2 const & );
	void ICreateTypeLib2();
	ICreateTypeLib2 & operator=( ICreateTypeLib2 && );
	ICreateTypeLib2 & operator=( ICreateTypeLib2 const & );
	/*0008*/
};

struct IDataAdviseHolder : IUnknown {
	/*0018*/ virtual HRESULT Advise( IDataObject * , tagFORMATETC * , ULONG , IAdviseSink * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0028*/ virtual HRESULT EnumAdvise( IEnumSTATDATA * * ) = 0;
	/*0030*/ virtual HRESULT SendOnDataChange( IDataObject * , ULONG , ULONG ) = 0;
	void IDataAdviseHolder( IDataAdviseHolder && );
	void IDataAdviseHolder( IDataAdviseHolder const & );
	void IDataAdviseHolder();
	IDataAdviseHolder & operator=( IDataAdviseHolder && );
	IDataAdviseHolder & operator=( IDataAdviseHolder const & );
	/*0008*/
};

struct IDataFilter : IUnknown {
	/*0018*/ virtual HRESULT DoEncode( ULONG , LONG , UCHAR * , LONG , UCHAR * , LONG , LONG * , LONG * , ULONG ) = 0;
	/*0020*/ virtual HRESULT DoDecode( ULONG , LONG , UCHAR * , LONG , UCHAR * , LONG , LONG * , LONG * , ULONG ) = 0;
	/*0028*/ virtual HRESULT SetEncodingLevel( ULONG ) = 0;
	void IDataFilter( IDataFilter && );
	void IDataFilter( IDataFilter const & );
	void IDataFilter();
	IDataFilter & operator=( IDataFilter && );
	IDataFilter & operator=( IDataFilter const & );
	/*0008*/
};

struct IDataObject : IUnknown {
	/*0018*/ virtual HRESULT GetData( tagFORMATETC * , tagSTGMEDIUM * ) = 0;
	/*0020*/ virtual HRESULT GetDataHere( tagFORMATETC * , tagSTGMEDIUM * ) = 0;
	/*0028*/ virtual HRESULT QueryGetData( tagFORMATETC * ) = 0;
	/*0030*/ virtual HRESULT GetCanonicalFormatEtc( tagFORMATETC * , tagFORMATETC * ) = 0;
	/*0038*/ virtual HRESULT SetData( tagFORMATETC * , tagSTGMEDIUM * , INT ) = 0;
	/*0040*/ virtual HRESULT EnumFormatEtc( ULONG , IEnumFORMATETC * * ) = 0;
	/*0048*/ virtual HRESULT DAdvise( tagFORMATETC * , ULONG , IAdviseSink * , ULONG * ) = 0;
	/*0050*/ virtual HRESULT DUnadvise( ULONG ) = 0;
	/*0058*/ virtual HRESULT EnumDAdvise( IEnumSTATDATA * * ) = 0;
	void IDataObject( IDataObject && );
	void IDataObject( IDataObject const & );
	void IDataObject();
	IDataObject & operator=( IDataObject && );
	IDataObject & operator=( IDataObject const & );
	/*0008*/
};

struct IDirectWriterLock : IUnknown {
	/*0018*/ virtual HRESULT WaitForWriteAccess( ULONG ) = 0;
	/*0020*/ virtual HRESULT ReleaseWriteAccess() = 0;
	/*0028*/ virtual HRESULT HaveWriteAccess() = 0;
	void IDirectWriterLock( IDirectWriterLock && );
	void IDirectWriterLock( IDirectWriterLock const & );
	void IDirectWriterLock();
	IDirectWriterLock & operator=( IDirectWriterLock && );
	IDirectWriterLock & operator=( IDirectWriterLock const & );
	/*0008*/
};

struct IDisableAsyncRemotingForWinrtAsync : IUnknown {
	void IDisableAsyncRemotingForWinrtAsync( IDisableAsyncRemotingForWinrtAsync && );
	void IDisableAsyncRemotingForWinrtAsync( IDisableAsyncRemotingForWinrtAsync const & );
	void IDisableAsyncRemotingForWinrtAsync();
	IDisableAsyncRemotingForWinrtAsync & operator=( IDisableAsyncRemotingForWinrtAsync && );
	IDisableAsyncRemotingForWinrtAsync & operator=( IDisableAsyncRemotingForWinrtAsync const & );
	/*0008*/
};

struct IDisableFastRundown : IUnknown {
	void IDisableFastRundown( IDisableFastRundown && );
	void IDisableFastRundown( IDisableFastRundown const & );
	void IDisableFastRundown();
	IDisableFastRundown & operator=( IDisableFastRundown && );
	IDisableFastRundown & operator=( IDisableFastRundown const & );
	/*0008*/
};

struct IDispatch : IUnknown {
	/*0018*/ virtual HRESULT GetTypeInfoCount( UINT * ) = 0;
	/*0020*/ virtual HRESULT GetTypeInfo( UINT , ULONG , ITypeInfo * * ) = 0;
	/*0028*/ virtual HRESULT GetIDsOfNames( _GUID const & , WCHAR * * , UINT , ULONG , LONG * ) = 0;
	/*0030*/ virtual HRESULT Invoke( LONG , _GUID const & , ULONG , USHORT , tagDISPPARAMS * , tagVARIANT * , tagEXCEPINFO * , UINT * ) = 0;
	void IDispatch( IDispatch && );
	void IDispatch( IDispatch const & );
	void IDispatch();
	IDispatch & operator=( IDispatch && );
	IDispatch & operator=( IDispatch const & );
	/*0008*/
};

struct IDropSource : IUnknown {
	/*0018*/ virtual HRESULT QueryContinueDrag( INT , ULONG ) = 0;
	/*0020*/ virtual HRESULT GiveFeedback( ULONG ) = 0;
	void IDropSource( IDropSource && );
	void IDropSource( IDropSource const & );
	void IDropSource();
	IDropSource & operator=( IDropSource && );
	IDropSource & operator=( IDropSource const & );
	/*0008*/
};

struct IDropSourceNotify : IUnknown {
	/*0018*/ virtual HRESULT DragEnterTarget( HWND__ * ) = 0;
	/*0020*/ virtual HRESULT DragLeaveTarget() = 0;
	void IDropSourceNotify( IDropSourceNotify && );
	void IDropSourceNotify( IDropSourceNotify const & );
	void IDropSourceNotify();
	IDropSourceNotify & operator=( IDropSourceNotify && );
	IDropSourceNotify & operator=( IDropSourceNotify const & );
	/*0008*/
};

struct IDropTarget : IUnknown {
	/*0018*/ virtual HRESULT DragEnter( IDataObject * , ULONG , _POINTL , ULONG * ) = 0;
	/*0020*/ virtual HRESULT DragOver( ULONG , _POINTL , ULONG * ) = 0;
	/*0028*/ virtual HRESULT DragLeave() = 0;
	/*0030*/ virtual HRESULT Drop( IDataObject * , ULONG , _POINTL , ULONG * ) = 0;
	void IDropTarget( IDropTarget && );
	void IDropTarget( IDropTarget const & );
	void IDropTarget();
	IDropTarget & operator=( IDropTarget && );
	IDropTarget & operator=( IDropTarget const & );
	/*0008*/
};

struct IDummyHICONIncluder : IUnknown {
	/*0018*/ virtual HRESULT Dummy( HICON__ * , HDC__ * ) = 0;
	void IDummyHICONIncluder( IDummyHICONIncluder && );
	void IDummyHICONIncluder( IDummyHICONIncluder const & );
	void IDummyHICONIncluder();
	IDummyHICONIncluder & operator=( IDummyHICONIncluder && );
	IDummyHICONIncluder & operator=( IDummyHICONIncluder const & );
	/*0008*/
};

enum IEObjectType {
	IE_EPM_OBJECT_EVENT = 0x0,
	IE_EPM_OBJECT_MUTEX = 0x1,
	IE_EPM_OBJECT_SEMAPHORE = 0x2,
	IE_EPM_OBJECT_SHARED_MEMORY = 0x3,
	IE_EPM_OBJECT_WAITABLE_TIMER = 0x4,
	IE_EPM_OBJECT_FILE = 0x5,
	IE_EPM_OBJECT_NAMED_PIPE = 0x6,
	IE_EPM_OBJECT_REGISTRY = 0x7
};

struct IEncodingFilterFactory : IUnknown {
	/*0018*/ virtual HRESULT FindBestFilter( WCHAR const * , WCHAR const * , _tagDATAINFO , IDataFilter * * ) = 0;
	/*0020*/ virtual HRESULT GetDefaultFilter( WCHAR const * , WCHAR const * , IDataFilter * * ) = 0;
	void IEncodingFilterFactory( IEncodingFilterFactory && );
	void IEncodingFilterFactory( IEncodingFilterFactory const & );
	void IEncodingFilterFactory();
	IEncodingFilterFactory & operator=( IEncodingFilterFactory && );
	IEncodingFilterFactory & operator=( IEncodingFilterFactory const & );
	/*0008*/
};

struct IEnterpriseDropTarget : IUnknown {
	/*0018*/ virtual HRESULT SetDropSourceEnterpriseId( WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT IsEvaluatingEdpPolicy( INT * ) = 0;
	void IEnterpriseDropTarget( IEnterpriseDropTarget && );
	void IEnterpriseDropTarget( IEnterpriseDropTarget const & );
	void IEnterpriseDropTarget();
	IEnterpriseDropTarget & operator=( IEnterpriseDropTarget && );
	IEnterpriseDropTarget & operator=( IEnterpriseDropTarget const & );
	/*0008*/
};

struct IEnumFORMATETC : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagFORMATETC * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumFORMATETC * * ) = 0;
	void IEnumFORMATETC( IEnumFORMATETC && );
	void IEnumFORMATETC( IEnumFORMATETC const & );
	void IEnumFORMATETC();
	IEnumFORMATETC & operator=( IEnumFORMATETC && );
	IEnumFORMATETC & operator=( IEnumFORMATETC const & );
	/*0008*/
};

struct IEnumMoniker : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , IMoniker * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumMoniker * * ) = 0;
	void IEnumMoniker( IEnumMoniker && );
	void IEnumMoniker( IEnumMoniker const & );
	void IEnumMoniker();
	IEnumMoniker & operator=( IEnumMoniker && );
	IEnumMoniker & operator=( IEnumMoniker const & );
	/*0008*/
};

struct IEnumOLEVERB : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagOLEVERB * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumOLEVERB * * ) = 0;
	void IEnumOLEVERB( IEnumOLEVERB && );
	void IEnumOLEVERB( IEnumOLEVERB const & );
	void IEnumOLEVERB();
	IEnumOLEVERB & operator=( IEnumOLEVERB && );
	IEnumOLEVERB & operator=( IEnumOLEVERB const & );
	/*0008*/
};

struct IEnumSTATDATA : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagSTATDATA * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumSTATDATA * * ) = 0;
	void IEnumSTATDATA( IEnumSTATDATA && );
	void IEnumSTATDATA( IEnumSTATDATA const & );
	void IEnumSTATDATA();
	IEnumSTATDATA & operator=( IEnumSTATDATA && );
	IEnumSTATDATA & operator=( IEnumSTATDATA const & );
	/*0008*/
};

struct IEnumSTATPROPSETSTG : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagSTATPROPSETSTG * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumSTATPROPSETSTG * * ) = 0;
	void IEnumSTATPROPSETSTG( IEnumSTATPROPSETSTG && );
	void IEnumSTATPROPSETSTG( IEnumSTATPROPSETSTG const & );
	void IEnumSTATPROPSETSTG();
	IEnumSTATPROPSETSTG & operator=( IEnumSTATPROPSETSTG && );
	IEnumSTATPROPSETSTG & operator=( IEnumSTATPROPSETSTG const & );
	/*0008*/
};

struct IEnumSTATPROPSTG : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagSTATPROPSTG * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumSTATPROPSTG * * ) = 0;
	void IEnumSTATPROPSTG( IEnumSTATPROPSTG && );
	void IEnumSTATPROPSTG( IEnumSTATPROPSTG const & );
	void IEnumSTATPROPSTG();
	IEnumSTATPROPSTG & operator=( IEnumSTATPROPSTG && );
	IEnumSTATPROPSTG & operator=( IEnumSTATPROPSTG const & );
	/*0008*/
};

struct IEnumSTATSTG : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagSTATSTG * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumSTATSTG * * ) = 0;
	void IEnumSTATSTG( IEnumSTATSTG && );
	void IEnumSTATSTG( IEnumSTATSTG const & );
	void IEnumSTATSTG();
	IEnumSTATSTG & operator=( IEnumSTATSTG && );
	IEnumSTATSTG & operator=( IEnumSTATSTG const & );
	/*0008*/
};

struct IEnumString : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , WCHAR * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumString * * ) = 0;
	void IEnumString( IEnumString && );
	void IEnumString( IEnumString const & );
	void IEnumString();
	IEnumString & operator=( IEnumString && );
	IEnumString & operator=( IEnumString const & );
	/*0008*/
};

struct IEnumUnknown : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , IUnknown * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumUnknown * * ) = 0;
	void IEnumUnknown( IEnumUnknown && );
	void IEnumUnknown( IEnumUnknown const & );
	void IEnumUnknown();
	IEnumUnknown & operator=( IEnumUnknown && );
	IEnumUnknown & operator=( IEnumUnknown const & );
	/*0008*/
};

struct IEnumVARIANT : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagVARIANT * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumVARIANT * * ) = 0;
	void IEnumVARIANT( IEnumVARIANT && );
	void IEnumVARIANT( IEnumVARIANT const & );
	void IEnumVARIANT();
	IEnumVARIANT & operator=( IEnumVARIANT && );
	IEnumVARIANT & operator=( IEnumVARIANT const & );
	/*0008*/
};

struct IErrorInfo : IUnknown {
	/*0018*/ virtual HRESULT GetGUID( _GUID * ) = 0;
	/*0020*/ virtual HRESULT GetSource( WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT GetDescription( WCHAR * * ) = 0;
	/*0030*/ virtual HRESULT GetHelpFile( WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT GetHelpContext( ULONG * ) = 0;
	void IErrorInfo( IErrorInfo && );
	void IErrorInfo( IErrorInfo const & );
	void IErrorInfo();
	IErrorInfo & operator=( IErrorInfo && );
	IErrorInfo & operator=( IErrorInfo const & );
	/*0008*/
};

struct IErrorLog : IUnknown {
	/*0018*/ virtual HRESULT AddError( WCHAR const * , tagEXCEPINFO * ) = 0;
	void IErrorLog( IErrorLog && );
	void IErrorLog( IErrorLog const & );
	void IErrorLog();
	IErrorLog & operator=( IErrorLog && );
	IErrorLog & operator=( IErrorLog const & );
	/*0008*/
};

struct IExternalConnection : IUnknown {
	/*0018*/ virtual ULONG AddConnection( ULONG , ULONG ) = 0;
	/*0020*/ virtual ULONG ReleaseConnection( ULONG , ULONG , INT ) = 0;
	void IExternalConnection( IExternalConnection && );
	void IExternalConnection( IExternalConnection const & );
	void IExternalConnection();
	IExternalConnection & operator=( IExternalConnection && );
	IExternalConnection & operator=( IExternalConnection const & );
	/*0008*/
};

struct IFastRundown : IUnknown {
	void IFastRundown( IFastRundown && );
	void IFastRundown( IFastRundown const & );
	void IFastRundown();
	IFastRundown & operator=( IFastRundown && );
	IFastRundown & operator=( IFastRundown const & );
	/*0008*/
};

struct IFillLockBytes : IUnknown {
	/*0018*/ virtual HRESULT FillAppend( void const * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT FillAt( _ULARGE_INTEGER , void const * , ULONG , ULONG * ) = 0;
	/*0028*/ virtual HRESULT SetFillSize( _ULARGE_INTEGER ) = 0;
	/*0030*/ virtual HRESULT Terminate( INT ) = 0;
	void IFillLockBytes( IFillLockBytes && );
	void IFillLockBytes( IFillLockBytes const & );
	void IFillLockBytes();
	IFillLockBytes & operator=( IFillLockBytes && );
	IFillLockBytes & operator=( IFillLockBytes const & );
	/*0008*/
};

struct IForegroundTransfer : IUnknown {
	/*0018*/ virtual HRESULT AllowForegroundTransfer( void * ) = 0;
	void IForegroundTransfer( IForegroundTransfer && );
	void IForegroundTransfer( IForegroundTransfer const & );
	void IForegroundTransfer();
	IForegroundTransfer & operator=( IForegroundTransfer && );
	IForegroundTransfer & operator=( IForegroundTransfer const & );
	/*0008*/
};

struct IGetBindHandle : IUnknown {
	/*0018*/ virtual HRESULT GetBindHandle( __MIDL_IGetBindHandle_0001 , void * * ) = 0;
	void IGetBindHandle( IGetBindHandle && );
	void IGetBindHandle( IGetBindHandle const & );
	void IGetBindHandle();
	IGetBindHandle & operator=( IGetBindHandle && );
	IGetBindHandle & operator=( IGetBindHandle const & );
	/*0008*/
};

struct IGlobalInterfaceTable : IUnknown {
	/*0018*/ virtual HRESULT RegisterInterfaceInGlobal( IUnknown * , _GUID const & , ULONG * ) = 0;
	/*0020*/ virtual HRESULT RevokeInterfaceFromGlobal( ULONG ) = 0;
	/*0028*/ virtual HRESULT GetInterfaceFromGlobal( ULONG , _GUID const & , void * * ) = 0;
	void IGlobalInterfaceTable( IGlobalInterfaceTable && );
	void IGlobalInterfaceTable( IGlobalInterfaceTable const & );
	void IGlobalInterfaceTable();
	IGlobalInterfaceTable & operator=( IGlobalInterfaceTable && );
	IGlobalInterfaceTable & operator=( IGlobalInterfaceTable const & );
	/*0008*/
};

struct IGlobalOptions : IUnknown {
	/*0018*/ virtual HRESULT Set( tagGLOBALOPT_PROPERTIES , ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT Query( tagGLOBALOPT_PROPERTIES , ULONGLONG * ) = 0;
	void IGlobalOptions( IGlobalOptions && );
	void IGlobalOptions( IGlobalOptions const & );
	void IGlobalOptions();
	IGlobalOptions & operator=( IGlobalOptions && );
	IGlobalOptions & operator=( IGlobalOptions const & );
	/*0008*/
};

struct IHttpNegotiate : IUnknown {
	/*0018*/ virtual HRESULT BeginningTransaction( WCHAR const * , WCHAR const * , ULONG , WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT OnResponse( ULONG , WCHAR const * , WCHAR const * , WCHAR * * ) = 0;
	void IHttpNegotiate( IHttpNegotiate && );
	void IHttpNegotiate( IHttpNegotiate const & );
	void IHttpNegotiate();
	IHttpNegotiate & operator=( IHttpNegotiate && );
	IHttpNegotiate & operator=( IHttpNegotiate const & );
	/*0008*/
};

struct IHttpNegotiate2 : IHttpNegotiate {
	/*0028*/ virtual HRESULT GetRootSecurityId( UCHAR * , ULONG * , ULONGLONG ) = 0;
	void IHttpNegotiate2( IHttpNegotiate2 && );
	void IHttpNegotiate2( IHttpNegotiate2 const & );
	void IHttpNegotiate2();
	IHttpNegotiate2 & operator=( IHttpNegotiate2 && );
	IHttpNegotiate2 & operator=( IHttpNegotiate2 const & );
	/*0008*/
};

struct IHttpNegotiate3 : IHttpNegotiate2 {
	/*0030*/ virtual HRESULT GetSerializedClientCertContext( UCHAR * * , ULONG * ) = 0;
	void IHttpNegotiate3( IHttpNegotiate3 && );
	void IHttpNegotiate3( IHttpNegotiate3 const & );
	void IHttpNegotiate3();
	IHttpNegotiate3 & operator=( IHttpNegotiate3 && );
	IHttpNegotiate3 & operator=( IHttpNegotiate3 const & );
	/*0008*/
};

struct IHttpSecurity : IWindowForBindingUI {
	/*0020*/ virtual HRESULT OnSecurityProblem( ULONG ) = 0;
	void IHttpSecurity( IHttpSecurity && );
	void IHttpSecurity( IHttpSecurity const & );
	void IHttpSecurity();
	IHttpSecurity & operator=( IHttpSecurity && );
	IHttpSecurity & operator=( IHttpSecurity const & );
	/*0008*/
};

struct IInitializeSpy : IUnknown {
	/*0018*/ virtual HRESULT PreInitialize( ULONG , ULONG ) = 0;
	/*0020*/ virtual HRESULT PostInitialize( HRESULT , ULONG , ULONG ) = 0;
	/*0028*/ virtual HRESULT PreUninitialize( ULONG ) = 0;
	/*0030*/ virtual HRESULT PostUninitialize( ULONG ) = 0;
	void IInitializeSpy( IInitializeSpy && );
	void IInitializeSpy( IInitializeSpy const & );
	void IInitializeSpy();
	IInitializeSpy & operator=( IInitializeSpy && );
	IInitializeSpy & operator=( IInitializeSpy const & );
	/*0008*/
};

struct IInspectable : IUnknown {
	/*0018*/ virtual HRESULT GetIids( ULONG * , _GUID * * ) = 0;
	/*0020*/ virtual HRESULT GetRuntimeClassName( HSTRING__ * * ) = 0;
	/*0028*/ virtual HRESULT GetTrustLevel( TrustLevel * ) = 0;
	void IInspectable( IInspectable && );
	void IInspectable( IInspectable const & );
	void IInspectable();
	IInspectable & operator=( IInspectable && );
	IInspectable & operator=( IInspectable const & );
	/*0008*/
};

struct IInternalUnknown : IUnknown {
	/*0018*/ virtual HRESULT QueryInternalInterface( _GUID const & , void * * ) = 0;
	void IInternalUnknown( IInternalUnknown && );
	void IInternalUnknown( IInternalUnknown const & );
	void IInternalUnknown();
	IInternalUnknown & operator=( IInternalUnknown && );
	IInternalUnknown & operator=( IInternalUnknown const & );
	/*0008*/
};

struct IInternet : IUnknown {
	void IInternet( IInternet && );
	void IInternet( IInternet const & );
	void IInternet();
	IInternet & operator=( IInternet && );
	IInternet & operator=( IInternet const & );
	/*0008*/
};

struct IInternetBindInfo : IUnknown {
	/*0018*/ virtual HRESULT GetBindInfo( ULONG * , _tagBINDINFO * ) = 0;
	/*0020*/ virtual HRESULT GetBindString( ULONG , WCHAR * * , ULONG , ULONG * ) = 0;
	void IInternetBindInfo( IInternetBindInfo && );
	void IInternetBindInfo( IInternetBindInfo const & );
	void IInternetBindInfo();
	IInternetBindInfo & operator=( IInternetBindInfo && );
	IInternetBindInfo & operator=( IInternetBindInfo const & );
	/*0008*/
};

struct IInternetBindInfoEx : IInternetBindInfo {
	/*0028*/ virtual HRESULT GetBindInfoEx( ULONG * , _tagBINDINFO * , ULONG * , ULONG * ) = 0;
	void IInternetBindInfoEx( IInternetBindInfoEx && );
	void IInternetBindInfoEx( IInternetBindInfoEx const & );
	void IInternetBindInfoEx();
	IInternetBindInfoEx & operator=( IInternetBindInfoEx && );
	IInternetBindInfoEx & operator=( IInternetBindInfoEx const & );
	/*0008*/
};

struct IInternetHostSecurityManager : IUnknown {
	/*0018*/ virtual HRESULT GetSecurityId( UCHAR * , ULONG * , ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT ProcessUrlAction( ULONG , UCHAR * , ULONG , UCHAR * , ULONG , ULONG , ULONG ) = 0;
	/*0028*/ virtual HRESULT QueryCustomPolicy( _GUID const & , UCHAR * * , ULONG * , UCHAR * , ULONG , ULONG ) = 0;
	void IInternetHostSecurityManager( IInternetHostSecurityManager && );
	void IInternetHostSecurityManager( IInternetHostSecurityManager const & );
	void IInternetHostSecurityManager();
	IInternetHostSecurityManager & operator=( IInternetHostSecurityManager && );
	IInternetHostSecurityManager & operator=( IInternetHostSecurityManager const & );
	/*0008*/
};

struct IInternetPriority : IUnknown {
	/*0018*/ virtual HRESULT SetPriority( LONG ) = 0;
	/*0020*/ virtual HRESULT GetPriority( LONG * ) = 0;
	void IInternetPriority( IInternetPriority && );
	void IInternetPriority( IInternetPriority const & );
	void IInternetPriority();
	IInternetPriority & operator=( IInternetPriority && );
	IInternetPriority & operator=( IInternetPriority const & );
	/*0008*/
};

struct IInternetProtocol : IInternetProtocolRoot {
	/*0048*/ virtual HRESULT Read( void * , ULONG , ULONG * ) = 0;
	/*0050*/ virtual HRESULT Seek( _LARGE_INTEGER , ULONG , _ULARGE_INTEGER * ) = 0;
	/*0058*/ virtual HRESULT LockRequest( ULONG ) = 0;
	/*0060*/ virtual HRESULT UnlockRequest() = 0;
	void IInternetProtocol( IInternetProtocol && );
	void IInternetProtocol( IInternetProtocol const & );
	void IInternetProtocol();
	IInternetProtocol & operator=( IInternetProtocol && );
	IInternetProtocol & operator=( IInternetProtocol const & );
	/*0008*/
};

struct IInternetProtocolEx : IInternetProtocol {
	/*0068*/ virtual HRESULT StartEx( IUri * , IInternetProtocolSink * , IInternetBindInfo * , ULONG , ULONGLONG ) = 0;
	void IInternetProtocolEx( IInternetProtocolEx && );
	void IInternetProtocolEx( IInternetProtocolEx const & );
	void IInternetProtocolEx();
	IInternetProtocolEx & operator=( IInternetProtocolEx && );
	IInternetProtocolEx & operator=( IInternetProtocolEx const & );
	/*0008*/
};

struct IInternetProtocolInfo : IUnknown {
	/*0018*/ virtual HRESULT ParseUrl( WCHAR const * , _tagPARSEACTION , ULONG , WCHAR * , ULONG , ULONG * , ULONG ) = 0;
	/*0020*/ virtual HRESULT CombineUrl( WCHAR const * , WCHAR const * , ULONG , WCHAR * , ULONG , ULONG * , ULONG ) = 0;
	/*0028*/ virtual HRESULT CompareUrl( WCHAR const * , WCHAR const * , ULONG ) = 0;
	/*0030*/ virtual HRESULT QueryInfo( WCHAR const * , _tagQUERYOPTION , ULONG , void * , ULONG , ULONG * , ULONG ) = 0;
	void IInternetProtocolInfo( IInternetProtocolInfo && );
	void IInternetProtocolInfo( IInternetProtocolInfo const & );
	void IInternetProtocolInfo();
	IInternetProtocolInfo & operator=( IInternetProtocolInfo && );
	IInternetProtocolInfo & operator=( IInternetProtocolInfo const & );
	/*0008*/
};

struct IInternetProtocolRoot : IUnknown {
	/*0018*/ virtual HRESULT Start( WCHAR const * , IInternetProtocolSink * , IInternetBindInfo * , ULONG , ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT Continue( _tagPROTOCOLDATA * ) = 0;
	/*0028*/ virtual HRESULT Abort( HRESULT , ULONG ) = 0;
	/*0030*/ virtual HRESULT Terminate( ULONG ) = 0;
	/*0038*/ virtual HRESULT Suspend() = 0;
	/*0040*/ virtual HRESULT Resume() = 0;
	void IInternetProtocolRoot( IInternetProtocolRoot && );
	void IInternetProtocolRoot( IInternetProtocolRoot const & );
	void IInternetProtocolRoot();
	IInternetProtocolRoot & operator=( IInternetProtocolRoot && );
	IInternetProtocolRoot & operator=( IInternetProtocolRoot const & );
	/*0008*/
};

struct IInternetProtocolSink : IUnknown {
	/*0018*/ virtual HRESULT Switch( _tagPROTOCOLDATA * ) = 0;
	/*0020*/ virtual HRESULT ReportProgress( ULONG , WCHAR const * ) = 0;
	/*0028*/ virtual HRESULT ReportData( ULONG , ULONG , ULONG ) = 0;
	/*0030*/ virtual HRESULT ReportResult( HRESULT , ULONG , WCHAR const * ) = 0;
	void IInternetProtocolSink( IInternetProtocolSink && );
	void IInternetProtocolSink( IInternetProtocolSink const & );
	void IInternetProtocolSink();
	IInternetProtocolSink & operator=( IInternetProtocolSink && );
	IInternetProtocolSink & operator=( IInternetProtocolSink const & );
	/*0008*/
};

struct IInternetProtocolSinkStackable : IUnknown {
	/*0018*/ virtual HRESULT SwitchSink( IInternetProtocolSink * ) = 0;
	/*0020*/ virtual HRESULT CommitSwitch() = 0;
	/*0028*/ virtual HRESULT RollbackSwitch() = 0;
	void IInternetProtocolSinkStackable( IInternetProtocolSinkStackable && );
	void IInternetProtocolSinkStackable( IInternetProtocolSinkStackable const & );
	void IInternetProtocolSinkStackable();
	IInternetProtocolSinkStackable & operator=( IInternetProtocolSinkStackable && );
	IInternetProtocolSinkStackable & operator=( IInternetProtocolSinkStackable const & );
	/*0008*/
};

struct IInternetSecurityManager : IUnknown {
	/*0018*/ virtual HRESULT SetSecuritySite( IInternetSecurityMgrSite * ) = 0;
	/*0020*/ virtual HRESULT GetSecuritySite( IInternetSecurityMgrSite * * ) = 0;
	/*0028*/ virtual HRESULT MapUrlToZone( WCHAR const * , ULONG * , ULONG ) = 0;
	/*0030*/ virtual HRESULT GetSecurityId( WCHAR const * , UCHAR * , ULONG * , ULONGLONG ) = 0;
	/*0038*/ virtual HRESULT ProcessUrlAction( WCHAR const * , ULONG , UCHAR * , ULONG , UCHAR * , ULONG , ULONG , ULONG ) = 0;
	/*0040*/ virtual HRESULT QueryCustomPolicy( WCHAR const * , _GUID const & , UCHAR * * , ULONG * , UCHAR * , ULONG , ULONG ) = 0;
	/*0048*/ virtual HRESULT SetZoneMapping( ULONG , WCHAR const * , ULONG ) = 0;
	/*0050*/ virtual HRESULT GetZoneMappings( ULONG , IEnumString * * , ULONG ) = 0;
	void IInternetSecurityManager( IInternetSecurityManager && );
	void IInternetSecurityManager( IInternetSecurityManager const & );
	void IInternetSecurityManager();
	IInternetSecurityManager & operator=( IInternetSecurityManager && );
	IInternetSecurityManager & operator=( IInternetSecurityManager const & );
	/*0008*/
};

struct IInternetSecurityManagerEx : IInternetSecurityManager {
	/*0058*/ virtual HRESULT ProcessUrlActionEx( WCHAR const * , ULONG , UCHAR * , ULONG , UCHAR * , ULONG , ULONG , ULONG , ULONG * ) = 0;
	void IInternetSecurityManagerEx( IInternetSecurityManagerEx && );
	void IInternetSecurityManagerEx( IInternetSecurityManagerEx const & );
	void IInternetSecurityManagerEx();
	IInternetSecurityManagerEx & operator=( IInternetSecurityManagerEx && );
	IInternetSecurityManagerEx & operator=( IInternetSecurityManagerEx const & );
	/*0008*/
};

struct IInternetSecurityManagerEx2 : IInternetSecurityManagerEx {
	/*0060*/ virtual HRESULT MapUrlToZoneEx2( IUri * , ULONG * , ULONG , WCHAR * * , ULONG * ) = 0;
	/*0068*/ virtual HRESULT ProcessUrlActionEx2( IUri * , ULONG , UCHAR * , ULONG , UCHAR * , ULONG , ULONG , ULONGLONG , ULONG * ) = 0;
	/*0070*/ virtual HRESULT GetSecurityIdEx2( IUri * , UCHAR * , ULONG * , ULONGLONG ) = 0;
	/*0078*/ virtual HRESULT QueryCustomPolicyEx2( IUri * , _GUID const & , UCHAR * * , ULONG * , UCHAR * , ULONG , ULONGLONG ) = 0;
	void IInternetSecurityManagerEx2( IInternetSecurityManagerEx2 && );
	void IInternetSecurityManagerEx2( IInternetSecurityManagerEx2 const & );
	void IInternetSecurityManagerEx2();
	IInternetSecurityManagerEx2 & operator=( IInternetSecurityManagerEx2 && );
	IInternetSecurityManagerEx2 & operator=( IInternetSecurityManagerEx2 const & );
	/*0008*/
};

struct IInternetSecurityMgrSite : IUnknown {
	/*0018*/ virtual HRESULT GetWindow( HWND__ * * ) = 0;
	/*0020*/ virtual HRESULT EnableModeless( INT ) = 0;
	void IInternetSecurityMgrSite( IInternetSecurityMgrSite && );
	void IInternetSecurityMgrSite( IInternetSecurityMgrSite const & );
	void IInternetSecurityMgrSite();
	IInternetSecurityMgrSite & operator=( IInternetSecurityMgrSite && );
	IInternetSecurityMgrSite & operator=( IInternetSecurityMgrSite const & );
	/*0008*/
};

struct IInternetSession : IUnknown {
	/*0018*/ virtual HRESULT RegisterNameSpace( IClassFactory * , _GUID const & , WCHAR const * , ULONG , WCHAR const * const * , ULONG ) = 0;
	/*0020*/ virtual HRESULT UnregisterNameSpace( IClassFactory * , WCHAR const * ) = 0;
	/*0028*/ virtual HRESULT RegisterMimeFilter( IClassFactory * , _GUID const & , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT UnregisterMimeFilter( IClassFactory * , WCHAR const * ) = 0;
	/*0038*/ virtual HRESULT CreateBinding( IBindCtx * , WCHAR const * , IUnknown * , IUnknown * * , IInternetProtocol * * , ULONG ) = 0;
	/*0040*/ virtual HRESULT SetSessionOption( ULONG , void * , ULONG , ULONG ) = 0;
	/*0048*/ virtual HRESULT GetSessionOption( ULONG , void * , ULONG * , ULONG ) = 0;
	void IInternetSession( IInternetSession && );
	void IInternetSession( IInternetSession const & );
	void IInternetSession();
	IInternetSession & operator=( IInternetSession && );
	IInternetSession & operator=( IInternetSession const & );
	/*0008*/
};

struct IInternetThreadSwitch : IUnknown {
	/*0018*/ virtual HRESULT Prepare() = 0;
	/*0020*/ virtual HRESULT Continue() = 0;
	void IInternetThreadSwitch( IInternetThreadSwitch && );
	void IInternetThreadSwitch( IInternetThreadSwitch const & );
	void IInternetThreadSwitch();
	IInternetThreadSwitch & operator=( IInternetThreadSwitch && );
	IInternetThreadSwitch & operator=( IInternetThreadSwitch const & );
	/*0008*/
};

struct IInternetZoneManager : IUnknown {
	/*0018*/ virtual HRESULT GetZoneAttributes( ULONG , _ZONEATTRIBUTES * ) = 0;
	/*0020*/ virtual HRESULT SetZoneAttributes( ULONG , _ZONEATTRIBUTES * ) = 0;
	/*0028*/ virtual HRESULT GetZoneCustomPolicy( ULONG , _GUID const & , UCHAR * * , ULONG * , _URLZONEREG ) = 0;
	/*0030*/ virtual HRESULT SetZoneCustomPolicy( ULONG , _GUID const & , UCHAR * , ULONG , _URLZONEREG ) = 0;
	/*0038*/ virtual HRESULT GetZoneActionPolicy( ULONG , ULONG , UCHAR * , ULONG , _URLZONEREG ) = 0;
	/*0040*/ virtual HRESULT SetZoneActionPolicy( ULONG , ULONG , UCHAR * , ULONG , _URLZONEREG ) = 0;
	/*0048*/ virtual HRESULT PromptAction( ULONG , HWND__ * , WCHAR const * , WCHAR const * , ULONG ) = 0;
	/*0050*/ virtual HRESULT LogAction( ULONG , WCHAR const * , WCHAR const * , ULONG ) = 0;
	/*0058*/ virtual HRESULT CreateZoneEnumerator( ULONG * , ULONG * , ULONG ) = 0;
	/*0060*/ virtual HRESULT GetZoneAt( ULONG , ULONG , ULONG * ) = 0;
	/*0068*/ virtual HRESULT DestroyZoneEnumerator( ULONG ) = 0;
	/*0070*/ virtual HRESULT CopyTemplatePoliciesToZone( ULONG , ULONG , ULONG ) = 0;
	void IInternetZoneManager( IInternetZoneManager && );
	void IInternetZoneManager( IInternetZoneManager const & );
	void IInternetZoneManager();
	IInternetZoneManager & operator=( IInternetZoneManager && );
	IInternetZoneManager & operator=( IInternetZoneManager const & );
	/*0008*/
};

struct IInternetZoneManagerEx : IInternetZoneManager {
	/*0078*/ virtual HRESULT GetZoneActionPolicyEx( ULONG , ULONG , UCHAR * , ULONG , _URLZONEREG , ULONG ) = 0;
	/*0080*/ virtual HRESULT SetZoneActionPolicyEx( ULONG , ULONG , UCHAR * , ULONG , _URLZONEREG , ULONG ) = 0;
	void IInternetZoneManagerEx( IInternetZoneManagerEx && );
	void IInternetZoneManagerEx( IInternetZoneManagerEx const & );
	void IInternetZoneManagerEx();
	IInternetZoneManagerEx & operator=( IInternetZoneManagerEx && );
	IInternetZoneManagerEx & operator=( IInternetZoneManagerEx const & );
	/*0008*/
};

struct IInternetZoneManagerEx2 : IInternetZoneManagerEx {
	/*0088*/ virtual HRESULT GetZoneAttributesEx( ULONG , _ZONEATTRIBUTES * , ULONG ) = 0;
	/*0090*/ virtual HRESULT GetZoneSecurityState( ULONG , INT , ULONG * , INT * ) = 0;
	/*0098*/ virtual HRESULT GetIESecurityState( INT , ULONG * , INT * , INT ) = 0;
	/*00a0*/ virtual HRESULT FixUnsecureSettings() = 0;
	void IInternetZoneManagerEx2( IInternetZoneManagerEx2 && );
	void IInternetZoneManagerEx2( IInternetZoneManagerEx2 const & );
	void IInternetZoneManagerEx2();
	IInternetZoneManagerEx2 & operator=( IInternetZoneManagerEx2 && );
	IInternetZoneManagerEx2 & operator=( IInternetZoneManagerEx2 const & );
	/*0008*/
};

struct ILanguageExceptionErrorInfo : IUnknown {
	/*0018*/ virtual HRESULT GetLanguageException( IUnknown * * ) = 0;
	void ILanguageExceptionErrorInfo( ILanguageExceptionErrorInfo && );
	void ILanguageExceptionErrorInfo( ILanguageExceptionErrorInfo const & );
	void ILanguageExceptionErrorInfo();
	ILanguageExceptionErrorInfo & operator=( ILanguageExceptionErrorInfo && );
	ILanguageExceptionErrorInfo & operator=( ILanguageExceptionErrorInfo const & );
	/*0008*/
};

struct ILanguageExceptionErrorInfo2 : ILanguageExceptionErrorInfo {
	/*0020*/ virtual HRESULT GetPreviousLanguageExceptionErrorInfo( ILanguageExceptionErrorInfo2 * * ) = 0;
	/*0028*/ virtual HRESULT CapturePropagationContext( IUnknown * ) = 0;
	/*0030*/ virtual HRESULT GetPropagationContextHead( ILanguageExceptionErrorInfo2 * * ) = 0;
	void ILanguageExceptionErrorInfo2( ILanguageExceptionErrorInfo2 && );
	void ILanguageExceptionErrorInfo2( ILanguageExceptionErrorInfo2 const & );
	void ILanguageExceptionErrorInfo2();
	ILanguageExceptionErrorInfo2 & operator=( ILanguageExceptionErrorInfo2 && );
	ILanguageExceptionErrorInfo2 & operator=( ILanguageExceptionErrorInfo2 const & );
	/*0008*/
};

struct ILanguageExceptionStackBackTrace : IUnknown {
	/*0018*/ virtual HRESULT GetStackBackTrace( ULONG , ULONGLONG * , ULONG * ) = 0;
	void ILanguageExceptionStackBackTrace( ILanguageExceptionStackBackTrace && );
	void ILanguageExceptionStackBackTrace( ILanguageExceptionStackBackTrace const & );
	void ILanguageExceptionStackBackTrace();
	ILanguageExceptionStackBackTrace & operator=( ILanguageExceptionStackBackTrace && );
	ILanguageExceptionStackBackTrace & operator=( ILanguageExceptionStackBackTrace const & );
	/*0008*/
};

struct ILanguageExceptionTransform : IUnknown {
	/*0018*/ virtual HRESULT GetTransformedRestrictedErrorInfo( IRestrictedErrorInfo * * ) = 0;
	void ILanguageExceptionTransform( ILanguageExceptionTransform && );
	void ILanguageExceptionTransform( ILanguageExceptionTransform const & );
	void ILanguageExceptionTransform();
	ILanguageExceptionTransform & operator=( ILanguageExceptionTransform && );
	ILanguageExceptionTransform & operator=( ILanguageExceptionTransform const & );
	/*0008*/
};

struct ILayoutStorage : IUnknown {
	/*0018*/ virtual HRESULT LayoutScript( tagStorageLayout * , ULONG , ULONG ) = 0;
	/*0020*/ virtual HRESULT BeginMonitor() = 0;
	/*0028*/ virtual HRESULT EndMonitor() = 0;
	/*0030*/ virtual HRESULT ReLayoutDocfile( WCHAR * ) = 0;
	/*0038*/ virtual HRESULT ReLayoutDocfileOnILockBytes( ILockBytes * ) = 0;
	void ILayoutStorage( ILayoutStorage && );
	void ILayoutStorage( ILayoutStorage const & );
	void ILayoutStorage();
	ILayoutStorage & operator=( ILayoutStorage && );
	ILayoutStorage & operator=( ILayoutStorage const & );
	/*0008*/
};

struct ILockBytes : IUnknown {
	/*0018*/ virtual HRESULT ReadAt( _ULARGE_INTEGER , void * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT WriteAt( _ULARGE_INTEGER , void const * , ULONG , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Flush() = 0;
	/*0030*/ virtual HRESULT SetSize( _ULARGE_INTEGER ) = 0;
	/*0038*/ virtual HRESULT LockRegion( _ULARGE_INTEGER , _ULARGE_INTEGER , ULONG ) = 0;
	/*0040*/ virtual HRESULT UnlockRegion( _ULARGE_INTEGER , _ULARGE_INTEGER , ULONG ) = 0;
	/*0048*/ virtual HRESULT Stat( tagSTATSTG * , ULONG ) = 0;
	void ILockBytes( ILockBytes && );
	void ILockBytes( ILockBytes const & );
	void ILockBytes();
	ILockBytes & operator=( ILockBytes && );
	ILockBytes & operator=( ILockBytes const & );
	/*0008*/
};

union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA {
	/*0000*/ ULONG HeaderData;
	/*0000*/ ULONG FunctionLength : 18; // 0x0003ffff;
	/*0000*/ ULONG Version : 02; // 0x000c0000;
	/*0000*/ ULONG ExceptionDataPresent : 01; // 0x00100000;
	/*0000*/ ULONG EpilogInHeader : 01; // 0x00200000;
	/*0000*/ ULONG EpilogCount : 05; // 0x07c00000;
	/*0000*/ ULONG CodeWords : 05; // 0xf8000000;
	/*0004*/
};

struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
	/*0000*/ UCHAR bAuxType;
	/*0001*/ UCHAR bReserved;
	/*0002*/ ULONG SymbolTableIndex;
	/*0006*/ UCHAR rgbReserved[0xc];
	/*0012*/
};

enum IMAGE_AUX_SYMBOL_TYPE {
	IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 0x1
};

struct IMAGE_COR20_HEADER {
	/*0000*/ ULONG cb;
	/*0004*/ USHORT MajorRuntimeVersion;
	/*0006*/ USHORT MinorRuntimeVersion;
	/*0008*/ _IMAGE_DATA_DIRECTORY MetaData;
	/*0010*/ ULONG Flags;
	/*0014*/ ULONG EntryPointToken;
	/*0014*/ ULONG EntryPointRVA;
	/*0018*/ _IMAGE_DATA_DIRECTORY Resources;
	/*0020*/ _IMAGE_DATA_DIRECTORY StrongNameSignature;
	/*0028*/ _IMAGE_DATA_DIRECTORY CodeManagerTable;
	/*0030*/ _IMAGE_DATA_DIRECTORY VTableFixups;
	/*0038*/ _IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
	/*0040*/ _IMAGE_DATA_DIRECTORY ManagedNativeHeader;
	/*0048*/
};

struct IMPORT_OBJECT_HEADER {
	/*0000*/ USHORT Sig1;
	/*0002*/ USHORT Sig2;
	/*0004*/ USHORT Version;
	/*0006*/ USHORT Machine;
	/*0008*/ ULONG TimeDateStamp;
	/*000c*/ ULONG SizeOfData;
	/*0010*/ USHORT Ordinal;
	/*0010*/ USHORT Hint;
	/*0012*/ USHORT Type : 02; // 0x0003;
	/*0012*/ USHORT NameType : 03; // 0x001c;
	/*0012*/ USHORT Reserved : 11; // 0xffe0;
	/*0014*/
};

enum IMPORT_OBJECT_NAME_TYPE {
	IMPORT_OBJECT_ORDINAL = 0x0,
	IMPORT_OBJECT_NAME = 0x1,
	IMPORT_OBJECT_NAME_NO_PREFIX = 0x2,
	IMPORT_OBJECT_NAME_UNDECORATE = 0x3,
	IMPORT_OBJECT_NAME_EXPORTAS = 0x4
};

enum IMPORT_OBJECT_TYPE {
	IMPORT_OBJECT_CODE = 0x0,
	IMPORT_OBJECT_DATA = 0x1,
	IMPORT_OBJECT_CONST = 0x2
};

struct IMachineGlobalObjectTable : IUnknown {
	/*0018*/ virtual HRESULT RegisterObject( _GUID const & , WCHAR const * , IUnknown * , MachineGlobalObjectTableRegistrationToken__ * * ) = 0;
	/*0020*/ virtual HRESULT GetObjectW( _GUID const & , WCHAR const * , _GUID const & , void * * ) = 0;
	/*0028*/ virtual HRESULT RevokeObject( MachineGlobalObjectTableRegistrationToken__ * ) = 0;
	void IMachineGlobalObjectTable( IMachineGlobalObjectTable && );
	void IMachineGlobalObjectTable( IMachineGlobalObjectTable const & );
	void IMachineGlobalObjectTable();
	IMachineGlobalObjectTable & operator=( IMachineGlobalObjectTable && );
	IMachineGlobalObjectTable & operator=( IMachineGlobalObjectTable const & );
	/*0008*/
};

struct IMachineGlobalObjectTableLegacy : IUnknown {
	/*0018*/ virtual HRESULT RegisterObject( MGOTFLAGS , _GUID const & , HSTRING__ * , IUnknown * , MachineGlobalObjectTableRegistrationToken__ * * ) = 0;
	/*0020*/ virtual HRESULT EnumerateObjectIdentifiers( _GUID const & , IVectorView<HSTRING__ *> * * ) = 0;
	/*0028*/ virtual HRESULT GetObjectW( _GUID const & , HSTRING__ * , _GUID const & , void * * ) = 0;
	/*0030*/ virtual HRESULT RevokeObject( MachineGlobalObjectTableRegistrationToken__ * ) = 0;
	void IMachineGlobalObjectTableLegacy( IMachineGlobalObjectTableLegacy && );
	void IMachineGlobalObjectTableLegacy( IMachineGlobalObjectTableLegacy const & );
	void IMachineGlobalObjectTableLegacy();
	IMachineGlobalObjectTableLegacy & operator=( IMachineGlobalObjectTableLegacy && );
	IMachineGlobalObjectTableLegacy & operator=( IMachineGlobalObjectTableLegacy const & );
	/*0008*/
};

struct IMalloc : IUnknown {
	/*0018*/ virtual void * Alloc( ULONGLONG ) = 0;
	/*0020*/ virtual void * Realloc( void * , ULONGLONG ) = 0;
	/*0028*/ virtual void Free( void * ) = 0;
	/*0030*/ virtual ULONGLONG GetSize( void * ) = 0;
	/*0038*/ virtual INT DidAlloc( void * ) = 0;
	/*0040*/ virtual void HeapMinimize() = 0;
	void IMalloc( IMalloc && );
	void IMalloc( IMalloc const & );
	void IMalloc();
	IMalloc & operator=( IMalloc && );
	IMalloc & operator=( IMalloc const & );
	/*0008*/
};

struct IMallocSpy : IUnknown {
	/*0018*/ virtual ULONGLONG PreAlloc( ULONGLONG ) = 0;
	/*0020*/ virtual void * PostAlloc( void * ) = 0;
	/*0028*/ virtual void * PreFree( void * , INT ) = 0;
	/*0030*/ virtual void PostFree( INT ) = 0;
	/*0038*/ virtual ULONGLONG PreRealloc( void * , ULONGLONG , void * * , INT ) = 0;
	/*0040*/ virtual void * PostRealloc( void * , INT ) = 0;
	/*0048*/ virtual void * PreGetSize( void * , INT ) = 0;
	/*0050*/ virtual ULONGLONG PostGetSize( ULONGLONG , INT ) = 0;
	/*0058*/ virtual void * PreDidAlloc( void * , INT ) = 0;
	/*0060*/ virtual INT PostDidAlloc( void * , INT , INT ) = 0;
	/*0068*/ virtual void PreHeapMinimize() = 0;
	/*0070*/ virtual void PostHeapMinimize() = 0;
	void IMallocSpy( IMallocSpy && );
	void IMallocSpy( IMallocSpy const & );
	void IMallocSpy();
	IMallocSpy & operator=( IMallocSpy && );
	IMallocSpy & operator=( IMallocSpy const & );
	/*0008*/
};

struct IMarshal : IUnknown {
	/*0018*/ virtual HRESULT GetUnmarshalClass( _GUID const & , void * , ULONG , void * , ULONG , _GUID * ) = 0;
	/*0020*/ virtual HRESULT GetMarshalSizeMax( _GUID const & , void * , ULONG , void * , ULONG , ULONG * ) = 0;
	/*0028*/ virtual HRESULT MarshalInterface( IStream * , _GUID const & , void * , ULONG , void * , ULONG ) = 0;
	/*0030*/ virtual HRESULT UnmarshalInterface( IStream * , _GUID const & , void * * ) = 0;
	/*0038*/ virtual HRESULT ReleaseMarshalData( IStream * ) = 0;
	/*0040*/ virtual HRESULT DisconnectObject( ULONG ) = 0;
	void IMarshal( IMarshal && );
	void IMarshal( IMarshal const & );
	void IMarshal();
	IMarshal & operator=( IMarshal && );
	IMarshal & operator=( IMarshal const & );
	/*0008*/
};

struct IMarshal2 : IMarshal {
	void IMarshal2( IMarshal2 && );
	void IMarshal2( IMarshal2 const & );
	void IMarshal2();
	IMarshal2 & operator=( IMarshal2 && );
	IMarshal2 & operator=( IMarshal2 const & );
	/*0008*/
};

struct IMarshalingStream : IStream {
	/*0070*/ virtual HRESULT GetMarshalingContextAttribute( CO_MARSHALING_CONTEXT_ATTRIBUTES , ULONGLONG * ) = 0;
	void IMarshalingStream( IMarshalingStream && );
	void IMarshalingStream( IMarshalingStream const & );
	void IMarshalingStream();
	IMarshalingStream & operator=( IMarshalingStream && );
	IMarshalingStream & operator=( IMarshalingStream const & );
	/*0008*/
};

struct IMessageFilter : IUnknown {
	/*0018*/ virtual ULONG HandleInComingCall( ULONG , HTASK__ * , ULONG , tagINTERFACEINFO * ) = 0;
	/*0020*/ virtual ULONG RetryRejectedCall( HTASK__ * , ULONG , ULONG ) = 0;
	/*0028*/ virtual ULONG MessagePending( HTASK__ * , ULONG , ULONG ) = 0;
	void IMessageFilter( IMessageFilter && );
	void IMessageFilter( IMessageFilter const & );
	void IMessageFilter();
	IMessageFilter & operator=( IMessageFilter && );
	IMessageFilter & operator=( IMessageFilter const & );
	/*0008*/
};

struct IMoniker : IPersistStream {
	/*0040*/ virtual HRESULT BindToObject( IBindCtx * , IMoniker * , _GUID const & , void * * ) = 0;
	/*0048*/ virtual HRESULT BindToStorage( IBindCtx * , IMoniker * , _GUID const & , void * * ) = 0;
	/*0050*/ virtual HRESULT Reduce( IBindCtx * , ULONG , IMoniker * * , IMoniker * * ) = 0;
	/*0058*/ virtual HRESULT ComposeWith( IMoniker * , INT , IMoniker * * ) = 0;
	/*0060*/ virtual HRESULT Enum( INT , IEnumMoniker * * ) = 0;
	/*0068*/ virtual HRESULT IsEqual( IMoniker * ) = 0;
	/*0070*/ virtual HRESULT Hash( ULONG * ) = 0;
	/*0078*/ virtual HRESULT IsRunning( IBindCtx * , IMoniker * , IMoniker * ) = 0;
	/*0080*/ virtual HRESULT GetTimeOfLastChange( IBindCtx * , IMoniker * , _FILETIME * ) = 0;
	/*0088*/ virtual HRESULT Inverse( IMoniker * * ) = 0;
	/*0090*/ virtual HRESULT CommonPrefixWith( IMoniker * , IMoniker * * ) = 0;
	/*0098*/ virtual HRESULT RelativePathTo( IMoniker * , IMoniker * * ) = 0;
	/*00a0*/ virtual HRESULT GetDisplayName( IBindCtx * , IMoniker * , WCHAR * * ) = 0;
	/*00a8*/ virtual HRESULT ParseDisplayName( IBindCtx * , IMoniker * , WCHAR * , ULONG * , IMoniker * * ) = 0;
	/*00b0*/ virtual HRESULT IsSystemMoniker( ULONG * ) = 0;
	void IMoniker( IMoniker && );
	void IMoniker( IMoniker const & );
	void IMoniker();
	IMoniker & operator=( IMoniker && );
	IMoniker & operator=( IMoniker const & );
	/*0008*/
};

struct IMonikerProp : IUnknown {
	/*0018*/ virtual HRESULT PutProperty( __MIDL_IMonikerProp_0001 , WCHAR const * ) = 0;
	void IMonikerProp( IMonikerProp && );
	void IMonikerProp( IMonikerProp const & );
	void IMonikerProp();
	IMonikerProp & operator=( IMonikerProp && );
	IMonikerProp & operator=( IMonikerProp const & );
	/*0008*/
};

struct IMultiQI : IUnknown {
	/*0018*/ virtual HRESULT QueryMultipleInterfaces( ULONG , tagMULTI_QI * ) = 0;
	void IMultiQI( IMultiQI && );
	void IMultiQI( IMultiQI const & );
	void IMultiQI();
	IMultiQI & operator=( IMultiQI && );
	IMultiQI & operator=( IMultiQI const & );
	/*0008*/
};

struct INoMarshal : IUnknown {
	void INoMarshal( INoMarshal && );
	void INoMarshal( INoMarshal const & );
	void INoMarshal();
	INoMarshal & operator=( INoMarshal && );
	INoMarshal & operator=( INoMarshal const & );
	/*0008*/
};

struct IOleAdviseHolder : IUnknown {
	/*0018*/ virtual HRESULT Advise( IAdviseSink * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0028*/ virtual HRESULT EnumAdvise( IEnumSTATDATA * * ) = 0;
	/*0030*/ virtual HRESULT SendOnRename( IMoniker * ) = 0;
	/*0038*/ virtual HRESULT SendOnSave() = 0;
	/*0040*/ virtual HRESULT SendOnClose() = 0;
	void IOleAdviseHolder( IOleAdviseHolder && );
	void IOleAdviseHolder( IOleAdviseHolder const & );
	void IOleAdviseHolder();
	IOleAdviseHolder & operator=( IOleAdviseHolder && );
	IOleAdviseHolder & operator=( IOleAdviseHolder const & );
	/*0008*/
};

struct IOleCache : IUnknown {
	/*0018*/ virtual HRESULT Cache( tagFORMATETC * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Uncache( ULONG ) = 0;
	/*0028*/ virtual HRESULT EnumCache( IEnumSTATDATA * * ) = 0;
	/*0030*/ virtual HRESULT InitCache( IDataObject * ) = 0;
	/*0038*/ virtual HRESULT SetData( tagFORMATETC * , tagSTGMEDIUM * , INT ) = 0;
	void IOleCache( IOleCache && );
	void IOleCache( IOleCache const & );
	void IOleCache();
	IOleCache & operator=( IOleCache && );
	IOleCache & operator=( IOleCache const & );
	/*0008*/
};

struct IOleCache2 : IOleCache {
	/*0040*/ virtual HRESULT UpdateCache( IDataObject * , ULONG , void * ) = 0;
	/*0048*/ virtual HRESULT DiscardCache( ULONG ) = 0;
	void IOleCache2( IOleCache2 && );
	void IOleCache2( IOleCache2 const & );
	void IOleCache2();
	IOleCache2 & operator=( IOleCache2 && );
	IOleCache2 & operator=( IOleCache2 const & );
	/*0008*/
};

struct IOleCacheControl : IUnknown {
	/*0018*/ virtual HRESULT OnRun( IDataObject * ) = 0;
	/*0020*/ virtual HRESULT OnStop() = 0;
	void IOleCacheControl( IOleCacheControl && );
	void IOleCacheControl( IOleCacheControl const & );
	void IOleCacheControl();
	IOleCacheControl & operator=( IOleCacheControl && );
	IOleCacheControl & operator=( IOleCacheControl const & );
	/*0008*/
};

struct IOleClientSite : IUnknown {
	/*0018*/ virtual HRESULT SaveObject() = 0;
	/*0020*/ virtual HRESULT GetMoniker( ULONG , ULONG , IMoniker * * ) = 0;
	/*0028*/ virtual HRESULT GetContainer( IOleContainer * * ) = 0;
	/*0030*/ virtual HRESULT ShowObject() = 0;
	/*0038*/ virtual HRESULT OnShowWindow( INT ) = 0;
	/*0040*/ virtual HRESULT RequestNewObjectLayout() = 0;
	void IOleClientSite( IOleClientSite && );
	void IOleClientSite( IOleClientSite const & );
	void IOleClientSite();
	IOleClientSite & operator=( IOleClientSite && );
	IOleClientSite & operator=( IOleClientSite const & );
	/*0008*/
};

struct IOleContainer : IParseDisplayName {
	/*0020*/ virtual HRESULT EnumObjects( ULONG , IEnumUnknown * * ) = 0;
	/*0028*/ virtual HRESULT LockContainer( INT ) = 0;
	void IOleContainer( IOleContainer && );
	void IOleContainer( IOleContainer const & );
	void IOleContainer();
	IOleContainer & operator=( IOleContainer && );
	IOleContainer & operator=( IOleContainer const & );
	/*0008*/
};

struct IOleInPlaceActiveObject : IOleWindow {
	/*0028*/ virtual HRESULT TranslateAcceleratorW( tagMSG * ) = 0;
	/*0030*/ virtual HRESULT OnFrameWindowActivate( INT ) = 0;
	/*0038*/ virtual HRESULT OnDocWindowActivate( INT ) = 0;
	/*0040*/ virtual HRESULT ResizeBorder( tagRECT const * , IOleInPlaceUIWindow * , INT ) = 0;
	/*0048*/ virtual HRESULT EnableModeless( INT ) = 0;
	void IOleInPlaceActiveObject( IOleInPlaceActiveObject && );
	void IOleInPlaceActiveObject( IOleInPlaceActiveObject const & );
	void IOleInPlaceActiveObject();
	IOleInPlaceActiveObject & operator=( IOleInPlaceActiveObject && );
	IOleInPlaceActiveObject & operator=( IOleInPlaceActiveObject const & );
	/*0008*/
};

struct IOleInPlaceFrame : IOleInPlaceUIWindow {
	/*0048*/ virtual HRESULT InsertMenus( HMENU__ * , tagOleMenuGroupWidths * ) = 0;
	/*0050*/ virtual HRESULT SetMenu( HMENU__ * , void * , HWND__ * ) = 0;
	/*0058*/ virtual HRESULT RemoveMenus( HMENU__ * ) = 0;
	/*0060*/ virtual HRESULT SetStatusText( WCHAR const * ) = 0;
	/*0068*/ virtual HRESULT EnableModeless( INT ) = 0;
	/*0070*/ virtual HRESULT TranslateAcceleratorW( tagMSG * , USHORT ) = 0;
	void IOleInPlaceFrame( IOleInPlaceFrame && );
	void IOleInPlaceFrame( IOleInPlaceFrame const & );
	void IOleInPlaceFrame();
	IOleInPlaceFrame & operator=( IOleInPlaceFrame && );
	IOleInPlaceFrame & operator=( IOleInPlaceFrame const & );
	/*0008*/
};

struct IOleInPlaceObject : IOleWindow {
	/*0028*/ virtual HRESULT InPlaceDeactivate() = 0;
	/*0030*/ virtual HRESULT UIDeactivate() = 0;
	/*0038*/ virtual HRESULT SetObjectRects( tagRECT const * , tagRECT const * ) = 0;
	/*0040*/ virtual HRESULT ReactivateAndUndo() = 0;
	void IOleInPlaceObject( IOleInPlaceObject && );
	void IOleInPlaceObject( IOleInPlaceObject const & );
	void IOleInPlaceObject();
	IOleInPlaceObject & operator=( IOleInPlaceObject && );
	IOleInPlaceObject & operator=( IOleInPlaceObject const & );
	/*0008*/
};

struct IOleInPlaceSite : IOleWindow {
	/*0028*/ virtual HRESULT CanInPlaceActivate() = 0;
	/*0030*/ virtual HRESULT OnInPlaceActivate() = 0;
	/*0038*/ virtual HRESULT OnUIActivate() = 0;
	/*0040*/ virtual HRESULT GetWindowContext( IOleInPlaceFrame * * , IOleInPlaceUIWindow * * , tagRECT * , tagRECT * , tagOIFI * ) = 0;
	/*0048*/ virtual HRESULT Scroll( tagSIZE ) = 0;
	/*0050*/ virtual HRESULT OnUIDeactivate( INT ) = 0;
	/*0058*/ virtual HRESULT OnInPlaceDeactivate() = 0;
	/*0060*/ virtual HRESULT DiscardUndoState() = 0;
	/*0068*/ virtual HRESULT DeactivateAndUndo() = 0;
	/*0070*/ virtual HRESULT OnPosRectChange( tagRECT const * ) = 0;
	void IOleInPlaceSite( IOleInPlaceSite && );
	void IOleInPlaceSite( IOleInPlaceSite const & );
	void IOleInPlaceSite();
	IOleInPlaceSite & operator=( IOleInPlaceSite && );
	IOleInPlaceSite & operator=( IOleInPlaceSite const & );
	/*0008*/
};

struct IOleInPlaceUIWindow : IOleWindow {
	/*0028*/ virtual HRESULT GetBorder( tagRECT * ) = 0;
	/*0030*/ virtual HRESULT RequestBorderSpace( tagRECT const * ) = 0;
	/*0038*/ virtual HRESULT SetBorderSpace( tagRECT const * ) = 0;
	/*0040*/ virtual HRESULT SetActiveObject( IOleInPlaceActiveObject * , WCHAR const * ) = 0;
	void IOleInPlaceUIWindow( IOleInPlaceUIWindow && );
	void IOleInPlaceUIWindow( IOleInPlaceUIWindow const & );
	void IOleInPlaceUIWindow();
	IOleInPlaceUIWindow & operator=( IOleInPlaceUIWindow && );
	IOleInPlaceUIWindow & operator=( IOleInPlaceUIWindow const & );
	/*0008*/
};

struct IOleItemContainer : IOleContainer {
	/*0030*/ virtual HRESULT GetObjectW( WCHAR * , ULONG , IBindCtx * , _GUID const & , void * * ) = 0;
	/*0038*/ virtual HRESULT GetObjectStorage( WCHAR * , IBindCtx * , _GUID const & , void * * ) = 0;
	/*0040*/ virtual HRESULT IsRunning( WCHAR * ) = 0;
	void IOleItemContainer( IOleItemContainer && );
	void IOleItemContainer( IOleItemContainer const & );
	void IOleItemContainer();
	IOleItemContainer & operator=( IOleItemContainer && );
	IOleItemContainer & operator=( IOleItemContainer const & );
	/*0008*/
};

struct IOleLink : IUnknown {
	/*0018*/ virtual HRESULT SetUpdateOptions( ULONG ) = 0;
	/*0020*/ virtual HRESULT GetUpdateOptions( ULONG * ) = 0;
	/*0028*/ virtual HRESULT SetSourceMoniker( IMoniker * , _GUID const & ) = 0;
	/*0030*/ virtual HRESULT GetSourceMoniker( IMoniker * * ) = 0;
	/*0038*/ virtual HRESULT SetSourceDisplayName( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT GetSourceDisplayName( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT BindToSource( ULONG , IBindCtx * ) = 0;
	/*0050*/ virtual HRESULT BindIfRunning() = 0;
	/*0058*/ virtual HRESULT GetBoundSource( IUnknown * * ) = 0;
	/*0060*/ virtual HRESULT UnbindSource() = 0;
	/*0068*/ virtual HRESULT Update( IBindCtx * ) = 0;
	void IOleLink( IOleLink && );
	void IOleLink( IOleLink const & );
	void IOleLink();
	IOleLink & operator=( IOleLink && );
	IOleLink & operator=( IOleLink const & );
	/*0008*/
};

struct IOleObject : IUnknown {
	/*0018*/ virtual HRESULT SetClientSite( IOleClientSite * ) = 0;
	/*0020*/ virtual HRESULT GetClientSite( IOleClientSite * * ) = 0;
	/*0028*/ virtual HRESULT SetHostNames( WCHAR const * , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT Close( ULONG ) = 0;
	/*0038*/ virtual HRESULT SetMoniker( ULONG , IMoniker * ) = 0;
	/*0040*/ virtual HRESULT GetMoniker( ULONG , ULONG , IMoniker * * ) = 0;
	/*0048*/ virtual HRESULT InitFromData( IDataObject * , INT , ULONG ) = 0;
	/*0050*/ virtual HRESULT GetClipboardData( ULONG , IDataObject * * ) = 0;
	/*0058*/ virtual HRESULT DoVerb( LONG , tagMSG * , IOleClientSite * , LONG , HWND__ * , tagRECT const * ) = 0;
	/*0060*/ virtual HRESULT EnumVerbs( IEnumOLEVERB * * ) = 0;
	/*0068*/ virtual HRESULT Update() = 0;
	/*0070*/ virtual HRESULT IsUpToDate() = 0;
	/*0078*/ virtual HRESULT GetUserClassID( _GUID * ) = 0;
	/*0080*/ virtual HRESULT GetUserType( ULONG , WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT SetExtent( ULONG , tagSIZE * ) = 0;
	/*0090*/ virtual HRESULT GetExtent( ULONG , tagSIZE * ) = 0;
	/*0098*/ virtual HRESULT Advise( IAdviseSink * , ULONG * ) = 0;
	/*00a0*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*00a8*/ virtual HRESULT EnumAdvise( IEnumSTATDATA * * ) = 0;
	/*00b0*/ virtual HRESULT GetMiscStatus( ULONG , ULONG * ) = 0;
	/*00b8*/ virtual HRESULT SetColorScheme( tagLOGPALETTE * ) = 0;
	void IOleObject( IOleObject && );
	void IOleObject( IOleObject const & );
	void IOleObject();
	IOleObject & operator=( IOleObject && );
	IOleObject & operator=( IOleObject const & );
	/*0008*/
};

struct IOleWindow : IUnknown {
	/*0018*/ virtual HRESULT GetWindow( HWND__ * * ) = 0;
	/*0020*/ virtual HRESULT ContextSensitiveHelp( INT ) = 0;
	void IOleWindow( IOleWindow && );
	void IOleWindow( IOleWindow const & );
	void IOleWindow();
	IOleWindow & operator=( IOleWindow && );
	IOleWindow & operator=( IOleWindow const & );
	/*0008*/
};

struct IOplockStorage : IUnknown {
	/*0018*/ virtual HRESULT CreateStorageEx( WCHAR const * , ULONG , ULONG , ULONG , _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT OpenStorageEx( WCHAR const * , ULONG , ULONG , ULONG , _GUID const & , void * * ) = 0;
	void IOplockStorage( IOplockStorage && );
	void IOplockStorage( IOplockStorage const & );
	void IOplockStorage();
	IOplockStorage & operator=( IOplockStorage && );
	IOplockStorage & operator=( IOplockStorage const & );
	/*0008*/
};

struct IPSFactoryBuffer {
	/*0000*/ IPSFactoryBufferVtbl * lpVtbl;
	/*0008*/
};

struct IPSFactoryBufferVtbl {
	/*0000*/ HRESULT (* QueryInterface)( IPSFactoryBuffer * , _GUID const * , void * * );
	/*0008*/ ULONG (* AddRef)( IPSFactoryBuffer * );
	/*0010*/ ULONG (* Release)( IPSFactoryBuffer * );
	/*0018*/ HRESULT (* CreateProxy)( IPSFactoryBuffer * , IUnknown * , _GUID const * , IRpcProxyBuffer * * , void * * );
	/*0020*/ HRESULT (* CreateStub)( IPSFactoryBuffer * , _GUID const * , IUnknown * , IRpcStubBuffer * * );
	/*0028*/
};

struct IParseDisplayName : IUnknown {
	/*0018*/ virtual HRESULT ParseDisplayName( IBindCtx * , WCHAR * , ULONG * , IMoniker * * ) = 0;
	void IParseDisplayName( IParseDisplayName && );
	void IParseDisplayName( IParseDisplayName const & );
	void IParseDisplayName();
	IParseDisplayName & operator=( IParseDisplayName && );
	IParseDisplayName & operator=( IParseDisplayName const & );
	/*0008*/
};

struct IPersist : IUnknown {
	/*0018*/ virtual HRESULT GetClassID( _GUID * ) = 0;
	void IPersist( IPersist && );
	void IPersist( IPersist const & );
	void IPersist();
	IPersist & operator=( IPersist && );
	IPersist & operator=( IPersist const & );
	/*0008*/
};

struct IPersistFile : IPersist {
	/*0020*/ virtual HRESULT IsDirty() = 0;
	/*0028*/ virtual HRESULT Load( WCHAR const * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Save( WCHAR const * , INT ) = 0;
	/*0038*/ virtual HRESULT SaveCompleted( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT GetCurFile( WCHAR * * ) = 0;
	void IPersistFile( IPersistFile && );
	void IPersistFile( IPersistFile const & );
	void IPersistFile();
	IPersistFile & operator=( IPersistFile && );
	IPersistFile & operator=( IPersistFile const & );
	/*0008*/
};

struct IPersistMoniker : IUnknown {
	/*0018*/ virtual HRESULT GetClassID( _GUID * ) = 0;
	/*0020*/ virtual HRESULT IsDirty() = 0;
	/*0028*/ virtual HRESULT Load( INT , IMoniker * , IBindCtx * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Save( IMoniker * , IBindCtx * , INT ) = 0;
	/*0038*/ virtual HRESULT SaveCompleted( IMoniker * , IBindCtx * ) = 0;
	/*0040*/ virtual HRESULT GetCurMoniker( IMoniker * * ) = 0;
	void IPersistMoniker( IPersistMoniker && );
	void IPersistMoniker( IPersistMoniker const & );
	void IPersistMoniker();
	IPersistMoniker & operator=( IPersistMoniker && );
	IPersistMoniker & operator=( IPersistMoniker const & );
	/*0008*/
};

struct IPersistStorage : IPersist {
	/*0020*/ virtual HRESULT IsDirty() = 0;
	/*0028*/ virtual HRESULT InitNew( IStorage * ) = 0;
	/*0030*/ virtual HRESULT Load( IStorage * ) = 0;
	/*0038*/ virtual HRESULT Save( IStorage * , INT ) = 0;
	/*0040*/ virtual HRESULT SaveCompleted( IStorage * ) = 0;
	/*0048*/ virtual HRESULT HandsOffStorage() = 0;
	void IPersistStorage( IPersistStorage && );
	void IPersistStorage( IPersistStorage const & );
	void IPersistStorage();
	IPersistStorage & operator=( IPersistStorage && );
	IPersistStorage & operator=( IPersistStorage const & );
	/*0008*/
};

struct IPersistStream : IPersist {
	/*0020*/ virtual HRESULT IsDirty() = 0;
	/*0028*/ virtual HRESULT Load( IStream * ) = 0;
	/*0030*/ virtual HRESULT Save( IStream * , INT ) = 0;
	/*0038*/ virtual HRESULT GetSizeMax( _ULARGE_INTEGER * ) = 0;
	void IPersistStream( IPersistStream && );
	void IPersistStream( IPersistStream const & );
	void IPersistStream();
	IPersistStream & operator=( IPersistStream && );
	IPersistStream & operator=( IPersistStream const & );
	/*0008*/
};

struct IPipeByte : IUnknown {
	/*0018*/ virtual HRESULT Pull( UCHAR * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Push( UCHAR * , ULONG ) = 0;
	void IPipeByte( IPipeByte && );
	void IPipeByte( IPipeByte const & );
	void IPipeByte();
	IPipeByte & operator=( IPipeByte && );
	IPipeByte & operator=( IPipeByte const & );
	/*0008*/
};

struct IPipeDouble : IUnknown {
	/*0018*/ virtual HRESULT Pull( double * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Push( double * , ULONG ) = 0;
	void IPipeDouble( IPipeDouble && );
	void IPipeDouble( IPipeDouble const & );
	void IPipeDouble();
	IPipeDouble & operator=( IPipeDouble && );
	IPipeDouble & operator=( IPipeDouble const & );
	/*0008*/
};

struct IPipeLong : IUnknown {
	/*0018*/ virtual HRESULT Pull( LONG * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Push( LONG * , ULONG ) = 0;
	void IPipeLong( IPipeLong && );
	void IPipeLong( IPipeLong const & );
	void IPipeLong();
	IPipeLong & operator=( IPipeLong && );
	IPipeLong & operator=( IPipeLong const & );
	/*0008*/
};

struct IProcessInitControl : IUnknown {
	/*0018*/ virtual HRESULT ResetInitializerTimeout( ULONG ) = 0;
	void IProcessInitControl( IProcessInitControl && );
	void IProcessInitControl( IProcessInitControl const & );
	void IProcessInitControl();
	IProcessInitControl & operator=( IProcessInitControl && );
	IProcessInitControl & operator=( IProcessInitControl const & );
	/*0008*/
};

struct IProcessLock : IUnknown {
	/*0018*/ virtual ULONG AddRefOnProcess() = 0;
	/*0020*/ virtual ULONG ReleaseRefOnProcess() = 0;
	void IProcessLock( IProcessLock && );
	void IProcessLock( IProcessLock const & );
	void IProcessLock();
	IProcessLock & operator=( IProcessLock && );
	IProcessLock & operator=( IProcessLock const & );
	/*0008*/
};

struct IProgressNotify : IUnknown {
	/*0018*/ virtual HRESULT OnProgress( ULONG , ULONG , INT , INT ) = 0;
	void IProgressNotify( IProgressNotify && );
	void IProgressNotify( IProgressNotify const & );
	void IProgressNotify();
	IProgressNotify & operator=( IProgressNotify && );
	IProgressNotify & operator=( IProgressNotify const & );
	/*0008*/
};

struct IPropertyBag : IUnknown {
	/*0018*/ virtual HRESULT Read( WCHAR const * , tagVARIANT * , IErrorLog * ) = 0;
	/*0020*/ virtual HRESULT Write( WCHAR const * , tagVARIANT * ) = 0;
	void IPropertyBag( IPropertyBag && );
	void IPropertyBag( IPropertyBag const & );
	void IPropertyBag();
	IPropertyBag & operator=( IPropertyBag && );
	IPropertyBag & operator=( IPropertyBag const & );
	/*0008*/
};

struct IPropertySetStorage : IUnknown {
	/*0018*/ virtual HRESULT Create( _GUID const & , _GUID const * , ULONG , ULONG , IPropertyStorage * * ) = 0;
	/*0020*/ virtual HRESULT Open( _GUID const & , ULONG , IPropertyStorage * * ) = 0;
	/*0028*/ virtual HRESULT Delete( _GUID const & ) = 0;
	/*0030*/ virtual HRESULT Enum( IEnumSTATPROPSETSTG * * ) = 0;
	void IPropertySetStorage( IPropertySetStorage && );
	void IPropertySetStorage( IPropertySetStorage const & );
	void IPropertySetStorage();
	IPropertySetStorage & operator=( IPropertySetStorage && );
	IPropertySetStorage & operator=( IPropertySetStorage const & );
	/*0008*/
};

struct IPropertyStorage : IUnknown {
	/*0018*/ virtual HRESULT ReadMultiple( ULONG , tagPROPSPEC const * , tagPROPVARIANT * ) = 0;
	/*0020*/ virtual HRESULT WriteMultiple( ULONG , tagPROPSPEC const * , tagPROPVARIANT const * , ULONG ) = 0;
	/*0028*/ virtual HRESULT DeleteMultiple( ULONG , tagPROPSPEC const * ) = 0;
	/*0030*/ virtual HRESULT ReadPropertyNames( ULONG , ULONG const * , WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT WritePropertyNames( ULONG , ULONG const * , WCHAR * const * ) = 0;
	/*0040*/ virtual HRESULT DeletePropertyNames( ULONG , ULONG const * ) = 0;
	/*0048*/ virtual HRESULT Commit( ULONG ) = 0;
	/*0050*/ virtual HRESULT Revert() = 0;
	/*0058*/ virtual HRESULT Enum( IEnumSTATPROPSTG * * ) = 0;
	/*0060*/ virtual HRESULT SetTimes( _FILETIME const * , _FILETIME const * , _FILETIME const * ) = 0;
	/*0068*/ virtual HRESULT SetClass( _GUID const & ) = 0;
	/*0070*/ virtual HRESULT Stat( tagSTATPROPSETSTG * ) = 0;
	void IPropertyStorage( IPropertyStorage && );
	void IPropertyStorage( IPropertyStorage const & );
	void IPropertyStorage();
	IPropertyStorage & operator=( IPropertyStorage && );
	IPropertyStorage & operator=( IPropertyStorage const & );
	/*0008*/
};

struct IROTData : IUnknown {
	/*0018*/ virtual HRESULT GetComparisonData( UCHAR * , ULONG , ULONG * ) = 0;
	void IROTData( IROTData && );
	void IROTData( IROTData const & );
	void IROTData();
	IROTData & operator=( IROTData && );
	IROTData & operator=( IROTData const & );
	/*0008*/
};

struct IRecordInfo : IUnknown {
	/*0018*/ virtual HRESULT RecordInit( void * ) = 0;
	/*0020*/ virtual HRESULT RecordClear( void * ) = 0;
	/*0028*/ virtual HRESULT RecordCopy( void * , void * ) = 0;
	/*0030*/ virtual HRESULT GetGuid( _GUID * ) = 0;
	/*0038*/ virtual HRESULT GetName( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT GetSize( ULONG * ) = 0;
	/*0048*/ virtual HRESULT GetTypeInfo( ITypeInfo * * ) = 0;
	/*0050*/ virtual HRESULT GetField( void * , WCHAR const * , tagVARIANT * ) = 0;
	/*0058*/ virtual HRESULT GetFieldNoCopy( void * , WCHAR const * , tagVARIANT * , void * * ) = 0;
	/*0060*/ virtual HRESULT PutField( ULONG , void * , WCHAR const * , tagVARIANT * ) = 0;
	/*0068*/ virtual HRESULT PutFieldNoCopy( ULONG , void * , WCHAR const * , tagVARIANT * ) = 0;
	/*0070*/ virtual HRESULT GetFieldNames( ULONG * , WCHAR * * ) = 0;
	/*0078*/ virtual INT IsMatchingType( IRecordInfo * ) = 0;
	/*0080*/ virtual void * RecordCreate() = 0;
	/*0088*/ virtual HRESULT RecordCreateCopy( void * , void * * ) = 0;
	/*0090*/ virtual HRESULT RecordDestroy( void * ) = 0;
	void IRecordInfo( IRecordInfo && );
	void IRecordInfo( IRecordInfo const & );
	void IRecordInfo();
	IRecordInfo & operator=( IRecordInfo && );
	IRecordInfo & operator=( IRecordInfo const & );
	/*0008*/
};

struct IReleaseMarshalBuffers : IUnknown {
	/*0018*/ virtual HRESULT ReleaseMarshalBuffer( tagRPCOLEMESSAGE * , ULONG , IUnknown * ) = 0;
	void IReleaseMarshalBuffers( IReleaseMarshalBuffers && );
	void IReleaseMarshalBuffers( IReleaseMarshalBuffers const & );
	void IReleaseMarshalBuffers();
	IReleaseMarshalBuffers & operator=( IReleaseMarshalBuffers && );
	IReleaseMarshalBuffers & operator=( IReleaseMarshalBuffers const & );
	/*0008*/
};

struct IRestrictedErrorInfo : IUnknown {
	/*0018*/ virtual HRESULT GetErrorDetails( WCHAR * * , HRESULT * , WCHAR * * , WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetReference( WCHAR * * ) = 0;
	void IRestrictedErrorInfo( IRestrictedErrorInfo && );
	void IRestrictedErrorInfo( IRestrictedErrorInfo const & );
	void IRestrictedErrorInfo();
	IRestrictedErrorInfo & operator=( IRestrictedErrorInfo && );
	IRestrictedErrorInfo & operator=( IRestrictedErrorInfo const & );
	/*0008*/
};

struct IRootStorage : IUnknown {
	/*0018*/ virtual HRESULT SwitchToFile( WCHAR * ) = 0;
	void IRootStorage( IRootStorage && );
	void IRootStorage( IRootStorage const & );
	void IRootStorage();
	IRootStorage & operator=( IRootStorage && );
	IRootStorage & operator=( IRootStorage const & );
	/*0008*/
};

struct IRpcChannelBuffer {
	/*0000*/ IRpcChannelBufferVtbl * lpVtbl;
	/*0008*/
};

struct IRpcChannelBuffer2 : IRpcChannelBuffer {
	/*0040*/ virtual HRESULT GetProtocolVersion( ULONG * ) = 0;
	void IRpcChannelBuffer2( IRpcChannelBuffer2 && );
	void IRpcChannelBuffer2( IRpcChannelBuffer2 const & );
	void IRpcChannelBuffer2();
	IRpcChannelBuffer2 & operator=( IRpcChannelBuffer2 && );
	IRpcChannelBuffer2 & operator=( IRpcChannelBuffer2 const & );
	/*0008*/
};

struct IRpcChannelBuffer3 : IRpcChannelBuffer2 {
	/*0048*/ virtual HRESULT Send( tagRPCOLEMESSAGE * , ULONG * ) = 0;
	/*0050*/ virtual HRESULT Receive( tagRPCOLEMESSAGE * , ULONG , ULONG * ) = 0;
	/*0058*/ virtual HRESULT Cancel( tagRPCOLEMESSAGE * ) = 0;
	/*0060*/ virtual HRESULT GetCallContext( tagRPCOLEMESSAGE * , _GUID const & , void * * ) = 0;
	/*0068*/ virtual HRESULT GetDestCtxEx( tagRPCOLEMESSAGE * , ULONG * , void * * ) = 0;
	/*0070*/ virtual HRESULT GetState( tagRPCOLEMESSAGE * , ULONG * ) = 0;
	/*0078*/ virtual HRESULT RegisterAsync( tagRPCOLEMESSAGE * , IAsyncManager * ) = 0;
	void IRpcChannelBuffer3( IRpcChannelBuffer3 && );
	void IRpcChannelBuffer3( IRpcChannelBuffer3 const & );
	void IRpcChannelBuffer3();
	IRpcChannelBuffer3 & operator=( IRpcChannelBuffer3 && );
	IRpcChannelBuffer3 & operator=( IRpcChannelBuffer3 const & );
	/*0008*/
};

struct IRpcChannelBufferVtbl {
	/*0000*/ HRESULT (* QueryInterface)( IRpcChannelBuffer * , _GUID const * , void * * );
	/*0008*/ ULONG (* AddRef)( IRpcChannelBuffer * );
	/*0010*/ ULONG (* Release)( IRpcChannelBuffer * );
	/*0018*/ HRESULT (* GetBuffer)( IRpcChannelBuffer * , tagRPCOLEMESSAGE * , _GUID const * );
	/*0020*/ HRESULT (* SendReceive)( IRpcChannelBuffer * , tagRPCOLEMESSAGE * , ULONG * );
	/*0028*/ HRESULT (* FreeBuffer)( IRpcChannelBuffer * , tagRPCOLEMESSAGE * );
	/*0030*/ HRESULT (* GetDestCtx)( IRpcChannelBuffer * , ULONG * , void * * );
	/*0038*/ HRESULT (* IsConnected)( IRpcChannelBuffer * );
	/*0040*/
};

struct IRpcHelper : IUnknown {
	/*0018*/ virtual HRESULT GetDCOMProtocolVersion( ULONG * ) = 0;
	/*0020*/ virtual HRESULT GetIIDFromOBJREF( void * , _GUID * * ) = 0;
	void IRpcHelper( IRpcHelper && );
	void IRpcHelper( IRpcHelper const & );
	void IRpcHelper();
	IRpcHelper & operator=( IRpcHelper && );
	IRpcHelper & operator=( IRpcHelper const & );
	/*0008*/
};

struct IRpcOptions : IUnknown {
	/*0018*/ virtual HRESULT Set( IUnknown * , tagRPCOPT_PROPERTIES , ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT Query( IUnknown * , tagRPCOPT_PROPERTIES , ULONGLONG * ) = 0;
	void IRpcOptions( IRpcOptions && );
	void IRpcOptions( IRpcOptions const & );
	void IRpcOptions();
	IRpcOptions & operator=( IRpcOptions && );
	IRpcOptions & operator=( IRpcOptions const & );
	/*0008*/
};

struct IRpcProxyBuffer {
	/*0000*/ IRpcProxyBufferVtbl * lpVtbl;
	/*0008*/
};

struct IRpcProxyBufferVtbl {
	/*0000*/ HRESULT (* QueryInterface)( IRpcProxyBuffer * , _GUID const * , void * * );
	/*0008*/ ULONG (* AddRef)( IRpcProxyBuffer * );
	/*0010*/ ULONG (* Release)( IRpcProxyBuffer * );
	/*0018*/ HRESULT (* Connect)( IRpcProxyBuffer * , IRpcChannelBuffer * );
	/*0020*/ void (* Disconnect)( IRpcProxyBuffer * );
	/*0028*/
};

struct IRpcStubBuffer {
	/*0000*/ IRpcStubBufferVtbl * lpVtbl;
	/*0008*/
};

struct IRpcStubBufferVtbl {
	/*0000*/ HRESULT (* QueryInterface)( IRpcStubBuffer * , _GUID const * , void * * );
	/*0008*/ ULONG (* AddRef)( IRpcStubBuffer * );
	/*0010*/ ULONG (* Release)( IRpcStubBuffer * );
	/*0018*/ HRESULT (* Connect)( IRpcStubBuffer * , IUnknown * );
	/*0020*/ void (* Disconnect)( IRpcStubBuffer * );
	/*0028*/ HRESULT (* Invoke)( IRpcStubBuffer * , tagRPCOLEMESSAGE * , IRpcChannelBuffer * );
	/*0030*/ IRpcStubBuffer * (* IsIIDSupported)( IRpcStubBuffer * , _GUID const * );
	/*0038*/ ULONG (* CountRefs)( IRpcStubBuffer * );
	/*0040*/ HRESULT (* DebugServerQueryInterface)( IRpcStubBuffer * , void * * );
	/*0048*/ void (* DebugServerRelease)( IRpcStubBuffer * , void * );
	/*0050*/
};

struct IRpcSyntaxNegotiate : IUnknown {
	/*0018*/ virtual HRESULT NegotiateSyntax( tagRPCOLEMESSAGE * ) = 0;
	void IRpcSyntaxNegotiate( IRpcSyntaxNegotiate && );
	void IRpcSyntaxNegotiate( IRpcSyntaxNegotiate const & );
	void IRpcSyntaxNegotiate();
	IRpcSyntaxNegotiate & operator=( IRpcSyntaxNegotiate && );
	IRpcSyntaxNegotiate & operator=( IRpcSyntaxNegotiate const & );
	/*0008*/
};

struct IRunnableObject : IUnknown {
	/*0018*/ virtual HRESULT GetRunningClass( _GUID * ) = 0;
	/*0020*/ virtual HRESULT Run( IBindCtx * ) = 0;
	/*0028*/ virtual INT IsRunning() = 0;
	/*0030*/ virtual HRESULT LockRunning( INT , INT ) = 0;
	/*0038*/ virtual HRESULT SetContainedObject( INT ) = 0;
	void IRunnableObject( IRunnableObject && );
	void IRunnableObject( IRunnableObject const & );
	void IRunnableObject();
	IRunnableObject & operator=( IRunnableObject && );
	IRunnableObject & operator=( IRunnableObject const & );
	/*0008*/
};

struct IRunningObjectTable : IUnknown {
	/*0018*/ virtual HRESULT Register( ULONG , IUnknown * , IMoniker * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Revoke( ULONG ) = 0;
	/*0028*/ virtual HRESULT IsRunning( IMoniker * ) = 0;
	/*0030*/ virtual HRESULT GetObjectW( IMoniker * , IUnknown * * ) = 0;
	/*0038*/ virtual HRESULT NoteChangeTime( ULONG , _FILETIME * ) = 0;
	/*0040*/ virtual HRESULT GetTimeOfLastChange( IMoniker * , _FILETIME * ) = 0;
	/*0048*/ virtual HRESULT EnumRunning( IEnumMoniker * * ) = 0;
	void IRunningObjectTable( IRunningObjectTable && );
	void IRunningObjectTable( IRunningObjectTable const & );
	void IRunningObjectTable();
	IRunningObjectTable & operator=( IRunningObjectTable && );
	IRunningObjectTable & operator=( IRunningObjectTable const & );
	/*0008*/
};

enum ISA_AVAILABILITY {
	__ISA_AVAILABLE_X86 = 0x0,
	__ISA_AVAILABLE_SSE2 = 0x1,
	__ISA_AVAILABLE_SSE42 = 0x2,
	__ISA_AVAILABLE_AVX = 0x3,
	__ISA_AVAILABLE_ENFSTRG = 0x4,
	__ISA_AVAILABLE_AVX2 = 0x5,
	__ISA_AVAILABLE_AVX512 = 0x6,
	__ISA_AVAILABLE_ARMNT = 0x0,
	__ISA_AVAILABLE_NEON = 0x1,
	__ISA_AVAILABLE_NEON_ARM64 = 0x2
};

struct ISequentialStream : IUnknown {
	/*0018*/ virtual HRESULT Read( void * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Write( void const * , ULONG , ULONG * ) = 0;
	void ISequentialStream( ISequentialStream && );
	void ISequentialStream( ISequentialStream const & );
	void ISequentialStream();
	ISequentialStream & operator=( ISequentialStream && );
	ISequentialStream & operator=( ISequentialStream const & );
	/*0008*/
};

struct IServerSecurity : IUnknown {
	/*0018*/ virtual HRESULT QueryBlanket( ULONG * , ULONG * , WCHAR * * , ULONG * , ULONG * , void * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT ImpersonateClient() = 0;
	/*0028*/ virtual HRESULT RevertToSelf() = 0;
	/*0030*/ virtual INT IsImpersonating() = 0;
	void IServerSecurity( IServerSecurity && );
	void IServerSecurity( IServerSecurity const & );
	void IServerSecurity();
	IServerSecurity & operator=( IServerSecurity && );
	IServerSecurity & operator=( IServerSecurity const & );
	/*0008*/
};

struct IServiceProvider : IUnknown {
	/*0018*/ virtual HRESULT QueryService( _GUID const & , _GUID const & , void * * ) = 0;
	void IServiceProvider( IServiceProvider && );
	void IServiceProvider( IServiceProvider const & );
	void IServiceProvider();
	IServiceProvider & operator=( IServiceProvider && );
	IServiceProvider & operator=( IServiceProvider const & );
	/*0008*/
};

struct ISoftDistExt : IUnknown {
	/*0018*/ virtual HRESULT ProcessSoftDist( WCHAR const * , IXMLElement * , _tagSOFTDISTINFO * ) = 0;
	/*0020*/ virtual HRESULT GetFirstCodeBase( WCHAR * * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT GetNextCodeBase( WCHAR * * , ULONG * ) = 0;
	/*0030*/ virtual HRESULT AsyncInstallDistributionUnit( IBindCtx * , void * , ULONG , _tagCODEBASEHOLD * ) = 0;
	void ISoftDistExt( ISoftDistExt && );
	void ISoftDistExt( ISoftDistExt const & );
	void ISoftDistExt();
	ISoftDistExt & operator=( ISoftDistExt && );
	ISoftDistExt & operator=( ISoftDistExt const & );
	/*0008*/
};

struct IStdMarshalInfo : IUnknown {
	/*0018*/ virtual HRESULT GetClassForHandler( ULONG , void * , _GUID * ) = 0;
	void IStdMarshalInfo( IStdMarshalInfo && );
	void IStdMarshalInfo( IStdMarshalInfo const & );
	void IStdMarshalInfo();
	IStdMarshalInfo & operator=( IStdMarshalInfo && );
	IStdMarshalInfo & operator=( IStdMarshalInfo const & );
	/*0008*/
};

struct IStorage : IUnknown {
	/*0018*/ virtual HRESULT CreateStream( WCHAR const * , ULONG , ULONG , ULONG , IStream * * ) = 0;
	/*0020*/ virtual HRESULT OpenStream( WCHAR const * , void * , ULONG , ULONG , IStream * * ) = 0;
	/*0028*/ virtual HRESULT CreateStorage( WCHAR const * , ULONG , ULONG , ULONG , IStorage * * ) = 0;
	/*0030*/ virtual HRESULT OpenStorage( WCHAR const * , IStorage * , ULONG , WCHAR * * , ULONG , IStorage * * ) = 0;
	/*0038*/ virtual HRESULT CopyTo( ULONG , _GUID const * , WCHAR * * , IStorage * ) = 0;
	/*0040*/ virtual HRESULT MoveElementTo( WCHAR const * , IStorage * , WCHAR const * , ULONG ) = 0;
	/*0048*/ virtual HRESULT Commit( ULONG ) = 0;
	/*0050*/ virtual HRESULT Revert() = 0;
	/*0058*/ virtual HRESULT EnumElements( ULONG , void * , ULONG , IEnumSTATSTG * * ) = 0;
	/*0060*/ virtual HRESULT DestroyElement( WCHAR const * ) = 0;
	/*0068*/ virtual HRESULT RenameElement( WCHAR const * , WCHAR const * ) = 0;
	/*0070*/ virtual HRESULT SetElementTimes( WCHAR const * , _FILETIME const * , _FILETIME const * , _FILETIME const * ) = 0;
	/*0078*/ virtual HRESULT SetClass( _GUID const & ) = 0;
	/*0080*/ virtual HRESULT SetStateBits( ULONG , ULONG ) = 0;
	/*0088*/ virtual HRESULT Stat( tagSTATSTG * , ULONG ) = 0;
	void IStorage( IStorage && );
	void IStorage( IStorage const & );
	void IStorage();
	IStorage & operator=( IStorage && );
	IStorage & operator=( IStorage const & );
	/*0008*/
};

struct IStream : ISequentialStream {
	/*0028*/ virtual HRESULT Seek( _LARGE_INTEGER , ULONG , _ULARGE_INTEGER * ) = 0;
	/*0030*/ virtual HRESULT SetSize( _ULARGE_INTEGER ) = 0;
	/*0038*/ virtual HRESULT CopyTo( IStream * , _ULARGE_INTEGER , _ULARGE_INTEGER * , _ULARGE_INTEGER * ) = 0;
	/*0040*/ virtual HRESULT Commit( ULONG ) = 0;
	/*0048*/ virtual HRESULT Revert() = 0;
	/*0050*/ virtual HRESULT LockRegion( _ULARGE_INTEGER , _ULARGE_INTEGER , ULONG ) = 0;
	/*0058*/ virtual HRESULT UnlockRegion( _ULARGE_INTEGER , _ULARGE_INTEGER , ULONG ) = 0;
	/*0060*/ virtual HRESULT Stat( tagSTATSTG * , ULONG ) = 0;
	/*0068*/ virtual HRESULT Clone( IStream * * ) = 0;
	void IStream( IStream && );
	void IStream( IStream const & );
	void IStream();
	IStream & operator=( IStream && );
	IStream & operator=( IStream const & );
	/*0008*/
};

struct ISupportAllowLowerTrustActivation : IUnknown {
	void ISupportAllowLowerTrustActivation( ISupportAllowLowerTrustActivation && );
	void ISupportAllowLowerTrustActivation( ISupportAllowLowerTrustActivation const & );
	void ISupportAllowLowerTrustActivation();
	ISupportAllowLowerTrustActivation & operator=( ISupportAllowLowerTrustActivation && );
	ISupportAllowLowerTrustActivation & operator=( ISupportAllowLowerTrustActivation const & );
	/*0008*/
};

struct ISupportErrorInfo : IUnknown {
	/*0018*/ virtual HRESULT InterfaceSupportsErrorInfo( _GUID const & ) = 0;
	void ISupportErrorInfo( ISupportErrorInfo && );
	void ISupportErrorInfo( ISupportErrorInfo const & );
	void ISupportErrorInfo();
	ISupportErrorInfo & operator=( ISupportErrorInfo && );
	ISupportErrorInfo & operator=( ISupportErrorInfo const & );
	/*0008*/
};

struct ISurrogate : IUnknown {
	/*0018*/ virtual HRESULT LoadDllServer( _GUID const & ) = 0;
	/*0020*/ virtual HRESULT FreeSurrogate() = 0;
	void ISurrogate( ISurrogate && );
	void ISurrogate( ISurrogate const & );
	void ISurrogate();
	ISurrogate & operator=( ISurrogate && );
	ISurrogate & operator=( ISurrogate const & );
	/*0008*/
};

struct ISurrogateService : IUnknown {
	/*0018*/ virtual HRESULT Init( _GUID const & , IProcessLock * , INT * ) = 0;
	/*0020*/ virtual HRESULT ApplicationLaunch( _GUID const & , tagApplicationType ) = 0;
	/*0028*/ virtual HRESULT ApplicationFree( _GUID const & ) = 0;
	/*0030*/ virtual HRESULT CatalogRefresh( ULONG ) = 0;
	/*0038*/ virtual HRESULT ProcessShutdown( tagShutdownType ) = 0;
	void ISurrogateService( ISurrogateService && );
	void ISurrogateService( ISurrogateService const & );
	void ISurrogateService();
	ISurrogateService & operator=( ISurrogateService && );
	ISurrogateService & operator=( ISurrogateService const & );
	/*0008*/
};

struct ISynchronize : IUnknown {
	/*0018*/ virtual HRESULT Wait( ULONG , ULONG ) = 0;
	/*0020*/ virtual HRESULT Signal() = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	void ISynchronize( ISynchronize && );
	void ISynchronize( ISynchronize const & );
	void ISynchronize();
	ISynchronize & operator=( ISynchronize && );
	ISynchronize & operator=( ISynchronize const & );
	/*0008*/
};

struct ISynchronizeContainer : IUnknown {
	/*0018*/ virtual HRESULT AddSynchronize( ISynchronize * ) = 0;
	/*0020*/ virtual HRESULT WaitMultiple( ULONG , ULONG , ISynchronize * * ) = 0;
	void ISynchronizeContainer( ISynchronizeContainer && );
	void ISynchronizeContainer( ISynchronizeContainer const & );
	void ISynchronizeContainer();
	ISynchronizeContainer & operator=( ISynchronizeContainer && );
	ISynchronizeContainer & operator=( ISynchronizeContainer const & );
	/*0008*/
};

struct ISynchronizeEvent : ISynchronizeHandle {
	/*0020*/ virtual HRESULT SetEventHandle( void * * ) = 0;
	void ISynchronizeEvent( ISynchronizeEvent && );
	void ISynchronizeEvent( ISynchronizeEvent const & );
	void ISynchronizeEvent();
	ISynchronizeEvent & operator=( ISynchronizeEvent && );
	ISynchronizeEvent & operator=( ISynchronizeEvent const & );
	/*0008*/
};

struct ISynchronizeHandle : IUnknown {
	/*0018*/ virtual HRESULT GetHandle( void * * ) = 0;
	void ISynchronizeHandle( ISynchronizeHandle && );
	void ISynchronizeHandle( ISynchronizeHandle const & );
	void ISynchronizeHandle();
	ISynchronizeHandle & operator=( ISynchronizeHandle && );
	ISynchronizeHandle & operator=( ISynchronizeHandle const & );
	/*0008*/
};

struct ISynchronizeMutex : ISynchronize {
	/*0030*/ virtual HRESULT ReleaseMutex() = 0;
	void ISynchronizeMutex( ISynchronizeMutex && );
	void ISynchronizeMutex( ISynchronizeMutex const & );
	void ISynchronizeMutex();
	ISynchronizeMutex & operator=( ISynchronizeMutex && );
	ISynchronizeMutex & operator=( ISynchronizeMutex const & );
	/*0008*/
};

struct IThumbnailExtractor : IUnknown {
	/*0018*/ virtual HRESULT ExtractThumbnail( IStorage * , ULONG , ULONG , ULONG * , ULONG * , HBITMAP__ * * ) = 0;
	/*0020*/ virtual HRESULT OnFileUpdated( IStorage * ) = 0;
	void IThumbnailExtractor( IThumbnailExtractor && );
	void IThumbnailExtractor( IThumbnailExtractor const & );
	void IThumbnailExtractor();
	IThumbnailExtractor & operator=( IThumbnailExtractor && );
	IThumbnailExtractor & operator=( IThumbnailExtractor const & );
	/*0008*/
};

struct ITimeAndNoticeControl : IUnknown {
	/*0018*/ virtual HRESULT SuppressChanges( ULONG , ULONG ) = 0;
	void ITimeAndNoticeControl( ITimeAndNoticeControl && );
	void ITimeAndNoticeControl( ITimeAndNoticeControl const & );
	void ITimeAndNoticeControl();
	ITimeAndNoticeControl & operator=( ITimeAndNoticeControl && );
	ITimeAndNoticeControl & operator=( ITimeAndNoticeControl const & );
	/*0008*/
};

struct ITypeChangeEvents : IUnknown {
	/*0018*/ virtual HRESULT RequestTypeChange( tagCHANGEKIND , ITypeInfo * , WCHAR * , INT * ) = 0;
	/*0020*/ virtual HRESULT AfterTypeChange( tagCHANGEKIND , ITypeInfo * , WCHAR * ) = 0;
	void ITypeChangeEvents( ITypeChangeEvents && );
	void ITypeChangeEvents( ITypeChangeEvents const & );
	void ITypeChangeEvents();
	ITypeChangeEvents & operator=( ITypeChangeEvents && );
	ITypeChangeEvents & operator=( ITypeChangeEvents const & );
	/*0008*/
};

struct ITypeComp : IUnknown {
	/*0018*/ virtual HRESULT Bind( WCHAR * , ULONG , USHORT , ITypeInfo * * , tagDESCKIND * , tagBINDPTR * ) = 0;
	/*0020*/ virtual HRESULT BindType( WCHAR * , ULONG , ITypeInfo * * , ITypeComp * * ) = 0;
	void ITypeComp( ITypeComp && );
	void ITypeComp( ITypeComp const & );
	void ITypeComp();
	ITypeComp & operator=( ITypeComp && );
	ITypeComp & operator=( ITypeComp const & );
	/*0008*/
};

struct ITypeFactory : IUnknown {
	/*0018*/ virtual HRESULT CreateFromTypeInfo( ITypeInfo * , _GUID const & , IUnknown * * ) = 0;
	void ITypeFactory( ITypeFactory && );
	void ITypeFactory( ITypeFactory const & );
	void ITypeFactory();
	ITypeFactory & operator=( ITypeFactory && );
	ITypeFactory & operator=( ITypeFactory const & );
	/*0008*/
};

struct ITypeInfo : IUnknown {
	/*0018*/ virtual HRESULT GetTypeAttr( tagTYPEATTR * * ) = 0;
	/*0020*/ virtual HRESULT GetTypeComp( ITypeComp * * ) = 0;
	/*0028*/ virtual HRESULT GetFuncDesc( UINT , tagFUNCDESC * * ) = 0;
	/*0030*/ virtual HRESULT GetVarDesc( UINT , tagVARDESC * * ) = 0;
	/*0038*/ virtual HRESULT GetNames( LONG , WCHAR * * , UINT , UINT * ) = 0;
	/*0040*/ virtual HRESULT GetRefTypeOfImplType( UINT , ULONG * ) = 0;
	/*0048*/ virtual HRESULT GetImplTypeFlags( UINT , INT * ) = 0;
	/*0050*/ virtual HRESULT GetIDsOfNames( WCHAR * * , UINT , LONG * ) = 0;
	/*0058*/ virtual HRESULT Invoke( void * , LONG , USHORT , tagDISPPARAMS * , tagVARIANT * , tagEXCEPINFO * , UINT * ) = 0;
	/*0060*/ virtual HRESULT GetDocumentation( LONG , WCHAR * * , WCHAR * * , ULONG * , WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT GetDllEntry( LONG , tagINVOKEKIND , WCHAR * * , WCHAR * * , USHORT * ) = 0;
	/*0070*/ virtual HRESULT GetRefTypeInfo( ULONG , ITypeInfo * * ) = 0;
	/*0078*/ virtual HRESULT AddressOfMember( LONG , tagINVOKEKIND , void * * ) = 0;
	/*0080*/ virtual HRESULT CreateInstance( IUnknown * , _GUID const & , void * * ) = 0;
	/*0088*/ virtual HRESULT GetMops( LONG , WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT GetContainingTypeLib( ITypeLib * * , UINT * ) = 0;
	/*0098*/ virtual void ReleaseTypeAttr( tagTYPEATTR * ) = 0;
	/*00a0*/ virtual void ReleaseFuncDesc( tagFUNCDESC * ) = 0;
	/*00a8*/ virtual void ReleaseVarDesc( tagVARDESC * ) = 0;
	void ITypeInfo( ITypeInfo && );
	void ITypeInfo( ITypeInfo const & );
	void ITypeInfo();
	ITypeInfo & operator=( ITypeInfo && );
	ITypeInfo & operator=( ITypeInfo const & );
	/*0008*/
};

struct ITypeInfo2 : ITypeInfo {
	/*00b0*/ virtual HRESULT GetTypeKind( tagTYPEKIND * ) = 0;
	/*00b8*/ virtual HRESULT GetTypeFlags( ULONG * ) = 0;
	/*00c0*/ virtual HRESULT GetFuncIndexOfMemId( LONG , tagINVOKEKIND , UINT * ) = 0;
	/*00c8*/ virtual HRESULT GetVarIndexOfMemId( LONG , UINT * ) = 0;
	/*00d0*/ virtual HRESULT GetCustData( _GUID const & , tagVARIANT * ) = 0;
	/*00d8*/ virtual HRESULT GetFuncCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*00e0*/ virtual HRESULT GetParamCustData( UINT , UINT , _GUID const & , tagVARIANT * ) = 0;
	/*00e8*/ virtual HRESULT GetVarCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*00f0*/ virtual HRESULT GetImplTypeCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*00f8*/ virtual HRESULT GetDocumentation2( LONG , ULONG , WCHAR * * , ULONG * , WCHAR * * ) = 0;
	/*0100*/ virtual HRESULT GetAllCustData( tagCUSTDATA * ) = 0;
	/*0108*/ virtual HRESULT GetAllFuncCustData( UINT , tagCUSTDATA * ) = 0;
	/*0110*/ virtual HRESULT GetAllParamCustData( UINT , UINT , tagCUSTDATA * ) = 0;
	/*0118*/ virtual HRESULT GetAllVarCustData( UINT , tagCUSTDATA * ) = 0;
	/*0120*/ virtual HRESULT GetAllImplTypeCustData( UINT , tagCUSTDATA * ) = 0;
	void ITypeInfo2( ITypeInfo2 && );
	void ITypeInfo2( ITypeInfo2 const & );
	void ITypeInfo2();
	ITypeInfo2 & operator=( ITypeInfo2 && );
	ITypeInfo2 & operator=( ITypeInfo2 const & );
	/*0008*/
};

struct ITypeLib : IUnknown {
	/*0018*/ virtual UINT GetTypeInfoCount() = 0;
	/*0020*/ virtual HRESULT GetTypeInfo( UINT , ITypeInfo * * ) = 0;
	/*0028*/ virtual HRESULT GetTypeInfoType( UINT , tagTYPEKIND * ) = 0;
	/*0030*/ virtual HRESULT GetTypeInfoOfGuid( _GUID const & , ITypeInfo * * ) = 0;
	/*0038*/ virtual HRESULT GetLibAttr( tagTLIBATTR * * ) = 0;
	/*0040*/ virtual HRESULT GetTypeComp( ITypeComp * * ) = 0;
	/*0048*/ virtual HRESULT GetDocumentation( INT , WCHAR * * , WCHAR * * , ULONG * , WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT IsName( WCHAR * , ULONG , INT * ) = 0;
	/*0058*/ virtual HRESULT FindName( WCHAR * , ULONG , ITypeInfo * * , LONG * , USHORT * ) = 0;
	/*0060*/ virtual void ReleaseTLibAttr( tagTLIBATTR * ) = 0;
	void ITypeLib( ITypeLib && );
	void ITypeLib( ITypeLib const & );
	void ITypeLib();
	ITypeLib & operator=( ITypeLib && );
	ITypeLib & operator=( ITypeLib const & );
	/*0008*/
};

struct ITypeLib2 : ITypeLib {
	/*0068*/ virtual HRESULT GetCustData( _GUID const & , tagVARIANT * ) = 0;
	/*0070*/ virtual HRESULT GetLibStatistics( ULONG * , ULONG * ) = 0;
	/*0078*/ virtual HRESULT GetDocumentation2( INT , ULONG , WCHAR * * , ULONG * , WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT GetAllCustData( tagCUSTDATA * ) = 0;
	void ITypeLib2( ITypeLib2 && );
	void ITypeLib2( ITypeLib2 const & );
	void ITypeLib2();
	ITypeLib2 & operator=( ITypeLib2 && );
	ITypeLib2 & operator=( ITypeLib2 const & );
	/*0008*/
};

struct ITypeLibRegistration : IUnknown {
	/*0018*/ virtual HRESULT GetGuid( _GUID * ) = 0;
	/*0020*/ virtual HRESULT GetVersion( WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT GetLcid( ULONG * ) = 0;
	/*0030*/ virtual HRESULT GetWin32Path( WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT GetWin64Path( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT GetDisplayName( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT GetFlags( ULONG * ) = 0;
	/*0050*/ virtual HRESULT GetHelpDir( WCHAR * * ) = 0;
	void ITypeLibRegistration( ITypeLibRegistration && );
	void ITypeLibRegistration( ITypeLibRegistration const & );
	void ITypeLibRegistration();
	ITypeLibRegistration & operator=( ITypeLibRegistration && );
	ITypeLibRegistration & operator=( ITypeLibRegistration const & );
	/*0008*/
};

struct ITypeLibRegistrationReader : IUnknown {
	/*0018*/ virtual HRESULT EnumTypeLibRegistrations( IEnumUnknown * * ) = 0;
	void ITypeLibRegistrationReader( ITypeLibRegistrationReader && );
	void ITypeLibRegistrationReader( ITypeLibRegistrationReader const & );
	void ITypeLibRegistrationReader();
	ITypeLibRegistrationReader & operator=( ITypeLibRegistrationReader && );
	ITypeLibRegistrationReader & operator=( ITypeLibRegistrationReader const & );
	/*0008*/
};

struct ITypeMarshal : IUnknown {
	/*0018*/ virtual HRESULT Size( void * , ULONG , void * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Marshal( void * , ULONG , void * , ULONG , UCHAR * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Unmarshal( void * , ULONG , ULONG , UCHAR * , ULONG * ) = 0;
	/*0030*/ virtual HRESULT Free( void * ) = 0;
	void ITypeMarshal( ITypeMarshal && );
	void ITypeMarshal( ITypeMarshal const & );
	void ITypeMarshal();
	ITypeMarshal & operator=( ITypeMarshal && );
	ITypeMarshal & operator=( ITypeMarshal const & );
	/*0008*/
};

struct IUnknown {
	/*0000*/ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*0008*/ virtual ULONG AddRef() = 0;
	/*0010*/ virtual ULONG Release() = 0;
	void IUnknown( IUnknown && );
	void IUnknown( IUnknown const & );
	void IUnknown();
	IUnknown & operator=( IUnknown && );
	IUnknown & operator=( IUnknown const & );
	/*0008*/
};

struct IUnknownVtbl {
	/*0000*/ HRESULT (* QueryInterface)( IUnknown * , _GUID const * , void * * );
	/*0008*/ ULONG (* AddRef)( IUnknown * );
	/*0010*/ ULONG (* Release)( IUnknown * );
	/*0018*/
};

struct IUri : IUnknown {
	/*0018*/ virtual HRESULT GetPropertyBSTR( __MIDL_IUri_0001 , WCHAR * * , ULONG ) = 0;
	/*0020*/ virtual HRESULT GetPropertyLength( __MIDL_IUri_0001 , ULONG * , ULONG ) = 0;
	/*0028*/ virtual HRESULT GetPropertyDWORD( __MIDL_IUri_0001 , ULONG * , ULONG ) = 0;
	/*0030*/ virtual HRESULT HasProperty( __MIDL_IUri_0001 , INT * ) = 0;
	/*0038*/ virtual HRESULT GetAbsoluteUri( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT GetAuthority( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT GetDisplayUri( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT GetDomain( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT GetExtension( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT GetFragment( WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT GetHost( WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT GetPassword( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT GetPath( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT GetPathAndQuery( WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT GetQuery( WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT GetRawUri( WCHAR * * ) = 0;
	/*0098*/ virtual HRESULT GetSchemeName( WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT GetUserInfo( WCHAR * * ) = 0;
	/*00a8*/ virtual HRESULT GetUserNameW( WCHAR * * ) = 0;
	/*00b0*/ virtual HRESULT GetHostType( ULONG * ) = 0;
	/*00b8*/ virtual HRESULT GetPort( ULONG * ) = 0;
	/*00c0*/ virtual HRESULT GetScheme( ULONG * ) = 0;
	/*00c8*/ virtual HRESULT GetZone( ULONG * ) = 0;
	/*00d0*/ virtual HRESULT GetProperties( ULONG * ) = 0;
	/*00d8*/ virtual HRESULT IsEqual( IUri * , INT * ) = 0;
	void IUri( IUri && );
	void IUri( IUri const & );
	void IUri();
	IUri & operator=( IUri && );
	IUri & operator=( IUri const & );
	/*0008*/
};

struct IUriBuilder : IUnknown {
	/*0018*/ virtual HRESULT CreateUriSimple( ULONG , ULONGLONG , IUri * * ) = 0;
	/*0020*/ virtual HRESULT CreateUri( ULONG , ULONG , ULONGLONG , IUri * * ) = 0;
	/*0028*/ virtual HRESULT CreateUriWithFlags( ULONG , ULONG , ULONG , ULONGLONG , IUri * * ) = 0;
	/*0030*/ virtual HRESULT GetIUri( IUri * * ) = 0;
	/*0038*/ virtual HRESULT SetIUri( IUri * ) = 0;
	/*0040*/ virtual HRESULT GetFragment( ULONG * , WCHAR const * * ) = 0;
	/*0048*/ virtual HRESULT GetHost( ULONG * , WCHAR const * * ) = 0;
	/*0050*/ virtual HRESULT GetPassword( ULONG * , WCHAR const * * ) = 0;
	/*0058*/ virtual HRESULT GetPath( ULONG * , WCHAR const * * ) = 0;
	/*0060*/ virtual HRESULT GetPort( INT * , ULONG * ) = 0;
	/*0068*/ virtual HRESULT GetQuery( ULONG * , WCHAR const * * ) = 0;
	/*0070*/ virtual HRESULT GetSchemeName( ULONG * , WCHAR const * * ) = 0;
	/*0078*/ virtual HRESULT GetUserNameW( ULONG * , WCHAR const * * ) = 0;
	/*0080*/ virtual HRESULT SetFragment( WCHAR const * ) = 0;
	/*0088*/ virtual HRESULT SetHost( WCHAR const * ) = 0;
	/*0090*/ virtual HRESULT SetPassword( WCHAR const * ) = 0;
	/*0098*/ virtual HRESULT SetPath( WCHAR const * ) = 0;
	/*00a0*/ virtual HRESULT SetPort( INT , ULONG ) = 0;
	/*00a8*/ virtual HRESULT SetQuery( WCHAR const * ) = 0;
	/*00b0*/ virtual HRESULT SetSchemeName( WCHAR const * ) = 0;
	/*00b8*/ virtual HRESULT SetUserName( WCHAR const * ) = 0;
	/*00c0*/ virtual HRESULT RemoveProperties( ULONG ) = 0;
	/*00c8*/ virtual HRESULT HasBeenModified( INT * ) = 0;
	void IUriBuilder( IUriBuilder && );
	void IUriBuilder( IUriBuilder const & );
	void IUriBuilder();
	IUriBuilder & operator=( IUriBuilder && );
	IUriBuilder & operator=( IUriBuilder const & );
	/*0008*/
};

struct IUriBuilderFactory : IUnknown {
	/*0018*/ virtual HRESULT CreateIUriBuilder( ULONG , ULONGLONG , IUriBuilder * * ) = 0;
	/*0020*/ virtual HRESULT CreateInitializedIUriBuilder( ULONG , ULONGLONG , IUriBuilder * * ) = 0;
	void IUriBuilderFactory( IUriBuilderFactory && );
	void IUriBuilderFactory( IUriBuilderFactory const & );
	void IUriBuilderFactory();
	IUriBuilderFactory & operator=( IUriBuilderFactory && );
	IUriBuilderFactory & operator=( IUriBuilderFactory const & );
	/*0008*/
};

struct IUriContainer : IUnknown {
	/*0018*/ virtual HRESULT GetIUri( IUri * * ) = 0;
	void IUriContainer( IUriContainer && );
	void IUriContainer( IUriContainer const & );
	void IUriContainer();
	IUriContainer & operator=( IUriContainer && );
	IUriContainer & operator=( IUriContainer const & );
	/*0008*/
};

struct IUrlMon : IUnknown {
	/*0018*/ virtual HRESULT AsyncGetClassBits( _GUID const & , WCHAR const * , WCHAR const * , ULONG , ULONG , WCHAR const * , IBindCtx * , ULONG , _GUID const & , ULONG ) = 0;
	void IUrlMon( IUrlMon && );
	void IUrlMon( IUrlMon const & );
	void IUrlMon();
	IUrlMon & operator=( IUrlMon && );
	IUrlMon & operator=( IUrlMon const & );
	/*0008*/
};

struct IViewObject : IUnknown {
	/*0018*/ virtual HRESULT Draw( ULONG , LONG , void * , tagDVTARGETDEVICE * , HDC__ * , HDC__ * , _RECTL const * , _RECTL const * , INT (* )( ULONGLONG ), ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT GetColorSet( ULONG , LONG , void * , tagDVTARGETDEVICE * , HDC__ * , tagLOGPALETTE * * ) = 0;
	/*0028*/ virtual HRESULT Freeze( ULONG , LONG , void * , ULONG * ) = 0;
	/*0030*/ virtual HRESULT Unfreeze( ULONG ) = 0;
	/*0038*/ virtual HRESULT SetAdvise( ULONG , ULONG , IAdviseSink * ) = 0;
	/*0040*/ virtual HRESULT GetAdvise( ULONG * , ULONG * , IAdviseSink * * ) = 0;
	void IViewObject( IViewObject && );
	void IViewObject( IViewObject const & );
	void IViewObject();
	IViewObject & operator=( IViewObject && );
	IViewObject & operator=( IViewObject const & );
	/*0008*/
};

struct IViewObject2 : IViewObject {
	/*0048*/ virtual HRESULT GetExtent( ULONG , LONG , tagDVTARGETDEVICE * , tagSIZE * ) = 0;
	void IViewObject2( IViewObject2 && );
	void IViewObject2( IViewObject2 const & );
	void IViewObject2();
	IViewObject2 & operator=( IViewObject2 && );
	IViewObject2 & operator=( IViewObject2 const & );
	/*0008*/
};

struct IWaitMultiple : IUnknown {
	/*0018*/ virtual HRESULT WaitMultiple( ULONG , ISynchronize * * ) = 0;
	/*0020*/ virtual HRESULT AddSynchronize( ISynchronize * ) = 0;
	void IWaitMultiple( IWaitMultiple && );
	void IWaitMultiple( IWaitMultiple const & );
	void IWaitMultiple();
	IWaitMultiple & operator=( IWaitMultiple && );
	IWaitMultiple & operator=( IWaitMultiple const & );
	/*0008*/
};

struct IWeakReference : IUnknown {
	/*0018*/ virtual HRESULT Resolve( _GUID const & , IInspectable * * ) = 0;
	void IWeakReference( IWeakReference && );
	void IWeakReference( IWeakReference const & );
	void IWeakReference();
	IWeakReference & operator=( IWeakReference && );
	IWeakReference & operator=( IWeakReference const & );
	/*0008*/
};

struct IWeakReferenceSource : IUnknown {
	/*0018*/ virtual HRESULT GetWeakReference( IWeakReference * * ) = 0;
	void IWeakReferenceSource( IWeakReferenceSource && );
	void IWeakReferenceSource( IWeakReferenceSource const & );
	void IWeakReferenceSource();
	IWeakReferenceSource & operator=( IWeakReferenceSource && );
	IWeakReferenceSource & operator=( IWeakReferenceSource const & );
	/*0008*/
};

struct IWinInetCacheHints : IUnknown {
	/*0018*/ virtual HRESULT SetCacheExtension( WCHAR const * , void * , ULONG * , ULONG * , ULONG * ) = 0;
	void IWinInetCacheHints( IWinInetCacheHints && );
	void IWinInetCacheHints( IWinInetCacheHints const & );
	void IWinInetCacheHints();
	IWinInetCacheHints & operator=( IWinInetCacheHints && );
	IWinInetCacheHints & operator=( IWinInetCacheHints const & );
	/*0008*/
};

struct IWinInetCacheHints2 : IWinInetCacheHints {
	/*0020*/ virtual HRESULT SetCacheExtension2( WCHAR const * , WCHAR * , ULONG * , ULONG * , ULONG * ) = 0;
	void IWinInetCacheHints2( IWinInetCacheHints2 && );
	void IWinInetCacheHints2( IWinInetCacheHints2 const & );
	void IWinInetCacheHints2();
	IWinInetCacheHints2 & operator=( IWinInetCacheHints2 && );
	IWinInetCacheHints2 & operator=( IWinInetCacheHints2 const & );
	/*0008*/
};

struct IWinInetFileStream : IUnknown {
	/*0018*/ virtual HRESULT SetHandleForUnlock( ULONGLONG , ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT SetDeleteFile( ULONGLONG ) = 0;
	void IWinInetFileStream( IWinInetFileStream && );
	void IWinInetFileStream( IWinInetFileStream const & );
	void IWinInetFileStream();
	IWinInetFileStream & operator=( IWinInetFileStream && );
	IWinInetFileStream & operator=( IWinInetFileStream const & );
	/*0008*/
};

struct IWinInetHttpInfo : IWinInetInfo {
	/*0020*/ virtual HRESULT QueryInfo( ULONG , void * , ULONG * , ULONG * , ULONG * ) = 0;
	void IWinInetHttpInfo( IWinInetHttpInfo && );
	void IWinInetHttpInfo( IWinInetHttpInfo const & );
	void IWinInetHttpInfo();
	IWinInetHttpInfo & operator=( IWinInetHttpInfo && );
	IWinInetHttpInfo & operator=( IWinInetHttpInfo const & );
	/*0008*/
};

struct IWinInetHttpTimeouts : IUnknown {
	/*0018*/ virtual HRESULT GetRequestTimeouts( ULONG * , ULONG * , ULONG * ) = 0;
	void IWinInetHttpTimeouts( IWinInetHttpTimeouts && );
	void IWinInetHttpTimeouts( IWinInetHttpTimeouts const & );
	void IWinInetHttpTimeouts();
	IWinInetHttpTimeouts & operator=( IWinInetHttpTimeouts && );
	IWinInetHttpTimeouts & operator=( IWinInetHttpTimeouts const & );
	/*0008*/
};

struct IWinInetInfo : IUnknown {
	/*0018*/ virtual HRESULT QueryOption( ULONG , void * , ULONG * ) = 0;
	void IWinInetInfo( IWinInetInfo && );
	void IWinInetInfo( IWinInetInfo const & );
	void IWinInetInfo();
	IWinInetInfo & operator=( IWinInetInfo && );
	IWinInetInfo & operator=( IWinInetInfo const & );
	/*0008*/
};

struct IWindowForBindingUI : IUnknown {
	/*0018*/ virtual HRESULT GetWindow( _GUID const & , HWND__ * * ) = 0;
	void IWindowForBindingUI( IWindowForBindingUI && );
	void IWindowForBindingUI( IWindowForBindingUI const & );
	void IWindowForBindingUI();
	IWindowForBindingUI & operator=( IWindowForBindingUI && );
	IWindowForBindingUI & operator=( IWindowForBindingUI const & );
	/*0008*/
};

struct IWrappedProtocol : IUnknown {
	/*0018*/ virtual HRESULT GetWrapperCode( LONG * , ULONGLONG ) = 0;
	void IWrappedProtocol( IWrappedProtocol && );
	void IWrappedProtocol( IWrappedProtocol const & );
	void IWrappedProtocol();
	IWrappedProtocol & operator=( IWrappedProtocol && );
	IWrappedProtocol & operator=( IWrappedProtocol const & );
	/*0008*/
};

struct IXMLAttribute : IDispatch {
	/*0038*/ virtual HRESULT get_name( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT get_value( WCHAR * * ) = 0;
	void IXMLAttribute( IXMLAttribute && );
	void IXMLAttribute( IXMLAttribute const & );
	void IXMLAttribute();
	IXMLAttribute & operator=( IXMLAttribute && );
	IXMLAttribute & operator=( IXMLAttribute const & );
	/*0008*/
};

struct IXMLDOMAttribute : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_name( WCHAR * * ) = 0;
	/*0160*/ virtual HRESULT get_value( tagVARIANT * ) = 0;
	/*0168*/ virtual HRESULT put_value( tagVARIANT ) = 0;
	void IXMLDOMAttribute( IXMLDOMAttribute && );
	void IXMLDOMAttribute( IXMLDOMAttribute const & );
	void IXMLDOMAttribute();
	IXMLDOMAttribute & operator=( IXMLDOMAttribute && );
	IXMLDOMAttribute & operator=( IXMLDOMAttribute const & );
	/*0008*/
};

struct IXMLDOMCDATASection : IXMLDOMText {
	void IXMLDOMCDATASection( IXMLDOMCDATASection && );
	void IXMLDOMCDATASection( IXMLDOMCDATASection const & );
	void IXMLDOMCDATASection();
	IXMLDOMCDATASection & operator=( IXMLDOMCDATASection && );
	IXMLDOMCDATASection & operator=( IXMLDOMCDATASection const & );
	/*0008*/
};

struct IXMLDOMCharacterData : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_data( WCHAR * * ) = 0;
	/*0160*/ virtual HRESULT put_data( WCHAR * ) = 0;
	/*0168*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0170*/ virtual HRESULT substringData( LONG , LONG , WCHAR * * ) = 0;
	/*0178*/ virtual HRESULT appendData( WCHAR * ) = 0;
	/*0180*/ virtual HRESULT insertData( LONG , WCHAR * ) = 0;
	/*0188*/ virtual HRESULT deleteData( LONG , LONG ) = 0;
	/*0190*/ virtual HRESULT replaceData( LONG , LONG , WCHAR * ) = 0;
	void IXMLDOMCharacterData( IXMLDOMCharacterData && );
	void IXMLDOMCharacterData( IXMLDOMCharacterData const & );
	void IXMLDOMCharacterData();
	IXMLDOMCharacterData & operator=( IXMLDOMCharacterData && );
	IXMLDOMCharacterData & operator=( IXMLDOMCharacterData const & );
	/*0008*/
};

struct IXMLDOMComment : IXMLDOMCharacterData {
	void IXMLDOMComment( IXMLDOMComment && );
	void IXMLDOMComment( IXMLDOMComment const & );
	void IXMLDOMComment();
	IXMLDOMComment & operator=( IXMLDOMComment && );
	IXMLDOMComment & operator=( IXMLDOMComment const & );
	/*0008*/
};

struct IXMLDOMDocument : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_doctype( IXMLDOMDocumentType * * ) = 0;
	/*0160*/ virtual HRESULT get_implementation( IXMLDOMImplementation * * ) = 0;
	/*0168*/ virtual HRESULT get_documentElement( IXMLDOMElement * * ) = 0;
	/*0170*/ virtual HRESULT putref_documentElement( IXMLDOMElement * ) = 0;
	/*0178*/ virtual HRESULT createElement( WCHAR * , IXMLDOMElement * * ) = 0;
	/*0180*/ virtual HRESULT createDocumentFragment( IXMLDOMDocumentFragment * * ) = 0;
	/*0188*/ virtual HRESULT createTextNode( WCHAR * , IXMLDOMText * * ) = 0;
	/*0190*/ virtual HRESULT createComment( WCHAR * , IXMLDOMComment * * ) = 0;
	/*0198*/ virtual HRESULT createCDATASection( WCHAR * , IXMLDOMCDATASection * * ) = 0;
	/*01a0*/ virtual HRESULT createProcessingInstruction( WCHAR * , WCHAR * , IXMLDOMProcessingInstruction * * ) = 0;
	/*01a8*/ virtual HRESULT createAttribute( WCHAR * , IXMLDOMAttribute * * ) = 0;
	/*01b0*/ virtual HRESULT createEntityReference( WCHAR * , IXMLDOMEntityReference * * ) = 0;
	/*01b8*/ virtual HRESULT getElementsByTagName( WCHAR * , IXMLDOMNodeList * * ) = 0;
	/*01c0*/ virtual HRESULT createNode( tagVARIANT , WCHAR * , WCHAR * , IXMLDOMNode * * ) = 0;
	/*01c8*/ virtual HRESULT nodeFromID( WCHAR * , IXMLDOMNode * * ) = 0;
	/*01d0*/ virtual HRESULT load( tagVARIANT , SHORT * ) = 0;
	/*01d8*/ virtual HRESULT get_readyState( LONG * ) = 0;
	/*01e0*/ virtual HRESULT get_parseError( IXMLDOMParseError * * ) = 0;
	/*01e8*/ virtual HRESULT get_url( WCHAR * * ) = 0;
	/*01f0*/ virtual HRESULT get_async( SHORT * ) = 0;
	/*01f8*/ virtual HRESULT put_async( SHORT ) = 0;
	/*0200*/ virtual HRESULT abort() = 0;
	/*0208*/ virtual HRESULT loadXML( WCHAR * , SHORT * ) = 0;
	/*0210*/ virtual HRESULT save( tagVARIANT ) = 0;
	/*0218*/ virtual HRESULT get_validateOnParse( SHORT * ) = 0;
	/*0220*/ virtual HRESULT put_validateOnParse( SHORT ) = 0;
	/*0228*/ virtual HRESULT get_resolveExternals( SHORT * ) = 0;
	/*0230*/ virtual HRESULT put_resolveExternals( SHORT ) = 0;
	/*0238*/ virtual HRESULT get_preserveWhiteSpace( SHORT * ) = 0;
	/*0240*/ virtual HRESULT put_preserveWhiteSpace( SHORT ) = 0;
	/*0248*/ virtual HRESULT put_onreadystatechange( tagVARIANT ) = 0;
	/*0250*/ virtual HRESULT put_ondataavailable( tagVARIANT ) = 0;
	/*0258*/ virtual HRESULT put_ontransformnode( tagVARIANT ) = 0;
	void IXMLDOMDocument( IXMLDOMDocument && );
	void IXMLDOMDocument( IXMLDOMDocument const & );
	void IXMLDOMDocument();
	IXMLDOMDocument & operator=( IXMLDOMDocument && );
	IXMLDOMDocument & operator=( IXMLDOMDocument const & );
	/*0008*/
};

struct IXMLDOMDocumentFragment : IXMLDOMNode {
	void IXMLDOMDocumentFragment( IXMLDOMDocumentFragment && );
	void IXMLDOMDocumentFragment( IXMLDOMDocumentFragment const & );
	void IXMLDOMDocumentFragment();
	IXMLDOMDocumentFragment & operator=( IXMLDOMDocumentFragment && );
	IXMLDOMDocumentFragment & operator=( IXMLDOMDocumentFragment const & );
	/*0008*/
};

struct IXMLDOMDocumentType : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_name( WCHAR * * ) = 0;
	/*0160*/ virtual HRESULT get_entities( IXMLDOMNamedNodeMap * * ) = 0;
	/*0168*/ virtual HRESULT get_notations( IXMLDOMNamedNodeMap * * ) = 0;
	void IXMLDOMDocumentType( IXMLDOMDocumentType && );
	void IXMLDOMDocumentType( IXMLDOMDocumentType const & );
	void IXMLDOMDocumentType();
	IXMLDOMDocumentType & operator=( IXMLDOMDocumentType && );
	IXMLDOMDocumentType & operator=( IXMLDOMDocumentType const & );
	/*0008*/
};

struct IXMLDOMElement : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_tagName( WCHAR * * ) = 0;
	/*0160*/ virtual HRESULT getAttribute( WCHAR * , tagVARIANT * ) = 0;
	/*0168*/ virtual HRESULT setAttribute( WCHAR * , tagVARIANT ) = 0;
	/*0170*/ virtual HRESULT removeAttribute( WCHAR * ) = 0;
	/*0178*/ virtual HRESULT getAttributeNode( WCHAR * , IXMLDOMAttribute * * ) = 0;
	/*0180*/ virtual HRESULT setAttributeNode( IXMLDOMAttribute * , IXMLDOMAttribute * * ) = 0;
	/*0188*/ virtual HRESULT removeAttributeNode( IXMLDOMAttribute * , IXMLDOMAttribute * * ) = 0;
	/*0190*/ virtual HRESULT getElementsByTagName( WCHAR * , IXMLDOMNodeList * * ) = 0;
	/*0198*/ virtual HRESULT normalize() = 0;
	void IXMLDOMElement( IXMLDOMElement && );
	void IXMLDOMElement( IXMLDOMElement const & );
	void IXMLDOMElement();
	IXMLDOMElement & operator=( IXMLDOMElement && );
	IXMLDOMElement & operator=( IXMLDOMElement const & );
	/*0008*/
};

struct IXMLDOMEntity : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_publicId( tagVARIANT * ) = 0;
	/*0160*/ virtual HRESULT get_systemId( tagVARIANT * ) = 0;
	/*0168*/ virtual HRESULT get_notationName( WCHAR * * ) = 0;
	void IXMLDOMEntity( IXMLDOMEntity && );
	void IXMLDOMEntity( IXMLDOMEntity const & );
	void IXMLDOMEntity();
	IXMLDOMEntity & operator=( IXMLDOMEntity && );
	IXMLDOMEntity & operator=( IXMLDOMEntity const & );
	/*0008*/
};

struct IXMLDOMEntityReference : IXMLDOMNode {
	void IXMLDOMEntityReference( IXMLDOMEntityReference && );
	void IXMLDOMEntityReference( IXMLDOMEntityReference const & );
	void IXMLDOMEntityReference();
	IXMLDOMEntityReference & operator=( IXMLDOMEntityReference && );
	IXMLDOMEntityReference & operator=( IXMLDOMEntityReference const & );
	/*0008*/
};

struct IXMLDOMImplementation : IDispatch {
	/*0038*/ virtual HRESULT hasFeature( WCHAR * , WCHAR * , SHORT * ) = 0;
	void IXMLDOMImplementation( IXMLDOMImplementation && );
	void IXMLDOMImplementation( IXMLDOMImplementation const & );
	void IXMLDOMImplementation();
	IXMLDOMImplementation & operator=( IXMLDOMImplementation && );
	IXMLDOMImplementation & operator=( IXMLDOMImplementation const & );
	/*0008*/
};

struct IXMLDOMNamedNodeMap : IDispatch {
	/*0038*/ virtual HRESULT getNamedItem( WCHAR * , IXMLDOMNode * * ) = 0;
	/*0040*/ virtual HRESULT setNamedItem( IXMLDOMNode * , IXMLDOMNode * * ) = 0;
	/*0048*/ virtual HRESULT removeNamedItem( WCHAR * , IXMLDOMNode * * ) = 0;
	/*0050*/ virtual HRESULT get_item( LONG , IXMLDOMNode * * ) = 0;
	/*0058*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0060*/ virtual HRESULT getQualifiedItem( WCHAR * , WCHAR * , IXMLDOMNode * * ) = 0;
	/*0068*/ virtual HRESULT removeQualifiedItem( WCHAR * , WCHAR * , IXMLDOMNode * * ) = 0;
	/*0070*/ virtual HRESULT nextNode( IXMLDOMNode * * ) = 0;
	/*0078*/ virtual HRESULT reset() = 0;
	/*0080*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	void IXMLDOMNamedNodeMap( IXMLDOMNamedNodeMap && );
	void IXMLDOMNamedNodeMap( IXMLDOMNamedNodeMap const & );
	void IXMLDOMNamedNodeMap();
	IXMLDOMNamedNodeMap & operator=( IXMLDOMNamedNodeMap && );
	IXMLDOMNamedNodeMap & operator=( IXMLDOMNamedNodeMap const & );
	/*0008*/
};

struct IXMLDOMNode : IDispatch {
	/*0038*/ virtual HRESULT get_nodeName( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT get_nodeValue( tagVARIANT * ) = 0;
	/*0048*/ virtual HRESULT put_nodeValue( tagVARIANT ) = 0;
	/*0050*/ virtual HRESULT get_nodeType( tagDOMNodeType * ) = 0;
	/*0058*/ virtual HRESULT get_parentNode( IXMLDOMNode * * ) = 0;
	/*0060*/ virtual HRESULT get_childNodes( IXMLDOMNodeList * * ) = 0;
	/*0068*/ virtual HRESULT get_firstChild( IXMLDOMNode * * ) = 0;
	/*0070*/ virtual HRESULT get_lastChild( IXMLDOMNode * * ) = 0;
	/*0078*/ virtual HRESULT get_previousSibling( IXMLDOMNode * * ) = 0;
	/*0080*/ virtual HRESULT get_nextSibling( IXMLDOMNode * * ) = 0;
	/*0088*/ virtual HRESULT get_attributes( IXMLDOMNamedNodeMap * * ) = 0;
	/*0090*/ virtual HRESULT insertBefore( IXMLDOMNode * , tagVARIANT , IXMLDOMNode * * ) = 0;
	/*0098*/ virtual HRESULT replaceChild( IXMLDOMNode * , IXMLDOMNode * , IXMLDOMNode * * ) = 0;
	/*00a0*/ virtual HRESULT removeChild( IXMLDOMNode * , IXMLDOMNode * * ) = 0;
	/*00a8*/ virtual HRESULT appendChild( IXMLDOMNode * , IXMLDOMNode * * ) = 0;
	/*00b0*/ virtual HRESULT hasChildNodes( SHORT * ) = 0;
	/*00b8*/ virtual HRESULT get_ownerDocument( IXMLDOMDocument * * ) = 0;
	/*00c0*/ virtual HRESULT cloneNode( SHORT , IXMLDOMNode * * ) = 0;
	/*00c8*/ virtual HRESULT get_nodeTypeString( WCHAR * * ) = 0;
	/*00d0*/ virtual HRESULT get_text( WCHAR * * ) = 0;
	/*00d8*/ virtual HRESULT put_text( WCHAR * ) = 0;
	/*00e0*/ virtual HRESULT get_specified( SHORT * ) = 0;
	/*00e8*/ virtual HRESULT get_definition( IXMLDOMNode * * ) = 0;
	/*00f0*/ virtual HRESULT get_nodeTypedValue( tagVARIANT * ) = 0;
	/*00f8*/ virtual HRESULT put_nodeTypedValue( tagVARIANT ) = 0;
	/*0100*/ virtual HRESULT get_dataType( tagVARIANT * ) = 0;
	/*0108*/ virtual HRESULT put_dataType( WCHAR * ) = 0;
	/*0110*/ virtual HRESULT get_xml( WCHAR * * ) = 0;
	/*0118*/ virtual HRESULT transformNode( IXMLDOMNode * , WCHAR * * ) = 0;
	/*0120*/ virtual HRESULT selectNodes( WCHAR * , IXMLDOMNodeList * * ) = 0;
	/*0128*/ virtual HRESULT selectSingleNode( WCHAR * , IXMLDOMNode * * ) = 0;
	/*0130*/ virtual HRESULT get_parsed( SHORT * ) = 0;
	/*0138*/ virtual HRESULT get_namespaceURI( WCHAR * * ) = 0;
	/*0140*/ virtual HRESULT get_prefix( WCHAR * * ) = 0;
	/*0148*/ virtual HRESULT get_baseName( WCHAR * * ) = 0;
	/*0150*/ virtual HRESULT transformNodeToObject( IXMLDOMNode * , tagVARIANT ) = 0;
	void IXMLDOMNode( IXMLDOMNode && );
	void IXMLDOMNode( IXMLDOMNode const & );
	void IXMLDOMNode();
	IXMLDOMNode & operator=( IXMLDOMNode && );
	IXMLDOMNode & operator=( IXMLDOMNode const & );
	/*0008*/
};

struct IXMLDOMNodeList : IDispatch {
	/*0038*/ virtual HRESULT get_item( LONG , IXMLDOMNode * * ) = 0;
	/*0040*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0048*/ virtual HRESULT nextNode( IXMLDOMNode * * ) = 0;
	/*0050*/ virtual HRESULT reset() = 0;
	/*0058*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	void IXMLDOMNodeList( IXMLDOMNodeList && );
	void IXMLDOMNodeList( IXMLDOMNodeList const & );
	void IXMLDOMNodeList();
	IXMLDOMNodeList & operator=( IXMLDOMNodeList && );
	IXMLDOMNodeList & operator=( IXMLDOMNodeList const & );
	/*0008*/
};

struct IXMLDOMNotation : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_publicId( tagVARIANT * ) = 0;
	/*0160*/ virtual HRESULT get_systemId( tagVARIANT * ) = 0;
	void IXMLDOMNotation( IXMLDOMNotation && );
	void IXMLDOMNotation( IXMLDOMNotation const & );
	void IXMLDOMNotation();
	IXMLDOMNotation & operator=( IXMLDOMNotation && );
	IXMLDOMNotation & operator=( IXMLDOMNotation const & );
	/*0008*/
};

struct IXMLDOMParseError : IDispatch {
	/*0038*/ virtual HRESULT get_errorCode( LONG * ) = 0;
	/*0040*/ virtual HRESULT get_url( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT get_reason( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT get_srcText( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT get_line( LONG * ) = 0;
	/*0060*/ virtual HRESULT get_linepos( LONG * ) = 0;
	/*0068*/ virtual HRESULT get_filepos( LONG * ) = 0;
	void IXMLDOMParseError( IXMLDOMParseError && );
	void IXMLDOMParseError( IXMLDOMParseError const & );
	void IXMLDOMParseError();
	IXMLDOMParseError & operator=( IXMLDOMParseError && );
	IXMLDOMParseError & operator=( IXMLDOMParseError const & );
	/*0008*/
};

struct IXMLDOMProcessingInstruction : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_target( WCHAR * * ) = 0;
	/*0160*/ virtual HRESULT get_data( WCHAR * * ) = 0;
	/*0168*/ virtual HRESULT put_data( WCHAR * ) = 0;
	void IXMLDOMProcessingInstruction( IXMLDOMProcessingInstruction && );
	void IXMLDOMProcessingInstruction( IXMLDOMProcessingInstruction const & );
	void IXMLDOMProcessingInstruction();
	IXMLDOMProcessingInstruction & operator=( IXMLDOMProcessingInstruction && );
	IXMLDOMProcessingInstruction & operator=( IXMLDOMProcessingInstruction const & );
	/*0008*/
};

struct IXMLDOMText : IXMLDOMCharacterData {
	/*0198*/ virtual HRESULT splitText( LONG , IXMLDOMText * * ) = 0;
	void IXMLDOMText( IXMLDOMText && );
	void IXMLDOMText( IXMLDOMText const & );
	void IXMLDOMText();
	IXMLDOMText & operator=( IXMLDOMText && );
	IXMLDOMText & operator=( IXMLDOMText const & );
	/*0008*/
};

struct IXMLDSOControl : IDispatch {
	/*0038*/ virtual HRESULT get_XMLDocument( IXMLDOMDocument * * ) = 0;
	/*0040*/ virtual HRESULT put_XMLDocument( IXMLDOMDocument * ) = 0;
	/*0048*/ virtual HRESULT get_JavaDSOCompatible( INT * ) = 0;
	/*0050*/ virtual HRESULT put_JavaDSOCompatible( INT ) = 0;
	/*0058*/ virtual HRESULT get_readyState( LONG * ) = 0;
	void IXMLDSOControl( IXMLDSOControl && );
	void IXMLDSOControl( IXMLDSOControl const & );
	void IXMLDSOControl();
	IXMLDSOControl & operator=( IXMLDSOControl && );
	IXMLDSOControl & operator=( IXMLDSOControl const & );
	/*0008*/
};

struct IXMLDocument : IDispatch {
	/*0038*/ virtual HRESULT get_root( IXMLElement * * ) = 0;
	/*0040*/ virtual HRESULT get_fileSize( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT get_fileModifiedDate( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT get_fileUpdatedDate( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT get_URL( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT put_URL( WCHAR * ) = 0;
	/*0068*/ virtual HRESULT get_mimeType( WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT get_readyState( LONG * ) = 0;
	/*0078*/ virtual HRESULT get_charset( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT put_charset( WCHAR * ) = 0;
	/*0088*/ virtual HRESULT get_version( WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT get_doctype( WCHAR * * ) = 0;
	/*0098*/ virtual HRESULT get_dtdURL( WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT createElement( tagVARIANT , tagVARIANT , IXMLElement * * ) = 0;
	void IXMLDocument( IXMLDocument && );
	void IXMLDocument( IXMLDocument const & );
	void IXMLDocument();
	IXMLDocument & operator=( IXMLDocument && );
	IXMLDocument & operator=( IXMLDocument const & );
	/*0008*/
};

struct IXMLDocument2 : IDispatch {
	/*0038*/ virtual HRESULT get_root( IXMLElement2 * * ) = 0;
	/*0040*/ virtual HRESULT get_fileSize( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT get_fileModifiedDate( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT get_fileUpdatedDate( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT get_URL( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT put_URL( WCHAR * ) = 0;
	/*0068*/ virtual HRESULT get_mimeType( WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT get_readyState( LONG * ) = 0;
	/*0078*/ virtual HRESULT get_charset( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT put_charset( WCHAR * ) = 0;
	/*0088*/ virtual HRESULT get_version( WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT get_doctype( WCHAR * * ) = 0;
	/*0098*/ virtual HRESULT get_dtdURL( WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT createElement( tagVARIANT , tagVARIANT , IXMLElement2 * * ) = 0;
	/*00a8*/ virtual HRESULT get_async( SHORT * ) = 0;
	/*00b0*/ virtual HRESULT put_async( SHORT ) = 0;
	void IXMLDocument2( IXMLDocument2 && );
	void IXMLDocument2( IXMLDocument2 const & );
	void IXMLDocument2();
	IXMLDocument2 & operator=( IXMLDocument2 && );
	IXMLDocument2 & operator=( IXMLDocument2 const & );
	/*0008*/
};

struct IXMLElement : IDispatch {
	/*0038*/ virtual HRESULT get_tagName( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT put_tagName( WCHAR * ) = 0;
	/*0048*/ virtual HRESULT get_parent( IXMLElement * * ) = 0;
	/*0050*/ virtual HRESULT setAttribute( WCHAR * , tagVARIANT ) = 0;
	/*0058*/ virtual HRESULT getAttribute( WCHAR * , tagVARIANT * ) = 0;
	/*0060*/ virtual HRESULT removeAttribute( WCHAR * ) = 0;
	/*0068*/ virtual HRESULT get_children( IXMLElementCollection * * ) = 0;
	/*0070*/ virtual HRESULT get_type( LONG * ) = 0;
	/*0078*/ virtual HRESULT get_text( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT put_text( WCHAR * ) = 0;
	/*0088*/ virtual HRESULT addChild( IXMLElement * , LONG , LONG ) = 0;
	/*0090*/ virtual HRESULT removeChild( IXMLElement * ) = 0;
	void IXMLElement( IXMLElement && );
	void IXMLElement( IXMLElement const & );
	void IXMLElement();
	IXMLElement & operator=( IXMLElement && );
	IXMLElement & operator=( IXMLElement const & );
	/*0008*/
};

struct IXMLElement2 : IDispatch {
	/*0038*/ virtual HRESULT get_tagName( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT put_tagName( WCHAR * ) = 0;
	/*0048*/ virtual HRESULT get_parent( IXMLElement2 * * ) = 0;
	/*0050*/ virtual HRESULT setAttribute( WCHAR * , tagVARIANT ) = 0;
	/*0058*/ virtual HRESULT getAttribute( WCHAR * , tagVARIANT * ) = 0;
	/*0060*/ virtual HRESULT removeAttribute( WCHAR * ) = 0;
	/*0068*/ virtual HRESULT get_children( IXMLElementCollection * * ) = 0;
	/*0070*/ virtual HRESULT get_type( LONG * ) = 0;
	/*0078*/ virtual HRESULT get_text( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT put_text( WCHAR * ) = 0;
	/*0088*/ virtual HRESULT addChild( IXMLElement2 * , LONG , LONG ) = 0;
	/*0090*/ virtual HRESULT removeChild( IXMLElement2 * ) = 0;
	/*0098*/ virtual HRESULT get_attributes( IXMLElementCollection * * ) = 0;
	void IXMLElement2( IXMLElement2 && );
	void IXMLElement2( IXMLElement2 const & );
	void IXMLElement2();
	IXMLElement2 & operator=( IXMLElement2 && );
	IXMLElement2 & operator=( IXMLElement2 const & );
	/*0008*/
};

struct IXMLElementCollection : IDispatch {
	/*0038*/ virtual HRESULT put_length( LONG ) = 0;
	/*0040*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0048*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	/*0050*/ virtual HRESULT item( tagVARIANT , tagVARIANT , IDispatch * * ) = 0;
	void IXMLElementCollection( IXMLElementCollection && );
	void IXMLElementCollection( IXMLElementCollection const & );
	void IXMLElementCollection();
	IXMLElementCollection & operator=( IXMLElementCollection && );
	IXMLElementCollection & operator=( IXMLElementCollection const & );
	/*0008*/
};

struct IXMLError : IUnknown {
	/*0018*/ virtual HRESULT GetErrorInfo( _xml_error * ) = 0;
	void IXMLError( IXMLError && );
	void IXMLError( IXMLError const & );
	void IXMLError();
	IXMLError & operator=( IXMLError && );
	IXMLError & operator=( IXMLError const & );
	/*0008*/
};

struct IXMLHttpRequest : IDispatch {
	/*0038*/ virtual HRESULT open( WCHAR * , WCHAR * , tagVARIANT , tagVARIANT , tagVARIANT ) = 0;
	/*0040*/ virtual HRESULT setRequestHeader( WCHAR * , WCHAR * ) = 0;
	/*0048*/ virtual HRESULT getResponseHeader( WCHAR * , WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT getAllResponseHeaders( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT send( tagVARIANT ) = 0;
	/*0060*/ virtual HRESULT abort() = 0;
	/*0068*/ virtual HRESULT get_status( LONG * ) = 0;
	/*0070*/ virtual HRESULT get_statusText( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT get_responseXML( IDispatch * * ) = 0;
	/*0080*/ virtual HRESULT get_responseText( WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT get_responseBody( tagVARIANT * ) = 0;
	/*0090*/ virtual HRESULT get_responseStream( tagVARIANT * ) = 0;
	/*0098*/ virtual HRESULT get_readyState( LONG * ) = 0;
	/*00a0*/ virtual HRESULT put_onreadystatechange( IDispatch * ) = 0;
	void IXMLHttpRequest( IXMLHttpRequest && );
	void IXMLHttpRequest( IXMLHttpRequest const & );
	void IXMLHttpRequest();
	IXMLHttpRequest & operator=( IXMLHttpRequest && );
	IXMLHttpRequest & operator=( IXMLHttpRequest const & );
	/*0008*/
};

struct IXTLRuntime : IXMLDOMNode {
	/*0158*/ virtual HRESULT uniqueID( IXMLDOMNode * , LONG * ) = 0;
	/*0160*/ virtual HRESULT depth( IXMLDOMNode * , LONG * ) = 0;
	/*0168*/ virtual HRESULT childNumber( IXMLDOMNode * , LONG * ) = 0;
	/*0170*/ virtual HRESULT ancestorChildNumber( WCHAR * , IXMLDOMNode * , LONG * ) = 0;
	/*0178*/ virtual HRESULT absoluteChildNumber( IXMLDOMNode * , LONG * ) = 0;
	/*0180*/ virtual HRESULT formatIndex( LONG , WCHAR * , WCHAR * * ) = 0;
	/*0188*/ virtual HRESULT formatNumber( double , WCHAR * , WCHAR * * ) = 0;
	/*0190*/ virtual HRESULT formatDate( tagVARIANT , WCHAR * , tagVARIANT , WCHAR * * ) = 0;
	/*0198*/ virtual HRESULT formatTime( tagVARIANT , WCHAR * , tagVARIANT , WCHAR * * ) = 0;
	void IXTLRuntime( IXTLRuntime && );
	void IXTLRuntime( IXTLRuntime const & );
	void IXTLRuntime();
	IXTLRuntime & operator=( IXTLRuntime && );
	IXTLRuntime & operator=( IXTLRuntime const & );
	/*0008*/
};

struct IZoneIdentifier : IUnknown {
	/*0018*/ virtual HRESULT GetId( ULONG * ) = 0;
	/*0020*/ virtual HRESULT SetId( ULONG ) = 0;
	/*0028*/ virtual HRESULT Remove() = 0;
	void IZoneIdentifier( IZoneIdentifier && );
	void IZoneIdentifier( IZoneIdentifier const & );
	void IZoneIdentifier();
	IZoneIdentifier & operator=( IZoneIdentifier && );
	IZoneIdentifier & operator=( IZoneIdentifier const & );
	/*0008*/
};

struct IZoneIdentifier2 : IZoneIdentifier {
	/*0030*/ virtual HRESULT GetLastWriterPackageFamilyName( WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT SetLastWriterPackageFamilyName( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT RemoveLastWriterPackageFamilyName() = 0;
	/*0048*/ virtual HRESULT GetAppZoneId( ULONG * ) = 0;
	/*0050*/ virtual HRESULT SetAppZoneId( ULONG ) = 0;
	/*0058*/ virtual HRESULT RemoveAppZoneId() = 0;
	void IZoneIdentifier2( IZoneIdentifier2 && );
	void IZoneIdentifier2( IZoneIdentifier2 const & );
	void IZoneIdentifier2();
	IZoneIdentifier2 & operator=( IZoneIdentifier2 && );
	IZoneIdentifier2 & operator=( IZoneIdentifier2 const & );
	/*0008*/
};

enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS {
	JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 0x1,
	JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 0x2,
	JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 0x3
};

struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION {
	/*0000*/ LONGLONG MaxIops;
	/*0008*/ LONGLONG MaxBandwidth;
	/*0010*/ LONGLONG ReservationIops;
	/*0018*/ WCHAR const * VolumeName;
	/*0020*/ ULONG BaseIoSize;
	/*0024*/ ULONG ControlFlags;
	/*0028*/
};

struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
	/*0000*/ LONGLONG MaxIops;
	/*0008*/ LONGLONG MaxBandwidth;
	/*0010*/ LONGLONG ReservationIops;
	/*0018*/ WCHAR * VolumeName;
	/*0020*/ ULONG BaseIoSize;
	/*0024*/ JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
	/*0028*/ USHORT VolumeNameLength;
	/*0030*/
};

struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
	/*0000*/ LONGLONG MaxIops;
	/*0008*/ LONGLONG MaxBandwidth;
	/*0010*/ LONGLONG ReservationIops;
	/*0018*/ WCHAR * VolumeName;
	/*0020*/ ULONG BaseIoSize;
	/*0024*/ JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
	/*0028*/ USHORT VolumeNameLength;
	/*0030*/ LONGLONG CriticalReservationIops;
	/*0038*/ LONGLONG ReservationBandwidth;
	/*0040*/ LONGLONG CriticalReservationBandwidth;
	/*0048*/ LONGLONG MaxTimePercent;
	/*0050*/ LONGLONG ReservationTimePercent;
	/*0058*/ LONGLONG CriticalReservationTimePercent;
	/*0060*/
};

struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
	/*0000*/ LONGLONG MaxIops;
	/*0008*/ LONGLONG MaxBandwidth;
	/*0010*/ LONGLONG ReservationIops;
	/*0018*/ WCHAR * VolumeName;
	/*0020*/ ULONG BaseIoSize;
	/*0024*/ JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
	/*0028*/ USHORT VolumeNameLength;
	/*0030*/ LONGLONG CriticalReservationIops;
	/*0038*/ LONGLONG ReservationBandwidth;
	/*0040*/ LONGLONG CriticalReservationBandwidth;
	/*0048*/ LONGLONG MaxTimePercent;
	/*0050*/ LONGLONG ReservationTimePercent;
	/*0058*/ LONGLONG CriticalReservationTimePercent;
	/*0060*/ LONGLONG SoftMaxIops;
	/*0068*/ LONGLONG SoftMaxBandwidth;
	/*0070*/ LONGLONG SoftMaxTimePercent;
	/*0078*/ LONGLONG LimitExcessNotifyIops;
	/*0080*/ LONGLONG LimitExcessNotifyBandwidth;
	/*0088*/ LONGLONG LimitExcessNotifyTimePercent;
	/*0090*/
};

struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
	/*0000*/ ULONG LimitFlags;
	/*0004*/ ULONG ViolationLimitFlags;
	/*0008*/ ULONGLONG IoReadBytes;
	/*0010*/ ULONGLONG IoReadBytesLimit;
	/*0018*/ ULONGLONG IoWriteBytes;
	/*0020*/ ULONGLONG IoWriteBytesLimit;
	/*0028*/ _LARGE_INTEGER PerJobUserTime;
	/*0030*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0038*/ ULONGLONG JobMemory;
	/*0040*/ ULONGLONG JobHighMemoryLimit;
	/*0040*/ ULONGLONG JobMemoryLimit;
	/*0048*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*0048*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
	/*004c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
	/*004c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
	/*0050*/ ULONGLONG JobLowMemoryLimit;
	/*0058*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
	/*005c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
	/*0060*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
	/*0064*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
	/*0068*/
};

struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
	/*0000*/ ULONGLONG MaxBandwidth;
	/*0008*/ JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags;
	/*000c*/ UCHAR DscpTag;
	/*0010*/
};

struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
	/*0000*/ ULONGLONG IoReadBytesLimit;
	/*0008*/ ULONGLONG IoWriteBytesLimit;
	/*0010*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0018*/ ULONGLONG JobHighMemoryLimit;
	/*0018*/ ULONGLONG JobMemoryLimit;
	/*0020*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*0020*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
	/*0024*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
	/*0024*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL CpuRateControlToleranceInterval;
	/*0028*/ ULONG LimitFlags;
	/*002c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
	/*0030*/ ULONGLONG JobLowMemoryLimit;
	/*0038*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
	/*003c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
	/*0040*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
	/*0048*/
};

enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
	JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 0x1,
	JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 0x2,
	JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 0x4,
	JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 0x8,
	JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 0xf
};

enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
	JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 0x1,
	JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 0x2,
	JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 0x4,
	JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 0x7
};

struct KEY_PID_ARRAY {
	/*0000*/ void * PID;
	/*0008*/ _UNICODE_STRING KeyName;
	/*0018*/
};

enum LATENCY_TIME {
	LT_DONT_CARE = 0x0,
	LT_LOWEST_LATENCY = 0x1
};

struct LIST_ENTRY32 {
	/*0000*/ ULONG Flink;
	/*0004*/ ULONG Blink;
	/*0008*/
};

struct LIST_ENTRY64 {
	/*0000*/ ULONGLONG Flink;
	/*0008*/ ULONGLONG Blink;
	/*0010*/
};

enum MCA_EXCEPTION_TYPE {
	HAL_MCE_RECORD = 0x0,
	HAL_MCA_RECORD = 0x1
};

struct MEM_EXTENDED_PARAMETER {
	/*0000*/ ULONGLONG Type : 08; // 0x00000000000000ff;
	/*0000*/ ULONGLONG Reserved : 56; // 0xffffffffffffff00;
	/*0008*/ ULONGLONG ULong64;
	/*0008*/ void * Pointer;
	/*0008*/ ULONGLONG Size;
	/*0008*/ void * Handle;
	/*0008*/ ULONG ULong;
	/*0010*/
};

enum MEM_EXTENDED_PARAMETER_TYPE {
	MemExtendedParameterInvalidType = 0x0,
	MemExtendedParameterAddressRequirements = 0x1,
	MemExtendedParameterNumaNode = 0x2,
	MemExtendedParameterPartitionHandle = 0x3,
	MemExtendedParameterUserPhysicalHandle = 0x4,
	MemExtendedParameterAttributeFlags = 0x5,
	MemExtendedParameterImageMachine = 0x6,
	MemExtendedParameterMax = 0x7
};

enum MEM_SECTION_EXTENDED_PARAMETER_TYPE {
	MemSectionExtendedParameterInvalidType = 0x0,
	MemSectionExtendedParameterUserPhysicalFlags = 0x1,
	MemSectionExtendedParameterNumaNode = 0x2,
	MemSectionExtendedParameterSigningLevel = 0x3,
	MemSectionExtendedParameterMax = 0x4
};

struct MENUITEMTEMPLATE {
	/*0000*/ USHORT mtOption;
	/*0002*/ USHORT mtID;
	/*0004*/ WCHAR mtString[0x1];
	/*0006*/
};

struct MENUITEMTEMPLATEHEADER {
	/*0000*/ USHORT versionNumber;
	/*0002*/ USHORT offset;
	/*0004*/
};

struct MFT_ENUM_DATA_V0 {
	/*0000*/ ULONGLONG StartFileReferenceNumber;
	/*0008*/ LONGLONG LowUsn;
	/*0010*/ LONGLONG HighUsn;
	/*0018*/
};

struct MFT_ENUM_DATA_V1 {
	/*0000*/ ULONGLONG StartFileReferenceNumber;
	/*0008*/ LONGLONG LowUsn;
	/*0010*/ LONGLONG HighUsn;
	/*0018*/ USHORT MinMajorVersion;
	/*001a*/ USHORT MaxMajorVersion;
	/*0020*/
};

enum MGOTFLAGS {
	MGOTFLAGS_DEFAULT = 0x0,
	MGOTFLAGS_ALLOWANYCLIENT = 0x1
};

struct MOVE_FILE_DATA {
	/*0000*/ void * FileHandle;
	/*0008*/ _LARGE_INTEGER StartingVcn;
	/*0010*/ _LARGE_INTEGER StartingLcn;
	/*0018*/ ULONG ClusterCount;
	/*0020*/
};

struct MOVE_FILE_RECORD_DATA {
	/*0000*/ void * FileHandle;
	/*0008*/ _LARGE_INTEGER SourceFileRecord;
	/*0010*/ _LARGE_INTEGER TargetFileRecord;
	/*0018*/
};

struct MachineGlobalObjectTableRegistrationToken__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct NDR_ALLOC_ALL_NODES_CONTEXT;

struct NDR_POINTER_QUEUE_STATE;

struct NOTIFY_USER_POWER_SETTING {
	/*0000*/ _GUID Guid;
	/*0010*/
};

struct NTFS_EXTENDED_VOLUME_DATA {
	/*0000*/ ULONG ByteCount;
	/*0004*/ USHORT MajorVersion;
	/*0006*/ USHORT MinorVersion;
	/*0008*/ ULONG BytesPerPhysicalSector;
	/*000c*/ USHORT LfsMajorVersion;
	/*000e*/ USHORT LfsMinorVersion;
	/*0010*/ ULONG MaxDeviceTrimExtentCount;
	/*0014*/ ULONG MaxDeviceTrimByteCount;
	/*0018*/ ULONG MaxVolumeTrimExtentCount;
	/*001c*/ ULONG MaxVolumeTrimByteCount;
	/*0020*/
};

struct NTFS_FILE_RECORD_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER FileReferenceNumber;
	/*0008*/
};

struct NTFS_FILE_RECORD_OUTPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER FileReferenceNumber;
	/*0008*/ ULONG FileRecordLength;
	/*000c*/ UCHAR FileRecordBuffer[0x1];
	/*0010*/
};

struct NTFS_VOLUME_DATA_BUFFER {
	/*0000*/ _LARGE_INTEGER VolumeSerialNumber;
	/*0008*/ _LARGE_INTEGER NumberSectors;
	/*0010*/ _LARGE_INTEGER TotalClusters;
	/*0018*/ _LARGE_INTEGER FreeClusters;
	/*0020*/ _LARGE_INTEGER TotalReserved;
	/*0028*/ ULONG BytesPerSector;
	/*002c*/ ULONG BytesPerCluster;
	/*0030*/ ULONG BytesPerFileRecordSegment;
	/*0034*/ ULONG ClustersPerFileRecordSegment;
	/*0038*/ _LARGE_INTEGER MftValidDataLength;
	/*0040*/ _LARGE_INTEGER MftStartLcn;
	/*0048*/ _LARGE_INTEGER Mft2StartLcn;
	/*0050*/ _LARGE_INTEGER MftZoneStart;
	/*0058*/ _LARGE_INTEGER MftZoneEnd;
	/*0060*/
};

struct NUMPARSE {
	/*0000*/ INT cDig;
	/*0004*/ ULONG dwInFlags;
	/*0008*/ ULONG dwOutFlags;
	/*000c*/ INT cchUsed;
	/*0010*/ INT nBaseShift;
	/*0014*/ INT nPwr10;
	/*0018*/
};

enum OFFER_PRIORITY {
	VmOfferPriorityVeryLow = 0x1,
	VmOfferPriorityLow = 0x2,
	VmOfferPriorityBelowNormal = 0x3,
	VmOfferPriorityNormal = 0x4
};

enum ORIENTATION_PREFERENCE {
	ORIENTATION_PREFERENCE_NONE = 0x0,
	ORIENTATION_PREFERENCE_LANDSCAPE = 0x1,
	ORIENTATION_PREFERENCE_PORTRAIT = 0x2,
	ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
	ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 0x8
};

enum PIDMSI_STATUS_VALUE {
	PIDMSI_STATUS_NORMAL = 0x0,
	PIDMSI_STATUS_NEW = 0x1,
	PIDMSI_STATUS_PRELIM = 0x2,
	PIDMSI_STATUS_DRAFT = 0x3,
	PIDMSI_STATUS_INPROGRESS = 0x4,
	PIDMSI_STATUS_EDIT = 0x5,
	PIDMSI_STATUS_REVIEW = 0x6,
	PIDMSI_STATUS_PROOF = 0x7,
	PIDMSI_STATUS_FINAL = 0x8,
	PIDMSI_STATUS_OTHER = 0x7fff
};

enum POINTER_FEEDBACK_MODE {
	POINTER_FEEDBACK_DEFAULT = 0x1,
	POINTER_FEEDBACK_INDIRECT = 0x2,
	POINTER_FEEDBACK_NONE = 0x3
};

struct POWERBROADCAST_SETTING {
	/*0000*/ _GUID PowerSetting;
	/*0010*/ ULONG DataLength;
	/*0014*/ UCHAR Data[0x1];
	/*0018*/
};

enum POWER_ACTION {
	PowerActionNone = 0x0,
	PowerActionReserved = 0x1,
	PowerActionSleep = 0x2,
	PowerActionHibernate = 0x3,
	PowerActionShutdown = 0x4,
	PowerActionShutdownReset = 0x5,
	PowerActionShutdownOff = 0x6,
	PowerActionWarmEject = 0x7,
	PowerActionDisplayOff = 0x8
};

struct POWER_ACTION_POLICY {
	/*0000*/ POWER_ACTION Action;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG EventCode;
	/*000c*/
};

enum POWER_INFORMATION_LEVEL {
	SystemPowerPolicyAc = 0x0,
	SystemPowerPolicyDc = 0x1,
	VerifySystemPolicyAc = 0x2,
	VerifySystemPolicyDc = 0x3,
	SystemPowerCapabilities = 0x4,
	SystemBatteryState = 0x5,
	SystemPowerStateHandler = 0x6,
	ProcessorStateHandler = 0x7,
	SystemPowerPolicyCurrent = 0x8,
	AdministratorPowerPolicy = 0x9,
	SystemReserveHiberFile = 0xa,
	ProcessorInformation = 0xb,
	SystemPowerInformation = 0xc,
	ProcessorStateHandler2 = 0xd,
	LastWakeTime = 0xe,
	LastSleepTime = 0xf,
	SystemExecutionState = 0x10,
	SystemPowerStateNotifyHandler = 0x11,
	ProcessorPowerPolicyAc = 0x12,
	ProcessorPowerPolicyDc = 0x13,
	VerifyProcessorPowerPolicyAc = 0x14,
	VerifyProcessorPowerPolicyDc = 0x15,
	ProcessorPowerPolicyCurrent = 0x16,
	SystemPowerStateLogging = 0x17,
	SystemPowerLoggingEntry = 0x18,
	SetPowerSettingValue = 0x19,
	NotifyUserPowerSetting = 0x1a,
	PowerInformationLevelUnused0 = 0x1b,
	SystemMonitorHiberBootPowerOff = 0x1c,
	SystemVideoState = 0x1d,
	TraceApplicationPowerMessage = 0x1e,
	TraceApplicationPowerMessageEnd = 0x1f,
	ProcessorPerfStates = 0x20,
	ProcessorIdleStates = 0x21,
	ProcessorCap = 0x22,
	SystemWakeSource = 0x23,
	SystemHiberFileInformation = 0x24,
	TraceServicePowerMessage = 0x25,
	ProcessorLoad = 0x26,
	PowerShutdownNotification = 0x27,
	MonitorCapabilities = 0x28,
	SessionPowerInit = 0x29,
	SessionDisplayState = 0x2a,
	PowerRequestCreate = 0x2b,
	PowerRequestAction = 0x2c,
	GetPowerRequestList = 0x2d,
	ProcessorInformationEx = 0x2e,
	NotifyUserModeLegacyPowerEvent = 0x2f,
	GroupPark = 0x30,
	ProcessorIdleDomains = 0x31,
	WakeTimerList = 0x32,
	SystemHiberFileSize = 0x33,
	ProcessorIdleStatesHv = 0x34,
	ProcessorPerfStatesHv = 0x35,
	ProcessorPerfCapHv = 0x36,
	ProcessorSetIdle = 0x37,
	LogicalProcessorIdling = 0x38,
	UserPresence = 0x39,
	PowerSettingNotificationName = 0x3a,
	GetPowerSettingValue = 0x3b,
	IdleResiliency = 0x3c,
	SessionRITState = 0x3d,
	SessionConnectNotification = 0x3e,
	SessionPowerCleanup = 0x3f,
	SessionLockState = 0x40,
	SystemHiberbootState = 0x41,
	PlatformInformation = 0x42,
	PdcInvocation = 0x43,
	MonitorInvocation = 0x44,
	FirmwareTableInformationRegistered = 0x45,
	SetShutdownSelectedTime = 0x46,
	SuspendResumeInvocation = 0x47,
	PlmPowerRequestCreate = 0x48,
	ScreenOff = 0x49,
	CsDeviceNotification = 0x4a,
	PlatformRole = 0x4b,
	LastResumePerformance = 0x4c,
	DisplayBurst = 0x4d,
	ExitLatencySamplingPercentage = 0x4e,
	RegisterSpmPowerSettings = 0x4f,
	PlatformIdleStates = 0x50,
	ProcessorIdleVeto = 0x51,
	PlatformIdleVeto = 0x52,
	SystemBatteryStatePrecise = 0x53,
	ThermalEvent = 0x54,
	PowerRequestActionInternal = 0x55,
	BatteryDeviceState = 0x56,
	PowerInformationInternal = 0x57,
	ThermalStandby = 0x58,
	SystemHiberFileType = 0x59,
	PhysicalPowerButtonPress = 0x5a,
	QueryPotentialDripsConstraint = 0x5b,
	EnergyTrackerCreate = 0x5c,
	EnergyTrackerQuery = 0x5d,
	UpdateBlackBoxRecorder = 0x5e,
	SessionAllowExternalDmaDevices = 0x5f,
	SendSuspendResumeNotification = 0x60,
	BlackBoxRecorderDirectAccessBuffer = 0x61,
	PowerInformationLevelMaximum = 0x62
};

enum POWER_MONITOR_REQUEST_REASON {
	MonitorRequestReasonUnknown = 0x0,
	MonitorRequestReasonPowerButton = 0x1,
	MonitorRequestReasonRemoteConnection = 0x2,
	MonitorRequestReasonScMonitorpower = 0x3,
	MonitorRequestReasonUserInput = 0x4,
	MonitorRequestReasonAcDcDisplayBurst = 0x5,
	MonitorRequestReasonUserDisplayBurst = 0x6,
	MonitorRequestReasonPoSetSystemState = 0x7,
	MonitorRequestReasonSetThreadExecutionState = 0x8,
	MonitorRequestReasonFullWake = 0x9,
	MonitorRequestReasonSessionUnlock = 0xa,
	MonitorRequestReasonScreenOffRequest = 0xb,
	MonitorRequestReasonIdleTimeout = 0xc,
	MonitorRequestReasonPolicyChange = 0xd,
	MonitorRequestReasonSleepButton = 0xe,
	MonitorRequestReasonLid = 0xf,
	MonitorRequestReasonBatteryCountChange = 0x10,
	MonitorRequestReasonGracePeriod = 0x11,
	MonitorRequestReasonPnP = 0x12,
	MonitorRequestReasonDP = 0x13,
	MonitorRequestReasonSxTransition = 0x14,
	MonitorRequestReasonSystemIdle = 0x15,
	MonitorRequestReasonNearProximity = 0x16,
	MonitorRequestReasonThermalStandby = 0x17,
	MonitorRequestReasonResumePdc = 0x18,
	MonitorRequestReasonResumeS4 = 0x19,
	MonitorRequestReasonTerminal = 0x1a,
	MonitorRequestReasonPdcSignal = 0x1b,
	MonitorRequestReasonAcDcDisplayBurstSuppressed = 0x1c,
	MonitorRequestReasonSystemStateEntered = 0x1d,
	MonitorRequestReasonWinrt = 0x1e,
	MonitorRequestReasonUserInputKeyboard = 0x1f,
	MonitorRequestReasonUserInputMouse = 0x20,
	MonitorRequestReasonUserInputTouchpad = 0x21,
	MonitorRequestReasonUserInputPen = 0x22,
	MonitorRequestReasonUserInputAccelerometer = 0x23,
	MonitorRequestReasonUserInputHid = 0x24,
	MonitorRequestReasonUserInputPoUserPresent = 0x25,
	MonitorRequestReasonUserInputSessionSwitch = 0x26,
	MonitorRequestReasonUserInputInitialization = 0x27,
	MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 0x28,
	MonitorRequestReasonPdcSignalWindowsMobileShell = 0x29,
	MonitorRequestReasonPdcSignalHeyCortana = 0x2a,
	MonitorRequestReasonPdcSignalHolographicShell = 0x2b,
	MonitorRequestReasonPdcSignalFingerprint = 0x2c,
	MonitorRequestReasonDirectedDrips = 0x2d,
	MonitorRequestReasonDim = 0x2e,
	MonitorRequestReasonBuiltinPanel = 0x2f,
	MonitorRequestReasonDisplayRequiredUnDim = 0x30,
	MonitorRequestReasonBatteryCountChangeSuppressed = 0x31,
	MonitorRequestReasonResumeModernStandby = 0x32,
	MonitorRequestReasonTerminalInit = 0x33,
	MonitorRequestReasonPdcSignalSensorsHumanPresence = 0x34,
	MonitorRequestReasonBatteryPreCritical = 0x35,
	MonitorRequestReasonUserInputTouch = 0x36,
	MonitorRequestReasonMax = 0x37
};

enum POWER_SETTING_ALTITUDE {
	ALTITUDE_GROUP_POLICY = 0x0,
	ALTITUDE_USER = 0x1,
	ALTITUDE_RUNTIME_OVERRIDE = 0x2,
	ALTITUDE_PROVISIONING = 0x3,
	ALTITUDE_OEM_CUSTOMIZATION = 0x4,
	ALTITUDE_INTERNAL_OVERRIDE = 0x5,
	ALTITUDE_OS_DEFAULT = 0x6
};

enum POWER_STATE_DISABLED_TYPE {
	PoDisabledStateSleeping1 = 0x0,
	PoDisabledStateSleeping2 = 0x1,
	PoDisabledStateSleeping3 = 0x2,
	PoDisabledStateSleeping4 = 0x3,
	PoDisabledStateSleeping0Idle = 0x4,
	PoDisabledStateReserved5 = 0x5,
	PoDisabledStateSleeping4Firmware = 0x6,
	PoDisabledStateMaximum = 0x7
};

struct POWER_STATE_HANDLER {
	/*0000*/ POWER_STATE_HANDLER_TYPE Type;
	/*0004*/ UCHAR RtcWake;
	/*0005*/ UCHAR Spare[0x3];
	/*0008*/ LONG (* Handler)( void * , LONG (* )( void * ), void * , LONG , LONG volatile * );
	/*0010*/ void * Context;
	/*0018*/
};

enum POWER_STATE_HANDLER_TYPE {
	PowerStateSleeping1 = 0x0,
	PowerStateSleeping2 = 0x1,
	PowerStateSleeping3 = 0x2,
	PowerStateSleeping4 = 0x3,
	PowerStateShutdownOff = 0x4,
	PowerStateShutdownReset = 0x5,
	PowerStateSleeping4Firmware = 0x6,
	PowerStateMaximum = 0x7
};

struct POWER_STATE_NOTIFY_HANDLER {
	/*0000*/ LONG (* Handler)( POWER_STATE_HANDLER_TYPE , void * , UCHAR );
	/*0008*/ void * Context;
	/*0010*/
};

enum POWER_USER_PRESENCE_TYPE {
	UserNotPresent = 0x0,
	UserPresent = 0x1,
	UserUnknown = 0xff
};

enum PO_FIXED_WAKE_SOURCE_TYPE {
	FixedWakeSourcePowerButton = 0x0,
	FixedWakeSourceSleepButton = 0x1,
	FixedWakeSourceRtc = 0x2,
	FixedWakeSourceDozeToHibernate = 0x3
};

enum PO_INTERNAL_WAKE_SOURCE_TYPE {
	InternalWakeSourceDozeToHibernate = 0x0,
	InternalWakeSourcePredictedUserPresence = 0x1,
	InternalWakeSourceTimerOverride = 0x2
};

enum PO_WAKE_SOURCE_TYPE {
	DeviceWakeSourceType = 0x0,
	FixedWakeSourceType = 0x1,
	TimerWakeSourceType = 0x2,
	TimerPresumedWakeSourceType = 0x3,
	InternalWakeSourceType = 0x4
};

struct PPM_IDLESTATE_EVENT {
	/*0000*/ ULONG NewState;
	/*0004*/ ULONG OldState;
	/*0008*/ ULONGLONG Processors;
	/*0010*/
};

struct PPM_IDLE_ACCOUNTING {
	/*0000*/ ULONG StateCount;
	/*0004*/ ULONG TotalTransitions;
	/*0008*/ ULONG ResetCount;
	/*0010*/ ULONGLONG StartTime;
	/*0018*/ PPM_IDLE_STATE_ACCOUNTING State[0x1];
	/*0048*/
};

struct PPM_IDLE_ACCOUNTING_EX {
	/*0000*/ ULONG StateCount;
	/*0004*/ ULONG TotalTransitions;
	/*0008*/ ULONG ResetCount;
	/*000c*/ ULONG AbortCount;
	/*0010*/ ULONGLONG StartTime;
	/*0018*/ PPM_IDLE_STATE_ACCOUNTING_EX State[0x1];
	/*01b8*/
};

struct PPM_IDLE_STATE_ACCOUNTING {
	/*0000*/ ULONG IdleTransitions;
	/*0004*/ ULONG FailedTransitions;
	/*0008*/ ULONG InvalidBucketIndex;
	/*0010*/ ULONGLONG TotalTime;
	/*0018*/ ULONG IdleTimeBuckets[0x6];
	/*0030*/
};

struct PPM_IDLE_STATE_ACCOUNTING_EX {
	/*0000*/ ULONGLONG TotalTime;
	/*0008*/ ULONG IdleTransitions;
	/*000c*/ ULONG FailedTransitions;
	/*0010*/ ULONG InvalidBucketIndex;
	/*0014*/ ULONG MinTimeUs;
	/*0018*/ ULONG MaxTimeUs;
	/*001c*/ ULONG CancelledTransitions;
	/*0020*/ PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[0x10];
	/*01a0*/
};

struct PPM_IDLE_STATE_BUCKET_EX {
	/*0000*/ ULONGLONG TotalTimeUs;
	/*0008*/ ULONG MinTimeUs;
	/*000c*/ ULONG MaxTimeUs;
	/*0010*/ ULONG Count;
	/*0018*/
};

struct PPM_PERFSTATE_DOMAIN_EVENT {
	/*0000*/ ULONG State;
	/*0004*/ ULONG Latency;
	/*0008*/ ULONG Speed;
	/*0010*/ ULONGLONG Processors;
	/*0018*/
};

struct PPM_PERFSTATE_EVENT {
	/*0000*/ ULONG State;
	/*0004*/ ULONG Status;
	/*0008*/ ULONG Latency;
	/*000c*/ ULONG Speed;
	/*0010*/ ULONG Processor;
	/*0014*/
};

struct PPM_THERMALCHANGE_EVENT {
	/*0000*/ ULONG ThermalConstraint;
	/*0008*/ ULONGLONG Processors;
	/*0010*/
};

struct PPM_THERMAL_POLICY_EVENT {
	/*0000*/ UCHAR Mode;
	/*0008*/ ULONGLONG Processors;
	/*0010*/
};

struct PPM_WMI_IDLE_STATE {
	/*0000*/ ULONG Latency;
	/*0004*/ ULONG Power;
	/*0008*/ ULONG TimeCheck;
	/*000c*/ UCHAR PromotePercent;
	/*000d*/ UCHAR DemotePercent;
	/*000e*/ UCHAR StateType;
	/*000f*/ UCHAR Reserved;
	/*0010*/ ULONG StateFlags;
	/*0014*/ ULONG Context;
	/*0018*/ ULONG IdleHandler;
	/*001c*/ ULONG Reserved1;
	/*0020*/
};

struct PPM_WMI_IDLE_STATES {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG Count;
	/*0008*/ ULONG TargetState;
	/*000c*/ ULONG OldState;
	/*0010*/ ULONGLONG TargetProcessors;
	/*0018*/ PPM_WMI_IDLE_STATE State[0x1];
	/*0038*/
};

struct PPM_WMI_IDLE_STATES_EX {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG Count;
	/*0008*/ ULONG TargetState;
	/*000c*/ ULONG OldState;
	/*0010*/ void * TargetProcessors;
	/*0018*/ PPM_WMI_IDLE_STATE State[0x1];
	/*0038*/
};

struct PPM_WMI_LEGACY_PERFSTATE {
	/*0000*/ ULONG Frequency;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG PercentFrequency;
	/*000c*/
};

struct PPM_WMI_PERF_STATE {
	/*0000*/ ULONG Frequency;
	/*0004*/ ULONG Power;
	/*0008*/ UCHAR PercentFrequency;
	/*0009*/ UCHAR IncreaseLevel;
	/*000a*/ UCHAR DecreaseLevel;
	/*000b*/ UCHAR Type;
	/*000c*/ ULONG IncreaseTime;
	/*0010*/ ULONG DecreaseTime;
	/*0018*/ ULONGLONG Control;
	/*0020*/ ULONGLONG Status;
	/*0028*/ ULONG HitCount;
	/*002c*/ ULONG Reserved1;
	/*0030*/ ULONGLONG Reserved2;
	/*0038*/ ULONGLONG Reserved3;
	/*0040*/
};

struct PPM_WMI_PERF_STATES {
	/*0000*/ ULONG Count;
	/*0004*/ ULONG MaxFrequency;
	/*0008*/ ULONG CurrentState;
	/*000c*/ ULONG MaxPerfState;
	/*0010*/ ULONG MinPerfState;
	/*0014*/ ULONG LowestPerfState;
	/*0018*/ ULONG ThermalConstraint;
	/*001c*/ UCHAR BusyAdjThreshold;
	/*001d*/ UCHAR PolicyType;
	/*001e*/ UCHAR Type;
	/*001f*/ UCHAR Reserved;
	/*0020*/ ULONG TimerInterval;
	/*0028*/ ULONGLONG TargetProcessors;
	/*0030*/ ULONG PStateHandler;
	/*0034*/ ULONG PStateContext;
	/*0038*/ ULONG TStateHandler;
	/*003c*/ ULONG TStateContext;
	/*0040*/ ULONG FeedbackHandler;
	/*0044*/ ULONG Reserved1;
	/*0048*/ ULONGLONG Reserved2;
	/*0050*/ PPM_WMI_PERF_STATE State[0x1];
	/*0090*/
};

struct PPM_WMI_PERF_STATES_EX {
	/*0000*/ ULONG Count;
	/*0004*/ ULONG MaxFrequency;
	/*0008*/ ULONG CurrentState;
	/*000c*/ ULONG MaxPerfState;
	/*0010*/ ULONG MinPerfState;
	/*0014*/ ULONG LowestPerfState;
	/*0018*/ ULONG ThermalConstraint;
	/*001c*/ UCHAR BusyAdjThreshold;
	/*001d*/ UCHAR PolicyType;
	/*001e*/ UCHAR Type;
	/*001f*/ UCHAR Reserved;
	/*0020*/ ULONG TimerInterval;
	/*0028*/ void * TargetProcessors;
	/*0030*/ ULONG PStateHandler;
	/*0034*/ ULONG PStateContext;
	/*0038*/ ULONG TStateHandler;
	/*003c*/ ULONG TStateContext;
	/*0040*/ ULONG FeedbackHandler;
	/*0044*/ ULONG Reserved1;
	/*0048*/ ULONGLONG Reserved2;
	/*0050*/ PPM_WMI_PERF_STATE State[0x1];
	/*0090*/
};

struct PROCESSOR_IDLESTATE_INFO {
	/*0000*/ ULONG TimeCheck;
	/*0004*/ UCHAR DemotePercent;
	/*0005*/ UCHAR PromotePercent;
	/*0006*/ UCHAR Spare[0x2];
	/*0008*/
};

struct PROCESSOR_IDLESTATE_POLICY {
	
	/*0000*/ USHORT Revision;
	/*0002*/ <unnamed-type-Flags> Flags;
	/*0004*/ ULONG PolicyCount;
	/*0008*/ PROCESSOR_IDLESTATE_INFO Policy[0x3];
	/*0020*/
};

struct PROCESSOR_IDLE_TIMES {
	/*0000*/ ULONGLONG StartTime;
	/*0008*/ ULONGLONG EndTime;
	/*0010*/ ULONG Reserved[0x4];
	/*0020*/
};

struct PROCESSOR_PERFSTATE_POLICY {
	
	/*0000*/ ULONG Revision;
	/*0004*/ UCHAR MaxThrottle;
	/*0005*/ UCHAR MinThrottle;
	/*0006*/ UCHAR BusyAdjThreshold;
	/*0007*/ UCHAR Spare;
	/*0007*/ <unnamed-type-Flags> Flags;
	/*0008*/ ULONG TimeCheck;
	/*000c*/ ULONG IncreaseTime;
	/*0010*/ ULONG DecreaseTime;
	/*0014*/ ULONG IncreasePercent;
	/*0018*/ ULONG DecreasePercent;
	/*001c*/
};

struct PROCESS_PROTECTION_LEVEL_INFORMATION {
	/*0000*/ ULONG ProtectionLevel;
	/*0004*/
};

enum PROXY_PHASE {
	PROXY_CALCSIZE = 0x0,
	PROXY_GETBUFFER = 0x1,
	PROXY_MARSHAL = 0x2,
	PROXY_SENDRECEIVE = 0x3,
	PROXY_UNMARSHAL = 0x4
};

enum PS_CREATE_STATE {
	PsCreateInitialState = 0x0,
	PsCreateFailOnFileOpen = 0x1,
	PsCreateFailOnSectionCreate = 0x2,
	PsCreateFailExeFormat = 0x3,
	PsCreateFailMachineMismatch = 0x4,
	PsCreateFailExeName = 0x5,
	PsCreateSuccess = 0x6,
	PsCreateMaximumStates = 0x7
};

struct READ_FILE_USN_DATA {
	/*0000*/ USHORT MinMajorVersion;
	/*0002*/ USHORT MaxMajorVersion;
	/*0004*/
};

struct READ_USN_JOURNAL_DATA_V0 {
	/*0000*/ LONGLONG StartUsn;
	/*0008*/ ULONG ReasonMask;
	/*000c*/ ULONG ReturnOnlyOnClose;
	/*0010*/ ULONGLONG Timeout;
	/*0018*/ ULONGLONG BytesToWaitFor;
	/*0020*/ ULONGLONG UsnJournalID;
	/*0028*/
};

struct READ_USN_JOURNAL_DATA_V1 {
	/*0000*/ LONGLONG StartUsn;
	/*0008*/ ULONG ReasonMask;
	/*000c*/ ULONG ReturnOnlyOnClose;
	/*0010*/ ULONGLONG Timeout;
	/*0018*/ ULONGLONG BytesToWaitFor;
	/*0020*/ ULONGLONG UsnJournalID;
	/*0028*/ USHORT MinMajorVersion;
	/*002a*/ USHORT MaxMajorVersion;
	/*0030*/
};

struct REFS_VOLUME_DATA_BUFFER {
	/*0000*/ ULONG ByteCount;
	/*0004*/ ULONG MajorVersion;
	/*0008*/ ULONG MinorVersion;
	/*000c*/ ULONG BytesPerPhysicalSector;
	/*0010*/ _LARGE_INTEGER VolumeSerialNumber;
	/*0018*/ _LARGE_INTEGER NumberSectors;
	/*0020*/ _LARGE_INTEGER TotalClusters;
	/*0028*/ _LARGE_INTEGER FreeClusters;
	/*0030*/ _LARGE_INTEGER TotalReserved;
	/*0038*/ ULONG BytesPerSector;
	/*003c*/ ULONG BytesPerCluster;
	/*0040*/ _LARGE_INTEGER MaximumSizeOfResidentFile;
	/*0048*/ USHORT FastTierDataFillRatio;
	/*004a*/ USHORT SlowTierDataFillRatio;
	/*004c*/ ULONG DestagesFastTierToSlowTierRate;
	/*0050*/ _LARGE_INTEGER Reserved[0x9];
	/*0098*/
};

struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {
	
	/*0000*/ ULONG ExtentCount;
	/*0008*/ _LARGE_INTEGER StartingVcn;
	/*0010*/ <unnamed-type-Extents> Extents[0x1];
	/*0028*/
};

struct RETRIEVAL_POINTERS_BUFFER {
	
	/*0000*/ ULONG ExtentCount;
	/*0008*/ _LARGE_INTEGER StartingVcn;
	/*0010*/ <unnamed-type-Extents> Extents[0x1];
	/*0020*/
};

struct RETRIEVAL_POINTER_COUNT {
	/*0000*/ ULONG ExtentCount;
	/*0004*/
};

enum RO_ERROR_REPORTING_FLAGS {
	RO_ERROR_REPORTING_NONE = 0x0,
	RO_ERROR_REPORTING_SUPPRESSEXCEPTIONS = 0x1,
	RO_ERROR_REPORTING_FORCEEXCEPTIONS = 0x2,
	RO_ERROR_REPORTING_USESETERRORINFO = 0x4,
	RO_ERROR_REPORTING_SUPPRESSSETERRORINFO = 0x8
};

enum RO_INIT_TYPE {
	RO_INIT_SINGLETHREADED = 0x0,
	RO_INIT_MULTITHREADED = 0x1
};

enum RPC_ADDRESS_CHANGE_TYPE {
	PROTOCOL_NOT_LOADED = 0x1,
	PROTOCOL_LOADED = 0x2,
	PROTOCOL_ADDRESS_CHANGE = 0x3
};

struct RPC_CLIENT_INFORMATION1 {
	/*0000*/ UCHAR * UserName;
	/*0008*/ UCHAR * ComputerName;
	/*0010*/ USHORT Privilege;
	/*0014*/ ULONG AuthFlags;
	/*0018*/
};

struct RPC_DISPATCH_TABLE {
	/*0000*/ UINT DispatchTableCount;
	/*0008*/ void (* * DispatchTable)( _RPC_MESSAGE * );
	/*0010*/ LONGLONG Reserved;
	/*0018*/
};

struct RPC_ENDPOINT_TEMPLATEA {
	/*0000*/ ULONG Version;
	/*0008*/ UCHAR * ProtSeq;
	/*0010*/ UCHAR * Endpoint;
	/*0018*/ void * SecurityDescriptor;
	/*0020*/ ULONG Backlog;
	/*0028*/
};

struct RPC_ENDPOINT_TEMPLATEW {
	/*0000*/ ULONG Version;
	/*0008*/ USHORT * ProtSeq;
	/*0010*/ USHORT * Endpoint;
	/*0018*/ void * SecurityDescriptor;
	/*0020*/ ULONG Backlog;
	/*0028*/
};

struct RPC_IF_ID_VECTOR {
	/*0000*/ ULONG Count;
	/*0008*/ _RPC_IF_ID * IfId[0x1];
	/*0010*/
};

struct RPC_IMPORT_CONTEXT_P {
	/*0000*/ void * LookupContext;
	/*0008*/ void * ProposedHandle;
	/*0010*/ _RPC_BINDING_VECTOR * Bindings;
	/*0018*/
};

struct RPC_INTERFACE_TEMPLATEA {
	/*0000*/ ULONG Version;
	/*0008*/ void * IfSpec;
	/*0010*/ _GUID * MgrTypeUuid;
	/*0018*/ void * MgrEpv;
	/*0020*/ UINT Flags;
	/*0024*/ UINT MaxCalls;
	/*0028*/ UINT MaxRpcSize;
	/*0030*/ LONG (* IfCallback)( void * , void * );
	/*0038*/ _UUID_VECTOR * UuidVector;
	/*0040*/ UCHAR * Annotation;
	/*0048*/ void * SecurityDescriptor;
	/*0050*/
};

struct RPC_INTERFACE_TEMPLATEW {
	/*0000*/ ULONG Version;
	/*0008*/ void * IfSpec;
	/*0010*/ _GUID * MgrTypeUuid;
	/*0018*/ void * MgrEpv;
	/*0020*/ UINT Flags;
	/*0024*/ UINT MaxCalls;
	/*0028*/ UINT MaxRpcSize;
	/*0030*/ LONG (* IfCallback)( void * , void * );
	/*0038*/ _UUID_VECTOR * UuidVector;
	/*0040*/ USHORT * Annotation;
	/*0048*/ void * SecurityDescriptor;
	/*0050*/
};

struct RPC_STATS_VECTOR {
	/*0000*/ UINT Count;
	/*0004*/ ULONG Stats[0x1];
	/*0008*/
};

struct RTLWOW64_CROSSPROCESS_WORK_HEAD {
	/*0000*/ ULONG First : 31; // 0x7fffffff;
	/*0000*/ ULONG HeavyFlush : 01; // 0x80000000;
	/*0004*/ ULONG Sequence;
	/*0000*/ LONGLONG volatile Value;
	/*0008*/
};

struct RTLWOW64_CROSSPROCESS_WORK_ITEM {
	
	/*0000*/ ULONG Next;
	/*0004*/ RTLWOW64_CROSSPROCESS_WORK_OPERATION Operation;
	/*0008*/ <unnamed-type-MemoryAllocData> MemoryAllocData;
	/*0008*/ <unnamed-type-MemoryFreeData> MemoryFreeData;
	/*0008*/ <unnamed-type-MemoryProtectData> MemoryProtectData;
	/*0008*/ <unnamed-type-InstructionCacheFlushData> InstructionCacheFlushData;
	/*0008*/ <unnamed-type-MemoryDirtyData> MemoryDirtyData;
	/*0028*/
};

enum RTLWOW64_CROSSPROCESS_WORK_OPERATION {
	CrossProcOperationMemoryAllocPreNotify = 0x0,
	CrossProcOperationMemoryAllocPostNotify = 0x1,
	CrossProcOperationMemoryFreePreNotify = 0x2,
	CrossProcOperationMemoryFreePostNotify = 0x3,
	CrossProcOperationMemoryProtectPreNotify = 0x4,
	CrossProcOperationMemoryProtectPostNotify = 0x5,
	CrossProcOperationInstructionCacheFlush = 0x6,
	CrossProcOperationInstructionCacheFlushHeavy = 0x7,
	CrossProcOperationMemoryDirtyNotify = 0x8
};

struct RTL_ACE_DATA {
	/*0000*/ UCHAR AceType;
	/*0001*/ UCHAR InheritFlags;
	/*0002*/ UCHAR AceFlags;
	/*0004*/ ULONG Mask;
	/*0008*/ void * * Sid;
	/*0010*/
};

enum RTL_BSD_ITEM_TYPE {
	RtlBsdItemVersionNumber = 0x0,
	RtlBsdItemProductType = 0x1,
	RtlBsdItemAabEnabled = 0x2,
	RtlBsdItemAabTimeout = 0x3,
	RtlBsdItemBootGood = 0x4,
	RtlBsdItemBootShutdown = 0x5,
	RtlBsdSleepInProgress = 0x6,
	RtlBsdPowerTransition = 0x7,
	RtlBsdItemBootAttemptCount = 0x8,
	RtlBsdItemBootCheckpoint = 0x9,
	RtlBsdItemBootId = 0xa,
	RtlBsdItemShutdownBootId = 0xb,
	RtlBsdItemReportedAbnormalShutdownBootId = 0xc,
	RtlBsdItemErrorInfo = 0xd,
	RtlBsdItemPowerButtonPressInfo = 0xe,
	RtlBsdItemChecksum = 0xf,
	RtlBsdPowerTransitionExtension = 0x10,
	RtlBsdItemFeatureConfigurationState = 0x11,
	RtlBsdItemMax = 0x12
};

enum RTL_DISK_SPACE_POLICY {
	RtlDiskSpacePolicyVeryLow = 0x5,
	RtlDiskSpacePolicyLow = 0xa,
	RtlDiskSpacePolicyBelowNormal = 0xf,
	RtlDiskSpacePolicyNormal = 0x14
};

enum RTL_DISK_SPEED_POLICY {
	RtlDiskSpeedPolicyNormal = 0xa,
	RtlDiskSpeedPolicyFast = 0x14
};

enum RTL_DISK_WRITE_CONSTRAINT_POLICY {
	RtlDiskWriteConstraintPolicyLimited = 0x32,
	RtlDiskWriteConstraintPolicyNormal = 0x64
};

enum RTL_PHYSICAL_MEMORY_POLICY {
	RtlPhysicalMemoryPolicyLow = 0xa,
	RtlPhysicalMemoryPolicyNormal = 0x14
};

enum ReplacesCorHdrNumericDefines {
	COMIMAGE_FLAGS_ILONLY = 0x1,
	COMIMAGE_FLAGS_32BITREQUIRED = 0x2,
	COMIMAGE_FLAGS_IL_LIBRARY = 0x4,
	COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x8,
	COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 0x10,
	COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
	COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
	COR_VERSION_MAJOR_V2 = 0x2,
	COR_VERSION_MAJOR = 0x2,
	COR_VERSION_MINOR = 0x5,
	COR_DELETED_NAME_LENGTH = 0x8,
	COR_VTABLEGAP_NAME_LENGTH = 0x8,
	NATIVE_TYPE_MAX_CB = 0x1,
	COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xff,
	IMAGE_COR_MIH_METHODRVA = 0x1,
	IMAGE_COR_MIH_EHRVA = 0x2,
	IMAGE_COR_MIH_BASICBLOCK = 0x8,
	COR_VTABLE_32BIT = 0x1,
	COR_VTABLE_64BIT = 0x2,
	COR_VTABLE_FROM_UNMANAGED = 0x4,
	COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 0x8,
	COR_VTABLE_CALL_MOST_DERIVED = 0x10,
	IMAGE_COR_EATJ_THUNK_SIZE = 0x20,
	MAX_CLASS_NAME = 0x400,
	MAX_PACKAGE_NAME = 0x400
};

class RpcOptionsHelper {
public:
	static HRESULT GetRpcOptions( IUnknown * , BOOLEAN , IRpcOptions * * );
	static HRESULT GetRpcOptions( IUnknown * , IRpcOptions * * );
	static HRESULT GetRpcOptionsAndSetDoNotDisturb( IUnknown * , IRpcOptions * * );
	static HRESULT SetDoNotDisturb( IUnknown * );
private:
	static void SetDoNotDisturbInternal( IRpcOptions * , IUnknown * );
	/*0001*/
};

enum RpcProxyPerfCounters {
	RpcCurrentUniqueUser = 0x1,
	RpcBackEndConnectionAttempts = 0x2,
	RpcBackEndConnectionFailed = 0x3,
	RpcRequestsPerSecond = 0x4,
	RpcIncomingConnections = 0x5,
	RpcIncomingBandwidth = 0x6,
	RpcOutgoingBandwidth = 0x7,
	RpcAttemptedLbsDecisions = 0x8,
	RpcFailedLbsDecisions = 0x9,
	RpcAttemptedLbsMessages = 0xa,
	RpcFailedLbsMessages = 0xb,
	RpcLastCounter = 0xc
};

struct SC_HANDLE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct SChannelHookCallInfo {
	/*0000*/ _GUID iid;
	/*0010*/ ULONG cbSize;
	/*0014*/ _GUID uCausality;
	/*0024*/ ULONG dwServerPid;
	/*0028*/ ULONG iMethod;
	/*0030*/ void * pObject;
	/*0038*/
};

enum SERVICE_DIRECTORY_TYPE {
	ServiceDirectoryPersistentState = 0x0,
	ServiceDirectoryTypeMax = 0x1
};

enum SERVICE_REGISTRY_STATE_TYPE {
	ServiceRegistryStateParameters = 0x0,
	ServiceRegistryStatePersistent = 0x1,
	MaxServiceRegistryStateType = 0x2
};

enum SERVICE_SHARED_DIRECTORY_TYPE {
	ServiceSharedDirectoryPersistentState = 0x0
};

enum SERVICE_SHARED_REGISTRY_STATE_TYPE {
	ServiceSharedRegistryPersistentState = 0x0
};

struct SERVICE_STATUS_HANDLE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct SERVICE_TRIGGER_CUSTOM_STATE_ID {
	/*0000*/ ULONG Data[0x2];
	/*0008*/
};

struct SET_POWER_SETTING_VALUE {
	/*0000*/ ULONG Version;
	/*0004*/ _GUID Guid;
	/*0014*/ SYSTEM_POWER_CONDITION PowerCondition;
	/*0018*/ ULONG DataLength;
	/*001c*/ UCHAR Data[0x1];
	/*0020*/
};

enum SE_WS_APPX_SIGNATURE_ORIGIN {
	SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0x0,
	SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 0x1,
	SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 0x2,
	SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 0x3,
	SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 0x4
};

struct SHELLHOOKINFO {
	/*0000*/ HWND__ * hwnd;
	/*0008*/ tagRECT rc;
	/*0018*/
};

struct STARTING_LCN_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER StartingLcn;
	/*0008*/
};

struct STARTING_LCN_INPUT_BUFFER_EX {
	/*0000*/ _LARGE_INTEGER StartingLcn;
	/*0008*/ ULONG Flags;
	/*0010*/
};

struct STARTING_VCN_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER StartingVcn;
	/*0008*/
};

enum STUB_PHASE {
	STUB_UNMARSHAL = 0x0,
	STUB_CALL_SERVER = 0x1,
	STUB_MARSHAL = 0x2,
	STUB_CALL_SERVER_NO_HRESULT = 0x3
};

enum SYSGEOCLASS {
	GEOCLASS_NATION = 0x10,
	GEOCLASS_REGION = 0xe,
	GEOCLASS_ALL = 0x0
};

enum SYSGEOTYPE {
	GEO_NATION = 0x1,
	GEO_LATITUDE = 0x2,
	GEO_LONGITUDE = 0x3,
	GEO_ISO2 = 0x4,
	GEO_ISO3 = 0x5,
	GEO_RFC1766 = 0x6,
	GEO_LCID = 0x7,
	GEO_FRIENDLYNAME = 0x8,
	GEO_OFFICIALNAME = 0x9,
	GEO_TIMEZONES = 0xa,
	GEO_OFFICIALLANGUAGES = 0xb,
	GEO_ISO_UN_NUMBER = 0xc,
	GEO_PARENT = 0xd,
	GEO_DIALINGCODE = 0xe,
	GEO_CURRENCYCODE = 0xf,
	GEO_CURRENCYSYMBOL = 0x10,
	GEO_NAME = 0x11,
	GEO_ID = 0x12
};

enum SYSNLS_FUNCTION {
	COMPARE_STRING = 0x1
};

struct SYSTEM_BATTERY_STATE {
	/*0000*/ UCHAR AcOnLine;
	/*0001*/ UCHAR BatteryPresent;
	/*0002*/ UCHAR Charging;
	/*0003*/ UCHAR Discharging;
	/*0004*/ UCHAR Spare1[0x3];
	/*0007*/ UCHAR Tag;
	/*0008*/ ULONG MaxCapacity;
	/*000c*/ ULONG RemainingCapacity;
	/*0010*/ ULONG Rate;
	/*0014*/ ULONG EstimatedTime;
	/*0018*/ ULONG DefaultAlert1;
	/*001c*/ ULONG DefaultAlert2;
	/*0020*/
};

struct SYSTEM_POWER_CAPABILITIES {
	/*0000*/ UCHAR PowerButtonPresent;
	/*0001*/ UCHAR SleepButtonPresent;
	/*0002*/ UCHAR LidPresent;
	/*0003*/ UCHAR SystemS1;
	/*0004*/ UCHAR SystemS2;
	/*0005*/ UCHAR SystemS3;
	/*0006*/ UCHAR SystemS4;
	/*0007*/ UCHAR SystemS5;
	/*0008*/ UCHAR HiberFilePresent;
	/*0009*/ UCHAR FullWake;
	/*000a*/ UCHAR VideoDimPresent;
	/*000b*/ UCHAR ApmPresent;
	/*000c*/ UCHAR UpsPresent;
	/*000d*/ UCHAR ThermalControl;
	/*000e*/ UCHAR ProcessorThrottle;
	/*000f*/ UCHAR ProcessorMinThrottle;
	/*0010*/ UCHAR ProcessorMaxThrottle;
	/*0011*/ UCHAR FastSystemS4;
	/*0012*/ UCHAR Hiberboot;
	/*0013*/ UCHAR WakeAlarmPresent;
	/*0014*/ UCHAR AoAc;
	/*0015*/ UCHAR DiskSpinDown;
	/*0016*/ UCHAR HiberFileType;
	/*0017*/ UCHAR AoAcConnectivitySupported;
	/*0018*/ UCHAR spare3[0x6];
	/*001e*/ UCHAR SystemBatteriesPresent;
	/*001f*/ UCHAR BatteriesAreShortTerm;
	/*0020*/ BATTERY_REPORTING_SCALE BatteryScale[0x3];
	/*0038*/ _SYSTEM_POWER_STATE AcOnLineWake;
	/*003c*/ _SYSTEM_POWER_STATE SoftLidWake;
	/*0040*/ _SYSTEM_POWER_STATE RtcWake;
	/*0044*/ _SYSTEM_POWER_STATE MinDeviceWakeState;
	/*0048*/ _SYSTEM_POWER_STATE DefaultLowLatencyWake;
	/*004c*/
};

enum SYSTEM_POWER_CONDITION {
	PoAc = 0x0,
	PoDc = 0x1,
	PoHot = 0x2,
	PoConditionMaximum = 0x3
};

struct SYSTEM_POWER_LEVEL {
	/*0000*/ UCHAR Enable;
	/*0001*/ UCHAR Spare[0x3];
	/*0004*/ ULONG BatteryLevel;
	/*0008*/ POWER_ACTION_POLICY PowerPolicy;
	/*0014*/ _SYSTEM_POWER_STATE MinSystemState;
	/*0018*/
};

enum TOOLTIP_DISMISS_FLAGS {
	TDF_REGISTER = 0x1,
	TDF_UNREGISTER = 0x2
};

enum TrustLevel {
	BaseTrust = 0x0,
	PartialTrust = 0x1,
	FullTrust = 0x2
};

struct UDATE {
	/*0000*/ _SYSTEMTIME st;
	/*0010*/ USHORT wDayOfYear;
	/*0012*/
};

struct USN_JOURNAL_DATA_V0 {
	/*0000*/ ULONGLONG UsnJournalID;
	/*0008*/ LONGLONG FirstUsn;
	/*0010*/ LONGLONG NextUsn;
	/*0018*/ LONGLONG LowestValidUsn;
	/*0020*/ LONGLONG MaxUsn;
	/*0028*/ ULONGLONG MaximumSize;
	/*0030*/ ULONGLONG AllocationDelta;
	/*0038*/
};

struct USN_JOURNAL_DATA_V1 {
	/*0000*/ ULONGLONG UsnJournalID;
	/*0008*/ LONGLONG FirstUsn;
	/*0010*/ LONGLONG NextUsn;
	/*0018*/ LONGLONG LowestValidUsn;
	/*0020*/ LONGLONG MaxUsn;
	/*0028*/ ULONGLONG MaximumSize;
	/*0030*/ ULONGLONG AllocationDelta;
	/*0038*/ USHORT MinSupportedMajorVersion;
	/*003a*/ USHORT MaxSupportedMajorVersion;
	/*0040*/
};

struct USN_JOURNAL_DATA_V2 {
	/*0000*/ ULONGLONG UsnJournalID;
	/*0008*/ LONGLONG FirstUsn;
	/*0010*/ LONGLONG NextUsn;
	/*0018*/ LONGLONG LowestValidUsn;
	/*0020*/ LONGLONG MaxUsn;
	/*0028*/ ULONGLONG MaximumSize;
	/*0030*/ ULONGLONG AllocationDelta;
	/*0038*/ USHORT MinSupportedMajorVersion;
	/*003a*/ USHORT MaxSupportedMajorVersion;
	/*003c*/ ULONG Flags;
	/*0040*/ ULONGLONG RangeTrackChunkSize;
	/*0048*/ LONGLONG RangeTrackFileSizeThreshold;
	/*0050*/
};

struct USN_RANGE_TRACK_OUTPUT {
	/*0000*/ LONGLONG Usn;
	/*0008*/
};

struct USN_RECORD_COMMON_HEADER {
	/*0000*/ ULONG RecordLength;
	/*0004*/ USHORT MajorVersion;
	/*0006*/ USHORT MinorVersion;
	/*0008*/
};

struct USN_RECORD_EXTENT {
	/*0000*/ LONGLONG Offset;
	/*0008*/ LONGLONG Length;
	/*0010*/
};

union USN_RECORD_UNION {
	/*0000*/ USN_RECORD_COMMON_HEADER Header;
	/*0000*/ USN_RECORD_V2 V2;
	/*0000*/ USN_RECORD_V3 V3;
	/*0000*/ USN_RECORD_V4 V4;
	/*0050*/
};

struct USN_RECORD_V2 {
	/*0000*/ ULONG RecordLength;
	/*0004*/ USHORT MajorVersion;
	/*0006*/ USHORT MinorVersion;
	/*0008*/ ULONGLONG FileReferenceNumber;
	/*0010*/ ULONGLONG ParentFileReferenceNumber;
	/*0018*/ LONGLONG Usn;
	/*0020*/ _LARGE_INTEGER TimeStamp;
	/*0028*/ ULONG Reason;
	/*002c*/ ULONG SourceInfo;
	/*0030*/ ULONG SecurityId;
	/*0034*/ ULONG FileAttributes;
	/*0038*/ USHORT FileNameLength;
	/*003a*/ USHORT FileNameOffset;
	/*003c*/ WCHAR FileName[0x1];
	/*0040*/
};

struct USN_RECORD_V3 {
	/*0000*/ ULONG RecordLength;
	/*0004*/ USHORT MajorVersion;
	/*0006*/ USHORT MinorVersion;
	/*0008*/ _FILE_ID_128 FileReferenceNumber;
	/*0018*/ _FILE_ID_128 ParentFileReferenceNumber;
	/*0028*/ LONGLONG Usn;
	/*0030*/ _LARGE_INTEGER TimeStamp;
	/*0038*/ ULONG Reason;
	/*003c*/ ULONG SourceInfo;
	/*0040*/ ULONG SecurityId;
	/*0044*/ ULONG FileAttributes;
	/*0048*/ USHORT FileNameLength;
	/*004a*/ USHORT FileNameOffset;
	/*004c*/ WCHAR FileName[0x1];
	/*0050*/
};

struct USN_RECORD_V4 {
	/*0000*/ USN_RECORD_COMMON_HEADER Header;
	/*0008*/ _FILE_ID_128 FileReferenceNumber;
	/*0018*/ _FILE_ID_128 ParentFileReferenceNumber;
	/*0028*/ LONGLONG Usn;
	/*0030*/ ULONG Reason;
	/*0034*/ ULONG SourceInfo;
	/*0038*/ ULONG RemainingExtents;
	/*003c*/ USHORT NumberOfExtents;
	/*003e*/ USHORT ExtentSize;
	/*0040*/ USN_RECORD_EXTENT Extents[0x1];
	/*0050*/
};

struct USN_TRACK_MODIFIED_RANGES {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Unused;
	/*0008*/ ULONGLONG ChunkSize;
	/*0010*/ LONGLONG FileSizeThreshold;
	/*0018*/
};

enum VARENUM {
	VT_EMPTY = 0x0,
	VT_NULL = 0x1,
	VT_I2 = 0x2,
	VT_I4 = 0x3,
	VT_R4 = 0x4,
	VT_R8 = 0x5,
	VT_CY = 0x6,
	VT_DATE = 0x7,
	VT_BSTR = 0x8,
	VT_DISPATCH = 0x9,
	VT_ERROR = 0xa,
	VT_BOOL = 0xb,
	VT_VARIANT = 0xc,
	VT_UNKNOWN = 0xd,
	VT_DECIMAL = 0xe,
	VT_I1 = 0x10,
	VT_UI1 = 0x11,
	VT_UI2 = 0x12,
	VT_UI4 = 0x13,
	VT_I8 = 0x14,
	VT_UI8 = 0x15,
	VT_INT = 0x16,
	VT_UINT = 0x17,
	VT_VOID = 0x18,
	VT_HRESULT = 0x19,
	VT_PTR = 0x1a,
	VT_SAFEARRAY = 0x1b,
	VT_CARRAY = 0x1c,
	VT_USERDEFINED = 0x1d,
	VT_LPSTR = 0x1e,
	VT_LPWSTR = 0x1f,
	VT_RECORD = 0x24,
	VT_INT_PTR = 0x25,
	VT_UINT_PTR = 0x26,
	VT_FILETIME = 0x40,
	VT_BLOB = 0x41,
	VT_STREAM = 0x42,
	VT_STORAGE = 0x43,
	VT_STREAMED_OBJECT = 0x44,
	VT_STORED_OBJECT = 0x45,
	VT_BLOB_OBJECT = 0x46,
	VT_CF = 0x47,
	VT_CLSID = 0x48,
	VT_VERSIONED_STREAM = 0x49,
	VT_BSTR_BLOB = 0xfff,
	VT_VECTOR = 0x1000,
	VT_ARRAY = 0x2000,
	VT_BYREF = 0x4000,
	VT_RESERVED = 0x8000,
	VT_ILLEGAL = 0xffff,
	VT_ILLEGALMASKED = 0xfff,
	VT_TYPEMASK = 0xfff
};

enum VERIFIER_MODE {
	VERIFIER_MODE_UNUSED = 0x0,
	VERIFIER_MODE_TRIAGE = 0x1,
	VERIFIER_MODE_FIELD = 0x2,
	VERIFIER_MODE_LOGO = 0x3,
	VERIFIER_MODE_TEST = 0x4
};

struct VOLUME_BITMAP_BUFFER {
	/*0000*/ _LARGE_INTEGER StartingLcn;
	/*0008*/ _LARGE_INTEGER BitmapSize;
	/*0010*/ UCHAR Buffer[0x1];
	/*0018*/
};

enum WELL_KNOWN_SID_TYPE {
	WinNullSid = 0x0,
	WinWorldSid = 0x1,
	WinLocalSid = 0x2,
	WinCreatorOwnerSid = 0x3,
	WinCreatorGroupSid = 0x4,
	WinCreatorOwnerServerSid = 0x5,
	WinCreatorGroupServerSid = 0x6,
	WinNtAuthoritySid = 0x7,
	WinDialupSid = 0x8,
	WinNetworkSid = 0x9,
	WinBatchSid = 0xa,
	WinInteractiveSid = 0xb,
	WinServiceSid = 0xc,
	WinAnonymousSid = 0xd,
	WinProxySid = 0xe,
	WinEnterpriseControllersSid = 0xf,
	WinSelfSid = 0x10,
	WinAuthenticatedUserSid = 0x11,
	WinRestrictedCodeSid = 0x12,
	WinTerminalServerSid = 0x13,
	WinRemoteLogonIdSid = 0x14,
	WinLogonIdsSid = 0x15,
	WinLocalSystemSid = 0x16,
	WinLocalServiceSid = 0x17,
	WinNetworkServiceSid = 0x18,
	WinBuiltinDomainSid = 0x19,
	WinBuiltinAdministratorsSid = 0x1a,
	WinBuiltinUsersSid = 0x1b,
	WinBuiltinGuestsSid = 0x1c,
	WinBuiltinPowerUsersSid = 0x1d,
	WinBuiltinAccountOperatorsSid = 0x1e,
	WinBuiltinSystemOperatorsSid = 0x1f,
	WinBuiltinPrintOperatorsSid = 0x20,
	WinBuiltinBackupOperatorsSid = 0x21,
	WinBuiltinReplicatorSid = 0x22,
	WinBuiltinPreWindows2000CompatibleAccessSid = 0x23,
	WinBuiltinRemoteDesktopUsersSid = 0x24,
	WinBuiltinNetworkConfigurationOperatorsSid = 0x25,
	WinAccountAdministratorSid = 0x26,
	WinAccountGuestSid = 0x27,
	WinAccountKrbtgtSid = 0x28,
	WinAccountDomainAdminsSid = 0x29,
	WinAccountDomainUsersSid = 0x2a,
	WinAccountDomainGuestsSid = 0x2b,
	WinAccountComputersSid = 0x2c,
	WinAccountControllersSid = 0x2d,
	WinAccountCertAdminsSid = 0x2e,
	WinAccountSchemaAdminsSid = 0x2f,
	WinAccountEnterpriseAdminsSid = 0x30,
	WinAccountPolicyAdminsSid = 0x31,
	WinAccountRasAndIasServersSid = 0x32,
	WinNTLMAuthenticationSid = 0x33,
	WinDigestAuthenticationSid = 0x34,
	WinSChannelAuthenticationSid = 0x35,
	WinThisOrganizationSid = 0x36,
	WinOtherOrganizationSid = 0x37,
	WinBuiltinIncomingForestTrustBuildersSid = 0x38,
	WinBuiltinPerfMonitoringUsersSid = 0x39,
	WinBuiltinPerfLoggingUsersSid = 0x3a,
	WinBuiltinAuthorizationAccessSid = 0x3b,
	WinBuiltinTerminalServerLicenseServersSid = 0x3c,
	WinBuiltinDCOMUsersSid = 0x3d,
	WinBuiltinIUsersSid = 0x3e,
	WinIUserSid = 0x3f,
	WinBuiltinCryptoOperatorsSid = 0x40,
	WinUntrustedLabelSid = 0x41,
	WinLowLabelSid = 0x42,
	WinMediumLabelSid = 0x43,
	WinHighLabelSid = 0x44,
	WinSystemLabelSid = 0x45,
	WinWriteRestrictedCodeSid = 0x46,
	WinCreatorOwnerRightsSid = 0x47,
	WinCacheablePrincipalsGroupSid = 0x48,
	WinNonCacheablePrincipalsGroupSid = 0x49,
	WinEnterpriseReadonlyControllersSid = 0x4a,
	WinAccountReadonlyControllersSid = 0x4b,
	WinBuiltinEventLogReadersGroup = 0x4c,
	WinNewEnterpriseReadonlyControllersSid = 0x4d,
	WinBuiltinCertSvcDComAccessGroup = 0x4e,
	WinMediumPlusLabelSid = 0x4f,
	WinLocalLogonSid = 0x50,
	WinConsoleLogonSid = 0x51,
	WinThisOrganizationCertificateSid = 0x52,
	WinApplicationPackageAuthoritySid = 0x53,
	WinBuiltinAnyPackageSid = 0x54,
	WinCapabilityInternetClientSid = 0x55,
	WinCapabilityInternetClientServerSid = 0x56,
	WinCapabilityPrivateNetworkClientServerSid = 0x57,
	WinCapabilityPicturesLibrarySid = 0x58,
	WinCapabilityVideosLibrarySid = 0x59,
	WinCapabilityMusicLibrarySid = 0x5a,
	WinCapabilityDocumentsLibrarySid = 0x5b,
	WinCapabilitySharedUserCertificatesSid = 0x5c,
	WinCapabilityEnterpriseAuthenticationSid = 0x5d,
	WinCapabilityRemovableStorageSid = 0x5e,
	WinBuiltinRDSRemoteAccessServersSid = 0x5f,
	WinBuiltinRDSEndpointServersSid = 0x60,
	WinBuiltinRDSManagementServersSid = 0x61,
	WinUserModeDriversSid = 0x62,
	WinBuiltinHyperVAdminsSid = 0x63,
	WinAccountCloneableControllersSid = 0x64,
	WinBuiltinAccessControlAssistanceOperatorsSid = 0x65,
	WinBuiltinRemoteManagementUsersSid = 0x66,
	WinAuthenticationAuthorityAssertedSid = 0x67,
	WinAuthenticationServiceAssertedSid = 0x68,
	WinLocalAccountSid = 0x69,
	WinLocalAccountAndAdministratorSid = 0x6a,
	WinAccountProtectedUsersSid = 0x6b,
	WinCapabilityAppointmentsSid = 0x6c,
	WinCapabilityContactsSid = 0x6d,
	WinAccountDefaultSystemManagedSid = 0x6e,
	WinBuiltinDefaultSystemManagedGroupSid = 0x6f,
	WinBuiltinStorageReplicaAdminsSid = 0x70,
	WinAccountKeyAdminsSid = 0x71,
	WinAccountEnterpriseKeyAdminsSid = 0x72,
	WinAuthenticationKeyTrustSid = 0x73,
	WinAuthenticationKeyPropertyMFASid = 0x74,
	WinAuthenticationKeyPropertyAttestationSid = 0x75,
	WinAuthenticationFreshKeyAuthSid = 0x76,
	WinBuiltinDeviceOwnersSid = 0x77
};

enum WIN32_MEMORY_INFORMATION_CLASS {
	MemoryRegionInfo = 0x0
};

struct WIN32_MEMORY_PARTITION_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumaNode;
	/*0008*/ ULONG Channel;
	/*000c*/ ULONG NumberOfNumaNodes;
	/*0010*/ ULONGLONG ResidentAvailablePages;
	/*0018*/ ULONGLONG CommittedPages;
	/*0020*/ ULONGLONG CommitLimit;
	/*0028*/ ULONGLONG PeakCommitment;
	/*0030*/ ULONGLONG TotalNumberOfPages;
	/*0038*/ ULONGLONG AvailablePages;
	/*0040*/ ULONGLONG ZeroPages;
	/*0048*/ ULONGLONG FreePages;
	/*0050*/ ULONGLONG StandbyPages;
	/*0058*/ ULONGLONG Reserved[0x10];
	/*00d8*/ ULONGLONG MaximumCommitLimit;
	/*00e0*/ ULONGLONG Reserved2;
	/*00e8*/ ULONG PartitionId;
	/*00f0*/
};

enum WIN32_MEMORY_PARTITION_INFORMATION_CLASS {
	MemoryPartitionInfo = 0x0,
	MemoryPartitionDedicatedMemoryInfo = 0x1
};

struct WIN32_MEMORY_REGION_INFORMATION {
	/*0000*/ void * AllocationBase;
	/*0008*/ ULONG AllocationProtect;
	/*000c*/ ULONG Flags;
	/*000c*/ ULONG Private : 01; // 0x00000001;
	/*000c*/ ULONG MappedDataFile : 01; // 0x00000002;
	/*000c*/ ULONG MappedImage : 01; // 0x00000004;
	/*000c*/ ULONG MappedPageFile : 01; // 0x00000008;
	/*000c*/ ULONG MappedPhysical : 01; // 0x00000010;
	/*000c*/ ULONG DirectMapped : 01; // 0x00000020;
	/*000c*/ ULONG Reserved : 26; // 0xffffffc0;
	/*0010*/ ULONGLONG RegionSize;
	/*0018*/ ULONGLONG CommitSize;
	/*0020*/
};

struct WinrtRtti {
	/*0000*/ WinrtRttiKind Kind;
	/*0004*/ ULONG Version;
	/*0008*/ WinrtRtti const * Namespace;
	/*0010*/ WCHAR const * Name;
	/*0018*/ _MIDL_METHOD_PROPERTY_MAP PropertyMap;
	/*0028*/
};

struct WinrtRttiDelegate_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/ _GUID const * Iid;
	/*0030*/
};

struct WinrtRttiInterface_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/ _GUID const * Iid;
	/*0030*/
};

enum WinrtRttiKind {
	WinrtRttiKind_Namespace = 0x0,
	WinrtRttiKind_RuntimeClass = 0x1,
	WinrtRttiKind_Interface = 0x2,
	WinrtRttiKind_Delegate = 0x3,
	WinrtRttiKind_ParameterizedInterface = 0x4,
	WinrtRttiKind_ParameterizedInterfaceInstance = 0x5,
	WinrtRttiKind_ParameterizedDelegate = 0x6,
	WinrtRttiKind_ParameterizedDelegateInstance = 0x7
};

struct WinrtRttiNamespace_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/
};

struct WinrtRttiParameterizedDelegateInstance_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/ _GUID const * Iid;
	/*0030*/ WinrtRtti const * ParameterizedDelegate;
	/*0038*/
};

struct WinrtRttiParameterizedDelegate_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/
};

struct WinrtRttiParameterizedInterfaceInstance_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/ _GUID const * Iid;
	/*0030*/ WinrtRtti const * ParameterizedInterface;
	/*0038*/
};

struct WinrtRttiParameterizedInterface_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/
};

enum XLAT_SIDE {
	XLAT_SERVER = 0x1,
	XLAT_CLIENT = 0x2
};

struct XMLDOMDocumentEvents : IDispatch {
	void XMLDOMDocumentEvents( XMLDOMDocumentEvents && );
	void XMLDOMDocumentEvents( XMLDOMDocumentEvents const & );
	void XMLDOMDocumentEvents();
	XMLDOMDocumentEvents & operator=( XMLDOMDocumentEvents && );
	XMLDOMDocumentEvents & operator=( XMLDOMDocumentEvents const & );
	/*0008*/
};

struct XSAVE_CPU_ERRATA {
	/*0000*/ ULONG NumberOfErrata;
	/*0008*/ XSAVE_CPU_INFO Errata[0x1];
	/*0028*/
};

struct XSAVE_CPU_INFO {
	/*0000*/ UCHAR Processor;
	/*0002*/ USHORT Family;
	/*0004*/ USHORT Model;
	/*0006*/ USHORT Stepping;
	/*0008*/ USHORT ExtendedModel;
	/*000c*/ ULONG ExtendedFamily;
	/*0010*/ ULONGLONG MicrocodeVersion;
	/*0018*/ ULONG Reserved;
	/*0020*/
};

struct _ABC {
	/*0000*/ INT abcA;
	/*0004*/ UINT abcB;
	/*0008*/ INT abcC;
	/*000c*/
};

struct _ABCFLOAT {
	/*0000*/ float abcfA;
	/*0004*/ float abcfB;
	/*0008*/ float abcfC;
	/*000c*/
};

struct _ACCESS_ALLOWED_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _ACCESS_ALLOWED_CALLBACK_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _ACCESS_ALLOWED_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _ACCESS_DENIED_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _ACCESS_DENIED_CALLBACK_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _ACCESS_DENIED_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _ACCESS_REASONS {
	/*0000*/ ULONG Data[0x20];
	/*0080*/
};

enum _ACCESS_REASON_TYPE {
	AccessReasonNone = 0x0,
	AccessReasonAllowedAce = 0x10000,
	AccessReasonDeniedAce = 0x20000,
	AccessReasonAllowedParentAce = 0x30000,
	AccessReasonDeniedParentAce = 0x40000,
	AccessReasonNotGrantedByCape = 0x50000,
	AccessReasonNotGrantedByParentCape = 0x60000,
	AccessReasonNotGrantedToAppContainer = 0x70000,
	AccessReasonMissingPrivilege = 0x100000,
	AccessReasonFromPrivilege = 0x200000,
	AccessReasonIntegrityLevel = 0x300000,
	AccessReasonOwnership = 0x400000,
	AccessReasonNullDacl = 0x500000,
	AccessReasonEmptyDacl = 0x600000,
	AccessReasonNoSD = 0x700000,
	AccessReasonNoGrant = 0x800000,
	AccessReasonTrustLabel = 0x900000,
	AccessReasonFilterAce = 0xa00000
};

struct _ACE_HEADER {
	/*0000*/ UCHAR AceType;
	/*0001*/ UCHAR AceFlags;
	/*0002*/ USHORT AceSize;
	/*0004*/
};

struct _ACL {
	/*0000*/ UCHAR AclRevision;
	/*0001*/ UCHAR Sbz1;
	/*0002*/ USHORT AclSize;
	/*0004*/ USHORT AceCount;
	/*0006*/ USHORT Sbz2;
	/*0008*/
};

enum _ACL_INFORMATION_CLASS {
	AclRevisionInformation = 0x1,
	AclSizeInformation = 0x2
};

struct _ACL_REVISION_INFORMATION {
	/*0000*/ ULONG AclRevision;
	/*0004*/
};

struct _ACL_SIZE_INFORMATION {
	/*0000*/ ULONG AceCount;
	/*0004*/ ULONG AclBytesInUse;
	/*0008*/ ULONG AclBytesFree;
	/*000c*/
};

struct _ACTIVATION_CONTEXT;

struct _ACTIVATION_CONTEXT_ASSEMBLY_DATA {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ WCHAR const * AssemblyName;
	/*0010*/ ULONG AssemblyNameLength;
	/*0014*/ ULONG HashAlgorithm;
	/*0018*/ ULONG PseudoKey;
	/*0020*/
};

struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
	/*0000*/ ULONG ulFlags;
	/*0004*/ ULONG ulEncodedAssemblyIdentityLength;
	/*0008*/ ULONG ulManifestPathType;
	/*000c*/ ULONG ulManifestPathLength;
	/*0010*/ _LARGE_INTEGER liManifestLastWriteTime;
	/*0018*/ ULONG ulPolicyPathType;
	/*001c*/ ULONG ulPolicyPathLength;
	/*0020*/ _LARGE_INTEGER liPolicyLastWriteTime;
	/*0028*/ ULONG ulMetadataSatelliteRosterIndex;
	/*002c*/ ULONG ulManifestVersionMajor;
	/*0030*/ ULONG ulManifestVersionMinor;
	/*0034*/ ULONG ulPolicyVersionMajor;
	/*0038*/ ULONG ulPolicyVersionMinor;
	/*003c*/ ULONG ulAssemblyDirectoryNameLength;
	/*0040*/ WCHAR const * lpAssemblyEncodedAssemblyIdentity;
	/*0048*/ WCHAR const * lpAssemblyManifestPath;
	/*0050*/ WCHAR const * lpAssemblyPolicyPath;
	/*0058*/ WCHAR const * lpAssemblyDirectoryName;
	/*0060*/ ULONG ulFileCount;
	/*0068*/
};

struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
	/*0000*/ _ACTIVATION_CONTEXT * ActivationContext;
	/*0000*/ void * hActCtx;
	/*0008*/ ULONG Flags;
	/*0008*/ ULONG dwFlags;
	/*0010*/
};

struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
	/*0000*/ ULONG ElementCount;
	/*0008*/ _COMPATIBILITY_CONTEXT_ELEMENT Elements[];
	/*0008*/
};

struct _ACTIVATION_CONTEXT_DATA;

struct _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION;

struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
	/*0000*/ ULONG dwFlags;
	/*0004*/ ULONG ulFormatVersion;
	/*0008*/ ULONG ulAssemblyCount;
	/*000c*/ ULONG ulRootManifestPathType;
	/*0010*/ ULONG ulRootManifestPathChars;
	/*0014*/ ULONG ulRootConfigurationPathType;
	/*0018*/ ULONG ulRootConfigurationPathChars;
	/*001c*/ ULONG ulAppDirPathType;
	/*0020*/ ULONG ulAppDirPathChars;
	/*0028*/ WCHAR const * lpRootManifestPath;
	/*0030*/ WCHAR const * lpRootConfigurationPath;
	/*0038*/ WCHAR const * lpAppDirPath;
	/*0040*/
};

enum _ACTIVATION_CONTEXT_INFO_CLASS {
	ActivationContextBasicInformation = 0x1,
	ActivationContextDetailedInformation = 0x2,
	AssemblyDetailedInformationInActivationContext = 0x3,
	FileInformationInAssemblyOfAssemblyInActivationContext = 0x4,
	RunlevelInformationInActivationContext = 0x5,
	CompatibilityInformationInActivationContext = 0x6,
	ActivationContextManifestResourceName = 0x7,
	MaxActivationContextInfoClass = 0x8,
	AssemblyDetailedInformationInActivationContxt = 0x3,
	FileInformationInAssemblyOfAssemblyInActivationContxt = 0x4
};

struct _ACTIVATION_CONTEXT_MSIX_INFO {
	/*0000*/ WCHAR ApplicationUserModelId[0x82];
	/*0104*/
};

struct _ACTIVATION_CONTEXT_QUERY_INDEX {
	/*0000*/ ULONG ulAssemblyIndex;
	/*0004*/ ULONG ulFileIndexInAssembly;
	/*0008*/
};

struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
	/*0000*/ ULONG ulFlags;
	/*0004*/ ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
	/*0008*/ ULONG UiAccess;
	/*000c*/
};

struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG DataFormatVersion;
	/*0008*/ void * Data;
	/*0010*/ ULONG Length;
	/*0018*/ void * SectionGlobalData;
	/*0020*/ ULONG SectionGlobalDataLength;
	/*0028*/ void * SectionBase;
	/*0030*/ ULONG SectionTotalLength;
	/*0038*/ _ACTIVATION_CONTEXT * ActivationContext;
	/*0040*/ ULONG AssemblyRosterIndex;
	/*0044*/ ULONG Flags;
	/*0048*/ _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
	/*0070*/
};

struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_2600 {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG DataFormatVersion;
	/*0008*/ void * Data;
	/*0010*/ ULONG Length;
	/*0018*/ void * SectionGlobalData;
	/*0020*/ ULONG SectionGlobalDataLength;
	/*0028*/ void * SectionBase;
	/*0030*/ ULONG SectionTotalLength;
	/*0038*/ _ACTIVATION_CONTEXT * ActivationContext;
	/*0040*/ ULONG AssemblyRosterIndex;
	/*0044*/ ULONG Flags;
	/*0048*/
};

struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
	/*0000*/ _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION * Information;
	/*0008*/ void * SectionBase;
	/*0010*/ ULONG SectionLength;
	/*0018*/ void * SectionGlobalDataBase;
	/*0020*/ ULONG SectionGlobalDataLength;
	/*0028*/
};

struct _ACTIVATION_CONTEXT_STACK {
	/*0000*/ _RTL_ACTIVATION_CONTEXT_STACK_FRAME * ActiveFrame;
	/*0008*/ _LIST_ENTRY FrameListCache;
	/*0018*/ ULONG Flags;
	/*001c*/ ULONG NextCookieSequenceNumber;
	/*0020*/ ULONG StackId;
	/*0028*/
};

struct _ADMINISTRATOR_POWER_POLICY {
	/*0000*/ _SYSTEM_POWER_STATE MinSleep;
	/*0004*/ _SYSTEM_POWER_STATE MaxSleep;
	/*0008*/ ULONG MinVideoTimeout;
	/*000c*/ ULONG MaxVideoTimeout;
	/*0010*/ ULONG MinSpindownTimeout;
	/*0014*/ ULONG MaxSpindownTimeout;
	/*0018*/
};

struct _ALPC_BASIC_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG SequenceNo;
	/*0008*/ void * PortContext;
	/*0010*/
};

struct _ALPC_CONTEXT_ATTR {
	/*0000*/ void * PortContext;
	/*0008*/ void * MessageContext;
	/*0010*/ ULONG Sequence;
	/*0014*/ ULONG MessageId;
	/*0018*/ ULONG CallbackId;
	/*0020*/
};

struct _ALPC_DATA_VIEW_ATTR {
	/*0000*/ ULONG Flags;
	/*0008*/ void * SectionHandle;
	/*0010*/ void * ViewBase;
	/*0018*/ ULONGLONG ViewSize;
	/*0020*/
};

struct _ALPC_DIRECT_ATTR {
	/*0000*/ void * Event;
	/*0008*/
};

struct _ALPC_HANDLE_ATTR {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG Reserved0 : 16; // 0x0000ffff;
	/*0000*/ ULONG SameAccess : 01; // 0x00010000;
	/*0000*/ ULONG SameAttributes : 01; // 0x00020000;
	/*0000*/ ULONG Indirect : 01; // 0x00040000;
	/*0000*/ ULONG Inherit : 01; // 0x00080000;
	/*0000*/ ULONG Reserved1 : 12; // 0xfff00000;
	/*0008*/ void * Handle;
	/*0008*/ _ALPC_HANDLE_ATTR32 * HandleAttrArray;
	/*0010*/ ULONG ObjectType;
	/*0010*/ ULONG HandleCount;
	/*0014*/ ULONG DesiredAccess;
	/*0014*/ ULONG GrantedAccess;
	/*0018*/
};

struct _ALPC_HANDLE_ATTR32 {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG Reserved0 : 16; // 0x0000ffff;
	/*0000*/ ULONG SameAccess : 01; // 0x00010000;
	/*0000*/ ULONG SameAttributes : 01; // 0x00020000;
	/*0000*/ ULONG Indirect : 01; // 0x00040000;
	/*0000*/ ULONG Inherit : 01; // 0x00080000;
	/*0000*/ ULONG Reserved1 : 12; // 0xfff00000;
	/*0004*/ ULONG Handle;
	/*0008*/ ULONG ObjectType;
	/*000c*/ ULONG DesiredAccess;
	/*000c*/ ULONG GrantedAccess;
	/*0010*/
};

struct _ALPC_MESSAGE_ATTRIBUTES {
	/*0000*/ ULONG AllocatedAttributes;
	/*0004*/ ULONG ValidAttributes;
	/*0008*/
};

struct _ALPC_MESSAGE_HANDLE_INFORMATION {
	/*0000*/ ULONG Index;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG Handle;
	/*000c*/ ULONG ObjectType;
	/*0010*/ ULONG GrantedAccess;
	/*0014*/
};

enum _ALPC_MESSAGE_INFORMATION_CLASS {
	AlpcMessageSidInformation = 0x0,
	AlpcMessageTokenModifiedIdInformation = 0x1,
	AlpcMessageDirectStatusInformation = 0x2,
	AlpcMessageHandleInformation = 0x3
};

struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT {
	/*0000*/ void * CompletionKey;
	/*0008*/ void * CompletionPort;
	/*0010*/
};

struct _ALPC_PORT_ATTRIBUTES {
	/*0000*/ ULONG Flags;
	/*0004*/ _SECURITY_QUALITY_OF_SERVICE SecurityQos;
	/*0010*/ ULONGLONG MaxMessageLength;
	/*0018*/ ULONGLONG MemoryBandwidth;
	/*0020*/ ULONGLONG MaxPoolUsage;
	/*0028*/ ULONGLONG MaxSectionSize;
	/*0030*/ ULONGLONG MaxViewSize;
	/*0038*/ ULONGLONG MaxTotalSectionSize;
	/*0040*/ ULONG DupObjectTypes;
	/*0044*/ ULONG Reserved;
	/*0048*/
};

struct _ALPC_PORT_CALLBACK_INFORMATION {
	/*0000*/ void * CallbackObject;
	/*0008*/ void * Context;
	/*0010*/
};

struct _ALPC_PORT_COMPLETION_LIST_INFORMATION {
	/*0000*/ void * Buffer;
	/*0008*/ ULONG Size;
	/*000c*/ ULONG ConcurrencyCount;
	/*0010*/ ULONG AttributeFlags;
	/*0018*/
};

enum _ALPC_PORT_INFORMATION_CLASS {
	AlpcBasicInformation = 0x0,
	AlpcPortInformation = 0x1,
	AlpcAssociateCompletionPortInformation = 0x2,
	AlpcConnectedSIDInformation = 0x3,
	AlpcServerInformation = 0x4,
	AlpcMessageZoneInformation = 0x5,
	AlpcRegisterCompletionListInformation = 0x6,
	AlpcUnregisterCompletionListInformation = 0x7,
	AlpcAdjustCompletionListConcurrencyCountInformation = 0x8,
	AlpcRegisterCallbackInformation = 0x9,
	AlpcCompletionListRundownInformation = 0xa,
	AlpcWaitForPortReferences = 0xb,
	AlpcServerSessionInformation = 0xc
};

struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION {
	/*0000*/ void * Buffer;
	/*0008*/ ULONG Size;
	/*0010*/
};

struct _ALPC_SECURITY_ATTR {
	/*0000*/ ULONG Flags;
	/*0008*/ _SECURITY_QUALITY_OF_SERVICE * QoS;
	/*0010*/ void * ContextHandle;
	/*0018*/
};

struct _ALPC_SERVER_INFORMATION {
	
	/*0000*/ <unnamed-type-In> In;
	/*0000*/ <unnamed-type-Out> Out;
	/*0020*/
};

struct _ALPC_SERVER_SESSION_INFORMATION {
	/*0000*/ ULONG SessionId;
	/*0004*/ ULONG ProcessId;
	/*0008*/
};

struct _ALPC_TOKEN_ATTR {
	/*0000*/ _LUID TokenId;
	/*0008*/ _LUID AuthenticationId;
	/*0010*/ _LUID ModifiedId;
	/*0018*/
};

struct _ALPC_WORK_ON_BEHALF_ATTR {
	/*0000*/ _ALPC_WORK_ON_BEHALF_TICKET Ticket;
	/*0008*/
};

struct _ALPC_WORK_ON_BEHALF_TICKET {
	/*0000*/ ULONG ThreadId;
	/*0004*/ ULONG ThreadCreationTimeLow;
	/*0008*/
};

enum _ALTERNATIVE_ARCHITECTURE_TYPE {
	StandardDesign = 0x0,
	NEC98x86 = 0x1,
	EndAlternatives = 0x2
};

struct _AMD64_CONTEXT;

union _AMD64_MXCSR_REG {
	/*0000*/ ULONG Value;
	/*0000*/ ULONG IE : 01; // 0x00000001;
	/*0000*/ ULONG DE : 01; // 0x00000002;
	/*0000*/ ULONG ZE : 01; // 0x00000004;
	/*0000*/ ULONG OE : 01; // 0x00000008;
	/*0000*/ ULONG UE : 01; // 0x00000010;
	/*0000*/ ULONG PE : 01; // 0x00000020;
	/*0000*/ ULONG DAZ : 01; // 0x00000040;
	/*0000*/ ULONG IM : 01; // 0x00000080;
	/*0000*/ ULONG DM : 01; // 0x00000100;
	/*0000*/ ULONG ZM : 01; // 0x00000200;
	/*0000*/ ULONG OM : 01; // 0x00000400;
	/*0000*/ ULONG UM : 01; // 0x00000800;
	/*0000*/ ULONG PM : 01; // 0x00001000;
	/*0000*/ ULONG RC : 02; // 0x00006000;
	/*0000*/ ULONG FZ : 01; // 0x00008000;
	/*0000*/ ULONG res : 16; // 0xffff0000;
	/*0004*/
};

struct _APC_CALLBACK_DATA {
	/*0000*/ ULONGLONG Parameter;
	/*0008*/ _CONTEXT * ContextRecord;
	/*0010*/ ULONGLONG Reserved0;
	/*0018*/ ULONGLONG Reserved1;
	/*0020*/
};

enum _APPCONTAINER_SID_TYPE {
	NotAppContainerSidType = 0x0,
	ChildAppContainerSidType = 0x1,
	ParentAppContainerSidType = 0x2,
	InvalidAppContainerSidType = 0x3,
	MaxAppContainerSidType = 0x4
};

struct _APPLICATIONLAUNCH_SETTING_VALUE {
	/*0000*/ _LARGE_INTEGER ActivationTime;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG ButtonInstanceID;
	/*0010*/
};

struct _APP_MEMORY_INFORMATION {
	/*0000*/ ULONGLONG AvailableCommit;
	/*0008*/ ULONGLONG PrivateCommitUsage;
	/*0010*/ ULONGLONG PeakPrivateCommitUsage;
	/*0018*/ ULONGLONG TotalCommitUsage;
	/*0020*/
};

enum _APTTYPE {
	APTTYPE_CURRENT = 0xffffffff,
	APTTYPE_STA = 0x0,
	APTTYPE_MTA = 0x1,
	APTTYPE_NA = 0x2,
	APTTYPE_MAINSTA = 0x3
};

enum _APTTYPEQUALIFIER {
	APTTYPEQUALIFIER_NONE = 0x0,
	APTTYPEQUALIFIER_IMPLICIT_MTA = 0x1,
	APTTYPEQUALIFIER_NA_ON_MTA = 0x2,
	APTTYPEQUALIFIER_NA_ON_STA = 0x3,
	APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 0x4,
	APTTYPEQUALIFIER_NA_ON_MAINSTA = 0x5,
	APTTYPEQUALIFIER_APPLICATION_STA = 0x6,
	APTTYPEQUALIFIER_RESERVED_1 = 0x7
};

struct _ARM64EC_NT_CONTEXT {
	/*0000*/ ULONGLONG AMD64_P1Home;
	/*0008*/ ULONGLONG AMD64_P2Home;
	/*0010*/ ULONGLONG AMD64_P3Home;
	/*0018*/ ULONGLONG AMD64_P4Home;
	/*0020*/ ULONGLONG AMD64_P5Home;
	/*0028*/ ULONGLONG AMD64_P6Home;
	/*0030*/ ULONG ContextFlags;
	/*0034*/ ULONG AMD64_MxCsr_copy;
	/*0038*/ USHORT AMD64_SegCs;
	/*003a*/ USHORT AMD64_SegDs;
	/*003c*/ USHORT AMD64_SegEs;
	/*003e*/ USHORT AMD64_SegFs;
	/*0040*/ USHORT AMD64_SegGs;
	/*0042*/ USHORT AMD64_SegSs;
	/*0044*/ ULONG AMD64_EFlags;
	/*0048*/ ULONGLONG AMD64_Dr0;
	/*0050*/ ULONGLONG AMD64_Dr1;
	/*0058*/ ULONGLONG AMD64_Dr2;
	/*0060*/ ULONGLONG AMD64_Dr3;
	/*0068*/ ULONGLONG AMD64_Dr6;
	/*0070*/ ULONGLONG AMD64_Dr7;
	/*0078*/ ULONGLONG X8;
	/*0080*/ ULONGLONG X0;
	/*0088*/ ULONGLONG X1;
	/*0090*/ ULONGLONG X27;
	/*0098*/ ULONGLONG Sp;
	/*00a0*/ ULONGLONG Fp;
	/*00a8*/ ULONGLONG X25;
	/*00b0*/ ULONGLONG X26;
	/*00b8*/ ULONGLONG X2;
	/*00c0*/ ULONGLONG X3;
	/*00c8*/ ULONGLONG X4;
	/*00d0*/ ULONGLONG X5;
	/*00d8*/ ULONGLONG X19;
	/*00e0*/ ULONGLONG X20;
	/*00e8*/ ULONGLONG X21;
	/*00f0*/ ULONGLONG X22;
	/*00f8*/ ULONGLONG Pc;
	/*0100*/ USHORT AMD64_ControlWord;
	/*0102*/ USHORT AMD64_StatusWord;
	/*0104*/ UCHAR AMD64_TagWord;
	/*0105*/ UCHAR AMD64_Reserved1;
	/*0106*/ USHORT AMD64_ErrorOpcode;
	/*0108*/ ULONG AMD64_ErrorOffset;
	/*010c*/ USHORT AMD64_ErrorSelector;
	/*010e*/ USHORT AMD64_Reserved2;
	/*0110*/ ULONG AMD64_DataOffset;
	/*0114*/ USHORT AMD64_DataSelector;
	/*0116*/ USHORT AMD64_Reserved3;
	/*0118*/ ULONG AMD64_MxCsr;
	/*011c*/ ULONG AMD64_MxCsr_Mask;
	/*0120*/ ULONGLONG Lr;
	/*0128*/ USHORT X16_0;
	/*012a*/ USHORT AMD64_St0_Reserved1;
	/*012c*/ ULONG AMD64_St0_Reserved2;
	/*0130*/ ULONGLONG X6;
	/*0138*/ USHORT X16_1;
	/*013a*/ USHORT AMD64_St1_Reserved1;
	/*013c*/ ULONG AMD64_St1_Reserved2;
	/*0140*/ ULONGLONG X7;
	/*0148*/ USHORT X16_2;
	/*014a*/ USHORT AMD64_St2_Reserved1;
	/*014c*/ ULONG AMD64_St2_Reserved2;
	/*0150*/ ULONGLONG X9;
	/*0158*/ USHORT X16_3;
	/*015a*/ USHORT AMD64_St3_Reserved1;
	/*015c*/ ULONG AMD64_St3_Reserved2;
	/*0160*/ ULONGLONG X10;
	/*0168*/ USHORT X17_0;
	/*016a*/ USHORT AMD64_St4_Reserved1;
	/*016c*/ ULONG AMD64_St4_Reserved2;
	/*0170*/ ULONGLONG X11;
	/*0178*/ USHORT X17_1;
	/*017a*/ USHORT AMD64_St5_Reserved1;
	/*017c*/ ULONG AMD64_St5_Reserved2;
	/*0180*/ ULONGLONG X12;
	/*0188*/ USHORT X17_2;
	/*018a*/ USHORT AMD64_St6_Reserved1;
	/*018c*/ ULONG AMD64_St6_Reserved2;
	/*0190*/ ULONGLONG X15;
	/*0198*/ USHORT X17_3;
	/*019a*/ USHORT AMD64_St7_Reserved1;
	/*019c*/ ULONG AMD64_St7_Reserved2;
	/*01a0*/ _ARM64_NT_NEON128 V[0x10];
	/*02a0*/ UCHAR AMD64_XSAVE_FORMAT_Reserved4[0x60];
	/*0300*/ _ARM64_NT_NEON128 AMD64_VectorRegister[0x1a];
	/*04a0*/ ULONGLONG AMD64_VectorControl;
	/*04a8*/ ULONGLONG AMD64_DebugControl;
	/*04b0*/ ULONGLONG AMD64_LastBranchToRip;
	/*04b8*/ ULONGLONG AMD64_LastBranchFromRip;
	/*04c0*/ ULONGLONG AMD64_LastExceptionToRip;
	/*04c8*/ ULONGLONG AMD64_LastExceptionFromRip;
	/*04d0*/
};

struct _ARM64_CONTEXT;

union _ARM64_FPCR_REG {
	/*0000*/ ULONG Value;
	/*0000*/ ULONG res0_1 : 08; // 0x000000ff;
	/*0000*/ ULONG IOE : 01; // 0x00000100;
	/*0000*/ ULONG DZE : 01; // 0x00000200;
	/*0000*/ ULONG OFE : 01; // 0x00000400;
	/*0000*/ ULONG UFE : 01; // 0x00000800;
	/*0000*/ ULONG IXE : 01; // 0x00001000;
	/*0000*/ ULONG res0_2 : 02; // 0x00006000;
	/*0000*/ ULONG IDE : 01; // 0x00008000;
	/*0000*/ ULONG Len : 03; // 0x00070000;
	/*0000*/ ULONG FZ16 : 01; // 0x00080000;
	/*0000*/ ULONG Stride : 02; // 0x00300000;
	/*0000*/ ULONG RMode : 02; // 0x00c00000;
	/*0000*/ ULONG FZ : 01; // 0x01000000;
	/*0000*/ ULONG DN : 01; // 0x02000000;
	/*0000*/ ULONG AHP : 01; // 0x04000000;
	/*0000*/ ULONG res0_3 : 05; // 0xf8000000;
	/*0004*/
};

union _ARM64_FPSR_REG {
	/*0000*/ ULONG Value;
	/*0000*/ ULONG IOC : 01; // 0x00000001;
	/*0000*/ ULONG DZC : 01; // 0x00000002;
	/*0000*/ ULONG OFC : 01; // 0x00000004;
	/*0000*/ ULONG UFC : 01; // 0x00000008;
	/*0000*/ ULONG IXC : 01; // 0x00000010;
	/*0000*/ ULONG res0_1 : 02; // 0x00000060;
	/*0000*/ ULONG IDC : 01; // 0x00000080;
	/*0000*/ ULONG res0_2 : 19; // 0x07ffff00;
	/*0000*/ ULONG QC : 01; // 0x08000000;
	/*0000*/ ULONG V : 01; // 0x10000000;
	/*0000*/ ULONG C : 01; // 0x20000000;
	/*0000*/ ULONG Z : 01; // 0x40000000;
	/*0000*/ ULONG N : 01; // 0x80000000;
	/*0004*/
};

struct _ARM64_NT_CONTEXT {
	/*0000*/ ULONG ContextFlags;
	/*0004*/ ULONG Cpsr;
	/*0008*/ ULONGLONG X0;
	/*0010*/ ULONGLONG X1;
	/*0018*/ ULONGLONG X2;
	/*0020*/ ULONGLONG X3;
	/*0028*/ ULONGLONG X4;
	/*0030*/ ULONGLONG X5;
	/*0038*/ ULONGLONG X6;
	/*0040*/ ULONGLONG X7;
	/*0048*/ ULONGLONG X8;
	/*0050*/ ULONGLONG X9;
	/*0058*/ ULONGLONG X10;
	/*0060*/ ULONGLONG X11;
	/*0068*/ ULONGLONG X12;
	/*0070*/ ULONGLONG X13;
	/*0078*/ ULONGLONG X14;
	/*0080*/ ULONGLONG X15;
	/*0088*/ ULONGLONG X16;
	/*0090*/ ULONGLONG X17;
	/*0098*/ ULONGLONG X18;
	/*00a0*/ ULONGLONG X19;
	/*00a8*/ ULONGLONG X20;
	/*00b0*/ ULONGLONG X21;
	/*00b8*/ ULONGLONG X22;
	/*00c0*/ ULONGLONG X23;
	/*00c8*/ ULONGLONG X24;
	/*00d0*/ ULONGLONG X25;
	/*00d8*/ ULONGLONG X26;
	/*00e0*/ ULONGLONG X27;
	/*00e8*/ ULONGLONG X28;
	/*00f0*/ ULONGLONG Fp;
	/*00f8*/ ULONGLONG Lr;
	/*0008*/ ULONGLONG X[0x1f];
	/*0100*/ ULONGLONG Sp;
	/*0108*/ ULONGLONG Pc;
	/*0110*/ _ARM64_NT_NEON128 V[0x20];
	/*0310*/ ULONG Fpcr;
	/*0314*/ ULONG Fpsr;
	/*0318*/ ULONG Bcr[0x8];
	/*0338*/ ULONGLONG Bvr[0x8];
	/*0378*/ ULONG Wcr[0x2];
	/*0380*/ ULONGLONG Wvr[0x2];
	/*0390*/
};

union _ARM64_NT_NEON128 {
	/*0000*/ ULONGLONG Low;
	/*0008*/ LONGLONG High;
	/*0000*/ double D[0x2];
	/*0000*/ float S[0x4];
	/*0000*/ USHORT H[0x8];
	/*0000*/ UCHAR B[0x10];
	/*0010*/
};

struct _ARM_CONTEXT;

struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
	/*0000*/ ULONG ulFlags;
	/*0004*/ ULONG ulFilenameLength;
	/*0008*/ ULONG ulPathLength;
	/*0010*/ WCHAR const * lpFileName;
	/*0018*/ WCHAR const * lpFilePath;
	/*0020*/
};

struct _ASSEMBLY_STORAGE_MAP;

union _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA {
	/*0000*/ _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_BEGINNING ResolutionBeginning;
	/*0000*/ _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_GET_ROOT GetRoot;
	/*0000*/ _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_SUCCESSFUL ResolutionSuccessful;
	/*0000*/ _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_ENDING ResolutionEnding;
	/*0040*/
};

struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_GET_ROOT {
	/*0000*/ void * ResolutionContext;
	/*0008*/ ULONGLONG RootIndex;
	/*0010*/ UCHAR CancelResolution;
	/*0011*/ UCHAR NoMoreEntries;
	/*0018*/ _UNICODE_STRING Root;
	/*0028*/
};

struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_BEGINNING {
	/*0000*/ void const * Data;
	/*0008*/ ULONG AssemblyRosterIndex;
	/*0010*/ void * ResolutionContext;
	/*0018*/ _UNICODE_STRING Root;
	/*0028*/ UCHAR KnownRoot;
	/*0030*/ ULONGLONG RootCount;
	/*0038*/ UCHAR CancelResolution;
	/*0040*/
};

struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_ENDING {
	/*0000*/ void * ResolutionContext;
	/*0008*/
};

struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_SUCCESSFUL {
	/*0000*/ void * ResolutionContext;
	/*0008*/ ULONG RootIndexUsed;
	/*0010*/
};

struct _ASYNC_DUPLICATE_EXTENTS_STATUS {
	/*0000*/ ULONG Version;
	/*0004*/ _DUPLICATE_EXTENTS_STATE State;
	/*0008*/ ULONGLONG SourceFileOffset;
	/*0010*/ ULONGLONG TargetFileOffset;
	/*0018*/ ULONGLONG ByteCount;
	/*0020*/ ULONGLONG BytesDuplicated;
	/*0028*/
};

struct _ATOM_BASIC_INFORMATION {
	/*0000*/ USHORT UsageCount;
	/*0002*/ USHORT Flags;
	/*0004*/ USHORT NameLength;
	/*0006*/ WCHAR Name[0x1];
	/*0008*/
};

enum _ATOM_INFORMATION_CLASS {
	AtomBasicInformation = 0x0,
	AtomTableInformation = 0x1
};

struct _ATOM_TABLE_INFORMATION {
	/*0000*/ ULONG NumberOfAtoms;
	/*0004*/ USHORT Atoms[0x1];
	/*0008*/
};

enum _AUDIT_EVENT_TYPE {
	AuditEventObjectAccess = 0x0,
	AuditEventDirectoryServiceAccess = 0x1
};

struct _BLENDFUNCTION {
	/*0000*/ UCHAR BlendOp;
	/*0001*/ UCHAR BlendFlags;
	/*0002*/ UCHAR SourceConstantAlpha;
	/*0003*/ UCHAR AlphaFormat;
	/*0004*/
};

struct _BOOT_AREA_INFO {
	
	/*0000*/ ULONG BootSectorCount;
	/*0008*/ <unnamed-type-BootSectors> BootSectors[0x2];
	/*0018*/
};

struct _BOOT_ENTROPY_NT_RESULT {
	/*0000*/ ULONG maxEntropySources;
	/*0008*/ _BOOT_ENTROPY_SOURCE_NT_RESULT EntropySourceResult[0xa];
	/*0418*/ UCHAR SeedBytesForCng[0x30];
	/*0448*/
};

enum _BOOT_ENTROPY_SOURCE_ID {
	BootEntropySourceNone = 0x0,
	BootEntropySourceSeedfile = 0x1,
	BootEntropySourceExternal = 0x2,
	BootEntropySourceTpm = 0x3,
	BootEntropySourceRdrand = 0x4,
	BootEntropySourceTime = 0x5,
	BootEntropySourceAcpiOem0 = 0x6,
	BootEntropySourceUefi = 0x7,
	BootEntropySourceCng = 0x8,
	BootEntropySourceTcbTpm = 0x9,
	BootEntropySourceTcbRdrand = 0xa,
	BootMaxEntropySources = 0xa
};

struct _BOOT_ENTROPY_SOURCE_NT_RESULT {
	/*0000*/ _BOOT_ENTROPY_SOURCE_ID SourceId;
	/*0008*/ ULONGLONG Policy;
	/*0010*/ _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;
	/*0014*/ LONG ResultStatus;
	/*0018*/ ULONGLONG Time;
	/*0020*/ ULONG EntropyLength;
	/*0024*/ UCHAR EntropyData[0x40];
	/*0068*/
};

enum _BOOT_ENTROPY_SOURCE_RESULT_CODE {
	BootEntropySourceStructureUninitialized = 0x0,
	BootEntropySourceDisabledByPolicy = 0x1,
	BootEntropySourceNotPresent = 0x2,
	BootEntropySourceError = 0x3,
	BootEntropySourceSuccess = 0x4
};

struct _BOOT_ENTRY {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Id;
	/*000c*/ ULONG Attributes;
	/*0010*/ ULONG FriendlyNameOffset;
	/*0014*/ ULONG BootFilePathOffset;
	/*0018*/ ULONG OsOptionsLength;
	/*001c*/ UCHAR OsOptions[0x1];
	/*0020*/
};

struct _BOOT_ENTRY_LIST {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ _BOOT_ENTRY BootEntry;
	/*0024*/
};

struct _BOOT_OPTIONS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Timeout;
	/*000c*/ ULONG CurrentBootEntryId;
	/*0010*/ ULONG NextBootEntryId;
	/*0014*/ WCHAR HeadlessRedirection[0x1];
	/*0018*/
};

enum _BUS_DATA_TYPE {
	ConfigurationSpaceUndefined = 0xffffffff,
	Cmos = 0x0,
	EisaConfiguration = 0x1,
	Pos = 0x2,
	CbusConfiguration = 0x3,
	PCIConfiguration = 0x4,
	VMEConfiguration = 0x5,
	NuBusConfiguration = 0x6,
	PCMCIAConfiguration = 0x7,
	MPIConfiguration = 0x8,
	MPSAConfiguration = 0x9,
	PNPISAConfiguration = 0xa,
	SgiInternalConfiguration = 0xb,
	MaximumBusDataType = 0xc
};

struct _BYTE_BLOB {
	/*0000*/ ULONG clSize;
	/*0004*/ UCHAR abData[0x1];
	/*0008*/
};

struct _BYTE_SIZEDARR {
	/*0000*/ ULONG clSize;
	/*0008*/ UCHAR * pData;
	/*0010*/
};

struct _BY_HANDLE_FILE_INFORMATION {
	/*0000*/ ULONG dwFileAttributes;
	/*0004*/ _FILETIME ftCreationTime;
	/*000c*/ _FILETIME ftLastAccessTime;
	/*0014*/ _FILETIME ftLastWriteTime;
	/*001c*/ ULONG dwVolumeSerialNumber;
	/*0020*/ ULONG nFileSizeHigh;
	/*0024*/ ULONG nFileSizeLow;
	/*0028*/ ULONG nNumberOfLinks;
	/*002c*/ ULONG nFileIndexHigh;
	/*0030*/ ULONG nFileIndexLow;
	/*0034*/
};

struct _CACHE_DESCRIPTOR {
	/*0000*/ UCHAR Level;
	/*0001*/ UCHAR Associativity;
	/*0002*/ USHORT LineSize;
	/*0004*/ ULONG Size;
	/*0008*/ _PROCESSOR_CACHE_TYPE Type;
	/*000c*/
};

struct _CACHE_RELATIONSHIP {
	/*0000*/ UCHAR Level;
	/*0001*/ UCHAR Associativity;
	/*0002*/ USHORT LineSize;
	/*0004*/ ULONG CacheSize;
	/*0008*/ _PROCESSOR_CACHE_TYPE Type;
	/*000c*/ UCHAR Reserved[0x12];
	/*001e*/ USHORT GroupCount;
	/*0020*/ _GROUP_AFFINITY GroupMask;
	/*0020*/ _GROUP_AFFINITY GroupMasks[0x1];
	/*0030*/
};

struct _CALL_FRAME {
	/*0000*/ void * ReturnAddress;
	/*0008*/ void * Param1Home;
	/*0010*/ void * Param2Home;
	/*0018*/ void * Param3Home;
	/*0020*/ void * Param4Home;
	/*0028*/
};

struct _CFG_CALL_TARGET_INFO {
	/*0000*/ ULONGLONG Offset;
	/*0008*/ ULONGLONG Flags;
	/*0010*/
};

struct _CFG_CALL_TARGET_LIST_INFORMATION {
	/*0000*/ ULONG NumberOfEntries;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONG * NumberOfEntriesProcessed;
	/*0010*/ _CFG_CALL_TARGET_INFO * CallTargetInfo;
	/*0018*/ void * Section;
	/*0020*/ ULONGLONG FileOffset;
	/*0028*/
};

struct _CHAR_INFO {
	
	/*0000*/ <unnamed-type-Char> Char;
	/*0002*/ USHORT Attributes;
	/*0004*/
};

struct _CHPEV2_CPUAREA_INFO;

struct _CHPEV2_PROCESS_INFO;

enum _CI_WINDOWS_LOCKDOWN_MODE {
	CI_WINDOWS_LOCKDOWN_MODE_UNLOCKED = 0x0,
	CI_WINDOWS_LOCKDOWN_MODE_TRIAL = 0x1,
	CI_WINDOWS_LOCKDOWN_MODE_LOCKED = 0x2,
	CI_WINDOWS_LOCKDOWN_MODE_MAX = 0x3
};

struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
	
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG AttributeCount;
	/*0008*/ <unnamed-type-Attribute> Attribute;
	/*0010*/
};

struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
	/*0000*/ ULONGLONG Version;
	/*0008*/ WCHAR * Name;
	/*0010*/
};

struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
	/*0000*/ void * pValue;
	/*0008*/ ULONG ValueLength;
	/*0010*/
};

struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
	
	/*0000*/ ULONG Name;
	/*0004*/ USHORT ValueType;
	/*0006*/ USHORT Reserved;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG ValueCount;
	/*0010*/ <unnamed-type-Values> Values;
	/*0014*/
};

struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
	
	/*0000*/ WCHAR * Name;
	/*0008*/ USHORT ValueType;
	/*000a*/ USHORT Reserved;
	/*000c*/ ULONG Flags;
	/*0010*/ ULONG ValueCount;
	/*0018*/ <unnamed-type-Values> Values;
	/*0020*/
};

union _CLIENT_CALL_RETURN {
	/*0000*/ void * Pointer;
	/*0000*/ LONGLONG Simple;
	/*0008*/
};

struct _CLIENT_ID {
	/*0000*/ void * UniqueProcess;
	/*0008*/ void * UniqueThread;
	/*0010*/
};

struct _CLIENT_ID64 {
	/*0000*/ ULONGLONG UniqueProcess;
	/*0008*/ ULONGLONG UniqueThread;
	/*0010*/
};

struct _CLUSTER_RANGE {
	/*0000*/ _LARGE_INTEGER StartingCluster;
	/*0008*/ _LARGE_INTEGER ClusterCount;
	/*0010*/
};

struct _CM_COMPONENT_INFORMATION {
	/*0000*/ _DEVICE_FLAGS Flags;
	/*0004*/ ULONG Version;
	/*0008*/ ULONG Key;
	/*0010*/ ULONGLONG AffinityMask;
	/*0018*/
};

struct _CM_DISK_GEOMETRY_DEVICE_DATA {
	/*0000*/ ULONG BytesPerSector;
	/*0004*/ ULONG NumberOfCylinders;
	/*0008*/ ULONG SectorsPerTrack;
	/*000c*/ ULONG NumberOfHeads;
	/*0010*/
};

struct _CM_EISA_FUNCTION_INFORMATION {
	/*0000*/ ULONG CompressedId;
	/*0004*/ UCHAR IdSlotFlags1;
	/*0005*/ UCHAR IdSlotFlags2;
	/*0006*/ UCHAR MinorRevision;
	/*0007*/ UCHAR MajorRevision;
	/*0008*/ UCHAR Selections[0x1a];
	/*0022*/ UCHAR FunctionFlags;
	/*0023*/ UCHAR TypeString[0x50];
	/*0073*/ _EISA_MEMORY_CONFIGURATION EisaMemory[0x9];
	/*00b2*/ _EISA_IRQ_CONFIGURATION EisaIrq[0x7];
	/*00c0*/ _EISA_DMA_CONFIGURATION EisaDma[0x4];
	/*00c8*/ _EISA_PORT_CONFIGURATION EisaPort[0x14];
	/*0104*/ UCHAR InitializationData[0x3c];
	/*0140*/
};

struct _CM_EISA_SLOT_INFORMATION {
	/*0000*/ UCHAR ReturnCode;
	/*0001*/ UCHAR ReturnFlags;
	/*0002*/ UCHAR MajorRevision;
	/*0003*/ UCHAR MinorRevision;
	/*0004*/ USHORT Checksum;
	/*0006*/ UCHAR NumberFunctions;
	/*0007*/ UCHAR FunctionInformation;
	/*0008*/ ULONG CompressedId;
	/*000c*/
};

enum _CM_ERROR_CONTROL_TYPE {
	IgnoreError = 0x0,
	NormalError = 0x1,
	SevereError = 0x2,
	CriticalError = 0x3
};

struct _CM_FLOPPY_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ CHAR Size[0x8];
	/*000c*/ ULONG MaxDensity;
	/*0010*/ ULONG MountDensity;
	/*0014*/ UCHAR StepRateHeadUnloadTime;
	/*0015*/ UCHAR HeadLoadTime;
	/*0016*/ UCHAR MotorOffTime;
	/*0017*/ UCHAR SectorLengthCode;
	/*0018*/ UCHAR SectorPerTrack;
	/*0019*/ UCHAR ReadWriteGapLength;
	/*001a*/ UCHAR DataTransferLength;
	/*001b*/ UCHAR FormatGapLength;
	/*001c*/ UCHAR FormatFillCharacter;
	/*001d*/ UCHAR HeadSettleTime;
	/*001e*/ UCHAR MotorSettleTime;
	/*001f*/ UCHAR MaximumTrackValue;
	/*0020*/ UCHAR DataTransferRate;
	/*0024*/
};

struct _CM_FULL_RESOURCE_DESCRIPTOR {
	/*0000*/ _INTERFACE_TYPE InterfaceType;
	/*0004*/ ULONG BusNumber;
	/*0008*/ _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
	/*0024*/
};

struct _CM_INT13_DRIVE_PARAMETER {
	/*0000*/ USHORT DriveSelect;
	/*0002*/ ULONG MaxCylinders;
	/*0006*/ USHORT SectorsPerTrack;
	/*0008*/ USHORT MaxHeads;
	/*000a*/ USHORT NumberDrives;
	/*000c*/
};

struct _CM_KEYBOARD_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ UCHAR Type;
	/*0005*/ UCHAR Subtype;
	/*0006*/ USHORT KeyboardFlags;
	/*0008*/
};

struct _CM_MCA_POS_DATA {
	/*0000*/ USHORT AdapterId;
	/*0002*/ UCHAR PosData1;
	/*0003*/ UCHAR PosData2;
	/*0004*/ UCHAR PosData3;
	/*0005*/ UCHAR PosData4;
	/*0006*/
};

struct _CM_MONITOR_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ USHORT HorizontalScreenSize;
	/*0006*/ USHORT VerticalScreenSize;
	/*0008*/ USHORT HorizontalResolution;
	/*000a*/ USHORT VerticalResolution;
	/*000c*/ USHORT HorizontalDisplayTimeLow;
	/*000e*/ USHORT HorizontalDisplayTime;
	/*0010*/ USHORT HorizontalDisplayTimeHigh;
	/*0012*/ USHORT HorizontalBackPorchLow;
	/*0014*/ USHORT HorizontalBackPorch;
	/*0016*/ USHORT HorizontalBackPorchHigh;
	/*0018*/ USHORT HorizontalFrontPorchLow;
	/*001a*/ USHORT HorizontalFrontPorch;
	/*001c*/ USHORT HorizontalFrontPorchHigh;
	/*001e*/ USHORT HorizontalSyncLow;
	/*0020*/ USHORT HorizontalSync;
	/*0022*/ USHORT HorizontalSyncHigh;
	/*0024*/ USHORT VerticalBackPorchLow;
	/*0026*/ USHORT VerticalBackPorch;
	/*0028*/ USHORT VerticalBackPorchHigh;
	/*002a*/ USHORT VerticalFrontPorchLow;
	/*002c*/ USHORT VerticalFrontPorch;
	/*002e*/ USHORT VerticalFrontPorchHigh;
	/*0030*/ USHORT VerticalSyncLow;
	/*0032*/ USHORT VerticalSync;
	/*0034*/ USHORT VerticalSyncHigh;
	/*0036*/
};

struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
	
	/*0000*/ UCHAR Type;
	/*0001*/ UCHAR ShareDisposition;
	/*0002*/ USHORT Flags;
	/*0004*/ <unnamed-type-u> u;
	/*0014*/
};

struct _CM_PARTIAL_RESOURCE_LIST {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ ULONG Count;
	/*0008*/ _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[0x1];
	/*001c*/
};

struct _CM_PCCARD_DEVICE_DATA {
	/*0000*/ UCHAR Flags;
	/*0001*/ UCHAR ErrorCode;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG BusData;
	/*0008*/ ULONG DeviceId;
	/*000c*/ ULONG LegacyBaseAddress;
	/*0010*/ UCHAR IRQMap[0x10];
	/*0020*/
};

struct _CM_PNP_BIOS_DEVICE_NODE {
	/*0000*/ USHORT Size;
	/*0002*/ UCHAR Node;
	/*0003*/ ULONG ProductId;
	/*0007*/ UCHAR DeviceType[0x3];
	/*000a*/ USHORT DeviceAttributes;
	/*000c*/
};

struct _CM_PNP_BIOS_INSTALLATION_CHECK {
	/*0000*/ UCHAR Signature[0x4];
	/*0004*/ UCHAR Revision;
	/*0005*/ UCHAR Length;
	/*0006*/ USHORT ControlField;
	/*0008*/ UCHAR Checksum;
	/*0009*/ ULONG EventFlagAddress;
	/*000d*/ USHORT RealModeEntryOffset;
	/*000f*/ USHORT RealModeEntrySegment;
	/*0011*/ USHORT ProtectedModeEntryOffset;
	/*0013*/ ULONG ProtectedModeCodeBaseAddress;
	/*0017*/ ULONG OemDeviceId;
	/*001b*/ USHORT RealModeDataBaseAddress;
	/*001d*/ ULONG ProtectedModeDataBaseAddress;
	/*0021*/
};

struct _CM_RESOURCE_LIST {
	/*0000*/ ULONG Count;
	/*0004*/ _CM_FULL_RESOURCE_DESCRIPTOR List[0x1];
	/*0028*/
};

struct _CM_ROM_BLOCK {
	/*0000*/ ULONG Address;
	/*0004*/ ULONG Size;
	/*0008*/
};

struct _CM_SCSI_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ UCHAR HostIdentifier;
	/*0006*/
};

struct _CM_SERIAL_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ ULONG BaudClock;
	/*0008*/
};

enum _CM_SERVICE_LOAD_TYPE {
	BootLoad = 0x0,
	SystemLoad = 0x1,
	AutoLoad = 0x2,
	DemandLoad = 0x3,
	DisableLoad = 0x4
};

enum _CM_SERVICE_NODE_TYPE {
	DriverType = 0x1,
	FileSystemType = 0x2,
	Win32ServiceOwnProcess = 0x10,
	Win32ServiceShareProcess = 0x20,
	AdapterType = 0x4,
	RecognizerType = 0x8
};

enum _CM_SHARE_DISPOSITION {
	CmResourceShareUndetermined = 0x0,
	CmResourceShareDeviceExclusive = 0x1,
	CmResourceShareDriverExclusive = 0x2,
	CmResourceShareShared = 0x3
};

struct _CM_SONIC_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ USHORT DataConfigurationRegister;
	/*0006*/ UCHAR EthernetAddress[0x8];
	/*000e*/
};

struct _CM_VIDEO_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ ULONG VideoClock;
	/*0008*/
};

struct _COAUTHIDENTITY {
	/*0000*/ USHORT * User;
	/*0008*/ ULONG UserLength;
	/*0010*/ USHORT * Domain;
	/*0018*/ ULONG DomainLength;
	/*0020*/ USHORT * Password;
	/*0028*/ ULONG PasswordLength;
	/*002c*/ ULONG Flags;
	/*0030*/
};

struct _COAUTHINFO {
	/*0000*/ ULONG dwAuthnSvc;
	/*0004*/ ULONG dwAuthzSvc;
	/*0008*/ WCHAR * pwszServerPrincName;
	/*0010*/ ULONG dwAuthnLevel;
	/*0014*/ ULONG dwImpersonationLevel;
	/*0018*/ _COAUTHIDENTITY * pAuthIdentityData;
	/*0020*/ ULONG dwCapabilities;
	/*0028*/
};

struct _COMMCONFIG {
	/*0000*/ ULONG dwSize;
	/*0004*/ USHORT wVersion;
	/*0006*/ USHORT wReserved;
	/*0008*/ _DCB dcb;
	/*0024*/ ULONG dwProviderSubType;
	/*0028*/ ULONG dwProviderOffset;
	/*002c*/ ULONG dwProviderSize;
	/*0030*/ WCHAR wcProviderData[0x1];
	/*0034*/
};

struct _COMMPROP {
	/*0000*/ USHORT wPacketLength;
	/*0002*/ USHORT wPacketVersion;
	/*0004*/ ULONG dwServiceMask;
	/*0008*/ ULONG dwReserved1;
	/*000c*/ ULONG dwMaxTxQueue;
	/*0010*/ ULONG dwMaxRxQueue;
	/*0014*/ ULONG dwMaxBaud;
	/*0018*/ ULONG dwProvSubType;
	/*001c*/ ULONG dwProvCapabilities;
	/*0020*/ ULONG dwSettableParams;
	/*0024*/ ULONG dwSettableBaud;
	/*0028*/ USHORT wSettableData;
	/*002a*/ USHORT wSettableStopParity;
	/*002c*/ ULONG dwCurrentTxQueue;
	/*0030*/ ULONG dwCurrentRxQueue;
	/*0034*/ ULONG dwProvSpec1;
	/*0038*/ ULONG dwProvSpec2;
	/*003c*/ WCHAR wcProvChar[0x1];
	/*0040*/
};

struct _COMMTIMEOUTS {
	/*0000*/ ULONG ReadIntervalTimeout;
	/*0004*/ ULONG ReadTotalTimeoutMultiplier;
	/*0008*/ ULONG ReadTotalTimeoutConstant;
	/*000c*/ ULONG WriteTotalTimeoutMultiplier;
	/*0010*/ ULONG WriteTotalTimeoutConstant;
	/*0014*/
};

struct _COMM_FAULT_OFFSETS {
	/*0000*/ SHORT CommOffset;
	/*0002*/ SHORT FaultOffset;
	/*0004*/
};

struct _COMPATIBILITY_CONTEXT_ELEMENT {
	/*0000*/ _GUID Id;
	/*0010*/ ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
	/*0018*/ ULONGLONG MaxVersionTested;
	/*0020*/
};

struct _COMPONENT_FILTER {
	/*0000*/ ULONG ComponentFlags;
	/*0004*/
};

struct _COMPOUND_ACCESS_ALLOWED_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ USHORT CompoundAceType;
	/*000a*/ USHORT Reserved;
	/*000c*/ ULONG SidStart;
	/*0010*/
};

struct _COMPRESSED_BLOCK_HEADER_BASIC {
	/*0000*/ ULONG CompressedSize;
	/*0004*/
};

struct _COMPRESSED_BLOCK_HEADER_STREAM {
	/*0000*/ ULONG CompressedSize;
	/*0004*/ ULONG UncompressedSize;
	/*0008*/
};

struct _COMPRESSED_DATA_INFO {
	/*0000*/ USHORT CompressionFormatAndEngine;
	/*0002*/ UCHAR CompressionUnitShift;
	/*0003*/ UCHAR ChunkShift;
	/*0004*/ UCHAR ClusterShift;
	/*0005*/ UCHAR Reserved;
	/*0006*/ USHORT NumberOfChunks;
	/*0008*/ ULONG CompressedChunkSizes[0x1];
	/*000c*/
};

struct _COMPRESSED_HEADER {
	/*0000*/ ULONG Magic;
	/*0004*/ USHORT HeaderSize;
	/*0006*/ UCHAR HeaderCrc;
	/*0007*/ UCHAR CodecType;
	/*0008*/ ULONG UncompressedSizeLo;
	/*000c*/ ULONG UncompressedSizeHi;
	/*0010*/ ULONG BlockSize;
	/*0014*/ USHORT MandatoryFlags;
	/*0016*/ USHORT OptionalFlags;
	/*0018*/
};

struct _COMPRESS_ALLOCATION_ROUTINES {
	/*0000*/ void * (* Allocate)( void * , ULONGLONG );
	/*0008*/ void (* Free)( void * , void * );
	/*0010*/ void * UserContext;
	/*0018*/
};

enum _COMPUTER_NAME_FORMAT {
	ComputerNameNetBIOS = 0x0,
	ComputerNameDnsHostname = 0x1,
	ComputerNameDnsDomain = 0x2,
	ComputerNameDnsFullyQualified = 0x3,
	ComputerNamePhysicalNetBIOS = 0x4,
	ComputerNamePhysicalDnsHostname = 0x5,
	ComputerNamePhysicalDnsDomain = 0x6,
	ComputerNamePhysicalDnsFullyQualified = 0x7,
	ComputerNameMax = 0x8
};

struct _COMSTAT {
	/*0000*/ ULONG fCtsHold : 01; // 0x00000001;
	/*0000*/ ULONG fDsrHold : 01; // 0x00000002;
	/*0000*/ ULONG fRlsdHold : 01; // 0x00000004;
	/*0000*/ ULONG fXoffHold : 01; // 0x00000008;
	/*0000*/ ULONG fXoffSent : 01; // 0x00000010;
	/*0000*/ ULONG fEof : 01; // 0x00000020;
	/*0000*/ ULONG fTxim : 01; // 0x00000040;
	/*0000*/ ULONG fReserved : 25; // 0xffffff80;
	/*0004*/ ULONG cbInQue;
	/*0008*/ ULONG cbOutQue;
	/*000c*/
};

struct _CONNECTDLGSTRUCTA {
	/*0000*/ ULONG cbStructure;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ _NETRESOURCEA * lpConnRes;
	/*0018*/ ULONG dwFlags;
	/*001c*/ ULONG dwDevNum;
	/*0020*/
};

struct _CONNECTDLGSTRUCTW {
	/*0000*/ ULONG cbStructure;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ _NETRESOURCEW * lpConnRes;
	/*0018*/ ULONG dwFlags;
	/*001c*/ ULONG dwDevNum;
	/*0020*/
};

struct _CONSOLE_CURSOR_INFO {
	/*0000*/ ULONG dwSize;
	/*0004*/ INT bVisible;
	/*0008*/
};

struct _CONSOLE_FONT_INFO {
	/*0000*/ ULONG nFont;
	/*0004*/ _COORD dwFontSize;
	/*0008*/
};

struct _CONSOLE_FONT_INFOEX {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG nFont;
	/*0008*/ _COORD dwFontSize;
	/*000c*/ UINT FontFamily;
	/*0010*/ UINT FontWeight;
	/*0014*/ WCHAR FaceName[0x20];
	/*0054*/
};

struct _CONSOLE_HISTORY_INFO {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT HistoryBufferSize;
	/*0008*/ UINT NumberOfHistoryBuffers;
	/*000c*/ ULONG dwFlags;
	/*0010*/
};

struct _CONSOLE_READCONSOLE_CONTROL {
	/*0000*/ ULONG nLength;
	/*0004*/ ULONG nInitialChars;
	/*0008*/ ULONG dwCtrlWakeupMask;
	/*000c*/ ULONG dwControlKeyState;
	/*0010*/
};

struct _CONSOLE_SCREEN_BUFFER_INFO {
	/*0000*/ _COORD dwSize;
	/*0004*/ _COORD dwCursorPosition;
	/*0008*/ USHORT wAttributes;
	/*000a*/ _SMALL_RECT srWindow;
	/*0012*/ _COORD dwMaximumWindowSize;
	/*0016*/
};

struct _CONSOLE_SCREEN_BUFFER_INFOEX {
	/*0000*/ ULONG cbSize;
	/*0004*/ _COORD dwSize;
	/*0008*/ _COORD dwCursorPosition;
	/*000c*/ USHORT wAttributes;
	/*000e*/ _SMALL_RECT srWindow;
	/*0016*/ _COORD dwMaximumWindowSize;
	/*001a*/ USHORT wPopupAttributes;
	/*001c*/ INT bFullscreenSupported;
	/*0020*/ ULONG ColorTable[0x10];
	/*0060*/
};

struct _CONSOLE_SELECTION_INFO {
	/*0000*/ ULONG dwFlags;
	/*0004*/ _COORD dwSelectionAnchor;
	/*0008*/ _SMALL_RECT srSelection;
	/*0010*/
};

struct _CONTAINER_ROOT_INFO_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _CONTAINER_ROOT_INFO_OUTPUT {
	/*0000*/ USHORT ContainerRootIdLength;
	/*0002*/ UCHAR ContainerRootId[0x1];
	/*0004*/
};

struct _CONTAINER_VOLUME_STATE {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _CONTEXT {
	/*0000*/ ULONGLONG P1Home;
	/*0008*/ ULONGLONG P2Home;
	/*0010*/ ULONGLONG P3Home;
	/*0018*/ ULONGLONG P4Home;
	/*0020*/ ULONGLONG P5Home;
	/*0028*/ ULONGLONG P6Home;
	/*0030*/ ULONG ContextFlags;
	/*0034*/ ULONG MxCsr;
	/*0038*/ USHORT SegCs;
	/*003a*/ USHORT SegDs;
	/*003c*/ USHORT SegEs;
	/*003e*/ USHORT SegFs;
	/*0040*/ USHORT SegGs;
	/*0042*/ USHORT SegSs;
	/*0044*/ ULONG EFlags;
	/*0048*/ ULONGLONG Dr0;
	/*0050*/ ULONGLONG Dr1;
	/*0058*/ ULONGLONG Dr2;
	/*0060*/ ULONGLONG Dr3;
	/*0068*/ ULONGLONG Dr6;
	/*0070*/ ULONGLONG Dr7;
	/*0078*/ ULONGLONG Rax;
	/*0080*/ ULONGLONG Rcx;
	/*0088*/ ULONGLONG Rdx;
	/*0090*/ ULONGLONG Rbx;
	/*0098*/ ULONGLONG Rsp;
	/*00a0*/ ULONGLONG Rbp;
	/*00a8*/ ULONGLONG Rsi;
	/*00b0*/ ULONGLONG Rdi;
	/*00b8*/ ULONGLONG R8;
	/*00c0*/ ULONGLONG R9;
	/*00c8*/ ULONGLONG R10;
	/*00d0*/ ULONGLONG R11;
	/*00d8*/ ULONGLONG R12;
	/*00e0*/ ULONGLONG R13;
	/*00e8*/ ULONGLONG R14;
	/*00f0*/ ULONGLONG R15;
	/*00f8*/ ULONGLONG Rip;
	/*0100*/ _XSAVE_FORMAT FltSave;
	/*0100*/ _M128A Header[0x2];
	/*0120*/ _M128A Legacy[0x8];
	/*01a0*/ _M128A Xmm0;
	/*01b0*/ _M128A Xmm1;
	/*01c0*/ _M128A Xmm2;
	/*01d0*/ _M128A Xmm3;
	/*01e0*/ _M128A Xmm4;
	/*01f0*/ _M128A Xmm5;
	/*0200*/ _M128A Xmm6;
	/*0210*/ _M128A Xmm7;
	/*0220*/ _M128A Xmm8;
	/*0230*/ _M128A Xmm9;
	/*0240*/ _M128A Xmm10;
	/*0250*/ _M128A Xmm11;
	/*0260*/ _M128A Xmm12;
	/*0270*/ _M128A Xmm13;
	/*0280*/ _M128A Xmm14;
	/*0290*/ _M128A Xmm15;
	/*0300*/ _M128A VectorRegister[0x1a];
	/*04a0*/ ULONGLONG VectorControl;
	/*04a8*/ ULONGLONG DebugControl;
	/*04b0*/ ULONGLONG LastBranchToRip;
	/*04b8*/ ULONGLONG LastBranchFromRip;
	/*04c0*/ ULONGLONG LastExceptionToRip;
	/*04c8*/ ULONGLONG LastExceptionFromRip;
	/*04d0*/
};

struct _CONTEXT_CHUNK {
	/*0000*/ LONG Offset;
	/*0004*/ ULONG Length;
	/*0008*/
};

struct _CONTEXT_EX {
	/*0000*/ _CONTEXT_CHUNK All;
	/*0008*/ _CONTEXT_CHUNK Legacy;
	/*0010*/ _CONTEXT_CHUNK XState;
	/*0018*/ _CONTEXT_CHUNK KernelCet;
	/*0020*/
};

struct _COORD {
	/*0000*/ SHORT X;
	/*0002*/ SHORT Y;
	/*0004*/
};

enum _COPYFILE2_COPY_PHASE {
	COPYFILE2_PHASE_NONE = 0x0,
	COPYFILE2_PHASE_PREPARE_SOURCE = 0x1,
	COPYFILE2_PHASE_PREPARE_DEST = 0x2,
	COPYFILE2_PHASE_READ_SOURCE = 0x3,
	COPYFILE2_PHASE_WRITE_DESTINATION = 0x4,
	COPYFILE2_PHASE_SERVER_COPY = 0x5,
	COPYFILE2_PHASE_NAMEGRAFT_COPY = 0x6,
	COPYFILE2_PHASE_MAX = 0x7
};

enum _COPYFILE2_MESSAGE_ACTION {
	COPYFILE2_PROGRESS_CONTINUE = 0x0,
	COPYFILE2_PROGRESS_CANCEL = 0x1,
	COPYFILE2_PROGRESS_STOP = 0x2,
	COPYFILE2_PROGRESS_QUIET = 0x3,
	COPYFILE2_PROGRESS_PAUSE = 0x4
};

enum _COPYFILE2_MESSAGE_TYPE {
	COPYFILE2_CALLBACK_NONE = 0x0,
	COPYFILE2_CALLBACK_CHUNK_STARTED = 0x1,
	COPYFILE2_CALLBACK_CHUNK_FINISHED = 0x2,
	COPYFILE2_CALLBACK_STREAM_STARTED = 0x3,
	COPYFILE2_CALLBACK_STREAM_FINISHED = 0x4,
	COPYFILE2_CALLBACK_POLL_CONTINUE = 0x5,
	COPYFILE2_CALLBACK_ERROR = 0x6,
	COPYFILE2_CALLBACK_MAX = 0x7
};

struct _COSERVERINFO {
	/*0000*/ ULONG dwReserved1;
	/*0008*/ WCHAR * pwszName;
	/*0010*/ _COAUTHINFO * pAuthInfo;
	/*0018*/ ULONG dwReserved2;
	/*0020*/
};

struct _COUNTED_REASON_CONTEXT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ _UNICODE_STRING ResourceFileName;
	/*0018*/ USHORT ResourceReasonId;
	/*001c*/ ULONG StringCount;
	/*0020*/ _UNICODE_STRING * ReasonStrings;
	/*0008*/ _UNICODE_STRING SimpleString;
	/*0028*/
};

struct _COUNTER_READING {
	/*0000*/ _HARDWARE_COUNTER_TYPE Type;
	/*0004*/ ULONG Index;
	/*0008*/ ULONGLONG Start;
	/*0010*/ ULONGLONG Total;
	/*0018*/
};

struct _COVERAGE_MODULES {
	/*0000*/ ULONG ListAndReset;
	/*0004*/ ULONG NumberOfModules;
	/*0008*/ _COVERAGE_MODULE_REQUEST ModuleRequestInfo;
	/*0020*/ _COVERAGE_MODULE_INFO Modules[0x1];
	/*0040*/
};

struct _COVERAGE_MODULE_INFO {
	/*0000*/ ULONG ModuleInfoSize;
	/*0004*/ ULONG IsBinaryLoaded;
	/*0008*/ _UNICODE_STRING ModulePathName;
	/*0018*/ ULONG CoverageSectionSize;
	/*001c*/ UCHAR CoverageSection[0x1];
	/*0020*/
};

struct _COVERAGE_MODULE_REQUEST {
	
	/*0000*/ _COVERAGE_REQUEST_CODES RequestType;
	/*0008*/ <unnamed-type-SearchInfo> SearchInfo;
	/*0018*/
};

enum _COVERAGE_REQUEST_CODES {
	CoverageAllModules = 0x0,
	CoverageSearchByHash = 0x1,
	CoverageSearchByName = 0x2
};

struct _COVERAGE_SECTION_HEADER {
	/*0000*/ ULONG Signature;
	/*0004*/ ULONG CoverageType;
	/*0008*/ UCHAR MD5Hash[0x10];
	/*0018*/ ULONG CoverageSectionSize;
	/*001c*/ ULONG CoverageVectorSize;
	/*0020*/ ULONG CoverageVectorOffset;
	/*0024*/ ULONG ExtraDataOffset;
	/*0028*/
};

struct _COVERAGE_UNLOADED_MODULE_ENTRY {
	/*0000*/ _LIST_ENTRY NextEntry;
	/*0010*/ _UNICODE_STRING BaseDllName;
	/*0020*/ _UNICODE_STRING FullDllName;
	/*0030*/ ULONG CoverageSectionSize;
	/*0038*/ void * CoverageSection;
	/*0040*/
};

struct _CPTABLEINFO {
	/*0000*/ USHORT CodePage;
	/*0002*/ USHORT MaximumCharacterSize;
	/*0004*/ USHORT DefaultChar;
	/*0006*/ USHORT UniDefaultChar;
	/*0008*/ USHORT TransDefaultChar;
	/*000a*/ USHORT TransUniDefaultChar;
	/*000c*/ USHORT DBCSCodePage;
	/*000e*/ UCHAR LeadByte[0xc];
	/*0020*/ USHORT * MultiByteTable;
	/*0028*/ void * WideCharTable;
	/*0030*/ USHORT * DBCSRanges;
	/*0038*/ USHORT * DBCSOffsets;
	/*0040*/
};

enum _CPU_PARTITION_QUERY_INFORMATION_CLASS {
	CpuPartitionQueryCpus = 0x0,
	CpuPartitionQueryMax = 0x1
};

enum _CPU_PARTITION_SET_INFORMATION_CLASS {
	CpuPartitionSetMax = 0x0
};

enum _CPU_SET_INFORMATION_TYPE {
	CpuSetInformation = 0x0
};

struct _CREATEFILE2_EXTENDED_PARAMETERS {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFileAttributes;
	/*0008*/ ULONG dwFileFlags;
	/*000c*/ ULONG dwSecurityQosFlags;
	/*0010*/ _SECURITY_ATTRIBUTES * lpSecurityAttributes;
	/*0018*/ void * hTemplateFile;
	/*0020*/
};

struct _CREATE_PROCESS_DEBUG_INFO {
	/*0000*/ void * hFile;
	/*0008*/ void * hProcess;
	/*0010*/ void * hThread;
	/*0018*/ void * lpBaseOfImage;
	/*0020*/ ULONG dwDebugInfoFileOffset;
	/*0024*/ ULONG nDebugInfoSize;
	/*0028*/ void * lpThreadLocalBase;
	/*0030*/ ULONG (* lpStartAddress)( void * );
	/*0038*/ void * lpImageName;
	/*0040*/ USHORT fUnicode;
	/*0048*/
};

struct _CREATE_THREAD_DEBUG_INFO {
	/*0000*/ void * hThread;
	/*0008*/ void * lpThreadLocalBase;
	/*0010*/ ULONG (* lpStartAddress)( void * );
	/*0018*/
};

struct _CRITICAL_PROCESS_EXCEPTION_DATA {
	/*0000*/ _GUID ReportId;
	/*0010*/ _UNICODE_STRING ModuleName;
	/*0020*/ ULONG ModuleTimestamp;
	/*0024*/ ULONG ModuleSize;
	/*0028*/ ULONGLONG Offset;
	/*0030*/
};

struct _CRT_DOUBLE {
	/*0000*/ double x;
	/*0008*/
};

struct _CRT_FLOAT {
	/*0000*/ float f;
	/*0004*/
};

struct _CSTRING {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0008*/ CHAR const * Buffer;
	/*0010*/
};

enum _CSVFS_DISK_CONNECTIVITY {
	CsvFsDiskConnectivityNone = 0x0,
	CsvFsDiskConnectivityMdsNodeOnly = 0x1,
	CsvFsDiskConnectivitySubsetOfNodes = 0x2,
	CsvFsDiskConnectivityAllNodes = 0x3
};

enum _CSV_CONTROL_OP {
	CsvControlStartRedirectFile = 0x2,
	CsvControlStopRedirectFile = 0x3,
	CsvControlQueryRedirectState = 0x4,
	CsvControlQueryFileRevision = 0x6,
	CsvControlQueryMdsPath = 0x8,
	CsvControlQueryFileRevisionFileId128 = 0x9,
	CsvControlQueryVolumeRedirectState = 0xa,
	CsvControlEnableUSNRangeModificationTracking = 0xd,
	CsvControlMarkHandleLocalVolumeMount = 0xe,
	CsvControlUnmarkHandleLocalVolumeMount = 0xf,
	CsvControlGetCsvFsMdsPathV2 = 0x12,
	CsvControlDisableCaching = 0x13,
	CsvControlEnableCaching = 0x14,
	CsvControlStartForceDFO = 0x15,
	CsvControlStopForceDFO = 0x16,
	CsvControlQueryMdsPathNoPause = 0x17,
	CsvControlSetVolumeId = 0x18,
	CsvControlQueryVolumeId = 0x19
};

struct _CSV_CONTROL_PARAM {
	/*0000*/ _CSV_CONTROL_OP Operation;
	/*0008*/ LONGLONG Unused;
	/*0010*/
};

struct _CSV_IS_OWNED_BY_CSVFS {
	/*0000*/ UCHAR OwnedByCSVFS;
	/*0001*/
};

struct _CSV_MGMT_LOCK {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _CSV_NAMESPACE_INFO {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG DeviceNumber;
	/*0008*/ _LARGE_INTEGER StartingOffset;
	/*0010*/ ULONG SectorSize;
	/*0018*/
};

struct _CSV_QUERY_FILE_REVISION {
	/*0000*/ LONGLONG FileId;
	/*0008*/ LONGLONG FileRevision[0x3];
	/*0020*/
};

struct _CSV_QUERY_FILE_REVISION_FILE_ID_128 {
	/*0000*/ _FILE_ID_128 FileId;
	/*0010*/ LONGLONG FileRevision[0x3];
	/*0028*/
};

struct _CSV_QUERY_MDS_PATH {
	/*0000*/ ULONG MdsNodeId;
	/*0004*/ ULONG DsNodeId;
	/*0008*/ ULONG PathLength;
	/*000c*/ WCHAR Path[0x1];
	/*0010*/
};

struct _CSV_QUERY_MDS_PATH_V2 {
	/*0000*/ LONGLONG Version;
	/*0008*/ ULONG RequiredSize;
	/*000c*/ ULONG MdsNodeId;
	/*0010*/ ULONG DsNodeId;
	/*0014*/ ULONG Flags;
	/*0018*/ _CSVFS_DISK_CONNECTIVITY DiskConnectivity;
	/*001c*/ _GUID VolumeId;
	/*002c*/ ULONG IpAddressOffset;
	/*0030*/ ULONG IpAddressLength;
	/*0034*/ ULONG PathOffset;
	/*0038*/ ULONG PathLength;
	/*0040*/
};

struct _CSV_QUERY_REDIRECT_STATE {
	/*0000*/ ULONG MdsNodeId;
	/*0004*/ ULONG DsNodeId;
	/*0008*/ UCHAR FileRedirected;
	/*000c*/
};

struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
	/*0000*/ ULONGLONG VetoedFromAltitudeIntegral;
	/*0008*/ ULONGLONG VetoedFromAltitudeDecimal;
	/*0010*/ WCHAR Reason[0x100];
	/*0210*/
};

struct _CSV_QUERY_VOLUME_ID {
	/*0000*/ _GUID VolumeId;
	/*0010*/
};

struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
	/*0000*/ ULONG MdsNodeId;
	/*0004*/ ULONG DsNodeId;
	/*0008*/ UCHAR IsDiskConnected;
	/*0009*/ UCHAR ClusterEnableDirectIo;
	/*000c*/ _CSVFS_DISK_CONNECTIVITY DiskConnectivity;
	/*0010*/
};

struct _CSV_SET_VOLUME_ID {
	/*0000*/ _GUID VolumeId;
	/*0010*/
};

struct _CURDIR {
	/*0000*/ _UNICODE_STRING DosPath;
	/*0010*/ void * Handle;
	/*0018*/
};

struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
	/*0000*/ ULONG Size;
	/*0008*/ WCHAR const * TriggerId;
	/*0010*/
};

struct _Combined_type<float,double> {
	/*0001*/
};

struct _Combined_type<float,long double> {
	/*0001*/
};

struct _CrtMemBlockHeader;

struct _CrtMemState {
	/*0000*/ _CrtMemBlockHeader * pBlockHeader;
	/*0008*/ ULONGLONG lCounts[0x5];
	/*0030*/ ULONGLONG lSizes[0x5];
	/*0058*/ ULONGLONG lHighWaterCount;
	/*0060*/ ULONGLONG lTotalCount;
	/*0068*/
};

struct _DCB {
	/*0000*/ ULONG DCBlength;
	/*0004*/ ULONG BaudRate;
	/*0008*/ ULONG fBinary : 01; // 0x00000001;
	/*0008*/ ULONG fParity : 01; // 0x00000002;
	/*0008*/ ULONG fOutxCtsFlow : 01; // 0x00000004;
	/*0008*/ ULONG fOutxDsrFlow : 01; // 0x00000008;
	/*0008*/ ULONG fDtrControl : 02; // 0x00000030;
	/*0008*/ ULONG fDsrSensitivity : 01; // 0x00000040;
	/*0008*/ ULONG fTXContinueOnXoff : 01; // 0x00000080;
	/*0008*/ ULONG fOutX : 01; // 0x00000100;
	/*0008*/ ULONG fInX : 01; // 0x00000200;
	/*0008*/ ULONG fErrorChar : 01; // 0x00000400;
	/*0008*/ ULONG fNull : 01; // 0x00000800;
	/*0008*/ ULONG fRtsControl : 02; // 0x00003000;
	/*0008*/ ULONG fAbortOnError : 01; // 0x00004000;
	/*0008*/ ULONG fDummy2 : 17; // 0xffff8000;
	/*000c*/ USHORT wReserved;
	/*000e*/ USHORT XonLim;
	/*0010*/ USHORT XoffLim;
	/*0012*/ UCHAR ByteSize;
	/*0013*/ UCHAR Parity;
	/*0014*/ UCHAR StopBits;
	/*0015*/ CHAR XonChar;
	/*0016*/ CHAR XoffChar;
	/*0017*/ CHAR ErrorChar;
	/*0018*/ CHAR EofChar;
	/*0019*/ CHAR EvtChar;
	/*001a*/ USHORT wReserved1;
	/*001c*/
};

enum _DEBUG_CONTROL_SPACE_ITEM {
	DEBUG_CONTROL_SPACE_PCR = 0x0,
	DEBUG_CONTROL_SPACE_PRCB = 0x1,
	DEBUG_CONTROL_SPACE_KSPECIAL = 0x2,
	DEBUG_CONTROL_SPACE_THREAD = 0x3,
	DEBUG_CONTROL_SPACE_MAXIMUM = 0x4
};

struct _DEBUG_EVENT {
	
	/*0000*/ ULONG dwDebugEventCode;
	/*0004*/ ULONG dwProcessId;
	/*0008*/ ULONG dwThreadId;
	/*0010*/ <unnamed-type-u> u;
	/*00b0*/
};

struct _DECRYPTION_STATUS_BUFFER {
	/*0000*/ UCHAR NoEncryptedStreams;
	/*0001*/
};

struct _DEDUP_CHUNK_INFORMATION_HASH32 {
	/*0000*/ ULONG ChunkFlags;
	/*0008*/ LONGLONG ChunkOffsetInFile;
	/*0010*/ LONGLONG ChunkSize;
	/*0018*/ UCHAR HashVal[0x20];
	/*0038*/
};

struct _DEDUP_FILE_OPERATION {
	/*0000*/ ULONG Code;
	/*0004*/
};

struct _DEDUP_QUERY_FILE_HASHES_INPUT_BUFFER {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG QueryFlags;
	/*0008*/ ULONG HashAlgorithm;
	/*0010*/ _LARGE_INTEGER RangeOffsetInFile;
	/*0018*/ _LARGE_INTEGER RangeLength;
	/*0020*/
};

struct _DEFINE_STORAGE_RESERVE_INPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG AreaDefinitionOffset;
	/*000c*/ ULONG AreaDefinitionCount;
	/*0010*/ _STORAGE_RESERVE_AREA_DEFINITION AreaDefinition[0x1];
	/*0020*/
};

struct _DELAYLOAD_INFO {
	/*0000*/ ULONG Size;
	/*0008*/ _IMAGE_DELAYLOAD_DESCRIPTOR const * DelayloadDescriptor;
	/*0010*/ _IMAGE_THUNK_DATA64 * ThunkAddress;
	/*0018*/ CHAR const * TargetDllName;
	/*0020*/ _DELAYLOAD_PROC_DESCRIPTOR TargetApiDescriptor;
	/*0030*/ void * TargetModuleBase;
	/*0038*/ void * Unused;
	/*0040*/ ULONG LastError;
	/*0048*/
};

struct _DELAYLOAD_PROC_DESCRIPTOR {
	/*0000*/ ULONG ImportDescribedByName;
	union {
		/*0008*/ CHAR const * Name;
		/*0008*/ ULONG Ordinal;
		/*0010*/
	} Description;
	/*0010*/
};

struct _DELETE_STORAGE_RESERVE_INPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG AreaIdOffset;
	/*000c*/ ULONG AreaIdCount;
	/*0010*/ _STORAGE_RESERVE_ID AreaId[0x1];
	/*0014*/
};

enum _DEP_SYSTEM_POLICY_TYPE {
	DEPPolicyAlwaysOff = 0x0,
	DEPPolicyAlwaysOn = 0x1,
	DEPPolicyOptIn = 0x2,
	DEPPolicyOptOut = 0x3,
	DEPTotalPolicyCount = 0x4
};

struct _DEVICE_FLAGS {
	/*0000*/ ULONG Failed : 01; // 0x00000001;
	/*0000*/ ULONG ReadOnly : 01; // 0x00000002;
	/*0000*/ ULONG Removable : 01; // 0x00000004;
	/*0000*/ ULONG ConsoleIn : 01; // 0x00000008;
	/*0000*/ ULONG ConsoleOut : 01; // 0x00000010;
	/*0000*/ ULONG Input : 01; // 0x00000020;
	/*0000*/ ULONG Output : 01; // 0x00000040;
	/*0004*/
};

enum _DEVICE_POWER_STATE {
	PowerDeviceUnspecified = 0x0,
	PowerDeviceD0 = 0x1,
	PowerDeviceD1 = 0x2,
	PowerDeviceD2 = 0x3,
	PowerDeviceD3 = 0x4,
	PowerDeviceMaximum = 0x5
};

struct _DIAGNOSTIC_BUFFER {
	/*0000*/ ULONGLONG Size;
	/*0008*/ _REQUESTER_TYPE CallerType;
	/*0010*/ ULONGLONG ProcessImageNameOffset;
	/*0018*/ ULONG ProcessId;
	/*001c*/ ULONG ServiceTag;
	/*0010*/ ULONGLONG DeviceDescriptionOffset;
	/*0018*/ ULONGLONG DevicePathOffset;
	/*0020*/ ULONGLONG ReasonOffset;
	/*0028*/
};

enum _DIRECTORY_NOTIFY_INFORMATION_CLASS {
	DirectoryNotifyInformation = 0x1,
	DirectoryNotifyExtendedInformation = 0x2,
	DirectoryNotifyFullInformation = 0x3,
	DirectoryNotifyMaximumInformation = 0x4
};

struct _DISCDLGSTRUCTA {
	/*0000*/ ULONG cbStructure;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ CHAR * lpLocalName;
	/*0018*/ CHAR * lpRemoteName;
	/*0020*/ ULONG dwFlags;
	/*0028*/
};

struct _DISCDLGSTRUCTW {
	/*0000*/ ULONG cbStructure;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ WCHAR * lpLocalName;
	/*0018*/ WCHAR * lpRemoteName;
	/*0020*/ ULONG dwFlags;
	/*0028*/
};

struct _DISPATCHER_CONTEXT {
	/*0000*/ ULONGLONG ControlPc;
	/*0008*/ ULONGLONG ImageBase;
	/*0010*/ _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionEntry;
	/*0018*/ ULONGLONG EstablisherFrame;
	/*0020*/ ULONGLONG TargetIp;
	/*0028*/ _CONTEXT * ContextRecord;
	/*0030*/ _EXCEPTION_DISPOSITION (* LanguageHandler)( _EXCEPTION_RECORD * , void * , _CONTEXT * , void * );
	/*0038*/ void * HandlerData;
	/*0040*/ _UNWIND_HISTORY_TABLE * HistoryTable;
	/*0048*/ ULONG ScopeIndex;
	/*004c*/ ULONG Fill0;
	/*0050*/
};

struct _DISPATCHER_CONTEXT_ARM64 {
	/*0000*/ ULONGLONG ControlPc;
	/*0008*/ ULONGLONG ImageBase;
	/*0010*/ _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY * FunctionEntry;
	/*0018*/ ULONGLONG EstablisherFrame;
	/*0020*/ ULONGLONG TargetPc;
	/*0028*/ _ARM64_NT_CONTEXT * ContextRecord;
	/*0030*/ _EXCEPTION_DISPOSITION (* LanguageHandler)( _EXCEPTION_RECORD * , void * , _CONTEXT * , void * );
	/*0038*/ void * HandlerData;
	/*0040*/ _UNWIND_HISTORY_TABLE * HistoryTable;
	/*0048*/ ULONG ScopeIndex;
	/*004c*/ UCHAR ControlPcIsUnwound;
	/*0050*/ UCHAR * NonVolatileRegisters;
	/*0058*/
};

union _DISPATCHER_CONTEXT_NONVOLREG_ARM64 {
	/*0000*/ UCHAR Buffer[0x98];
	/*0000*/ ULONGLONG GpNvRegs[0xb];
	/*0058*/ double FpNvRegs[0x8];
	/*0098*/
};

enum _DISPLAYCONFIG_COLOR_ENCODING {
	DISPLAYCONFIG_COLOR_ENCODING_RGB = 0x0,
	DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 0x1,
	DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 0x2,
	DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 0x3,
	DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 0x4,
	DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = 0xffffffff
};

struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT advancedColorSupported : 01; // 0x00000001;
	/*0014*/ UINT advancedColorEnabled : 01; // 0x00000002;
	/*0014*/ UINT wideColorEnforced : 01; // 0x00000004;
	/*0014*/ UINT advancedColorForceDisabled : 01; // 0x00000008;
	/*0014*/ UINT reserved : 28; // 0xfffffff0;
	/*0014*/ UINT value;
	/*0018*/ _DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
	/*001c*/ UINT bitsPerColorChannel;
	/*0020*/
};

struct _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT isSpecializationEnabled : 01; // 0x00000001;
	/*0014*/ UINT isSpecializationAvailableForMonitor : 01; // 0x00000002;
	/*0014*/ UINT isSpecializationAvailableForSystem : 01; // 0x00000004;
	/*0014*/ UINT reserved : 29; // 0xfffffff8;
	/*0014*/ UINT value;
	/*0018*/
};

struct _DISPLAYCONFIG_SDR_WHITE_LEVEL {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ ULONG SDRWhiteLevel;
	/*0018*/
};

struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT enableAdvancedColor : 01; // 0x00000001;
	/*0014*/ UINT reserved : 31; // 0xfffffffe;
	/*0014*/ UINT value;
	/*0018*/
};

struct _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT isSpecializationEnabled : 01; // 0x00000001;
	/*0014*/ UINT reserved : 31; // 0xfffffffe;
	/*0014*/ UINT value;
	/*0018*/ _GUID specializationType;
	/*0028*/ _GUID specializationSubType;
	/*0038*/ WCHAR specializationApplicationName[0x80];
	/*0138*/
};

struct _DISPLAY_DEVICEA {
	/*0000*/ ULONG cb;
	/*0004*/ CHAR DeviceName[0x20];
	/*0024*/ CHAR DeviceString[0x80];
	/*00a4*/ ULONG StateFlags;
	/*00a8*/ CHAR DeviceID[0x80];
	/*0128*/ CHAR DeviceKey[0x80];
	/*01a8*/
};

struct _DISPLAY_DEVICEW {
	/*0000*/ ULONG cb;
	/*0004*/ WCHAR DeviceName[0x20];
	/*0044*/ WCHAR DeviceString[0x80];
	/*0144*/ ULONG StateFlags;
	/*0148*/ WCHAR DeviceID[0x80];
	/*0248*/ WCHAR DeviceKey[0x80];
	/*0348*/
};

union _DL_EUI48;

struct _DMA_CONFIGURATION_BYTE0 {
	/*0000*/ UCHAR Channel : 03; // 0x07;
	/*0000*/ UCHAR Reserved : 03; // 0x38;
	/*0000*/ UCHAR Shared : 01; // 0x40;
	/*0000*/ UCHAR MoreEntries : 01; // 0x80;
	/*0001*/
};

struct _DMA_CONFIGURATION_BYTE1 {
	/*0000*/ UCHAR Reserved0 : 02; // 0x03;
	/*0000*/ UCHAR TransferSize : 02; // 0x0c;
	/*0000*/ UCHAR Timing : 02; // 0x30;
	/*0000*/ UCHAR Reserved1 : 02; // 0xc0;
	/*0001*/
};

enum _DMA_SPEED {
	Compatible = 0x0,
	TypeA = 0x1,
	TypeB = 0x2,
	TypeC = 0x3,
	TypeF = 0x4,
	MaximumDmaSpeed = 0x5
};

enum _DMA_WIDTH {
	Width8Bits = 0x0,
	Width16Bits = 0x1,
	Width32Bits = 0x2,
	Width64Bits = 0x3,
	WidthNoWrap = 0x4,
	MaximumDmaWidth = 0x5
};

struct _DOCINFOA {
	/*0000*/ INT cbSize;
	/*0008*/ CHAR const * lpszDocName;
	/*0010*/ CHAR const * lpszOutput;
	/*0018*/ CHAR const * lpszDatatype;
	/*0020*/ ULONG fwType;
	/*0028*/
};

struct _DOCINFOW {
	/*0000*/ INT cbSize;
	/*0008*/ WCHAR const * lpszDocName;
	/*0010*/ WCHAR const * lpszOutput;
	/*0018*/ WCHAR const * lpszDatatype;
	/*0020*/ ULONG fwType;
	/*0028*/
};

struct _DPC_WATCHDOG_GLOBAL_TRIAGE_BLOCK {
	/*0000*/ ULONG Signature;
	/*0004*/ USHORT Revision;
	/*0006*/ USHORT Size;
	/*0008*/ USHORT DpcWatchdogProfileOffset;
	/*000c*/ ULONG DpcWatchdogProfileLength;
	/*0010*/
};

enum _DPFLTR_TYPE {
	DPFLTR_SYSTEM_ID = 0x0,
	DPFLTR_SMSS_ID = 0x1,
	DPFLTR_SETUP_ID = 0x2,
	DPFLTR_NTFS_ID = 0x3,
	DPFLTR_FSTUB_ID = 0x4,
	DPFLTR_CRASHDUMP_ID = 0x5,
	DPFLTR_CDAUDIO_ID = 0x6,
	DPFLTR_CDROM_ID = 0x7,
	DPFLTR_CLASSPNP_ID = 0x8,
	DPFLTR_DISK_ID = 0x9,
	DPFLTR_REDBOOK_ID = 0xa,
	DPFLTR_STORPROP_ID = 0xb,
	DPFLTR_SCSIPORT_ID = 0xc,
	DPFLTR_SCSIMINIPORT_ID = 0xd,
	DPFLTR_CONFIG_ID = 0xe,
	DPFLTR_I8042PRT_ID = 0xf,
	DPFLTR_SERMOUSE_ID = 0x10,
	DPFLTR_LSERMOUS_ID = 0x11,
	DPFLTR_KBDHID_ID = 0x12,
	DPFLTR_MOUHID_ID = 0x13,
	DPFLTR_KBDCLASS_ID = 0x14,
	DPFLTR_MOUCLASS_ID = 0x15,
	DPFLTR_TWOTRACK_ID = 0x16,
	DPFLTR_WMILIB_ID = 0x17,
	DPFLTR_ACPI_ID = 0x18,
	DPFLTR_AMLI_ID = 0x19,
	DPFLTR_HALIA64_ID = 0x1a,
	DPFLTR_VIDEO_ID = 0x1b,
	DPFLTR_SVCHOST_ID = 0x1c,
	DPFLTR_VIDEOPRT_ID = 0x1d,
	DPFLTR_TCPIP_ID = 0x1e,
	DPFLTR_DMSYNTH_ID = 0x1f,
	DPFLTR_NTOSPNP_ID = 0x20,
	DPFLTR_FASTFAT_ID = 0x21,
	DPFLTR_SAMSS_ID = 0x22,
	DPFLTR_PNPMGR_ID = 0x23,
	DPFLTR_NETAPI_ID = 0x24,
	DPFLTR_SCSERVER_ID = 0x25,
	DPFLTR_SCCLIENT_ID = 0x26,
	DPFLTR_SERIAL_ID = 0x27,
	DPFLTR_SERENUM_ID = 0x28,
	DPFLTR_UHCD_ID = 0x29,
	DPFLTR_RPCPROXY_ID = 0x2a,
	DPFLTR_AUTOCHK_ID = 0x2b,
	DPFLTR_DCOMSS_ID = 0x2c,
	DPFLTR_UNIMODEM_ID = 0x2d,
	DPFLTR_SIS_ID = 0x2e,
	DPFLTR_FLTMGR_ID = 0x2f,
	DPFLTR_WMICORE_ID = 0x30,
	DPFLTR_BURNENG_ID = 0x31,
	DPFLTR_IMAPI_ID = 0x32,
	DPFLTR_SXS_ID = 0x33,
	DPFLTR_FUSION_ID = 0x34,
	DPFLTR_IDLETASK_ID = 0x35,
	DPFLTR_SOFTPCI_ID = 0x36,
	DPFLTR_TAPE_ID = 0x37,
	DPFLTR_MCHGR_ID = 0x38,
	DPFLTR_IDEP_ID = 0x39,
	DPFLTR_PCIIDE_ID = 0x3a,
	DPFLTR_FLOPPY_ID = 0x3b,
	DPFLTR_FDC_ID = 0x3c,
	DPFLTR_TERMSRV_ID = 0x3d,
	DPFLTR_W32TIME_ID = 0x3e,
	DPFLTR_PREFETCHER_ID = 0x3f,
	DPFLTR_RSFILTER_ID = 0x40,
	DPFLTR_FCPORT_ID = 0x41,
	DPFLTR_PCI_ID = 0x42,
	DPFLTR_DMIO_ID = 0x43,
	DPFLTR_DMCONFIG_ID = 0x44,
	DPFLTR_DMADMIN_ID = 0x45,
	DPFLTR_WSOCKTRANSPORT_ID = 0x46,
	DPFLTR_VSS_ID = 0x47,
	DPFLTR_PNPMEM_ID = 0x48,
	DPFLTR_PROCESSOR_ID = 0x49,
	DPFLTR_DMSERVER_ID = 0x4a,
	DPFLTR_SR_ID = 0x4b,
	DPFLTR_INFINIBAND_ID = 0x4c,
	DPFLTR_IHVDRIVER_ID = 0x4d,
	DPFLTR_IHVVIDEO_ID = 0x4e,
	DPFLTR_IHVAUDIO_ID = 0x4f,
	DPFLTR_IHVNETWORK_ID = 0x50,
	DPFLTR_IHVSTREAMING_ID = 0x51,
	DPFLTR_IHVBUS_ID = 0x52,
	DPFLTR_HPS_ID = 0x53,
	DPFLTR_RTLTHREADPOOL_ID = 0x54,
	DPFLTR_LDR_ID = 0x55,
	DPFLTR_TCPIP6_ID = 0x56,
	DPFLTR_ISAPNP_ID = 0x57,
	DPFLTR_SHPC_ID = 0x58,
	DPFLTR_STORPORT_ID = 0x59,
	DPFLTR_STORMINIPORT_ID = 0x5a,
	DPFLTR_PRINTSPOOLER_ID = 0x5b,
	DPFLTR_VSSDYNDISK_ID = 0x5c,
	DPFLTR_VERIFIER_ID = 0x5d,
	DPFLTR_VDS_ID = 0x5e,
	DPFLTR_VDSBAS_ID = 0x5f,
	DPFLTR_VDSDYN_ID = 0x60,
	DPFLTR_VDSDYNDR_ID = 0x61,
	DPFLTR_VDSLDR_ID = 0x62,
	DPFLTR_VDSUTIL_ID = 0x63,
	DPFLTR_DFRGIFC_ID = 0x64,
	DPFLTR_DEFAULT_ID = 0x65,
	DPFLTR_MM_ID = 0x66,
	DPFLTR_DFSC_ID = 0x67,
	DPFLTR_WOW64_ID = 0x68,
	DPFLTR_ALPC_ID = 0x69,
	DPFLTR_WDI_ID = 0x6a,
	DPFLTR_PERFLIB_ID = 0x6b,
	DPFLTR_KTM_ID = 0x6c,
	DPFLTR_IOSTRESS_ID = 0x6d,
	DPFLTR_HEAP_ID = 0x6e,
	DPFLTR_WHEA_ID = 0x6f,
	DPFLTR_USERGDI_ID = 0x70,
	DPFLTR_MMCSS_ID = 0x71,
	DPFLTR_TPM_ID = 0x72,
	DPFLTR_THREADORDER_ID = 0x73,
	DPFLTR_ENVIRON_ID = 0x74,
	DPFLTR_EMS_ID = 0x75,
	DPFLTR_WDT_ID = 0x76,
	DPFLTR_FVEVOL_ID = 0x77,
	DPFLTR_NDIS_ID = 0x78,
	DPFLTR_NVCTRACE_ID = 0x79,
	DPFLTR_LUAFV_ID = 0x7a,
	DPFLTR_APPCOMPAT_ID = 0x7b,
	DPFLTR_USBSTOR_ID = 0x7c,
	DPFLTR_SBP2PORT_ID = 0x7d,
	DPFLTR_COVERAGE_ID = 0x7e,
	DPFLTR_CACHEMGR_ID = 0x7f,
	DPFLTR_MOUNTMGR_ID = 0x80,
	DPFLTR_CFR_ID = 0x81,
	DPFLTR_TXF_ID = 0x82,
	DPFLTR_KSECDD_ID = 0x83,
	DPFLTR_FLTREGRESS_ID = 0x84,
	DPFLTR_MPIO_ID = 0x85,
	DPFLTR_MSDSM_ID = 0x86,
	DPFLTR_UDFS_ID = 0x87,
	DPFLTR_PSHED_ID = 0x88,
	DPFLTR_STORVSP_ID = 0x89,
	DPFLTR_LSASS_ID = 0x8a,
	DPFLTR_SSPICLI_ID = 0x8b,
	DPFLTR_CNG_ID = 0x8c,
	DPFLTR_EXFAT_ID = 0x8d,
	DPFLTR_FILETRACE_ID = 0x8e,
	DPFLTR_XSAVE_ID = 0x8f,
	DPFLTR_SE_ID = 0x90,
	DPFLTR_DRIVEEXTENDER_ID = 0x91,
	DPFLTR_POWER_ID = 0x92,
	DPFLTR_CRASHDUMPXHCI_ID = 0x93,
	DPFLTR_GPIO_ID = 0x94,
	DPFLTR_REFS_ID = 0x95,
	DPFLTR_WER_ID = 0x96,
	DPFLTR_CAPIMG_ID = 0x97,
	DPFLTR_VPCI_ID = 0x98,
	DPFLTR_STORAGECLASSMEMORY_ID = 0x99,
	DPFLTR_FSLIB_ID = 0x9a,
	DPFLTR_ENDOFTABLE_ID = 0x9b
};

struct _DRAWPATRECT {
	/*0000*/ tagPOINT ptPosition;
	/*0008*/ tagPOINT ptSize;
	/*0010*/ USHORT wStyle;
	/*0012*/ USHORT wPattern;
	/*0014*/
};

struct _DRIVER_VERIFIER_THUNK_PAIRS {
	/*0000*/ ULONGLONG (* PristineRoutine)( void * );
	/*0008*/ ULONGLONG (* NewRoutine)( void * );
	/*0010*/
};

struct _DUPLICATE_CLUSTER_DATA {
	/*0000*/ LONGLONG SourceLcn;
	/*0008*/ _LARGE_INTEGER TargetFileOffset;
	/*0010*/ ULONG DuplicationLimit;
	/*0014*/ ULONG Reserved;
	/*0018*/
};

struct _DUPLICATE_EXTENTS_DATA {
	/*0000*/ void * FileHandle;
	/*0008*/ _LARGE_INTEGER SourceFileOffset;
	/*0010*/ _LARGE_INTEGER TargetFileOffset;
	/*0018*/ _LARGE_INTEGER ByteCount;
	/*0020*/
};

struct _DUPLICATE_EXTENTS_DATA32 {
	/*0000*/ UINT FileHandle;
	/*0008*/ _LARGE_INTEGER SourceFileOffset;
	/*0010*/ _LARGE_INTEGER TargetFileOffset;
	/*0018*/ _LARGE_INTEGER ByteCount;
	/*0020*/
};

struct _DUPLICATE_EXTENTS_DATA_EX {
	/*0000*/ ULONGLONG Size;
	/*0008*/ void * FileHandle;
	/*0010*/ _LARGE_INTEGER SourceFileOffset;
	/*0018*/ _LARGE_INTEGER TargetFileOffset;
	/*0020*/ _LARGE_INTEGER ByteCount;
	/*0028*/ ULONG Flags;
	/*0030*/
};

struct _DUPLICATE_EXTENTS_DATA_EX32 {
	/*0000*/ UINT Size;
	/*0004*/ UINT FileHandle;
	/*0008*/ _LARGE_INTEGER SourceFileOffset;
	/*0010*/ _LARGE_INTEGER TargetFileOffset;
	/*0018*/ _LARGE_INTEGER ByteCount;
	/*0020*/ ULONG Flags;
	/*0028*/
};

enum _DUPLICATE_EXTENTS_STATE {
	FileSnapStateInactive = 0x0,
	FileSnapStateSource = 0x1,
	FileSnapStateTarget = 0x2
};

struct _DWORD_BLOB {
	/*0000*/ ULONG clSize;
	/*0004*/ ULONG alData[0x1];
	/*0008*/
};

struct _DYNAMIC_FUNCTION_TABLE {
	/*0000*/ _LIST_ENTRY ListEntry;
	/*0010*/ _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionTable;
	/*0018*/ _LARGE_INTEGER TimeStamp;
	/*0020*/ ULONGLONG MinimumAddress;
	/*0028*/ ULONGLONG MaximumAddress;
	/*0030*/ ULONGLONG BaseAddress;
	/*0038*/ _IMAGE_RUNTIME_FUNCTION_ENTRY * (* Callback)( ULONGLONG , void * );
	/*0040*/ void * Context;
	/*0048*/ WCHAR * OutOfProcessCallbackDll;
	/*0050*/ _FUNCTION_TABLE_TYPE Type;
	/*0054*/ ULONG EntryCount;
	/*0058*/ _RTL_BALANCED_NODE TreeNodeMin;
	/*0070*/ _RTL_BALANCED_NODE TreeNodeMax;
	/*0088*/
};

struct _EFI_DRIVER_ENTRY {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Id;
	/*000c*/ ULONG FriendlyNameOffset;
	/*0010*/ ULONG DriverFilePathOffset;
	/*0014*/
};

struct _EFI_DRIVER_ENTRY_LIST {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ _EFI_DRIVER_ENTRY DriverEntry;
	/*0018*/
};

struct _EISA_DMA_CONFIGURATION {
	/*0000*/ _DMA_CONFIGURATION_BYTE0 ConfigurationByte0;
	/*0001*/ _DMA_CONFIGURATION_BYTE1 ConfigurationByte1;
	/*0002*/
};

struct _EISA_IRQ_CONFIGURATION {
	/*0000*/ _EISA_IRQ_DESCRIPTOR ConfigurationByte;
	/*0001*/ UCHAR Reserved;
	/*0002*/
};

struct _EISA_IRQ_DESCRIPTOR {
	/*0000*/ UCHAR Interrupt : 04; // 0x0f;
	/*0000*/ UCHAR Reserved : 01; // 0x10;
	/*0000*/ UCHAR LevelTriggered : 01; // 0x20;
	/*0000*/ UCHAR Shared : 01; // 0x40;
	/*0000*/ UCHAR MoreEntries : 01; // 0x80;
	/*0001*/
};

struct _EISA_MEMORY_CONFIGURATION {
	/*0000*/ _EISA_MEMORY_TYPE ConfigurationByte;
	/*0001*/ UCHAR DataSize;
	/*0002*/ USHORT AddressLowWord;
	/*0004*/ UCHAR AddressHighByte;
	/*0005*/ USHORT MemorySize;
	/*0007*/
};

struct _EISA_MEMORY_TYPE {
	/*0000*/ UCHAR ReadWrite : 01; // 0x01;
	/*0000*/ UCHAR Cached : 01; // 0x02;
	/*0000*/ UCHAR Reserved0 : 01; // 0x04;
	/*0000*/ UCHAR Type : 02; // 0x18;
	/*0000*/ UCHAR Shared : 01; // 0x20;
	/*0000*/ UCHAR Reserved1 : 01; // 0x40;
	/*0000*/ UCHAR MoreEntries : 01; // 0x80;
	/*0001*/
};

struct _EISA_PORT_CONFIGURATION {
	/*0000*/ _EISA_PORT_DESCRIPTOR Configuration;
	/*0001*/ USHORT PortAddress;
	/*0003*/
};

struct _EISA_PORT_DESCRIPTOR {
	/*0000*/ UCHAR NumberPorts : 05; // 0x1f;
	/*0000*/ UCHAR Reserved : 01; // 0x20;
	/*0000*/ UCHAR Shared : 01; // 0x40;
	/*0000*/ UCHAR MoreEntries : 01; // 0x80;
	/*0001*/
};

struct _ENCLAVE_CREATE_INFO_SGX {
	/*0000*/ UCHAR Secs[0x1000];
	/*1000*/
};

struct _ENCLAVE_CREATE_INFO_VBS {
	/*0000*/ ULONG Flags;
	/*0004*/ UCHAR OwnerID[0x20];
	/*0024*/
};

struct _ENCLAVE_CREATE_INFO_VBS_BASIC {
	/*0000*/ ULONG Flags;
	/*0004*/ UCHAR OwnerID[0x20];
	/*0024*/
};

struct _ENCLAVE_INIT_INFO_SGX {
	/*0000*/ UCHAR SigStruct[0x710];
	/*0710*/ UCHAR Reserved1[0xf0];
	/*0800*/ UCHAR EInitToken[0x130];
	/*0930*/ UCHAR Reserved2[0x6d0];
	/*1000*/
};

struct _ENCLAVE_INIT_INFO_VBS {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG ThreadCount;
	/*0008*/
};

struct _ENCLAVE_INIT_INFO_VBS_BASIC {
	/*0000*/ UCHAR FamilyId[0x10];
	/*0010*/ UCHAR ImageId[0x10];
	/*0020*/ ULONGLONG EnclaveSize;
	/*0028*/ ULONG EnclaveSvn;
	/*002c*/ ULONG Reserved;
	/*0030*/ void * SignatureInfoHandle;
	/*0030*/ ULONGLONG Unused;
	/*0038*/
};

struct _ENCLAVE_LOAD_DATA_VBS_BASIC {
	/*0000*/ ULONG PageType;
	/*0004*/
};

struct _ENCLAVE_LOAD_INFO_VBS {
	/*0000*/ void * ImageHandle;
	/*0000*/ ULONGLONG Unused;
	/*0008*/ USHORT NameLength;
	/*000a*/ WCHAR Name[0x1];
	/*0010*/
};

struct _ENCRYPTED_DATA_INFO {
	/*0000*/ ULONGLONG StartingFileOffset;
	/*0008*/ ULONG OutputBufferOffset;
	/*000c*/ ULONG BytesWithinFileSize;
	/*0010*/ ULONG BytesWithinValidDataLength;
	/*0014*/ USHORT CompressionFormat;
	/*0016*/ UCHAR DataUnitShift;
	/*0017*/ UCHAR ChunkShift;
	/*0018*/ UCHAR ClusterShift;
	/*0019*/ UCHAR EncryptionFormat;
	/*001a*/ USHORT NumberOfDataBlocks;
	/*001c*/ ULONG DataBlockSize[0x1];
	/*0020*/
};

struct _ENCRYPTION_BUFFER {
	/*0000*/ ULONG EncryptionOperation;
	/*0004*/ UCHAR Private[0x1];
	/*0008*/
};

struct _ENCRYPTION_KEY_CTRL_INPUT {
	/*0000*/ ULONG HeaderSize;
	/*0004*/ ULONG StructureSize;
	/*0008*/ USHORT KeyOffset;
	/*000a*/ USHORT KeySize;
	/*000c*/ ULONG DplLock;
	/*0010*/ ULONGLONG DplUserId;
	/*0018*/ ULONGLONG DplCredentialId;
	/*0020*/
};

union _ENERGY_STATE_DURATION {
	/*0000*/ ULONGLONG Value;
	/*0000*/ ULONG LastChangeTime;
	/*0004*/ ULONG Duration : 31; // 0x7fffffff;
	/*0004*/ ULONG IsInState : 01; // 0x80000000;
	/*0008*/
};

struct _ENLISTMENT_BASIC_INFORMATION {
	/*0000*/ _GUID EnlistmentId;
	/*0010*/ _GUID TransactionId;
	/*0020*/ _GUID ResourceManagerId;
	/*0030*/
};

struct _ENLISTMENT_CRM_INFORMATION {
	/*0000*/ _GUID CrmTransactionManagerId;
	/*0010*/ _GUID CrmResourceManagerId;
	/*0020*/ _GUID CrmEnlistmentId;
	/*0030*/
};

enum _ENLISTMENT_INFORMATION_CLASS {
	EnlistmentBasicInformation = 0x0,
	EnlistmentRecoveryInformation = 0x1,
	EnlistmentCrmInformation = 0x2
};

struct _ENUM_FLAG_INTEGER_FOR_SIZE<1> {
	/*0001*/
};

struct _ENUM_FLAG_INTEGER_FOR_SIZE<2> {
	/*0001*/
};

struct _ENUM_FLAG_INTEGER_FOR_SIZE<4> {
	/*0001*/
};

struct _ENUM_FLAG_INTEGER_FOR_SIZE<8> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum ABI::Windows::Foundation::Diagnostics::RoErrorReportingFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum ASTA_TEST_MODE_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum CWMO_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum DIALOG_DPI_CHANGE_BEHAVIORS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum FILE_WRITE_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum ORIENTATION_PREFERENCE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum RO_ERROR_REPORTING_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Foundation::Diagnostics::ErrorOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Foundation::Diagnostics::RoErrorReportingFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Storage::Streams::InputStreamOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _FS_BPIO_INFLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _FS_BPIO_OUTFLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _MACHINE_ATTRIBUTES> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _NT_READ_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _NT_WRITE_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _RTL_FEATURE_CONFIGURATION_OPERATION> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _RTL_FEATURE_ENABLED_STATE_OPTIONS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _RTL_RESOURCE_POLICY_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _SE_SAFE_OPEN_PROMPT_EXPERIENCE_RESULTS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagAR_STATE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagCOWAIT_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagREGCLS> {
	/*0001*/
};

struct _ENUM_SERVICE_STATUSA {
	/*0000*/ CHAR * lpServiceName;
	/*0008*/ CHAR * lpDisplayName;
	/*0010*/ _SERVICE_STATUS ServiceStatus;
	/*0030*/
};

struct _ENUM_SERVICE_STATUSW {
	/*0000*/ WCHAR * lpServiceName;
	/*0008*/ WCHAR * lpDisplayName;
	/*0010*/ _SERVICE_STATUS ServiceStatus;
	/*0030*/
};

struct _ENUM_SERVICE_STATUS_PROCESSA {
	/*0000*/ CHAR * lpServiceName;
	/*0008*/ CHAR * lpDisplayName;
	/*0010*/ _SERVICE_STATUS_PROCESS ServiceStatusProcess;
	/*0038*/
};

struct _ENUM_SERVICE_STATUS_PROCESSW {
	/*0000*/ WCHAR * lpServiceName;
	/*0008*/ WCHAR * lpDisplayName;
	/*0010*/ _SERVICE_STATUS_PROCESS ServiceStatusProcess;
	/*0038*/
};

enum _ERROR_SEVERITY_VALUE {
	ErrorRecoverable = 0x0,
	ErrorFatal = 0x1,
	ErrorCorrected = 0x2,
	ErrorOthers = 0x3
};

struct _EVENTLOGRECORD {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONG RecordNumber;
	/*000c*/ ULONG TimeGenerated;
	/*0010*/ ULONG TimeWritten;
	/*0014*/ ULONG EventID;
	/*0018*/ USHORT EventType;
	/*001a*/ USHORT NumStrings;
	/*001c*/ USHORT EventCategory;
	/*001e*/ USHORT ReservedFlags;
	/*0020*/ ULONG ClosingRecordNumber;
	/*0024*/ ULONG StringOffset;
	/*0028*/ ULONG UserSidLength;
	/*002c*/ ULONG UserSidOffset;
	/*0030*/ ULONG DataLength;
	/*0034*/ ULONG DataOffset;
	/*0038*/
};

struct _EVENTLOG_FULL_INFORMATION {
	/*0000*/ ULONG dwFull;
	/*0004*/
};

struct _EVENTSFORLOGFILE {
	/*0000*/ ULONG ulSize;
	/*0004*/ WCHAR szLogicalLogFile[0x100];
	/*0204*/ ULONG ulNumRecords;
	/*0208*/ _EVENTLOGRECORD pEventLogRecords[];
	/*0208*/
};

struct _EVENT_BASIC_INFORMATION {
	/*0000*/ _EVENT_TYPE EventType;
	/*0004*/ LONG EventState;
	/*0008*/
};

struct _EVENT_FILTER_DESCRIPTOR;

enum _EVENT_INFORMATION_CLASS {
	EventBasicInformation = 0x0
};

enum _EVENT_TYPE {
	NotificationEvent = 0x0,
	SynchronizationEvent = 0x1
};

struct _EXCEPTION_DEBUG_INFO {
	/*0000*/ _EXCEPTION_RECORD ExceptionRecord;
	/*0098*/ ULONG dwFirstChance;
	/*00a0*/
};

enum _EXCEPTION_DISPOSITION {
	ExceptionContinueExecution = 0x0,
	ExceptionContinueSearch = 0x1,
	ExceptionNestedException = 0x2,
	ExceptionCollidedUnwind = 0x3
};

struct _EXCEPTION_LOG {
	/*0000*/ _EXCEPTION_RECORD ExceptionRecord;
	/*00a0*/ _CONTEXT ContextRecord;
	/*0570*/ _EXCEPTION_LOG_TYPE Type;
	/*0574*/ LONG Disposition;
	/*0578*/ ULONGLONG Thread;
	/*0580*/ ULONGLONG ControlPc;
	/*0588*/ void * Handler;
	/*0590*/
};

enum _EXCEPTION_LOG_TYPE {
	LogExceptionEmpty = 0x0,
	LogExceptionDispatch = 0x1,
	LogExceptionHandler = 0x2
};

struct _EXCEPTION_POINTERS {
	/*0000*/ _EXCEPTION_RECORD * ExceptionRecord;
	/*0008*/ _CONTEXT * ContextRecord;
	/*0010*/
};

struct _EXCEPTION_RECORD {
	/*0000*/ LONG ExceptionCode;
	/*0004*/ ULONG ExceptionFlags;
	/*0008*/ _EXCEPTION_RECORD * ExceptionRecord;
	/*0010*/ void * ExceptionAddress;
	/*0018*/ ULONG NumberParameters;
	/*0020*/ ULONGLONG ExceptionInformation[0xf];
	/*0098*/
};

struct _EXCEPTION_RECORD32 {
	/*0000*/ LONG ExceptionCode;
	/*0004*/ ULONG ExceptionFlags;
	/*0008*/ ULONG ExceptionRecord;
	/*000c*/ ULONG ExceptionAddress;
	/*0010*/ ULONG NumberParameters;
	/*0014*/ ULONG ExceptionInformation[0xf];
	/*0050*/
};

struct _EXCEPTION_RECORD64 {
	/*0000*/ LONG ExceptionCode;
	/*0004*/ ULONG ExceptionFlags;
	/*0008*/ ULONGLONG ExceptionRecord;
	/*0010*/ ULONGLONG ExceptionAddress;
	/*0018*/ ULONG NumberParameters;
	/*001c*/ ULONG __unusedAlignment;
	/*0020*/ ULONGLONG ExceptionInformation[0xf];
	/*0098*/
};

struct _EXCEPTION_REGISTRATION_RECORD {
	/*0000*/ _EXCEPTION_REGISTRATION_RECORD * Next;
	/*0008*/ _EXCEPTION_DISPOSITION (* Handler)( _EXCEPTION_RECORD * , void * , _CONTEXT * , void * );
	/*0010*/
};

struct _EXFAT_STATISTICS {
	/*0000*/ ULONG CreateHits;
	/*0004*/ ULONG SuccessfulCreates;
	/*0008*/ ULONG FailedCreates;
	/*000c*/ ULONG NonCachedReads;
	/*0010*/ ULONG NonCachedReadBytes;
	/*0014*/ ULONG NonCachedWrites;
	/*0018*/ ULONG NonCachedWriteBytes;
	/*001c*/ ULONG NonCachedDiskReads;
	/*0020*/ ULONG NonCachedDiskWrites;
	/*0024*/
};

struct _EXIT_PROCESS_DEBUG_INFO {
	/*0000*/ ULONG dwExitCode;
	/*0004*/
};

struct _EXIT_THREAD_DEBUG_INFO {
	/*0000*/ ULONG dwExitCode;
	/*0004*/
};

struct _EXTENDED_CREATE_INFORMATION {
	/*0000*/ LONGLONG ExtendedCreateFlags;
	/*0008*/ void * EaBuffer;
	/*0010*/ ULONG EaLength;
	/*0018*/
};

struct _EXTENDED_CREATE_INFORMATION_32 {
	/*0000*/ LONGLONG ExtendedCreateFlags;
	/*0008*/ void * EaBuffer;
	/*000c*/ ULONG EaLength;
	/*0010*/
};

struct _EXTENDED_ENCRYPTED_DATA_INFO {
	/*0000*/ ULONG ExtendedCode;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG Reserved;
	/*0010*/
};

struct _EXTENT_READ_CACHE_INFO_BUFFER {
	/*0000*/ _LARGE_INTEGER AllocatedCache;
	/*0008*/ _LARGE_INTEGER PopulatedCache;
	/*0010*/ _LARGE_INTEGER InErrorCache;
	/*0018*/
};

struct _EX_WNF_SUBSCRIPTION;

struct _FAT_STATISTICS {
	/*0000*/ ULONG CreateHits;
	/*0004*/ ULONG SuccessfulCreates;
	/*0008*/ ULONG FailedCreates;
	/*000c*/ ULONG NonCachedReads;
	/*0010*/ ULONG NonCachedReadBytes;
	/*0014*/ ULONG NonCachedWrites;
	/*0018*/ ULONG NonCachedWriteBytes;
	/*001c*/ ULONG NonCachedDiskReads;
	/*0020*/ ULONG NonCachedDiskWrites;
	/*0024*/
};

struct _FIBER {
	/*0000*/ void * FiberData;
	/*0008*/ _EXCEPTION_REGISTRATION_RECORD * ExceptionList;
	/*0010*/ void * StackBase;
	/*0018*/ void * StackLimit;
	/*0020*/ void * DeallocationStack;
	/*0028*/ void * Pad;
	/*0030*/ _CONTEXT FiberContext;
	/*0500*/ _Wx86TIB * Wx86Tib;
	/*0508*/ _ACTIVATION_CONTEXT_STACK * ActivationContextStackPointer;
	/*0510*/ void * FlsData;
	/*0518*/ ULONG GuaranteedStackBytes;
	/*051c*/ USHORT TebFlags;
	/*051e*/ USHORT ReservedPad;
	/*0520*/ ULONGLONG FiberCookie;
	/*0530*/
};

struct _FILEMUIINFO {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwVersion;
	/*0008*/ ULONG dwFileType;
	/*000c*/ UCHAR pChecksum[0x10];
	/*001c*/ UCHAR pServiceChecksum[0x10];
	/*002c*/ ULONG dwLanguageNameOffset;
	/*0030*/ ULONG dwTypeIDMainSize;
	/*0034*/ ULONG dwTypeIDMainOffset;
	/*0038*/ ULONG dwTypeNameMainOffset;
	/*003c*/ ULONG dwTypeIDMUISize;
	/*0040*/ ULONG dwTypeIDMUIOffset;
	/*0044*/ ULONG dwTypeNameMUIOffset;
	/*0048*/ UCHAR abBuffer[0x8];
	/*0050*/
};

struct _FILEOFFSET_INFORMATION {
	/*0000*/ ULONGLONG DontUse : 09; // 0x00000000000001ff;
	/*0000*/ ULONGLONG Offset : 48; // 0x01fffffffffffe00;
	/*0000*/ ULONGLONG Reserved : 07; // 0xfe00000000000000;
	/*0008*/
};

struct _FILESYSTEM_STATISTICS {
	/*0000*/ USHORT FileSystemType;
	/*0002*/ USHORT Version;
	/*0004*/ ULONG SizeOfCompleteStructure;
	/*0008*/ ULONG UserFileReads;
	/*000c*/ ULONG UserFileReadBytes;
	/*0010*/ ULONG UserDiskReads;
	/*0014*/ ULONG UserFileWrites;
	/*0018*/ ULONG UserFileWriteBytes;
	/*001c*/ ULONG UserDiskWrites;
	/*0020*/ ULONG MetaDataReads;
	/*0024*/ ULONG MetaDataReadBytes;
	/*0028*/ ULONG MetaDataDiskReads;
	/*002c*/ ULONG MetaDataWrites;
	/*0030*/ ULONG MetaDataWriteBytes;
	/*0034*/ ULONG MetaDataDiskWrites;
	/*0038*/
};

struct _FILESYSTEM_STATISTICS_EX {
	/*0000*/ USHORT FileSystemType;
	/*0002*/ USHORT Version;
	/*0004*/ ULONG SizeOfCompleteStructure;
	/*0008*/ ULONGLONG UserFileReads;
	/*0010*/ ULONGLONG UserFileReadBytes;
	/*0018*/ ULONGLONG UserDiskReads;
	/*0020*/ ULONGLONG UserFileWrites;
	/*0028*/ ULONGLONG UserFileWriteBytes;
	/*0030*/ ULONGLONG UserDiskWrites;
	/*0038*/ ULONGLONG MetaDataReads;
	/*0040*/ ULONGLONG MetaDataReadBytes;
	/*0048*/ ULONGLONG MetaDataDiskReads;
	/*0050*/ ULONGLONG MetaDataWrites;
	/*0058*/ ULONGLONG MetaDataWriteBytes;
	/*0060*/ ULONGLONG MetaDataDiskWrites;
	/*0068*/
};

struct _FILETIME {
	/*0000*/ ULONG dwLowDateTime;
	/*0004*/ ULONG dwHighDateTime;
	/*0008*/
};

struct _FILE_ACCESS_INFORMATION {
	/*0000*/ ULONG AccessFlags;
	/*0004*/
};

struct _FILE_ALIGNMENT_INFO {
	/*0000*/ ULONG AlignmentRequirement;
	/*0004*/
};

struct _FILE_ALIGNMENT_INFORMATION {
	/*0000*/ ULONG AlignmentRequirement;
	/*0004*/
};

struct _FILE_ALLOCATED_RANGE_BUFFER {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER Length;
	/*0010*/
};

struct _FILE_ALLOCATION_INFO {
	/*0000*/ _LARGE_INTEGER AllocationSize;
	/*0008*/
};

struct _FILE_ALLOCATION_INFORMATION {
	/*0000*/ _LARGE_INTEGER AllocationSize;
	/*0008*/
};

struct _FILE_ALL_INFORMATION {
	/*0000*/ _FILE_BASIC_INFORMATION BasicInformation;
	/*0028*/ _FILE_STANDARD_INFORMATION StandardInformation;
	/*0040*/ _FILE_INTERNAL_INFORMATION InternalInformation;
	/*0048*/ _FILE_EA_INFORMATION EaInformation;
	/*004c*/ _FILE_ACCESS_INFORMATION AccessInformation;
	/*0050*/ _FILE_POSITION_INFORMATION PositionInformation;
	/*0058*/ _FILE_MODE_INFORMATION ModeInformation;
	/*005c*/ _FILE_ALIGNMENT_INFORMATION AlignmentInformation;
	/*0060*/ _FILE_NAME_INFORMATION NameInformation;
	/*0068*/
};

struct _FILE_ATTRIBUTE_TAG_INFO {
	/*0000*/ ULONG FileAttributes;
	/*0004*/ ULONG ReparseTag;
	/*0008*/
};

struct _FILE_ATTRIBUTE_TAG_INFORMATION {
	/*0000*/ ULONG FileAttributes;
	/*0004*/ ULONG ReparseTag;
	/*0008*/
};

struct _FILE_BASIC_INFO {
	/*0000*/ _LARGE_INTEGER CreationTime;
	/*0008*/ _LARGE_INTEGER LastAccessTime;
	/*0010*/ _LARGE_INTEGER LastWriteTime;
	/*0018*/ _LARGE_INTEGER ChangeTime;
	/*0020*/ ULONG FileAttributes;
	/*0028*/
};

struct _FILE_BASIC_INFORMATION {
	/*0000*/ _LARGE_INTEGER CreationTime;
	/*0008*/ _LARGE_INTEGER LastAccessTime;
	/*0010*/ _LARGE_INTEGER LastWriteTime;
	/*0018*/ _LARGE_INTEGER ChangeTime;
	/*0020*/ ULONG FileAttributes;
	/*0028*/
};

struct _FILE_BOTH_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ CHAR ShortNameLength;
	/*0046*/ WCHAR ShortName[0xc];
	/*005e*/ WCHAR FileName[0x1];
	/*0060*/
};

struct _FILE_CASE_SENSITIVE_INFO {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_CASE_SENSITIVE_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_COMPLETION_INFORMATION {
	/*0000*/ void * Port;
	/*0008*/ void * Key;
	/*0010*/
};

struct _FILE_COMPRESSION_INFO {
	/*0000*/ _LARGE_INTEGER CompressedFileSize;
	/*0008*/ USHORT CompressionFormat;
	/*000a*/ UCHAR CompressionUnitShift;
	/*000b*/ UCHAR ChunkShift;
	/*000c*/ UCHAR ClusterShift;
	/*000d*/ UCHAR Reserved[0x3];
	/*0010*/
};

struct _FILE_COMPRESSION_INFORMATION {
	/*0000*/ _LARGE_INTEGER CompressedFileSize;
	/*0008*/ USHORT CompressionFormat;
	/*000a*/ UCHAR CompressionUnitShift;
	/*000b*/ UCHAR ChunkShift;
	/*000c*/ UCHAR ClusterShift;
	/*000d*/ UCHAR Reserved[0x3];
	/*0010*/
};

struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION {
	/*0000*/ _FILE_STORAGE_TIER_CLASS Class;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _FILE_DIRECTORY_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ WCHAR FileName[0x1];
	/*0048*/
};

struct _FILE_DISPOSITION_INFO {
	/*0000*/ UCHAR DeleteFileW;
	/*0001*/
};

struct _FILE_DISPOSITION_INFORMATION {
	/*0000*/ UCHAR DeleteFile;
	/*0001*/
};

struct _FILE_DISPOSITION_INFORMATION_EX {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_DISPOSITION_INFO_EX {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_EA_INFORMATION {
	/*0000*/ ULONG EaSize;
	/*0004*/
};

struct _FILE_END_OF_FILE_INFO {
	/*0000*/ _LARGE_INTEGER EndOfFile;
	/*0008*/
};

struct _FILE_END_OF_FILE_INFORMATION {
	/*0000*/ _LARGE_INTEGER EndOfFile;
	/*0008*/
};

struct _FILE_END_OF_FILE_INFORMATION_EX {
	/*0000*/ _LARGE_INTEGER EndOfFile;
	/*0008*/ _LARGE_INTEGER PagingFileSizeInMM;
	/*0010*/ _LARGE_INTEGER PagingFileMaxSize;
	/*0018*/ ULONG Flags;
	/*0020*/
};

struct _FILE_FS_ATTRIBUTE_INFORMATION {
	/*0000*/ ULONG FileSystemAttributes;
	/*0004*/ LONG MaximumComponentNameLength;
	/*0008*/ ULONG FileSystemNameLength;
	/*000c*/ WCHAR FileSystemName[0x1];
	/*0010*/
};

struct _FILE_FS_CONTROL_INFORMATION {
	/*0000*/ _LARGE_INTEGER FreeSpaceStartFiltering;
	/*0008*/ _LARGE_INTEGER FreeSpaceThreshold;
	/*0010*/ _LARGE_INTEGER FreeSpaceStopFiltering;
	/*0018*/ _LARGE_INTEGER DefaultQuotaThreshold;
	/*0020*/ _LARGE_INTEGER DefaultQuotaLimit;
	/*0028*/ ULONG FileSystemControlFlags;
	/*0030*/
};

struct _FILE_FS_DATA_COPY_INFORMATION {
	/*0000*/ ULONG NumberOfCopies;
	/*0004*/
};

struct _FILE_FS_DEVICE_INFORMATION {
	/*0000*/ ULONG DeviceType;
	/*0004*/ ULONG Characteristics;
	/*0008*/
};

struct _FILE_FS_DRIVER_PATH_INFORMATION {
	/*0000*/ UCHAR DriverInPath;
	/*0004*/ ULONG DriverNameLength;
	/*0008*/ WCHAR DriverName[0x1];
	/*000c*/
};

struct _FILE_FS_FULL_SIZE_INFORMATION {
	/*0000*/ _LARGE_INTEGER TotalAllocationUnits;
	/*0008*/ _LARGE_INTEGER CallerAvailableAllocationUnits;
	/*0010*/ _LARGE_INTEGER ActualAvailableAllocationUnits;
	/*0018*/ ULONG SectorsPerAllocationUnit;
	/*001c*/ ULONG BytesPerSector;
	/*0020*/
};

struct _FILE_FS_FULL_SIZE_INFORMATION_EX {
	/*0000*/ ULONGLONG ActualTotalAllocationUnits;
	/*0008*/ ULONGLONG ActualAvailableAllocationUnits;
	/*0010*/ ULONGLONG ActualPoolUnavailableAllocationUnits;
	/*0018*/ ULONGLONG CallerTotalAllocationUnits;
	/*0020*/ ULONGLONG CallerAvailableAllocationUnits;
	/*0028*/ ULONGLONG CallerPoolUnavailableAllocationUnits;
	/*0030*/ ULONGLONG UsedAllocationUnits;
	/*0038*/ ULONGLONG TotalReservedAllocationUnits;
	/*0040*/ ULONGLONG VolumeStorageReserveAllocationUnits;
	/*0048*/ ULONGLONG AvailableCommittedAllocationUnits;
	/*0050*/ ULONGLONG PoolAvailableAllocationUnits;
	/*0058*/ ULONG SectorsPerAllocationUnit;
	/*005c*/ ULONG BytesPerSector;
	/*0060*/
};

struct _FILE_FS_LABEL_INFORMATION {
	/*0000*/ ULONG VolumeLabelLength;
	/*0004*/ WCHAR VolumeLabel[0x1];
	/*0008*/
};

struct _FILE_FS_METADATA_SIZE_INFORMATION {
	/*0000*/ _LARGE_INTEGER TotalMetadataAllocationUnits;
	/*0008*/ ULONG SectorsPerAllocationUnit;
	/*000c*/ ULONG BytesPerSector;
	/*0010*/
};

struct _FILE_FS_OBJECTID_INFORMATION {
	/*0000*/ UCHAR ObjectId[0x10];
	/*0010*/ UCHAR ExtendedInfo[0x30];
	/*0040*/
};

struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {
	/*0000*/ ULONG VolumeFlags;
	/*0004*/ ULONG FlagMask;
	/*0008*/ ULONG Version;
	/*000c*/ ULONG Reserved;
	/*0010*/
};

struct _FILE_FS_SECTOR_SIZE_INFORMATION {
	/*0000*/ ULONG LogicalBytesPerSector;
	/*0004*/ ULONG PhysicalBytesPerSectorForAtomicity;
	/*0008*/ ULONG PhysicalBytesPerSectorForPerformance;
	/*000c*/ ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
	/*0010*/ ULONG Flags;
	/*0014*/ ULONG ByteOffsetForSectorAlignment;
	/*0018*/ ULONG ByteOffsetForPartitionAlignment;
	/*001c*/
};

struct _FILE_FS_SIZE_INFORMATION {
	/*0000*/ _LARGE_INTEGER TotalAllocationUnits;
	/*0008*/ _LARGE_INTEGER AvailableAllocationUnits;
	/*0010*/ ULONG SectorsPerAllocationUnit;
	/*0014*/ ULONG BytesPerSector;
	/*0018*/
};

struct _FILE_FS_VOLUME_FLAGS_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_FS_VOLUME_INFORMATION {
	/*0000*/ _LARGE_INTEGER VolumeCreationTime;
	/*0008*/ ULONG VolumeSerialNumber;
	/*000c*/ ULONG VolumeLabelLength;
	/*0010*/ UCHAR SupportsObjects;
	/*0012*/ WCHAR VolumeLabel[0x1];
	/*0018*/
};

struct _FILE_FULL_DIR_INFO {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ WCHAR FileName[0x1];
	/*0048*/
};

struct _FILE_FULL_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ WCHAR FileName[0x1];
	/*0048*/
};

struct _FILE_FULL_EA_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ UCHAR Flags;
	/*0005*/ UCHAR EaNameLength;
	/*0006*/ USHORT EaValueLength;
	/*0008*/ CHAR EaName[0x1];
	/*000c*/
};

struct _FILE_GET_EA_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ UCHAR EaNameLength;
	/*0005*/ CHAR EaName[0x1];
	/*0008*/
};

struct _FILE_GET_QUOTA_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG SidLength;
	/*0008*/ _SID Sid;
	/*0014*/
};

struct _FILE_ID_128 {
	/*0000*/ UCHAR Identifier[0x10];
	/*0010*/
};

struct _FILE_ID_BOTH_DIR_INFO {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ CHAR ShortNameLength;
	/*0046*/ WCHAR ShortName[0xc];
	/*0060*/ _LARGE_INTEGER FileId;
	/*0068*/ WCHAR FileName[0x1];
	/*0070*/
};

struct _FILE_ID_BOTH_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ CHAR ShortNameLength;
	/*0046*/ WCHAR ShortName[0xc];
	/*0060*/ _LARGE_INTEGER FileId;
	/*0068*/ WCHAR FileName[0x1];
	/*0070*/
};

struct _FILE_ID_EXTD_BOTH_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ ULONG ReparsePointTag;
	/*0048*/ _FILE_ID_128 FileId;
	/*0058*/ CHAR ShortNameLength;
	/*005a*/ WCHAR ShortName[0xc];
	/*0072*/ WCHAR FileName[0x1];
	/*0078*/
};

struct _FILE_ID_EXTD_DIR_INFO {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ ULONG ReparsePointTag;
	/*0048*/ _FILE_ID_128 FileId;
	/*0058*/ WCHAR FileName[0x1];
	/*0060*/
};

struct _FILE_ID_EXTD_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ ULONG ReparsePointTag;
	/*0048*/ _FILE_ID_128 FileId;
	/*0058*/ WCHAR FileName[0x1];
	/*0060*/
};

struct _FILE_ID_FULL_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0048*/ _LARGE_INTEGER FileId;
	/*0050*/ WCHAR FileName[0x1];
	/*0058*/
};

struct _FILE_ID_GLOBAL_TX_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ _LARGE_INTEGER FileId;
	/*0048*/ _GUID LockingTransactionId;
	/*0058*/ ULONG TxInfoFlags;
	/*005c*/ WCHAR FileName[0x1];
	/*0060*/
};

struct _FILE_ID_INFO {
	/*0000*/ ULONGLONG VolumeSerialNumber;
	/*0008*/ _FILE_ID_128 FileId;
	/*0018*/
};

struct _FILE_ID_INFORMATION {
	/*0000*/ ULONGLONG VolumeSerialNumber;
	/*0008*/ _FILE_ID_128 FileId;
	/*0018*/
};

enum _FILE_ID_TYPE {
	FileIdType = 0x0,
	ObjectIdType = 0x1,
	ExtendedFileIdType = 0x2,
	MaximumFileIdType = 0x3
};

enum _FILE_INFORMATION_CLASS {
	FileDirectoryInformation = 0x1,
	FileFullDirectoryInformation = 0x2,
	FileBothDirectoryInformation = 0x3,
	FileBasicInformation = 0x4,
	FileStandardInformation = 0x5,
	FileInternalInformation = 0x6,
	FileEaInformation = 0x7,
	FileAccessInformation = 0x8,
	FileNameInformation = 0x9,
	FileRenameInformation = 0xa,
	FileLinkInformation = 0xb,
	FileNamesInformation = 0xc,
	FileDispositionInformation = 0xd,
	FilePositionInformation = 0xe,
	FileFullEaInformation = 0xf,
	FileModeInformation = 0x10,
	FileAlignmentInformation = 0x11,
	FileAllInformation = 0x12,
	FileAllocationInformation = 0x13,
	FileEndOfFileInformation = 0x14,
	FileAlternateNameInformation = 0x15,
	FileStreamInformation = 0x16,
	FilePipeInformation = 0x17,
	FilePipeLocalInformation = 0x18,
	FilePipeRemoteInformation = 0x19,
	FileMailslotQueryInformation = 0x1a,
	FileMailslotSetInformation = 0x1b,
	FileCompressionInformation = 0x1c,
	FileObjectIdInformation = 0x1d,
	FileCompletionInformation = 0x1e,
	FileMoveClusterInformation = 0x1f,
	FileQuotaInformation = 0x20,
	FileReparsePointInformation = 0x21,
	FileNetworkOpenInformation = 0x22,
	FileAttributeTagInformation = 0x23,
	FileTrackingInformation = 0x24,
	FileIdBothDirectoryInformation = 0x25,
	FileIdFullDirectoryInformation = 0x26,
	FileValidDataLengthInformation = 0x27,
	FileShortNameInformation = 0x28,
	FileIoCompletionNotificationInformation = 0x29,
	FileIoStatusBlockRangeInformation = 0x2a,
	FileIoPriorityHintInformation = 0x2b,
	FileSfioReserveInformation = 0x2c,
	FileSfioVolumeInformation = 0x2d,
	FileHardLinkInformation = 0x2e,
	FileProcessIdsUsingFileInformation = 0x2f,
	FileNormalizedNameInformation = 0x30,
	FileNetworkPhysicalNameInformation = 0x31,
	FileIdGlobalTxDirectoryInformation = 0x32,
	FileIsRemoteDeviceInformation = 0x33,
	FileUnusedInformation = 0x34,
	FileNumaNodeInformation = 0x35,
	FileStandardLinkInformation = 0x36,
	FileRemoteProtocolInformation = 0x37,
	FileRenameInformationBypassAccessCheck = 0x38,
	FileLinkInformationBypassAccessCheck = 0x39,
	FileVolumeNameInformation = 0x3a,
	FileIdInformation = 0x3b,
	FileIdExtdDirectoryInformation = 0x3c,
	FileReplaceCompletionInformation = 0x3d,
	FileHardLinkFullIdInformation = 0x3e,
	FileIdExtdBothDirectoryInformation = 0x3f,
	FileDispositionInformationEx = 0x40,
	FileRenameInformationEx = 0x41,
	FileRenameInformationExBypassAccessCheck = 0x42,
	FileDesiredStorageClassInformation = 0x43,
	FileStatInformation = 0x44,
	FileMemoryPartitionInformation = 0x45,
	FileStatLxInformation = 0x46,
	FileCaseSensitiveInformation = 0x47,
	FileLinkInformationEx = 0x48,
	FileLinkInformationExBypassAccessCheck = 0x49,
	FileStorageReserveIdInformation = 0x4a,
	FileCaseSensitiveInformationForceAccessCheck = 0x4b,
	FileKnownFolderInformation = 0x4c,
	FileMaximumInformation = 0x4d
};

struct _FILE_INFORMATION_DEFINITION {
	/*0000*/ _FILE_INFORMATION_CLASS Class;
	/*0004*/ ULONG NextEntryOffset;
	/*0008*/ ULONG FileNameLengthOffset;
	/*000c*/ ULONG FileNameOffset;
	/*0010*/
};

enum _FILE_INFO_BY_HANDLE_CLASS {
	FileBasicInfo = 0x0,
	FileStandardInfo = 0x1,
	FileNameInfo = 0x2,
	FileRenameInfo = 0x3,
	FileDispositionInfo = 0x4,
	FileAllocationInfo = 0x5,
	FileEndOfFileInfo = 0x6,
	FileStreamInfo = 0x7,
	FileCompressionInfo = 0x8,
	FileAttributeTagInfo = 0x9,
	FileIdBothDirectoryInfo = 0xa,
	FileIdBothDirectoryRestartInfo = 0xb,
	FileIoPriorityHintInfo = 0xc,
	FileRemoteProtocolInfo = 0xd,
	FileFullDirectoryInfo = 0xe,
	FileFullDirectoryRestartInfo = 0xf,
	FileStorageInfo = 0x10,
	FileAlignmentInfo = 0x11,
	FileIdInfo = 0x12,
	FileIdExtdDirectoryInfo = 0x13,
	FileIdExtdDirectoryRestartInfo = 0x14,
	FileDispositionInfoEx = 0x15,
	FileRenameInfoEx = 0x16,
	FileCaseSensitiveInfo = 0x17,
	FileNormalizedNameInfo = 0x18,
	MaximumFileInfoByHandleClass = 0x19
};

struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
	/*0000*/ ULONGLONG Hint1;
	/*0008*/ ULONGLONG Hint2;
	/*0010*/ ULONGLONG Clsn;
	/*0018*/ LONG Status;
	/*0020*/
};

struct _FILE_INTERNAL_INFORMATION {
	/*0000*/ _LARGE_INTEGER IndexNumber;
	/*0008*/
};

struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION {
	/*0000*/ UCHAR * IoStatusBlockRange;
	/*0008*/ ULONG Length;
	/*0010*/
};

struct _FILE_IO_COMPLETION_INFORMATION {
	/*0000*/ void * KeyContext;
	/*0008*/ void * ApcContext;
	/*0010*/ _IO_STATUS_BLOCK IoStatusBlock;
	/*0020*/
};

struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_IO_PRIORITY_HINT_INFO {
	/*0000*/ _PRIORITY_HINT PriorityHint;
	/*0004*/
};

struct _FILE_IO_PRIORITY_HINT_INFORMATION {
	/*0000*/ _IO_PRIORITY_HINT PriorityHint;
	/*0004*/
};

struct _FILE_IO_PRIORITY_HINT_INFORMATION_EX {
	/*0000*/ _IO_PRIORITY_HINT PriorityHint;
	/*0004*/ UCHAR BoostOutstanding;
	/*0008*/
};

struct _FILE_IS_REMOTE_DEVICE_INFORMATION {
	/*0000*/ UCHAR IsRemote;
	/*0001*/
};

struct _FILE_KNOWN_FOLDER_INFORMATION {
	/*0000*/ _FILE_KNOWN_FOLDER_TYPE Type;
	/*0004*/
};

enum _FILE_KNOWN_FOLDER_TYPE {
	KnownFolderNone = 0x0,
	KnownFolderDesktop = 0x1,
	KnownFolderDocuments = 0x2,
	KnownFolderDownloads = 0x3,
	KnownFolderMusic = 0x4,
	KnownFolderPictures = 0x5,
	KnownFolderVideos = 0x6,
	KnownFolderOther = 0x7,
	KnownFolderMax = 0x7
};

struct _FILE_LAYOUT_ENTRY {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG NextFileOffset;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG FileAttributes;
	/*0010*/ ULONGLONG FileReferenceNumber;
	/*0018*/ ULONG FirstNameOffset;
	/*001c*/ ULONG FirstStreamOffset;
	/*0020*/ ULONG ExtraInfoOffset;
	/*0024*/ ULONG ExtraInfoLength;
	/*0028*/
};

struct _FILE_LAYOUT_INFO_ENTRY {
	
	/*0000*/ <unnamed-type-BasicInformation> BasicInformation;
	/*0028*/ ULONG OwnerId;
	/*002c*/ ULONG SecurityId;
	/*0030*/ LONGLONG Usn;
	/*0038*/ _STORAGE_RESERVE_ID StorageReserveId;
	/*0040*/
};

struct _FILE_LAYOUT_NAME_ENTRY {
	/*0000*/ ULONG NextNameOffset;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG ParentFileReferenceNumber;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ ULONG Reserved;
	/*0018*/ WCHAR FileName[0x1];
	/*0020*/
};

struct _FILE_LEVEL_TRIM {
	/*0000*/ ULONG Key;
	/*0004*/ ULONG NumRanges;
	/*0008*/ _FILE_LEVEL_TRIM_RANGE Ranges[0x1];
	/*0018*/
};

struct _FILE_LEVEL_TRIM_OUTPUT {
	/*0000*/ ULONG NumRangesProcessed;
	/*0004*/
};

struct _FILE_LEVEL_TRIM_RANGE {
	/*0000*/ ULONGLONG Offset;
	/*0008*/ ULONGLONG Length;
	/*0010*/
};

struct _FILE_LINKS_FULL_ID_INFORMATION {
	/*0000*/ ULONG BytesNeeded;
	/*0004*/ ULONG EntriesReturned;
	/*0008*/ _FILE_LINK_ENTRY_FULL_ID_INFORMATION Entry;
	/*0024*/
};

struct _FILE_LINKS_INFORMATION {
	/*0000*/ ULONG BytesNeeded;
	/*0004*/ ULONG EntriesReturned;
	/*0008*/ _FILE_LINK_ENTRY_INFORMATION Entry;
	/*0020*/
};

struct _FILE_LINK_ENTRY_FULL_ID_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ _FILE_ID_128 ParentFileId;
	/*0014*/ ULONG FileNameLength;
	/*0018*/ WCHAR FileName[0x1];
	/*001c*/
};

struct _FILE_LINK_ENTRY_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0008*/ LONGLONG ParentFileId;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ WCHAR FileName[0x1];
	/*0018*/
};

struct _FILE_LINK_INFORMATION {
	/*0000*/ UCHAR ReplaceIfExists;
	/*0000*/ ULONG Flags;
	/*0008*/ void * RootDirectory;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ WCHAR FileName[0x1];
	/*0018*/
};

struct _FILE_MAILSLOT_PEEK_BUFFER {
	/*0000*/ ULONG ReadDataAvailable;
	/*0004*/ ULONG NumberOfMessages;
	/*0008*/ ULONG MessageLength;
	/*000c*/
};

struct _FILE_MAILSLOT_QUERY_INFORMATION {
	/*0000*/ ULONG MaximumMessageSize;
	/*0004*/ ULONG MailslotQuota;
	/*0008*/ ULONG NextMessageSize;
	/*000c*/ ULONG MessagesAvailable;
	/*0010*/ _LARGE_INTEGER ReadTimeout;
	/*0018*/
};

struct _FILE_MAILSLOT_SET_INFORMATION {
	/*0000*/ _LARGE_INTEGER * ReadTimeout;
	/*0008*/
};

struct _FILE_MAKE_COMPATIBLE_BUFFER {
	/*0000*/ UCHAR CloseDisc;
	/*0001*/
};

struct _FILE_MEMORY_PARTITION_INFORMATION {
	
	/*0000*/ ULONGLONG OwnerPartitionHandle;
	/*0008*/ <unnamed-type-Flags> Flags;
	/*0010*/
};

enum _FILE_METADATA_OPTIMIZATION_STATE {
	FileMetadataOptimizationNone = 0x0,
	FileMetadataOptimizationInProgress = 0x1,
	FileMetadataOptimizationPending = 0x2
};

struct _FILE_MODE_INFORMATION {
	/*0000*/ ULONG Mode;
	/*0004*/
};

struct _FILE_MOVE_CLUSTER_INFORMATION {
	/*0000*/ ULONG ClusterCount;
	/*0008*/ void * RootDirectory;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ WCHAR FileName[0x1];
	/*0018*/
};

struct _FILE_NAMES_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ ULONG FileNameLength;
	/*000c*/ WCHAR FileName[0x1];
	/*0010*/
};

struct _FILE_NAME_INFO {
	/*0000*/ ULONG FileNameLength;
	/*0004*/ WCHAR FileName[0x1];
	/*0008*/
};

struct _FILE_NAME_INFORMATION {
	/*0000*/ ULONG FileNameLength;
	/*0004*/ WCHAR FileName[0x1];
	/*0008*/
};

struct _FILE_NETWORK_OPEN_INFORMATION {
	/*0000*/ _LARGE_INTEGER CreationTime;
	/*0008*/ _LARGE_INTEGER LastAccessTime;
	/*0010*/ _LARGE_INTEGER LastWriteTime;
	/*0018*/ _LARGE_INTEGER ChangeTime;
	/*0020*/ _LARGE_INTEGER AllocationSize;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ ULONG FileAttributes;
	/*0038*/
};

struct _FILE_NETWORK_PHYSICAL_NAME_INFORMATION {
	/*0000*/ ULONG FileNameLength;
	/*0004*/ WCHAR FileName[0x1];
	/*0008*/
};

struct _FILE_NOTIFY_EXTENDED_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG Action;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastModificationTime;
	/*0018*/ _LARGE_INTEGER LastChangeTime;
	/*0020*/ _LARGE_INTEGER LastAccessTime;
	/*0028*/ _LARGE_INTEGER AllocatedLength;
	/*0030*/ _LARGE_INTEGER FileSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG ReparsePointTag;
	/*003c*/ ULONG EaSize;
	/*0040*/ _LARGE_INTEGER FileId;
	/*0048*/ _LARGE_INTEGER ParentFileId;
	/*0050*/ ULONG FileNameLength;
	/*0054*/ WCHAR FileName[0x1];
	/*0058*/
};

struct _FILE_NOTIFY_FULL_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG Action;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastModificationTime;
	/*0018*/ _LARGE_INTEGER LastChangeTime;
	/*0020*/ _LARGE_INTEGER LastAccessTime;
	/*0028*/ _LARGE_INTEGER AllocatedLength;
	/*0030*/ _LARGE_INTEGER FileSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG ReparsePointTag;
	/*003c*/ ULONG EaSize;
	/*0040*/ _LARGE_INTEGER FileId;
	/*0048*/ _LARGE_INTEGER ParentFileId;
	/*0050*/ USHORT FileNameLength;
	/*0052*/ UCHAR FileNameFlags;
	/*0053*/ UCHAR Reserved;
	/*0054*/ WCHAR FileName[0x1];
	/*0058*/
};

struct _FILE_NOTIFY_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG Action;
	/*0008*/ ULONG FileNameLength;
	/*000c*/ WCHAR FileName[0x1];
	/*0010*/
};

struct _FILE_NUMA_NODE_INFORMATION {
	/*0000*/ USHORT NodeNumber;
	/*0002*/
};

struct _FILE_OBJECTID_BUFFER {
	/*0000*/ UCHAR ObjectId[0x10];
	/*0010*/ UCHAR BirthVolumeId[0x10];
	/*0020*/ UCHAR BirthObjectId[0x10];
	/*0030*/ UCHAR DomainId[0x10];
	/*0010*/ UCHAR ExtendedInfo[0x30];
	/*0040*/
};

struct _FILE_OBJECTID_INFORMATION {
	/*0000*/ LONGLONG FileReference;
	/*0008*/ UCHAR ObjectId[0x10];
	/*0018*/ UCHAR BirthVolumeId[0x10];
	/*0028*/ UCHAR BirthObjectId[0x10];
	/*0038*/ UCHAR DomainId[0x10];
	/*0018*/ UCHAR ExtendedInfo[0x30];
	/*0048*/
};

struct _FILE_PATH {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Type;
	/*000c*/ UCHAR FilePath[0x1];
	/*0010*/
};

struct _FILE_PIPE_ASSIGN_EVENT_BUFFER {
	/*0000*/ void * EventHandle;
	/*0008*/ ULONG KeyValue;
	/*0010*/
};

struct _FILE_PIPE_CLIENT_PROCESS_BUFFER {
	/*0000*/ void * ClientSession;
	/*0008*/ void * ClientProcess;
	/*0010*/
};

struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX {
	/*0000*/ void * ClientSession;
	/*0008*/ void * ClientProcess;
	/*0010*/ USHORT ClientComputerNameLength;
	/*0012*/ WCHAR ClientComputerBuffer[0x10];
	/*0038*/
};

struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_V2 {
	/*0000*/ ULONGLONG ClientSession;
	/*0008*/ void * ClientProcess;
	/*0010*/
};

struct _FILE_PIPE_CREATE_SYMLINK_INPUT {
	/*0000*/ USHORT NameOffset;
	/*0002*/ USHORT NameLength;
	/*0004*/ USHORT SubstituteNameOffset;
	/*0006*/ USHORT SubstituteNameLength;
	/*0008*/ ULONG Flags;
	/*000c*/
};

struct _FILE_PIPE_DELETE_SYMLINK_INPUT {
	/*0000*/ USHORT NameOffset;
	/*0002*/ USHORT NameLength;
	/*0004*/
};

struct _FILE_PIPE_EVENT_BUFFER {
	/*0000*/ ULONG NamedPipeState;
	/*0004*/ ULONG EntryType;
	/*0008*/ ULONG ByteCount;
	/*000c*/ ULONG KeyValue;
	/*0010*/ ULONG NumberRequests;
	/*0014*/
};

struct _FILE_PIPE_EVENT_ENUM_INPUT_BUFFER {
	/*0000*/ ULONGLONG EventHandle;
	/*0008*/
};

struct _FILE_PIPE_EVENT_ENUM_OUTPUT_BUFFER {
	/*0000*/ ULONG EventTypes;
	/*0004*/
};

struct _FILE_PIPE_EVENT_SELECT_BUFFER {
	/*0000*/ ULONG EventTypes;
	/*0008*/ ULONGLONG EventHandle;
	/*0010*/
};

struct _FILE_PIPE_INFORMATION {
	/*0000*/ ULONG ReadMode;
	/*0004*/ ULONG CompletionMode;
	/*0008*/
};

struct _FILE_PIPE_LOCAL_INFORMATION {
	/*0000*/ ULONG NamedPipeType;
	/*0004*/ ULONG NamedPipeConfiguration;
	/*0008*/ ULONG MaximumInstances;
	/*000c*/ ULONG CurrentInstances;
	/*0010*/ ULONG InboundQuota;
	/*0014*/ ULONG ReadDataAvailable;
	/*0018*/ ULONG OutboundQuota;
	/*001c*/ ULONG WriteQuotaAvailable;
	/*0020*/ ULONG NamedPipeState;
	/*0024*/ ULONG NamedPipeEnd;
	/*0028*/
};

struct _FILE_PIPE_PEEK_BUFFER {
	/*0000*/ ULONG NamedPipeState;
	/*0004*/ ULONG ReadDataAvailable;
	/*0008*/ ULONG NumberOfMessages;
	/*000c*/ ULONG MessageLength;
	/*0010*/ CHAR Data[0x1];
	/*0014*/
};

struct _FILE_PIPE_REMOTE_INFORMATION {
	/*0000*/ _LARGE_INTEGER CollectDataTime;
	/*0008*/ ULONG MaximumCollectionCount;
	/*0010*/
};

struct _FILE_PIPE_SILO_ARRIVAL_INPUT {
	/*0000*/ void * JobHandle;
	/*0008*/
};

struct _FILE_PIPE_WAIT_FOR_BUFFER {
	/*0000*/ _LARGE_INTEGER Timeout;
	/*0008*/ ULONG NameLength;
	/*000c*/ UCHAR TimeoutSpecified;
	/*000e*/ WCHAR Name[0x1];
	/*0010*/
};

struct _FILE_POSITION_INFORMATION {
	/*0000*/ _LARGE_INTEGER CurrentByteOffset;
	/*0008*/
};

struct _FILE_PREFETCH {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG Count;
	/*0008*/ ULONGLONG Prefetch[0x1];
	/*0010*/
};

struct _FILE_PREFETCH_EX {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG Count;
	/*0008*/ void * Context;
	/*0010*/ ULONGLONG Prefetch[0x1];
	/*0018*/
};

struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION {
	/*0000*/ ULONG NumberOfProcessIdsInList;
	/*0008*/ ULONGLONG ProcessIdList[0x1];
	/*0010*/
};

struct _FILE_PROVIDER_EXTERNAL_INFO_V0 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Algorithm;
	/*0008*/
};

struct _FILE_PROVIDER_EXTERNAL_INFO_V1 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Algorithm;
	/*0008*/ ULONG Flags;
	/*000c*/
};

struct _FILE_QUERY_METADATA_OPTIMIZATION_OUTPUT {
	/*0000*/ _FILE_METADATA_OPTIMIZATION_STATE State;
	/*0004*/ ULONG AttributeListSize;
	/*0008*/ ULONG MetadataSpaceUsed;
	/*000c*/ ULONG MetadataSpaceAllocated;
	/*0010*/ ULONG NumberOfFileRecords;
	/*0014*/ ULONG NumberOfResidentAttributes;
	/*0018*/ ULONG NumberOfNonresidentAttributes;
	/*001c*/ ULONG TotalInProgress;
	/*0020*/ ULONG TotalPending;
	/*0024*/
};

struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
	/*0000*/ _LARGE_INTEGER DirectoryCount;
	/*0008*/ _LARGE_INTEGER FileCount;
	/*0010*/ USHORT FsFormatMajVersion;
	/*0012*/ USHORT FsFormatMinVersion;
	/*0014*/ WCHAR FsFormatName[0xc];
	/*0030*/ _LARGE_INTEGER FormatTime;
	/*0038*/ _LARGE_INTEGER LastUpdateTime;
	/*0040*/ WCHAR CopyrightInfo[0x22];
	/*0084*/ WCHAR AbstractInfo[0x22];
	/*00c8*/ WCHAR FormattingImplementationInfo[0x22];
	/*010c*/ WCHAR LastModifyingImplementationInfo[0x22];
	/*0150*/
};

struct _FILE_QUERY_SPARING_BUFFER {
	/*0000*/ ULONG SparingUnitBytes;
	/*0004*/ UCHAR SoftwareSparing;
	/*0008*/ ULONG TotalSpareBlocks;
	/*000c*/ ULONG FreeSpareBlocks;
	/*0010*/
};

struct _FILE_QUERY_STORAGE_RESERVE_ID_INFORMATION_EX {
	/*0000*/ _STORAGE_RESERVE_ID StorageReserveId;
	/*0008*/ LONGLONG SpaceUsed;
	/*0010*/
};

struct _FILE_QUOTA_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG SidLength;
	/*0008*/ _LARGE_INTEGER ChangeTime;
	/*0010*/ _LARGE_INTEGER QuotaUsed;
	/*0018*/ _LARGE_INTEGER QuotaThreshold;
	/*0020*/ _LARGE_INTEGER QuotaLimit;
	/*0028*/ _SID Sid;
	/*0038*/
};

struct _FILE_REFERENCE_RANGE {
	/*0000*/ ULONGLONG StartingFileReferenceNumber;
	/*0008*/ ULONGLONG EndingFileReferenceNumber;
	/*0010*/
};

struct _FILE_REGION_INFO {
	/*0000*/ LONGLONG FileOffset;
	/*0008*/ LONGLONG Length;
	/*0010*/ ULONG Usage;
	/*0014*/ ULONG Reserved;
	/*0018*/
};

struct _FILE_REGION_INPUT {
	/*0000*/ LONGLONG FileOffset;
	/*0008*/ LONGLONG Length;
	/*0010*/ ULONG DesiredUsage;
	/*0018*/
};

struct _FILE_REGION_OUTPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG TotalRegionEntryCount;
	/*0008*/ ULONG RegionEntryCount;
	/*000c*/ ULONG Reserved;
	/*0010*/ _FILE_REGION_INFO Region[0x1];
	/*0028*/
};

struct _FILE_REMOTE_PROTOCOL_INFO {
	
	
	/*0000*/ USHORT StructureVersion;
	/*0002*/ USHORT StructureSize;
	/*0004*/ ULONG Protocol;
	/*0008*/ USHORT ProtocolMajorVersion;
	/*000a*/ USHORT ProtocolMinorVersion;
	/*000c*/ USHORT ProtocolRevision;
	/*000e*/ USHORT Reserved;
	/*0010*/ ULONG Flags;
	/*0014*/ <unnamed-type-GenericReserved> GenericReserved;
	/*0034*/ <unnamed-type-ProtocolSpecific> ProtocolSpecific;
	/*0074*/
};

struct _FILE_REMOTE_PROTOCOL_INFORMATION {
	
	
	/*0000*/ USHORT StructureVersion;
	/*0002*/ USHORT StructureSize;
	/*0004*/ ULONG Protocol;
	/*0008*/ USHORT ProtocolMajorVersion;
	/*000a*/ USHORT ProtocolMinorVersion;
	/*000c*/ USHORT ProtocolRevision;
	/*000e*/ USHORT Reserved;
	/*0010*/ ULONG Flags;
	/*0014*/ <unnamed-type-GenericReserved> GenericReserved;
	/*0034*/ <unnamed-type-ProtocolSpecific> ProtocolSpecific;
	/*0074*/
};

struct _FILE_RENAME_INFO {
	/*0000*/ UCHAR ReplaceIfExists;
	/*0000*/ ULONG Flags;
	/*0008*/ void * RootDirectory;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ WCHAR FileName[0x1];
	/*0018*/
};

struct _FILE_RENAME_INFORMATION {
	/*0000*/ UCHAR ReplaceIfExists;
	/*0000*/ ULONG Flags;
	/*0008*/ void * RootDirectory;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ WCHAR FileName[0x1];
	/*0018*/
};

struct _FILE_REPARSE_POINT_INFORMATION {
	/*0000*/ LONGLONG FileReference;
	/*0008*/ ULONG Tag;
	/*0010*/
};

union _FILE_SEGMENT_ELEMENT {
	/*0000*/ void * Buffer;
	/*0000*/ ULONGLONG Alignment;
	/*0008*/
};

struct _FILE_SET_DEFECT_MGMT_BUFFER {
	/*0000*/ UCHAR Disable;
	/*0001*/
};

struct _FILE_SET_SPARSE_BUFFER {
	/*0000*/ UCHAR SetSparse;
	/*0001*/
};

struct _FILE_SET_STORAGE_RESERVE_ID_INFORMATION_EX {
	/*0000*/ _STORAGE_RESERVE_ID StorageReserveId;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _FILE_SFIO_RESERVE_INFORMATION {
	/*0000*/ ULONG RequestsPerPeriod;
	/*0004*/ ULONG Period;
	/*0008*/ UCHAR RetryFailures;
	/*0009*/ UCHAR Discardable;
	/*000c*/ ULONG RequestSize;
	/*0010*/ ULONG NumOutstandingRequests;
	/*0014*/
};

struct _FILE_SFIO_VOLUME_INFORMATION {
	/*0000*/ ULONG MaximumRequestsPerPeriod;
	/*0004*/ ULONG MinimumPeriod;
	/*0008*/ ULONG MinimumTransferSize;
	/*000c*/
};

struct _FILE_STANDARD_INFO {
	/*0000*/ _LARGE_INTEGER AllocationSize;
	/*0008*/ _LARGE_INTEGER EndOfFile;
	/*0010*/ ULONG NumberOfLinks;
	/*0014*/ UCHAR DeletePending;
	/*0015*/ UCHAR Directory;
	/*0018*/
};

struct _FILE_STANDARD_INFORMATION {
	/*0000*/ _LARGE_INTEGER AllocationSize;
	/*0008*/ _LARGE_INTEGER EndOfFile;
	/*0010*/ ULONG NumberOfLinks;
	/*0014*/ UCHAR DeletePending;
	/*0015*/ UCHAR Directory;
	/*0018*/
};

struct _FILE_STANDARD_INFORMATION_EX {
	/*0000*/ _LARGE_INTEGER AllocationSize;
	/*0008*/ _LARGE_INTEGER EndOfFile;
	/*0010*/ ULONG NumberOfLinks;
	/*0014*/ UCHAR DeletePending;
	/*0015*/ UCHAR Directory;
	/*0016*/ UCHAR AlternateStream;
	/*0017*/ UCHAR MetadataAttribute;
	/*0018*/
};

struct _FILE_STANDARD_LINK_INFORMATION {
	/*0000*/ ULONG NumberOfAccessibleLinks;
	/*0004*/ ULONG TotalNumberOfLinks;
	/*0008*/ UCHAR DeletePending;
	/*0009*/ UCHAR Directory;
	/*000c*/
};

struct _FILE_STAT_INFORMATION {
	/*0000*/ _LARGE_INTEGER FileId;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER AllocationSize;
	/*0030*/ _LARGE_INTEGER EndOfFile;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG ReparseTag;
	/*0040*/ ULONG NumberOfLinks;
	/*0044*/ ULONG EffectiveAccess;
	/*0048*/
};

struct _FILE_STAT_LX_INFORMATION {
	/*0000*/ _LARGE_INTEGER FileId;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER AllocationSize;
	/*0030*/ _LARGE_INTEGER EndOfFile;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG ReparseTag;
	/*0040*/ ULONG NumberOfLinks;
	/*0044*/ ULONG EffectiveAccess;
	/*0048*/ ULONG LxFlags;
	/*004c*/ ULONG LxUid;
	/*0050*/ ULONG LxGid;
	/*0054*/ ULONG LxMode;
	/*0058*/ ULONG LxDeviceIdMajor;
	/*005c*/ ULONG LxDeviceIdMinor;
	/*0060*/
};

struct _FILE_STORAGE_INFO {
	/*0000*/ ULONG LogicalBytesPerSector;
	/*0004*/ ULONG PhysicalBytesPerSectorForAtomicity;
	/*0008*/ ULONG PhysicalBytesPerSectorForPerformance;
	/*000c*/ ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
	/*0010*/ ULONG Flags;
	/*0014*/ ULONG ByteOffsetForSectorAlignment;
	/*0018*/ ULONG ByteOffsetForPartitionAlignment;
	/*001c*/
};

struct _FILE_STORAGE_RESERVE_ID_INFORMATION {
	/*0000*/ _STORAGE_RESERVE_ID StorageReserveId;
	/*0004*/
};

struct _FILE_STORAGE_TIER {
	/*0000*/ _GUID Id;
	/*0010*/ WCHAR Name[0x100];
	/*0210*/ WCHAR Description[0x100];
	/*0410*/ ULONGLONG Flags;
	/*0418*/ ULONGLONG ProvisionedCapacity;
	/*0420*/ _FILE_STORAGE_TIER_MEDIA_TYPE MediaType;
	/*0424*/ _FILE_STORAGE_TIER_CLASS Class;
	/*0428*/
};

enum _FILE_STORAGE_TIER_CLASS {
	FileStorageTierClassUnspecified = 0x0,
	FileStorageTierClassCapacity = 0x1,
	FileStorageTierClassPerformance = 0x2,
	FileStorageTierClassMax = 0x3
};

enum _FILE_STORAGE_TIER_MEDIA_TYPE {
	FileStorageTierMediaTypeUnspecified = 0x0,
	FileStorageTierMediaTypeDisk = 0x1,
	FileStorageTierMediaTypeSsd = 0x2,
	FileStorageTierMediaTypeScm = 0x4,
	FileStorageTierMediaTypeMax = 0x5
};

struct _FILE_STORAGE_TIER_REGION {
	/*0000*/ _GUID TierId;
	/*0010*/ ULONGLONG Offset;
	/*0018*/ ULONGLONG Length;
	/*0020*/
};

struct _FILE_STREAM_INFO {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG StreamNameLength;
	/*0008*/ _LARGE_INTEGER StreamSize;
	/*0010*/ _LARGE_INTEGER StreamAllocationSize;
	/*0018*/ WCHAR StreamName[0x1];
	/*0020*/
};

struct _FILE_STREAM_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG StreamNameLength;
	/*0008*/ _LARGE_INTEGER StreamSize;
	/*0010*/ _LARGE_INTEGER StreamAllocationSize;
	/*0018*/ WCHAR StreamName[0x1];
	/*0020*/
};

struct _FILE_SYSTEM_RECOGNITION_INFORMATION {
	/*0000*/ CHAR FileSystem[0x9];
	/*0009*/
};

struct _FILE_TRACKING_INFORMATION {
	/*0000*/ void * DestinationFile;
	/*0008*/ ULONG ObjectInformationLength;
	/*000c*/ CHAR ObjectInformation[0x1];
	/*0010*/
};

struct _FILE_TYPE_NOTIFICATION_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumFileTypeIDs;
	/*0008*/ _GUID FileTypeID[0x1];
	/*0018*/
};

struct _FILE_VALID_DATA_LENGTH_INFORMATION {
	/*0000*/ _LARGE_INTEGER ValidDataLength;
	/*0008*/
};

struct _FILE_VOLUME_NAME_INFORMATION {
	/*0000*/ ULONG DeviceNameLength;
	/*0004*/ WCHAR DeviceName[0x1];
	/*0008*/
};

struct _FILE_ZERO_DATA_INFORMATION {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER BeyondFinalZero;
	/*0010*/
};

struct _FILE_ZERO_DATA_INFORMATION_EX {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER BeyondFinalZero;
	/*0010*/ ULONG Flags;
	/*0018*/
};

enum _FILTER_BOOT_OPTION_OPERATION {
	FilterBootOptionOperationOpenSystemStore = 0x0,
	FilterBootOptionOperationSetElement = 0x1,
	FilterBootOptionOperationDeleteElement = 0x2,
	FilterBootOptionOperationMax = 0x3
};

enum _FINDEX_INFO_LEVELS {
	FindExInfoStandard = 0x0,
	FindExInfoBasic = 0x1,
	FindExInfoMaxInfoLevel = 0x2
};

enum _FINDEX_SEARCH_OPS {
	FindExSearchNameMatch = 0x0,
	FindExSearchLimitToDirectories = 0x1,
	FindExSearchLimitToDevices = 0x2,
	FindExSearchMaxSearchOp = 0x3
};

struct _FINDFIRSTACTIVATIONCONTEXTSECTION {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ _GUID const * ExtensionGuid;
	/*0010*/ ULONG Id;
	/*0014*/ ULONG Depth;
	/*0018*/ ULONG OutFlags;
	/*0020*/
};

enum _FIRMWARE_TYPE {
	FirmwareTypeUnknown = 0x0,
	FirmwareTypeBios = 0x1,
	FirmwareTypeUefi = 0x2,
	FirmwareTypeMax = 0x3
};

struct _FIXED {
	/*0000*/ USHORT fract;
	/*0002*/ SHORT value;
	/*0004*/
};

struct _FLAGGED_BYTE_BLOB {
	/*0000*/ ULONG fFlags;
	/*0004*/ ULONG clSize;
	/*0008*/ UCHAR abData[0x1];
	/*000c*/
};

struct _FLAGGED_WORD_BLOB {
	/*0000*/ ULONG fFlags;
	/*0004*/ ULONG clSize;
	/*0008*/ USHORT asData[0x1];
	/*000c*/
};

struct _FLAG_STGMEDIUM {
	/*0000*/ LONG ContextFlags;
	/*0004*/ LONG fPassOwnership;
	/*0008*/ tagSTGMEDIUM Stgmed;
	/*0020*/
};

struct _FLOAT128 {
	/*0000*/ LONGLONG LowPart;
	/*0008*/ LONGLONG HighPart;
	/*0010*/
};

struct _FLS_DATA {
	/*0000*/ _LIST_ENTRY Entry;
	/*0010*/ void * Slots[0x80];
	/*0410*/
};

struct _FNSAVE_FORMAT {
	/*0000*/ ULONG ControlWord;
	/*0004*/ ULONG StatusWord;
	/*0008*/ ULONG TagWord;
	/*000c*/ ULONG ErrorOffset;
	/*0010*/ ULONG ErrorSelector;
	/*0014*/ ULONG DataOffset;
	/*0018*/ ULONG DataSelector;
	/*001c*/ UCHAR RegisterArea[0x50];
	/*006c*/
};

struct _FOCUS_EVENT_RECORD {
	/*0000*/ INT bSetFocus;
	/*0004*/
};

union _FOUR_PART_VERSION {
	
	
	/*0000*/ ULONGLONG Version64;
	/*0000*/ <unnamed-type-Version32> Version32;
	/*0000*/ <unnamed-type-Version16> Version16;
	/*0008*/
};

struct _FPO_DATA {
	/*0000*/ ULONG ulOffStart;
	/*0004*/ ULONG cbProcSize;
	/*0008*/ ULONG cdwLocals;
	/*000c*/ USHORT cdwParams;
	/*000e*/ USHORT cbProlog : 08; // 0x00ff;
	/*000e*/ USHORT cbRegs : 03; // 0x0700;
	/*000e*/ USHORT fHasSEH : 01; // 0x0800;
	/*000e*/ USHORT fUseBP : 01; // 0x1000;
	/*000e*/ USHORT reserved : 01; // 0x2000;
	/*000e*/ USHORT cbFrame : 02; // 0xc000;
	/*0010*/
};

struct _FP_128 {
	/*0000*/ ULONG W[0x4];
	/*0010*/
};

struct _FP_32 {
	/*0000*/ ULONG W[0x1];
	/*0004*/
};

struct _FP_64 {
	/*0000*/ ULONG W[0x2];
	/*0008*/
};

struct _FP_80 {
	/*0000*/ ULONG W[0x3];
	/*000c*/
};

enum _FP_IEEE_COMPARE_RESULT {
	FpCompareEqual = 0x0,
	FpCompareGreater = 0x1,
	FpCompareLess = 0x2,
	FpCompareUnordered = 0x3
};

enum _FP_IEEE_OPERATION_CODE {
	FpCodeUnspecified = 0x0,
	FpCodeAdd = 0x1,
	FpCodeSubtract = 0x2,
	FpCodeMultiply = 0x3,
	FpCodeDivide = 0x4,
	FpCodeSquareRoot = 0x5,
	FpCodeRemainder = 0x6,
	FpCodeCompare = 0x7,
	FpCodeConvert = 0x8,
	FpCodeRound = 0x9,
	FpCodeTruncate = 0xa,
	FpCodeFloor = 0xb,
	FpCodeCeil = 0xc,
	FpCodeAcos = 0xd,
	FpCodeAsin = 0xe,
	FpCodeAtan = 0xf,
	FpCodeAtan2 = 0x10,
	FpCodeCabs = 0x11,
	FpCodeCos = 0x12,
	FpCodeCosh = 0x13,
	FpCodeExp = 0x14,
	FpCodeFabs = 0x15,
	FpCodeFmod = 0x16,
	FpCodeFrexp = 0x17,
	FpCodeHypot = 0x18,
	FpCodeLdexp = 0x19,
	FpCodeLog = 0x1a,
	FpCodeLog10 = 0x1b,
	FpCodeModf = 0x1c,
	FpCodePow = 0x1d,
	FpCodeSin = 0x1e,
	FpCodeSinh = 0x1f,
	FpCodeTan = 0x20,
	FpCodeTanh = 0x21,
	FpCodeY0 = 0x22,
	FpCodeY1 = 0x23,
	FpCodeYn = 0x24
};

struct _FP_IEEE_RECORD {
	/*0000*/ _FP_IEEE_VALUE Operand1;
	/*0018*/ _FP_IEEE_VALUE Operand2;
	/*0030*/ _FP_IEEE_VALUE Result;
	/*0048*/
};

struct _FP_IEEE_VALUE {
	
	
	/*0000*/ <unnamed-type-Value> Value;
	/*0010*/ <unnamed-type-Control> Control;
	/*0018*/
};

enum _FP__IEEE_FORMAT {
	FpFormatFp32 = 0x0,
	FpFormatFp64 = 0x1,
	FpFormatFp80 = 0x2,
	FpFormatFp128 = 0x3,
	FpFormatI16 = 0x4,
	FpFormatI32 = 0x5,
	FpFormatI64 = 0x6,
	FpFormatU16 = 0x7,
	FpFormatU32 = 0x8,
	FpFormatU64 = 0x9,
	FpFormatCompare = 0xa,
	FpFormatString = 0xb
};

enum _FP__IEEE_ROUNDING_MODE {
	FpRoundNearest = 0x0,
	FpRoundMinusInfinity = 0x1,
	FpRoundPlusInfinity = 0x2,
	FpRoundChopped = 0x3
};

struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
	/*0000*/ USHORT ChecksumAlgorithm;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ChecksumChunkSizeInBytes;
	/*000c*/ ULONG ClusterSizeInBytes;
	/*0010*/
};

struct _FSCTL_GHOST_FILE_EXTENTS_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER ByteCount;
	/*0010*/ _GUID RecallOwnerGuid;
	/*0020*/ ULONG RecallMetadataBufferSize;
	/*0024*/ UCHAR RecallMetadataBuffer[0x1];
	/*0028*/
};

struct _FSCTL_OFFLOAD_READ_INPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG TokenTimeToLive;
	/*000c*/ ULONG Reserved;
	/*0010*/ ULONGLONG FileOffset;
	/*0018*/ ULONGLONG CopyLength;
	/*0020*/
};

struct _FSCTL_OFFLOAD_READ_OUTPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG TransferLength;
	/*0010*/ UCHAR Token[0x200];
	/*0210*/
};

struct _FSCTL_OFFLOAD_WRITE_INPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG FileOffset;
	/*0010*/ ULONGLONG CopyLength;
	/*0018*/ ULONGLONG TransferOffset;
	/*0020*/ UCHAR Token[0x200];
	/*0220*/
};

struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG LengthWritten;
	/*0010*/
};

struct _FSCTL_QUERY_FAT_BPB_BUFFER {
	/*0000*/ UCHAR First0x24BytesOfBootSector[0x24];
	/*0024*/
};

struct _FSCTL_QUERY_GHOSTED_FILE_EXTENTS_INPUT_RANGE {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER ByteCount;
	/*0010*/
};

struct _FSCTL_QUERY_GHOSTED_FILE_EXTENTS_OUTPUT {
	/*0000*/ ULONG ExtentCount;
	/*0004*/ ULONG TotalExtentCount;
	/*0008*/ UCHAR Extents[0x1];
	/*000c*/
};

struct _FSCTL_QUERY_REGION_INFO_INPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG NumberOfTierIds;
	/*0010*/ _GUID TierIds[0x1];
	/*0020*/
};

struct _FSCTL_QUERY_REGION_INFO_OUTPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG Reserved;
	/*0010*/ ULONGLONG Alignment;
	/*0018*/ ULONG TotalNumberOfRegions;
	/*001c*/ ULONG NumberOfRegionsReturned;
	/*0020*/ _FILE_STORAGE_TIER_REGION Regions[0x1];
	/*0040*/
};

struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG TotalNumberOfTiers;
	/*0010*/ ULONG NumberOfTiersReturned;
	/*0018*/ _FILE_STORAGE_TIER Tiers[0x1];
	/*0440*/
};

struct _FSCTL_QUERY_VOLUME_NUMA_INFO_OUTPUT {
	/*0000*/ ULONG NumaNode;
	/*0004*/
};

struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
	/*0000*/ USHORT ChecksumAlgorithm;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
	/*0000*/ UCHAR EnableIntegrity;
	/*0001*/ UCHAR KeepIntegrityStateUnchanged;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG Flags;
	/*0008*/ UCHAR Version;
	/*0009*/ UCHAR Reserved2[0x7];
	/*0010*/
};

struct _FSCTL_UNMAP_SPACE_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER BytesToUnmap;
	/*0008*/
};

struct _FSCTL_UNMAP_SPACE_OUTPUT {
	/*0000*/ _LARGE_INTEGER BytesUnmapped;
	/*0008*/
};

enum _FSINFOCLASS {
	FileFsVolumeInformation = 0x1,
	FileFsLabelInformation = 0x2,
	FileFsSizeInformation = 0x3,
	FileFsDeviceInformation = 0x4,
	FileFsAttributeInformation = 0x5,
	FileFsControlInformation = 0x6,
	FileFsFullSizeInformation = 0x7,
	FileFsObjectIdInformation = 0x8,
	FileFsDriverPathInformation = 0x9,
	FileFsVolumeFlagsInformation = 0xa,
	FileFsSectorSizeInformation = 0xb,
	FileFsDataCopyInformation = 0xc,
	FileFsMetadataSizeInformation = 0xd,
	FileFsFullSizeInformationEx = 0xe,
	FileFsMaximumInformation = 0xf
};

enum _FS_BPIO_INFLAGS {
	FSBPIO_INFL_None = 0x0,
	FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY = 0x1
};

struct _FS_BPIO_INFO {
	/*0000*/ ULONG ActiveBypassIoCount;
	/*0004*/ USHORT StorageDriverNameLen;
	/*0006*/ WCHAR StorageDriverName[0x20];
	/*0048*/
};

struct _FS_BPIO_INPUT {
	/*0000*/ _FS_BPIO_OPERATIONS Operation;
	/*0004*/ _FS_BPIO_INFLAGS InFlags;
	/*0008*/ ULONGLONG Reserved1;
	/*0010*/ ULONGLONG Reserved2;
	/*0018*/
};

enum _FS_BPIO_OPERATIONS {
	FS_BPIO_OP_ENABLE = 0x1,
	FS_BPIO_OP_DISABLE = 0x2,
	FS_BPIO_OP_QUERY = 0x3,
	FS_BPIO_OP_VOLUME_STACK_PAUSE = 0x4,
	FS_BPIO_OP_VOLUME_STACK_RESUME = 0x5,
	FS_BPIO_OP_STREAM_PAUSE = 0x6,
	FS_BPIO_OP_STREAM_RESUME = 0x7,
	FS_BPIO_OP_GET_INFO = 0x8,
	FS_BPIO_OP_MAX_OPERATION = 0x9
};

enum _FS_BPIO_OUTFLAGS {
	FSBPIO_OUTFL_None = 0x0,
	FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED = 0x1,
	FSBPIO_OUTFL_STREAM_BYPASS_PAUSED = 0x2,
	FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED = 0x4,
	FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER = 0x8
};

struct _FS_BPIO_OUTPUT {
	/*0000*/ _FS_BPIO_OPERATIONS Operation;
	/*0004*/ _FS_BPIO_OUTFLAGS OutFlags;
	/*0008*/ ULONGLONG Reserved1;
	/*0010*/ ULONGLONG Reserved2;
	/*0018*/ _FS_BPIO_RESULTS Enable;
	/*0018*/ _FS_BPIO_RESULTS Query;
	/*0018*/ _FS_BPIO_RESULTS VolumeStackResume;
	/*0018*/ _FS_BPIO_RESULTS StreamResume;
	/*0018*/ _FS_BPIO_INFO GetInfo;
	/*0160*/
};

struct _FS_BPIO_RESULTS {
	/*0000*/ LONG OpStatus;
	/*0004*/ USHORT FailingDriverNameLen;
	/*0006*/ WCHAR FailingDriverName[0x20];
	/*0046*/ USHORT FailureReasonLen;
	/*0048*/ WCHAR FailureReason[0x80];
	/*0148*/
};

struct _FULL_PTR_XLAT_TABLES {
	/*0000*/ void * RefIdToPointer;
	/*0008*/ void * PointerToRefId;
	/*0010*/ ULONG NextRefId;
	/*0014*/ XLAT_SIDE XlatSide;
	/*0018*/
};

enum _FUNCTION_TABLE_TYPE {
	RF_SORTED = 0x0,
	RF_UNSORTED = 0x1,
	RF_CALLBACK = 0x2,
	RF_KERNEL_DYNAMIC = 0x3
};

struct _FXSAVE_FORMAT_WX86 {
	/*0000*/ USHORT ControlWord;
	/*0002*/ USHORT StatusWord;
	/*0004*/ USHORT TagWord;
	/*0006*/ USHORT ErrorOpcode;
	/*0008*/ ULONG ErrorOffset;
	/*000c*/ ULONG ErrorSelector;
	/*0010*/ ULONG DataOffset;
	/*0014*/ ULONG DataSelector;
	/*0018*/ ULONG MXCsr;
	/*001c*/ ULONG MXCsr_Mask;
	/*0020*/ UCHAR RegisterArea[0x80];
	/*00a0*/ UCHAR Reserved3[0x80];
	/*0120*/ UCHAR Reserved4[0xe0];
	/*0200*/
};

struct _GDI_NONREMOTE {

	union __MIDL_IWinTypes_0002 {
		/*0000*/ LONG hInproc;
		/*0000*/ _DWORD_BLOB * hRemote;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0002 u;
	/*0010*/
};

struct _GDI_OBJECT {

	union __MIDL_IAdviseSink_0002 {
		/*0000*/ _userHBITMAP * hBitmap;
		/*0000*/ _userHPALETTE * hPalette;
		/*0000*/ _userHGLOBAL * hGeneric;
		/*0008*/
	};

	/*0000*/ ULONG ObjectType;
	/*0008*/ __MIDL_IAdviseSink_0002 u;
	/*0010*/
};

struct _GDI_TEB_BATCH {
	/*0000*/ ULONG Offset : 31; // 0x7fffffff;
	/*0000*/ ULONG HasRenderingCommand : 01; // 0x80000000;
	/*0008*/ ULONGLONG HDC;
	/*0010*/ ULONG Buffer[0x136];
	/*04e8*/
};

struct _GENERATE_NAME_CONTEXT {
	/*0000*/ USHORT Checksum;
	/*0002*/ UCHAR ChecksumInserted;
	/*0003*/ UCHAR NameLength;
	/*0004*/ WCHAR NameBuffer[0x8];
	/*0014*/ ULONG ExtensionLength;
	/*0018*/ WCHAR ExtensionBuffer[0x4];
	/*0020*/ ULONG LastIndexValue;
	/*0024*/
};

struct _GENERIC_BINDING_ROUTINE_PAIR {
	/*0000*/ void * (* pfnBind)( void * );
	/*0008*/ void (* pfnUnbind)( void * , UCHAR * );
	/*0010*/
};

struct _GENERIC_MAPPING {
	/*0000*/ ULONG GenericRead;
	/*0004*/ ULONG GenericWrite;
	/*0008*/ ULONG GenericExecute;
	/*000c*/ ULONG GenericAll;
	/*0010*/
};

enum _GET_FILEEX_INFO_LEVELS {
	GetFileExInfoStandard = 0x0,
	GetFileExMaxInfoLevel = 0x1
};

struct _GET_FILTER_FILE_IDENTIFIER_INPUT {
	/*0000*/ USHORT AltitudeLength;
	/*0002*/ WCHAR Altitude[0x1];
	/*0004*/
};

struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT {
	/*0000*/ USHORT FilterFileIdentifierLength;
	/*0002*/ UCHAR FilterFileIdentifier[0x1];
	/*0004*/
};

struct _GHOSTED_FILE_EXTENT {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER ByteCount;
	/*0010*/ _GUID RecallOwnerGuid;
	/*0020*/ ULONG NextEntryOffset;
	/*0024*/ ULONG RecallMetadataBufferSize;
	/*0028*/ UCHAR RecallMetadataBuffer[0x1];
	/*0030*/
};

struct _GLYPHMETRICS {
	/*0000*/ UINT gmBlackBoxX;
	/*0004*/ UINT gmBlackBoxY;
	/*0008*/ tagPOINT gmptGlyphOrigin;
	/*0010*/ SHORT gmCellIncX;
	/*0012*/ SHORT gmCellIncY;
	/*0014*/
};

struct _GLYPHMETRICSFLOAT {
	/*0000*/ float gmfBlackBoxX;
	/*0004*/ float gmfBlackBoxY;
	/*0008*/ _POINTFLOAT gmfptGlyphOrigin;
	/*0010*/ float gmfCellIncX;
	/*0014*/ float gmfCellIncY;
	/*0018*/
};

struct _GRADIENT_RECT {
	/*0000*/ ULONG UpperLeft;
	/*0004*/ ULONG LowerRight;
	/*0008*/
};

struct _GRADIENT_TRIANGLE {
	/*0000*/ ULONG Vertex1;
	/*0004*/ ULONG Vertex2;
	/*0008*/ ULONG Vertex3;
	/*000c*/
};

struct _GROUP_AFFINITY {
	/*0000*/ ULONGLONG Mask;
	/*0008*/ USHORT Group;
	/*000a*/ USHORT Reserved[0x3];
	/*0010*/
};

struct _GROUP_RELATIONSHIP {
	/*0000*/ USHORT MaximumGroupCount;
	/*0002*/ USHORT ActiveGroupCount;
	/*0004*/ UCHAR Reserved[0x14];
	/*0018*/ _PROCESSOR_GROUP_INFO GroupInfo[0x1];
	/*0048*/
};

struct _GS_HANDLER_DATA {
	
	/*0000*/ <unnamed-type-u> u;
	/*0004*/ LONG AlignedBaseOffset;
	/*0008*/ LONG Alignment;
	/*000c*/
};

struct _GUID {
	/*0000*/ ULONG Data1;
	/*0004*/ USHORT Data2;
	/*0006*/ USHORT Data3;
	/*0008*/ UCHAR Data4[0x8];
	/*0010*/
};

struct _HARDERROR_MSG {
	/*0000*/ _PORT_MESSAGE h;
	/*0028*/ LONG Status;
	/*0030*/ _LARGE_INTEGER ErrorTime;
	/*0038*/ ULONG ValidResponseOptions;
	/*003c*/ ULONG Response;
	/*0040*/ ULONG NumberOfParameters;
	/*0044*/ ULONG UnicodeStringParameterMask;
	/*0048*/ ULONGLONG Parameters[0x5];
	/*0070*/
};

enum _HARDERROR_RESPONSE {
	ResponseReturnToCaller = 0x0,
	ResponseNotHandled = 0x1,
	ResponseAbort = 0x2,
	ResponseCancel = 0x3,
	ResponseIgnore = 0x4,
	ResponseNo = 0x5,
	ResponseOk = 0x6,
	ResponseRetry = 0x7,
	ResponseYes = 0x8,
	ResponseTryAgain = 0x9,
	ResponseContinue = 0xa
};

enum _HARDERROR_RESPONSE_OPTION {
	OptionAbortRetryIgnore = 0x0,
	OptionOk = 0x1,
	OptionOkCancel = 0x2,
	OptionRetryCancel = 0x3,
	OptionYesNo = 0x4,
	OptionYesNoCancel = 0x5,
	OptionShutdownSystem = 0x6,
	OptionOkNoWait = 0x7,
	OptionCancelTryContinue = 0x8
};

struct _HARDWARE_COUNTER {
	/*0000*/ _HARDWARE_COUNTER_TYPE Type;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG Index;
	/*0010*/
};

struct _HARDWARE_COUNTER_DATA {
	/*0000*/ _HARDWARE_COUNTER_TYPE Type;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG Value;
	/*0010*/
};

enum _HARDWARE_COUNTER_TYPE {
	PMCCounter = 0x0,
	MaxHardwareCounterType = 0x1
};

struct _HEAP_BLOCK_EXTRA_INFORMATION {
	/*0000*/ UCHAR Next;
	/*0004*/ ULONG Type;
	/*0008*/ ULONGLONG Size;
	/*0010*/
};

struct _HEAP_BLOCK_INFORMATION {
	/*0000*/ ULONGLONG Address;
	/*0008*/ ULONG Flags;
	/*0010*/ ULONGLONG DataSize;
	/*0018*/ ULONGLONG OverheadSize;
	/*0020*/ ULONGLONG NextBlockInformationOffset;
	/*0028*/
};

struct _HEAP_BLOCK_SETTABLE_INFORMATION {
	/*0000*/ ULONGLONG Settable;
	/*0008*/ USHORT TagIndex;
	/*000a*/ USHORT AllocatorBackTraceIndex;
	/*0010*/
};

struct _HEAP_EXTENDED_INFORMATION {
	/*0000*/ void * Process;
	/*0008*/ ULONGLONG Heap;
	/*0010*/ ULONG Level;
	/*0018*/ LONG (* CallbackRoutine)( _HEAP_INFORMATION_ITEM * , void * );
	/*0020*/ void * CallbackContext;
	/*0028*/ _PROCESS_HEAP_INFORMATION ProcessHeapInformation;
	/*0028*/ _HEAP_INFORMATION HeapInformation;
	/*0058*/
};

struct _HEAP_INFORMATION {
	/*0000*/ ULONGLONG Address;
	/*0008*/ ULONG Mode;
	/*0010*/ ULONGLONG ReserveSize;
	/*0018*/ ULONGLONG CommitSize;
	/*0020*/ ULONGLONG FirstRegionInformationOffset;
	/*0028*/ ULONGLONG NextHeapInformationOffset;
	/*0030*/
};

enum _HEAP_INFORMATION_CLASS {
	HeapCompatibilityInformation = 0x0,
	HeapEnableTerminationOnCorruption = 0x1,
	HeapExtendedInformation = 0x2,
	HeapOptimizeResources = 0x3,
	HeapTaggingInformation = 0x4,
	HeapStackDatabase = 0x5,
	HeapMemoryLimit = 0x6,
	HeapTag = 0x7,
	HeapDetailedFailureInformation = 0x80000001,
	HeapSetDebuggingInformation = 0x80000002
};

struct _HEAP_INFORMATION_ITEM {
	/*0000*/ ULONG Level;
	/*0008*/ ULONGLONG Size;
	/*0010*/ _PROCESS_HEAP_INFORMATION ProcessHeapInformation;
	/*0010*/ _HEAP_INFORMATION HeapInformation;
	/*0010*/ _HEAP_REGION_INFORMATION HeapRegionInformation;
	/*0010*/ _HEAP_RANGE_INFORMATION HeapRangeInformation;
	/*0010*/ _HEAP_BLOCK_INFORMATION HeapBlockInformation;
	/*0010*/ _HEAP_PERFORMANCE_COUNTERS_INFORMATION HeapPerfInformation;
	/*0010*/ ULONGLONG DynamicStart;
	/*00b0*/
};

enum _HEAP_MEMORY_INFO_CLASS {
	HeapMemoryBasicInformation = 0x0
};

struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _HEAP_PERFORMANCE_COUNTERS_INFORMATION {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Version;
	/*0008*/ ULONG HeapIndex;
	/*000c*/ ULONG LastHeapIndex;
	/*0010*/ ULONGLONG BaseAddress;
	/*0018*/ ULONGLONG ReserveSize;
	/*0020*/ ULONGLONG CommitSize;
	/*0028*/ ULONG SegmentCount;
	/*0030*/ ULONGLONG LargeUCRMemory;
	/*0038*/ ULONG UCRLength;
	/*0040*/ ULONGLONG AllocatedSpace;
	/*0048*/ ULONGLONG FreeSpace;
	/*0050*/ ULONG FreeListLength;
	/*0054*/ ULONG Contention;
	/*0058*/ ULONG VirtualBlocks;
	/*005c*/ ULONG CommitRate;
	/*0060*/ ULONG DecommitRate;
	/*0068*/ ULONGLONG HeapTag;
	/*0070*/ _SEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION SegmentHeapPerfInformation;
	/*00a0*/
};

struct _HEAP_RANGE_INFORMATION {
	/*0000*/ ULONGLONG Address;
	/*0008*/ ULONGLONG Size;
	/*0010*/ ULONG Type;
	/*0014*/ ULONG Protection;
	/*0018*/ ULONGLONG FirstBlockInformationOffset;
	/*0020*/ ULONGLONG NextRangeInformationOffset;
	/*0028*/
};

struct _HEAP_REGION_INFORMATION {
	/*0000*/ ULONGLONG Address;
	/*0008*/ ULONGLONG ReserveSize;
	/*0010*/ ULONGLONG CommitSize;
	/*0018*/ ULONGLONG FirstRangeInformationOffset;
	/*0020*/ ULONGLONG NextRegionInformationOffset;
	/*0028*/
};

struct _HEAP_SUMMARY {
	/*0000*/ ULONG cb;
	/*0008*/ ULONGLONG cbAllocated;
	/*0010*/ ULONGLONG cbCommitted;
	/*0018*/ ULONGLONG cbReserved;
	/*0020*/ ULONGLONG cbMaxReserve;
	/*0028*/
};

struct _HIBERFILE_BUCKET {
	/*0000*/ ULONGLONG MaxPhysicalMemory;
	/*0008*/ ULONG PhysicalMemoryPercent[0x3];
	/*0018*/
};

enum _HIBERFILE_BUCKET_SIZE {
	HiberFileBucket1GB = 0x0,
	HiberFileBucket2GB = 0x1,
	HiberFileBucket4GB = 0x2,
	HiberFileBucket8GB = 0x3,
	HiberFileBucket16GB = 0x4,
	HiberFileBucket32GB = 0x5,
	HiberFileBucketUnlimited = 0x6,
	HiberFileBucketMax = 0x7
};

struct _HOT_PATCH_IMAGE_INFO {
	/*0000*/ ULONG CheckSum;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/
};

enum _HOT_PATCH_INFORMATION_CLASS {
	ManageHotPatchLoadPatch = 0x0,
	ManageHotPatchUnloadPatch = 0x1,
	ManageHotPatchQueryPatches = 0x2,
	ManageHotPatchLoadPatchForUser = 0x3,
	ManageHotPatchUnloadPatchForUser = 0x4,
	ManageHotPatchQueryPatchesForUser = 0x5,
	ManageHotPatchQueryActivePatches = 0x6,
	ManageHotPatchApplyImagePatch = 0x7,
	ManageHotPatchQuerySinglePatch = 0x8,
	ManageHotPatchCheckEnabled = 0x9,
	ManageHotPatchMax = 0xa
};

struct _HSM_OPCODE {
	/*0000*/ ULONG Tag;
	/*0004*/ ULONG Code;
	/*0008*/
};

struct _HV_DETAILS {
	/*0000*/ ULONG Data[0x4];
	/*0010*/
};

struct _HV_MINROOT_NUMA_LPS {
	/*0000*/ ULONG NodeIndex;
	/*0008*/ ULONGLONG Mask[0x10];
	/*0088*/
};

struct _HYPER_SIZEDARR {
	/*0000*/ ULONG clSize;
	/*0008*/ LONGLONG * pData;
	/*0010*/
};

struct _ICONINFO {
	/*0000*/ INT fIcon;
	/*0004*/ ULONG xHotspot;
	/*0008*/ ULONG yHotspot;
	/*0010*/ HBITMAP__ * hbmMask;
	/*0018*/ HBITMAP__ * hbmColor;
	/*0020*/
};

struct _ICONINFOEXA {
	/*0000*/ ULONG cbSize;
	/*0004*/ INT fIcon;
	/*0008*/ ULONG xHotspot;
	/*000c*/ ULONG yHotspot;
	/*0010*/ HBITMAP__ * hbmMask;
	/*0018*/ HBITMAP__ * hbmColor;
	/*0020*/ USHORT wResID;
	/*0022*/ CHAR szModName[0x104];
	/*0126*/ CHAR szResName[0x104];
	/*0230*/
};

struct _ICONINFOEXW {
	/*0000*/ ULONG cbSize;
	/*0004*/ INT fIcon;
	/*0008*/ ULONG xHotspot;
	/*000c*/ ULONG yHotspot;
	/*0010*/ HBITMAP__ * hbmMask;
	/*0018*/ HBITMAP__ * hbmColor;
	/*0020*/ USHORT wResID;
	/*0022*/ WCHAR szModName[0x104];
	/*022a*/ WCHAR szResName[0x104];
	/*0438*/
};

enum _IDL_CS_CONVERT {
	IDL_CS_NO_CONVERT = 0x0,
	IDL_CS_IN_PLACE_CONVERT = 0x1,
	IDL_CS_NEW_BUFFER_CONVERT = 0x2
};

struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONGLONG BeginAddress;
	/*0008*/ ULONGLONG EndAddress;
	/*0010*/ ULONGLONG ExceptionHandler;
	/*0018*/ ULONGLONG HandlerData;
	/*0020*/ ULONGLONG PrologEndAddress;
	/*0028*/
};

struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONG BeginAddress;
	/*0004*/ ULONG EndAddress;
	/*0008*/ ULONG ExceptionHandler;
	/*000c*/ ULONG HandlerData;
	/*0010*/ ULONG PrologEndAddress;
	/*0014*/
};

struct _IMAGE_ARCHIVE_MEMBER_HEADER {
	/*0000*/ UCHAR Name[0x10];
	/*0010*/ UCHAR Date[0xc];
	/*001c*/ UCHAR UserID[0x6];
	/*0022*/ UCHAR GroupID[0x6];
	/*0028*/ UCHAR Mode[0x8];
	/*0030*/ UCHAR Size[0xa];
	/*003a*/ UCHAR EndHeader[0x2];
	/*003c*/
};

struct _IMAGE_ARM64EC_CODE_RANGE_ENTRY_POINT {
	/*0000*/ ULONG StartRva;
	/*0004*/ ULONG EndRva;
	/*0008*/ ULONG EntryPoint;
	/*000c*/
};

struct _IMAGE_ARM64EC_METADATA {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG CodeMap;
	/*0008*/ ULONG CodeMapCount;
	/*000c*/ ULONG CodeRangesToEntryPoints;
	/*0010*/ ULONG RedirectionMetadata;
	/*0014*/ ULONG tbd__os_arm64x_dispatch_call_no_redirect;
	/*0018*/ ULONG tbd__os_arm64x_dispatch_ret;
	/*001c*/ ULONG tbd__os_arm64x_dispatch_call;
	/*0020*/ ULONG tbd__os_arm64x_dispatch_icall;
	/*0024*/ ULONG tbd__os_arm64x_dispatch_icall_cfg;
	/*0028*/ ULONG AlternateEntryPoint;
	/*002c*/ ULONG AuxiliaryIAT;
	/*0030*/ ULONG CodeRangesToEntryPointsCount;
	/*0034*/ ULONG RedirectionMetadataCount;
	/*0038*/ ULONG GetX64InformationFunctionPointer;
	/*003c*/ ULONG SetX64InformationFunctionPointer;
	/*0040*/ ULONG ExtraRFETable;
	/*0044*/ ULONG ExtraRFETableSize;
	/*0048*/ ULONG __os_arm64x_dispatch_fptr;
	/*004c*/ ULONG AuxiliaryIATCopy;
	/*0050*/
};

struct _IMAGE_ARM64EC_REDIRECTION_ENTRY {
	/*0000*/ ULONG Source;
	/*0004*/ ULONG Destination;
	/*0008*/
};

struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONG BeginAddress;
	/*0004*/ ULONG UnwindData;
	/*0004*/ ULONG Flag : 02; // 0x00000003;
	/*0004*/ ULONG FunctionLength : 11; // 0x00001ffc;
	/*0004*/ ULONG RegF : 03; // 0x0000e000;
	/*0004*/ ULONG RegI : 04; // 0x000f0000;
	/*0004*/ ULONG H : 01; // 0x00100000;
	/*0004*/ ULONG CR : 02; // 0x00600000;
	/*0004*/ ULONG FrameSize : 09; // 0xff800000;
	/*0008*/
};

struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONG BeginAddress;
	/*0004*/ ULONG UnwindData;
	/*0004*/ ULONG Flag : 02; // 0x00000003;
	/*0004*/ ULONG FunctionLength : 11; // 0x00001ffc;
	/*0004*/ ULONG Ret : 02; // 0x00006000;
	/*0004*/ ULONG H : 01; // 0x00008000;
	/*0004*/ ULONG Reg : 03; // 0x00070000;
	/*0004*/ ULONG R : 01; // 0x00080000;
	/*0004*/ ULONG L : 01; // 0x00100000;
	/*0004*/ ULONG C : 01; // 0x00200000;
	/*0004*/ ULONG StackAdjust : 10; // 0xffc00000;
	/*0008*/
};

union _IMAGE_AUX_SYMBOL {
	
	
	
	
	/*0000*/ <unnamed-type-Sym> Sym;
	/*0000*/ <unnamed-type-File> File;
	/*0000*/ <unnamed-type-Section> Section;
	/*0000*/ IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
	/*0000*/ <unnamed-type-CRC> CRC;
	/*0012*/
};

union _IMAGE_AUX_SYMBOL_EX {
	
	
	
	
	/*0000*/ <unnamed-type-Sym> Sym;
	/*0000*/ <unnamed-type-File> File;
	/*0000*/ <unnamed-type-Section> Section;
	/*0000*/ IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
	/*0012*/ UCHAR rgbReserved[0x2];
	/*0000*/ <unnamed-type-CRC> CRC;
	/*0014*/
};

struct _IMAGE_BASE_RELOCATION {
	/*0000*/ ULONG VirtualAddress;
	/*0004*/ ULONG SizeOfBlock;
	/*0008*/
};

struct _IMAGE_BDD_DYNAMIC_RELOCATION {
	/*0000*/ USHORT Left;
	/*0002*/ USHORT Right;
	/*0004*/ ULONG Value;
	/*0008*/
};

struct _IMAGE_BDD_INFO {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG BDDSize;
	/*0008*/
};

struct _IMAGE_BOUND_FORWARDER_REF {
	/*0000*/ ULONG TimeDateStamp;
	/*0004*/ USHORT OffsetModuleName;
	/*0006*/ USHORT Reserved;
	/*0008*/
};

struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
	/*0000*/ ULONG TimeDateStamp;
	/*0004*/ USHORT OffsetModuleName;
	/*0006*/ USHORT NumberOfModuleForwarderRefs;
	/*0008*/
};

struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONG FuncStart;
	/*0004*/ ULONG PrologLen : 08; // 0x000000ff;
	/*0004*/ ULONG FuncLen : 22; // 0x3fffff00;
	/*0004*/ ULONG ThirtyTwoBit : 01; // 0x40000000;
	/*0004*/ ULONG ExceptionFlag : 01; // 0x80000000;
	/*0008*/
};

struct _IMAGE_CHPE_METADATA_X86 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG CHPECodeAddressRangeOffset;
	/*0008*/ ULONG CHPECodeAddressRangeCount;
	/*000c*/ ULONG WowA64ExceptionHandlerFunctionPointer;
	/*0010*/ ULONG WowA64DispatchCallFunctionPointer;
	/*0014*/ ULONG WowA64DispatchIndirectCallFunctionPointer;
	/*0018*/ ULONG WowA64DispatchIndirectCallCfgFunctionPointer;
	/*001c*/ ULONG WowA64DispatchRetFunctionPointer;
	/*0020*/ ULONG WowA64DispatchRetLeafFunctionPointer;
	/*0024*/ ULONG WowA64DispatchJumpFunctionPointer;
	/*0028*/ ULONG CompilerIATPointer;
	/*002c*/ ULONG WowA64RdtscFunctionPointer;
	/*0030*/
};

struct _IMAGE_CHPE_RANGE_ENTRY {
	/*0000*/ ULONG StartOffset;
	/*0000*/ ULONG NativeCode : 01; // 0x00000001;
	/*0000*/ ULONG AddressBits : 31; // 0xfffffffe;
	/*0004*/ ULONG Length;
	/*0008*/
};

struct _IMAGE_COFF_SYMBOLS_HEADER {
	/*0000*/ ULONG NumberOfSymbols;
	/*0004*/ ULONG LvaToFirstSymbol;
	/*0008*/ ULONG NumberOfLinenumbers;
	/*000c*/ ULONG LvaToFirstLinenumber;
	/*0010*/ ULONG RvaToFirstByteOfCode;
	/*0014*/ ULONG RvaToLastByteOfCode;
	/*0018*/ ULONG RvaToFirstByteOfData;
	/*001c*/ ULONG RvaToLastByteOfData;
	/*0020*/
};

struct _IMAGE_DATA_DIRECTORY {
	/*0000*/ ULONG VirtualAddress;
	/*0004*/ ULONG Size;
	/*0008*/
};

struct _IMAGE_DEBUG_DIRECTORY {
	/*0000*/ ULONG Characteristics;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ USHORT MajorVersion;
	/*000a*/ USHORT MinorVersion;
	/*000c*/ ULONG Type;
	/*0010*/ ULONG SizeOfData;
	/*0014*/ ULONG AddressOfRawData;
	/*0018*/ ULONG PointerToRawData;
	/*001c*/
};

struct _IMAGE_DEBUG_MISC {
	/*0000*/ ULONG DataType;
	/*0004*/ ULONG Length;
	/*0008*/ UCHAR Unicode;
	/*0009*/ UCHAR Reserved[0x3];
	/*000c*/ UCHAR Data[0x1];
	/*0010*/
};

struct _IMAGE_DELAYLOAD_DESCRIPTOR {
	
	/*0000*/ <unnamed-type-Attributes> Attributes;
	/*0004*/ ULONG DllNameRVA;
	/*0008*/ ULONG ModuleHandleRVA;
	/*000c*/ ULONG ImportAddressTableRVA;
	/*0010*/ ULONG ImportNameTableRVA;
	/*0014*/ ULONG BoundImportAddressTableRVA;
	/*0018*/ ULONG UnloadInformationTableRVA;
	/*001c*/ ULONG TimeDateStamp;
	/*0020*/
};

struct _IMAGE_DOS_HEADER {
	/*0000*/ USHORT e_magic;
	/*0002*/ USHORT e_cblp;
	/*0004*/ USHORT e_cp;
	/*0006*/ USHORT e_crlc;
	/*0008*/ USHORT e_cparhdr;
	/*000a*/ USHORT e_minalloc;
	/*000c*/ USHORT e_maxalloc;
	/*000e*/ USHORT e_ss;
	/*0010*/ USHORT e_sp;
	/*0012*/ USHORT e_csum;
	/*0014*/ USHORT e_ip;
	/*0016*/ USHORT e_cs;
	/*0018*/ USHORT e_lfarlc;
	/*001a*/ USHORT e_ovno;
	/*001c*/ USHORT e_res[0x4];
	/*0024*/ USHORT e_oemid;
	/*0026*/ USHORT e_oeminfo;
	/*0028*/ USHORT e_res2[0xa];
	/*003c*/ LONG e_lfanew;
	/*0040*/
};

struct _IMAGE_DVRT_ARM64X_DELTA_FIXUP_RECORD {
	/*0000*/ USHORT Offset : 12; // 0x0fff;
	/*0000*/ USHORT Type : 02; // 0x3000;
	/*0000*/ USHORT Sign : 01; // 0x4000;
	/*0000*/ USHORT Scale : 01; // 0x8000;
	/*0002*/
};

struct _IMAGE_DVRT_ARM64X_FIXUP_RECORD {
	/*0000*/ USHORT Offset : 12; // 0x0fff;
	/*0000*/ USHORT Type : 02; // 0x3000;
	/*0000*/ USHORT Size : 02; // 0xc000;
	/*0002*/
};

struct _IMAGE_DYNAMIC_RELOCATION32 {
	/*0000*/ ULONG Symbol;
	/*0004*/ ULONG BaseRelocSize;
	/*0008*/
};

struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
	/*0000*/ ULONG HeaderSize;
	/*0004*/ ULONG FixupInfoSize;
	/*0008*/ ULONG Symbol;
	/*000c*/ ULONG SymbolGroup;
	/*0010*/ ULONG Flags;
	/*0014*/
};

struct _IMAGE_DYNAMIC_RELOCATION64 {
	/*0000*/ ULONGLONG Symbol;
	/*0008*/ ULONG BaseRelocSize;
	/*000c*/
};

struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
	/*0000*/ ULONG HeaderSize;
	/*0004*/ ULONG FixupInfoSize;
	/*0008*/ ULONGLONG Symbol;
	/*0010*/ ULONG SymbolGroup;
	/*0014*/ ULONG Flags;
	/*0018*/
};

struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/
};

struct _IMAGE_ENCLAVE_CONFIG32 {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG MinimumRequiredConfigSize;
	/*0008*/ ULONG PolicyFlags;
	/*000c*/ ULONG NumberOfImports;
	/*0010*/ ULONG ImportList;
	/*0014*/ ULONG ImportEntrySize;
	/*0018*/ UCHAR FamilyID[0x10];
	/*0028*/ UCHAR ImageID[0x10];
	/*0038*/ ULONG ImageVersion;
	/*003c*/ ULONG SecurityVersion;
	/*0040*/ ULONG EnclaveSize;
	/*0044*/ ULONG NumberOfThreads;
	/*0048*/ ULONG EnclaveFlags;
	/*004c*/
};

struct _IMAGE_ENCLAVE_CONFIG64 {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG MinimumRequiredConfigSize;
	/*0008*/ ULONG PolicyFlags;
	/*000c*/ ULONG NumberOfImports;
	/*0010*/ ULONG ImportList;
	/*0014*/ ULONG ImportEntrySize;
	/*0018*/ UCHAR FamilyID[0x10];
	/*0028*/ UCHAR ImageID[0x10];
	/*0038*/ ULONG ImageVersion;
	/*003c*/ ULONG SecurityVersion;
	/*0040*/ ULONGLONG EnclaveSize;
	/*0048*/ ULONG NumberOfThreads;
	/*004c*/ ULONG EnclaveFlags;
	/*0050*/
};

struct _IMAGE_ENCLAVE_IMPORT {
	/*0000*/ ULONG MatchType;
	/*0004*/ ULONG MinimumSecurityVersion;
	/*0008*/ UCHAR UniqueOrAuthorID[0x20];
	/*0028*/ UCHAR FamilyID[0x10];
	/*0038*/ UCHAR ImageID[0x10];
	/*0048*/ ULONG ImportName;
	/*004c*/ ULONG Reserved;
	/*0050*/
};

struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
	/*0000*/ ULONG EpilogueCount;
	/*0004*/ UCHAR EpilogueByteCount;
	/*0005*/ UCHAR BranchDescriptorElementSize;
	/*0006*/ USHORT BranchDescriptorCount;
	/*0008*/
};

struct _IMAGE_EXPORT_DIRECTORY {
	/*0000*/ ULONG Characteristics;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ USHORT MajorVersion;
	/*000a*/ USHORT MinorVersion;
	/*000c*/ ULONG Name;
	/*0010*/ ULONG Base;
	/*0014*/ ULONG NumberOfFunctions;
	/*0018*/ ULONG NumberOfNames;
	/*001c*/ ULONG AddressOfFunctions;
	/*0020*/ ULONG AddressOfNames;
	/*0024*/ ULONG AddressOfNameOrdinals;
	/*0028*/
};

struct _IMAGE_FILE_HEADER {
	/*0000*/ USHORT Machine;
	/*0002*/ USHORT NumberOfSections;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ ULONG PointerToSymbolTable;
	/*000c*/ ULONG NumberOfSymbols;
	/*0010*/ USHORT SizeOfOptionalHeader;
	/*0012*/ USHORT Characteristics;
	/*0014*/
};

struct _IMAGE_FILE_MACHINES {
	/*0000*/ ULONG Value;
	/*0000*/ ULONG x86 : 01; // 0x00000001;
	/*0000*/ ULONG amd64 : 01; // 0x00000002;
	/*0000*/ ULONG arm : 01; // 0x00000004;
	/*0000*/ ULONG arm64 : 01; // 0x00000008;
	/*0000*/ ULONG arm64ec : 01; // 0x00000010;
	/*0004*/
};

struct _IMAGE_FUNCTION_ENTRY {
	/*0000*/ ULONG StartingAddress;
	/*0004*/ ULONG EndingAddress;
	/*0008*/ ULONG EndOfPrologue;
	/*000c*/
};

struct _IMAGE_FUNCTION_ENTRY64 {
	/*0000*/ ULONGLONG StartingAddress;
	/*0008*/ ULONGLONG EndingAddress;
	/*0010*/ ULONGLONG EndOfPrologue;
	/*0010*/ ULONGLONG UnwindInfoAddress;
	/*0018*/
};

struct _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION {
	/*0000*/ ULONG OriginalRva;
	/*0004*/ ULONG BDDOffset;
	/*0008*/ ULONG RvaSize;
	/*000c*/ ULONG BaseRelocSize;
	/*0010*/
};

struct _IMAGE_FUNCTION_OVERRIDE_HEADER {
	/*0000*/ ULONG FuncOverrideSize;
	/*0004*/
};

struct _IMAGE_HOT_PATCH_BASE {
	/*0000*/ ULONG SequenceNumber;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG OriginalTimeDateStamp;
	/*000c*/ ULONG OriginalCheckSum;
	/*0010*/ ULONG CodeIntegrityInfo;
	/*0014*/ ULONG CodeIntegritySize;
	/*0018*/ ULONG PatchTable;
	/*001c*/ ULONG BufferOffset;
	/*0020*/
};

struct _IMAGE_HOT_PATCH_HASHES {
	/*0000*/ UCHAR SHA256[0x20];
	/*0020*/ UCHAR SHA1[0x14];
	/*0034*/
};

struct _IMAGE_HOT_PATCH_INFO {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG SequenceNumber;
	/*000c*/ ULONG BaseImageList;
	/*0010*/ ULONG BaseImageCount;
	/*0014*/ ULONG BufferOffset;
	/*0018*/ ULONG ExtraPatchSize;
	/*001c*/
};

struct _IMAGE_IMPORT_BY_NAME {
	/*0000*/ USHORT Hint;
	/*0002*/ CHAR Name[0x1];
	/*0004*/
};

struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
	/*0000*/ ULONG PageRelativeOffset : 12; // 0x00000fff;
	/*0000*/ ULONG IndirectCall : 01; // 0x00001000;
	/*0000*/ ULONG IATIndex : 19; // 0xffffe000;
	/*0004*/
};

struct _IMAGE_IMPORT_DESCRIPTOR {
	/*0000*/ ULONG Characteristics;
	/*0000*/ ULONG OriginalFirstThunk;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ ULONG ForwarderChain;
	/*000c*/ ULONG Name;
	/*0010*/ ULONG FirstThunk;
	/*0014*/
};

struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
	/*0000*/ USHORT PageRelativeOffset : 12; // 0x0fff;
	/*0000*/ USHORT IndirectCall : 01; // 0x1000;
	/*0000*/ USHORT RexWPrefix : 01; // 0x2000;
	/*0000*/ USHORT CfgCheck : 01; // 0x4000;
	/*0000*/ USHORT Reserved : 01; // 0x8000;
	/*0002*/
};

struct _IMAGE_LINENUMBER {
	
	/*0000*/ <unnamed-type-Type> Type;
	/*0004*/ USHORT Linenumber;
	/*0006*/
};

struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
	/*0000*/ USHORT Flags;
	/*0002*/ USHORT Catalog;
	/*0004*/ ULONG CatalogOffset;
	/*0008*/ ULONG Reserved;
	/*000c*/
};

struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ USHORT MajorVersion;
	/*000a*/ USHORT MinorVersion;
	/*000c*/ ULONG GlobalFlagsClear;
	/*0010*/ ULONG GlobalFlagsSet;
	/*0014*/ ULONG CriticalSectionDefaultTimeout;
	/*0018*/ ULONG DeCommitFreeBlockThreshold;
	/*001c*/ ULONG DeCommitTotalFreeThreshold;
	/*0020*/ ULONG LockPrefixTable;
	/*0024*/ ULONG MaximumAllocationSize;
	/*0028*/ ULONG VirtualMemoryThreshold;
	/*002c*/ ULONG ProcessHeapFlags;
	/*0030*/ ULONG ProcessAffinityMask;
	/*0034*/ USHORT CSDVersion;
	/*0036*/ USHORT DependentLoadFlags;
	/*0038*/ ULONG EditList;
	/*003c*/ ULONG SecurityCookie;
	/*0040*/ ULONG SEHandlerTable;
	/*0044*/ ULONG SEHandlerCount;
	/*0048*/ ULONG GuardCFCheckFunctionPointer;
	/*004c*/ ULONG GuardCFDispatchFunctionPointer;
	/*0050*/ ULONG GuardCFFunctionTable;
	/*0054*/ ULONG GuardCFFunctionCount;
	/*0058*/ ULONG GuardFlags;
	/*005c*/ _IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
	/*0068*/ ULONG GuardAddressTakenIatEntryTable;
	/*006c*/ ULONG GuardAddressTakenIatEntryCount;
	/*0070*/ ULONG GuardLongJumpTargetTable;
	/*0074*/ ULONG GuardLongJumpTargetCount;
	/*0078*/ ULONG DynamicValueRelocTable;
	/*007c*/ ULONG CHPEMetadataPointer;
	/*0080*/ ULONG GuardRFFailureRoutine;
	/*0084*/ ULONG GuardRFFailureRoutineFunctionPointer;
	/*0088*/ ULONG DynamicValueRelocTableOffset;
	/*008c*/ USHORT DynamicValueRelocTableSection;
	/*008e*/ USHORT Reserved2;
	/*0090*/ ULONG GuardRFVerifyStackPointerFunctionPointer;
	/*0094*/ ULONG HotPatchTableOffset;
	/*0098*/ ULONG Reserved3;
	/*009c*/ ULONG EnclaveConfigurationPointer;
	/*00a0*/ ULONG VolatileMetadataPointer;
	/*00a4*/ ULONG GuardEHContinuationTable;
	/*00a8*/ ULONG GuardEHContinuationCount;
	/*00ac*/ ULONG GuardXFGCheckFunctionPointer;
	/*00b0*/ ULONG GuardXFGDispatchFunctionPointer;
	/*00b4*/ ULONG GuardXFGTableDispatchFunctionPointer;
	/*00b8*/ ULONG CastGuardOsDeterminedFailureMode;
	/*00bc*/ ULONG GuardMemcpyFunctionPointer;
	/*00c0*/
};

struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ USHORT MajorVersion;
	/*000a*/ USHORT MinorVersion;
	/*000c*/ ULONG GlobalFlagsClear;
	/*0010*/ ULONG GlobalFlagsSet;
	/*0014*/ ULONG CriticalSectionDefaultTimeout;
	/*0018*/ ULONGLONG DeCommitFreeBlockThreshold;
	/*0020*/ ULONGLONG DeCommitTotalFreeThreshold;
	/*0028*/ ULONGLONG LockPrefixTable;
	/*0030*/ ULONGLONG MaximumAllocationSize;
	/*0038*/ ULONGLONG VirtualMemoryThreshold;
	/*0040*/ ULONGLONG ProcessAffinityMask;
	/*0048*/ ULONG ProcessHeapFlags;
	/*004c*/ USHORT CSDVersion;
	/*004e*/ USHORT DependentLoadFlags;
	/*0050*/ ULONGLONG EditList;
	/*0058*/ ULONGLONG SecurityCookie;
	/*0060*/ ULONGLONG SEHandlerTable;
	/*0068*/ ULONGLONG SEHandlerCount;
	/*0070*/ ULONGLONG GuardCFCheckFunctionPointer;
	/*0078*/ ULONGLONG GuardCFDispatchFunctionPointer;
	/*0080*/ ULONGLONG GuardCFFunctionTable;
	/*0088*/ ULONGLONG GuardCFFunctionCount;
	/*0090*/ ULONG GuardFlags;
	/*0094*/ _IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
	/*00a0*/ ULONGLONG GuardAddressTakenIatEntryTable;
	/*00a8*/ ULONGLONG GuardAddressTakenIatEntryCount;
	/*00b0*/ ULONGLONG GuardLongJumpTargetTable;
	/*00b8*/ ULONGLONG GuardLongJumpTargetCount;
	/*00c0*/ ULONGLONG DynamicValueRelocTable;
	/*00c8*/ ULONGLONG CHPEMetadataPointer;
	/*00d0*/ ULONGLONG GuardRFFailureRoutine;
	/*00d8*/ ULONGLONG GuardRFFailureRoutineFunctionPointer;
	/*00e0*/ ULONG DynamicValueRelocTableOffset;
	/*00e4*/ USHORT DynamicValueRelocTableSection;
	/*00e6*/ USHORT Reserved2;
	/*00e8*/ ULONGLONG GuardRFVerifyStackPointerFunctionPointer;
	/*00f0*/ ULONG HotPatchTableOffset;
	/*00f4*/ ULONG Reserved3;
	/*00f8*/ ULONGLONG EnclaveConfigurationPointer;
	/*0100*/ ULONGLONG VolatileMetadataPointer;
	/*0108*/ ULONGLONG GuardEHContinuationTable;
	/*0110*/ ULONGLONG GuardEHContinuationCount;
	/*0118*/ ULONGLONG GuardXFGCheckFunctionPointer;
	/*0120*/ ULONGLONG GuardXFGDispatchFunctionPointer;
	/*0128*/ ULONGLONG GuardXFGTableDispatchFunctionPointer;
	/*0130*/ ULONGLONG CastGuardOsDeterminedFailureMode;
	/*0138*/ ULONGLONG GuardMemcpyFunctionPointer;
	/*0140*/
};

enum _IMAGE_MITIGATION_POLICY {
	ImageDepPolicy = 0x0,
	ImageAslrPolicy = 0x1,
	ImageDynamicCodePolicy = 0x2,
	ImageStrictHandleCheckPolicy = 0x3,
	ImageSystemCallDisablePolicy = 0x4,
	ImageMitigationOptionsMask = 0x5,
	ImageExtensionPointDisablePolicy = 0x6,
	ImageControlFlowGuardPolicy = 0x7,
	ImageSignaturePolicy = 0x8,
	ImageFontDisablePolicy = 0x9,
	ImageImageLoadPolicy = 0xa,
	ImagePayloadRestrictionPolicy = 0xb,
	ImageChildProcessPolicy = 0xc,
	ImageSehopPolicy = 0xd,
	ImageHeapPolicy = 0xe,
	ImageUserShadowStackPolicy = 0xf,
	ImageRedirectionTrustPolicy = 0x10,
	ImageUserPointerAuthPolicy = 0x11,
	MaxImageMitigationPolicy = 0x12
};

struct _IMAGE_NT_HEADERS {
	/*0000*/ ULONG Signature;
	/*0004*/ _IMAGE_FILE_HEADER FileHeader;
	/*0018*/ _IMAGE_OPTIONAL_HEADER OptionalHeader;
	/*00f8*/
};

struct _IMAGE_NT_HEADERS64 {
	/*0000*/ ULONG Signature;
	/*0004*/ _IMAGE_FILE_HEADER FileHeader;
	/*0018*/ _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
	/*0108*/
};

struct _IMAGE_OPTIONAL_HEADER {
	/*0000*/ USHORT Magic;
	/*0002*/ UCHAR MajorLinkerVersion;
	/*0003*/ UCHAR MinorLinkerVersion;
	/*0004*/ ULONG SizeOfCode;
	/*0008*/ ULONG SizeOfInitializedData;
	/*000c*/ ULONG SizeOfUninitializedData;
	/*0010*/ ULONG AddressOfEntryPoint;
	/*0014*/ ULONG BaseOfCode;
	/*0018*/ ULONG BaseOfData;
	/*001c*/ ULONG ImageBase;
	/*0020*/ ULONG SectionAlignment;
	/*0024*/ ULONG FileAlignment;
	/*0028*/ USHORT MajorOperatingSystemVersion;
	/*002a*/ USHORT MinorOperatingSystemVersion;
	/*002c*/ USHORT MajorImageVersion;
	/*002e*/ USHORT MinorImageVersion;
	/*0030*/ USHORT MajorSubsystemVersion;
	/*0032*/ USHORT MinorSubsystemVersion;
	/*0034*/ ULONG Win32VersionValue;
	/*0038*/ ULONG SizeOfImage;
	/*003c*/ ULONG SizeOfHeaders;
	/*0040*/ ULONG CheckSum;
	/*0044*/ USHORT Subsystem;
	/*0046*/ USHORT DllCharacteristics;
	/*0048*/ ULONG SizeOfStackReserve;
	/*004c*/ ULONG SizeOfStackCommit;
	/*0050*/ ULONG SizeOfHeapReserve;
	/*0054*/ ULONG SizeOfHeapCommit;
	/*0058*/ ULONG LoaderFlags;
	/*005c*/ ULONG NumberOfRvaAndSizes;
	/*0060*/ _IMAGE_DATA_DIRECTORY DataDirectory[0x10];
	/*00e0*/
};

struct _IMAGE_OPTIONAL_HEADER64 {
	/*0000*/ USHORT Magic;
	/*0002*/ UCHAR MajorLinkerVersion;
	/*0003*/ UCHAR MinorLinkerVersion;
	/*0004*/ ULONG SizeOfCode;
	/*0008*/ ULONG SizeOfInitializedData;
	/*000c*/ ULONG SizeOfUninitializedData;
	/*0010*/ ULONG AddressOfEntryPoint;
	/*0014*/ ULONG BaseOfCode;
	/*0018*/ ULONGLONG ImageBase;
	/*0020*/ ULONG SectionAlignment;
	/*0024*/ ULONG FileAlignment;
	/*0028*/ USHORT MajorOperatingSystemVersion;
	/*002a*/ USHORT MinorOperatingSystemVersion;
	/*002c*/ USHORT MajorImageVersion;
	/*002e*/ USHORT MinorImageVersion;
	/*0030*/ USHORT MajorSubsystemVersion;
	/*0032*/ USHORT MinorSubsystemVersion;
	/*0034*/ ULONG Win32VersionValue;
	/*0038*/ ULONG SizeOfImage;
	/*003c*/ ULONG SizeOfHeaders;
	/*0040*/ ULONG CheckSum;
	/*0044*/ USHORT Subsystem;
	/*0046*/ USHORT DllCharacteristics;
	/*0048*/ ULONGLONG SizeOfStackReserve;
	/*0050*/ ULONGLONG SizeOfStackCommit;
	/*0058*/ ULONGLONG SizeOfHeapReserve;
	/*0060*/ ULONGLONG SizeOfHeapCommit;
	/*0068*/ ULONG LoaderFlags;
	/*006c*/ ULONG NumberOfRvaAndSizes;
	/*0070*/ _IMAGE_DATA_DIRECTORY DataDirectory[0x10];
	/*00f0*/
};

struct _IMAGE_OS2_HEADER {
	/*0000*/ USHORT ne_magic;
	/*0002*/ CHAR ne_ver;
	/*0003*/ CHAR ne_rev;
	/*0004*/ USHORT ne_enttab;
	/*0006*/ USHORT ne_cbenttab;
	/*0008*/ LONG ne_crc;
	/*000c*/ USHORT ne_flags;
	/*000e*/ USHORT ne_autodata;
	/*0010*/ USHORT ne_heap;
	/*0012*/ USHORT ne_stack;
	/*0014*/ LONG ne_csip;
	/*0018*/ LONG ne_sssp;
	/*001c*/ USHORT ne_cseg;
	/*001e*/ USHORT ne_cmod;
	/*0020*/ USHORT ne_cbnrestab;
	/*0022*/ USHORT ne_segtab;
	/*0024*/ USHORT ne_rsrctab;
	/*0026*/ USHORT ne_restab;
	/*0028*/ USHORT ne_modtab;
	/*002a*/ USHORT ne_imptab;
	/*002c*/ LONG ne_nrestab;
	/*0030*/ USHORT ne_cmovent;
	/*0032*/ USHORT ne_align;
	/*0034*/ USHORT ne_cres;
	/*0036*/ UCHAR ne_exetyp;
	/*0037*/ UCHAR ne_flagsothers;
	/*0038*/ USHORT ne_pretthunks;
	/*003a*/ USHORT ne_psegrefbytes;
	/*003c*/ USHORT ne_swaparea;
	/*003e*/ USHORT ne_expver;
	/*0040*/
};

struct _IMAGE_POLICY_ENTRY {
	
	/*0000*/ _IMAGE_POLICY_ENTRY_TYPE Type;
	/*0004*/ _IMAGE_POLICY_ID PolicyId;
	/*0008*/ <unnamed-type-u> u;
	/*0010*/
};

enum _IMAGE_POLICY_ENTRY_TYPE {
	ImagePolicyEntryTypeNone = 0x0,
	ImagePolicyEntryTypeBool = 0x1,
	ImagePolicyEntryTypeInt8 = 0x2,
	ImagePolicyEntryTypeUInt8 = 0x3,
	ImagePolicyEntryTypeInt16 = 0x4,
	ImagePolicyEntryTypeUInt16 = 0x5,
	ImagePolicyEntryTypeInt32 = 0x6,
	ImagePolicyEntryTypeUInt32 = 0x7,
	ImagePolicyEntryTypeInt64 = 0x8,
	ImagePolicyEntryTypeUInt64 = 0x9,
	ImagePolicyEntryTypeAnsiString = 0xa,
	ImagePolicyEntryTypeUnicodeString = 0xb,
	ImagePolicyEntryTypeOverride = 0xc,
	ImagePolicyEntryTypeMaximum = 0xd
};

enum _IMAGE_POLICY_ID {
	ImagePolicyIdNone = 0x0,
	ImagePolicyIdEtw = 0x1,
	ImagePolicyIdDebug = 0x2,
	ImagePolicyIdCrashDump = 0x3,
	ImagePolicyIdCrashDumpKey = 0x4,
	ImagePolicyIdCrashDumpKeyGuid = 0x5,
	ImagePolicyIdParentSd = 0x6,
	ImagePolicyIdParentSdRev = 0x7,
	ImagePolicyIdSvn = 0x8,
	ImagePolicyIdDeviceId = 0x9,
	ImagePolicyIdCapability = 0xa,
	ImagePolicyIdScenarioId = 0xb,
	ImagePolicyIdMaximum = 0xc
};

struct _IMAGE_POLICY_METADATA {
	/*0000*/ UCHAR Version;
	/*0001*/ UCHAR Reserved0[0x7];
	/*0008*/ ULONGLONG ApplicationId;
	/*0010*/ _IMAGE_POLICY_ENTRY Policies[];
	/*0010*/
};

struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
	/*0000*/ UCHAR PrologueByteCount;
	/*0001*/
};

struct _IMAGE_RELOCATION {
	/*0000*/ ULONG VirtualAddress;
	/*0000*/ ULONG RelocCount;
	/*0004*/ ULONG SymbolTableIndex;
	/*0008*/ USHORT Type;
	/*000a*/
};

struct _IMAGE_RESOURCE_DATA_ENTRY {
	/*0000*/ ULONG OffsetToData;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG CodePage;
	/*000c*/ ULONG Reserved;
	/*0010*/
};

struct _IMAGE_RESOURCE_DIRECTORY {
	/*0000*/ ULONG Characteristics;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ USHORT MajorVersion;
	/*000a*/ USHORT MinorVersion;
	/*000c*/ USHORT NumberOfNamedEntries;
	/*000e*/ USHORT NumberOfIdEntries;
	/*0010*/
};

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
	/*0000*/ ULONG NameOffset : 31; // 0x7fffffff;
	/*0000*/ ULONG NameIsString : 01; // 0x80000000;
	/*0000*/ ULONG Name;
	/*0000*/ USHORT Id;
	/*0004*/ ULONG OffsetToData;
	/*0004*/ ULONG OffsetToDirectory : 31; // 0x7fffffff;
	/*0004*/ ULONG DataIsDirectory : 01; // 0x80000000;
	/*0008*/
};

struct _IMAGE_RESOURCE_DIRECTORY_STRING {
	/*0000*/ USHORT Length;
	/*0002*/ CHAR NameString[0x1];
	/*0004*/
};

struct _IMAGE_RESOURCE_DIR_STRING_U {
	/*0000*/ USHORT Length;
	/*0002*/ WCHAR NameString[0x1];
	/*0004*/
};

struct _IMAGE_ROM_HEADERS {
	/*0000*/ _IMAGE_FILE_HEADER FileHeader;
	/*0014*/ _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
	/*004c*/
};

struct _IMAGE_ROM_OPTIONAL_HEADER {
	/*0000*/ USHORT Magic;
	/*0002*/ UCHAR MajorLinkerVersion;
	/*0003*/ UCHAR MinorLinkerVersion;
	/*0004*/ ULONG SizeOfCode;
	/*0008*/ ULONG SizeOfInitializedData;
	/*000c*/ ULONG SizeOfUninitializedData;
	/*0010*/ ULONG AddressOfEntryPoint;
	/*0014*/ ULONG BaseOfCode;
	/*0018*/ ULONG BaseOfData;
	/*001c*/ ULONG BaseOfBss;
	/*0020*/ ULONG GprMask;
	/*0024*/ ULONG CprMask[0x4];
	/*0034*/ ULONG GpValue;
	/*0038*/
};

struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONG BeginAddress;
	/*0004*/ ULONG EndAddress;
	/*0008*/ ULONG UnwindInfoAddress;
	/*0008*/ ULONG UnwindData;
	/*000c*/
};

struct _IMAGE_SECTION_HEADER {
	
	/*0000*/ UCHAR Name[0x8];
	/*0008*/ <unnamed-type-Misc> Misc;
	/*000c*/ ULONG VirtualAddress;
	/*0010*/ ULONG SizeOfRawData;
	/*0014*/ ULONG PointerToRawData;
	/*0018*/ ULONG PointerToRelocations;
	/*001c*/ ULONG PointerToLinenumbers;
	/*0020*/ USHORT NumberOfRelocations;
	/*0022*/ USHORT NumberOfLinenumbers;
	/*0024*/ ULONG Characteristics;
	/*0028*/
};

struct _IMAGE_SEPARATE_DEBUG_HEADER {
	/*0000*/ USHORT Signature;
	/*0002*/ USHORT Flags;
	/*0004*/ USHORT Machine;
	/*0006*/ USHORT Characteristics;
	/*0008*/ ULONG TimeDateStamp;
	/*000c*/ ULONG CheckSum;
	/*0010*/ ULONG ImageBase;
	/*0014*/ ULONG SizeOfImage;
	/*0018*/ ULONG NumberOfSections;
	/*001c*/ ULONG ExportedNamesSize;
	/*0020*/ ULONG DebugDirectorySize;
	/*0024*/ ULONG SectionAlignment;
	/*0028*/ ULONG Reserved[0x2];
	/*0030*/
};

struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
	/*0000*/ USHORT PageRelativeOffset : 12; // 0x0fff;
	/*0000*/ USHORT RegisterNumber : 04; // 0xf000;
	/*0002*/
};

struct _IMAGE_SYMBOL {
	
	/*0000*/ <unnamed-type-N> N;
	/*0008*/ ULONG Value;
	/*000c*/ SHORT SectionNumber;
	/*000e*/ USHORT Type;
	/*0010*/ UCHAR StorageClass;
	/*0011*/ UCHAR NumberOfAuxSymbols;
	/*0012*/
};

struct _IMAGE_SYMBOL_EX {
	
	/*0000*/ <unnamed-type-N> N;
	/*0008*/ ULONG Value;
	/*000c*/ LONG SectionNumber;
	/*0010*/ USHORT Type;
	/*0012*/ UCHAR StorageClass;
	/*0013*/ UCHAR NumberOfAuxSymbols;
	/*0014*/
};

struct _IMAGE_THUNK_DATA32 {
	
	/*0000*/ <unnamed-type-u1> u1;
	/*0004*/
};

struct _IMAGE_THUNK_DATA64 {
	
	/*0000*/ <unnamed-type-u1> u1;
	/*0008*/
};

struct _IMAGE_TLS_DIRECTORY32 {
	/*0000*/ ULONG StartAddressOfRawData;
	/*0004*/ ULONG EndAddressOfRawData;
	/*0008*/ ULONG AddressOfIndex;
	/*000c*/ ULONG AddressOfCallBacks;
	/*0010*/ ULONG SizeOfZeroFill;
	/*0014*/ ULONG Characteristics;
	/*0014*/ ULONG Reserved0 : 20; // 0x000fffff;
	/*0014*/ ULONG Alignment : 04; // 0x00f00000;
	/*0014*/ ULONG Reserved1 : 08; // 0xff000000;
	/*0018*/
};

struct _IMAGE_TLS_DIRECTORY64 {
	/*0000*/ ULONGLONG StartAddressOfRawData;
	/*0008*/ ULONGLONG EndAddressOfRawData;
	/*0010*/ ULONGLONG AddressOfIndex;
	/*0018*/ ULONGLONG AddressOfCallBacks;
	/*0020*/ ULONG SizeOfZeroFill;
	/*0024*/ ULONG Characteristics;
	/*0024*/ ULONG Reserved0 : 20; // 0x000fffff;
	/*0024*/ ULONG Alignment : 04; // 0x00f00000;
	/*0024*/ ULONG Reserved1 : 08; // 0xff000000;
	/*0028*/
};

struct _IMAGE_VXD_HEADER {
	/*0000*/ USHORT e32_magic;
	/*0002*/ UCHAR e32_border;
	/*0003*/ UCHAR e32_worder;
	/*0004*/ ULONG e32_level;
	/*0008*/ USHORT e32_cpu;
	/*000a*/ USHORT e32_os;
	/*000c*/ ULONG e32_ver;
	/*0010*/ ULONG e32_mflags;
	/*0014*/ ULONG e32_mpages;
	/*0018*/ ULONG e32_startobj;
	/*001c*/ ULONG e32_eip;
	/*0020*/ ULONG e32_stackobj;
	/*0024*/ ULONG e32_esp;
	/*0028*/ ULONG e32_pagesize;
	/*002c*/ ULONG e32_lastpagesize;
	/*0030*/ ULONG e32_fixupsize;
	/*0034*/ ULONG e32_fixupsum;
	/*0038*/ ULONG e32_ldrsize;
	/*003c*/ ULONG e32_ldrsum;
	/*0040*/ ULONG e32_objtab;
	/*0044*/ ULONG e32_objcnt;
	/*0048*/ ULONG e32_objmap;
	/*004c*/ ULONG e32_itermap;
	/*0050*/ ULONG e32_rsrctab;
	/*0054*/ ULONG e32_rsrccnt;
	/*0058*/ ULONG e32_restab;
	/*005c*/ ULONG e32_enttab;
	/*0060*/ ULONG e32_dirtab;
	/*0064*/ ULONG e32_dircnt;
	/*0068*/ ULONG e32_fpagetab;
	/*006c*/ ULONG e32_frectab;
	/*0070*/ ULONG e32_impmod;
	/*0074*/ ULONG e32_impmodcnt;
	/*0078*/ ULONG e32_impproc;
	/*007c*/ ULONG e32_pagesum;
	/*0080*/ ULONG e32_datapage;
	/*0084*/ ULONG e32_preload;
	/*0088*/ ULONG e32_nrestab;
	/*008c*/ ULONG e32_cbnrestab;
	/*0090*/ ULONG e32_nressum;
	/*0094*/ ULONG e32_autodata;
	/*0098*/ ULONG e32_debuginfo;
	/*009c*/ ULONG e32_debuglen;
	/*00a0*/ ULONG e32_instpreload;
	/*00a4*/ ULONG e32_instdemand;
	/*00a8*/ ULONG e32_heapsize;
	/*00ac*/ UCHAR e32_res3[0xc];
	/*00b8*/ ULONG e32_winresoff;
	/*00bc*/ ULONG e32_winreslen;
	/*00c0*/ USHORT e32_devid;
	/*00c2*/ USHORT e32_ddkver;
	/*00c4*/
};

struct _INITIAL_TEB {
	
	/*0000*/ <unnamed-type-OldInitialTeb> OldInitialTeb;
	/*0010*/ void * StackBase;
	/*0018*/ void * StackLimit;
	/*0020*/ void * StackAllocationBase;
	/*0028*/
};

struct _INPUT_RECORD {
	
	/*0000*/ USHORT EventType;
	/*0004*/ <unnamed-type-Event> Event;
	/*0014*/
};

enum _INTERFACE_TYPE {
	InterfaceTypeUndefined = 0xffffffff,
	Internal = 0x0,
	Isa = 0x1,
	Eisa = 0x2,
	MicroChannel = 0x3,
	TurboChannel = 0x4,
	PCIBus = 0x5,
	VMEBus = 0x6,
	NuBus = 0x7,
	PCMCIABus = 0x8,
	CBus = 0x9,
	MPIBus = 0xa,
	MPSABus = 0xb,
	ProcessorInternal = 0xc,
	InternalPowerBus = 0xd,
	PNPISABus = 0xe,
	PNPBus = 0xf,
	Vmcs = 0x10,
	ACPIBus = 0x11,
	MaximumInterfaceType = 0x12
};

struct _INVERTED_FUNCTION_TABLE_ENTRY {
	/*0000*/ _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionTable;
	/*0000*/ _DYNAMIC_FUNCTION_TABLE * DynamicTable;
	/*0008*/ void * ImageBase;
	/*0010*/ ULONG SizeOfImage;
	/*0014*/ ULONG SizeOfTable;
	/*0018*/
};

struct _INVERTED_FUNCTION_TABLE_KERNEL_MODE {
	/*0000*/ ULONG CurrentSize;
	/*0004*/ ULONG MaximumSize;
	/*0008*/ ULONG volatile Epoch;
	/*000c*/ UCHAR Overflow;
	/*0010*/ _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[0x100];
	/*1810*/
};

struct _INVERTED_FUNCTION_TABLE_USER_MODE {
	/*0000*/ ULONG CurrentSize;
	/*0004*/ ULONG MaximumSize;
	/*0008*/ ULONG volatile Epoch;
	/*000c*/ UCHAR Overflow;
	/*0010*/ _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[0x200];
	/*3010*/
};

struct _IO_COMPLETION_BASIC_INFORMATION {
	/*0000*/ LONG Depth;
	/*0004*/
};

enum _IO_COMPLETION_INFORMATION_CLASS {
	IoCompletionBasicInformation = 0x0
};

struct _IO_COUNTERS {
	/*0000*/ ULONGLONG ReadOperationCount;
	/*0008*/ ULONGLONG WriteOperationCount;
	/*0010*/ ULONGLONG OtherOperationCount;
	/*0018*/ ULONGLONG ReadTransferCount;
	/*0020*/ ULONGLONG WriteTransferCount;
	/*0028*/ ULONGLONG OtherTransferCount;
	/*0030*/
};

struct _IO_ERROR_LOG_MESSAGE {
	/*0000*/ USHORT Type;
	/*0002*/ USHORT Size;
	/*0004*/ USHORT DriverNameLength;
	/*0008*/ _LARGE_INTEGER TimeStamp;
	/*0010*/ ULONG DriverNameOffset;
	/*0018*/ _IO_ERROR_LOG_PACKET EntryData;
	/*0048*/
};

struct _IO_ERROR_LOG_PACKET {
	/*0000*/ UCHAR MajorFunctionCode;
	/*0001*/ UCHAR RetryCount;
	/*0002*/ USHORT DumpDataSize;
	/*0004*/ USHORT NumberOfStrings;
	/*0006*/ USHORT StringOffset;
	/*0008*/ USHORT EventCategory;
	/*000c*/ LONG ErrorCode;
	/*0010*/ ULONG UniqueErrorValue;
	/*0014*/ LONG FinalStatus;
	/*0018*/ ULONG SequenceNumber;
	/*001c*/ ULONG IoControlCode;
	/*0020*/ _LARGE_INTEGER DeviceOffset;
	/*0028*/ ULONG DumpData[0x1];
	/*0030*/
};

enum _IO_PRIORITY_HINT {
	IoPriorityVeryLow = 0x0,
	IoPriorityLow = 0x1,
	IoPriorityNormal = 0x2,
	IoPriorityHigh = 0x3,
	IoPriorityCritical = 0x4,
	MaxIoPriorityTypes = 0x5
};

struct _IO_RESOURCE_DESCRIPTOR {
	
	/*0000*/ UCHAR Option;
	/*0001*/ UCHAR Type;
	/*0002*/ UCHAR ShareDisposition;
	/*0003*/ UCHAR Spare1;
	/*0004*/ USHORT Flags;
	/*0006*/ USHORT Spare2;
	/*0008*/ <unnamed-type-u> u;
	/*0020*/
};

struct _IO_RESOURCE_LIST {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ ULONG Count;
	/*0008*/ _IO_RESOURCE_DESCRIPTOR Descriptors[0x1];
	/*0028*/
};

struct _IO_RESOURCE_REQUIREMENTS_LIST {
	/*0000*/ ULONG ListSize;
	/*0004*/ _INTERFACE_TYPE InterfaceType;
	/*0008*/ ULONG BusNumber;
	/*000c*/ ULONG SlotNumber;
	/*0010*/ ULONG Reserved[0x3];
	/*001c*/ ULONG AlternativeLists;
	/*0020*/ _IO_RESOURCE_LIST List[0x1];
	/*0048*/
};

struct _IO_SESSION_CONNECT_INFO {
	/*0000*/ ULONG SessionId;
	/*0004*/ UCHAR LocalSession;
	/*0008*/
};

enum _IO_SESSION_EVENT {
	IoSessionEventIgnore = 0x0,
	IoSessionEventCreated = 0x1,
	IoSessionEventTerminated = 0x2,
	IoSessionEventConnected = 0x3,
	IoSessionEventDisconnected = 0x4,
	IoSessionEventLogon = 0x5,
	IoSessionEventLogoff = 0x6,
	IoSessionEventMax = 0x7
};

enum _IO_SESSION_STATE {
	IoSessionStateCreated = 0x1,
	IoSessionStateInitialized = 0x2,
	IoSessionStateConnected = 0x3,
	IoSessionStateDisconnected = 0x4,
	IoSessionStateDisconnectedLoggedOn = 0x5,
	IoSessionStateLoggedOn = 0x6,
	IoSessionStateLoggedOff = 0x7,
	IoSessionStateTerminated = 0x8,
	IoSessionStateMax = 0x9
};

struct _IO_STATUS_BLOCK {
	/*0000*/ LONG Status;
	/*0000*/ void * Pointer;
	/*0008*/ ULONGLONG Information;
	/*0010*/
};

struct _IO_STATUS_BLOCK32 {
	/*0000*/ LONG Status;
	/*0004*/ ULONG Information;
	/*0008*/
};

enum _IRQ_DEVICE_POLICY {
	IrqPolicyMachineDefault = 0x0,
	IrqPolicyAllCloseProcessors = 0x1,
	IrqPolicyOneCloseProcessor = 0x2,
	IrqPolicyAllProcessorsInMachine = 0x3,
	IrqPolicySpecifiedProcessors = 0x4,
	IrqPolicySpreadMessagesAcrossAllProcessors = 0x5,
	IrqPolicyAllProcessorsInMachineWhenSteered = 0x6
};

enum _IRQ_GROUP_POLICY {
	GroupAffinityAllGroupZero = 0x0,
	GroupAffinityDontCare = 0x1
};

enum _IRQ_PRIORITY {
	IrqPriorityUndefined = 0x0,
	IrqPriorityLow = 0x1,
	IrqPriorityNormal = 0x2,
	IrqPriorityHigh = 0x3
};

struct _IR_TIMER_EXTRA_CREATE_PARAMETER {
	/*0000*/ USHORT ComponentId;
	/*0002*/ USHORT RelativeId;
	/*0004*/
};

struct _ImageArchitectureEntry {
	/*0000*/ ULONG FixupInstRVA;
	/*0004*/ ULONG NewInst;
	/*0008*/
};

struct _ImageArchitectureHeader {
	/*0000*/ UINT AmaskValue : 01; // 0x00000001;
	/*0000*/ UINT AmaskShift : 08; // 0x0000ff00;
	/*0004*/ ULONG FirstEntryRVA;
	/*0008*/
};

struct _JIT_DEBUG_INFO {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwProcessorArchitecture;
	/*0008*/ ULONG dwThreadID;
	/*000c*/ ULONG dwReserved0;
	/*0010*/ ULONGLONG lpExceptionAddress;
	/*0018*/ ULONGLONG lpExceptionRecord;
	/*0020*/ ULONGLONG lpContextRecord;
	/*0028*/
};

enum _JOBOBJECTINFOCLASS {
	JobObjectBasicAccountingInformation = 0x1,
	JobObjectBasicLimitInformation = 0x2,
	JobObjectBasicProcessIdList = 0x3,
	JobObjectBasicUIRestrictions = 0x4,
	JobObjectSecurityLimitInformation = 0x5,
	JobObjectEndOfJobTimeInformation = 0x6,
	JobObjectAssociateCompletionPortInformation = 0x7,
	JobObjectBasicAndIoAccountingInformation = 0x8,
	JobObjectExtendedLimitInformation = 0x9,
	JobObjectJobSetInformation = 0xa,
	JobObjectGroupInformation = 0xb,
	JobObjectNotificationLimitInformation = 0xc,
	JobObjectLimitViolationInformation = 0xd,
	JobObjectGroupInformationEx = 0xe,
	JobObjectCpuRateControlInformation = 0xf,
	JobObjectCompletionFilter = 0x10,
	JobObjectCompletionCounter = 0x11,
	JobObjectFreezeInformation = 0x12,
	JobObjectExtendedAccountingInformation = 0x13,
	JobObjectWakeInformation = 0x14,
	JobObjectBackgroundInformation = 0x15,
	JobObjectSchedulingRankBiasInformation = 0x16,
	JobObjectTimerVirtualizationInformation = 0x17,
	JobObjectCycleTimeNotification = 0x18,
	JobObjectClearEvent = 0x19,
	JobObjectInterferenceInformation = 0x1a,
	JobObjectClearPeakJobMemoryUsed = 0x1b,
	JobObjectMemoryUsageInformation = 0x1c,
	JobObjectSharedCommit = 0x1d,
	JobObjectContainerId = 0x1e,
	JobObjectIoRateControlInformation = 0x1f,
	JobObjectSiloRootDirectory = 0x25,
	JobObjectServerSiloBasicInformation = 0x26,
	JobObjectServerSiloUserSharedData = 0x27,
	JobObjectServerSiloInitialize = 0x28,
	JobObjectServerSiloRunningState = 0x29,
	JobObjectIoAttribution = 0x2a,
	JobObjectMemoryPartitionInformation = 0x2b,
	JobObjectContainerTelemetryId = 0x2c,
	JobObjectSiloSystemRoot = 0x2d,
	JobObjectEnergyTrackingState = 0x2e,
	JobObjectThreadImpersonationInformation = 0x2f,
	JobObjectIoPriorityLimit = 0x30,
	JobObjectPagePriorityLimit = 0x31,
	JobObjectReserved1Information = 0x12,
	JobObjectReserved2Information = 0x13,
	JobObjectReserved3Information = 0x14,
	JobObjectReserved4Information = 0x15,
	JobObjectReserved5Information = 0x16,
	JobObjectReserved6Information = 0x17,
	JobObjectReserved7Information = 0x18,
	JobObjectReserved8Information = 0x19,
	JobObjectReserved9Information = 0x1a,
	JobObjectReserved10Information = 0x1b,
	JobObjectReserved11Information = 0x1c,
	JobObjectReserved12Information = 0x1d,
	JobObjectReserved13Information = 0x1e,
	JobObjectReserved14Information = 0x1f,
	JobObjectNetRateControlInformation = 0x20,
	JobObjectNotificationLimitInformation2 = 0x21,
	JobObjectLimitViolationInformation2 = 0x22,
	JobObjectCreateSilo = 0x23,
	JobObjectSiloBasicInformation = 0x24,
	JobObjectReserved15Information = 0x25,
	JobObjectReserved16Information = 0x26,
	JobObjectReserved17Information = 0x27,
	JobObjectReserved18Information = 0x28,
	JobObjectReserved19Information = 0x29,
	JobObjectReserved20Information = 0x2a,
	JobObjectReserved21Information = 0x2b,
	JobObjectReserved22Information = 0x2c,
	JobObjectReserved23Information = 0x2d,
	JobObjectReserved24Information = 0x2e,
	JobObjectReserved25Information = 0x2f,
	JobObjectReserved26Information = 0x30,
	JobObjectReserved27Information = 0x31,
	MaxJobObjectInfoClass = 0x32
};

struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
	/*0000*/ void * CompletionKey;
	/*0008*/ void * CompletionPort;
	/*0010*/
};

struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
	/*0000*/ _LARGE_INTEGER TotalUserTime;
	/*0008*/ _LARGE_INTEGER TotalKernelTime;
	/*0010*/ _LARGE_INTEGER ThisPeriodTotalUserTime;
	/*0018*/ _LARGE_INTEGER ThisPeriodTotalKernelTime;
	/*0020*/ ULONG TotalPageFaultCount;
	/*0024*/ ULONG TotalProcesses;
	/*0028*/ ULONG ActiveProcesses;
	/*002c*/ ULONG TotalTerminatedProcesses;
	/*0030*/
};

struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
	/*0000*/ _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
	/*0030*/ _IO_COUNTERS IoInfo;
	/*0060*/
};

struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
	/*0000*/ _LARGE_INTEGER PerProcessUserTimeLimit;
	/*0008*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0010*/ ULONG LimitFlags;
	/*0018*/ ULONGLONG MinimumWorkingSetSize;
	/*0020*/ ULONGLONG MaximumWorkingSetSize;
	/*0028*/ ULONG ActiveProcessLimit;
	/*0030*/ ULONGLONG Affinity;
	/*0038*/ ULONG PriorityClass;
	/*003c*/ ULONG SchedulingClass;
	/*0040*/
};

struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
	/*0000*/ ULONG NumberOfAssignedProcesses;
	/*0004*/ ULONG NumberOfProcessIdsInList;
	/*0008*/ ULONGLONG ProcessIdList[0x1];
	/*0010*/
};

struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
	/*0000*/ ULONG UIRestrictionsClass;
	/*0004*/
};

struct _JOBOBJECT_CONTAINER_IDENTIFIER_V2 {
	/*0000*/ _GUID ContainerId;
	/*0010*/ _GUID ContainerTelemetryId;
	/*0020*/ ULONG JobId;
	/*0024*/
};

struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
	/*0000*/ ULONG ControlFlags;
	/*0004*/ ULONG CpuRate;
	/*0004*/ ULONG Weight;
	/*0004*/ USHORT MinRate;
	/*0006*/ USHORT MaxRate;
	/*0008*/
};

struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
	/*0000*/ ULONG EndOfJobTimeAction;
	/*0004*/
};

union _JOBOBJECT_ENERGY_TRACKING_STATE {
	/*0000*/ ULONGLONG Value;
	/*0000*/ ULONG UpdateMask;
	/*0004*/ ULONG DesiredState;
	/*0008*/
};

struct _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION {
	/*0000*/ _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
	/*0030*/ _IO_COUNTERS IoInfo;
	/*0060*/ _PROCESS_DISK_COUNTERS DiskIoInfo;
	/*0088*/ ULONGLONG ContextSwitches;
	/*0090*/ _LARGE_INTEGER TotalCycleTime;
	/*0098*/ ULONGLONG ReadyTime;
	/*00a0*/ _PROCESS_ENERGY_VALUES EnergyValues;
	/*01b0*/
};

struct _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION_V2 {
	/*0000*/ _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
	/*0030*/ _IO_COUNTERS IoInfo;
	/*0060*/ _PROCESS_DISK_COUNTERS DiskIoInfo;
	/*0088*/ ULONGLONG ContextSwitches;
	/*0090*/ _LARGE_INTEGER TotalCycleTime;
	/*0098*/ ULONGLONG ReadyTime;
	/*00a0*/ _PROCESS_ENERGY_VALUES EnergyValues;
	/*01b0*/ ULONGLONG KernelWaitTime;
	/*01b8*/ ULONGLONG UserWaitTime;
	/*01c0*/
};

struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
	/*0000*/ _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
	/*0040*/ _IO_COUNTERS IoInfo;
	/*0070*/ ULONGLONG ProcessMemoryLimit;
	/*0078*/ ULONGLONG JobMemoryLimit;
	/*0080*/ ULONGLONG PeakProcessMemoryUsed;
	/*0088*/ ULONGLONG PeakJobMemoryUsed;
	/*0090*/
};

struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION_V2 {
	/*0000*/ _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
	/*0040*/ _IO_COUNTERS IoInfo;
	/*0070*/ ULONGLONG ProcessMemoryLimit;
	/*0078*/ ULONGLONG JobMemoryLimit;
	/*0080*/ ULONGLONG PeakProcessMemoryUsed;
	/*0088*/ ULONGLONG PeakJobMemoryUsed;
	/*0090*/ ULONGLONG JobTotalMemoryLimit;
	/*0098*/
};

struct _JOBOBJECT_FREEZE_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG FreezeOperation : 01; // 0x00000001;
	/*0000*/ ULONG FilterOperation : 01; // 0x00000002;
	/*0000*/ ULONG SwapOperation : 01; // 0x00000004;
	/*0000*/ ULONG Reserved : 29; // 0xfffffff8;
	/*0004*/ UCHAR Freeze;
	/*0005*/ UCHAR Swap;
	/*0006*/ UCHAR Reserved0[0x2];
	/*0008*/ _JOBOBJECT_WAKE_FILTER WakeFilter;
	/*0010*/
};

struct _JOBOBJECT_INTERFERENCE_INFORMATION {
	/*0000*/ ULONGLONG Count;
	/*0008*/
};

struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
	/*0000*/ ULONG ControlFlags;
	/*0008*/ _JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;
	/*0028*/ _JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;
	/*0048*/
};

struct _JOBOBJECT_IO_ATTRIBUTION_STATS {
	/*0000*/ ULONGLONG IoCount;
	/*0008*/ ULONGLONG TotalNonOverlappedQueueTime;
	/*0010*/ ULONGLONG TotalNonOverlappedServiceTime;
	/*0018*/ ULONGLONG TotalSize;
	/*0020*/
};

struct _JOBOBJECT_IO_PRIORITY_LIMIT {
	/*0000*/ _JOBOBJECT_IO_PRIORITY_LIMIT_FLAGS Flags;
	/*0004*/ ULONG Priority;
	/*0008*/
};

enum _JOBOBJECT_IO_PRIORITY_LIMIT_FLAGS {
	JOBOBJECT_IO_PRIORITY_LIMIT_ENABLE = 0x1,
	JOBOBJECT_IO_PRIORITY_LIMIT_VALID_FLAGS = 0x1
};

struct _JOBOBJECT_JOBSET_INFORMATION {
	/*0000*/ ULONG MemberLevel;
	/*0004*/
};

struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
	/*0000*/ ULONG LimitFlags;
	/*0004*/ ULONG ViolationLimitFlags;
	/*0008*/ ULONGLONG IoReadBytes;
	/*0010*/ ULONGLONG IoReadBytesLimit;
	/*0018*/ ULONGLONG IoWriteBytes;
	/*0020*/ ULONGLONG IoWriteBytesLimit;
	/*0028*/ _LARGE_INTEGER PerJobUserTime;
	/*0030*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0038*/ ULONGLONG JobMemory;
	/*0040*/ ULONGLONG JobMemoryLimit;
	/*0048*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*004c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
	/*0050*/
};

struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION_V2 {
	/*0000*/ ULONG LimitFlags;
	/*0004*/ ULONG ViolationLimitFlags;
	/*0008*/ ULONGLONG IoReadBytes;
	/*0010*/ ULONGLONG IoReadBytesLimit;
	/*0018*/ ULONGLONG IoWriteBytes;
	/*0020*/ ULONGLONG IoWriteBytesLimit;
	/*0028*/ _LARGE_INTEGER PerJobUserTime;
	/*0030*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0038*/ ULONGLONG JobMemory;
	/*0040*/ ULONGLONG JobLowMemoryLimit;
	/*0048*/ ULONGLONG JobHighMemoryLimit;
	/*0050*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*0054*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
	/*0058*/
};

struct _JOBOBJECT_MEMORY_USAGE_INFORMATION {
	/*0000*/ ULONGLONG JobMemory;
	/*0008*/ ULONGLONG PeakJobMemoryUsed;
	/*0010*/
};

struct _JOBOBJECT_MEMORY_USAGE_INFORMATION_V2 {
	/*0000*/ _JOBOBJECT_MEMORY_USAGE_INFORMATION BasicInfo;
	/*0010*/ ULONGLONG JobSharedMemory;
	/*0018*/ ULONGLONG Reserved[0x2];
	/*0028*/
};

struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
	/*0000*/ ULONGLONG IoReadBytesLimit;
	/*0008*/ ULONGLONG IoWriteBytesLimit;
	/*0010*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0018*/ ULONGLONG JobMemoryLimit;
	/*0020*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*0024*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
	/*0028*/ ULONG LimitFlags;
	/*0030*/
};

struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_V2 {
	/*0000*/ ULONGLONG IoReadBytesLimit;
	/*0008*/ ULONGLONG IoWriteBytesLimit;
	/*0010*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0018*/ ULONGLONG JobLowMemoryLimit;
	/*0020*/ ULONGLONG JobHighMemoryLimit;
	/*0028*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*002c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
	/*0030*/ ULONG LimitFlags;
	/*0038*/
};

struct _JOBOBJECT_PAGE_PRIORITY_LIMIT {
	/*0000*/ _JOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS Flags;
	/*0004*/ ULONG Priority;
	/*0008*/
};

enum _JOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS {
	JOBOBJECT_PAGE_PRIORITY_LIMIT_ENABLE = 0x1,
	JOBOBJECT_PAGE_PRIORITY_LIMIT_VALID_FLAGS = 0x1
};

enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
	ToleranceLow = 0x1,
	ToleranceMedium = 0x2,
	ToleranceHigh = 0x3
};

enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
	ToleranceIntervalShort = 0x1,
	ToleranceIntervalMedium = 0x2,
	ToleranceIntervalLong = 0x3
};

struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
	/*0000*/ ULONG SecurityLimitFlags;
	/*0008*/ void * JobToken;
	/*0010*/ _TOKEN_GROUPS * SidsToDisable;
	/*0018*/ _TOKEN_PRIVILEGES * PrivilegesToDelete;
	/*0020*/ _TOKEN_GROUPS * RestrictedSids;
	/*0028*/
};

struct _JOBOBJECT_WAKE_FILTER {
	/*0000*/ ULONG HighEdgeFilter;
	/*0004*/ ULONG LowEdgeFilter;
	/*0008*/
};

struct _JOBOBJECT_WAKE_INFORMATION {
	/*0000*/ ULONGLONG NotificationChannel;
	/*0008*/ ULONGLONG WakeCounters[0x7];
	/*0040*/
};

struct _JOBOBJECT_WAKE_INFORMATION_V1 {
	/*0000*/ ULONGLONG NotificationChannel;
	/*0008*/ ULONGLONG WakeCounters[0x4];
	/*0028*/
};

struct _JOB_SET_ARRAY {
	/*0000*/ void * JobHandle;
	/*0008*/ ULONG MemberLevel;
	/*000c*/ ULONG Flags;
	/*0010*/
};

struct _JOURNAL_ABSOLUTE_INFORMATION {
	/*0000*/ _LARGE_INTEGER StartTimeStamp;
	/*0008*/ _LARGE_INTEGER EndTimeStamp;
	/*0010*/ ULONGLONG NumberOfRecords;
	/*0018*/ ULONG FillLevel;
	/*0020*/
};

enum _JOURNAL_CHANGE_INFORMATION_CLASS {
	JournalCreateKey = 0x0,
	JournalDeleteKey = 0x1,
	JournalRenameKey = 0x2,
	JournalSetValue = 0x3,
	JournalDeleteValue = 0x4,
	JournalSetKeySecurity = 0x5,
	JournalSetKeyUserFlags = 0x6,
	JournalSetLastWriteTime = 0x7,
	JournalBeginTransaction = 0x8,
	JournalCommitTransaction = 0x9,
	JournalAbortTransaction = 0xa,
	MaxJournalChangeAction = 0xb
};

struct _JOURNAL_CLIENT_INFORMATION {
	/*0000*/ _LARGE_INTEGER StartTimeStamp;
	/*0008*/ _LARGE_INTEGER CurrentTimeStamp;
	/*0010*/ ULONGLONG RecordsToProcess;
	/*0018*/ ULONG RelativeFillLevel;
	/*0020*/
};

struct _JOURNAL_CREATE_DELETE_KEY_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ ULONG SecurityDescriptorLength;
	/*0030*/ void * SecurityDescriptor;
	/*0038*/ USHORT ClassLength;
	/*0040*/ void * ClassData;
	/*0048*/ UCHAR SymbolicLink;
	/*0050*/
};

enum _JOURNAL_INFORMATION_CLASS {
	JournalAbsoluteInformation = 0x0,
	JournalClientInformation = 0x1,
	MaxJournalInformation = 0x2
};

struct _JOURNAL_RENAME_KEY_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ _UNICODE_STRING KeyKeyName;
	/*0038*/
};

struct _JOURNAL_SET_DELETE_VALUE_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ _UNICODE_STRING ValueName;
	/*0038*/ ULONG OldValueType;
	/*003c*/ ULONG OldDataLength;
	/*0040*/ void * OldData;
	/*0048*/ ULONG NewValueType;
	/*004c*/ ULONG NewDataLength;
	/*0050*/ void * NewData;
	/*0058*/
};

struct _JOURNAL_SET_KEY_LAST_WRITE_TIME_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ _LARGE_INTEGER OldLastWriteTime;
	/*0030*/ _LARGE_INTEGER NewLastWriteTime;
	/*0038*/
};

struct _JOURNAL_SET_KEY_SECURITY_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ ULONG OldSecurityDescriptorLength;
	/*0030*/ void * OldSecurityDescriptor;
	/*0038*/ ULONG NewSecurityDescriptorLength;
	/*0040*/ void * NewSecurityDescriptor;
	/*0048*/
};

struct _JOURNAL_SET_KEY_USER_FLAGS_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ ULONG OldFlags;
	/*002c*/ ULONG NewFlags;
	/*0030*/
};

struct _JOURNAL_TRANSACTION_BOUNDARY_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _GUID TransactionID;
	/*0028*/
};

struct _JUMP_BUFFER {
	/*0000*/ ULONGLONG Frame;
	/*0008*/ ULONGLONG Rbx;
	/*0010*/ ULONGLONG Rsp;
	/*0018*/ ULONGLONG Rbp;
	/*0020*/ ULONGLONG Rsi;
	/*0028*/ ULONGLONG Rdi;
	/*0030*/ ULONGLONG R12;
	/*0038*/ ULONGLONG R13;
	/*0040*/ ULONGLONG R14;
	/*0048*/ ULONGLONG R15;
	/*0050*/ ULONGLONG Rip;
	/*0058*/ ULONG MxCsr;
	/*005c*/ USHORT FpCsr;
	/*005e*/ USHORT Spare;
	/*0060*/ _SETJMP_FLOAT128 Xmm6;
	/*0070*/ _SETJMP_FLOAT128 Xmm7;
	/*0080*/ _SETJMP_FLOAT128 Xmm8;
	/*0090*/ _SETJMP_FLOAT128 Xmm9;
	/*00a0*/ _SETJMP_FLOAT128 Xmm10;
	/*00b0*/ _SETJMP_FLOAT128 Xmm11;
	/*00c0*/ _SETJMP_FLOAT128 Xmm12;
	/*00d0*/ _SETJMP_FLOAT128 Xmm13;
	/*00e0*/ _SETJMP_FLOAT128 Xmm14;
	/*00f0*/ _SETJMP_FLOAT128 Xmm15;
	/*0100*/
};

struct _KAFFINITY_ENUMERATION_CONTEXT {
	/*0000*/ _KAFFINITY_EX * Affinity;
	/*0008*/ ULONGLONG CurrentMask;
	/*0010*/ USHORT CurrentIndex;
	/*0018*/
};

struct _KAFFINITY_EX {
	/*0000*/ USHORT Count;
	/*0002*/ USHORT Size;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG Bitmap[0x1];
	/*0008*/ ULONGLONG StaticBitmap[0x20];
	/*0108*/
};

struct _KCONTINUE_ARGUMENT {
	/*0000*/ _KCONTINUE_TYPE ContinueType;
	/*0004*/ ULONG ContinueFlags;
	/*0008*/ ULONGLONG Reserved[0x2];
	/*0018*/
};

enum _KCONTINUE_TYPE {
	KCONTINUE_UNWIND = 0x0,
	KCONTINUE_RESUME = 0x1,
	KCONTINUE_LONGJUMP = 0x2,
	KCONTINUE_SET = 0x3,
	KCONTINUE_LAST = 0x4,
	KCONTINUE_INVALID = 0x4
};

struct _KCRM_MARSHAL_HEADER {
	/*0000*/ ULONG VersionMajor;
	/*0004*/ ULONG VersionMinor;
	/*0008*/ ULONG NumProtocols;
	/*000c*/ ULONG Unused;
	/*0010*/
};

struct _KCRM_PROTOCOL_BLOB {
	/*0000*/ _GUID ProtocolId;
	/*0010*/ ULONG StaticInfoLength;
	/*0014*/ ULONG TransactionIdInfoLength;
	/*0018*/ ULONG Unused1;
	/*001c*/ ULONG Unused2;
	/*0020*/
};

struct _KCRM_TRANSACTION_BLOB {
	/*0000*/ _GUID UOW;
	/*0010*/ _GUID TmIdentity;
	/*0020*/ ULONG IsolationLevel;
	/*0024*/ ULONG IsolationFlags;
	/*0028*/ ULONG Timeout;
	/*002c*/ WCHAR Description[0x40];
	/*00ac*/
};

struct _KERNEL_CET_CONTEXT {
	/*0000*/ ULONGLONG Ssp;
	/*0008*/ ULONGLONG Rip;
	/*0010*/ USHORT SegCs;
	/*0012*/ USHORT AllFlags;
	/*0012*/ USHORT UseWrss : 01; // 0x0001;
	/*0012*/ USHORT PopShadowStackOne : 01; // 0x0002;
	/*0012*/ USHORT Unused : 14; // 0xfffc;
	/*0014*/ USHORT Fill[0x2];
	/*0018*/
};

struct _KERNEL_USER_TIMES {
	/*0000*/ _LARGE_INTEGER CreateTime;
	/*0008*/ _LARGE_INTEGER ExitTime;
	/*0010*/ _LARGE_INTEGER KernelTime;
	/*0018*/ _LARGE_INTEGER UserTime;
	/*0020*/
};

struct _KEY_BASIC_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastWriteTime;
	/*0008*/ ULONG TitleIndex;
	/*000c*/ ULONG NameLength;
	/*0010*/ WCHAR Name[0x1];
	/*0018*/
};

struct _KEY_CACHED_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastWriteTime;
	/*0008*/ ULONG TitleIndex;
	/*000c*/ ULONG SubKeys;
	/*0010*/ ULONG MaxNameLen;
	/*0014*/ ULONG Values;
	/*0018*/ ULONG MaxValueNameLen;
	/*001c*/ ULONG MaxValueDataLen;
	/*0020*/ ULONG NameLength;
	/*0028*/
};

struct _KEY_CONTROL_FLAGS_INFORMATION {
	/*0000*/ ULONG ControlFlags;
	/*0004*/
};

struct _KEY_EVENT_RECORD {
	
	/*0000*/ INT bKeyDown;
	/*0004*/ USHORT wRepeatCount;
	/*0006*/ USHORT wVirtualKeyCode;
	/*0008*/ USHORT wVirtualScanCode;
	/*000a*/ <unnamed-type-uChar> uChar;
	/*000c*/ ULONG dwControlKeyState;
	/*0010*/
};

struct _KEY_FLAGS_INFORMATION {
	/*0000*/ ULONG Wow64Flags;
	/*0004*/ ULONG KeyFlags;
	/*0008*/ ULONG ControlFlags;
	/*000c*/
};

struct _KEY_FULL_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastWriteTime;
	/*0008*/ ULONG TitleIndex;
	/*000c*/ ULONG ClassOffset;
	/*0010*/ ULONG ClassLength;
	/*0014*/ ULONG SubKeys;
	/*0018*/ ULONG MaxNameLen;
	/*001c*/ ULONG MaxClassLen;
	/*0020*/ ULONG Values;
	/*0024*/ ULONG MaxValueNameLen;
	/*0028*/ ULONG MaxValueDataLen;
	/*002c*/ WCHAR Class[0x1];
	/*0030*/
};

struct _KEY_HANDLE_TAGS_INFORMATION {
	/*0000*/ ULONG HandleTags;
	/*0004*/
};

enum _KEY_INFORMATION_CLASS {
	KeyBasicInformation = 0x0,
	KeyNodeInformation = 0x1,
	KeyFullInformation = 0x2,
	KeyNameInformation = 0x3,
	KeyCachedInformation = 0x4,
	KeyFlagsInformation = 0x5,
	KeyVirtualizationInformation = 0x6,
	KeyHandleTagsInformation = 0x7,
	KeyTrustInformation = 0x8,
	KeyLayerInformation = 0x9,
	MaxKeyInfoClass = 0xa
};

struct _KEY_LAYER_INFORMATION {
	/*0000*/ ULONG IsTombstone : 01; // 0x00000001;
	/*0000*/ ULONG IsSupersedeLocal : 01; // 0x00000002;
	/*0000*/ ULONG IsSupersedeTree : 01; // 0x00000004;
	/*0000*/ ULONG ClassIsInherited : 01; // 0x00000008;
	/*0000*/ ULONG Reserved : 28; // 0xfffffff0;
	/*0004*/
};

struct _KEY_NAME_INFORMATION {
	/*0000*/ ULONG NameLength;
	/*0004*/ WCHAR Name[0x1];
	/*0008*/
};

struct _KEY_NODE_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastWriteTime;
	/*0008*/ ULONG TitleIndex;
	/*000c*/ ULONG ClassOffset;
	/*0010*/ ULONG ClassLength;
	/*0014*/ ULONG NameLength;
	/*0018*/ WCHAR Name[0x1];
	/*0020*/
};

struct _KEY_OPEN_SUBKEYS_INFORMATION {
	/*0000*/ ULONG Count;
	/*0008*/ KEY_PID_ARRAY KeyArray[0x1];
	/*0020*/
};

enum _KEY_SET_INFORMATION_CLASS {
	KeyWriteTimeInformation = 0x0,
	KeyWow64FlagsInformation = 0x1,
	KeyControlFlagsInformation = 0x2,
	KeySetVirtualizationInformation = 0x3,
	KeySetDebugInformation = 0x4,
	KeySetHandleTagsInformation = 0x5,
	KeySetLayerInformation = 0x6,
	MaxKeySetInfoClass = 0x7
};

struct _KEY_SET_LAYER_INFORMATION {
	/*0000*/ ULONG IsTombstone : 01; // 0x00000001;
	/*0000*/ ULONG IsSupersedeLocal : 01; // 0x00000002;
	/*0000*/ ULONG IsSupersedeTree : 01; // 0x00000004;
	/*0000*/ ULONG ClassIsInherited : 01; // 0x00000008;
	/*0000*/ ULONG Reserved : 28; // 0xfffffff0;
	/*0004*/
};

struct _KEY_SET_VIRTUALIZATION_INFORMATION {
	/*0000*/ ULONG VirtualTarget : 01; // 0x00000001;
	/*0000*/ ULONG VirtualStore : 01; // 0x00000002;
	/*0000*/ ULONG VirtualSource : 01; // 0x00000004;
	/*0000*/ ULONG Reserved : 29; // 0xfffffff8;
	/*0004*/
};

struct _KEY_TRUST_INFORMATION {
	/*0000*/ ULONG TrustedKey : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0004*/
};

struct _KEY_VALUE_BASIC_INFORMATION {
	/*0000*/ ULONG TitleIndex;
	/*0004*/ ULONG Type;
	/*0008*/ ULONG NameLength;
	/*000c*/ WCHAR Name[0x1];
	/*0010*/
};

struct _KEY_VALUE_ENTRY {
	/*0000*/ _UNICODE_STRING * ValueName;
	/*0008*/ ULONG DataLength;
	/*000c*/ ULONG DataOffset;
	/*0010*/ ULONG Type;
	/*0018*/
};

struct _KEY_VALUE_FULL_INFORMATION {
	/*0000*/ ULONG TitleIndex;
	/*0004*/ ULONG Type;
	/*0008*/ ULONG DataOffset;
	/*000c*/ ULONG DataLength;
	/*0010*/ ULONG NameLength;
	/*0014*/ WCHAR Name[0x1];
	/*0018*/
};

enum _KEY_VALUE_INFORMATION_CLASS {
	KeyValueBasicInformation = 0x0,
	KeyValueFullInformation = 0x1,
	KeyValuePartialInformation = 0x2,
	KeyValueFullInformationAlign64 = 0x3,
	KeyValuePartialInformationAlign64 = 0x4,
	KeyValueLayerInformation = 0x5,
	MaxKeyValueInfoClass = 0x6
};

struct _KEY_VALUE_LAYER_INFORMATION {
	/*0000*/ ULONG IsTombstone : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0004*/
};

struct _KEY_VALUE_PARTIAL_INFORMATION {
	/*0000*/ ULONG TitleIndex;
	/*0004*/ ULONG Type;
	/*0008*/ ULONG DataLength;
	/*000c*/ UCHAR Data[0x1];
	/*0010*/
};

struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64 {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG DataLength;
	/*0008*/ UCHAR Data[0x1];
	/*000c*/
};

struct _KEY_VIRTUALIZATION_INFORMATION {
	/*0000*/ ULONG VirtualizationCandidate : 01; // 0x00000001;
	/*0000*/ ULONG VirtualizationEnabled : 01; // 0x00000002;
	/*0000*/ ULONG VirtualTarget : 01; // 0x00000004;
	/*0000*/ ULONG VirtualStore : 01; // 0x00000008;
	/*0000*/ ULONG VirtualSource : 01; // 0x00000010;
	/*0000*/ ULONG Reserved : 27; // 0xffffffe0;
	/*0004*/
};

struct _KEY_WOW64_FLAGS_INFORMATION {
	/*0000*/ ULONG UserFlags;
	/*0004*/
};

struct _KEY_WRITE_TIME_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastWriteTime;
	/*0008*/
};

enum _KHETERO_CPU_POLICY {
	KHeteroCpuPolicyAll = 0x0,
	KHeteroCpuPolicyLarge = 0x1,
	KHeteroCpuPolicyLargeOrIdle = 0x2,
	KHeteroCpuPolicySmall = 0x3,
	KHeteroCpuPolicySmallOrIdle = 0x4,
	KHeteroCpuPolicyDynamic = 0x5,
	KHeteroCpuPolicyStaticMax = 0x5,
	KHeteroCpuPolicyBiasedSmall = 0x6,
	KHeteroCpuPolicyBiasedLarge = 0x7,
	KHeteroCpuPolicyDefault = 0x8,
	KHeteroCpuPolicyMax = 0x9
};

struct _KLDR_DATA_TABLE_ENTRY {
	
	/*0000*/ _LIST_ENTRY InLoadOrderLinks;
	/*0010*/ void * ExceptionTable;
	/*0018*/ ULONG ExceptionTableSize;
	/*0020*/ void * GpValue;
	/*0028*/ _NON_PAGED_DEBUG_INFO * NonPagedDebugInfo;
	/*0030*/ void * DllBase;
	/*0038*/ void * EntryPoint;
	/*0040*/ ULONG SizeOfImage;
	/*0048*/ _UNICODE_STRING FullDllName;
	/*0058*/ _UNICODE_STRING BaseDllName;
	/*0068*/ ULONG Flags;
	/*006c*/ USHORT LoadCount;
	/*006e*/ <unnamed-type-u1> u1;
	/*0070*/ void * SectionPointer;
	/*0078*/ ULONG CheckSum;
	/*007c*/ ULONG CoverageSectionSize;
	/*0080*/ void * CoverageSection;
	/*0088*/ void * LoadedImports;
	/*0090*/ void * Spare;
	/*0090*/ _KLDR_DATA_TABLE_ENTRY * NtDataTableEntry;
	/*0098*/ ULONG SizeOfImageNotRounded;
	/*009c*/ ULONG TimeDateStamp;
	/*00a0*/
};

struct _KLDR_DATA_TABLE_ENTRY32 {
	/*0000*/ LIST_ENTRY32 InLoadOrderLinks;
	/*0008*/ ULONG __Undefined1;
	/*000c*/ ULONG __Undefined2;
	/*0010*/ ULONG __Undefined3;
	/*0014*/ ULONG NonPagedDebugInfo;
	/*0018*/ ULONG DllBase;
	/*001c*/ ULONG EntryPoint;
	/*0020*/ ULONG SizeOfImage;
	/*0024*/ _STRING32 FullDllName;
	/*002c*/ _STRING32 BaseDllName;
	/*0034*/ ULONG Flags;
	/*0038*/ USHORT LoadCount;
	/*003a*/ USHORT __Undefined5;
	/*003c*/ ULONG __Undefined6;
	/*0040*/ ULONG CheckSum;
	/*0044*/ ULONG TimeDateStamp;
	/*0048*/
};

struct _KLDR_DATA_TABLE_ENTRY64 {
	/*0000*/ LIST_ENTRY64 InLoadOrderLinks;
	/*0010*/ ULONGLONG __Undefined1;
	/*0018*/ ULONGLONG __Undefined2;
	/*0020*/ ULONGLONG __Undefined3;
	/*0028*/ ULONGLONG NonPagedDebugInfo;
	/*0030*/ ULONGLONG DllBase;
	/*0038*/ ULONGLONG EntryPoint;
	/*0040*/ ULONG SizeOfImage;
	/*0048*/ _STRING64 FullDllName;
	/*0058*/ _STRING64 BaseDllName;
	/*0068*/ ULONG Flags;
	/*006c*/ USHORT LoadCount;
	/*006e*/ USHORT __Undefined5;
	/*0070*/ ULONGLONG __Undefined6;
	/*0078*/ ULONG CheckSum;
	/*007c*/ ULONG __padding1;
	/*0080*/ ULONG TimeDateStamp;
	/*0084*/ ULONG __padding2;
	/*0088*/
};

struct _KLOCK_QUEUE_HANDLE {
	/*0000*/ _KSPIN_LOCK_QUEUE LockQueue;
	/*0010*/ UCHAR OldIrql;
	/*0018*/
};

struct _KNONVOLATILE_CONTEXT_POINTERS {
	/*0000*/ _M128A * FloatingContext[0x10];
	/*0000*/ _M128A * Xmm0;
	/*0008*/ _M128A * Xmm1;
	/*0010*/ _M128A * Xmm2;
	/*0018*/ _M128A * Xmm3;
	/*0020*/ _M128A * Xmm4;
	/*0028*/ _M128A * Xmm5;
	/*0030*/ _M128A * Xmm6;
	/*0038*/ _M128A * Xmm7;
	/*0040*/ _M128A * Xmm8;
	/*0048*/ _M128A * Xmm9;
	/*0050*/ _M128A * Xmm10;
	/*0058*/ _M128A * Xmm11;
	/*0060*/ _M128A * Xmm12;
	/*0068*/ _M128A * Xmm13;
	/*0070*/ _M128A * Xmm14;
	/*0078*/ _M128A * Xmm15;
	/*0080*/ ULONGLONG * IntegerContext[0x10];
	/*0080*/ ULONGLONG * Rax;
	/*0088*/ ULONGLONG * Rcx;
	/*0090*/ ULONGLONG * Rdx;
	/*0098*/ ULONGLONG * Rbx;
	/*00a0*/ ULONGLONG * Rsp;
	/*00a8*/ ULONGLONG * Rbp;
	/*00b0*/ ULONGLONG * Rsi;
	/*00b8*/ ULONGLONG * Rdi;
	/*00c0*/ ULONGLONG * R8;
	/*00c8*/ ULONGLONG * R9;
	/*00d0*/ ULONGLONG * R10;
	/*00d8*/ ULONGLONG * R11;
	/*00e0*/ ULONGLONG * R12;
	/*00e8*/ ULONGLONG * R13;
	/*00f0*/ ULONGLONG * R14;
	/*00f8*/ ULONGLONG * R15;
	/*0100*/
};

struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64 {
	/*0000*/ ULONGLONG * X19;
	/*0008*/ ULONGLONG * X20;
	/*0010*/ ULONGLONG * X21;
	/*0018*/ ULONGLONG * X22;
	/*0020*/ ULONGLONG * X23;
	/*0028*/ ULONGLONG * X24;
	/*0030*/ ULONGLONG * X25;
	/*0038*/ ULONGLONG * X26;
	/*0040*/ ULONGLONG * X27;
	/*0048*/ ULONGLONG * X28;
	/*0050*/ ULONGLONG * Fp;
	/*0058*/ ULONGLONG * Lr;
	/*0060*/ ULONGLONG * D8;
	/*0068*/ ULONGLONG * D9;
	/*0070*/ ULONGLONG * D10;
	/*0078*/ ULONGLONG * D11;
	/*0080*/ ULONGLONG * D12;
	/*0088*/ ULONGLONG * D13;
	/*0090*/ ULONGLONG * D14;
	/*0098*/ ULONGLONG * D15;
	/*00a0*/
};

enum _KPROFILE_SOURCE {
	ProfileTime = 0x0,
	ProfileAlignmentFixup = 0x1,
	ProfileTotalIssues = 0x2,
	ProfilePipelineDry = 0x3,
	ProfileLoadInstructions = 0x4,
	ProfilePipelineFrozen = 0x5,
	ProfileBranchInstructions = 0x6,
	ProfileTotalNonissues = 0x7,
	ProfileDcacheMisses = 0x8,
	ProfileIcacheMisses = 0x9,
	ProfileCacheMisses = 0xa,
	ProfileBranchMispredictions = 0xb,
	ProfileStoreInstructions = 0xc,
	ProfileFpInstructions = 0xd,
	ProfileIntegerInstructions = 0xe,
	Profile2Issue = 0xf,
	Profile3Issue = 0x10,
	Profile4Issue = 0x11,
	ProfileSpecialInstructions = 0x12,
	ProfileTotalCycles = 0x13,
	ProfileIcacheIssues = 0x14,
	ProfileDcacheAccesses = 0x15,
	ProfileMemoryBarrierCycles = 0x16,
	ProfileLoadLinkedIssues = 0x17,
	ProfileMaximum = 0x18
};

struct _KSPIN_LOCK_QUEUE {
	/*0000*/ _KSPIN_LOCK_QUEUE * volatile Next;
	/*0008*/ ULONGLONG * volatile Lock;
	/*0010*/
};

struct _KSYSTEM_TIME {
	/*0000*/ ULONG LowPart;
	/*0004*/ LONG High1Time;
	/*0008*/ LONG High2Time;
	/*000c*/
};

struct _KTMOBJECT_CURSOR {
	/*0000*/ _GUID LastQuery;
	/*0010*/ ULONG ObjectIdCount;
	/*0014*/ _GUID ObjectIds[0x1];
	/*0024*/
};

enum _KTMOBJECT_TYPE {
	KTMOBJECT_TRANSACTION = 0x0,
	KTMOBJECT_TRANSACTION_MANAGER = 0x1,
	KTMOBJECT_RESOURCE_MANAGER = 0x2,
	KTMOBJECT_ENLISTMENT = 0x3,
	KTMOBJECT_INVALID = 0x4
};

struct _KUSER_SHARED_DATA {
	/*0000*/ ULONG TickCountLowDeprecated;
	/*0004*/ ULONG TickCountMultiplier;
	/*0008*/ _KSYSTEM_TIME volatile InterruptTime;
	/*0014*/ _KSYSTEM_TIME volatile SystemTime;
	/*0020*/ _KSYSTEM_TIME volatile TimeZoneBias;
	/*002c*/ USHORT ImageNumberLow;
	/*002e*/ USHORT ImageNumberHigh;
	/*0030*/ WCHAR NtSystemRoot[0x104];
	/*0238*/ ULONG MaxStackTraceDepth;
	/*023c*/ ULONG CryptoExponent;
	/*0240*/ ULONG TimeZoneId;
	/*0244*/ ULONG LargePageMinimum;
	/*0248*/ ULONG AitSamplingValue;
	/*024c*/ ULONG AppCompatFlag;
	/*0250*/ ULONGLONG RNGSeedVersion;
	/*0258*/ ULONG GlobalValidationRunlevel;
	/*025c*/ LONG volatile TimeZoneBiasStamp;
	/*0260*/ ULONG NtBuildNumber;
	/*0264*/ _NT_PRODUCT_TYPE NtProductType;
	/*0268*/ UCHAR ProductTypeIsValid;
	/*0269*/ UCHAR Reserved0[0x1];
	/*026a*/ USHORT NativeProcessorArchitecture;
	/*026c*/ ULONG NtMajorVersion;
	/*0270*/ ULONG NtMinorVersion;
	/*0274*/ UCHAR ProcessorFeatures[0x40];
	/*02b4*/ ULONG Reserved1;
	/*02b8*/ ULONG Reserved3;
	/*02bc*/ ULONG volatile TimeSlip;
	/*02c0*/ _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
	/*02c4*/ ULONG BootId;
	/*02c8*/ _LARGE_INTEGER SystemExpirationDate;
	/*02d0*/ ULONG SuiteMask;
	/*02d4*/ UCHAR KdDebuggerEnabled;
	/*02d5*/ UCHAR MitigationPolicies;
	/*02d5*/ UCHAR NXSupportPolicy : 02; // 0x03;
	/*02d5*/ UCHAR SEHValidationPolicy : 02; // 0x0c;
	/*02d5*/ UCHAR CurDirDevicesSkippedForDlls : 02; // 0x30;
	/*02d5*/ UCHAR Reserved : 02; // 0xc0;
	/*02d6*/ USHORT CyclesPerYield;
	/*02d8*/ ULONG volatile ActiveConsoleId;
	/*02dc*/ ULONG volatile DismountCount;
	/*02e0*/ ULONG ComPlusPackage;
	/*02e4*/ ULONG LastSystemRITEventTickCount;
	/*02e8*/ ULONG NumberOfPhysicalPages;
	/*02ec*/ UCHAR SafeBootMode;
	/*02ed*/ UCHAR VirtualizationFlags;
	/*02ee*/ UCHAR Reserved12[0x2];
	/*02f0*/ ULONG SharedDataFlags;
	/*02f0*/ ULONG DbgErrorPortPresent : 01; // 0x00000001;
	/*02f0*/ ULONG DbgElevationEnabled : 01; // 0x00000002;
	/*02f0*/ ULONG DbgVirtEnabled : 01; // 0x00000004;
	/*02f0*/ ULONG DbgInstallerDetectEnabled : 01; // 0x00000008;
	/*02f0*/ ULONG DbgLkgEnabled : 01; // 0x00000010;
	/*02f0*/ ULONG DbgDynProcessorEnabled : 01; // 0x00000020;
	/*02f0*/ ULONG DbgConsoleBrokerEnabled : 01; // 0x00000040;
	/*02f0*/ ULONG DbgSecureBootEnabled : 01; // 0x00000080;
	/*02f0*/ ULONG DbgMultiSessionSku : 01; // 0x00000100;
	/*02f0*/ ULONG DbgMultiUsersInSessionSku : 01; // 0x00000200;
	/*02f0*/ ULONG DbgStateSeparationEnabled : 01; // 0x00000400;
	/*02f0*/ ULONG SpareBits : 21; // 0xfffff800;
	/*02f4*/ ULONG DataFlagsPad[0x1];
	/*02f8*/ ULONGLONG TestRetInstruction;
	/*0300*/ LONGLONG QpcFrequency;
	/*0308*/ ULONG SystemCall;
	/*030c*/ ULONG Reserved2;
	/*0310*/ ULONGLONG SystemCallPad[0x2];
	/*0320*/ _KSYSTEM_TIME volatile TickCount;
	/*0320*/ ULONGLONG volatile TickCountQuad;
	/*0320*/ ULONG ReservedTickCountOverlay[0x3];
	/*032c*/ ULONG TickCountPad[0x1];
	/*0330*/ ULONG Cookie;
	/*0334*/ ULONG CookiePad[0x1];
	/*0338*/ LONGLONG ConsoleSessionForegroundProcessId;
	/*0340*/ ULONGLONG TimeUpdateLock;
	/*0348*/ ULONGLONG BaselineSystemTimeQpc;
	/*0350*/ ULONGLONG BaselineInterruptTimeQpc;
	/*0358*/ ULONGLONG QpcSystemTimeIncrement;
	/*0360*/ ULONGLONG QpcInterruptTimeIncrement;
	/*0368*/ UCHAR QpcSystemTimeIncrementShift;
	/*0369*/ UCHAR QpcInterruptTimeIncrementShift;
	/*036a*/ USHORT UnparkedProcessorCount;
	/*036c*/ ULONG EnclaveFeatureMask[0x4];
	/*037c*/ ULONG TelemetryCoverageRound;
	/*0380*/ USHORT UserModeGlobalLogger[0x10];
	/*03a0*/ ULONG ImageFileExecutionOptions;
	/*03a4*/ ULONG LangGenerationCount;
	/*03a8*/ ULONGLONG Reserved4;
	/*03b0*/ ULONGLONG volatile InterruptTimeBias;
	/*03b8*/ ULONGLONG volatile QpcBias;
	/*03c0*/ ULONG ActiveProcessorCount;
	/*03c4*/ UCHAR volatile ActiveGroupCount;
	/*03c5*/ UCHAR Reserved9;
	/*03c6*/ USHORT QpcData;
	/*03c6*/ UCHAR volatile QpcBypassEnabled;
	/*03c7*/ UCHAR QpcShift;
	/*03c8*/ _LARGE_INTEGER TimeZoneBiasEffectiveStart;
	/*03d0*/ _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
	/*03d8*/ _XSTATE_CONFIGURATION XState;
	/*0720*/ _KSYSTEM_TIME FeatureConfigurationChangeStamp;
	/*072c*/ ULONG Spare;
	/*0730*/ ULONGLONG UserPointerAuthMask;
	/*0738*/
};

union _LARGE_INTEGER {
	
	/*0000*/ ULONG LowPart;
	/*0004*/ LONG HighPart;
	/*0000*/ <unnamed-type-u> u;
	/*0000*/ LONGLONG QuadPart;
	/*0008*/
};

struct _LAST_EXCEPTION_LOG {
	/*0000*/ _EXCEPTION_RECORD ExceptionRecord;
	/*00a0*/ _CONTEXT ContextRecord;
	/*0570*/ ULONG ControlPc;
	/*0574*/ _EXCEPTION_DISPOSITION Disposition;
	/*0578*/ ULONG HandlerData[0x5];
	/*0590*/
};

struct _LBLOB {
	/*0000*/ ULONGLONG Length;
	/*0008*/ ULONGLONG MaximumLength;
	/*0010*/ UCHAR * Buffer;
	/*0018*/
};

struct _LCN_WEAK_REFERENCE_BUFFER {
	/*0000*/ LONGLONG Lcn;
	/*0008*/ LONGLONG LengthInClusters;
	/*0010*/ ULONG ReferenceCount;
	/*0014*/ USHORT State;
	/*0018*/
};

struct _LCN_WEAK_REFERENCE_CREATE_INPUT_BUFFER {
	/*0000*/ LONGLONG Offset;
	/*0008*/ LONGLONG Length;
	/*0010*/ ULONG Flags;
	/*0014*/ ULONG Reserved;
	/*0018*/
};

enum _LCN_WEAK_REFERENCE_STATE {
	LCN_WEAK_REFERENCE_VALID = 0x1,
	LCN_CHECKSUM_VALID = 0x2
};

struct _LDBL12 {
	/*0000*/ UCHAR ld12[0xc];
	/*000c*/
};

struct _LDOUBLE {
	/*0000*/ UCHAR ld[0xa];
	/*000a*/
};

struct _LDRP_CSLIST {
	/*0000*/ _SINGLE_LIST_ENTRY * Tail;
	/*0008*/
};

struct _LDRP_LOAD_CONTEXT;

struct _LDR_DATA_TABLE_ENTRY {
	/*0000*/ _LIST_ENTRY InLoadOrderLinks;
	/*0010*/ _LIST_ENTRY InMemoryOrderLinks;
	/*0020*/ _LIST_ENTRY InInitializationOrderLinks;
	/*0030*/ void * DllBase;
	/*0038*/ void * EntryPoint;
	/*0040*/ ULONG SizeOfImage;
	/*0048*/ _UNICODE_STRING FullDllName;
	/*0058*/ _UNICODE_STRING BaseDllName;
	/*0068*/ UCHAR FlagGroup[0x4];
	/*0068*/ ULONG Flags;
	/*0068*/ ULONG PackagedBinary : 01; // 0x00000001;
	/*0068*/ ULONG MarkedForRemoval : 01; // 0x00000002;
	/*0068*/ ULONG ImageDll : 01; // 0x00000004;
	/*0068*/ ULONG LoadNotificationsSent : 01; // 0x00000008;
	/*0068*/ ULONG TelemetryEntryProcessed : 01; // 0x00000010;
	/*0068*/ ULONG ProcessStaticImport : 01; // 0x00000020;
	/*0068*/ ULONG InLegacyLists : 01; // 0x00000040;
	/*0068*/ ULONG InIndexes : 01; // 0x00000080;
	/*0068*/ ULONG ShimDll : 01; // 0x00000100;
	/*0068*/ ULONG InExceptionTable : 01; // 0x00000200;
	/*0068*/ ULONG ReservedFlags1 : 02; // 0x00000c00;
	/*0068*/ ULONG LoadInProgress : 01; // 0x00001000;
	/*0068*/ ULONG LoadConfigProcessed : 01; // 0x00002000;
	/*0068*/ ULONG EntryProcessed : 01; // 0x00004000;
	/*0068*/ ULONG ProtectDelayLoad : 01; // 0x00008000;
	/*0068*/ ULONG ReservedFlags3 : 02; // 0x00030000;
	/*0068*/ ULONG DontCallForThreads : 01; // 0x00040000;
	/*0068*/ ULONG ProcessAttachCalled : 01; // 0x00080000;
	/*0068*/ ULONG ProcessAttachFailed : 01; // 0x00100000;
	/*0068*/ ULONG CorDeferredValidate : 01; // 0x00200000;
	/*0068*/ ULONG CorImage : 01; // 0x00400000;
	/*0068*/ ULONG DontRelocate : 01; // 0x00800000;
	/*0068*/ ULONG CorILOnly : 01; // 0x01000000;
	/*0068*/ ULONG ChpeImage : 01; // 0x02000000;
	/*0068*/ ULONG ChpeEmulatorImage : 01; // 0x04000000;
	/*0068*/ ULONG ReservedFlags5 : 01; // 0x08000000;
	/*0068*/ ULONG Redirected : 01; // 0x10000000;
	/*0068*/ ULONG ReservedFlags6 : 02; // 0x60000000;
	/*0068*/ ULONG CompatDatabaseProcessed : 01; // 0x80000000;
	/*006c*/ USHORT ObsoleteLoadCount;
	/*006e*/ USHORT TlsIndex;
	/*0070*/ _LIST_ENTRY HashLinks;
	/*0080*/ ULONG TimeDateStamp;
	/*0088*/ _ACTIVATION_CONTEXT * EntryPointActivationContext;
	/*0090*/ void * Lock;
	/*0098*/ _LDR_DDAG_NODE * DdagNode;
	/*00a0*/ _LIST_ENTRY NodeModuleLink;
	/*00b0*/ _LDRP_LOAD_CONTEXT * LoadContext;
	/*00b8*/ void * ParentDllBase;
	/*00c0*/ void * SwitchBackContext;
	/*00c8*/ _RTL_BALANCED_NODE BaseAddressIndexNode;
	/*00e0*/ _RTL_BALANCED_NODE MappingInfoIndexNode;
	/*00f8*/ ULONGLONG OriginalBase;
	/*0100*/ _LARGE_INTEGER LoadTime;
	/*0108*/ ULONG BaseNameHashValue;
	/*010c*/ _LDR_DLL_LOAD_REASON LoadReason;
	/*0110*/ ULONG ImplicitPathOptions;
	/*0114*/ ULONG ReferenceCount;
	/*0118*/ ULONG DependentLoadFlags;
	/*011c*/ UCHAR SigningLevel;
	/*0120*/ ULONG CheckSum;
	/*0128*/ void * ActivePatchImageBase;
	/*0130*/ _LDR_HOT_PATCH_STATE HotPatchState;
	/*0138*/
};

struct _LDR_DATA_TABLE_ENTRY32 {
	/*0000*/ LIST_ENTRY32 InLoadOrderLinks;
	/*0008*/ LIST_ENTRY32 InMemoryOrderLinks;
	/*0010*/ LIST_ENTRY32 InInitializationOrderLinks;
	/*0018*/ ULONG DllBase;
	/*001c*/ ULONG EntryPoint;
	/*0020*/ ULONG SizeOfImage;
	/*0024*/ _STRING32 FullDllName;
	/*002c*/ _STRING32 BaseDllName;
	/*0034*/ ULONG Flags;
	/*0038*/ USHORT LoadCount;
	/*003a*/ USHORT TlsIndex;
	/*003c*/ LIST_ENTRY32 HashLinks;
	/*003c*/ ULONG SectionPointer;
	/*0040*/ ULONG CheckSum;
	/*0044*/ ULONG TimeDateStamp;
	/*0044*/ ULONG LoadedImports;
	/*0048*/
};

struct _LDR_DATA_TABLE_ENTRY64 {
	/*0000*/ LIST_ENTRY64 InLoadOrderLinks;
	/*0010*/ LIST_ENTRY64 InMemoryOrderLinks;
	/*0020*/ LIST_ENTRY64 InInitializationOrderLinks;
	/*0030*/ ULONGLONG DllBase;
	/*0038*/ ULONGLONG EntryPoint;
	/*0040*/ ULONG SizeOfImage;
	/*0048*/ _STRING64 FullDllName;
	/*0058*/ _STRING64 BaseDllName;
	/*0068*/ ULONG Flags;
	/*006c*/ USHORT LoadCount;
	/*006e*/ USHORT TlsIndex;
	/*0070*/ LIST_ENTRY64 HashLinks;
	/*0070*/ ULONGLONG SectionPointer;
	/*0078*/ ULONG CheckSum;
	/*0080*/ ULONG TimeDateStamp;
	/*0080*/ ULONGLONG LoadedImports;
	/*0088*/
};

struct _LDR_DDAG_NODE {
	/*0000*/ _LIST_ENTRY Modules;
	/*0010*/ _LDR_SERVICE_TAG_RECORD * ServiceTagList;
	/*0018*/ ULONG LoadCount;
	/*001c*/ ULONG LoadWhileUnloadingCount;
	/*0020*/ ULONG LowestLink;
	/*0028*/ _LDRP_CSLIST Dependencies;
	/*0030*/ _LDRP_CSLIST IncomingDependencies;
	/*0038*/ _LDR_DDAG_STATE State;
	/*0040*/ _SINGLE_LIST_ENTRY CondenseLink;
	/*0048*/ ULONG PreorderNumber;
	/*0050*/
};

enum _LDR_DDAG_STATE {
	LdrModulesMerged = 0xfffffffb,
	LdrModulesInitError = 0xfffffffc,
	LdrModulesSnapError = 0xfffffffd,
	LdrModulesUnloaded = 0xfffffffe,
	LdrModulesUnloading = 0xffffffff,
	LdrModulesPlaceHolder = 0x0,
	LdrModulesMapping = 0x1,
	LdrModulesMapped = 0x2,
	LdrModulesWaitingForDependencies = 0x3,
	LdrModulesSnapping = 0x4,
	LdrModulesSnapped = 0x5,
	LdrModulesCondensed = 0x6,
	LdrModulesReadyToInit = 0x7,
	LdrModulesInitializing = 0x8,
	LdrModulesReadyToRun = 0x9
};

struct _LDR_DLL_LOADED_NOTIFICATION_DATA {
	/*0000*/ ULONG Flags;
	/*0008*/ _UNICODE_STRING const * FullDllName;
	/*0010*/ _UNICODE_STRING const * BaseDllName;
	/*0018*/ void * DllBase;
	/*0020*/ ULONG SizeOfImage;
	/*0028*/
};

enum _LDR_DLL_LOAD_REASON {
	LoadReasonStaticDependency = 0x0,
	LoadReasonStaticForwarderDependency = 0x1,
	LoadReasonDynamicForwarderDependency = 0x2,
	LoadReasonDelayloadDependency = 0x3,
	LoadReasonDynamicLoad = 0x4,
	LoadReasonAsImageLoad = 0x5,
	LoadReasonAsDataLoad = 0x6,
	LoadReasonEnclavePrimary = 0x7,
	LoadReasonEnclaveDependency = 0x8,
	LoadReasonPatchImage = 0x9,
	LoadReasonUnknown = 0xffffffff
};

union _LDR_DLL_NOTIFICATION_DATA {
	/*0000*/ _LDR_DLL_LOADED_NOTIFICATION_DATA Loaded;
	/*0000*/ _LDR_DLL_UNLOADED_NOTIFICATION_DATA Unloaded;
	/*0028*/
};

struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA {
	/*0000*/ ULONG Flags;
	/*0008*/ _UNICODE_STRING const * FullDllName;
	/*0010*/ _UNICODE_STRING const * BaseDllName;
	/*0018*/ void * DllBase;
	/*0020*/ ULONG SizeOfImage;
	/*0028*/
};

struct _LDR_ENUM_RESOURCE_ENTRY {
	
	/*0000*/ <unnamed-type-Path> Path[0x3];
	/*0018*/ void * Data;
	/*0020*/ ULONG Size;
	/*0024*/ ULONG Reserved;
	/*0028*/
};

struct _LDR_FAILURE_DATA {
	/*0000*/ LONG Status;
	/*0004*/ WCHAR ImageName[0x20];
	/*0044*/ WCHAR AdditionalInfo[0x20];
	/*0084*/
};

struct _LDR_HOT_PATCH_DATA {
	/*0000*/ ULONG Version;
	/*0008*/ LONG (* PatchLoadLibrary)( WCHAR const * , ULONG * , _UNICODE_STRING const * , void * * );
	/*0010*/ LONG (* PatchGetProcAddress)( void * , _STRING const * , ULONG , void * * );
	/*0018*/
};

enum _LDR_HOT_PATCH_STATE {
	LdrHotPatchBaseImage = 0x0,
	LdrHotPatchNotApplied = 0x1,
	LdrHotPatchAppliedReverse = 0x2,
	LdrHotPatchAppliedForward = 0x3,
	LdrHotPatchFailedToPatch = 0x4,
	LdrHotPatchStateMax = 0x5
};

struct _LDR_IMPORT_CALLBACK_INFO {
	/*0000*/ void (* ImportCallbackRoutine)( void * , CHAR * );
	/*0008*/ void * ImportCallbackParameter;
	/*0010*/
};

struct _LDR_RESLOADER_RET {
	/*0000*/ void * Module;
	/*0008*/ void * DataEntry;
	/*0010*/ void * TargetModule;
	/*0018*/
};

struct _LDR_SECTION_INFO {
	/*0000*/ void * SectionHandle;
	/*0008*/ ULONG DesiredAccess;
	/*0010*/ _OBJECT_ATTRIBUTES * ObjA;
	/*0018*/ ULONG SectionPageProtection;
	/*001c*/ ULONG AllocationAttributes;
	/*0020*/
};

struct _LDR_SERVICE_TAG_RECORD {
	/*0000*/ _LDR_SERVICE_TAG_RECORD * Next;
	/*0008*/ ULONG ServiceTag;
	/*0010*/
};

struct _LDR_VERIFY_IMAGE_INFO {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ _LDR_IMPORT_CALLBACK_INFO CallbackInfo;
	/*0018*/ _LDR_SECTION_INFO SectionInfo;
	/*0038*/ USHORT ImageCharacteristics;
	/*0040*/
};

struct _LEAP_SECOND_DATA;

struct _LEAP_SECOND_DATA_REGISTRY_ENTRY {
	/*0000*/ SHORT Year;
	/*0002*/ SHORT Month;
	/*0004*/ SHORT Day;
	/*0006*/ SHORT Hour;
	/*0008*/ SHORT Flags;
	/*000a*/ SHORT Reserved;
	/*000c*/
};

enum _LEARNING_MODE_LOG_LEVEL {
	LearningModeLogLevelPassive = 0x0,
	LearningModeLogLevelNormalApc = 0x1,
	LearningModeLogLevelSpecialApc = 0x2,
	LearningModeLogLevelMax = 0x3
};

struct _LEARNING_MODE_OBJECT_INFORMATION {
	/*0000*/ _SINGLE_LIST_ENTRY ListEntry;
	/*0008*/ _LEARNING_MODE_LOG_LEVEL LogLevel;
	/*0010*/ _UNICODE_STRING * ObjectType;
	/*0018*/ _UNICODE_STRING * ObjectName;
	/*0020*/ void * RootDirectory;
	/*0028*/ _UNICODE_STRING FullObjectName;
	/*0038*/
};

struct _LINK_TRACKING_INFORMATION {
	/*0000*/ _LINK_TRACKING_INFORMATION_TYPE Type;
	/*0004*/ UCHAR VolumeId[0x10];
	/*0014*/
};

enum _LINK_TRACKING_INFORMATION_TYPE {
	NtfsLinkTrackingInformation = 0x0,
	DfsLinkTrackingInformation = 0x1
};

struct _LIST_ENTRY {
	/*0000*/ _LIST_ENTRY * Flink;
	/*0008*/ _LIST_ENTRY * Blink;
	/*0010*/
};

enum _LMR_QUERY_INFO_CLASS {
	LMRQuerySessionInfo = 0x1
};

struct _LMR_QUERY_INFO_PARAM {
	/*0000*/ _LMR_QUERY_INFO_CLASS Operation;
	/*0004*/
};

struct _LMR_QUERY_SESSION_INFO {
	/*0000*/ ULONGLONG SessionId;
	/*0008*/
};

struct _LOAD_ASDATA_TABLE {
	/*0000*/ void * Module;
	/*0008*/ WCHAR * FilePath;
	/*0010*/ ULONGLONG Size;
	/*0018*/ void * Handle;
	/*0020*/ LONG RefCount;
	/*0028*/ _ACTIVATION_CONTEXT * EntryPointActivationContext;
	/*0030*/
};

struct _LOAD_DLL_DEBUG_INFO {
	/*0000*/ void * hFile;
	/*0008*/ void * lpBaseOfDll;
	/*0010*/ ULONG dwDebugInfoFileOffset;
	/*0014*/ ULONG nDebugInfoSize;
	/*0018*/ void * lpImageName;
	/*0020*/ USHORT fUnicode;
	/*0028*/
};

enum _LOGICAL_PROCESSOR_RELATIONSHIP {
	RelationProcessorCore = 0x0,
	RelationNumaNode = 0x1,
	RelationCache = 0x2,
	RelationProcessorPackage = 0x3,
	RelationGroup = 0x4,
	RelationProcessorDie = 0x5,
	RelationNumaNodeEx = 0x6,
	RelationProcessorModule = 0x7,
	RelationAll = 0xffff
};

struct _LONGDOUBLE {
	/*0000*/ double x;
	/*0008*/
};

struct _LONG_SIZEDARR {
	/*0000*/ ULONG clSize;
	/*0008*/ ULONG * pData;
	/*0010*/
};

struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
	/*0000*/ ULONG OffsetToNext;
	/*0004*/ ULONG Flags;
	/*0008*/ _LARGE_INTEGER Reserved;
	/*0010*/ _LARGE_INTEGER Cluster;
	/*0018*/ WCHAR FileName[0x1];
	/*0020*/
};

struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumberOfClusters;
	/*0008*/ _LARGE_INTEGER Cluster[0x1];
	/*0010*/
};

struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
	/*0000*/ ULONG Offset;
	/*0004*/ ULONG NumberOfMatches;
	/*0008*/ ULONG BufferSizeRequired;
	/*000c*/
};

struct _LPC_CLIENT_DIED_MSG {
	/*0000*/ _PORT_MESSAGE PortMsg;
	/*0028*/ _LARGE_INTEGER CreateTime;
	/*0030*/
};

struct _LPC_UNREGISTER_PROCESS_MSG {
	/*0000*/ _PORT_MESSAGE PortMsg;
	/*0028*/ void * UniqueProcessId;
	/*0030*/
};

enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION {
	MarshalDirectionMarshal = 0x0,
	MarshalDirectionUnmarshal = 0x1
};

struct _LUID {
	/*0000*/ ULONG LowPart;
	/*0004*/ LONG HighPart;
	/*0008*/
};

struct _LUID_AND_ATTRIBUTES {
	/*0000*/ _LUID Luid;
	/*0008*/ ULONG Attributes;
	/*000c*/
};

struct _LUNICODE_STRING {
	/*0000*/ ULONGLONG Length;
	/*0008*/ ULONGLONG MaximumLength;
	/*0010*/ WCHAR * Buffer;
	/*0018*/
};

struct _LUTF8_STRING {
	/*0000*/ ULONGLONG Length;
	/*0008*/ ULONGLONG MaximumLength;
	/*0010*/ UCHAR * Buffer;
	/*0018*/
};

struct _M128A {
	/*0000*/ ULONGLONG Low;
	/*0008*/ LONGLONG High;
	/*0010*/
};

enum _MACHINE_ATTRIBUTES {
	UserEnabled = 0x1,
	KernelEnabled = 0x2,
	Wow64Container = 0x4
};

struct _MALLOC_FREE_STRUCT {
	/*0000*/ void * (* pfnAllocate)( ULONGLONG );
	/*0008*/ void (* pfnFree)( void * );
	/*0010*/
};

struct _MANAGE_HOT_PATCH_APPLY_IMAGE_PATCH {
	
	/*0000*/ ULONG Version;
	/*0004*/ <unnamed-type-Flags> Flags;
	/*0008*/ void * ProcessHandle;
	/*0010*/ void * BaseImageAddress;
	/*0018*/ void * PatchImageAddress;
	/*0020*/
};

struct _MANAGE_HOT_PATCH_CHECK_ENABLED {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _MANAGE_HOT_PATCH_LOAD_PATCH {
	
	/*0000*/ ULONG Version;
	/*0008*/ _UNICODE_STRING PatchPath;
	/*0018*/ <unnamed-type-UserSid> UserSid;
	/*005c*/ _HOT_PATCH_IMAGE_INFO BaseInfo;
	/*0068*/
};

struct _MANAGE_HOT_PATCH_QUERY_ACTIVE_PATCHES {
	/*0000*/ ULONG Version;
	/*0008*/ void * ProcessHandle;
	/*0010*/ ULONG PatchCount;
	/*0018*/ _UNICODE_STRING * PatchPathStrings;
	/*0020*/ _HOT_PATCH_IMAGE_INFO * BaseInfos;
	/*0028*/ ULONG * PatchSequenceNumbers;
	/*0030*/
};

struct _MANAGE_HOT_PATCH_QUERY_PATCHES {
	
	/*0000*/ ULONG Version;
	/*0004*/ <unnamed-type-UserSid> UserSid;
	/*0048*/ ULONG PatchCount;
	/*0050*/ _UNICODE_STRING * PatchPathStrings;
	/*0058*/ _HOT_PATCH_IMAGE_INFO * BaseInfos;
	/*0060*/
};

struct _MANAGE_HOT_PATCH_QUERY_SINGLE_PATCH {
	/*0000*/ ULONG Version;
	/*0008*/ void * ProcessHandle;
	/*0010*/ _HOT_PATCH_IMAGE_INFO BaseInfo;
	/*0018*/ ULONG Flags;
	/*0020*/ _UNICODE_STRING PatchPathString;
	/*0030*/
};

struct _MANAGE_HOT_PATCH_UNLOAD_PATCH {
	
	/*0000*/ ULONG Version;
	/*0004*/ _HOT_PATCH_IMAGE_INFO BaseInfo;
	/*000c*/ <unnamed-type-UserSid> UserSid;
	/*0050*/
};

struct _MANAGE_WRITES_TO_EXECUTABLE_MEMORY {
	/*0000*/ ULONG Version : 08; // 0x000000ff;
	/*0000*/ ULONG ProcessEnableWriteExceptions : 01; // 0x00000100;
	/*0000*/ ULONG ThreadAllowWrites : 01; // 0x00000200;
	/*0000*/ ULONG Spare : 22; // 0xfffffc00;
	/*0008*/ void * KernelWriteToExecutableSignal;
	/*0010*/
};

enum _MANDATORY_LEVEL {
	MandatoryLevelUntrusted = 0x0,
	MandatoryLevelLow = 0x1,
	MandatoryLevelMedium = 0x2,
	MandatoryLevelHigh = 0x3,
	MandatoryLevelSystem = 0x4,
	MandatoryLevelSecureProcess = 0x5,
	MandatoryLevelCount = 0x6
};

struct _MARK_HANDLE_INFO {
	/*0000*/ ULONG UsnSourceInfo;
	/*0000*/ ULONG CopyNumber;
	/*0008*/ void * VolumeHandle;
	/*0010*/ ULONG HandleInfo;
	/*0018*/
};

struct _MARK_HANDLE_INFO32 {
	/*0000*/ ULONG UsnSourceInfo;
	/*0000*/ ULONG CopyNumber;
	/*0004*/ UINT VolumeHandle;
	/*0008*/ ULONG HandleInfo;
	/*000c*/
};

struct _MAT2 {
	/*0000*/ _FIXED eM11;
	/*0004*/ _FIXED eM12;
	/*0008*/ _FIXED eM21;
	/*000c*/ _FIXED eM22;
	/*0010*/
};

struct _MAXVERSIONTESTED_INFO {
	/*0000*/ ULONGLONG MaxVersionTested;
	/*0008*/
};

struct _MCA_EXCEPTION {
	
	/*0000*/ ULONG VersionNumber;
	/*0004*/ MCA_EXCEPTION_TYPE ExceptionType;
	/*0008*/ _LARGE_INTEGER TimeStamp;
	/*0010*/ ULONG ProcessorNumber;
	/*0014*/ ULONG Reserved1;
	/*0018*/ <unnamed-type-u> u;
	/*0038*/ ULONG ExtCnt;
	/*003c*/ ULONG Reserved3;
	/*0040*/ ULONGLONG ExtReg[0x18];
	/*0100*/
};

union _MCI_ADDR {
	/*0000*/ ULONG Address;
	/*0004*/ ULONG Reserved;
	/*0000*/ ULONGLONG QuadPart;
	/*0008*/
};

union _MCI_STATS {
	
	/*0000*/ <unnamed-type-MciStatus> MciStatus;
	/*0000*/ ULONGLONG QuadPart;
	/*0008*/
};

struct _MEMORYSTATUS {
	/*0000*/ ULONG dwLength;
	/*0004*/ ULONG dwMemoryLoad;
	/*0008*/ ULONGLONG dwTotalPhys;
	/*0010*/ ULONGLONG dwAvailPhys;
	/*0018*/ ULONGLONG dwTotalPageFile;
	/*0020*/ ULONGLONG dwAvailPageFile;
	/*0028*/ ULONGLONG dwTotalVirtual;
	/*0030*/ ULONGLONG dwAvailVirtual;
	/*0038*/
};

struct _MEMORYSTATUSEX {
	/*0000*/ ULONG dwLength;
	/*0004*/ ULONG dwMemoryLoad;
	/*0008*/ ULONGLONG ullTotalPhys;
	/*0010*/ ULONGLONG ullAvailPhys;
	/*0018*/ ULONGLONG ullTotalPageFile;
	/*0020*/ ULONGLONG ullAvailPageFile;
	/*0028*/ ULONGLONG ullTotalVirtual;
	/*0030*/ ULONGLONG ullAvailVirtual;
	/*0038*/ ULONGLONG ullAvailExtendedVirtual;
	/*0040*/
};

struct _MEMORY_BAD_IDENTITY_INFORMATION {
	
	
	/*0000*/ <unnamed-type-u1> u1;
	/*0008*/ <unnamed-type-u2> u2;
	/*0010*/
};

struct _MEMORY_BASIC_INFORMATION {
	/*0000*/ void * BaseAddress;
	/*0008*/ void * AllocationBase;
	/*0010*/ ULONG AllocationProtect;
	/*0014*/ USHORT PartitionId;
	/*0018*/ ULONGLONG RegionSize;
	/*0020*/ ULONG State;
	/*0024*/ ULONG Protect;
	/*0028*/ ULONG Type;
	/*0030*/
};

struct _MEMORY_BASIC_INFORMATION32 {
	/*0000*/ ULONG BaseAddress;
	/*0004*/ ULONG AllocationBase;
	/*0008*/ ULONG AllocationProtect;
	/*000c*/ ULONG RegionSize;
	/*0010*/ ULONG State;
	/*0014*/ ULONG Protect;
	/*0018*/ ULONG Type;
	/*001c*/
};

struct _MEMORY_BASIC_INFORMATION64 {
	/*0000*/ ULONGLONG BaseAddress;
	/*0008*/ ULONGLONG AllocationBase;
	/*0010*/ ULONG AllocationProtect;
	/*0014*/ ULONG __alignment1;
	/*0018*/ ULONGLONG RegionSize;
	/*0020*/ ULONG State;
	/*0024*/ ULONG Protect;
	/*0028*/ ULONG Type;
	/*002c*/ ULONG __alignment2;
	/*0030*/
};

struct _MEMORY_COMBINE_INFORMATION {
	/*0000*/ void * Handle;
	/*0008*/ ULONGLONG PagesCombined;
	/*0010*/
};

struct _MEMORY_COMBINE_INFORMATION_EX {
	/*0000*/ void * Handle;
	/*0008*/ ULONGLONG PagesCombined;
	/*0010*/ ULONG Flags;
	/*0018*/
};

struct _MEMORY_COMBINE_INFORMATION_EX2 {
	/*0000*/ void * Handle;
	/*0008*/ ULONGLONG PagesCombined;
	/*0010*/ ULONG Flags;
	/*0018*/ void * ProcessHandle;
	/*0020*/
};

struct _MEMORY_ENCLAVE_IMAGE_INFORMATION {
	/*0000*/ _MEMORY_IMAGE_INFORMATION ImageInfo;
	/*0018*/ UCHAR UniqueID[0x20];
	/*0038*/ UCHAR AuthorID[0x20];
	/*0058*/
};

struct _MEMORY_EXHAUSTION_INFORMATION {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Reserved;
	/*0004*/ _MEMORY_EXHAUSTION_TYPE Type;
	/*0008*/ ULONGLONG Value;
	/*0010*/
};

enum _MEMORY_EXHAUSTION_TYPE {
	MemoryExhaustionTypeFailFastOnCommitFailure = 0x0,
	MemoryExhaustionTypeMax = 0x1
};

struct _MEMORY_FRAME_INFORMATION {
	/*0000*/ ULONGLONG UseDescription : 04; // 0x000000000000000f;
	/*0000*/ ULONGLONG ListDescription : 03; // 0x0000000000000070;
	/*0000*/ ULONGLONG Cold : 01; // 0x0000000000000080;
	/*0000*/ ULONGLONG Pinned : 01; // 0x0000000000000100;
	/*0000*/ ULONGLONG DontUse : 48; // 0x01fffffffffffe00;
	/*0000*/ ULONGLONG Priority : 03; // 0x0e00000000000000;
	/*0000*/ ULONGLONG NonTradeable : 01; // 0x1000000000000000;
	/*0000*/ ULONGLONG Reserved : 03; // 0xe000000000000000;
	/*0008*/
};

struct _MEMORY_IMAGE_INFORMATION {
	/*0000*/ void * ImageBase;
	/*0008*/ ULONGLONG SizeOfImage;
	/*0010*/ ULONG ImageFlags;
	/*0010*/ ULONG ImagePartialMap : 01; // 0x00000001;
	/*0010*/ ULONG ImageNotExecutable : 01; // 0x00000002;
	/*0010*/ ULONG ImageSigningLevel : 04; // 0x0000003c;
	/*0010*/ ULONG Reserved : 26; // 0xffffffc0;
	/*0018*/
};

enum _MEMORY_INFORMATION_CLASS {
	MemoryBasicInformation = 0x0,
	MemoryWorkingSetInformation = 0x1,
	MemoryMappedFilenameInformation = 0x2,
	MemoryRegionInformation = 0x3,
	MemoryWorkingSetExInformation = 0x4,
	MemorySharedCommitInformation = 0x5,
	MemoryImageInformation = 0x6,
	MemoryRegionInformationEx = 0x7,
	MemoryPrivilegedBasicInformation = 0x8,
	MemoryEnclaveImageInformation = 0x9,
	MemoryBasicInformationCapped = 0xa,
	MemoryPhysicalContiguityInformation = 0xb,
	MemoryBadInformation = 0xc,
	MemoryBadInformationAllProcesses = 0xd
};

struct _MEMORY_PARTITION_ATTRIBUTE_INFORMATION {
	/*0000*/ ULONGLONG Flags;
	/*0008*/
};

struct _MEMORY_PARTITION_CHARGE_SHARING_ATTRIBUTES {
	/*0000*/ _MEMORY_PARTITION_CHARGE_SHARING_TYPE Type;
	/*0008*/ ULONGLONG CurrentChargeInPages;
	/*0010*/ ULONGLONG PeakChargeInPages;
	/*0018*/ ULONGLONG ChargeLimitInPages;
	/*0020*/ ULONGLONG ChargeFailures;
	/*0028*/
};

struct _MEMORY_PARTITION_CHARGE_SHARING_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumberOfTypes;
	/*0008*/ _MEMORY_PARTITION_CHARGE_SHARING_ATTRIBUTES PartitionChargeSharing[0x1];
	/*0030*/
};

enum _MEMORY_PARTITION_CHARGE_SHARING_TYPE {
	MemoryPartitionMemorySharingTypeVirtual = 0x0,
	MemoryPartitionMemorySharingTypePhysical = 0x1,
	MemoryPartitionMemorySharingTypeMaximum = 0x2
};

struct _MEMORY_PARTITION_CONFIGURATION_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumaNode;
	/*0008*/ ULONG Channel;
	/*000c*/ ULONG NumberOfNumaNodes;
	/*0010*/ ULONGLONG ResidentAvailablePages;
	/*0018*/ ULONGLONG CommittedPages;
	/*0020*/ ULONGLONG CommitLimit;
	/*0028*/ ULONGLONG PeakCommitment;
	/*0030*/ ULONGLONG TotalNumberOfPages;
	/*0038*/ ULONGLONG AvailablePages;
	/*0040*/ ULONGLONG ZeroPages;
	/*0048*/ ULONGLONG FreePages;
	/*0050*/ ULONGLONG StandbyPages;
	/*0058*/ ULONGLONG StandbyPageCountByPriority[0x8];
	/*0098*/ ULONGLONG RepurposedPagesByPriority[0x8];
	/*00d8*/ ULONGLONG MaximumCommitLimit;
	/*00e0*/ ULONGLONG Reserved;
	/*00e8*/ ULONG PartitionId;
	/*00f0*/
};

struct _MEMORY_PARTITION_CREATE_LARGE_PAGES_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumaNode;
	/*0008*/ ULONGLONG LargePageSize;
	/*0010*/ ULONGLONG NumberOfLargePagesToCreate;
	/*0018*/ ULONGLONG NumberOfLargePagesCreated;
	/*0020*/
};

struct _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE {
	/*0000*/ _MEM_DEDICATED_ATTRIBUTE_TYPE Type;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG Value;
	/*0010*/
};

struct _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG SizeOfInformation;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AttributesOffset;
	/*0010*/ ULONG AttributeCount;
	/*0014*/ ULONG Reserved;
	/*0018*/ ULONGLONG TypeId;
	/*0020*/
};

struct _MEMORY_PARTITION_DEDICATED_MEMORY_OPEN_INFORMATION {
	/*0000*/ ULONGLONG DedicatedMemoryTypeId;
	/*0008*/ ULONG HandleAttributes;
	/*000c*/ ULONG DesiredAccess;
	/*0010*/ void * DedicatedMemoryPartitionHandle;
	/*0018*/
};

struct _MEMORY_PARTITION_INITIAL_ADD_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumberOfRanges;
	/*0008*/ ULONGLONG NumberOfPagesAdded;
	/*0010*/ ULONGLONG DedicatedMemoryAttributes[0x4];
	/*0030*/ _MEMORY_PARTITION_PAGE_RANGE PartitionRanges[0x1];
	/*0040*/
};

struct _MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION {
	
	/*0000*/ <unnamed-type-Flags> Flags;
	/*0004*/ ULONG HandleAttributes;
	/*0008*/ ULONG DesiredAccess;
	/*0010*/ void * LowCommitCondition;
	/*0018*/ void * HighCommitCondition;
	/*0020*/ void * MaximumCommitCondition;
	/*0028*/
};

struct _MEMORY_PARTITION_MEMORY_THRESHOLDS_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0008*/ ULONGLONG LowMemoryThresholdInPages;
	/*0010*/ ULONGLONG HighMemoryThresholdInPages;
	/*0018*/
};

struct _MEMORY_PARTITION_NODE_INFORMATION {
	/*0000*/ ULONG NumaNodeCount;
	/*0004*/ ULONG Flags;
	/*0008*/ _MEMORY_PARTITION_NODE_PAGE_INFORMATION * NodePageInformation;
	/*0010*/
};

struct _MEMORY_PARTITION_NODE_PAGE_INFORMATION {
	/*0000*/ ULONGLONG TotalPageCount;
	/*0008*/ ULONGLONG SmallFreePageCount;
	/*0010*/ ULONGLONG SmallZeroPageCount;
	/*0018*/ ULONGLONG MediumFreePageCount;
	/*0020*/ ULONGLONG MediumZeroPageCount;
	/*0028*/ ULONGLONG LargeFreePageCount;
	/*0030*/ ULONGLONG LargeZeroPageCount;
	/*0038*/ ULONGLONG HugeFreePageCount;
	/*0040*/ ULONGLONG HugeZeroPageCount;
	/*0048*/
};

struct _MEMORY_PARTITION_PAGEFILE_INFORMATION {
	/*0000*/ _UNICODE_STRING PageFileName;
	/*0010*/ _LARGE_INTEGER MinimumSize;
	/*0018*/ _LARGE_INTEGER MaximumSize;
	/*0020*/ ULONG Flags;
	/*0028*/
};

struct _MEMORY_PARTITION_PAGE_COMBINE_INFORMATION {
	/*0000*/ void * StopHandle;
	/*0008*/ ULONG Flags;
	/*0010*/ ULONGLONG TotalNumberOfPages;
	/*0018*/
};

struct _MEMORY_PARTITION_PAGE_RANGE {
	/*0000*/ ULONGLONG StartPage;
	/*0008*/ ULONGLONG NumberOfPages;
	/*0010*/
};

struct _MEMORY_PARTITION_TRANSFER_INFORMATION {
	/*0000*/ ULONGLONG NumberOfPages;
	/*0008*/ ULONG NumaNode;
	/*000c*/ ULONG Flags;
	/*0010*/
};

struct _MEMORY_PHYSICAL_CONTIGUITY_INFORMATION {
	/*0000*/ void * VirtualAddress;
	/*0008*/ ULONGLONG Size;
	/*0010*/ ULONGLONG ContiguityUnitSize;
	/*0018*/ ULONG Flags;
	/*0020*/ _MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION * ContiguityUnitInformation;
	/*0028*/
};

struct _MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION {
	/*0000*/ ULONG State : 02; // 0x00000003;
	/*0000*/ ULONG Reserved : 30; // 0xfffffffc;
	/*0000*/ ULONG AllInformation;
	/*0004*/
};

enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE {
	MemoryNotContiguous = 0x0,
	MemoryAlignedAndContiguous = 0x1,
	MemoryNotResident = 0x2,
	MemoryNotEligibleToMakeContiguous = 0x3,
	MemoryContiguityStateMax = 0x4
};

struct _MEMORY_PRIORITY_INFORMATION {
	/*0000*/ ULONG MemoryPriority;
	/*0004*/
};

struct _MEMORY_RANGE_ENTRY {
	/*0000*/ void * VirtualAddress;
	/*0008*/ ULONGLONG NumberOfBytes;
	/*0010*/
};

struct _MEMORY_REGION_INFORMATION {
	/*0000*/ void * AllocationBase;
	/*0008*/ ULONG AllocationProtect;
	/*000c*/ ULONG RegionType;
	/*000c*/ ULONG Private : 01; // 0x00000001;
	/*000c*/ ULONG MappedDataFile : 01; // 0x00000002;
	/*000c*/ ULONG MappedImage : 01; // 0x00000004;
	/*000c*/ ULONG MappedPageFile : 01; // 0x00000008;
	/*000c*/ ULONG MappedPhysical : 01; // 0x00000010;
	/*000c*/ ULONG DirectMapped : 01; // 0x00000020;
	/*000c*/ ULONG SoftwareEnclave : 01; // 0x00000040;
	/*000c*/ ULONG PageSize64K : 01; // 0x00000080;
	/*000c*/ ULONG PlaceholderReservation : 01; // 0x00000100;
	/*000c*/ ULONG MappedAwe : 01; // 0x00000200;
	/*000c*/ ULONG MappedWriteWatch : 01; // 0x00000400;
	/*000c*/ ULONG PageSizeLarge : 01; // 0x00000800;
	/*000c*/ ULONG PageSizeHuge : 01; // 0x00001000;
	/*000c*/ ULONG Reserved : 19; // 0xffffe000;
	/*0010*/ ULONGLONG RegionSize;
	/*0018*/ ULONGLONG CommitSize;
	/*0020*/ ULONGLONG PartitionId;
	/*0028*/ ULONGLONG NodePreference;
	/*0030*/
};

enum _MEMORY_RESERVE_TYPE {
	MemoryReserveUserApc = 0x0,
	MemoryReserveIoCompletion = 0x1,
	MemoryReserveTypeMax = 0x2
};

enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
	LowMemoryResourceNotification = 0x0,
	HighMemoryResourceNotification = 0x1
};

struct _MEMORY_SCRUB_INFORMATION {
	/*0000*/ void * Handle;
	/*0008*/ ULONGLONG PagesScrubbed;
	/*0010*/
};

struct _MEMORY_SHARED_COMMIT_INFORMATION {
	/*0000*/ ULONGLONG CommitSize;
	/*0008*/
};

struct _MEMORY_WORKING_SET_BLOCK {
	/*0000*/ ULONGLONG Protection : 05; // 0x000000000000001f;
	/*0000*/ ULONGLONG ShareCount : 03; // 0x00000000000000e0;
	/*0000*/ ULONGLONG Shared : 01; // 0x0000000000000100;
	/*0000*/ ULONGLONG Node : 03; // 0x0000000000000e00;
	/*0000*/ ULONGLONG VirtualPage : 52; // 0xfffffffffffff000;
	/*0008*/
};

struct _MEMORY_WORKING_SET_EX_BLOCK {
	
	/*0000*/ ULONGLONG Valid : 01; // 0x0000000000000001;
	/*0000*/ ULONGLONG ShareCount : 03; // 0x000000000000000e;
	/*0000*/ ULONGLONG Win32Protection : 11; // 0x0000000000007ff0;
	/*0000*/ ULONGLONG Shared : 01; // 0x0000000000008000;
	/*0000*/ ULONGLONG Node : 06; // 0x00000000003f0000;
	/*0000*/ ULONGLONG Locked : 01; // 0x0000000000400000;
	/*0000*/ ULONGLONG LargePage : 01; // 0x0000000000800000;
	/*0000*/ ULONGLONG Priority : 03; // 0x0000000007000000;
	/*0000*/ ULONGLONG Reserved : 03; // 0x0000000038000000;
	/*0000*/ ULONGLONG SharedOriginal : 01; // 0x0000000040000000;
	/*0000*/ ULONGLONG Bad : 01; // 0x0000000080000000;
	/*0000*/ ULONGLONG Win32GraphicsProtection : 04; // 0x0000000f00000000;
	/*0000*/ ULONGLONG ReservedUlong : 28; // 0xfffffff000000000;
	/*0000*/ <unnamed-type-Invalid> Invalid;
	/*0008*/
};

struct _MEMORY_WORKING_SET_EX_INFORMATION {
	
	/*0000*/ void * VirtualAddress;
	/*0008*/ <unnamed-type-u1> u1;
	/*0010*/
};

enum _MEMORY_WORKING_SET_EX_LOCATION {
	MemoryLocationInvalid = 0x0,
	MemoryLocationResident = 0x1,
	MemoryLocationPagefile = 0x2,
	MemoryLocationReserved = 0x3
};

struct _MEMORY_WORKING_SET_INFORMATION {
	/*0000*/ ULONGLONG NumberOfEntries;
	/*0008*/ _MEMORY_WORKING_SET_BLOCK WorkingSetInfo[0x1];
	/*0010*/
};

struct _MEM_ADDRESS_REQUIREMENTS {
	/*0000*/ void * LowestStartingAddress;
	/*0008*/ void * HighestEndingAddress;
	/*0010*/ ULONGLONG Alignment;
	/*0018*/
};

enum _MEM_DEDICATED_ATTRIBUTE_TYPE {
	MemDedicatedAttributeReadBandwidth = 0x0,
	MemDedicatedAttributeReadLatency = 0x1,
	MemDedicatedAttributeWriteBandwidth = 0x2,
	MemDedicatedAttributeWriteLatency = 0x3,
	MemDedicatedAttributeMax = 0x4
};

struct _MENU_EVENT_RECORD {
	/*0000*/ UINT dwCommandId;
	/*0004*/
};

struct _MESSAGE_RESOURCE_BLOCK {
	/*0000*/ ULONG LowId;
	/*0004*/ ULONG HighId;
	/*0008*/ ULONG OffsetToEntries;
	/*000c*/
};

struct _MESSAGE_RESOURCE_DATA {
	/*0000*/ ULONG NumberOfBlocks;
	/*0004*/ _MESSAGE_RESOURCE_BLOCK Blocks[0x1];
	/*0010*/
};

struct _MESSAGE_RESOURCE_ENTRY {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT Flags;
	/*0004*/ UCHAR Text[0x1];
	/*0006*/
};

struct _MIDL_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[];
	/*0002*/
};

struct _MIDL_INTERCEPTION_INFO {
	/*0000*/ ULONG Version;
	/*0008*/ UCHAR const * ProcString;
	/*0010*/ USHORT const * ProcFormatOffsetTable;
	/*0018*/ ULONG ProcCount;
	/*0020*/ UCHAR const * TypeString;
	/*0028*/
};

struct _MIDL_INTERFACE_METHOD_PROPERTIES {
	/*0000*/ USHORT MethodCount;
	/*0008*/ _MIDL_METHOD_PROPERTY_MAP const * const * MethodProperties;
	/*0010*/
};

struct _MIDL_METHOD_PROPERTY {
	/*0000*/ ULONG Id;
	/*0008*/ ULONGLONG Value;
	/*0010*/
};

struct _MIDL_METHOD_PROPERTY_MAP {
	/*0000*/ ULONG Count;
	/*0008*/ _MIDL_METHOD_PROPERTY const * Properties;
	/*0010*/
};

struct _MIDL_SERVER_INFO_ {
	/*0000*/ _MIDL_STUB_DESC const * pStubDesc;
	/*0008*/ LONG (* const * DispatchTable)();
	/*0010*/ UCHAR const * ProcString;
	/*0018*/ USHORT const * FmtStringOffset;
	/*0020*/ void (* const * ThunkTable)( _MIDL_STUB_MESSAGE * );
	/*0028*/ _RPC_SYNTAX_IDENTIFIER * pTransferSyntax;
	/*0030*/ ULONGLONG nCount;
	/*0038*/ _MIDL_SYNTAX_INFO * pSyntaxInfo;
	/*0040*/
};

struct _MIDL_STUBLESS_PROXY_INFO {
	/*0000*/ _MIDL_STUB_DESC const * pStubDesc;
	/*0008*/ UCHAR const * ProcFormatString;
	/*0010*/ USHORT const * FormatStringOffset;
	/*0018*/ _RPC_SYNTAX_IDENTIFIER * pTransferSyntax;
	/*0020*/ ULONGLONG nCount;
	/*0028*/ _MIDL_SYNTAX_INFO * pSyntaxInfo;
	/*0030*/
};

struct _MIDL_STUB_DESC {
	
	/*0000*/ void * RpcInterfaceInformation;
	/*0008*/ void * (* pfnAllocate)( ULONGLONG );
	/*0010*/ void (* pfnFree)( void * );
	union {
		/*0018*/ void * * pAutoHandle;
		/*0018*/ void * * pPrimitiveHandle;
		/*0018*/ __GENERIC_BINDING_INFO * pGenericBindingInfo;
		/*0020*/
	} IMPLICIT_HANDLE_INFO;
	/*0020*/ void (* const * apfnNdrRundownRoutines)( void * );
	/*0028*/ _GENERIC_BINDING_ROUTINE_PAIR const * aGenericBindingRoutinePairs;
	/*0030*/ void (* const * apfnExprEval)( _MIDL_STUB_MESSAGE * );
	/*0038*/ _XMIT_ROUTINE_QUINTUPLE const * aXmitQuintuple;
	/*0040*/ UCHAR const * pFormatTypes;
	/*0048*/ INT fCheckBounds;
	/*004c*/ ULONG Version;
	/*0050*/ _MALLOC_FREE_STRUCT * pMallocFreeStruct;
	/*0058*/ LONG MIDLVersion;
	/*0060*/ _COMM_FAULT_OFFSETS const * CommFaultOffsets;
	/*0068*/ _USER_MARSHAL_ROUTINE_QUADRUPLE const * aUserMarshalQuadruple;
	/*0070*/ void (* const * NotifyRoutineTable)();
	/*0078*/ ULONGLONG mFlags;
	/*0080*/ _NDR_CS_ROUTINES const * CsRoutineTables;
	/*0088*/ void * ProxyServerInfo;
	/*0090*/ _NDR_EXPR_DESC const * pExprInfo;
	/*0098*/
};

struct _MIDL_STUB_MESSAGE {
	/*0000*/ _RPC_MESSAGE * RpcMsg;
	/*0008*/ UCHAR * Buffer;
	/*0010*/ UCHAR * BufferStart;
	/*0018*/ UCHAR * BufferEnd;
	/*0020*/ UCHAR * BufferMark;
	/*0028*/ ULONG BufferLength;
	/*002c*/ ULONG MemorySize;
	/*0030*/ UCHAR * Memory;
	/*0038*/ UCHAR IsClient;
	/*0039*/ UCHAR Pad;
	/*003a*/ USHORT uFlags2;
	/*003c*/ INT ReuseBuffer;
	/*0040*/ NDR_ALLOC_ALL_NODES_CONTEXT * pAllocAllNodesContext;
	/*0048*/ NDR_POINTER_QUEUE_STATE * pPointerQueueState;
	/*0050*/ INT IgnoreEmbeddedPointers;
	/*0058*/ UCHAR * PointerBufferMark;
	/*0060*/ UCHAR CorrDespIncrement;
	/*0061*/ UCHAR uFlags;
	/*0062*/ USHORT UniquePtrCount;
	/*0068*/ ULONGLONG MaxCount;
	/*0070*/ ULONG Offset;
	/*0074*/ ULONG ActualCount;
	/*0078*/ void * (* pfnAllocate)( ULONGLONG );
	/*0080*/ void (* pfnFree)( void * );
	/*0088*/ UCHAR * StackTop;
	/*0090*/ UCHAR * pPresentedType;
	/*0098*/ UCHAR * pTransmitType;
	/*00a0*/ void * SavedHandle;
	/*00a8*/ _MIDL_STUB_DESC const * StubDesc;
	/*00b0*/ _FULL_PTR_XLAT_TABLES * FullPtrXlatTables;
	/*00b8*/ ULONG FullPtrRefId;
	/*00bc*/ ULONG PointerLength;
	/*00c0*/ INT fInDontFree : 01; // 0x00000001;
	/*00c0*/ INT fDontCallFreeInst : 01; // 0x00000002;
	/*00c0*/ INT fUnused1 : 01; // 0x00000004;
	/*00c0*/ INT fHasReturn : 01; // 0x00000008;
	/*00c0*/ INT fHasExtensions : 01; // 0x00000010;
	/*00c0*/ INT fHasNewCorrDesc : 01; // 0x00000020;
	/*00c0*/ INT fIsIn : 01; // 0x00000040;
	/*00c0*/ INT fIsOut : 01; // 0x00000080;
	/*00c0*/ INT fIsOicf : 01; // 0x00000100;
	/*00c0*/ INT fBufferValid : 01; // 0x00000200;
	/*00c0*/ INT fHasMemoryValidateCallback : 01; // 0x00000400;
	/*00c0*/ INT fInFree : 01; // 0x00000800;
	/*00c0*/ INT fNeedMCCP : 01; // 0x00001000;
	/*00c0*/ INT fUnused2 : 03; // 0x0000e000;
	/*00c0*/ INT fUnused3 : 16; // 0xffff0000;
	/*00c4*/ ULONG dwDestContext;
	/*00c8*/ void * pvDestContext;
	/*00d0*/ _NDR_SCONTEXT * * SavedContextHandles;
	/*00d8*/ LONG ParamNumber;
	/*00e0*/ IRpcChannelBuffer * pRpcChannelBuffer;
	/*00e8*/ ARRAY_INFO * pArrayInfo;
	/*00f0*/ ULONG * SizePtrCountArray;
	/*00f8*/ ULONG * SizePtrOffsetArray;
	/*0100*/ ULONG * SizePtrLengthArray;
	/*0108*/ void * pArgQueue;
	/*0110*/ ULONG dwStubPhase;
	/*0118*/ void * LowStackMark;
	/*0120*/ _NDR_ASYNC_MESSAGE * pAsyncMsg;
	/*0128*/ _NDR_CORRELATION_INFO * pCorrInfo;
	/*0130*/ UCHAR * pCorrMemory;
	/*0138*/ void * pMemoryList;
	/*0140*/ LONGLONG pCSInfo;
	/*0148*/ UCHAR * ConformanceMark;
	/*0150*/ UCHAR * VarianceMark;
	/*0158*/ LONGLONG Unused;
	/*0160*/ _NDR_PROC_CONTEXT * pContext;
	/*0168*/ void * ContextHandleHash;
	/*0170*/ void * pUserMarshalList;
	/*0178*/ LONGLONG Reserved51_3;
	/*0180*/ LONGLONG Reserved51_4;
	/*0188*/ LONGLONG Reserved51_5;
	/*0190*/
};

struct _MIDL_SYNTAX_INFO {
	/*0000*/ _RPC_SYNTAX_IDENTIFIER TransferSyntax;
	/*0018*/ RPC_DISPATCH_TABLE * DispatchTable;
	/*0020*/ UCHAR const * ProcString;
	/*0028*/ USHORT const * FmtStringOffset;
	/*0030*/ UCHAR const * TypeString;
	/*0038*/ void const * aUserMarshalQuadruple;
	/*0040*/ _MIDL_INTERFACE_METHOD_PROPERTIES const * pMethodProperties;
	/*0048*/ ULONGLONG pReserved2;
	/*0050*/
};

struct _MIDL_WINRT_TYPE_SERIALIZATION_INFO {
	/*0000*/ ULONG Version;
	/*0008*/ UCHAR const * TypeFormatString;
	/*0010*/ USHORT FormatStringSize;
	/*0012*/ USHORT TypeOffset;
	/*0018*/ _MIDL_STUB_DESC const * StubDesc;
	/*0020*/
};

struct _MMPFN_IDENTITY {
	
	
	/*0000*/ <unnamed-type-u1> u1;
	/*0008*/ ULONGLONG PageFrameIndex;
	/*0010*/ <unnamed-type-u2> u2;
	/*0018*/
};

enum _MM_BROADCAST32_ENUM {
	_MM_BROADCAST32_NONE = 0x0,
	_MM_BROADCAST_1X16 = 0x1,
	_MM_BROADCAST_4X16 = 0x2
};

enum _MM_BROADCAST64_ENUM {
	_MM_BROADCAST64_NONE = 0x0,
	_MM_BROADCAST_1X8 = 0x1,
	_MM_BROADCAST_4X8 = 0x2
};

enum _MM_CMPINT_ENUM {
	_MM_CMPINT_EQ = 0x0,
	_MM_CMPINT_LT = 0x1,
	_MM_CMPINT_LE = 0x2,
	_MM_CMPINT_UNUSED = 0x3,
	_MM_CMPINT_NE = 0x4,
	_MM_CMPINT_NLT = 0x5,
	_MM_CMPINT_NLE = 0x6
};

union _MM_ETW_PAGE_EXTRA_INFO {
	
	
	/*0000*/ <unnamed-type-e1> e1;
	/*0000*/ <unnamed-type-e2> e2;
	/*0000*/ ULONGLONG ProtoPte;
	/*0000*/ void * VirtualAddress;
	/*0008*/
};

struct _MM_ETW_PAGE_INFO {
	/*0000*/ _MMPFN_IDENTITY PfnIdentity;
	/*0018*/
};

struct _MM_ETW_PAGE_INFO_EX {
	/*0000*/ _MM_ETW_PAGE_INFO PageInfo;
	/*0018*/ _MM_ETW_PAGE_EXTRA_INFO Info;
	/*0020*/
};

struct _MM_ETW_WORKING_SET_PFN_RUNDOWN {
	/*0000*/ ULONGLONG ProcessId;
	/*0008*/ ULONGLONG EntryCount;
	/*0010*/ _MM_ETW_PAGE_INFO_EX WorkingSetInfo[0x1];
	/*0030*/
};

enum _MM_ETW_WORKING_SET_TYPE {
	MmEtwWorkingSetTypeUser = 0x0,
	MmEtwWorkingSetTypeSession = 0x1,
	MmEtwWorkingSetTypeSystem = 0x2,
	MmEtwWorkingSetTypeMaximum = 0x3
};

enum _MM_EXP_ADJ_ENUM {
	_MM_EXPADJ_NONE = 0x0,
	_MM_EXPADJ_4 = 0x1,
	_MM_EXPADJ_5 = 0x2,
	_MM_EXPADJ_8 = 0x3,
	_MM_EXPADJ_16 = 0x4,
	_MM_EXPADJ_24 = 0x5,
	_MM_EXPADJ_31 = 0x6,
	_MM_EXPADJ_32 = 0x7
};

enum _MM_FIXUPRESULT_ENUM {
	_MM_FIXUP_NO_CHANGE = 0x0,
	_MM_FIXUP_NEG_INF = 0x1,
	_MM_FIXUP_NEG_ZERO = 0x2,
	_MM_FIXUP_POS_ZERO = 0x3,
	_MM_FIXUP_POS_INF = 0x4,
	_MM_FIXUP_NAN = 0x5,
	_MM_FIXUP_MAX_FLOAT = 0x6,
	_MM_FIXUP_MIN_FLOAT = 0x7
};

enum _MM_INDEX_SCALE_ENUM {
	_MM_SCALE_1 = 0x1,
	_MM_SCALE_2 = 0x2,
	_MM_SCALE_4 = 0x4,
	_MM_SCALE_8 = 0x8
};

enum _MM_MANTISSA_NORM_ENUM {
	_MM_MANT_NORM_1_2 = 0x0,
	_MM_MANT_NORM_p5_2 = 0x1,
	_MM_MANT_NORM_p5_1 = 0x2,
	_MM_MANT_NORM_p75_1p5 = 0x3
};

enum _MM_MANTISSA_SIGN_ENUM {
	_MM_MANT_SIGN_src = 0x0,
	_MM_MANT_SIGN_zero = 0x1,
	_MM_MANT_SIGN_nan = 0x2
};

enum _MM_PERM_ENUM {
	_MM_PERM_AAAA = 0x0,
	_MM_PERM_AAAB = 0x1,
	_MM_PERM_AAAC = 0x2,
	_MM_PERM_AAAD = 0x3,
	_MM_PERM_AABA = 0x4,
	_MM_PERM_AABB = 0x5,
	_MM_PERM_AABC = 0x6,
	_MM_PERM_AABD = 0x7,
	_MM_PERM_AACA = 0x8,
	_MM_PERM_AACB = 0x9,
	_MM_PERM_AACC = 0xa,
	_MM_PERM_AACD = 0xb,
	_MM_PERM_AADA = 0xc,
	_MM_PERM_AADB = 0xd,
	_MM_PERM_AADC = 0xe,
	_MM_PERM_AADD = 0xf,
	_MM_PERM_ABAA = 0x10,
	_MM_PERM_ABAB = 0x11,
	_MM_PERM_ABAC = 0x12,
	_MM_PERM_ABAD = 0x13,
	_MM_PERM_ABBA = 0x14,
	_MM_PERM_ABBB = 0x15,
	_MM_PERM_ABBC = 0x16,
	_MM_PERM_ABBD = 0x17,
	_MM_PERM_ABCA = 0x18,
	_MM_PERM_ABCB = 0x19,
	_MM_PERM_ABCC = 0x1a,
	_MM_PERM_ABCD = 0x1b,
	_MM_PERM_ABDA = 0x1c,
	_MM_PERM_ABDB = 0x1d,
	_MM_PERM_ABDC = 0x1e,
	_MM_PERM_ABDD = 0x1f,
	_MM_PERM_ACAA = 0x20,
	_MM_PERM_ACAB = 0x21,
	_MM_PERM_ACAC = 0x22,
	_MM_PERM_ACAD = 0x23,
	_MM_PERM_ACBA = 0x24,
	_MM_PERM_ACBB = 0x25,
	_MM_PERM_ACBC = 0x26,
	_MM_PERM_ACBD = 0x27,
	_MM_PERM_ACCA = 0x28,
	_MM_PERM_ACCB = 0x29,
	_MM_PERM_ACCC = 0x2a,
	_MM_PERM_ACCD = 0x2b,
	_MM_PERM_ACDA = 0x2c,
	_MM_PERM_ACDB = 0x2d,
	_MM_PERM_ACDC = 0x2e,
	_MM_PERM_ACDD = 0x2f,
	_MM_PERM_ADAA = 0x30,
	_MM_PERM_ADAB = 0x31,
	_MM_PERM_ADAC = 0x32,
	_MM_PERM_ADAD = 0x33,
	_MM_PERM_ADBA = 0x34,
	_MM_PERM_ADBB = 0x35,
	_MM_PERM_ADBC = 0x36,
	_MM_PERM_ADBD = 0x37,
	_MM_PERM_ADCA = 0x38,
	_MM_PERM_ADCB = 0x39,
	_MM_PERM_ADCC = 0x3a,
	_MM_PERM_ADCD = 0x3b,
	_MM_PERM_ADDA = 0x3c,
	_MM_PERM_ADDB = 0x3d,
	_MM_PERM_ADDC = 0x3e,
	_MM_PERM_ADDD = 0x3f,
	_MM_PERM_BAAA = 0x40,
	_MM_PERM_BAAB = 0x41,
	_MM_PERM_BAAC = 0x42,
	_MM_PERM_BAAD = 0x43,
	_MM_PERM_BABA = 0x44,
	_MM_PERM_BABB = 0x45,
	_MM_PERM_BABC = 0x46,
	_MM_PERM_BABD = 0x47,
	_MM_PERM_BACA = 0x48,
	_MM_PERM_BACB = 0x49,
	_MM_PERM_BACC = 0x4a,
	_MM_PERM_BACD = 0x4b,
	_MM_PERM_BADA = 0x4c,
	_MM_PERM_BADB = 0x4d,
	_MM_PERM_BADC = 0x4e,
	_MM_PERM_BADD = 0x4f,
	_MM_PERM_BBAA = 0x50,
	_MM_PERM_BBAB = 0x51,
	_MM_PERM_BBAC = 0x52,
	_MM_PERM_BBAD = 0x53,
	_MM_PERM_BBBA = 0x54,
	_MM_PERM_BBBB = 0x55,
	_MM_PERM_BBBC = 0x56,
	_MM_PERM_BBBD = 0x57,
	_MM_PERM_BBCA = 0x58,
	_MM_PERM_BBCB = 0x59,
	_MM_PERM_BBCC = 0x5a,
	_MM_PERM_BBCD = 0x5b,
	_MM_PERM_BBDA = 0x5c,
	_MM_PERM_BBDB = 0x5d,
	_MM_PERM_BBDC = 0x5e,
	_MM_PERM_BBDD = 0x5f,
	_MM_PERM_BCAA = 0x60,
	_MM_PERM_BCAB = 0x61,
	_MM_PERM_BCAC = 0x62,
	_MM_PERM_BCAD = 0x63,
	_MM_PERM_BCBA = 0x64,
	_MM_PERM_BCBB = 0x65,
	_MM_PERM_BCBC = 0x66,
	_MM_PERM_BCBD = 0x67,
	_MM_PERM_BCCA = 0x68,
	_MM_PERM_BCCB = 0x69,
	_MM_PERM_BCCC = 0x6a,
	_MM_PERM_BCCD = 0x6b,
	_MM_PERM_BCDA = 0x6c,
	_MM_PERM_BCDB = 0x6d,
	_MM_PERM_BCDC = 0x6e,
	_MM_PERM_BCDD = 0x6f,
	_MM_PERM_BDAA = 0x70,
	_MM_PERM_BDAB = 0x71,
	_MM_PERM_BDAC = 0x72,
	_MM_PERM_BDAD = 0x73,
	_MM_PERM_BDBA = 0x74,
	_MM_PERM_BDBB = 0x75,
	_MM_PERM_BDBC = 0x76,
	_MM_PERM_BDBD = 0x77,
	_MM_PERM_BDCA = 0x78,
	_MM_PERM_BDCB = 0x79,
	_MM_PERM_BDCC = 0x7a,
	_MM_PERM_BDCD = 0x7b,
	_MM_PERM_BDDA = 0x7c,
	_MM_PERM_BDDB = 0x7d,
	_MM_PERM_BDDC = 0x7e,
	_MM_PERM_BDDD = 0x7f,
	_MM_PERM_CAAA = 0x80,
	_MM_PERM_CAAB = 0x81,
	_MM_PERM_CAAC = 0x82,
	_MM_PERM_CAAD = 0x83,
	_MM_PERM_CABA = 0x84,
	_MM_PERM_CABB = 0x85,
	_MM_PERM_CABC = 0x86,
	_MM_PERM_CABD = 0x87,
	_MM_PERM_CACA = 0x88,
	_MM_PERM_CACB = 0x89,
	_MM_PERM_CACC = 0x8a,
	_MM_PERM_CACD = 0x8b,
	_MM_PERM_CADA = 0x8c,
	_MM_PERM_CADB = 0x8d,
	_MM_PERM_CADC = 0x8e,
	_MM_PERM_CADD = 0x8f,
	_MM_PERM_CBAA = 0x90,
	_MM_PERM_CBAB = 0x91,
	_MM_PERM_CBAC = 0x92,
	_MM_PERM_CBAD = 0x93,
	_MM_PERM_CBBA = 0x94,
	_MM_PERM_CBBB = 0x95,
	_MM_PERM_CBBC = 0x96,
	_MM_PERM_CBBD = 0x97,
	_MM_PERM_CBCA = 0x98,
	_MM_PERM_CBCB = 0x99,
	_MM_PERM_CBCC = 0x9a,
	_MM_PERM_CBCD = 0x9b,
	_MM_PERM_CBDA = 0x9c,
	_MM_PERM_CBDB = 0x9d,
	_MM_PERM_CBDC = 0x9e,
	_MM_PERM_CBDD = 0x9f,
	_MM_PERM_CCAA = 0xa0,
	_MM_PERM_CCAB = 0xa1,
	_MM_PERM_CCAC = 0xa2,
	_MM_PERM_CCAD = 0xa3,
	_MM_PERM_CCBA = 0xa4,
	_MM_PERM_CCBB = 0xa5,
	_MM_PERM_CCBC = 0xa6,
	_MM_PERM_CCBD = 0xa7,
	_MM_PERM_CCCA = 0xa8,
	_MM_PERM_CCCB = 0xa9,
	_MM_PERM_CCCC = 0xaa,
	_MM_PERM_CCCD = 0xab,
	_MM_PERM_CCDA = 0xac,
	_MM_PERM_CCDB = 0xad,
	_MM_PERM_CCDC = 0xae,
	_MM_PERM_CCDD = 0xaf,
	_MM_PERM_CDAA = 0xb0,
	_MM_PERM_CDAB = 0xb1,
	_MM_PERM_CDAC = 0xb2,
	_MM_PERM_CDAD = 0xb3,
	_MM_PERM_CDBA = 0xb4,
	_MM_PERM_CDBB = 0xb5,
	_MM_PERM_CDBC = 0xb6,
	_MM_PERM_CDBD = 0xb7,
	_MM_PERM_CDCA = 0xb8,
	_MM_PERM_CDCB = 0xb9,
	_MM_PERM_CDCC = 0xba,
	_MM_PERM_CDCD = 0xbb,
	_MM_PERM_CDDA = 0xbc,
	_MM_PERM_CDDB = 0xbd,
	_MM_PERM_CDDC = 0xbe,
	_MM_PERM_CDDD = 0xbf,
	_MM_PERM_DAAA = 0xc0,
	_MM_PERM_DAAB = 0xc1,
	_MM_PERM_DAAC = 0xc2,
	_MM_PERM_DAAD = 0xc3,
	_MM_PERM_DABA = 0xc4,
	_MM_PERM_DABB = 0xc5,
	_MM_PERM_DABC = 0xc6,
	_MM_PERM_DABD = 0xc7,
	_MM_PERM_DACA = 0xc8,
	_MM_PERM_DACB = 0xc9,
	_MM_PERM_DACC = 0xca,
	_MM_PERM_DACD = 0xcb,
	_MM_PERM_DADA = 0xcc,
	_MM_PERM_DADB = 0xcd,
	_MM_PERM_DADC = 0xce,
	_MM_PERM_DADD = 0xcf,
	_MM_PERM_DBAA = 0xd0,
	_MM_PERM_DBAB = 0xd1,
	_MM_PERM_DBAC = 0xd2,
	_MM_PERM_DBAD = 0xd3,
	_MM_PERM_DBBA = 0xd4,
	_MM_PERM_DBBB = 0xd5,
	_MM_PERM_DBBC = 0xd6,
	_MM_PERM_DBBD = 0xd7,
	_MM_PERM_DBCA = 0xd8,
	_MM_PERM_DBCB = 0xd9,
	_MM_PERM_DBCC = 0xda,
	_MM_PERM_DBCD = 0xdb,
	_MM_PERM_DBDA = 0xdc,
	_MM_PERM_DBDB = 0xdd,
	_MM_PERM_DBDC = 0xde,
	_MM_PERM_DBDD = 0xdf,
	_MM_PERM_DCAA = 0xe0,
	_MM_PERM_DCAB = 0xe1,
	_MM_PERM_DCAC = 0xe2,
	_MM_PERM_DCAD = 0xe3,
	_MM_PERM_DCBA = 0xe4,
	_MM_PERM_DCBB = 0xe5,
	_MM_PERM_DCBC = 0xe6,
	_MM_PERM_DCBD = 0xe7,
	_MM_PERM_DCCA = 0xe8,
	_MM_PERM_DCCB = 0xe9,
	_MM_PERM_DCCC = 0xea,
	_MM_PERM_DCCD = 0xeb,
	_MM_PERM_DCDA = 0xec,
	_MM_PERM_DCDB = 0xed,
	_MM_PERM_DCDC = 0xee,
	_MM_PERM_DCDD = 0xef,
	_MM_PERM_DDAA = 0xf0,
	_MM_PERM_DDAB = 0xf1,
	_MM_PERM_DDAC = 0xf2,
	_MM_PERM_DDAD = 0xf3,
	_MM_PERM_DDBA = 0xf4,
	_MM_PERM_DDBB = 0xf5,
	_MM_PERM_DDBC = 0xf6,
	_MM_PERM_DDBD = 0xf7,
	_MM_PERM_DDCA = 0xf8,
	_MM_PERM_DDCB = 0xf9,
	_MM_PERM_DDCC = 0xfa,
	_MM_PERM_DDCD = 0xfb,
	_MM_PERM_DDDA = 0xfc,
	_MM_PERM_DDDB = 0xfd,
	_MM_PERM_DDDC = 0xfe,
	_MM_PERM_DDDD = 0xff
};

enum _MM_ROUND_MODE_ENUM {
	_MM_ROUND_MODE_NEAREST = 0x0,
	_MM_ROUND_MODE_DOWN = 0x1,
	_MM_ROUND_MODE_UP = 0x2,
	_MM_ROUND_MODE_TOWARD_ZERO = 0x3,
	_MM_ROUND_MODE_DEFAULT = 0x4,
	_MM_ROUND_MODE_NO_EXC = 0x8
};

struct _MODEMDEVCAPS {
	/*0000*/ ULONG dwActualSize;
	/*0004*/ ULONG dwRequiredSize;
	/*0008*/ ULONG dwDevSpecificOffset;
	/*000c*/ ULONG dwDevSpecificSize;
	/*0010*/ ULONG dwModemProviderVersion;
	/*0014*/ ULONG dwModemManufacturerOffset;
	/*0018*/ ULONG dwModemManufacturerSize;
	/*001c*/ ULONG dwModemModelOffset;
	/*0020*/ ULONG dwModemModelSize;
	/*0024*/ ULONG dwModemVersionOffset;
	/*0028*/ ULONG dwModemVersionSize;
	/*002c*/ ULONG dwDialOptions;
	/*0030*/ ULONG dwCallSetupFailTimer;
	/*0034*/ ULONG dwInactivityTimeout;
	/*0038*/ ULONG dwSpeakerVolume;
	/*003c*/ ULONG dwSpeakerMode;
	/*0040*/ ULONG dwModemOptions;
	/*0044*/ ULONG dwMaxDTERate;
	/*0048*/ ULONG dwMaxDCERate;
	/*004c*/ UCHAR abVariablePortion[0x1];
	/*0050*/
};

struct _MODEMSETTINGS {
	/*0000*/ ULONG dwActualSize;
	/*0004*/ ULONG dwRequiredSize;
	/*0008*/ ULONG dwDevSpecificOffset;
	/*000c*/ ULONG dwDevSpecificSize;
	/*0010*/ ULONG dwCallSetupFailTimer;
	/*0014*/ ULONG dwInactivityTimeout;
	/*0018*/ ULONG dwSpeakerVolume;
	/*001c*/ ULONG dwSpeakerMode;
	/*0020*/ ULONG dwPreferredModemOptions;
	/*0024*/ ULONG dwNegotiatedModemOptions;
	/*0028*/ ULONG dwNegotiatedDCERate;
	/*002c*/ UCHAR abVariablePortion[0x1];
	/*0030*/
};

enum _MONITOR_DISPLAY_STATE {
	PowerMonitorOff = 0x0,
	PowerMonitorOn = 0x1,
	PowerMonitorDim = 0x2
};

struct _MOUSE_EVENT_RECORD {
	/*0000*/ _COORD dwMousePosition;
	/*0004*/ ULONG dwButtonState;
	/*0008*/ ULONG dwControlKeyState;
	/*000c*/ ULONG dwEventFlags;
	/*0010*/
};

struct _MOVE_FILE_DATA32 {
	/*0000*/ UINT FileHandle;
	/*0008*/ _LARGE_INTEGER StartingVcn;
	/*0010*/ _LARGE_INTEGER StartingLcn;
	/*0018*/ ULONG ClusterCount;
	/*0020*/
};

struct _MUICCENTRY {
	/*0000*/ UINT lCultureNameOffset;
	/*0004*/ UINT ulCultureID;
	/*0008*/ ULONG ulLanguageType;
	/*0010*/ _MUICCENTRY * pNeutralCulture;
	/*0018*/ _MUICCENTRY * lBaseLanguageIndices[0x4];
	/*0038*/ INT lParentLanguageIndices[0x4];
	/*0048*/
};

struct _MUICCHEADER {
	/*0000*/ UINT ulMaxStringsSize;
	/*0004*/ UINT ulSizeStrings;
	/*0008*/ UINT ulMaxNumInstalledCultures;
	/*000c*/ UINT ulNumInstalledCultures;
	/*0010*/ UINT ulMaxNumUnverifiedCultures;
	/*0014*/ UINT ulNumUnverifiedCultures;
	/*0018*/
};

struct _MUILANGCFGLIST {
	/*0000*/ UINT TotalSize;
	/*0004*/ USHORT NumLanguages;
	/*0006*/ USHORT MaxNumLanguages;
	/*0008*/ _MUILANGCFGNODE * LanguageConfigs;
	/*0010*/
};

struct _MUILANGCFGNODE {
	/*0000*/ SHORT LangSpec;
	/*0002*/ USHORT FallbackTypes;
	/*0004*/ USHORT Reserved;
	/*0006*/ SHORT FallbackSpecs[0x3];
	/*000c*/
};

struct _MUILANGINFO {
	/*0000*/ USHORT Flags;
	/*0002*/ USHORT Reserved;
	/*0004*/ USHORT LangId;
	/*0006*/ SHORT LangNameIndex;
	/*0008*/ USHORT FallbackTypes;
	/*000a*/ SHORT NeutralLangSpec;
	/*000c*/ SHORT FallbackSpecs[0x4];
	/*0014*/ SHORT AlternateCodePage[0x4];
	/*001c*/
};

struct _MUILANGLIST {
	/*0000*/ UINT TotalSize;
	/*0004*/ USHORT NumLanguages;
	/*0006*/ USHORT MaxNumLanguages;
	/*0008*/ UCHAR bUseUseMachineConfigList;
	/*0010*/ _MUIREGISTRYINFO * RegInfo;
	/*0018*/ _MUILANGLISTNODE * Languages;
	/*0020*/ ULONGLONG ullMask;
	/*0028*/ UINT uConsoleFlag;
	/*002c*/ WCHAR Checksum[0xa];
	/*0040*/
};

struct _MUILANGLISTNODE {
	/*0000*/ USHORT LanguageType;
	/*0002*/ USHORT Reserved;
	/*0004*/ SHORT LanguageSpec;
	/*0006*/
};

struct _MUILANGUAGES {
	/*0000*/ UINT TotalSize;
	/*0004*/ USHORT MaxNumLanguages;
	/*0006*/ USHORT NumLanguages;
	/*0008*/ USHORT NumInstalledLanguages;
	/*0010*/ _MUILANGINFO * LangInfos;
	/*0018*/
};

struct _MUIREGISTRYINFO {
	/*0000*/ UINT Owned;
	/*0004*/ USHORT InstallLanguageFallback[0x4];
	/*000c*/ ULONG Generation;
	/*0010*/ ULONG ProcessGeneration;
	/*0018*/ _MUILANGUAGES * Installed;
	/*0020*/ _MUISTRINGPOOL * Strings;
	/*0028*/ _MUILANGCFGLIST * MachineConfig;
	/*0030*/ _MUILANGCFGLIST * UserConfig;
	/*0038*/ _MUILANGLIST * MachinePreferred;
	/*0040*/ _MUILANGLIST * UserPreferred;
	/*0048*/ _MUILANGLIST * ProcessPreferred;
	/*0050*/ _MUILANGLIST * MergedUser;
	/*0058*/ _MUILANGLIST * MergedMachine;
	/*0060*/ _MUILANGLIST * MergedFallback;
	/*0068*/ _MUIREGISTRYINFO * PrevRegInfo;
	/*0070*/ ULONG MUI_Locked;
	/*0074*/ ULONG MUI_SE;
	/*0078*/ ULONG MUI_NumberAllowed;
	/*0080*/ WCHAR * MUI_AllowedLanguage;
	/*0088*/ WCHAR * MUI_InstalledSKU;
	/*0090*/ ULONG cbInstalledSKU;
	/*0094*/ ULONG cbAllowedLanguage;
	/*0098*/ WCHAR * MUI_DisallowedLanguage;
	/*00a0*/ ULONG cbDisallowedLanguage;
	/*00a8*/
};

struct _MUISTRINGPOOL {
	/*0000*/ UINT TotalSize;
	/*0004*/ USHORT MaxNumStrings;
	/*0006*/ USHORT NumStrings;
	/*0008*/ USHORT MaxNumCharsInPool;
	/*000a*/ USHORT NumCharsInPool;
	/*0010*/ SHORT * Strings;
	/*0018*/ WCHAR * Pool;
	/*0020*/
};

struct _MULTI_TIME {
	/*0000*/ _LARGE_INTEGER Qpc;
	/*0008*/ _LARGE_INTEGER HostQpc;
	/*0010*/ LONGLONG SystemTime;
	/*0018*/
};

struct _MUTANT_BASIC_INFORMATION {
	/*0000*/ LONG CurrentCount;
	/*0004*/ UCHAR OwnedByCaller;
	/*0005*/ UCHAR AbandonedState;
	/*0008*/
};

enum _MUTANT_INFORMATION_CLASS {
	MutantBasicInformation = 0x0,
	MutantOwnerInformation = 0x1
};

struct _MUTANT_OWNER_INFORMATION {
	/*0000*/ _CLIENT_ID ClientId;
	/*0010*/
};

struct _Mbstatet {
	/*0000*/ ULONG _Wchar;
	/*0004*/ USHORT _Byte;
	/*0006*/ USHORT _State;
	/*0008*/
};

struct _NDR64_CONSTANT_IID_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR Flags;
	/*0002*/ USHORT Reserved;
	/*0004*/ _GUID Guid;
	/*0014*/
};

struct _NDR64_PARAM_FLAGS {
	/*0000*/ USHORT MustSize : 01; // 0x0001;
	/*0000*/ USHORT MustFree : 01; // 0x0002;
	/*0000*/ USHORT IsPipe : 01; // 0x0004;
	/*0000*/ USHORT IsIn : 01; // 0x0008;
	/*0000*/ USHORT IsOut : 01; // 0x0010;
	/*0000*/ USHORT IsReturn : 01; // 0x0020;
	/*0000*/ USHORT IsBasetype : 01; // 0x0040;
	/*0000*/ USHORT IsByValue : 01; // 0x0080;
	/*0000*/ USHORT IsSimpleRef : 01; // 0x0100;
	/*0000*/ USHORT IsDontCallFreeInst : 01; // 0x0200;
	/*0000*/ USHORT SaveForAsyncFinish : 01; // 0x0400;
	/*0000*/ USHORT IsPartialIgnore : 01; // 0x0800;
	/*0000*/ USHORT IsForceAllocate : 01; // 0x1000;
	/*0000*/ USHORT Reserved : 02; // 0x6000;
	/*0000*/ USHORT UseCache : 01; // 0x8000;
	/*0002*/
};

struct _NDR64_PARAM_FORMAT {
	/*0000*/ void const * Type;
	/*0008*/ _NDR64_PARAM_FLAGS Attributes;
	/*000a*/ USHORT Reserved;
	/*000c*/ UINT StackOffset;
	/*0010*/
};

struct _NDR64_POINTER_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR Flags;
	/*0002*/ USHORT Reserved;
	/*0008*/ void const * Pointee;
	/*0010*/
};

struct _NDR64_PROC_FORMAT {
	/*0000*/ UINT Flags;
	/*0004*/ UINT StackSize;
	/*0008*/ UINT ConstantClientBufferSize;
	/*000c*/ UINT ConstantServerBufferSize;
	/*0010*/ USHORT RpcFlags;
	/*0012*/ USHORT FloatDoubleMask;
	/*0014*/ USHORT NumberOfParams;
	/*0016*/ USHORT ExtensionSize;
	/*0018*/
};

struct _NDR_ASYNC_MESSAGE;

struct _NDR_CORRELATION_INFO;

struct _NDR_CS_ROUTINES {
	/*0000*/ _NDR_CS_SIZE_CONVERT_ROUTINES * pSizeConvertRoutines;
	/*0008*/ void (* * pTagGettingRoutines)( void * , INT , ULONG * , ULONG * , ULONG * , ULONG * );
	/*0010*/
};

struct _NDR_CS_SIZE_CONVERT_ROUTINES {
	/*0000*/ void (* pfnNetSize)( void * , ULONG , ULONG , _IDL_CS_CONVERT * , ULONG * , ULONG * );
	/*0008*/ void (* pfnToNetCs)( void * , ULONG , void * , ULONG , UCHAR * , ULONG * , ULONG * );
	/*0010*/ void (* pfnLocalSize)( void * , ULONG , ULONG , _IDL_CS_CONVERT * , ULONG * , ULONG * );
	/*0018*/ void (* pfnFromNetCs)( void * , ULONG , UCHAR * , ULONG , ULONG , void * , ULONG * , ULONG * );
	/*0020*/
};

struct _NDR_EXPR_DESC {
	/*0000*/ USHORT const * pOffset;
	/*0008*/ UCHAR const * pFormatExpr;
	/*0010*/
};

struct _NDR_PROC_CONTEXT;

struct _NDR_SCONTEXT {
	/*0000*/ void * pad[0x2];
	/*0010*/ void * userContext;
	/*0018*/
};

struct _NDR_USER_MARSHAL_INFO {
	/*0000*/ ULONG InformationLevel;
	/*0008*/ _NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
	/*0058*/
};

struct _NDR_USER_MARSHAL_INFO_LEVEL1 {
	/*0000*/ void * Buffer;
	/*0008*/ ULONG BufferSize;
	/*0010*/ void * (* pfnAllocate)( ULONGLONG );
	/*0018*/ void (* pfnFree)( void * );
	/*0020*/ IRpcChannelBuffer * pRpcChannelBuffer;
	/*0028*/ ULONGLONG Reserved[0x5];
	/*0050*/
};

struct _NETCONNECTINFOSTRUCT {
	/*0000*/ ULONG cbStructure;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG dwSpeed;
	/*000c*/ ULONG dwDelay;
	/*0010*/ ULONG dwOptDataSize;
	/*0014*/
};

struct _NETINFOSTRUCT {
	/*0000*/ ULONG cbStructure;
	/*0004*/ ULONG dwProviderVersion;
	/*0008*/ ULONG dwStatus;
	/*000c*/ ULONG dwCharacteristics;
	/*0010*/ ULONGLONG dwHandle;
	/*0018*/ USHORT wNetType;
	/*001c*/ ULONG dwPrinters;
	/*0020*/ ULONG dwDrives;
	/*0028*/
};

struct _NETRESOURCEA {
	/*0000*/ ULONG dwScope;
	/*0004*/ ULONG dwType;
	/*0008*/ ULONG dwDisplayType;
	/*000c*/ ULONG dwUsage;
	/*0010*/ CHAR * lpLocalName;
	/*0018*/ CHAR * lpRemoteName;
	/*0020*/ CHAR * lpComment;
	/*0028*/ CHAR * lpProvider;
	/*0030*/
};

struct _NETRESOURCEW {
	/*0000*/ ULONG dwScope;
	/*0004*/ ULONG dwType;
	/*0008*/ ULONG dwDisplayType;
	/*000c*/ ULONG dwUsage;
	/*0010*/ WCHAR * lpLocalName;
	/*0018*/ WCHAR * lpRemoteName;
	/*0020*/ WCHAR * lpComment;
	/*0028*/ WCHAR * lpProvider;
	/*0030*/
};

struct _NETWORK_APP_INSTANCE_EA {
	/*0000*/ _GUID AppInstanceID;
	/*0010*/ ULONG CsvFlags;
	/*0014*/
};

struct _NLSTABLEINFO {
	/*0000*/ _CPTABLEINFO OemTableInfo;
	/*0040*/ _CPTABLEINFO AnsiTableInfo;
	/*0080*/ USHORT * UpperCaseTable;
	/*0088*/ USHORT * LowerCaseTable;
	/*0090*/
};

struct _NON_PAGED_DEBUG_INFO {
	/*0000*/ USHORT Signature;
	/*0002*/ USHORT Flags;
	/*0004*/ ULONG Size;
	/*0008*/ USHORT Machine;
	/*000a*/ USHORT Characteristics;
	/*000c*/ ULONG TimeDateStamp;
	/*0010*/ ULONG CheckSum;
	/*0014*/ ULONG SizeOfImage;
	/*0018*/ ULONGLONG ImageBase;
	/*0020*/
};

enum _NORM_FORM {
	NormalizationOther = 0x0,
	NormalizationC = 0x1,
	NormalizationD = 0x2,
	NormalizationKC = 0x5,
	NormalizationKD = 0x6
};

struct _NTFS_STATISTICS {
	
	
	
	
	
	/*0000*/ ULONG LogFileFullExceptions;
	/*0004*/ ULONG OtherExceptions;
	/*0008*/ ULONG MftReads;
	/*000c*/ ULONG MftReadBytes;
	/*0010*/ ULONG MftWrites;
	/*0014*/ ULONG MftWriteBytes;
	/*0018*/ <unnamed-type-MftWritesUserLevel> MftWritesUserLevel;
	/*0020*/ USHORT MftWritesFlushForLogFileFull;
	/*0022*/ USHORT MftWritesLazyWriter;
	/*0024*/ USHORT MftWritesUserRequest;
	/*0028*/ ULONG Mft2Writes;
	/*002c*/ ULONG Mft2WriteBytes;
	/*0030*/ <unnamed-type-Mft2WritesUserLevel> Mft2WritesUserLevel;
	/*0038*/ USHORT Mft2WritesFlushForLogFileFull;
	/*003a*/ USHORT Mft2WritesLazyWriter;
	/*003c*/ USHORT Mft2WritesUserRequest;
	/*0040*/ ULONG RootIndexReads;
	/*0044*/ ULONG RootIndexReadBytes;
	/*0048*/ ULONG RootIndexWrites;
	/*004c*/ ULONG RootIndexWriteBytes;
	/*0050*/ ULONG BitmapReads;
	/*0054*/ ULONG BitmapReadBytes;
	/*0058*/ ULONG BitmapWrites;
	/*005c*/ ULONG BitmapWriteBytes;
	/*0060*/ USHORT BitmapWritesFlushForLogFileFull;
	/*0062*/ USHORT BitmapWritesLazyWriter;
	/*0064*/ USHORT BitmapWritesUserRequest;
	/*0066*/ <unnamed-type-BitmapWritesUserLevel> BitmapWritesUserLevel;
	/*006c*/ ULONG MftBitmapReads;
	/*0070*/ ULONG MftBitmapReadBytes;
	/*0074*/ ULONG MftBitmapWrites;
	/*0078*/ ULONG MftBitmapWriteBytes;
	/*007c*/ USHORT MftBitmapWritesFlushForLogFileFull;
	/*007e*/ USHORT MftBitmapWritesLazyWriter;
	/*0080*/ USHORT MftBitmapWritesUserRequest;
	/*0082*/ <unnamed-type-MftBitmapWritesUserLevel> MftBitmapWritesUserLevel;
	/*008c*/ ULONG UserIndexReads;
	/*0090*/ ULONG UserIndexReadBytes;
	/*0094*/ ULONG UserIndexWrites;
	/*0098*/ ULONG UserIndexWriteBytes;
	/*009c*/ ULONG LogFileReads;
	/*00a0*/ ULONG LogFileReadBytes;
	/*00a4*/ ULONG LogFileWrites;
	/*00a8*/ ULONG LogFileWriteBytes;
	/*00ac*/ <unnamed-type-Allocate> Allocate;
	/*00d4*/ ULONG DiskResourcesExhausted;
	/*00d8*/
};

struct _NTFS_STATISTICS_EX {
	
	
	
	
	
	/*0000*/ ULONG LogFileFullExceptions;
	/*0004*/ ULONG OtherExceptions;
	/*0008*/ ULONGLONG MftReads;
	/*0010*/ ULONGLONG MftReadBytes;
	/*0018*/ ULONGLONG MftWrites;
	/*0020*/ ULONGLONG MftWriteBytes;
	/*0028*/ <unnamed-type-MftWritesUserLevel> MftWritesUserLevel;
	/*0038*/ ULONG MftWritesFlushForLogFileFull;
	/*003c*/ ULONG MftWritesLazyWriter;
	/*0040*/ ULONG MftWritesUserRequest;
	/*0048*/ ULONGLONG Mft2Writes;
	/*0050*/ ULONGLONG Mft2WriteBytes;
	/*0058*/ <unnamed-type-Mft2WritesUserLevel> Mft2WritesUserLevel;
	/*0068*/ ULONG Mft2WritesFlushForLogFileFull;
	/*006c*/ ULONG Mft2WritesLazyWriter;
	/*0070*/ ULONG Mft2WritesUserRequest;
	/*0078*/ ULONGLONG RootIndexReads;
	/*0080*/ ULONGLONG RootIndexReadBytes;
	/*0088*/ ULONGLONG RootIndexWrites;
	/*0090*/ ULONGLONG RootIndexWriteBytes;
	/*0098*/ ULONGLONG BitmapReads;
	/*00a0*/ ULONGLONG BitmapReadBytes;
	/*00a8*/ ULONGLONG BitmapWrites;
	/*00b0*/ ULONGLONG BitmapWriteBytes;
	/*00b8*/ ULONG BitmapWritesFlushForLogFileFull;
	/*00bc*/ ULONG BitmapWritesLazyWriter;
	/*00c0*/ ULONG BitmapWritesUserRequest;
	/*00c4*/ <unnamed-type-BitmapWritesUserLevel> BitmapWritesUserLevel;
	/*00d8*/ ULONGLONG MftBitmapReads;
	/*00e0*/ ULONGLONG MftBitmapReadBytes;
	/*00e8*/ ULONGLONG MftBitmapWrites;
	/*00f0*/ ULONGLONG MftBitmapWriteBytes;
	/*00f8*/ ULONG MftBitmapWritesFlushForLogFileFull;
	/*00fc*/ ULONG MftBitmapWritesLazyWriter;
	/*0100*/ ULONG MftBitmapWritesUserRequest;
	/*0104*/ <unnamed-type-MftBitmapWritesUserLevel> MftBitmapWritesUserLevel;
	/*0118*/ ULONGLONG UserIndexReads;
	/*0120*/ ULONGLONG UserIndexReadBytes;
	/*0128*/ ULONGLONG UserIndexWrites;
	/*0130*/ ULONGLONG UserIndexWriteBytes;
	/*0138*/ ULONGLONG LogFileReads;
	/*0140*/ ULONGLONG LogFileReadBytes;
	/*0148*/ ULONGLONG LogFileWrites;
	/*0150*/ ULONGLONG LogFileWriteBytes;
	/*0158*/ <unnamed-type-Allocate> Allocate;
	/*0190*/ ULONG DiskResourcesExhausted;
	/*0198*/ ULONGLONG VolumeTrimCount;
	/*01a0*/ ULONGLONG VolumeTrimTime;
	/*01a8*/ ULONGLONG VolumeTrimByteCount;
	/*01b0*/ ULONGLONG FileLevelTrimCount;
	/*01b8*/ ULONGLONG FileLevelTrimTime;
	/*01c0*/ ULONGLONG FileLevelTrimByteCount;
	/*01c8*/ ULONGLONG VolumeTrimSkippedCount;
	/*01d0*/ ULONGLONG VolumeTrimSkippedByteCount;
	/*01d8*/ ULONGLONG NtfsFillStatInfoFromMftRecordCalledCount;
	/*01e0*/ ULONGLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
	/*01e8*/ ULONGLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;
	/*01f0*/
};

struct _NTPSS_MEMORY_BULK_INFORMATION {
	/*0000*/ ULONG QueryFlags;
	/*0004*/ ULONG NumberOfEntries;
	/*0008*/ void * NextValidAddress;
	/*0010*/
};

enum _NT_PRODUCT_TYPE {
	NtProductWinNt = 0x1,
	NtProductLanManNt = 0x2,
	NtProductServer = 0x3
};

enum _NT_READ_FLAGS {
	NT_READ_FLAG_NONE = 0x0
};

struct _NT_TIB {
	/*0000*/ _EXCEPTION_REGISTRATION_RECORD * ExceptionList;
	/*0008*/ void * StackBase;
	/*0010*/ void * StackLimit;
	/*0018*/ void * SubSystemTib;
	/*0020*/ void * FiberData;
	/*0020*/ ULONG Version;
	/*0028*/ void * ArbitraryUserPointer;
	/*0030*/ _NT_TIB * Self;
	/*0038*/
};

struct _NT_TIB32 {
	/*0000*/ ULONG ExceptionList;
	/*0004*/ ULONG StackBase;
	/*0008*/ ULONG StackLimit;
	/*000c*/ ULONG SubSystemTib;
	/*0010*/ ULONG FiberData;
	/*0010*/ ULONG Version;
	/*0014*/ ULONG ArbitraryUserPointer;
	/*0018*/ ULONG Self;
	/*001c*/
};

struct _NT_TIB64 {
	/*0000*/ ULONGLONG ExceptionList;
	/*0008*/ ULONGLONG StackBase;
	/*0010*/ ULONGLONG StackLimit;
	/*0018*/ ULONGLONG SubSystemTib;
	/*0020*/ ULONGLONG FiberData;
	/*0020*/ ULONG Version;
	/*0028*/ ULONGLONG ArbitraryUserPointer;
	/*0030*/ ULONGLONG Self;
	/*0038*/
};

enum _NT_WRITE_FLAGS {
	NT_WRITE_FLAG_NONE = 0x0,
	NT_WRITE_FLAG_WRITE_THROUGH = 0x1
};

struct _NUMA_NODE_RELATIONSHIP {
	/*0000*/ ULONG NodeNumber;
	/*0004*/ UCHAR Reserved[0x12];
	/*0016*/ USHORT GroupCount;
	/*0018*/ _GROUP_AFFINITY GroupMask;
	/*0018*/ _GROUP_AFFINITY GroupMasks[0x1];
	/*0028*/
};

struct _NV_MEMORY_RANGE {
	/*0000*/ void * BaseAddress;
	/*0008*/ ULONGLONG Length;
	/*0010*/
};

struct _OBJECTID {
	/*0000*/ _GUID Lineage;
	/*0010*/ ULONG Uniquifier;
	/*0014*/
};

struct _OBJECT_ATTRIBUTES {
	/*0000*/ ULONG Length;
	/*0008*/ void * RootDirectory;
	/*0010*/ _UNICODE_STRING * ObjectName;
	/*0018*/ ULONG Attributes;
	/*0020*/ void * SecurityDescriptor;
	/*0028*/ void * SecurityQualityOfService;
	/*0030*/
};

struct _OBJECT_ATTRIBUTES32 {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG RootDirectory;
	/*0008*/ ULONG ObjectName;
	/*000c*/ ULONG Attributes;
	/*0010*/ ULONG SecurityDescriptor;
	/*0014*/ ULONG SecurityQualityOfService;
	/*0018*/
};

struct _OBJECT_ATTRIBUTES64 {
	/*0000*/ ULONG Length;
	/*0008*/ ULONGLONG RootDirectory;
	/*0010*/ ULONGLONG ObjectName;
	/*0018*/ ULONG Attributes;
	/*0020*/ ULONGLONG SecurityDescriptor;
	/*0028*/ ULONGLONG SecurityQualityOfService;
	/*0030*/
};

struct _OBJECT_BASIC_INFORMATION {
	/*0000*/ ULONG Attributes;
	/*0004*/ ULONG GrantedAccess;
	/*0008*/ ULONG HandleCount;
	/*000c*/ ULONG PointerCount;
	/*0010*/ ULONG PagedPoolCharge;
	/*0014*/ ULONG NonPagedPoolCharge;
	/*0018*/ ULONG Reserved[0x3];
	/*0024*/ ULONG NameInfoSize;
	/*0028*/ ULONG TypeInfoSize;
	/*002c*/ ULONG SecurityDescriptorSize;
	/*0030*/ _LARGE_INTEGER CreationTime;
	/*0038*/
};

struct _OBJECT_DIRECTORY_INFORMATION {
	/*0000*/ _UNICODE_STRING Name;
	/*0010*/ _UNICODE_STRING TypeName;
	/*0020*/
};

struct _OBJECT_HANDLE_FLAG_INFORMATION {
	/*0000*/ UCHAR Inherit;
	/*0001*/ UCHAR ProtectFromClose;
	/*0002*/
};

enum _OBJECT_INFORMATION_CLASS {
	ObjectBasicInformation = 0x0,
	ObjectNameInformation = 0x1,
	ObjectTypeInformation = 0x2,
	ObjectTypesInformation = 0x3,
	ObjectHandleFlagInformation = 0x4,
	ObjectSessionInformation = 0x5,
	ObjectSessionObjectInformation = 0x6,
	MaxObjectInfoClass = 0x7
};

struct _OBJECT_NAME_INFORMATION {
	/*0000*/ _UNICODE_STRING Name;
	/*0010*/
};

struct _OBJECT_TYPES_INFORMATION {
	/*0000*/ ULONG NumberOfTypes;
	/*0004*/
};

struct _OBJECT_TYPE_INFORMATION {
	/*0000*/ _UNICODE_STRING TypeName;
	/*0010*/ ULONG TotalNumberOfObjects;
	/*0014*/ ULONG TotalNumberOfHandles;
	/*0018*/ ULONG TotalPagedPoolUsage;
	/*001c*/ ULONG TotalNonPagedPoolUsage;
	/*0020*/ ULONG TotalNamePoolUsage;
	/*0024*/ ULONG TotalHandleTableUsage;
	/*0028*/ ULONG HighWaterNumberOfObjects;
	/*002c*/ ULONG HighWaterNumberOfHandles;
	/*0030*/ ULONG HighWaterPagedPoolUsage;
	/*0034*/ ULONG HighWaterNonPagedPoolUsage;
	/*0038*/ ULONG HighWaterNamePoolUsage;
	/*003c*/ ULONG HighWaterHandleTableUsage;
	/*0040*/ ULONG InvalidAttributes;
	/*0044*/ _GENERIC_MAPPING GenericMapping;
	/*0054*/ ULONG ValidAccessMask;
	/*0058*/ UCHAR SecurityRequired;
	/*0059*/ UCHAR MaintainHandleCount;
	/*005a*/ UCHAR TypeIndex;
	/*005b*/ CHAR ReservedByte;
	/*005c*/ ULONG PoolType;
	/*0060*/ ULONG DefaultPagedPoolCharge;
	/*0064*/ ULONG DefaultNonPagedPoolCharge;
	/*0068*/
};

struct _OBJECT_TYPE_LIST {
	/*0000*/ USHORT Level;
	/*0002*/ USHORT Sbz;
	/*0008*/ _GUID * ObjectType;
	/*0010*/
};

struct _OFSTRUCT {
	/*0000*/ UCHAR cBytes;
	/*0001*/ UCHAR fFixedDisk;
	/*0002*/ USHORT nErrCode;
	/*0004*/ USHORT Reserved1;
	/*0006*/ USHORT Reserved2;
	/*0008*/ CHAR szPathName[0x80];
	/*0088*/
};

struct _OLESTREAM {
	/*0000*/ _OLESTREAMVTBL * lpstbl;
	/*0008*/
};

struct _OLESTREAMVTBL {
	/*0000*/ ULONG (* Get)( _OLESTREAM * , void * , ULONG );
	/*0008*/ ULONG (* Put)( _OLESTREAM * , void const * , ULONG );
	/*0010*/
};

struct _OPERATION_END_PARAMETERS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG OperationId;
	/*0008*/ ULONG Flags;
	/*000c*/
};

struct _OPERATION_START_PARAMETERS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG OperationId;
	/*0008*/ ULONG Flags;
	/*000c*/
};

struct _OSVERSIONINFOA {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ CHAR szCSDVersion[0x80];
	/*0094*/
};

struct _OSVERSIONINFOEX2A {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ CHAR szCSDVersion[0x80];
	/*0094*/ USHORT wServicePackMajor;
	/*0096*/ USHORT wServicePackMinor;
	/*0098*/ USHORT wSuiteMask;
	/*009a*/ UCHAR wProductType;
	/*009b*/ UCHAR wReserved;
	/*009c*/ ULONG wSuiteMaskEx;
	/*00a0*/ ULONG wReserved2;
	/*00a4*/
};

struct _OSVERSIONINFOEX2W {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ WCHAR szCSDVersion[0x80];
	/*0114*/ USHORT wServicePackMajor;
	/*0116*/ USHORT wServicePackMinor;
	/*0118*/ USHORT wSuiteMask;
	/*011a*/ UCHAR wProductType;
	/*011b*/ UCHAR wReserved;
	/*011c*/ ULONG wSuiteMaskEx;
	/*0120*/ ULONG wReserved2;
	/*0124*/
};

struct _OSVERSIONINFOEX3A {
	
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0010*/ ULONG dwQfeNumber;
	/*0014*/ CHAR szCSDVersion[0x80];
	/*0014*/ CHAR szLayerAttrib[0x80];
	/*0094*/ USHORT wServicePackMajor;
	/*0096*/ USHORT wServicePackMinor;
	/*0098*/ USHORT wSuiteMask;
	/*009a*/ UCHAR wProductType;
	/*009b*/ UCHAR wReserved;
	/*009c*/ ULONG wSuiteMaskEx;
	/*00a0*/ ULONG wReserved2;
	/*00a4*/ <unnamed-type-Input> Input;
	/*00a6*/ USHORT wLayerCount;
	/*00a8*/ ULONG dwLayerFlags;
	/*00ac*/
};

struct _OSVERSIONINFOEX3W {
	
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0010*/ ULONG dwQfeNumber;
	/*0014*/ WCHAR szCSDVersion[0x80];
	/*0014*/ WCHAR szLayerAttrib[0x80];
	/*0114*/ USHORT wServicePackMajor;
	/*0116*/ USHORT wServicePackMinor;
	/*0118*/ USHORT wSuiteMask;
	/*011a*/ UCHAR wProductType;
	/*011b*/ UCHAR wReserved;
	/*011c*/ ULONG wSuiteMaskEx;
	/*0120*/ ULONG wReserved2;
	/*0124*/ <unnamed-type-Input> Input;
	/*0126*/ USHORT wLayerCount;
	/*0128*/ ULONG dwLayerFlags;
	/*012c*/
};

struct _OSVERSIONINFOEXA {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ CHAR szCSDVersion[0x80];
	/*0094*/ USHORT wServicePackMajor;
	/*0096*/ USHORT wServicePackMinor;
	/*0098*/ USHORT wSuiteMask;
	/*009a*/ UCHAR wProductType;
	/*009b*/ UCHAR wReserved;
	/*009c*/
};

struct _OSVERSIONINFOEXW {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ WCHAR szCSDVersion[0x80];
	/*0114*/ USHORT wServicePackMajor;
	/*0116*/ USHORT wServicePackMinor;
	/*0118*/ USHORT wSuiteMask;
	/*011a*/ UCHAR wProductType;
	/*011b*/ UCHAR wReserved;
	/*011c*/
};

struct _OSVERSIONINFOW {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ WCHAR szCSDVersion[0x80];
	/*0114*/
};

enum _OS_DEPLOYEMENT_STATE_VALUES {
	OS_DEPLOYMENT_STANDARD = 0x1,
	OS_DEPLOYMENT_COMPACT = 0x2
};

struct _OUTLINETEXTMETRICA {
	/*0000*/ UINT otmSize;
	/*0004*/ tagTEXTMETRICA otmTextMetrics;
	/*003c*/ UCHAR otmFiller;
	/*003d*/ tagPANOSE otmPanoseNumber;
	/*0048*/ UINT otmfsSelection;
	/*004c*/ UINT otmfsType;
	/*0050*/ INT otmsCharSlopeRise;
	/*0054*/ INT otmsCharSlopeRun;
	/*0058*/ INT otmItalicAngle;
	/*005c*/ UINT otmEMSquare;
	/*0060*/ INT otmAscent;
	/*0064*/ INT otmDescent;
	/*0068*/ UINT otmLineGap;
	/*006c*/ UINT otmsCapEmHeight;
	/*0070*/ UINT otmsXHeight;
	/*0074*/ tagRECT otmrcFontBox;
	/*0084*/ INT otmMacAscent;
	/*0088*/ INT otmMacDescent;
	/*008c*/ UINT otmMacLineGap;
	/*0090*/ UINT otmusMinimumPPEM;
	/*0094*/ tagPOINT otmptSubscriptSize;
	/*009c*/ tagPOINT otmptSubscriptOffset;
	/*00a4*/ tagPOINT otmptSuperscriptSize;
	/*00ac*/ tagPOINT otmptSuperscriptOffset;
	/*00b4*/ UINT otmsStrikeoutSize;
	/*00b8*/ INT otmsStrikeoutPosition;
	/*00bc*/ INT otmsUnderscoreSize;
	/*00c0*/ INT otmsUnderscorePosition;
	/*00c8*/ CHAR * otmpFamilyName;
	/*00d0*/ CHAR * otmpFaceName;
	/*00d8*/ CHAR * otmpStyleName;
	/*00e0*/ CHAR * otmpFullName;
	/*00e8*/
};

struct _OUTLINETEXTMETRICW {
	/*0000*/ UINT otmSize;
	/*0004*/ tagTEXTMETRICW otmTextMetrics;
	/*0040*/ UCHAR otmFiller;
	/*0041*/ tagPANOSE otmPanoseNumber;
	/*004c*/ UINT otmfsSelection;
	/*0050*/ UINT otmfsType;
	/*0054*/ INT otmsCharSlopeRise;
	/*0058*/ INT otmsCharSlopeRun;
	/*005c*/ INT otmItalicAngle;
	/*0060*/ UINT otmEMSquare;
	/*0064*/ INT otmAscent;
	/*0068*/ INT otmDescent;
	/*006c*/ UINT otmLineGap;
	/*0070*/ UINT otmsCapEmHeight;
	/*0074*/ UINT otmsXHeight;
	/*0078*/ tagRECT otmrcFontBox;
	/*0088*/ INT otmMacAscent;
	/*008c*/ INT otmMacDescent;
	/*0090*/ UINT otmMacLineGap;
	/*0094*/ UINT otmusMinimumPPEM;
	/*0098*/ tagPOINT otmptSubscriptSize;
	/*00a0*/ tagPOINT otmptSubscriptOffset;
	/*00a8*/ tagPOINT otmptSuperscriptSize;
	/*00b0*/ tagPOINT otmptSuperscriptOffset;
	/*00b8*/ UINT otmsStrikeoutSize;
	/*00bc*/ INT otmsStrikeoutPosition;
	/*00c0*/ INT otmsUnderscoreSize;
	/*00c4*/ INT otmsUnderscorePosition;
	/*00c8*/ CHAR * otmpFamilyName;
	/*00d0*/ CHAR * otmpFaceName;
	/*00d8*/ CHAR * otmpStyleName;
	/*00e0*/ CHAR * otmpFullName;
	/*00e8*/
};

struct _OUTPUT_DEBUG_STRING_INFO {
	/*0000*/ CHAR * lpDebugStringData;
	/*0008*/ USHORT fUnicode;
	/*000a*/ USHORT nDebugStringLength;
	/*0010*/
};

struct _OVERLAPPED {
	/*0000*/ ULONGLONG Internal;
	/*0008*/ ULONGLONG InternalHigh;
	/*0010*/ ULONG Offset;
	/*0014*/ ULONG OffsetHigh;
	/*0010*/ void * Pointer;
	/*0018*/ void * hEvent;
	/*0020*/
};

struct _OVERLAPPED_ENTRY {
	/*0000*/ ULONGLONG lpCompletionKey;
	/*0008*/ _OVERLAPPED * lpOverlapped;
	/*0010*/ ULONGLONG Internal;
	/*0018*/ ULONG dwNumberOfBytesTransferred;
	/*0020*/
};

struct _PACKEDEVENTINFO {
	/*0000*/ ULONG ulSize;
	/*0004*/ ULONG ulNumEventsForLogFile;
	/*0008*/ ULONG ulOffsets[];
	/*0008*/
};

struct _PAGEDIR_INFORMATION {
	/*0000*/ ULONGLONG DontUse : 09; // 0x00000000000001ff;
	/*0000*/ ULONGLONG PageDirectoryBase : 48; // 0x01fffffffffffe00;
	/*0000*/ ULONGLONG Reserved : 07; // 0xfe00000000000000;
	/*0008*/
};

struct _PAGE_PRIORITY_INFORMATION {
	/*0000*/ ULONG PagePriority;
	/*0004*/
};

struct _PARSE_MESSAGE_CONTEXT {
	/*0000*/ ULONG fFlags;
	/*0004*/ ULONG cwSavColumn;
	/*0008*/ ULONGLONG iwSrc;
	/*0010*/ ULONGLONG iwDst;
	/*0018*/ ULONGLONG iwDstSpace;
	/*0020*/ CHAR * lpvArgStart;
	/*0028*/
};

enum _PARTITION_INFORMATION_CLASS {
	SystemMemoryPartitionInformation = 0x0,
	SystemMemoryPartitionMoveMemory = 0x1,
	SystemMemoryPartitionAddPagefile = 0x2,
	SystemMemoryPartitionCombineMemory = 0x3,
	SystemMemoryPartitionInitialAddMemory = 0x4,
	SystemMemoryPartitionGetMemoryEvents = 0x5,
	SystemMemoryPartitionSetAttributes = 0x6,
	SystemMemoryPartitionNodeInformation = 0x7,
	SystemMemoryPartitionCreateLargePages = 0x8,
	SystemMemoryPartitionDedicatedMemoryInformation = 0x9,
	SystemMemoryPartitionOpenDedicatedMemory = 0xa,
	SystemMemoryPartitionMemoryChargeAttributes = 0xb,
	SystemMemoryPartitionClearAttributes = 0xc,
	SystemMemoryPartitionSetMemoryThresholds = 0xd,
	SystemMemoryPartitionMax = 0xe
};

struct _PATCH_MAIN_CALLOUT_PARAMS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG PatchPhase;
	/*0008*/ ULONG Flags;
	/*000c*/
};

struct _PATHNAME_BUFFER {
	/*0000*/ ULONG PathNameLength;
	/*0004*/ WCHAR Name[0x1];
	/*0008*/
};

struct _PEB {
	/*0000*/ UCHAR InheritedAddressSpace;
	/*0001*/ UCHAR ReadImageFileExecOptions;
	/*0002*/ UCHAR BeingDebugged;
	/*0003*/ UCHAR BitField;
	/*0003*/ UCHAR ImageUsesLargePages : 01; // 0x01;
	/*0003*/ UCHAR IsProtectedProcess : 01; // 0x02;
	/*0003*/ UCHAR IsImageDynamicallyRelocated : 01; // 0x04;
	/*0003*/ UCHAR SkipPatchingUser32Forwarders : 01; // 0x08;
	/*0003*/ UCHAR IsPackagedProcess : 01; // 0x10;
	/*0003*/ UCHAR IsAppContainer : 01; // 0x20;
	/*0003*/ UCHAR IsProtectedProcessLight : 01; // 0x40;
	/*0003*/ UCHAR IsLongPathAwareProcess : 01; // 0x80;
	/*0004*/ UCHAR Padding0[0x4];
	/*0008*/ void * Mutant;
	/*0010*/ void * ImageBaseAddress;
	/*0018*/ _PEB_LDR_DATA * Ldr;
	/*0020*/ _RTL_USER_PROCESS_PARAMETERS * ProcessParameters;
	/*0028*/ void * SubSystemData;
	/*0030*/ void * ProcessHeap;
	/*0038*/ _RTL_CRITICAL_SECTION * FastPebLock;
	/*0040*/ _SLIST_HEADER * volatile AtlThunkSListPtr;
	/*0048*/ void * IFEOKey;
	/*0050*/ ULONG CrossProcessFlags;
	/*0050*/ ULONG ProcessInJob : 01; // 0x00000001;
	/*0050*/ ULONG ProcessInitializing : 01; // 0x00000002;
	/*0050*/ ULONG ProcessUsingVEH : 01; // 0x00000004;
	/*0050*/ ULONG ProcessUsingVCH : 01; // 0x00000008;
	/*0050*/ ULONG ProcessUsingFTH : 01; // 0x00000010;
	/*0050*/ ULONG ProcessPreviouslyThrottled : 01; // 0x00000020;
	/*0050*/ ULONG ProcessCurrentlyThrottled : 01; // 0x00000040;
	/*0050*/ ULONG ProcessImagesHotPatched : 01; // 0x00000080;
	/*0050*/ ULONG ReservedBits0 : 24; // 0xffffff00;
	/*0054*/ UCHAR Padding1[0x4];
	/*0058*/ void * KernelCallbackTable;
	/*0058*/ void * UserSharedInfoPtr;
	/*0060*/ ULONG SystemReserved;
	/*0064*/ ULONG AtlThunkSListPtr32;
	/*0068*/ void * ApiSetMap;
	/*0070*/ ULONG TlsExpansionCounter;
	/*0074*/ UCHAR Padding2[0x4];
	/*0078*/ _RTL_BITMAP * TlsBitmap;
	/*0080*/ ULONG TlsBitmapBits[0x2];
	/*0088*/ void * ReadOnlySharedMemoryBase;
	/*0090*/ void * SharedData;
	/*0098*/ void * * ReadOnlyStaticServerData;
	/*00a0*/ void * AnsiCodePageData;
	/*00a8*/ void * OemCodePageData;
	/*00b0*/ void * UnicodeCaseTableData;
	/*00b8*/ ULONG NumberOfProcessors;
	/*00bc*/ ULONG NtGlobalFlag;
	/*00c0*/ _LARGE_INTEGER CriticalSectionTimeout;
	/*00c8*/ ULONGLONG HeapSegmentReserve;
	/*00d0*/ ULONGLONG HeapSegmentCommit;
	/*00d8*/ ULONGLONG HeapDeCommitTotalFreeThreshold;
	/*00e0*/ ULONGLONG HeapDeCommitFreeBlockThreshold;
	/*00e8*/ ULONG NumberOfHeaps;
	/*00ec*/ ULONG MaximumNumberOfHeaps;
	/*00f0*/ void * * ProcessHeaps;
	/*00f8*/ void * GdiSharedHandleTable;
	/*0100*/ void * ProcessStarterHelper;
	/*0108*/ ULONG GdiDCAttributeList;
	/*010c*/ UCHAR Padding3[0x4];
	/*0110*/ _RTL_CRITICAL_SECTION * LoaderLock;
	/*0118*/ ULONG OSMajorVersion;
	/*011c*/ ULONG OSMinorVersion;
	/*0120*/ USHORT OSBuildNumber;
	/*0122*/ USHORT OSCSDVersion;
	/*0124*/ ULONG OSPlatformId;
	/*0128*/ ULONG ImageSubsystem;
	/*012c*/ ULONG ImageSubsystemMajorVersion;
	/*0130*/ ULONG ImageSubsystemMinorVersion;
	/*0134*/ UCHAR Padding4[0x4];
	/*0138*/ ULONGLONG ActiveProcessAffinityMask;
	/*0140*/ ULONG GdiHandleBuffer[0x3c];
	/*0230*/ void (* PostProcessInitRoutine)();
	/*0238*/ _RTL_BITMAP * TlsExpansionBitmap;
	/*0240*/ ULONG TlsExpansionBitmapBits[0x20];
	/*02c0*/ ULONG SessionId;
	/*02c4*/ UCHAR Padding5[0x4];
	/*02c8*/ _ULARGE_INTEGER AppCompatFlags;
	/*02d0*/ _ULARGE_INTEGER AppCompatFlagsUser;
	/*02d8*/ void * pShimData;
	/*02e0*/ void * AppCompatInfo;
	/*02e8*/ _UNICODE_STRING CSDVersion;
	/*02f8*/ _ACTIVATION_CONTEXT_DATA const * ActivationContextData;
	/*0300*/ _ASSEMBLY_STORAGE_MAP * ProcessAssemblyStorageMap;
	/*0308*/ _ACTIVATION_CONTEXT_DATA const * SystemDefaultActivationContextData;
	/*0310*/ _ASSEMBLY_STORAGE_MAP * SystemAssemblyStorageMap;
	/*0318*/ ULONGLONG MinimumStackCommit;
	/*0320*/ void * SparePointers[0x2];
	/*0330*/ void * PatchLoaderData;
	/*0338*/ _CHPEV2_PROCESS_INFO * ChpeV2ProcessInfo;
	/*0340*/ ULONG AppModelFeatureState;
	/*0344*/ ULONG SpareUlongs[0x2];
	/*034c*/ USHORT ActiveCodePage;
	/*034e*/ USHORT OemCodePage;
	/*0350*/ USHORT UseCaseMapping;
	/*0352*/ USHORT UnusedNlsField;
	/*0358*/ void * WerRegistrationData;
	/*0360*/ void * WerShipAssertPtr;
	/*0368*/ void * EcCodeBitMap;
	/*0370*/ void * pImageHeaderHash;
	/*0378*/ ULONG TracingFlags;
	/*0378*/ ULONG HeapTracingEnabled : 01; // 0x00000001;
	/*0378*/ ULONG CritSecTracingEnabled : 01; // 0x00000002;
	/*0378*/ ULONG LibLoaderTracingEnabled : 01; // 0x00000004;
	/*0378*/ ULONG SpareTracingBits : 29; // 0xfffffff8;
	/*037c*/ UCHAR Padding6[0x4];
	/*0380*/ ULONGLONG CsrServerReadOnlySharedMemoryBase;
	/*0388*/ ULONGLONG TppWorkerpListLock;
	/*0390*/ _LIST_ENTRY TppWorkerpList;
	/*03a0*/ void * WaitOnAddressHashTable[0x80];
	/*07a0*/ void * TelemetryCoverageHeader;
	/*07a8*/ ULONG CloudFileFlags;
	/*07ac*/ ULONG CloudFileDiagFlags;
	/*07b0*/ CHAR PlaceholderCompatibilityMode;
	/*07b1*/ CHAR PlaceholderCompatibilityModeReserved[0x7];
	/*07b8*/ _LEAP_SECOND_DATA * LeapSecondData;
	/*07c0*/ ULONG LeapSecondFlags;
	/*07c0*/ ULONG SixtySecondEnabled : 01; // 0x00000001;
	/*07c0*/ ULONG Reserved : 31; // 0xfffffffe;
	/*07c4*/ ULONG NtGlobalFlag2;
	/*07c8*/ ULONGLONG ExtendedFeatureDisableMask;
	/*07d0*/
};

struct _PEBS_DS_SAVE_AREA {
	/*0000*/ _PEBS_DS_SAVE_AREA32 As32Bit;
	/*0000*/ _PEBS_DS_SAVE_AREA64 As64Bit;
	/*00a0*/
};

struct _PEBS_DS_SAVE_AREA32 {
	/*0000*/ ULONG BtsBufferBase;
	/*0004*/ ULONG BtsIndex;
	/*0008*/ ULONG BtsAbsoluteMaximum;
	/*000c*/ ULONG BtsInterruptThreshold;
	/*0010*/ ULONG PebsBufferBase;
	/*0014*/ ULONG PebsIndex;
	/*0018*/ ULONG PebsAbsoluteMaximum;
	/*001c*/ ULONG PebsInterruptThreshold;
	/*0020*/ ULONGLONG PebsGpCounterReset[0x8];
	/*0060*/ ULONGLONG PebsFixedCounterReset[0x4];
	/*0080*/
};

struct _PEBS_DS_SAVE_AREA64 {
	/*0000*/ ULONGLONG BtsBufferBase;
	/*0008*/ ULONGLONG BtsIndex;
	/*0010*/ ULONGLONG BtsAbsoluteMaximum;
	/*0018*/ ULONGLONG BtsInterruptThreshold;
	/*0020*/ ULONGLONG PebsBufferBase;
	/*0028*/ ULONGLONG PebsIndex;
	/*0030*/ ULONGLONG PebsAbsoluteMaximum;
	/*0038*/ ULONGLONG PebsInterruptThreshold;
	/*0040*/ ULONGLONG PebsGpCounterReset[0x8];
	/*0080*/ ULONGLONG PebsFixedCounterReset[0x4];
	/*00a0*/
};

struct _PEB_LDR_DATA {
	/*0000*/ ULONG Length;
	/*0004*/ UCHAR Initialized;
	/*0008*/ void * SsHandle;
	/*0010*/ _LIST_ENTRY InLoadOrderModuleList;
	/*0020*/ _LIST_ENTRY InMemoryOrderModuleList;
	/*0030*/ _LIST_ENTRY InInitializationOrderModuleList;
	/*0040*/ void * EntryInProgress;
	/*0048*/ UCHAR ShutdownInProgress;
	/*0050*/ void * ShutdownThreadId;
	/*0058*/
};

struct _PERFORMANCE_DATA {
	/*0000*/ USHORT Size;
	/*0002*/ UCHAR Version;
	/*0003*/ UCHAR HwCountersCount;
	/*0004*/ ULONG ContextSwitchCount;
	/*0008*/ ULONGLONG WaitReasonBitMap;
	/*0010*/ ULONGLONG CycleTime;
	/*0018*/ ULONG RetryCount;
	/*001c*/ ULONG Reserved;
	/*0020*/ _HARDWARE_COUNTER_DATA HwCounters[0x10];
	/*0120*/
};

struct _PHYSICAL_CHANNEL_RUN {
	/*0000*/ ULONG NodeNumber;
	/*0004*/ ULONG ChannelNumber;
	/*0008*/ ULONGLONG BasePage;
	/*0010*/ ULONGLONG PageCount;
	/*0018*/ ULONGLONG Flags;
	/*0020*/
};

struct _PLEX_READ_DATA_REQUEST {
	/*0000*/ _LARGE_INTEGER ByteOffset;
	/*0008*/ ULONG ByteLength;
	/*000c*/ ULONG PlexNumber;
	/*0010*/
};

struct _PLUGPLAY_CONTROL_BLOCKED_DRIVER_DATA {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG BufferLength;
	/*0008*/ void * Buffer;
	/*0010*/
};

enum _PLUGPLAY_CONTROL_CLASS {
	PlugPlayControlEnumerateDevice = 0x0,
	PlugPlayControlRegisterNewDevice = 0x1,
	PlugPlayControlDeregisterDevice = 0x2,
	PlugPlayControlInitializeDevice = 0x3,
	PlugPlayControlStartDevice = 0x4,
	PlugPlayControlUnlockDevice = 0x5,
	PlugPlayControlQueryAndRemoveDevice = 0x6,
	PlugPlayControlUserResponse = 0x7,
	PlugPlayControlGenerateLegacyDevice = 0x8,
	PlugPlayControlGetInterfaceDeviceList = 0x9,
	PlugPlayControlProperty = 0xa,
	PlugPlayControlDeviceClassAssociation = 0xb,
	PlugPlayControlGetRelatedDevice = 0xc,
	PlugPlayControlGetInterfaceDeviceAlias = 0xd,
	PlugPlayControlDeviceStatus = 0xe,
	PlugPlayControlGetDeviceDepth = 0xf,
	PlugPlayControlQueryDeviceRelations = 0x10,
	PlugPlayControlTargetDeviceRelation = 0x11,
	PlugPlayControlQueryConflictList = 0x12,
	PlugPlayControlRetrieveDock = 0x13,
	PlugPlayControlResetDevice = 0x14,
	PlugPlayControlHaltDevice = 0x15,
	PlugPlayControlGetBlockedDriverList = 0x16,
	PlugPlayControlGetDeviceInterfaceEnabled = 0x17,
	MaxPlugPlayControl = 0x18
};

struct _PLUGPLAY_CONTROL_CLASS_ASSOCIATION_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ _GUID * InterfaceGuid;
	/*0018*/ _UNICODE_STRING Reference;
	/*0028*/ UCHAR Register;
	/*0030*/ WCHAR * SymLink;
	/*0038*/ ULONG SymLinkLength;
	/*0040*/
};

struct _PLUGPLAY_CONTROL_CONFLICT_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ _CM_RESOURCE_LIST * ResourceList;
	/*0018*/ ULONG ResourceListSize;
	/*0020*/ _PLUGPLAY_CONTROL_CONFLICT_LIST * ConflictBuffer;
	/*0028*/ ULONG ConflictBufferSize;
	/*002c*/ ULONG Flags;
	/*0030*/ LONG Status;
	/*0038*/
};

struct _PLUGPLAY_CONTROL_CONFLICT_ENTRY {
	/*0000*/ ULONG DeviceInstance;
	/*0004*/ ULONG DeviceFlags;
	/*0008*/ ULONG ResourceType;
	/*0010*/ ULONGLONG ResourceStart;
	/*0018*/ ULONGLONG ResourceEnd;
	/*0020*/ ULONG ResourceFlags;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_CONFLICT_LIST {
	/*0000*/ ULONG Reserved1;
	/*0004*/ ULONG Reserved2;
	/*0008*/ ULONG ConflictsCounted;
	/*000c*/ ULONG ConflictsListed;
	/*0010*/ ULONG RequiredBufferSize;
	/*0018*/ _PLUGPLAY_CONTROL_CONFLICT_ENTRY ConflictEntry[0x1];
	/*0040*/
};

struct _PLUGPLAY_CONTROL_CONFLICT_STRINGS {
	/*0000*/ ULONG NullDeviceInstance;
	/*0004*/ WCHAR DeviceInstanceStrings[0x1];
	/*0008*/
};

struct _PLUGPLAY_CONTROL_DEPTH_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ ULONG DeviceDepth;
	/*0018*/
};

struct _PLUGPLAY_CONTROL_DEVICE_CONTROL_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ ULONG Flags;
	/*0018*/
};

struct _PLUGPLAY_CONTROL_DEVICE_INTERFACE_ENABLED {
	/*0000*/ _UNICODE_STRING DeviceInterface;
	/*0010*/ ULONG Flags;
	/*0014*/ UCHAR Enabled;
	/*0018*/
};

struct _PLUGPLAY_CONTROL_DEVICE_RELATIONS_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ _PNP_QUERY_RELATION Operation;
	/*0014*/ ULONG BufferLength;
	/*0018*/ WCHAR * Buffer;
	/*0020*/
};

struct _PLUGPLAY_CONTROL_INSTALL_DATA {
	/*0000*/ ULONG BufferLength;
	/*0008*/ WCHAR * Buffer;
	/*0010*/
};

struct _PLUGPLAY_CONTROL_INTERFACE_ALIAS_DATA {
	/*0000*/ _UNICODE_STRING SymbolicLinkName;
	/*0010*/ _GUID * AliasClassGuid;
	/*0018*/ WCHAR * AliasSymbolicLinkName;
	/*0020*/ ULONG AliasSymbolicLinkNameLength;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_INTERFACE_LIST_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ _GUID * InterfaceGuid;
	/*0018*/ WCHAR * InterfaceList;
	/*0020*/ ULONG InterfaceListSize;
	/*0024*/ ULONG Flags;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA {
	/*0000*/ _UNICODE_STRING ServiceName;
	/*0010*/ WCHAR * DeviceInstance;
	/*0018*/ ULONG DeviceInstanceLength;
	/*0020*/
};

struct _PLUGPLAY_CONTROL_PROPERTY_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ ULONG PropertyType;
	/*0018*/ void * Buffer;
	/*0020*/ ULONG BufferSize;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_QUERY_AND_REMOVE_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ ULONG Flags;
	/*0014*/ _PNP_VETO_TYPE VetoType;
	/*0018*/ WCHAR * VetoName;
	/*0020*/ ULONG VetoNameLength;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_RELATED_DEVICE_DATA {
	/*0000*/ _UNICODE_STRING TargetDeviceInstance;
	/*0010*/ ULONG Relation;
	/*0018*/ WCHAR * RelatedDeviceInstance;
	/*0020*/ ULONG RelatedDeviceInstanceLength;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_RETRIEVE_DOCK_DATA {
	/*0000*/ ULONG DeviceInstanceLength;
	/*0008*/ WCHAR * DeviceInstance;
	/*0010*/
};

struct _PLUGPLAY_CONTROL_STATUS_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ ULONG Operation;
	/*0014*/ ULONG DeviceStatus;
	/*0018*/ ULONG DeviceProblem;
	/*001c*/ ULONG Flags;
	/*0020*/ LONG ProblemStatus;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_TARGET_RELATION_DATA {
	/*0000*/ void * UserFileHandle;
	/*0008*/ LONG Status;
	/*000c*/ ULONG DeviceInstanceLen;
	/*0010*/ WCHAR * DeviceInstance;
	/*0018*/
};

struct _PLUGPLAY_CONTROL_USER_RESPONSE_DATA {
	/*0000*/ ULONG Response;
	/*0004*/ _PNP_VETO_TYPE VetoType;
	/*0008*/ WCHAR * VetoName;
	/*0010*/ ULONG VetoNameLength;
	/*0018*/
};

struct _PLUGPLAY_CUSTOM_NOTIFICATION {
	/*0000*/ _PLUGPLAY_NOTIFY_HDR HeaderInfo;
	/*0018*/ void * FileObject;
	/*0020*/ LONG NameBufferOffset;
	/*0024*/ UCHAR CustomDataBuffer[0x1];
	/*0028*/
};

struct _PLUGPLAY_EVENT_BLOCK {
	
	/*0000*/ _GUID EventGuid;
	/*0010*/ _PLUGPLAY_EVENT_CATEGORY EventCategory;
	/*0018*/ ULONG * Result;
	/*0020*/ ULONG Flags;
	/*0024*/ ULONG TotalSize;
	/*0028*/ void * DeviceObject;
	/*0030*/ <unnamed-type-u> u;
	/*0050*/
};

enum _PLUGPLAY_EVENT_CATEGORY {
	HardwareProfileChangeEvent = 0x0,
	TargetDeviceChangeEvent = 0x1,
	DeviceClassChangeEvent = 0x2,
	CustomDeviceEvent = 0x3,
	DeviceInstallEvent = 0x4,
	DeviceArrivalEvent = 0x5,
	VetoEvent = 0x6,
	BlockedDriverEvent = 0x7,
	InvalidIDEvent = 0x8,
	DevicePropertyChangeEvent = 0x9,
	DeviceInstanceRemovalEvent = 0xa,
	DeviceInstanceStartedEvent = 0xb,
	MaxPlugEventCategory = 0xc
};

struct _PLUGPLAY_NOTIFY_HDR {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Size;
	/*0004*/ _GUID Event;
	/*0014*/
};

struct _PMD {
	/*0000*/ INT mdisp;
	/*0004*/ INT pdisp;
	/*0008*/ INT vdisp;
	/*000c*/
};

enum _PNP_QUERY_RELATION {
	PnpQueryEjectRelations = 0x0,
	PnpQueryRemovalRelations = 0x1,
	PnpQueryPowerRelations = 0x2,
	PnpQueryBusRelations = 0x3,
	PnpQueryTransportRelations = 0x4,
	MaxPnpQueryRelations = 0x5
};

enum _PNP_VETO_TYPE {
	PNP_VetoTypeUnknown = 0x0,
	PNP_VetoLegacyDevice = 0x1,
	PNP_VetoPendingClose = 0x2,
	PNP_VetoWindowsApp = 0x3,
	PNP_VetoWindowsService = 0x4,
	PNP_VetoOutstandingOpen = 0x5,
	PNP_VetoDevice = 0x6,
	PNP_VetoDriver = 0x7,
	PNP_VetoIllegalDeviceRequest = 0x8,
	PNP_VetoInsufficientPower = 0x9,
	PNP_VetoNonDisableable = 0xa,
	PNP_VetoLegacyDriver = 0xb,
	PNP_VetoInsufficientRights = 0xc,
	PNP_VetoAlreadyRemoved = 0xd
};

struct _POINTFLOAT {
	/*0000*/ float x;
	/*0004*/ float y;
	/*0008*/
};

struct _POINTL {
	/*0000*/ LONG x;
	/*0004*/ LONG y;
	/*0008*/
};

struct _POOLED_USAGE_AND_LIMITS {
	/*0000*/ ULONGLONG PeakPagedPoolUsage;
	/*0008*/ ULONGLONG PagedPoolUsage;
	/*0010*/ ULONGLONG PagedPoolLimit;
	/*0018*/ ULONGLONG PeakNonPagedPoolUsage;
	/*0020*/ ULONGLONG NonPagedPoolUsage;
	/*0028*/ ULONGLONG NonPagedPoolLimit;
	/*0030*/ ULONGLONG PeakPagefileUsage;
	/*0038*/ ULONGLONG PagefileUsage;
	/*0040*/ ULONGLONG PagefileLimit;
	/*0048*/
};

struct _PORT_DATA_ENTRY {
	/*0000*/ void * Base;
	/*0008*/ ULONG Size;
	/*0010*/
};

struct _PORT_DATA_INFORMATION {
	/*0000*/ ULONG CountDataEntries;
	/*0008*/ _PORT_DATA_ENTRY DataEntries[0x1];
	/*0018*/
};

enum _PORT_INFORMATION_CLASS {
	PortBasicInformation = 0x0,
	PortDumpInformation = 0x1
};

struct _PORT_MESSAGE {
	
	
	/*0000*/ <unnamed-type-u1> u1;
	/*0004*/ <unnamed-type-u2> u2;
	/*0008*/ _CLIENT_ID ClientId;
	/*0008*/ double DoNotUseThisField;
	/*0018*/ ULONG MessageId;
	/*0020*/ ULONGLONG ClientViewSize;
	/*0020*/ ULONG CallbackId;
	/*0028*/
};

struct _PORT_VIEW {
	/*0000*/ ULONG Length;
	/*0008*/ void * SectionHandle;
	/*0010*/ ULONG SectionOffset;
	/*0018*/ ULONGLONG ViewSize;
	/*0020*/ void * ViewBase;
	/*0028*/ void * ViewRemoteBase;
	/*0030*/
};

struct _POWER_IDLE_RESILIENCY {
	/*0000*/ ULONG CoalescingTimeout;
	/*0004*/ ULONG IdleResiliencyPeriod;
	/*0008*/
};

struct _POWER_MONITOR_INVOCATION {
	/*0000*/ UCHAR Console;
	/*0004*/ POWER_MONITOR_REQUEST_REASON RequestReason;
	/*0008*/
};

enum _POWER_MONITOR_REQUEST_TYPE {
	MonitorRequestTypeOff = 0x0,
	MonitorRequestTypeOnAndPresent = 0x1,
	MonitorRequestTypeToggleOn = 0x2
};

struct _POWER_PLATFORM_INFORMATION {
	/*0000*/ UCHAR AoAc;
	/*0001*/
};

enum _POWER_PLATFORM_ROLE {
	PlatformRoleUnspecified = 0x0,
	PlatformRoleDesktop = 0x1,
	PlatformRoleMobile = 0x2,
	PlatformRoleWorkstation = 0x3,
	PlatformRoleEnterpriseServer = 0x4,
	PlatformRoleSOHOServer = 0x5,
	PlatformRoleAppliancePC = 0x6,
	PlatformRolePerformanceServer = 0x7,
	PlatformRoleSlate = 0x8,
	PlatformRoleMaximum = 0x9
};

enum _POWER_REQUEST_TYPE {
	PowerRequestDisplayRequired = 0x0,
	PowerRequestSystemRequired = 0x1,
	PowerRequestAwayModeRequired = 0x2,
	PowerRequestExecutionRequired = 0x3
};

struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES {
	/*0000*/ UCHAR IsAllowed;
	/*0001*/
};

struct _POWER_SESSION_CONNECT {
	/*0000*/ UCHAR Connected;
	/*0001*/ UCHAR Console;
	/*0002*/
};

struct _POWER_SESSION_RIT_STATE {
	/*0000*/ UCHAR Active;
	/*0008*/ ULONGLONG LastInputTime;
	/*0010*/
};

struct _POWER_SESSION_TIMEOUTS {
	/*0000*/ ULONG InputTimeout;
	/*0004*/ ULONG DisplayTimeout;
	/*0008*/
};

struct _POWER_SESSION_WINLOGON {
	/*0000*/ ULONG SessionId;
	/*0004*/ UCHAR Console;
	/*0005*/ UCHAR Locked;
	/*0008*/
};

union _POWER_STATE {
	/*0000*/ _SYSTEM_POWER_STATE SystemState;
	/*0000*/ _DEVICE_POWER_STATE DeviceState;
	/*0004*/
};

enum _POWER_STATE_TYPE {
	SystemPowerState = 0x0,
	DevicePowerState = 0x1
};

struct _POWER_THROTTLING_PROCESS_STATE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG ControlMask;
	/*0008*/ ULONG StateMask;
	/*000c*/
};

struct _POWER_THROTTLING_THREAD_STATE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG ControlMask;
	/*0008*/ ULONG StateMask;
	/*000c*/
};

struct _POWER_USER_PRESENCE {
	/*0000*/ POWER_USER_PRESENCE_TYPE UserPresence;
	/*0004*/
};

enum _PO_CS_DEVICE_NOTIFICATION_TYPE {
	PoCsDeviceNotificationStorage = 0x0,
	PoCsDeviceNotificationWiFi = 0x1,
	PoCsDeviceNotificationMbn = 0x2,
	PoCsDeviceNotificationAudio = 0x3,
	PoCsDeviceNotificationEthernet = 0x4,
	PoCsDeviceNotificationMaximum = 0x5
};

enum _PO_HIBER_FORCE_DISABLE_REASON {
	PoHiberForceDisableReasonPolicy = 0x0,
	PoHiberForceDisableReasonGuardedHost = 0x1,
	PoHiberForceDisableReasonMax = 0x2
};

enum _PO_SLEEP_DISABLE_REASON {
	PoSleepDisableReasonVideo = 0x0,
	PoSleepDisableReasonHypervisor = 0x1,
	PoSleepDisableReasonVhdBoot = 0x2,
	PoSleepDisableReasonPortableWorkspace = 0x3,
	PoSleepDisableReasonPolicy = 0x4,
	PoSleepDisableReasonGuardedHost = 0x5,
	PoSleepDisableReasonMax = 0x6
};

struct _PO_SPR_ACTIVE_SESSION_DATA {
	/*0000*/ UCHAR Start;
	/*0004*/ _GUID ActiveSessionGuid;
	/*0014*/
};

struct _PO_WAKE_SOURCE_DEVICE {
	/*0000*/ _PO_WAKE_SOURCE_HEADER Header;
	/*0008*/ WCHAR InstancePath[0x1];
	/*000c*/
};

struct _PO_WAKE_SOURCE_FIXED {
	/*0000*/ _PO_WAKE_SOURCE_HEADER Header;
	/*0008*/ PO_FIXED_WAKE_SOURCE_TYPE FixedWakeSourceType;
	/*000c*/
};

struct _PO_WAKE_SOURCE_HEADER {
	/*0000*/ PO_WAKE_SOURCE_TYPE Type;
	/*0004*/ ULONG Size;
	/*0008*/
};

struct _PO_WAKE_SOURCE_HISTORY {
	/*0000*/ ULONG Count;
	/*0004*/ ULONG Offsets[0x1];
	/*0008*/
};

struct _PO_WAKE_SOURCE_INFO {
	/*0000*/ ULONG Count;
	/*0004*/ ULONG Offsets[0x1];
	/*0008*/
};

struct _PO_WAKE_SOURCE_INTERNAL {
	/*0000*/ _PO_WAKE_SOURCE_HEADER Header;
	/*0008*/ PO_INTERNAL_WAKE_SOURCE_TYPE InternalWakeSourceType;
	/*000c*/
};

struct _PO_WAKE_SOURCE_TIMER {
	/*0000*/ _PO_WAKE_SOURCE_HEADER Header;
	/*0008*/ _DIAGNOSTIC_BUFFER Reason;
	/*0030*/
};

struct _PREFETCH_ALTERNATE_PARAM_INFO {
	/*0000*/ ULONG Parameter;
	/*0004*/
};

struct _PREFIX_TABLE {
	/*0000*/ SHORT NodeTypeCode;
	/*0002*/ SHORT NameLength;
	/*0008*/ _PREFIX_TABLE_ENTRY * NextPrefixTree;
	/*0010*/
};

struct _PREFIX_TABLE_ENTRY {
	/*0000*/ SHORT NodeTypeCode;
	/*0002*/ SHORT NameLength;
	/*0008*/ _PREFIX_TABLE_ENTRY * NextPrefixTree;
	/*0010*/ _RTL_SPLAY_LINKS Links;
	/*0028*/ _STRING * Prefix;
	/*0030*/
};

enum _PRIORITY_HINT {
	IoPriorityHintVeryLow = 0x0,
	IoPriorityHintLow = 0x1,
	IoPriorityHintNormal = 0x2,
	MaximumIoPriorityHintType = 0x3
};

struct _PRIVILEGE_SET {
	/*0000*/ ULONG PrivilegeCount;
	/*0004*/ ULONG Control;
	/*0008*/ _LUID_AND_ATTRIBUTES Privilege[0x1];
	/*0014*/
};

enum _PROCESSINFOCLASS {
	ProcessBasicInformation = 0x0,
	ProcessQuotaLimits = 0x1,
	ProcessIoCounters = 0x2,
	ProcessVmCounters = 0x3,
	ProcessTimes = 0x4,
	ProcessBasePriority = 0x5,
	ProcessRaisePriority = 0x6,
	ProcessDebugPort = 0x7,
	ProcessExceptionPort = 0x8,
	ProcessAccessToken = 0x9,
	ProcessLdtInformation = 0xa,
	ProcessLdtSize = 0xb,
	ProcessDefaultHardErrorMode = 0xc,
	ProcessIoPortHandlers = 0xd,
	ProcessPooledUsageAndLimits = 0xe,
	ProcessWorkingSetWatch = 0xf,
	ProcessUserModeIOPL = 0x10,
	ProcessEnableAlignmentFaultFixup = 0x11,
	ProcessPriorityClass = 0x12,
	ProcessWx86Information = 0x13,
	ProcessHandleCount = 0x14,
	ProcessAffinityMask = 0x15,
	ProcessPriorityBoost = 0x16,
	ProcessDeviceMap = 0x17,
	ProcessSessionInformation = 0x18,
	ProcessForegroundInformation = 0x19,
	ProcessWow64Information = 0x1a,
	ProcessImageFileName = 0x1b,
	ProcessLUIDDeviceMapsEnabled = 0x1c,
	ProcessBreakOnTermination = 0x1d,
	ProcessDebugObjectHandle = 0x1e,
	ProcessDebugFlags = 0x1f,
	ProcessHandleTracing = 0x20,
	ProcessIoPriority = 0x21,
	ProcessExecuteFlags = 0x22,
	ProcessTlsInformation = 0x23,
	ProcessCookie = 0x24,
	ProcessImageInformation = 0x25,
	ProcessCycleTime = 0x26,
	ProcessPagePriority = 0x27,
	ProcessInstrumentationCallback = 0x28,
	ProcessThreadStackAllocation = 0x29,
	ProcessWorkingSetWatchEx = 0x2a,
	ProcessImageFileNameWin32 = 0x2b,
	ProcessImageFileMapping = 0x2c,
	ProcessAffinityUpdateMode = 0x2d,
	ProcessMemoryAllocationMode = 0x2e,
	ProcessGroupInformation = 0x2f,
	ProcessTokenVirtualizationEnabled = 0x30,
	ProcessOwnerInformation = 0x31,
	ProcessWindowInformation = 0x32,
	ProcessHandleInformation = 0x33,
	ProcessMitigationPolicy = 0x34,
	ProcessDynamicFunctionTableInformation = 0x35,
	ProcessHandleCheckingMode = 0x36,
	ProcessKeepAliveCount = 0x37,
	ProcessRevokeFileHandles = 0x38,
	ProcessWorkingSetControl = 0x39,
	ProcessHandleTable = 0x3a,
	ProcessCheckStackExtentsMode = 0x3b,
	ProcessCommandLineInformation = 0x3c,
	ProcessProtectionInformation = 0x3d,
	ProcessMemoryExhaustion = 0x3e,
	ProcessFaultInformation = 0x3f,
	ProcessTelemetryIdInformation = 0x40,
	ProcessCommitReleaseInformation = 0x41,
	ProcessDefaultCpuSetsInformation = 0x42,
	ProcessAllowedCpuSetsInformation = 0x43,
	ProcessReserved1Information = 0x42,
	ProcessReserved2Information = 0x43,
	ProcessSubsystemProcess = 0x44,
	ProcessJobMemoryInformation = 0x45,
	ProcessInPrivate = 0x46,
	ProcessRaiseUMExceptionOnInvalidHandleClose = 0x47,
	ProcessIumChallengeResponse = 0x48,
	ProcessChildProcessInformation = 0x49,
	ProcessHighGraphicsPriorityInformation = 0x4a,
	ProcessSubsystemInformation = 0x4b,
	ProcessEnergyValues = 0x4c,
	ProcessPowerThrottlingState = 0x4d,
	ProcessReserved3Information = 0x4e,
	ProcessWin32kSyscallFilterInformation = 0x4f,
	ProcessDisableSystemAllowedCpuSets = 0x50,
	ProcessWakeInformation = 0x51,
	ProcessEnergyTrackingState = 0x52,
	ProcessManageWritesToExecutableMemory = 0x53,
	ProcessCaptureTrustletLiveDump = 0x54,
	ProcessTelemetryCoverage = 0x55,
	ProcessEnclaveInformation = 0x56,
	ProcessEnableReadWriteVmLogging = 0x57,
	ProcessUptimeInformation = 0x58,
	ProcessImageSection = 0x59,
	ProcessDebugAuthInformation = 0x5a,
	ProcessSystemResourceManagement = 0x5b,
	ProcessSequenceNumber = 0x5c,
	ProcessReserved4Information = 0x5d,
	ProcessSecurityDomainInformation = 0x5e,
	ProcessCombineSecurityDomainsInformation = 0x5f,
	ProcessEnableLogging = 0x60,
	ProcessLeapSecondInformation = 0x61,
	ProcessFiberShadowStackAllocation = 0x62,
	ProcessFreeFiberShadowStackAllocation = 0x63,
	ProcessAltSystemCallInformation = 0x64,
	ProcessDynamicEHContinuationTargets = 0x65,
	ProcessDynamicEnforcedCetCompatibleRanges = 0x66,
	ProcessCreateStateChange = 0x67,
	ProcessApplyStateChange = 0x68,
	ProcessEnableOptionalXStateFeatures = 0x69,
	ProcessAltPrefetchParam = 0x6a,
	ProcessAssignCpuPartitions = 0x6b,
	ProcessPriorityClassEx = 0x6c,
	ProcessMembershipInformation = 0x6d,
	ProcessEffectiveIoPriority = 0x6e,
	ProcessEffectivePagePriority = 0x6f,
	MaxProcessInfoClass = 0x70
};

enum _PROCESSOR_CACHE_TYPE {
	CacheUnified = 0x0,
	CacheInstruction = 0x1,
	CacheData = 0x2,
	CacheTrace = 0x3
};

struct _PROCESSOR_GROUP_INFO {
	/*0000*/ UCHAR MaximumProcessorCount;
	/*0001*/ UCHAR ActiveProcessorCount;
	/*0002*/ UCHAR Reserved[0x26];
	/*0028*/ ULONGLONG ActiveProcessorMask;
	/*0030*/
};

struct _PROCESSOR_IDLE_STATE {
	/*0000*/ UCHAR StateType;
	/*0004*/ ULONG StateFlags;
	/*0008*/ ULONG HardwareLatency;
	/*000c*/ ULONG Power;
	/*0010*/ ULONGLONG Context;
	/*0018*/ LONG (* Handler)( ULONGLONG , PROCESSOR_IDLE_TIMES * );
	/*0020*/
};

struct _PROCESSOR_IDLE_STATES {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Revision;
	/*0008*/ ULONG Count;
	/*000c*/ ULONG Type;
	/*0010*/ ULONGLONG TargetProcessors;
	/*0018*/ _PROCESSOR_IDLE_STATE State[0x1];
	/*0038*/
};

struct _PROCESSOR_NUMBER {
	/*0000*/ USHORT Group;
	/*0002*/ UCHAR Number;
	/*0003*/ UCHAR Reserved;
	/*0004*/
};

struct _PROCESSOR_POWER_INFORMATION {
	/*0000*/ ULONG Number;
	/*0004*/ ULONG MaxMhz;
	/*0008*/ ULONG CurrentMhz;
	/*000c*/ ULONG MhzLimit;
	/*0010*/ ULONG MaxIdleState;
	/*0014*/ ULONG CurrentIdleState;
	/*0018*/
};

struct _PROCESSOR_POWER_POLICY {
	/*0000*/ ULONG Revision;
	/*0004*/ UCHAR DynamicThrottle;
	/*0005*/ UCHAR Spare[0x3];
	/*0008*/ ULONG DisableCStates : 01; // 0x00000001;
	/*0008*/ ULONG Reserved : 31; // 0xfffffffe;
	/*000c*/ ULONG PolicyCount;
	/*0010*/ _PROCESSOR_POWER_POLICY_INFO Policy[0x3];
	/*004c*/
};

struct _PROCESSOR_POWER_POLICY_INFO {
	/*0000*/ ULONG TimeCheck;
	/*0004*/ ULONG DemoteLimit;
	/*0008*/ ULONG PromoteLimit;
	/*000c*/ UCHAR DemotePercent;
	/*000d*/ UCHAR PromotePercent;
	/*000e*/ UCHAR Spare[0x2];
	/*0010*/ ULONG AllowDemotion : 01; // 0x00000001;
	/*0010*/ ULONG AllowPromotion : 01; // 0x00000002;
	/*0010*/ ULONG Reserved : 30; // 0xfffffffc;
	/*0014*/
};

struct _PROCESSOR_PROFILE_CONTROL_AREA {
	/*0000*/ _PEBS_DS_SAVE_AREA PebsDsSaveArea;
	/*00a0*/
};

struct _PROCESSOR_RELATIONSHIP {
	/*0000*/ UCHAR Flags;
	/*0001*/ UCHAR EfficiencyClass;
	/*0002*/ UCHAR Reserved[0x14];
	/*0016*/ USHORT GroupCount;
	/*0018*/ _GROUP_AFFINITY GroupMask[0x1];
	/*0028*/
};

struct _PROCESS_ACCESS_TOKEN {
	/*0000*/ void * Token;
	/*0008*/ void * Thread;
	/*0010*/
};

enum _PROCESS_ACTIVITY_TYPE {
	ProcessActivityTypeAudio = 0x0,
	ProcessActivityTypeMax = 0x1
};

union _PROCESS_AFFINITY_UPDATE_MODE {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableAutoUpdate : 01; // 0x00000001;
	/*0000*/ ULONG Permanent : 01; // 0x00000002;
	/*0000*/ ULONG Reserved : 30; // 0xfffffffc;
	/*0004*/
};

struct _PROCESS_ASSIGN_CPU_PARTITION_INFO {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG CpuPartitionCount;
	/*0008*/ void * CpuPartitionHandles[0x1];
	/*0010*/
};

struct _PROCESS_BASIC_INFORMATION {
	/*0000*/ LONG ExitStatus;
	/*0008*/ _PEB * PebBaseAddress;
	/*0010*/ ULONGLONG AffinityMask;
	/*0018*/ LONG BasePriority;
	/*0020*/ ULONGLONG UniqueProcessId;
	/*0028*/ ULONGLONG InheritedFromUniqueProcessId;
	/*0030*/
};

struct _PROCESS_BASIC_INFORMATION64 {
	/*0000*/ LONG ExitStatus;
	/*0004*/ UINT Pad1;
	/*0008*/ ULONGLONG PebBaseAddress;
	/*0010*/ ULONGLONG AffinityMask;
	/*0018*/ LONG BasePriority;
	/*001c*/ UINT Pad2;
	/*0020*/ ULONGLONG UniqueProcessId;
	/*0028*/ ULONGLONG InheritedFromUniqueProcessId;
	/*0030*/
};

struct _PROCESS_CHILD_PROCESS_INFORMATION {
	/*0000*/ UCHAR ProhibitChildProcesses;
	/*0001*/ UCHAR AlwaysAllowSecureChildProcess;
	/*0002*/ UCHAR AuditProhibitChildProcesses;
	/*0003*/
};

struct _PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION {
	/*0000*/ void * ProcessHandle;
	/*0008*/
};

struct _PROCESS_COMMIT_RELEASE_INFORMATION {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Eligible : 01; // 0x00000001;
	/*0004*/ ULONG ReleaseRepurposedMemResetCommit : 01; // 0x00000002;
	/*0004*/ ULONG ForceReleaseMemResetCommit : 01; // 0x00000004;
	/*0004*/ ULONG Spare : 29; // 0xfffffff8;
	/*0008*/ ULONGLONG CommitDebt;
	/*0010*/ ULONGLONG CommittedMemResetSize;
	/*0018*/ ULONGLONG RepurposedMemResetSize;
	/*0020*/
};

struct _PROCESS_CYCLE_TIME_INFORMATION {
	/*0000*/ ULONGLONG AccumulatedCycles;
	/*0008*/ ULONGLONG CurrentCycleCount;
	/*0010*/
};

struct _PROCESS_DEVICEMAP_INFORMATION {
	
	/*0000*/ <unnamed-type-Set> Set;
	/*0000*/ <unnamed-type-Query> Query;
	/*0028*/
};

struct _PROCESS_DEVICEMAP_INFORMATION_EX {
	
	/*0000*/ <unnamed-type-Set> Set;
	/*0000*/ <unnamed-type-Query> Query;
	/*0028*/ ULONG Flags;
	/*0030*/
};

struct _PROCESS_DISK_COUNTERS {
	/*0000*/ ULONGLONG BytesRead;
	/*0008*/ ULONGLONG BytesWritten;
	/*0010*/ ULONGLONG ReadOperationCount;
	/*0018*/ ULONGLONG WriteOperationCount;
	/*0020*/ ULONGLONG FlushOperationCount;
	/*0028*/
};

struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {
	/*0000*/ ULONGLONG TargetAddress;
	/*0008*/ ULONGLONG Flags;
	/*0010*/
};

struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {
	/*0000*/ USHORT NumberOfTargets;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG Reserved2;
	/*0008*/ _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET * Targets;
	/*0010*/
};

struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE {
	/*0000*/ ULONGLONG BaseAddress;
	/*0008*/ ULONGLONG Size;
	/*0010*/ ULONG Flags;
	/*0018*/
};

struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION {
	/*0000*/ USHORT NumberOfRanges;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG Reserved2;
	/*0008*/ _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE * Ranges;
	/*0010*/
};

struct _PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION {
	/*0000*/ _DYNAMIC_FUNCTION_TABLE * DynamicFunctionTable;
	/*0008*/ UCHAR Remove;
	/*0010*/
};

enum _PROCESS_ENERGY_COMPONENT_TYPE_NUM {
	PsEnergyComponentTypeCpu = 0x0,
	PsEnergyComponentTypeStorage = 0x1,
	PsEnergyComponentTypeNetwork = 0x2,
	PsEnergyComponentTypeMBB = 0x3,
	PsEnergyComponentTypeForegroundTime = 0x4,
	PsEnergyComponentTypeDesktopVisibleTime = 0x5,
	PsEnergyComponentTypeWindowResource = 0x6,
	PsEnergyComponentTypeCompositorResource = 0x7,
	PsEnergyComponentTypeTrackingState = 0x8,
	PsEnergyComponentTypeInput = 0x9,
	PsEnergyComponentTypeAudioIn = 0xa,
	PsEnergyComponentTypeAudioOut = 0xb,
	PsEnergyComponentTypeDisplayRequired = 0xc,
	PsEnergyComponentTypeKeyboardInput = 0xd,
	PsEnergyComponentTypeMouseInput = 0xe,
	PsEnergyComponentTypeMax = 0xf
};

struct _PROCESS_ENERGY_TRACKING_STATE {
	/*0000*/ ULONG StateUpdateMask;
	/*0004*/ ULONG StateDesiredValue;
	/*0008*/ ULONG StateSequence;
	/*000c*/ ULONG UpdateTag : 01; // 0x00000001;
	/*0010*/ WCHAR Tag[0x40];
	/*0090*/
};

struct _PROCESS_ENERGY_VALUES {
	/*0000*/ ULONGLONG Cycles[0x4][0x2];
	/*0040*/ ULONGLONG DiskEnergy;
	/*0048*/ ULONGLONG NetworkTailEnergy;
	/*0050*/ ULONGLONG MBBTailEnergy;
	/*0058*/ ULONGLONG NetworkTxRxBytes;
	/*0060*/ ULONGLONG MBBTxRxBytes;
	/*0068*/ _ENERGY_STATE_DURATION Durations[0x3];
	/*0068*/ _ENERGY_STATE_DURATION ForegroundDuration;
	/*0070*/ _ENERGY_STATE_DURATION DesktopVisibleDuration;
	/*0078*/ _ENERGY_STATE_DURATION PSMForegroundDuration;
	/*0080*/ ULONG CompositionRendered;
	/*0084*/ ULONG CompositionDirtyGenerated;
	/*0088*/ ULONG CompositionDirtyPropagated;
	/*008c*/ ULONG Reserved1;
	/*0090*/ ULONGLONG AttributedCycles[0x4][0x2];
	/*00d0*/ ULONGLONG WorkOnBehalfCycles[0x4][0x2];
	/*0110*/
};

struct _PROCESS_ENERGY_VALUES_EXTENSION {
	/*0000*/ _TIMELINE_BITMAP Timelines[0xe];
	/*0000*/ _TIMELINE_BITMAP CpuTimeline;
	/*0008*/ _TIMELINE_BITMAP DiskTimeline;
	/*0010*/ _TIMELINE_BITMAP NetworkTimeline;
	/*0018*/ _TIMELINE_BITMAP MBBTimeline;
	/*0020*/ _TIMELINE_BITMAP ForegroundTimeline;
	/*0028*/ _TIMELINE_BITMAP DesktopVisibleTimeline;
	/*0030*/ _TIMELINE_BITMAP CompositionRenderedTimeline;
	/*0038*/ _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;
	/*0040*/ _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;
	/*0048*/ _TIMELINE_BITMAP InputTimeline;
	/*0050*/ _TIMELINE_BITMAP AudioInTimeline;
	/*0058*/ _TIMELINE_BITMAP AudioOutTimeline;
	/*0060*/ _TIMELINE_BITMAP DisplayRequiredTimeline;
	/*0068*/ _TIMELINE_BITMAP KeyboardInputTimeline;
	/*0070*/ _ENERGY_STATE_DURATION Durations[0x5];
	/*0070*/ _ENERGY_STATE_DURATION InputDuration;
	/*0078*/ _ENERGY_STATE_DURATION AudioInDuration;
	/*0080*/ _ENERGY_STATE_DURATION AudioOutDuration;
	/*0088*/ _ENERGY_STATE_DURATION DisplayRequiredDuration;
	/*0090*/ _ENERGY_STATE_DURATION PSMBackgroundDuration;
	/*0098*/ ULONG KeyboardInput;
	/*009c*/ ULONG MouseInput;
	/*00a0*/
};

struct _PROCESS_EXCEPTION_PORT {
	/*0000*/ void * ExceptionPortHandle;
	/*0008*/ ULONG StateFlags;
	/*0010*/
};

struct _PROCESS_EXTENDED_BASIC_INFORMATION {
	/*0000*/ ULONGLONG Size;
	/*0008*/ _PROCESS_BASIC_INFORMATION BasicInfo;
	/*0038*/ ULONG Flags;
	/*0038*/ ULONG IsProtectedProcess : 01; // 0x00000001;
	/*0038*/ ULONG IsWow64Process : 01; // 0x00000002;
	/*0038*/ ULONG IsProcessDeleting : 01; // 0x00000004;
	/*0038*/ ULONG IsCrossSessionCreate : 01; // 0x00000008;
	/*0038*/ ULONG IsFrozen : 01; // 0x00000010;
	/*0038*/ ULONG IsBackground : 01; // 0x00000020;
	/*0038*/ ULONG IsStronglyNamed : 01; // 0x00000040;
	/*0038*/ ULONG IsSecureProcess : 01; // 0x00000080;
	/*0038*/ ULONG IsSubsystemProcess : 01; // 0x00000100;
	/*0038*/ ULONG SpareBits : 23; // 0xfffffe00;
	/*0040*/
};

struct _PROCESS_EXTENDED_BASIC_INFORMATION64 {
	/*0000*/ ULONGLONG Size;
	/*0008*/ _PROCESS_BASIC_INFORMATION64 BasicInfo;
	/*0038*/ UINT Flags;
	/*0038*/ UINT IsProtectedProcess : 01; // 0x00000001;
	/*0038*/ UINT IsWow64Process : 01; // 0x00000002;
	/*0038*/ UINT IsProcessDeleting : 01; // 0x00000004;
	/*0038*/ UINT IsCrossSessionCreate : 01; // 0x00000008;
	/*0038*/ UINT IsFrozen : 01; // 0x00000010;
	/*0038*/ UINT IsBackground : 01; // 0x00000020;
	/*0038*/ UINT IsStronglyNamed : 01; // 0x00000040;
	/*0038*/ UINT IsSecureProcess : 01; // 0x00000080;
	/*0038*/ UINT IsPicoProcess : 01; // 0x00000100;
	/*0038*/ UINT SpareBits : 23; // 0xfffffe00;
	/*0040*/
};

struct _PROCESS_EXTENDED_ENERGY_VALUES {
	/*0000*/ _PROCESS_ENERGY_VALUES Base;
	/*0110*/ _PROCESS_ENERGY_VALUES_EXTENSION Extension;
	/*01b0*/
};

struct _PROCESS_FAULT_INFORMATION {
	/*0000*/ ULONG FaultFlags;
	/*0004*/ ULONG AdditionalInfo;
	/*0008*/
};

struct _PROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION {
	/*0000*/ ULONGLONG ReserveSize;
	/*0008*/ ULONGLONG CommitSize;
	/*0010*/ ULONG PreferredNode;
	/*0014*/ ULONG Reserved;
	/*0018*/ void * Ssp;
	/*0020*/
};

struct _PROCESS_FOREGROUND_BACKGROUND {
	/*0000*/ UCHAR Foreground;
	/*0001*/
};

struct _PROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION {
	/*0000*/ void * Ssp;
	/*0008*/
};

struct _PROCESS_HANDLE_INFORMATION {
	/*0000*/ ULONG HandleCount;
	/*0004*/ ULONG HandleCountHighWatermark;
	/*0008*/
};

struct _PROCESS_HANDLE_SNAPSHOT_INFORMATION {
	/*0000*/ ULONGLONG NumberOfHandles;
	/*0008*/ ULONGLONG Reserved;
	/*0010*/ _PROCESS_HANDLE_TABLE_ENTRY_INFO Handles[0x1];
	/*0038*/
};

struct _PROCESS_HANDLE_TABLE_ENTRY_INFO {
	/*0000*/ void * HandleValue;
	/*0008*/ ULONGLONG HandleCount;
	/*0010*/ ULONGLONG PointerCount;
	/*0018*/ ULONG GrantedAccess;
	/*001c*/ ULONG ObjectTypeIndex;
	/*0020*/ ULONG HandleAttributes;
	/*0024*/ ULONG Reserved;
	/*0028*/
};

struct _PROCESS_HANDLE_TRACING_ENABLE {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _PROCESS_HANDLE_TRACING_ENABLE_EX {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG TotalSlots;
	/*0008*/
};

struct _PROCESS_HANDLE_TRACING_ENTRY {
	/*0000*/ void * Handle;
	/*0008*/ _CLIENT_ID ClientId;
	/*0018*/ ULONG Type;
	/*0020*/ void * Stacks[0x10];
	/*00a0*/
};

struct _PROCESS_HANDLE_TRACING_QUERY {
	/*0000*/ void * Handle;
	/*0008*/ ULONG TotalTraces;
	/*0010*/ _PROCESS_HANDLE_TRACING_ENTRY HandleTrace[0x1];
	/*00b0*/
};

struct _PROCESS_HEAP_ENTRY {
	
	/*0000*/ void * lpData;
	/*0008*/ ULONG cbData;
	/*000c*/ UCHAR cbOverhead;
	/*000d*/ UCHAR iRegionIndex;
	/*000e*/ USHORT wFlags;
	/*0010*/ <unnamed-type-Block> Block;
	/*0010*/ <unnamed-type-Region> Region;
	/*0028*/
};

struct _PROCESS_HEAP_INFORMATION {
	/*0000*/ ULONGLONG ReserveSize;
	/*0008*/ ULONGLONG CommitSize;
	/*0010*/ ULONG NumberOfHeaps;
	/*0018*/ ULONGLONG FirstHeapInformationOffset;
	/*0020*/
};

struct _PROCESS_INFORMATION {
	/*0000*/ void * hProcess;
	/*0008*/ void * hThread;
	/*0010*/ ULONG dwProcessId;
	/*0014*/ ULONG dwThreadId;
	/*0018*/
};

enum _PROCESS_INFORMATION_CLASS {
	ProcessMemoryPriority = 0x0,
	ProcessMemoryExhaustionInfo = 0x1,
	ProcessAppMemoryInfo = 0x2,
	ProcessInPrivateInfo = 0x3,
	ProcessPowerThrottling = 0x4,
	ProcessReservedValue1 = 0x5,
	ProcessTelemetryCoverageInfo = 0x6,
	ProcessProtectionLevelInfo = 0x7,
	ProcessLeapSecondInfo = 0x8,
	ProcessMachineTypeInfo = 0x9,
	ProcessInformationClassMax = 0xa
};

struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG Callback;
	/*0010*/
};

struct _PROCESS_JOB_MEMORY_INFO {
	/*0000*/ ULONGLONG SharedCommitUsage;
	/*0008*/ ULONGLONG PrivateCommitUsage;
	/*0010*/ ULONGLONG PeakPrivateCommitUsage;
	/*0018*/ ULONGLONG PrivateCommitLimit;
	/*0020*/ ULONGLONG TotalCommitLimit;
	/*0028*/
};

struct _PROCESS_KEEPALIVE_COUNT_INFORMATION {
	/*0000*/ ULONG WakeCount;
	/*0004*/ ULONG NoWakeCount;
	/*0008*/
};

struct _PROCESS_LEAP_SECOND_INFO {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Reserved;
	/*0008*/
};

struct _PROCESS_LEAP_SECOND_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Reserved;
	/*0008*/
};

union _PROCESS_LOGGING_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableReadVmLogging : 01; // 0x00000001;
	/*0000*/ ULONG EnableWriteVmLogging : 01; // 0x00000002;
	/*0000*/ ULONG EnableProcessSuspendResumeLogging : 01; // 0x00000004;
	/*0000*/ ULONG EnableThreadSuspendResumeLogging : 01; // 0x00000008;
	/*0000*/ ULONG EnableLocalExecProtectVmLogging : 01; // 0x00000010;
	/*0000*/ ULONG EnableRemoteExecProtectVmLogging : 01; // 0x00000020;
	/*0000*/ ULONG Reserved : 26; // 0xffffffc0;
	/*0004*/
};

struct _PROCESS_MACHINE_INFORMATION {
	/*0000*/ USHORT ProcessMachine;
	/*0002*/ USHORT Res0;
	/*0004*/ _MACHINE_ATTRIBUTES MachineAttributes;
	/*0008*/
};

struct _PROCESS_MEMBERSHIP_INFORMATION {
	/*0000*/ ULONG ServerSiloId;
	/*0004*/
};

union _PROCESS_MEMORY_ALLOCATION_MODE {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG TopDown : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0004*/
};

struct _PROCESS_MEMORY_EXHAUSTION_INFO {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Reserved;
	/*0004*/ _PROCESS_MEMORY_EXHAUSTION_TYPE Type;
	/*0008*/ ULONGLONG Value;
	/*0010*/
};

enum _PROCESS_MEMORY_EXHAUSTION_TYPE {
	PMETypeFailFastOnCommitFailure = 0x0,
	PMETypeMax = 0x1
};

struct _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG AssemblyManifestRedirectionTrust : 01; // 0x00000001;
	/*0000*/ ULONG ReservedFlags : 31; // 0xfffffffe;
	/*0004*/
};

struct _PROCESS_MITIGATION_ASLR_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableBottomUpRandomization : 01; // 0x00000001;
	/*0000*/ ULONG EnableForceRelocateImages : 01; // 0x00000002;
	/*0000*/ ULONG EnableHighEntropy : 01; // 0x00000004;
	/*0000*/ ULONG DisallowStrippedImages : 01; // 0x00000008;
	/*0000*/ ULONG ReservedFlags : 28; // 0xfffffff0;
	/*0004*/
};

struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG MicrosoftSignedOnly : 01; // 0x00000001;
	/*0000*/ ULONG StoreSignedOnly : 01; // 0x00000002;
	/*0000*/ ULONG MitigationOptIn : 01; // 0x00000004;
	/*0000*/ ULONG AuditMicrosoftSignedOnly : 01; // 0x00000008;
	/*0000*/ ULONG AuditStoreSignedOnly : 01; // 0x00000010;
	/*0000*/ ULONG ReservedFlags : 27; // 0xffffffe0;
	/*0004*/
};

struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG NoChildProcessCreation : 01; // 0x00000001;
	/*0000*/ ULONG AuditNoChildProcessCreation : 01; // 0x00000002;
	/*0000*/ ULONG AllowSecureProcessCreation : 01; // 0x00000004;
	/*0000*/ ULONG ReservedFlags : 29; // 0xfffffff8;
	/*0004*/
};

struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableControlFlowGuard : 01; // 0x00000001;
	/*0000*/ ULONG EnableExportSuppression : 01; // 0x00000002;
	/*0000*/ ULONG StrictMode : 01; // 0x00000004;
	/*0000*/ ULONG EnableXfg : 01; // 0x00000008;
	/*0000*/ ULONG EnableXfgAuditMode : 01; // 0x00000010;
	/*0000*/ ULONG ReservedFlags : 27; // 0xffffffe0;
	/*0004*/
};

struct _PROCESS_MITIGATION_DEP_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG Enable : 01; // 0x00000001;
	/*0000*/ ULONG DisableAtlThunkEmulation : 01; // 0x00000002;
	/*0000*/ ULONG ReservedFlags : 30; // 0xfffffffc;
	/*0004*/ UCHAR Permanent;
	/*0008*/
};

struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG ProhibitDynamicCode : 01; // 0x00000001;
	/*0000*/ ULONG AllowThreadOptOut : 01; // 0x00000002;
	/*0000*/ ULONG AllowRemoteDowngrade : 01; // 0x00000004;
	/*0000*/ ULONG AuditProhibitDynamicCode : 01; // 0x00000008;
	/*0000*/ ULONG ReservedFlags : 28; // 0xfffffff0;
	/*0004*/
};

struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG DisableExtensionPoints : 01; // 0x00000001;
	/*0000*/ ULONG ReservedFlags : 31; // 0xfffffffe;
	/*0004*/
};

struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG DisableNonSystemFonts : 01; // 0x00000001;
	/*0000*/ ULONG AuditNonSystemFontLoading : 01; // 0x00000002;
	/*0000*/ ULONG ReservedFlags : 30; // 0xfffffffc;
	/*0004*/
};

struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG NoRemoteImages : 01; // 0x00000001;
	/*0000*/ ULONG NoLowMandatoryLabelImages : 01; // 0x00000002;
	/*0000*/ ULONG PreferSystem32Images : 01; // 0x00000004;
	/*0000*/ ULONG AuditNoRemoteImages : 01; // 0x00000008;
	/*0000*/ ULONG AuditNoLowMandatoryLabelImages : 01; // 0x00000010;
	/*0000*/ ULONG ReservedFlags : 27; // 0xffffffe0;
	/*0004*/
};

struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableExportAddressFilter : 01; // 0x00000001;
	/*0000*/ ULONG AuditExportAddressFilter : 01; // 0x00000002;
	/*0000*/ ULONG EnableExportAddressFilterPlus : 01; // 0x00000004;
	/*0000*/ ULONG AuditExportAddressFilterPlus : 01; // 0x00000008;
	/*0000*/ ULONG EnableImportAddressFilter : 01; // 0x00000010;
	/*0000*/ ULONG AuditImportAddressFilter : 01; // 0x00000020;
	/*0000*/ ULONG EnableRopStackPivot : 01; // 0x00000040;
	/*0000*/ ULONG AuditRopStackPivot : 01; // 0x00000080;
	/*0000*/ ULONG EnableRopCallerCheck : 01; // 0x00000100;
	/*0000*/ ULONG AuditRopCallerCheck : 01; // 0x00000200;
	/*0000*/ ULONG EnableRopSimExec : 01; // 0x00000400;
	/*0000*/ ULONG AuditRopSimExec : 01; // 0x00000800;
	/*0000*/ ULONG ReservedFlags : 20; // 0xfffff000;
	/*0004*/
};

enum _PROCESS_MITIGATION_POLICY {
	ProcessDEPPolicy = 0x0,
	ProcessASLRPolicy = 0x1,
	ProcessDynamicCodePolicy = 0x2,
	ProcessStrictHandleCheckPolicy = 0x3,
	ProcessSystemCallDisablePolicy = 0x4,
	ProcessMitigationOptionsMask = 0x5,
	ProcessExtensionPointDisablePolicy = 0x6,
	ProcessControlFlowGuardPolicy = 0x7,
	ProcessSignaturePolicy = 0x8,
	ProcessFontDisablePolicy = 0x9,
	ProcessImageLoadPolicy = 0xa,
	ProcessSystemCallFilterPolicy = 0xb,
	ProcessPayloadRestrictionPolicy = 0xc,
	ProcessChildProcessPolicy = 0xd,
	ProcessSideChannelIsolationPolicy = 0xe,
	ProcessUserShadowStackPolicy = 0xf,
	ProcessRedirectionTrustPolicy = 0x10,
	ProcessUserPointerAuthPolicy = 0x11,
	ProcessSEHOPPolicy = 0x12,
	ProcessActivationContextTrustPolicy = 0x13,
	MaxProcessMitigationPolicy = 0x14
};

struct _PROCESS_MITIGATION_POLICY_INFORMATION {
	/*0000*/ _PROCESS_MITIGATION_POLICY Policy;
	/*0004*/ _PROCESS_MITIGATION_ASLR_POLICY ASLRPolicy;
	/*0004*/ _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY StrictHandleCheckPolicy;
	/*0004*/ _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY SystemCallDisablePolicy;
	/*0004*/ _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY ExtensionPointDisablePolicy;
	/*0004*/ _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY DynamicCodePolicy;
	/*0004*/ _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY ControlFlowGuardPolicy;
	/*0004*/ _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY SignaturePolicy;
	/*0004*/ _PROCESS_MITIGATION_FONT_DISABLE_POLICY FontDisablePolicy;
	/*0004*/ _PROCESS_MITIGATION_IMAGE_LOAD_POLICY ImageLoadPolicy;
	/*0004*/ _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY SystemCallFilterPolicy;
	/*0004*/ _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY PayloadRestrictionPolicy;
	/*0004*/ _PROCESS_MITIGATION_CHILD_PROCESS_POLICY ChildProcessPolicy;
	/*0004*/ _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY SideChannelIsolationPolicy;
	/*0004*/ _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY UserShadowStackPolicy;
	/*0004*/ _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY RedirectionTrustPolicy;
	/*0004*/ _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY UserPointerAuthPolicy;
	/*0004*/ _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY ActivationContextTrustPolicy;
	/*0008*/
};

struct _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnforceRedirectionTrust : 01; // 0x00000001;
	/*0000*/ ULONG AuditRedirectionTrust : 01; // 0x00000002;
	/*0000*/ ULONG ReservedFlags : 30; // 0xfffffffc;
	/*0004*/
};

struct _PROCESS_MITIGATION_SEHOP_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableSehop : 01; // 0x00000001;
	/*0000*/ ULONG ReservedFlags : 31; // 0xfffffffe;
	/*0004*/
};

struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG SmtBranchTargetIsolation : 01; // 0x00000001;
	/*0000*/ ULONG IsolateSecurityDomain : 01; // 0x00000002;
	/*0000*/ ULONG DisablePageCombine : 01; // 0x00000004;
	/*0000*/ ULONG SpeculativeStoreBypassDisable : 01; // 0x00000008;
	/*0000*/ ULONG RestrictCoreSharing : 01; // 0x00000010;
	/*0000*/ ULONG ReservedFlags : 27; // 0xffffffe0;
	/*0004*/
};

struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG RaiseExceptionOnInvalidHandleReference : 01; // 0x00000001;
	/*0000*/ ULONG HandleExceptionsPermanentlyEnabled : 01; // 0x00000002;
	/*0000*/ ULONG ReservedFlags : 30; // 0xfffffffc;
	/*0004*/
};

struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG DisallowWin32kSystemCalls : 01; // 0x00000001;
	/*0000*/ ULONG AuditDisallowWin32kSystemCalls : 01; // 0x00000002;
	/*0000*/ ULONG ReservedFlags : 30; // 0xfffffffc;
	/*0004*/
};

struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG FilterId : 04; // 0x0000000f;
	/*0000*/ ULONG ReservedFlags : 28; // 0xfffffff0;
	/*0004*/
};

struct _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnablePointerAuthUserIp : 01; // 0x00000001;
	/*0000*/ ULONG ReservedFlags : 31; // 0xfffffffe;
	/*0004*/
};

struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableUserShadowStack : 01; // 0x00000001;
	/*0000*/ ULONG AuditUserShadowStack : 01; // 0x00000002;
	/*0000*/ ULONG SetContextIpValidation : 01; // 0x00000004;
	/*0000*/ ULONG AuditSetContextIpValidation : 01; // 0x00000008;
	/*0000*/ ULONG EnableUserShadowStackStrictMode : 01; // 0x00000010;
	/*0000*/ ULONG BlockNonCetBinaries : 01; // 0x00000020;
	/*0000*/ ULONG BlockNonCetBinariesNonEhcont : 01; // 0x00000040;
	/*0000*/ ULONG AuditBlockNonCetBinaries : 01; // 0x00000080;
	/*0000*/ ULONG CetDynamicApisOutOfProcOnly : 01; // 0x00000100;
	/*0000*/ ULONG SetContextIpValidationRelaxedMode : 01; // 0x00000200;
	/*0000*/ ULONG ReservedFlags : 22; // 0xfffffc00;
	/*0004*/
};

struct _PROCESS_POWER_THROTTLING_STATE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG ControlMask;
	/*0008*/ ULONG StateMask;
	/*000c*/
};

struct _PROCESS_PRIORITY_CLASS {
	/*0000*/ UCHAR Foreground;
	/*0001*/ UCHAR PriorityClass;
	/*0002*/
};

struct _PROCESS_PRIORITY_CLASS_EX {
	/*0000*/ USHORT ForegroundValid : 01; // 0x0001;
	/*0000*/ USHORT PriorityClassValid : 01; // 0x0002;
	/*0000*/ USHORT AllFlags;
	/*0002*/ UCHAR PriorityClass;
	/*0003*/ UCHAR Foreground;
	/*0004*/
};

union _PROCESS_READWRITEVM_LOGGING_INFORMATION {
	/*0000*/ UCHAR Flags;
	/*0000*/ UCHAR EnableReadVmLogging : 01; // 0x01;
	/*0000*/ UCHAR EnableWriteVmLogging : 01; // 0x02;
	/*0000*/ UCHAR Unused : 06; // 0xfc;
	/*0001*/
};

struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION {
	/*0000*/ _UNICODE_STRING TargetDevicePath;
	/*0010*/
};

struct _PROCESS_SECURITY_DOMAIN_INFORMATION {
	/*0000*/ ULONGLONG SecurityDomain;
	/*0008*/
};

struct _PROCESS_SESSION_INFORMATION {
	/*0000*/ ULONG SessionId;
	/*0004*/
};

struct _PROCESS_STACK_ALLOCATION_INFORMATION {
	/*0000*/ ULONGLONG ReserveSize;
	/*0008*/ ULONGLONG ZeroBits;
	/*0010*/ void * StackBase;
	/*0018*/
};

struct _PROCESS_STACK_ALLOCATION_INFORMATION_EX {
	/*0000*/ ULONG PreferredNode;
	/*0004*/ ULONG Reserved0;
	/*0008*/ ULONG Reserved1;
	/*000c*/ ULONG Reserved2;
	/*0010*/ _PROCESS_STACK_ALLOCATION_INFORMATION AllocInfo;
	/*0028*/
};

enum _PROCESS_STATE_CHANGE_TYPE {
	ProcessStateChangeSuspend = 0x0,
	ProcessStateChangeResume = 0x1,
	ProcessStateChangeMax = 0x2
};

struct _PROCESS_SYSCALL_PROVIDER_INFORMATION {
	/*0000*/ _GUID ProviderId;
	/*0010*/ UCHAR Level;
	/*0014*/
};

union _PROCESS_SYSTEM_RESOURCE_MANAGEMENT {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG Foreground : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0004*/
};

struct _PROCESS_TELEMETRY_ID_INFORMATION {
	/*0000*/ ULONG HeaderSize;
	/*0004*/ ULONG ProcessId;
	/*0008*/ ULONGLONG ProcessStartKey;
	/*0010*/ ULONGLONG CreateTime;
	/*0018*/ ULONGLONG CreateInterruptTime;
	/*0020*/ ULONGLONG CreateUnbiasedInterruptTime;
	/*0028*/ ULONGLONG ProcessSequenceNumber;
	/*0030*/ ULONGLONG SessionCreateTime;
	/*0038*/ ULONG SessionId;
	/*003c*/ ULONG BootId;
	/*0040*/ ULONG ImageChecksum;
	/*0044*/ ULONG ImageTimeDateStamp;
	/*0048*/ ULONG UserSidOffset;
	/*004c*/ ULONG ImagePathOffset;
	/*0050*/ ULONG PackageNameOffset;
	/*0054*/ ULONG RelativeAppNameOffset;
	/*0058*/ ULONG CommandLineOffset;
	/*0060*/
};

struct _PROCESS_TLS_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG OperationType;
	/*0008*/ ULONG ThreadDataCount;
	/*000c*/ ULONG TlsIndex;
	/*000c*/ ULONG PreviousCount;
	/*0010*/ _THREAD_TLS_INFORMATION ThreadData[0x1];
	/*0028*/
};

enum _PROCESS_TLS_INFORMATION_TYPE {
	ProcessTlsReplaceIndex = 0x0,
	ProcessTlsReplaceVector = 0x1,
	MaxProcessTlsOperation = 0x2
};

struct _PROCESS_UPTIME_INFORMATION {
	/*0000*/ ULONGLONG QueryInterruptTime;
	/*0008*/ ULONGLONG QueryUnbiasedTime;
	/*0010*/ ULONGLONG EndInterruptTime;
	/*0018*/ ULONGLONG TimeSinceCreation;
	/*0020*/ ULONGLONG Uptime;
	/*0028*/ ULONGLONG SuspendedTime;
	/*0030*/ ULONG HangCount : 04; // 0x0000000f;
	/*0030*/ ULONG GhostCount : 04; // 0x000000f0;
	/*0030*/ ULONG Crashed : 01; // 0x00000100;
	/*0030*/ ULONG Terminated : 01; // 0x00000200;
	/*0038*/
};

struct _PROCESS_WAKE_INFORMATION {
	/*0000*/ ULONGLONG NotificationChannel;
	/*0008*/ ULONG WakeCounters[0x7];
	/*0024*/ _JOBOBJECT_WAKE_FILTER WakeFilter;
	/*0030*/
};

struct _PROCESS_WINDOW_INFORMATION {
	/*0000*/ ULONG WindowFlags;
	/*0004*/ USHORT WindowTitleLength;
	/*0006*/ WCHAR WindowTitle[0x1];
	/*0008*/
};

struct _PROCESS_WORKING_SET_CONTROL {
	/*0000*/ ULONG Version;
	/*0004*/ _PROCESS_WORKING_SET_OPERATION Operation;
	/*0008*/ ULONG Flags;
	/*000c*/
};

enum _PROCESS_WORKING_SET_OPERATION {
	ProcessWorkingSetSwap = 0x0,
	ProcessWorkingSetEmpty = 0x1,
	ProcessWorkingSetOperationMax = 0x2
};

struct _PROCESS_WS_WATCH_INFORMATION {
	/*0000*/ void * FaultingPc;
	/*0008*/ void * FaultingVa;
	/*0010*/
};

struct _PROCESS_WS_WATCH_INFORMATION_EX {
	/*0000*/ _PROCESS_WS_WATCH_INFORMATION BasicInfo;
	/*0010*/ ULONGLONG FaultingThreadId;
	/*0018*/ ULONGLONG Flags;
	/*0020*/
};

struct _PROC_THREAD_ATTRIBUTE_LIST;

enum _PROC_THREAD_ATTRIBUTE_NUM {
	ProcThreadAttributeParentProcess = 0x0,
	ProcThreadAttributeHandleList = 0x2,
	ProcThreadAttributeGroupAffinity = 0x3,
	ProcThreadAttributePreferredNode = 0x4,
	ProcThreadAttributeIdealProcessor = 0x5,
	ProcThreadAttributeUmsThread = 0x6,
	ProcThreadAttributeMitigationPolicy = 0x7,
	ProcThreadAttributeSecurityCapabilities = 0x9,
	ProcThreadAttributeProtectionLevel = 0xb,
	ProcThreadAttributeJobList = 0xd,
	ProcThreadAttributeChildProcessPolicy = 0xe,
	ProcThreadAttributeAllApplicationPackagesPolicy = 0xf,
	ProcThreadAttributeWin32kFilter = 0x10,
	ProcThreadAttributeSafeOpenPromptOriginClaim = 0x11,
	ProcThreadAttributeDesktopAppPolicy = 0x12,
	ProcThreadAttributePseudoConsole = 0x16,
	ProcThreadAttributeMitigationAuditPolicy = 0x18,
	ProcThreadAttributeMachineType = 0x19,
	ProcThreadAttributeComponentFilter = 0x1a,
	ProcThreadAttributeEnableOptionalXStateFeatures = 0x1b,
	ProcThreadAttributeTrustedApp = 0x1d
};

struct _PSFEATURE_CUSTPAPER {
	/*0000*/ LONG lOrientation;
	/*0004*/ LONG lWidth;
	/*0008*/ LONG lHeight;
	/*000c*/ LONG lWidthOffset;
	/*0010*/ LONG lHeightOffset;
	/*0014*/
};

struct _PSFEATURE_OUTPUT {
	/*0000*/ INT bPageIndependent;
	/*0004*/ INT bSetPageDevice;
	/*0008*/
};

struct _PSINJECTDATA {
	/*0000*/ ULONG DataBytes;
	/*0004*/ USHORT InjectionPoint;
	/*0006*/ USHORT PageNumber;
	/*0008*/
};

struct _PS_ATTRIBUTE {
	/*0000*/ ULONGLONG Attribute;
	/*0008*/ ULONGLONG Size;
	/*0010*/ ULONGLONG Value;
	/*0010*/ void * ValuePtr;
	/*0018*/ ULONGLONG * ReturnLength;
	/*0020*/
};

struct _PS_ATTRIBUTE_LIST {
	/*0000*/ ULONGLONG TotalLength;
	/*0008*/ _PS_ATTRIBUTE Attributes[0x1];
	/*0028*/
};

enum _PS_ATTRIBUTE_NUM {
	PsAttributeParentProcess = 0x0,
	PsAttributeDebugObject = 0x1,
	PsAttributeToken = 0x2,
	PsAttributeClientId = 0x3,
	PsAttributeTebAddress = 0x4,
	PsAttributeImageName = 0x5,
	PsAttributeImageInfo = 0x6,
	PsAttributeMemoryReserve = 0x7,
	PsAttributePriorityClass = 0x8,
	PsAttributeErrorMode = 0x9,
	PsAttributeStdHandleInfo = 0xa,
	PsAttributeHandleList = 0xb,
	PsAttributeGroupAffinity = 0xc,
	PsAttributePreferredNode = 0xd,
	PsAttributeIdealProcessor = 0xe,
	PsAttributeUmsThread = 0xf,
	PsAttributeMitigationOptions = 0x10,
	PsAttributeProtectionLevel = 0x11,
	PsAttributeSecureProcess = 0x12,
	PsAttributeJobList = 0x13,
	PsAttributeChildProcessPolicy = 0x14,
	PsAttributeAllApplicationPackagesPolicy = 0x15,
	PsAttributeWin32kFilter = 0x16,
	PsAttributeSafeOpenPromptOriginClaim = 0x17,
	PsAttributeBnoIsolation = 0x18,
	PsAttributeDesktopAppPolicy = 0x19,
	PsAttributeChpe = 0x1a,
	PsAttributeMitigationAuditOptions = 0x1b,
	PsAttributeMachineType = 0x1c,
	PsAttributeComponentFilter = 0x1d,
	PsAttributeEnableOptionalXStateFeatures = 0x1e,
	PsAttributeMax = 0x1f
};

struct _PS_BNO_ISOLATION_PARAMETERS {
	/*0000*/ _UNICODE_STRING IsolationPrefix;
	/*0010*/ ULONG HandleCount;
	/*0018*/ void * * Handles;
	/*0020*/ UCHAR IsolationEnabled;
	/*0028*/
};

struct _PS_CPU_QUOTA_QUERY_ENTRY {
	/*0000*/ ULONG SessionId;
	/*0004*/ ULONG Weight;
	/*0008*/
};

struct _PS_CPU_QUOTA_QUERY_INFORMATION {
	/*0000*/ ULONG SessionCount;
	/*0004*/ _PS_CPU_QUOTA_QUERY_ENTRY SessionInformation[0x1];
	/*000c*/
};

struct _PS_CPU_QUOTA_SET_INFORMATION {
	/*0000*/ LONGLONG SessionHandle;
	/*0008*/ ULONG Weight;
	/*0010*/
};

struct _PS_CREATE_INFO {
	
	/*0000*/ ULONGLONG Size;
	/*0008*/ PS_CREATE_STATE State;
	/*0010*/ <unnamed-type-InitState> InitState;
	/*0010*/ <unnamed-type-FailSection> FailSection;
	/*0010*/ <unnamed-type-ExeFormat> ExeFormat;
	/*0010*/ <unnamed-type-ExeName> ExeName;
	/*0010*/ <unnamed-type-SuccessState> SuccessState;
	/*0058*/
};

struct _PS_MEMORY_RESERVE {
	/*0000*/ void * ReserveAddress;
	/*0008*/ ULONGLONG ReserveSize;
	/*0010*/
};

struct _PS_MITIGATION_AUDIT_OPTIONS_MAP {
	/*0000*/ ULONGLONG Map[0x3];
	/*0018*/
};

enum _PS_MITIGATION_OPTION {
	PS_MITIGATION_OPTION_NX = 0x0,
	PS_MITIGATION_OPTION_SEHOP = 0x1,
	PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 0x2,
	PS_MITIGATION_OPTION_HEAP_TERMINATE = 0x3,
	PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 0x4,
	PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 0x5,
	PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 0x6,
	PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 0x7,
	PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 0x8,
	PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 0x9,
	PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 0xa,
	PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 0xb,
	PS_MITIGATION_OPTION_FONT_DISABLE = 0xc,
	PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 0xd,
	PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 0xe,
	PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 0xf,
	PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 0x10,
	PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 0x11,
	PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 0x12,
	PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 0x13,
	PS_MITIGATION_OPTION_ROP_STACKPIVOT = 0x14,
	PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 0x15,
	PS_MITIGATION_OPTION_ROP_SIMEXEC = 0x16,
	PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 0x17,
	PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 0x18,
	PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 0x19,
	PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 0x1a,
	PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 0x1b,
	PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 0x1c,
	PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 0x1d,
	PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 0x1e,
	PS_MITIGATION_OPTION_CET_USER_SHADOW_STACKS = 0x1f,
	PS_MITIGATION_OPTION_USER_CET_SET_CONTEXT_IP_VALIDATION = 0x20,
	PS_MITIGATION_OPTION_BLOCK_NON_CET_BINARIES = 0x21,
	PS_MITIGATION_OPTION_XTENDED_CONTROL_FLOW_GUARD = 0x22,
	PS_MITIGATION_OPTION_POINTER_AUTH_USER_IP = 0x23,
	PS_MITIGATION_OPTION_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY = 0x24,
	PS_MITIGATION_OPTION_REDIRECTION_TRUST = 0x25,
	PS_MITIGATION_OPTION_RESTRICT_CORE_SHARING = 0x26
};

struct _PS_MITIGATION_OPTIONS_MAP {
	/*0000*/ ULONGLONG Map[0x3];
	/*0018*/
};

struct _PS_PKG_CLAIM {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Origin : 08; // 0x000000ff;
	/*0008*/
};

enum _PS_PROTECTED_SIGNER {
	PsProtectedSignerNone = 0x0,
	PsProtectedSignerAuthenticode = 0x1,
	PsProtectedSignerCodeGen = 0x2,
	PsProtectedSignerAntimalware = 0x3,
	PsProtectedSignerLsa = 0x4,
	PsProtectedSignerWindows = 0x5,
	PsProtectedSignerWinTcb = 0x6,
	PsProtectedSignerWinSystem = 0x7,
	PsProtectedSignerApp = 0x8,
	PsProtectedSignerMax = 0x9
};

enum _PS_PROTECTED_TYPE {
	PsProtectedTypeNone = 0x0,
	PsProtectedTypeProtectedLight = 0x1,
	PsProtectedTypeProtected = 0x2,
	PsProtectedTypeMax = 0x3
};

struct _PS_PROTECTION {
	/*0000*/ UCHAR Level;
	/*0000*/ UCHAR Type : 03; // 0x07;
	/*0000*/ UCHAR Audit : 01; // 0x08;
	/*0000*/ UCHAR Signer : 04; // 0xf0;
	/*0001*/
};

struct _PS_STD_HANDLE_INFO {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG StdHandleState : 02; // 0x00000003;
	/*0000*/ ULONG PseudoHandleMask : 03; // 0x0000001c;
	/*0004*/ ULONG StdHandleSubsystemType;
	/*0008*/
};

enum _PS_STD_HANDLE_STATE {
	PsNeverDuplicate = 0x0,
	PsRequestDuplicate = 0x1,
	PsAlwaysDuplicate = 0x2,
	PsMaxStdHandleStates = 0x3
};

struct _PS_SYSTEM_DLL_INIT_BLOCK {
	/*0000*/ ULONG Size;
	/*0008*/ ULONGLONG SystemDllWowRelocation;
	/*0010*/ ULONGLONG SystemDllNativeRelocation;
	/*0018*/ ULONGLONG Wow64SharedInformation[0x10];
	/*0098*/ ULONG RngData;
	/*009c*/ ULONG Flags;
	/*009c*/ ULONG CfgOverride : 01; // 0x00000001;
	/*009c*/ ULONG Reserved : 31; // 0xfffffffe;
	/*00a0*/ _PS_MITIGATION_OPTIONS_MAP MitigationOptionsMap;
	/*00b8*/ ULONGLONG CfgBitMap;
	/*00c0*/ ULONGLONG CfgBitMapSize;
	/*00c8*/ ULONGLONG Wow64CfgBitMap;
	/*00d0*/ ULONGLONG Wow64CfgBitMapSize;
	/*00d8*/ _PS_MITIGATION_AUDIT_OPTIONS_MAP MitigationAuditOptionsMap;
	/*00f0*/
};

enum _PS_WAKE_REASON {
	PsWakeReasonUser = 0x0,
	PsWakeReasonExecutionRequired = 0x1,
	PsWakeReasonKernel = 0x2,
	PsWakeReasonInstrumentation = 0x3,
	PsWakeReasonPreserveProcess = 0x4,
	PsWakeReasonActivityReference = 0x5,
	PsWakeReasonWorkOnBehalf = 0x6,
	PsMaxWakeReasons = 0x7
};

struct _PUBLIC_OBJECT_BASIC_INFORMATION {
	/*0000*/ ULONG Attributes;
	/*0004*/ ULONG GrantedAccess;
	/*0008*/ ULONG HandleCount;
	/*000c*/ ULONG PointerCount;
	/*0010*/ ULONG Reserved[0xa];
	/*0038*/
};

struct _QUAD {
	/*0000*/ LONGLONG UseThisFieldToCopy;
	/*0000*/ double DoNotUseThisField;
	/*0008*/
};

struct _QUERY_BAD_RANGES_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumRanges;
	/*0008*/ _QUERY_BAD_RANGES_INPUT_RANGE Ranges[0x1];
	/*0018*/
};

struct _QUERY_BAD_RANGES_INPUT_RANGE {
	/*0000*/ ULONGLONG StartOffset;
	/*0008*/ ULONGLONG LengthInBytes;
	/*0010*/
};

struct _QUERY_BAD_RANGES_OUTPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumBadRanges;
	/*0008*/ ULONGLONG NextOffsetToLookUp;
	/*0010*/ _QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[0x1];
	/*0028*/
};

struct _QUERY_BAD_RANGES_OUTPUT_RANGE {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG StartOffset;
	/*0010*/ ULONGLONG LengthInBytes;
	/*0018*/
};

struct _QUERY_CACHED_RUNS_BIN {
	/*0000*/ LONGLONG MaxLength;
	/*0008*/ ULONG RunCount;
	/*000c*/ ULONG EffectiveAllocations;
	/*0010*/
};

struct _QUERY_CACHED_RUNS_ENTRY {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG TierNameOffset;
	/*0008*/ ULONG TierNameLength;
	/*000c*/ ULONG MediaType;
	/*0010*/ LONGLONG LongestFreedRun;
	/*0018*/ LONGLONG Alignment;
	/*0020*/ ULONG TotalBins;
	/*0024*/ ULONG BinsMatched;
	/*0028*/ ULONG BinsReturned;
	/*002c*/ ULONG BinsOffset;
	/*0030*/ ULONG MaxRuns;
	/*0034*/ ULONG TotalRuns;
	/*0038*/ ULONG RunsMatched;
	/*003c*/ ULONG RunsReturned;
	/*0040*/ ULONG RunsOffset;
	/*0048*/
};

struct _QUERY_CACHED_RUNS_INPUT {
	
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ <unnamed-type-RunFilter> RunFilter;
	/*0018*/ <unnamed-type-BinFilter> BinFilter;
	/*0028*/
};

struct _QUERY_CACHED_RUNS_OUTPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG FirstEntryOffset;
	/*000c*/
};

struct _QUERY_CACHED_RUNS_RUN {
	/*0000*/ LONGLONG Lcn;
	/*0008*/ LONGLONG Length;
	/*0010*/
};

struct _QUERY_DIRECT_ACCESS_EXTENTS {
	/*0000*/ LONGLONG FileOffset;
	/*0008*/ LONGLONG Length;
	/*0010*/ ULONG Flags;
	/*0014*/ ULONG Reserved;
	/*0018*/
};

enum _QUERY_FILE_LAYOUT_FILTER_TYPE {
	QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0x0,
	QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 0x1,
	QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 0x2,
	QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 0x3,
	QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 0x4
};

struct _QUERY_FILE_LAYOUT_INPUT {
	
	/*0000*/ ULONG FilterEntryCount;
	/*0000*/ ULONG NumberOfPairs;
	/*0004*/ ULONG Flags;
	/*0008*/ _QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
	/*000c*/ ULONG Reserved;
	/*0010*/ <unnamed-type-Filter> Filter;
	/*0020*/
};

struct _QUERY_FILE_LAYOUT_OUTPUT {
	/*0000*/ ULONG FileEntryCount;
	/*0004*/ ULONG FirstFileOffset;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG Reserved;
	/*0010*/
};

struct _QUERY_PERFORMANCE_COUNTER_FLAGS {
	/*0000*/ ULONG KernelTransition : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0000*/ ULONG ul;
	/*0004*/
};

struct _QUERY_SERVICE_CONFIGA {
	/*0000*/ ULONG dwServiceType;
	/*0004*/ ULONG dwStartType;
	/*0008*/ ULONG dwErrorControl;
	/*0010*/ CHAR * lpBinaryPathName;
	/*0018*/ CHAR * lpLoadOrderGroup;
	/*0020*/ ULONG dwTagId;
	/*0028*/ CHAR * lpDependencies;
	/*0030*/ CHAR * lpServiceStartName;
	/*0038*/ CHAR * lpDisplayName;
	/*0040*/
};

struct _QUERY_SERVICE_CONFIGW {
	/*0000*/ ULONG dwServiceType;
	/*0004*/ ULONG dwStartType;
	/*0008*/ ULONG dwErrorControl;
	/*0010*/ WCHAR * lpBinaryPathName;
	/*0018*/ WCHAR * lpLoadOrderGroup;
	/*0020*/ ULONG dwTagId;
	/*0028*/ WCHAR * lpDependencies;
	/*0030*/ WCHAR * lpServiceStartName;
	/*0038*/ WCHAR * lpDisplayName;
	/*0040*/
};

struct _QUERY_SERVICE_LOCK_STATUSA {
	/*0000*/ ULONG fIsLocked;
	/*0008*/ CHAR * lpLockOwner;
	/*0010*/ ULONG dwLockDuration;
	/*0018*/
};

struct _QUERY_SERVICE_LOCK_STATUSW {
	/*0000*/ ULONG fIsLocked;
	/*0008*/ WCHAR * lpLockOwner;
	/*0010*/ ULONG dwLockDuration;
	/*0018*/
};

struct _QUERY_STORAGE_RESERVE_INPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG AreaIdOffset;
	/*000c*/ ULONG AreaIdCount;
	/*0010*/ _STORAGE_RESERVE_ID AreaId[0x1];
	/*0014*/
};

struct _QUERY_STORAGE_RESERVE_OUTPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG AreaInfoCount;
	/*0008*/ _STORAGE_RESERVE_AREA_INFO AreaInfo[0x1];
	/*0020*/
};

enum _QUEUE_USER_APC_FLAGS {
	QUEUE_USER_APC_FLAGS_NONE = 0x0,
	QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC = 0x1,
	QUEUE_USER_APC_CALLBACK_DATA_CONTEXT = 0x10000
};

struct _QUOTA_LIMITS {
	/*0000*/ ULONGLONG PagedPoolLimit;
	/*0008*/ ULONGLONG NonPagedPoolLimit;
	/*0010*/ ULONGLONG MinimumWorkingSetSize;
	/*0018*/ ULONGLONG MaximumWorkingSetSize;
	/*0020*/ ULONGLONG PagefileLimit;
	/*0028*/ _LARGE_INTEGER TimeLimit;
	/*0030*/
};

struct _QUOTA_LIMITS_EX {
	/*0000*/ ULONGLONG PagedPoolLimit;
	/*0008*/ ULONGLONG NonPagedPoolLimit;
	/*0010*/ ULONGLONG MinimumWorkingSetSize;
	/*0018*/ ULONGLONG MaximumWorkingSetSize;
	/*0020*/ ULONGLONG PagefileLimit;
	/*0028*/ _LARGE_INTEGER TimeLimit;
	/*0030*/ ULONGLONG WorkingSetLimit;
	/*0038*/ ULONGLONG Reserved2;
	/*0040*/ ULONGLONG Reserved3;
	/*0048*/ ULONGLONG Reserved4;
	/*0050*/ ULONG Flags;
	/*0054*/ _RATE_QUOTA_LIMIT CpuRateLimit;
	/*0058*/
};

struct _RASTERIZER_STATUS {
	/*0000*/ SHORT nSize;
	/*0002*/ SHORT wFlags;
	/*0004*/ SHORT nLanguageID;
	/*0006*/
};

union _RATE_QUOTA_LIMIT {
	/*0000*/ ULONG RateData;
	/*0000*/ ULONG RatePercent : 07; // 0x0000007f;
	/*0000*/ ULONG Reserved0 : 25; // 0xffffff80;
	/*0004*/
};

struct _RC_CONFIG {
	/*0000*/ ULONG dwSignature;
	/*0004*/ ULONG dwLength;
	/*0008*/ ULONG dwRCConfigVersion;
	/*000c*/ ULONG dwFilePathType;
	/*0010*/ ULONG dwFileType;
	/*0014*/ ULONG dwSystemAttributes;
	/*0018*/ ULONG dwUltimateFallbackLocation;
	/*001c*/ ULONG dwServiceCheckSum[0x4];
	/*002c*/ ULONG dwChecksum[0x4];
	/*003c*/ ULONG dwReserved1;
	/*0040*/ ULONG dwReserved2;
	/*0044*/ ULONG dwMUIFileNameOffset;
	/*0048*/ ULONG dwMUIFileNameLength;
	/*004c*/ ULONG dwMUIFilePathOffset;
	/*0050*/ ULONG dwMUIFilePathLength;
	/*0054*/ ULONG dwMainResNameTypesOffset;
	/*0058*/ ULONG dwMainResNameTypesLength;
	/*005c*/ ULONG dwMainResIDTypesOffset;
	/*0060*/ ULONG dwMainResIDTypesLength;
	/*0064*/ ULONG dwMUIResNameTypesOffset;
	/*0068*/ ULONG dwMUIResNameTypesLength;
	/*006c*/ ULONG dwMUIResIDTypesOffset;
	/*0070*/ ULONG dwMUIResIDTypesLength;
	/*0074*/ ULONG dwLanguageOffset;
	/*0078*/ ULONG dwLanguageLength;
	/*007c*/ ULONG dwUltimateFallbackLanguageOffset;
	/*0080*/ ULONG dwUltimateFallbackLanguageLength;
	/*0084*/
};

struct _RDR_CALLOUT_STATE {
	/*0000*/ LONG LastError;
	/*0008*/ void * LastEEInfo;
	/*0010*/ _RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
	/*0018*/ USHORT * ServerName;
	/*0020*/ USHORT * ServerPort;
	/*0028*/ USHORT * RemoteUser;
	/*0030*/ USHORT * AuthType;
	/*0038*/ UCHAR ResourceTypePresent;
	/*0039*/ UCHAR SessionIdPresent;
	/*003a*/ UCHAR InterfacePresent;
	/*003c*/ _GUID ResourceType;
	/*004c*/ _GUID SessionId;
	/*005c*/ _RPC_SYNTAX_IDENTIFIER Interface;
	/*0070*/ void * CertContext;
	/*0078*/
};

enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS {
	ReadDirectoryNotifyInformation = 0x1,
	ReadDirectoryNotifyExtendedInformation = 0x2,
	ReadDirectoryNotifyFullInformation = 0x3,
	ReadDirectoryNotifyMaximumInformation = 0x4
};

struct _REARRANGE_FILE_DATA {
	/*0000*/ ULONGLONG SourceStartingOffset;
	/*0008*/ ULONGLONG TargetOffset;
	/*0010*/ void * SourceFileHandle;
	/*0018*/ ULONG Length;
	/*001c*/ ULONG Flags;
	/*0020*/
};

struct _REARRANGE_FILE_DATA32 {
	/*0000*/ ULONGLONG SourceStartingOffset;
	/*0008*/ ULONGLONG TargetOffset;
	/*0010*/ UINT SourceFileHandle;
	/*0014*/ ULONG Length;
	/*0018*/ ULONG Flags;
	/*0020*/
};

struct _REASON_BUFFER {
	/*0000*/ ULONG Flags;
	/*0008*/ ULONGLONG ResourceFileNameOffset;
	/*0010*/ USHORT ResourceReasonId;
	/*0014*/ ULONG StringCount;
	/*0018*/ ULONGLONG SubstitutionStringsOffset;
	/*0008*/ ULONGLONG SimpleStringOffset;
	/*0020*/
};

struct _REASON_CONTEXT {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ <unnamed-type-Reason> Reason;
	/*0020*/
};

struct _RECTL {
	/*0000*/ LONG left;
	/*0004*/ LONG top;
	/*0008*/ LONG right;
	/*000c*/ LONG bottom;
	/*0010*/
};

struct _REDIRECTION_DESCRIPTOR {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG FunctionCount;
	/*0008*/ _REDIRECTION_FUNCTION_DESCRIPTOR const * Redirections;
	/*0010*/
};

struct _REDIRECTION_FUNCTION_DESCRIPTOR {
	/*0000*/ CHAR const * DllName;
	/*0008*/ CHAR const * FunctionName;
	/*0010*/ void * RedirectionTarget;
	/*0018*/
};

enum _REFS_COMPRESSION_FORMATS {
	REFS_COMPRESSION_FORMAT_UNCOMPRESSED = 0x0,
	REFS_COMPRESSION_FORMAT_LZ4 = 0x1,
	REFS_COMPRESSION_FORMAT_ZSTD = 0x2,
	REFS_COMPRESSION_FORMAT_MAX = 0x3
};

enum _REFS_DEALLOCATE_RANGES_ALLOCATOR {
	REFS_DEALLOCATE_RANGES_ALLOCATOR_NONE = 0x0,
	REFS_DEALLOCATE_RANGES_ALLOCATOR_SAA = 0x1,
	REFS_DEALLOCATE_RANGES_ALLOCATOR_CAA = 0x2,
	REFS_DEALLOCATE_RANGES_ALLOCATOR_MAA = 0x3
};

struct _REFS_DEALLOCATE_RANGES_INPUT_BUFFER {
	/*0000*/ ULONG RangeCount;
	/*0008*/ _REFS_DEALLOCATE_RANGES_RANGE Ranges[0x1];
	/*0018*/
};

struct _REFS_DEALLOCATE_RANGES_INPUT_BUFFER_EX {
	/*0000*/ ULONG RangeCount;
	/*0004*/ _REFS_DEALLOCATE_RANGES_ALLOCATOR Allocator;
	/*0008*/ LONGLONG StreamReserveUpdateCount;
	/*0010*/ ULONG OffsetToRanges;
	/*0014*/ ULONG OffsetToLeakCounts;
	/*0018*/ ULONGLONG Reserved[0x2];
	/*0028*/
};

struct _REFS_DEALLOCATE_RANGES_RANGE {
	/*0000*/ ULONGLONG StartOfRange;
	/*0008*/ ULONGLONG CountOfRange;
	/*0010*/
};

struct _REFS_QUERY_VOLUME_COMPRESSION_INFO_OUTPUT_BUFFER {
	/*0000*/ _REFS_COMPRESSION_FORMATS DefaultCompressionFormat;
	/*0004*/ SHORT DefaultCompressionLevel;
	/*0008*/ ULONG DefaultCompressionChunkSizeBytes;
	/*000c*/ ULONG VolumeClusterSizeBytes;
	/*0010*/ ULONGLONG TotalVolumeClusters;
	/*0018*/ ULONGLONG TotalAllocatedClusters;
	/*0020*/ ULONGLONG TotalCompressibleClustersAllocated;
	/*0028*/ ULONGLONG TotalCompressibleClustersInUse;
	/*0030*/ ULONGLONG TotalCompressedClusters;
	/*0038*/ ULONGLONG Reserved[0x6];
	/*0068*/
};

struct _REFS_QUERY_VOLUME_DEDUP_INFO_OUTPUT_BUFFER {
	/*0000*/ UCHAR Enabled;
	/*0001*/
};

struct _REFS_REMOVE_HARDLINK_BACKPOINTER {
	/*0000*/ ULONGLONG ParentDirectory;
	/*0008*/ ULONGLONG Reserved;
	/*0010*/ WCHAR FileName[0x1];
	/*0018*/
};

enum _REFS_SET_VOLUME_COMPRESSION_INFO_FLAGS {
	REFS_SET_VOLUME_COMPRESSION_INFO_FLAG_COMPRESS_SYNC = 0x1,
	REFS_SET_VOLUME_COMPRESSION_INFO_FLAG_MAX = 0x1
};

struct _REFS_SET_VOLUME_COMPRESSION_INFO_INPUT_BUFFER {
	/*0000*/ _REFS_COMPRESSION_FORMATS CompressionFormat;
	/*0004*/ SHORT CompressionLevel;
	/*0008*/ ULONG CompressionChunkSizeBytes;
	/*000c*/ _REFS_SET_VOLUME_COMPRESSION_INFO_FLAGS Flags;
	/*0010*/ ULONGLONG Reserved[0x8];
	/*0050*/
};

struct _REFS_SET_VOLUME_DEDUP_INFO_INPUT_BUFFER {
	/*0000*/ UCHAR Enable;
	/*0001*/
};

enum _REFS_SMR_VOLUME_GC_ACTION {
	SmrGcActionStart = 0x1,
	SmrGcActionStartFullSpeed = 0x2,
	SmrGcActionPause = 0x3,
	SmrGcActionStop = 0x4
};

enum _REFS_SMR_VOLUME_GC_METHOD {
	SmrGcMethodCompaction = 0x1,
	SmrGcMethodCompression = 0x2,
	SmrGcMethodRotation = 0x3
};

struct _REFS_SMR_VOLUME_GC_PARAMETERS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ _REFS_SMR_VOLUME_GC_ACTION Action;
	/*000c*/ _REFS_SMR_VOLUME_GC_METHOD Method;
	/*0010*/ ULONG IoGranularity;
	/*0014*/ ULONG CompressionFormat;
	/*0018*/ ULONGLONG Unused[0x8];
	/*0058*/
};

enum _REFS_SMR_VOLUME_GC_STATE {
	SmrGcStateInactive = 0x0,
	SmrGcStatePaused = 0x1,
	SmrGcStateActive = 0x2,
	SmrGcStateActiveFullSpeed = 0x3
};

struct _REFS_SMR_VOLUME_INFO_OUTPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ _LARGE_INTEGER SizeOfRandomlyWritableTier;
	/*0010*/ _LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
	/*0018*/ _LARGE_INTEGER SizeofSMRTier;
	/*0020*/ _LARGE_INTEGER FreeSpaceInSMRTier;
	/*0028*/ _LARGE_INTEGER UsableFreeSpaceInSMRTier;
	/*0030*/ _REFS_SMR_VOLUME_GC_STATE VolumeGcState;
	/*0034*/ LONG VolumeGcLastStatus;
	/*0038*/ ULONG CurrentGcBandFillPercentage;
	/*0040*/ ULONGLONG Unused[0x6];
	/*0070*/
};

struct _REFS_STREAM_EXTENT {
	/*0000*/ LONGLONG Vcn;
	/*0008*/ LONGLONG Lcn;
	/*0010*/ LONGLONG Length;
	/*0018*/ USHORT Properties;
	/*0020*/
};

enum _REFS_STREAM_EXTENT_PROPERTIES {
	REFS_STREAM_EXTENT_PROPERTY_VALID = 0x10,
	REFS_STREAM_EXTENT_PROPERTY_STREAM_RESERVED = 0x20,
	REFS_STREAM_EXTENT_PROPERTY_CRC32 = 0x80,
	REFS_STREAM_EXTENT_PROPERTY_CRC64 = 0x100,
	REFS_STREAM_EXTENT_PROPERTY_GHOSTED = 0x200,
	REFS_STREAM_EXTENT_PROPERTY_READONLY = 0x400,
	REFS_STREAM_EXTENT_PROPERTY_SPARSE = 0x8
};

struct _REFS_STREAM_SNAPSHOT_LIST_OUTPUT_BUFFER {
	/*0000*/ ULONG EntryCount;
	/*0004*/ ULONG BufferSizeRequiredForQuery;
	/*0008*/ ULONG Reserved[0x2];
	/*0010*/ _REFS_STREAM_SNAPSHOT_LIST_OUTPUT_BUFFER_ENTRY Entries[0x1];
	/*0048*/
};

struct _REFS_STREAM_SNAPSHOT_LIST_OUTPUT_BUFFER_ENTRY {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ USHORT SnapshotNameLength;
	/*0008*/ ULONGLONG SnapshotCreationTime;
	/*0010*/ ULONGLONG StreamSize;
	/*0018*/ ULONGLONG StreamAllocationSize;
	/*0020*/ ULONGLONG Reserved[0x2];
	/*0030*/ WCHAR SnapshotName[0x1];
	/*0038*/
};

struct _REFS_STREAM_SNAPSHOT_MANAGEMENT_INPUT_BUFFER {
	/*0000*/ _REFS_STREAM_SNAPSHOT_OPERATION Operation;
	/*0004*/ USHORT SnapshotNameLength;
	/*0006*/ USHORT OperationInputBufferLength;
	/*0008*/ ULONGLONG Reserved[0x2];
	/*0018*/ USHORT NameAndInputBuffer[0x1];
	/*0020*/
};

enum _REFS_STREAM_SNAPSHOT_OPERATION {
	REFS_STREAM_SNAPSHOT_OPERATION_INVALID = 0x0,
	REFS_STREAM_SNAPSHOT_OPERATION_CREATE = 0x1,
	REFS_STREAM_SNAPSHOT_OPERATION_LIST = 0x2,
	REFS_STREAM_SNAPSHOT_OPERATION_QUERY_DELTAS = 0x3,
	REFS_STREAM_SNAPSHOT_OPERATION_REVERT = 0x4,
	REFS_STREAM_SNAPSHOT_OPERATION_SET_SHADOW_BTREE = 0x5,
	REFS_STREAM_SNAPSHOT_OPERATION_CLEAR_SHADOW_BTREE = 0x6,
	REFS_STREAM_SNAPSHOT_OPERATION_MAX = 0x6
};

struct _REFS_STREAM_SNAPSHOT_QUERY_DELTAS_INPUT_BUFFER {
	/*0000*/ LONGLONG StartingVcn;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG Reserved;
	/*0010*/
};

struct _REFS_STREAM_SNAPSHOT_QUERY_DELTAS_OUTPUT_BUFFER {
	/*0000*/ ULONG ExtentCount;
	/*0004*/ ULONG Reserved[0x2];
	/*0010*/ _REFS_STREAM_EXTENT Extents[0x1];
	/*0030*/
};

struct _REFS_VOLUME_COUNTER_INFO_INPUT_BUFFER {
	/*0000*/ UCHAR ResetCounters;
	/*0001*/
};

enum _REG_ACTION {
	KeyAdded = 0x0,
	KeyRemoved = 0x1,
	KeyModified = 0x2
};

struct _REG_NOTIFY_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ _REG_ACTION Action;
	/*0008*/ ULONG KeyLength;
	/*000c*/ WCHAR Key[0x1];
	/*0010*/
};

struct _REMOTE_LINK_TRACKING_INFORMATION_ {
	/*0000*/ void * TargetFileObject;
	/*0008*/ ULONG TargetLinkTrackingInformationLength;
	/*000c*/ UCHAR TargetLinkTrackingInformationBuffer[0x1];
	/*0010*/
};

struct _REMOTE_NAME_INFOA {
	/*0000*/ CHAR * lpUniversalName;
	/*0008*/ CHAR * lpConnectionName;
	/*0010*/ CHAR * lpRemainingPath;
	/*0018*/
};

struct _REMOTE_NAME_INFOW {
	/*0000*/ WCHAR * lpUniversalName;
	/*0008*/ WCHAR * lpConnectionName;
	/*0010*/ WCHAR * lpRemainingPath;
	/*0018*/
};

struct _REMOTE_PORT_VIEW {
	/*0000*/ ULONG Length;
	/*0008*/ ULONGLONG ViewSize;
	/*0010*/ void * ViewBase;
	/*0018*/
};

struct _REMSECURITY_ATTRIBUTES {
	/*0000*/ ULONG nLength;
	/*0004*/ ULONG lpSecurityDescriptor;
	/*0008*/ INT bInheritHandle;
	/*000c*/
};

struct _REPAIR_COPIES_INPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ _LARGE_INTEGER FileOffset;
	/*0010*/ ULONG Length;
	/*0014*/ ULONG SourceCopy;
	/*0018*/ ULONG NumberOfRepairCopies;
	/*001c*/ ULONG RepairCopies[0x1];
	/*0020*/
};

struct _REPAIR_COPIES_OUTPUT {
	/*0000*/ ULONG Size;
	/*0004*/ LONG Status;
	/*0008*/ _LARGE_INTEGER ResumeFileOffset;
	/*0010*/
};

struct _REPAIR_STORAGE_RESERVE_INPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG AreaIdOffset;
	/*000c*/ ULONG AreaIdCount;
	/*0010*/ _STORAGE_RESERVE_ID AreaId[0x1];
	/*0014*/
};

struct _REPARSE_DATA_BUFFER {
	
	/*0000*/ ULONG ReparseTag;
	/*0004*/ USHORT ReparseDataLength;
	/*0006*/ USHORT Reserved;
	/*0008*/ <unnamed-type-SymbolicLinkReparseBuffer> SymbolicLinkReparseBuffer;
	/*0008*/ <unnamed-type-MountPointReparseBuffer> MountPointReparseBuffer;
	/*0008*/ <unnamed-type-GenericReparseBuffer> GenericReparseBuffer;
	/*0018*/
};

struct _REPARSE_DATA_BUFFER_EX {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG ExistingReparseTag;
	/*0008*/ _GUID ExistingReparseGuid;
	/*0018*/ ULONGLONG Reserved;
	/*0020*/ _REPARSE_DATA_BUFFER ReparseDataBuffer;
	/*0020*/ _REPARSE_GUID_DATA_BUFFER ReparseGuidDataBuffer;
	/*0040*/
};

struct _REPARSE_GUID_DATA_BUFFER {
	
	/*0000*/ ULONG ReparseTag;
	/*0004*/ USHORT ReparseDataLength;
	/*0006*/ USHORT Reserved;
	/*0008*/ _GUID ReparseGuid;
	/*0018*/ <unnamed-type-GenericReparseBuffer> GenericReparseBuffer;
	/*001c*/
};

struct _REPARSE_INDEX_KEY {
	/*0000*/ ULONG FileReparseTag;
	/*0004*/ _LARGE_INTEGER FileId;
	/*000c*/
};

struct _REPARSE_POINT_INFORMATION {
	/*0000*/ USHORT ReparseDataLength;
	/*0002*/ USHORT UnparsedNameLength;
	/*0004*/
};

enum _REQUESTER_TYPE {
	KernelRequester = 0x0,
	UserProcessRequester = 0x1,
	UserSharedServiceRequester = 0x2
};

struct _REQUEST_OPLOCK_INPUT_BUFFER {
	/*0000*/ USHORT StructureVersion;
	/*0002*/ USHORT StructureLength;
	/*0004*/ ULONG RequestedOplockLevel;
	/*0008*/ ULONG Flags;
	/*000c*/
};

struct _REQUEST_OPLOCK_OUTPUT_BUFFER {
	/*0000*/ USHORT StructureVersion;
	/*0002*/ USHORT StructureLength;
	/*0004*/ ULONG OriginalOplockLevel;
	/*0008*/ ULONG NewOplockLevel;
	/*000c*/ ULONG Flags;
	/*0010*/ ULONG AccessMode;
	/*0014*/ USHORT ShareMode;
	/*0018*/
};

struct _REQUEST_RAW_ENCRYPTED_DATA {
	/*0000*/ LONGLONG FileOffset;
	/*0008*/ ULONG Length;
	/*0010*/
};

struct _RESOURCEMANAGER_BASIC_INFORMATION {
	/*0000*/ _GUID ResourceManagerId;
	/*0010*/ ULONG DescriptionLength;
	/*0014*/ WCHAR Description[0x1];
	/*0018*/
};

struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
	/*0000*/ void * IoCompletionPortHandle;
	/*0008*/ ULONGLONG CompletionKey;
	/*0010*/
};

enum _RESOURCEMANAGER_INFORMATION_CLASS {
	ResourceManagerBasicInformation = 0x0,
	ResourceManagerCompletionInformation = 0x1
};

struct _RESTART_USN_JOURNAL_DATA {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Reserved[0x3];
	/*0010*/
};

struct _RESUME_PERFORMANCE {
	/*0000*/ ULONG PostTimeMs;
	/*0008*/ ULONGLONG TotalResumeTimeMs;
	/*0010*/ ULONGLONG ResumeCompleteTimestamp;
	/*0018*/
};

struct _RETRIEVAL_POINTER_BASE {
	/*0000*/ _LARGE_INTEGER FileAreaOffset;
	/*0008*/
};

struct _RGNDATA {
	/*0000*/ _RGNDATAHEADER rdh;
	/*0020*/ CHAR Buffer[0x1];
	/*0024*/
};

struct _RGNDATAHEADER {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG iType;
	/*0008*/ ULONG nCount;
	/*000c*/ ULONG nRgnSize;
	/*0010*/ tagRECT rcBound;
	/*0020*/
};

struct _RIP_INFO {
	/*0000*/ ULONG dwError;
	/*0004*/ ULONG dwType;
	/*0008*/
};

struct _RO_REGISTRATION_COOKIE {
	/*0001*/
};

enum _RPC_ASYNC_EVENT {
	RpcCallComplete = 0x0,
	RpcSendComplete = 0x1,
	RpcReceiveComplete = 0x2,
	RpcClientDisconnect = 0x3,
	RpcClientCancel = 0x4
};

union _RPC_ASYNC_NOTIFICATION_INFO {
	
	
	
	/*0000*/ <unnamed-type-APC> APC;
	/*0000*/ <unnamed-type-IOC> IOC;
	/*0000*/ <unnamed-type-HWND> HWND;
	/*0000*/ void * hEvent;
	/*0000*/ void (* NotificationRoutine)( _RPC_ASYNC_STATE * , void * , _RPC_ASYNC_EVENT );
	/*0020*/
};

struct _RPC_ASYNC_STATE {
	/*0000*/ UINT Size;
	/*0004*/ ULONG Signature;
	/*0008*/ LONG Lock;
	/*000c*/ ULONG Flags;
	/*0010*/ void * StubInfo;
	/*0018*/ void * UserInfo;
	/*0020*/ void * RuntimeInfo;
	/*0028*/ _RPC_ASYNC_EVENT Event;
	/*002c*/ _RPC_NOTIFICATION_TYPES NotificationType;
	/*0030*/ _RPC_ASYNC_NOTIFICATION_INFO u;
	/*0050*/ LONGLONG Reserved[0x4];
	/*0070*/
};

struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ComTimeout;
	/*000c*/ ULONG CallTimeout;
	/*0010*/
};

struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
	/*0000*/ ULONG Version;
	/*0008*/ UCHAR * ServerPrincName;
	/*0010*/ ULONG AuthnLevel;
	/*0014*/ ULONG AuthnSvc;
	/*0018*/ _SEC_WINNT_AUTH_IDENTITY_A * AuthIdentity;
	/*0020*/ _RPC_SECURITY_QOS * SecurityQos;
	/*0028*/
};

struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
	/*0000*/ ULONG Version;
	/*0008*/ USHORT * ServerPrincName;
	/*0010*/ ULONG AuthnLevel;
	/*0014*/ ULONG AuthnSvc;
	/*0018*/ _SEC_WINNT_AUTH_IDENTITY_W * AuthIdentity;
	/*0020*/ _RPC_SECURITY_QOS * SecurityQos;
	/*0028*/
};

struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ProtocolSequence;
	/*0010*/ UCHAR * NetworkAddress;
	/*0018*/ UCHAR * StringEndpoint;
	/*0020*/ <unnamed-type-u1> u1;
	/*0028*/ _GUID ObjectUuid;
	/*0038*/
};

struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ProtocolSequence;
	/*0010*/ USHORT * NetworkAddress;
	/*0018*/ USHORT * StringEndpoint;
	/*0020*/ <unnamed-type-u1> u1;
	/*0028*/ _GUID ObjectUuid;
	/*0038*/
};

struct _RPC_BINDING_VECTOR {
	/*0000*/ ULONG Count;
	/*0008*/ void * BindingH[0x1];
	/*0010*/
};

struct _RPC_CALL_LOCAL_ADDRESS_V1 {
	/*0000*/ UINT Version;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG BufferSize;
	/*0014*/ tagRpcLocalAddressFormat AddressFormat;
	/*0018*/
};

struct _RPC_CLIENT_INTERFACE {
	/*0000*/ UINT Length;
	/*0004*/ _RPC_SYNTAX_IDENTIFIER InterfaceId;
	/*0018*/ _RPC_SYNTAX_IDENTIFIER TransferSyntax;
	/*0030*/ RPC_DISPATCH_TABLE * DispatchTable;
	/*0038*/ UINT RpcProtseqEndpointCount;
	/*0040*/ _RPC_PROTSEQ_ENDPOINT * RpcProtseqEndpoint;
	/*0048*/ ULONGLONG Reserved;
	/*0050*/ void const * InterpreterInfo;
	/*0058*/ UINT Flags;
	/*0060*/
};

struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR {
	/*0000*/ ULONG BufferSize;
	/*0008*/ CHAR * Buffer;
	/*0010*/
};

enum _RPC_HTTP_REDIRECTOR_STAGE {
	RPCHTTP_RS_REDIRECT = 0x1,
	RPCHTTP_RS_ACCESS_1 = 0x2,
	RPCHTTP_RS_SESSION = 0x3,
	RPCHTTP_RS_ACCESS_2 = 0x4,
	RPCHTTP_RS_INTERFACE = 0x5
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {
	/*0000*/ _SEC_WINNT_AUTH_IDENTITY_A * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ UCHAR * ServerCertificateSubject;
	/*0028*/
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A {
	/*0000*/ _SEC_WINNT_AUTH_IDENTITY_A * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ UCHAR * ServerCertificateSubject;
	/*0028*/ _SEC_WINNT_AUTH_IDENTITY_A * ProxyCredentials;
	/*0030*/ ULONG NumberOfProxyAuthnSchemes;
	/*0038*/ ULONG * ProxyAuthnSchemes;
	/*0040*/
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W {
	/*0000*/ _SEC_WINNT_AUTH_IDENTITY_W * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ USHORT * ServerCertificateSubject;
	/*0028*/ _SEC_WINNT_AUTH_IDENTITY_W * ProxyCredentials;
	/*0030*/ ULONG NumberOfProxyAuthnSchemes;
	/*0038*/ ULONG * ProxyAuthnSchemes;
	/*0040*/
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A {
	/*0000*/ void * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ UCHAR * ServerCertificateSubject;
	/*0028*/ void * ProxyCredentials;
	/*0030*/ ULONG NumberOfProxyAuthnSchemes;
	/*0038*/ ULONG * ProxyAuthnSchemes;
	/*0040*/
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W {
	/*0000*/ void * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ USHORT * ServerCertificateSubject;
	/*0028*/ void * ProxyCredentials;
	/*0030*/ ULONG NumberOfProxyAuthnSchemes;
	/*0038*/ ULONG * ProxyAuthnSchemes;
	/*0040*/
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {
	/*0000*/ _SEC_WINNT_AUTH_IDENTITY_W * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ USHORT * ServerCertificateSubject;
	/*0028*/
};

struct _RPC_IF_ID {
	/*0000*/ _GUID Uuid;
	/*0010*/ USHORT VersMajor;
	/*0012*/ USHORT VersMinor;
	/*0014*/
};

struct _RPC_MESSAGE {
	/*0000*/ void * Handle;
	/*0008*/ ULONG DataRepresentation;
	/*0010*/ void * Buffer;
	/*0018*/ UINT BufferLength;
	/*001c*/ UINT ProcNum;
	/*0020*/ _RPC_SYNTAX_IDENTIFIER * TransferSyntax;
	/*0028*/ void * RpcInterfaceInformation;
	/*0030*/ void * ReservedForRuntime;
	/*0038*/ void * ManagerEpv;
	/*0040*/ void * ImportContext;
	/*0048*/ ULONG RpcFlags;
	/*0050*/
};

enum _RPC_NOTIFICATIONS {
	RpcNotificationCallNone = 0x0,
	RpcNotificationClientDisconnect = 0x1,
	RpcNotificationCallCancel = 0x2
};

enum _RPC_NOTIFICATION_TYPES {
	RpcNotificationTypeNone = 0x0,
	RpcNotificationTypeEvent = 0x1,
	RpcNotificationTypeApc = 0x2,
	RpcNotificationTypeIoc = 0x3,
	RpcNotificationTypeHwnd = 0x4,
	RpcNotificationTypeCallback = 0x5
};

struct _RPC_POLICY {
	/*0000*/ UINT Length;
	/*0004*/ ULONG EndpointFlags;
	/*0008*/ ULONG NICFlags;
	/*000c*/
};

struct _RPC_PROTSEQ_ENDPOINT {
	/*0000*/ UCHAR * RpcProtocolSequence;
	/*0008*/ UCHAR * Endpoint;
	/*0010*/
};

struct _RPC_PROTSEQ_VECTORA {
	/*0000*/ UINT Count;
	/*0008*/ UCHAR * Protseq[0x1];
	/*0010*/
};

struct _RPC_PROTSEQ_VECTORW {
	/*0000*/ UINT Count;
	/*0008*/ USHORT * Protseq[0x1];
	/*0010*/
};

struct _RPC_SECURITY_QOS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/
};

struct _RPC_SECURITY_QOS_V2_A {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/
};

struct _RPC_SECURITY_QOS_V2_W {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/
};

struct _RPC_SECURITY_QOS_V3_A {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/
};

struct _RPC_SECURITY_QOS_V3_W {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/
};

struct _RPC_SECURITY_QOS_V4_A {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/ UINT EffectiveOnly;
	/*0030*/
};

struct _RPC_SECURITY_QOS_V4_W {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/ UINT EffectiveOnly;
	/*0030*/
};

struct _RPC_SECURITY_QOS_V5_A {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/ UINT EffectiveOnly;
	/*0030*/ void * ServerSecurityDescriptor;
	/*0038*/
};

struct _RPC_SECURITY_QOS_V5_W {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/ UINT EffectiveOnly;
	/*0030*/ void * ServerSecurityDescriptor;
	/*0038*/
};

struct _RPC_SEC_CONTEXT_KEY_INFO {
	/*0000*/ ULONG EncryptAlgorithm;
	/*0004*/ ULONG KeySize;
	/*0008*/ ULONG SignatureAlgorithm;
	/*000c*/
};

struct _RPC_SERVER_INTERFACE {
	/*0000*/ UINT Length;
	/*0004*/ _RPC_SYNTAX_IDENTIFIER InterfaceId;
	/*0018*/ _RPC_SYNTAX_IDENTIFIER TransferSyntax;
	/*0030*/ RPC_DISPATCH_TABLE * DispatchTable;
	/*0038*/ UINT RpcProtseqEndpointCount;
	/*0040*/ _RPC_PROTSEQ_ENDPOINT * RpcProtseqEndpoint;
	/*0048*/ void * DefaultManagerEpv;
	/*0050*/ void const * InterpreterInfo;
	/*0058*/ UINT Flags;
	/*0060*/
};

struct _RPC_SYNTAX_IDENTIFIER {
	/*0000*/ _GUID SyntaxGUID;
	/*0010*/ _RPC_VERSION SyntaxVersion;
	/*0014*/
};

struct _RPC_TRANSFER_SYNTAX {
	/*0000*/ _GUID Uuid;
	/*0010*/ USHORT VersMajor;
	/*0012*/ USHORT VersMinor;
	/*0014*/
};

struct _RPC_VERSION {
	/*0000*/ USHORT MajorVersion;
	/*0002*/ USHORT MinorVersion;
	/*0004*/
};

enum _RTC_ErrorNumber {
	_RTC_CHKSTK = 0x0,
	_RTC_CVRT_LOSS_INFO = 0x1,
	_RTC_CORRUPT_STACK = 0x2,
	_RTC_UNINIT_LOCAL_USE = 0x3,
	_RTC_CORRUPTED_ALLOCA = 0x4,
	_RTC_ILLEGAL = 0x5
};

struct _RTLP_CURDIR_REF;

struct _RTLP_HEAP_SERIALIZED_MAPPING {
	/*0000*/ ULONGLONG Allocation;
	/*0008*/ void * StackReference;
	/*0010*/ ULONGLONG Size;
	/*0018*/
};

struct _RTLP_HEAP_STACK_TRACE_SERIALIZATION_HEADER {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT PointerSize;
	/*0008*/ ULONGLONG Heap;
	/*0010*/ ULONGLONG TotalCommit;
	/*0018*/ ULONGLONG TotalReserve;
	/*0020*/
};

struct _RTLP_HEAP_TAGGING_INFO {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Flags;
	/*0008*/ void * Process;
	/*0010*/ ULONGLONG EntriesCount;
	/*0018*/ _RTLP_TAG_INFO Entries[0x1];
	/*0030*/
};

struct _RTLP_PROCESS_REFLECTION_CONTEXT {
	/*0000*/ ULONGLONG ReflectionContextSize;
	/*0008*/ ULONG ReflectionFlags;
	/*0010*/ LONG (* ReflectionRoutine)( void * );
	/*0018*/ void * ReflectionParameter;
	/*0020*/ void * ReflectedProcessCreatedEvent;
	/*0028*/ void * ReflectedProcessHandlesDuplicatedEvent;
	/*0030*/ void * ReflectionStartEvent;
	/*0038*/ _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION ReflectionInformation;
	/*0058*/
};

struct _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION {
	/*0000*/ void * ReflectionProcessHandle;
	/*0008*/ void * ReflectionThreadHandle;
	/*0010*/ _CLIENT_ID ReflectionClientId;
	/*0020*/
};

struct _RTLP_TAG_INFO {
	/*0000*/ _GUID Id;
	/*0010*/ ULONGLONG CurrentAllocatedBytes;
	/*0018*/
};

struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
	/*0000*/ _RTL_ACTIVATION_CONTEXT_STACK_FRAME * Previous;
	/*0008*/ _ACTIVATION_CONTEXT * ActivationContext;
	/*0010*/ ULONG Flags;
	/*0018*/
};

struct _RTL_AVL_TABLE {
	/*0000*/ _RTL_BALANCED_LINKS BalancedRoot;
	/*0020*/ void * OrderedPointer;
	/*0028*/ ULONG WhichOrderedElement;
	/*002c*/ ULONG NumberGenericTableElements;
	/*0030*/ ULONG DepthOfTree;
	/*0038*/ _RTL_BALANCED_LINKS * RestartKey;
	/*0040*/ ULONG DeleteCount;
	/*0048*/ _RTL_GENERIC_COMPARE_RESULTS (* CompareRoutine)( _RTL_AVL_TABLE * , void * , void * );
	/*0050*/ void * (* AllocateRoutine)( _RTL_AVL_TABLE * , ULONG );
	/*0058*/ void (* FreeRoutine)( _RTL_AVL_TABLE * , void * );
	/*0060*/ void * TableContext;
	/*0068*/
};

struct _RTL_AVL_TREE {
	/*0000*/ _RTL_BALANCED_NODE * Root;
	/*0008*/
};

struct _RTL_BACKOFF {
	/*0000*/ ULONG Delay;
	/*0004*/
};

struct _RTL_BALANCED_LINKS {
	/*0000*/ _RTL_BALANCED_LINKS * Parent;
	/*0008*/ _RTL_BALANCED_LINKS * LeftChild;
	/*0010*/ _RTL_BALANCED_LINKS * RightChild;
	/*0018*/ CHAR Balance;
	/*0019*/ UCHAR Reserved[0x3];
	/*0020*/
};

struct _RTL_BALANCED_NODE {
	/*0000*/ _RTL_BALANCED_NODE * Children[0x2];
	/*0000*/ _RTL_BALANCED_NODE * Left;
	/*0008*/ _RTL_BALANCED_NODE * Right;
	/*0010*/ UCHAR Red : 01; // 0x01;
	/*0010*/ UCHAR Balance : 02; // 0x03;
	/*0010*/ ULONGLONG ParentValue;
	/*0018*/
};

struct _RTL_BARRIER {
	
	/*0000*/ LONG volatile Barrier;
	/*0004*/ LONG LeftBarrier;
	/*0008*/ void * WaitEvent[0x2];
	/*0018*/ LONG TotalProcessors;
	/*001c*/ ULONG Spins;
	/*0000*/ <unnamed-type-DUMMYRESERVEDSTRUCTNAME> DUMMYRESERVEDSTRUCTNAME;
	/*0020*/
};

struct _RTL_BITMAP {
	/*0000*/ ULONG SizeOfBitMap;
	/*0008*/ ULONG * Buffer;
	/*0010*/
};

struct _RTL_BITMAP_EX {
	/*0000*/ ULONGLONG SizeOfBitMap;
	/*0008*/ ULONGLONG * Buffer;
	/*0010*/
};

struct _RTL_BITMAP_RUN {
	/*0000*/ ULONG StartingIndex;
	/*0004*/ ULONG NumberOfBits;
	/*0008*/
};

struct _RTL_BSD_ITEM {
	/*0000*/ RTL_BSD_ITEM_TYPE Type;
	/*0008*/ void * DataBuffer;
	/*0010*/ ULONG DataLength;
	/*0018*/
};

struct _RTL_BUFFER {
	/*0000*/ UCHAR * Buffer;
	/*0008*/ UCHAR * StaticBuffer;
	/*0010*/ ULONGLONG Size;
	/*0018*/ ULONGLONG StaticSize;
	/*0020*/
};

struct _RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_BASIC {
	/*0000*/ ULONGLONG Size;
	/*0008*/ ULONG Format;
	/*0010*/ _RTL_ACTIVATION_CONTEXT_STACK_FRAME Frame;
	/*0028*/
};

struct _RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_EXTENDED {
	/*0000*/ ULONGLONG Size;
	/*0008*/ ULONG Format;
	/*0010*/ _RTL_ACTIVATION_CONTEXT_STACK_FRAME Frame;
	/*0028*/ void * Extra1;
	/*0030*/ void * Extra2;
	/*0038*/ void * Extra3;
	/*0040*/ void * Extra4;
	/*0048*/
};

struct _RTL_CIRCULAR_LIST_HEAD {
	/*0000*/ _LIST_ENTRY * HeadEntry;
	/*0008*/
};

struct _RTL_CONDITION_VARIABLE {
	/*0000*/ ULONGLONG WakeCount : 03; // 0x0000000000000007;
	/*0000*/ ULONGLONG Waking : 01; // 0x0000000000000008;
	/*0000*/ ULONGLONG Value;
	/*0000*/ void * Ptr;
	/*0008*/
};

class _RTL_CONSTANT_STRING_remove_const_template_class<1> {
	/*0001*/
};

class _RTL_CONSTANT_STRING_remove_const_template_class<2> {
	/*0001*/
};

struct _RTL_CRITICAL_SECTION {
	/*0000*/ _RTL_CRITICAL_SECTION_DEBUG * DebugInfo;
	/*0008*/ LONG LockCount;
	/*000c*/ LONG RecursionCount;
	/*0010*/ void * OwningThread;
	/*0018*/ void * LockSemaphore;
	/*0020*/ ULONGLONG SpinCount;
	/*0028*/
};

struct _RTL_CRITICAL_SECTION32 {
	/*0000*/ ULONG DebugInfo;
	/*0004*/ LONG LockCount;
	/*0008*/ LONG RecursionCount;
	/*000c*/ ULONG OwningThread;
	/*0010*/ ULONG LockSemaphore;
	/*0014*/ ULONG SpinCount;
	/*0018*/
};

struct _RTL_CRITICAL_SECTION64 {
	/*0000*/ ULONGLONG DebugInfo;
	/*0008*/ LONG LockCount;
	/*000c*/ LONG RecursionCount;
	/*0010*/ ULONGLONG OwningThread;
	/*0018*/ ULONGLONG LockSemaphore;
	/*0020*/ ULONGLONG SpinCount;
	/*0028*/
};

struct _RTL_CRITICAL_SECTION_DEBUG {
	/*0000*/ USHORT Type;
	/*0002*/ USHORT CreatorBackTraceIndex;
	/*0008*/ _RTL_CRITICAL_SECTION * CriticalSection;
	/*0010*/ _LIST_ENTRY ProcessLocksList;
	/*0020*/ ULONG EntryCount;
	/*0024*/ ULONG ContentionCount;
	/*0028*/ ULONG Flags;
	/*002c*/ USHORT CreatorBackTraceIndexHigh;
	/*002e*/ USHORT Identifier;
	/*0030*/
};

struct _RTL_CRITICAL_SECTION_DEBUG32 {
	/*0000*/ USHORT Type;
	/*0002*/ USHORT CreatorBackTraceIndex;
	/*0004*/ ULONG CriticalSection;
	/*0008*/ LIST_ENTRY32 ProcessLocksList;
	/*0010*/ ULONG EntryCount;
	/*0014*/ ULONG ContentionCount;
	/*0018*/ ULONG Flags;
	/*001c*/ USHORT CreatorBackTraceIndexHigh;
	/*001e*/ USHORT Identifier;
	/*0020*/
};

struct _RTL_CRITICAL_SECTION_DEBUG64 {
	/*0000*/ USHORT Type;
	/*0002*/ USHORT CreatorBackTraceIndex;
	/*0008*/ ULONGLONG CriticalSection;
	/*0010*/ LIST_ENTRY64 ProcessLocksList;
	/*0020*/ ULONG EntryCount;
	/*0024*/ ULONG ContentionCount;
	/*0028*/ ULONG Flags;
	/*002c*/ USHORT CreatorBackTraceIndexHigh;
	/*002e*/ USHORT Identifier;
	/*0030*/
};

struct _RTL_DEBUG_INFORMATION {
	/*0000*/ void * SectionHandleClient;
	/*0008*/ void * ViewBaseClient;
	/*0010*/ void * ViewBaseTarget;
	/*0018*/ ULONGLONG ViewBaseDelta;
	/*0020*/ void * EventPairClient;
	/*0028*/ void * EventPairTarget;
	/*0030*/ void * TargetProcessId;
	/*0038*/ void * TargetThreadHandle;
	/*0040*/ ULONG Flags;
	/*0048*/ ULONGLONG OffsetFree;
	/*0050*/ ULONGLONG CommitSize;
	/*0058*/ ULONGLONG ViewSize;
	/*0060*/ _RTL_PROCESS_MODULES * Modules;
	/*0060*/ _RTL_PROCESS_MODULE_INFORMATION_EX * ModulesEx;
	/*0068*/ _RTL_PROCESS_BACKTRACES * BackTraces;
	/*0070*/ _RTL_PROCESS_HEAPS * Heaps;
	/*0078*/ _RTL_PROCESS_LOCKS * Locks;
	/*0080*/ void * SpecificHeap;
	/*0088*/ void * TargetProcessHandle;
	/*0090*/ _RTL_PROCESS_VERIFIER_OPTIONS * VerifierOptions;
	/*0098*/ void * ProcessHeap;
	/*00a0*/ void * CriticalSectionHandle;
	/*00a8*/ void * CriticalSectionOwnerThread;
	/*00b0*/ void * Reserved[0x4];
	/*00d0*/
};

struct _RTL_DEBUG_INFORMATION32 {
	/*0000*/ ULONG SectionHandleClient;
	/*0004*/ ULONG ViewBaseClient;
	/*0008*/ ULONG ViewBaseTarget;
	/*000c*/ ULONG ViewBaseDelta;
	/*0010*/ ULONG EventPairClient;
	/*0014*/ ULONG EventPairTarget;
	/*0018*/ ULONG TargetProcessId;
	/*001c*/ ULONG TargetThreadHandle;
	/*0020*/ ULONG Flags;
	/*0024*/ ULONG OffsetFree;
	/*0028*/ ULONG CommitSize;
	/*002c*/ ULONG ViewSize;
	/*0030*/ ULONG Modules;
	/*0030*/ ULONG ModulesEx;
	/*0034*/ ULONG BackTraces;
	/*0038*/ ULONG Heaps;
	/*003c*/ ULONG Locks;
	/*0040*/ ULONG SpecificHeap;
	/*0044*/ ULONG TargetProcessHandle;
	/*0048*/ ULONG VerifierOptions;
	/*004c*/ ULONG ProcessHeap;
	/*0050*/ ULONG CriticalSectionHandle;
	/*0054*/ ULONG CriticalSectionOwnerThread;
	/*0058*/ ULONG Reserved[0x4];
	/*0068*/
};

struct _RTL_DISK_SPACE_INFO {
	/*0000*/ RTL_DISK_SPACE_POLICY Policy;
	/*0004*/
};

struct _RTL_DISK_SPEED_INFO {
	/*0000*/ RTL_DISK_SPEED_POLICY Policy;
	/*0004*/
};

struct _RTL_DISK_WRITE_CONSTRAINT_INFO {
	/*0000*/ RTL_DISK_WRITE_CONSTRAINT_POLICY Policy;
	/*0004*/
};

struct _RTL_DRIVE_LETTER_CURDIR {
	/*0000*/ USHORT Flags;
	/*0002*/ USHORT Length;
	/*0004*/ ULONG TimeStamp;
	/*0008*/ _STRING DosPath;
	/*0018*/
};

struct _RTL_DYNAMIC_HASH_TABLE {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Shift;
	/*0008*/ ULONG TableSize;
	/*000c*/ ULONG Pivot;
	/*0010*/ ULONG DivisorMask;
	/*0014*/ ULONG NumEntries;
	/*0018*/ ULONG NonEmptyBuckets;
	/*001c*/ ULONG NumEnumerators;
	/*0020*/ void * Directory;
	/*0028*/
};

struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
	/*0000*/ _LIST_ENTRY * ChainHead;
	/*0008*/ _LIST_ENTRY * PrevLinkage;
	/*0010*/ ULONGLONG Signature;
	/*0018*/
};

struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
	/*0000*/ _LIST_ENTRY Linkage;
	/*0010*/ ULONGLONG Signature;
	/*0018*/
};

struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
	/*0000*/ _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
	/*0000*/ _LIST_ENTRY * CurEntry;
	/*0018*/ _LIST_ENTRY * ChainHead;
	/*0020*/ ULONG BucketIndex;
	/*0028*/
};

struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION {
	/*0000*/ _RTL_TIME_ZONE_INFORMATION tzi;
	/*00ac*/ WCHAR TimeZoneKeyName[0x80];
	/*01ac*/ UCHAR DynamicDaylightTimeDisabled;
	/*01b0*/
};

union _RTL_ELEVATION_FLAGS {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG ElevationEnabled : 01; // 0x00000001;
	/*0000*/ ULONG VirtualizationEnabled : 01; // 0x00000002;
	/*0000*/ ULONG InstallerDetectEnabled : 01; // 0x00000004;
	/*0000*/ ULONG ReservedBits : 29; // 0xfffffff8;
	/*0004*/
};

struct _RTL_ENCLAVE_LAUNCH_TOKEN {
	/*0000*/ UCHAR Measurement[0x20];
	/*0020*/ UCHAR AuthorId[0x20];
	/*0040*/ UCHAR FamilyId[0x10];
	/*0050*/ UCHAR ImageId[0x10];
	/*0060*/ ULONGLONG EnclaveSize;
	/*0068*/ ULONG EnclaveSvn;
	/*006c*/ ULONG PolicyFlags;
	/*0070*/
};

struct _RTL_FEATURE_CONFIGURATION {
	/*0000*/ UINT FeatureId;
	/*0004*/ UINT Priority : 04; // 0x0000000f;
	/*0004*/ UINT EnabledState : 02; // 0x00000030;
	/*0004*/ UINT IsWexpConfiguration : 01; // 0x00000040;
	/*0004*/ UINT HasSubscriptions : 01; // 0x00000080;
	/*0004*/ UINT Variant : 06; // 0x00003f00;
	/*0004*/ UINT VariantPayloadKind : 02; // 0x0000c000;
	/*0008*/ UINT VariantPayload;
	/*000c*/
};

enum _RTL_FEATURE_CONFIGURATION_OPERATION {
	FeatureConfigurationOperationNone = 0x0,
	FeatureConfigurationOperationFeatureState = 0x1,
	FeatureConfigurationOperationVariantState = 0x2,
	FeatureConfigurationOperationResetState = 0x4
};

enum _RTL_FEATURE_CONFIGURATION_PRIORITY {
	FeatureConfigurationPriorityImageDefault = 0x0,
	FeatureConfigurationPrioritySafeguard = 0x2,
	FeatureConfigurationPriorityService = 0x4,
	FeatureConfigurationPriorityDynamic = 0x6,
	FeatureConfigurationPriorityUser = 0x8,
	FeatureConfigurationPrioritySecurity = 0x9,
	FeatureConfigurationPriorityUserPolicy = 0xa,
	FeatureConfigurationPriorityTest = 0xc,
	FeatureConfigurationPriorityImageOverride = 0xf,
	FeatureConfigurationPriorityMax = 0xf
};

struct _RTL_FEATURE_CONFIGURATION_TABLE {
	/*0000*/ ULONG FeatureCount;
	/*0004*/ _RTL_FEATURE_CONFIGURATION Features[0x1];
	/*0010*/
};

enum _RTL_FEATURE_CONFIGURATION_TYPE {
	RtlFeatureConfigurationBoot = 0x0,
	RtlFeatureConfigurationRuntime = 0x1,
	RtlFeatureConfigurationCount = 0x2
};

struct _RTL_FEATURE_CONFIGURATION_UPDATE {
	/*0000*/ UINT FeatureId;
	/*0004*/ _RTL_FEATURE_CONFIGURATION_PRIORITY Priority;
	/*0008*/ _RTL_FEATURE_ENABLED_STATE EnabledState;
	/*000c*/ _RTL_FEATURE_ENABLED_STATE_OPTIONS EnabledStateOptions;
	/*0010*/ UCHAR Variant;
	/*0011*/ UCHAR Reserved[0x3];
	/*0014*/ _RTL_FEATURE_VARIANT_PAYLOAD_KIND VariantPayloadKind;
	/*0018*/ UINT VariantPayload;
	/*001c*/ _RTL_FEATURE_CONFIGURATION_OPERATION Operation;
	/*0020*/
};

enum _RTL_FEATURE_ENABLED_STATE {
	FeatureEnabledStateDefault = 0x0,
	FeatureEnabledStateDisabled = 0x1,
	FeatureEnabledStateEnabled = 0x2
};

enum _RTL_FEATURE_ENABLED_STATE_OPTIONS {
	FeatureEnabledStateOptionsNone = 0x0,
	FeatureEnabledStateOptionsWexpConfig = 0x1
};

struct _RTL_FEATURE_USAGE_DATA {
	/*0000*/ UINT FeatureId;
	/*0004*/ USHORT ReportingKind;
	/*0006*/ USHORT Reserved;
	/*0008*/
};

struct _RTL_FEATURE_USAGE_REPORT {
	/*0000*/ UINT FeatureId;
	/*0004*/ USHORT ReportingKind;
	/*0006*/ USHORT ReportingOptions;
	/*0008*/
};

struct _RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS {
	/*0000*/ UINT FeatureId;
	/*0004*/ USHORT ReportingKind;
	/*0006*/ USHORT ReportingOptions;
	/*0008*/ _RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET ReportingTarget;
	/*0010*/
};

struct _RTL_FEATURE_USAGE_SUBSCRIPTION_TABLE {
	/*0000*/ ULONG SubscriptionCount;
	/*0004*/ _RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS Subscriptions[0x1];
	/*0014*/
};

struct _RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET {
	/*0000*/ ULONG Data[0x2];
	/*0008*/
};

enum _RTL_FEATURE_VARIANT_PAYLOAD_KIND {
	FeatureVariantPayloadKindNone = 0x0,
	FeatureVariantPayloadKindResident = 0x1,
	FeatureVariantPayloadKindExternal = 0x2
};

enum _RTL_GENERIC_COMPARE_RESULTS {
	GenericLessThan = 0x0,
	GenericGreaterThan = 0x1,
	GenericEqual = 0x2
};

struct _RTL_GENERIC_TABLE {
	/*0000*/ _RTL_SPLAY_LINKS * TableRoot;
	/*0008*/ _LIST_ENTRY InsertOrderList;
	/*0018*/ _LIST_ENTRY * OrderedPointer;
	/*0020*/ ULONG WhichOrderedElement;
	/*0024*/ ULONG NumberGenericTableElements;
	/*0028*/ _RTL_GENERIC_COMPARE_RESULTS (* CompareRoutine)( _RTL_GENERIC_TABLE * , void * , void * );
	/*0030*/ void * (* AllocateRoutine)( _RTL_GENERIC_TABLE * , ULONG );
	/*0038*/ void (* FreeRoutine)( _RTL_GENERIC_TABLE * , void * );
	/*0040*/ void * TableContext;
	/*0048*/
};

struct _RTL_HANDLE_TABLE {
	/*0000*/ ULONG MaximumNumberOfHandles;
	/*0004*/ ULONG SizeOfHandleTableEntry;
	/*0008*/ ULONG UseHeap;
	/*000c*/ ULONG TableSize;
	/*0010*/ _RTL_HANDLE_TABLE_ENTRY * FreeHandles;
	/*0018*/ _RTL_HANDLE_TABLE_ENTRY * CommittedHandles;
	/*0020*/ _RTL_HANDLE_TABLE_ENTRY * UnCommittedHandles;
	/*0028*/ _RTL_HANDLE_TABLE_ENTRY * MaxReservedHandles;
	/*0030*/
};

struct _RTL_HANDLE_TABLE_ENTRY {
	/*0000*/ ULONG Flags;
	/*0000*/ _RTL_HANDLE_TABLE_ENTRY * NextFree;
	/*0008*/
};

struct _RTL_HASH_ENTRY {
	/*0000*/ _SINGLE_LIST_ENTRY BucketLink;
	/*0008*/ ULONGLONG Key;
	/*0010*/
};

struct _RTL_HASH_TABLE {
	/*0000*/ ULONG EntryCount;
	/*0004*/ ULONG MaskBitCount : 05; // 0x0000001f;
	/*0004*/ ULONG BucketCount : 27; // 0xffffffe0;
	/*0008*/ _SINGLE_LIST_ENTRY * Buckets;
	/*0010*/
};

struct _RTL_HEAP_ENTRY {
	
	/*0000*/ ULONGLONG Size;
	/*0008*/ USHORT Flags;
	/*000a*/ USHORT AllocatorBackTraceIndex;
	/*0010*/ <unnamed-type-u> u;
	/*0020*/
};

struct _RTL_HEAP_INFORMATION {
	/*0000*/ void * BaseAddress;
	/*0008*/ ULONG Flags;
	/*000c*/ USHORT EntryOverhead;
	/*000e*/ USHORT CreatorBackTraceIndex;
	/*0010*/ ULONGLONG BytesAllocated;
	/*0018*/ ULONGLONG BytesCommitted;
	/*0020*/ ULONG NumberOfTags;
	/*0024*/ ULONG NumberOfEntries;
	/*0028*/ ULONG NumberOfPseudoTags;
	/*002c*/ ULONG PseudoTagGranularity;
	/*0030*/ ULONG Reserved[0x5];
	/*0048*/ _RTL_HEAP_TAG * Tags;
	/*0050*/ _RTL_HEAP_ENTRY * Entries;
	/*0058*/ ULONGLONG HeapTag;
	/*0060*/
};

struct _RTL_HEAP_MEMORY_LIMIT_DATA {
	/*0000*/ ULONGLONG CommitLimitBytes;
	/*0008*/ ULONGLONG CommitLimitFailureCode;
	/*0010*/ ULONGLONG MaxAllocationSizeBytes;
	/*0018*/ ULONGLONG AllocationLimitFailureCode;
	/*0020*/
};

struct _RTL_HEAP_MEMORY_LIMIT_INFO {
	/*0000*/ ULONG Version;
	/*0008*/ _RTL_HEAP_MEMORY_LIMIT_DATA Data;
	/*0028*/
};

struct _RTL_HEAP_PARAMETERS {
	/*0000*/ ULONG Length;
	/*0008*/ ULONGLONG SegmentReserve;
	/*0010*/ ULONGLONG SegmentCommit;
	/*0018*/ ULONGLONG DeCommitFreeBlockThreshold;
	/*0020*/ ULONGLONG DeCommitTotalFreeThreshold;
	/*0028*/ ULONGLONG MaximumAllocationSize;
	/*0030*/ ULONGLONG VirtualMemoryThreshold;
	/*0038*/ ULONGLONG InitialCommit;
	/*0040*/ ULONGLONG InitialReserve;
	/*0048*/ LONG (* CommitRoutine)( void * , void * * , ULONGLONG * );
	/*0050*/ ULONGLONG Reserved[0x2];
	/*0060*/
};

struct _RTL_HEAP_STACK_CONTROL {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Flags;
	/*0008*/ void * Process;
	/*0010*/
};

struct _RTL_HEAP_STACK_QUERY {
	/*0000*/ ULONG Version;
	/*0008*/ void * Process;
	/*0010*/ LONG (* WriteRoutine)( void * , ULONGLONG , void * );
	/*0018*/ void * SerializationContext;
	/*0020*/ UCHAR QueryLevel;
	/*0021*/ UCHAR Flags;
	/*0028*/
};

struct _RTL_HEAP_TAG {
	/*0000*/ ULONG NumberOfAllocations;
	/*0004*/ ULONG NumberOfFrees;
	/*0008*/ ULONGLONG BytesAllocated;
	/*0010*/ USHORT TagIndex;
	/*0012*/ USHORT CreatorBackTraceIndex;
	/*0014*/ WCHAR TagName[0x18];
	/*0048*/
};

struct _RTL_HEAP_TAG_INFO {
	/*0000*/ ULONG NumberOfAllocations;
	/*0004*/ ULONG NumberOfFrees;
	/*0008*/ ULONGLONG BytesAllocated;
	/*0010*/
};

struct _RTL_HEAP_WALK_ENTRY {
	
	/*0000*/ void * DataAddress;
	/*0008*/ ULONGLONG DataSize;
	/*0010*/ UCHAR OverheadBytes;
	/*0011*/ UCHAR SegmentIndex;
	/*0012*/ USHORT Flags;
	/*0018*/ <unnamed-type-Block> Block;
	/*0018*/ <unnamed-type-Segment> Segment;
	/*0030*/
};

struct _RTL_IMAGE_MITIGATION_ASLR_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY ForceRelocateImages;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY BottomUpRandomization;
	/*0010*/ _RTL_IMAGE_MITIGATION_POLICY HighEntropyRandomization;
	/*0018*/
};

struct _RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY BlockNonMicrosoftSignedBinaries;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY EnforceSigningOnModuleDependencies;
	/*0010*/
};

struct _RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY DisallowChildProcessCreation;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY ControlFlowGuard;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY StrictControlFlowGuard;
	/*0010*/
};

struct _RTL_IMAGE_MITIGATION_DEP_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY Dep;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY BlockDynamicCode;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY DisableExtensionPoints;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY DisableNonSystemFonts;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_HEAP_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY TerminateOnHeapErrors;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY BlockRemoteImageLoads;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY BlockLowLabelImageLoads;
	/*0010*/ _RTL_IMAGE_MITIGATION_POLICY PreferSystem32;
	/*0018*/
};

enum _RTL_IMAGE_MITIGATION_OPTION_STATE {
	RtlMitigationOptionStateNotConfigured = 0x0,
	RtlMitigationOptionStateOn = 0x1,
	RtlMitigationOptionStateOff = 0x2
};

struct _RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY EnableExportAddressFilter;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY EnableExportAddressFilterPlus;
	/*0010*/ _RTL_IMAGE_MITIGATION_POLICY EnableImportAddressFilter;
	/*0018*/ _RTL_IMAGE_MITIGATION_POLICY EnableRopStackPivot;
	/*0020*/ _RTL_IMAGE_MITIGATION_POLICY EnableRopCallerCheck;
	/*0028*/ _RTL_IMAGE_MITIGATION_POLICY EnableRopSimExec;
	/*0030*/ WCHAR EafPlusModuleList[0x200];
	/*0430*/
};

union _RTL_IMAGE_MITIGATION_POLICY {
	/*0000*/ ULONGLONG AuditState : 02; // 0x0000000000000003;
	/*0000*/ ULONGLONG AuditFlag : 01; // 0x0000000000000004;
	/*0000*/ ULONGLONG EnableAdditionalAuditingOption : 01; // 0x0000000000000008;
	/*0000*/ ULONGLONG Reserved : 60; // 0xfffffffffffffff0;
	/*0000*/ ULONGLONG PolicyState : 02; // 0x0000000000000003;
	/*0000*/ ULONGLONG AlwaysInherit : 01; // 0x0000000000000004;
	/*0000*/ ULONGLONG EnableAdditionalPolicyOption : 01; // 0x0000000000000008;
	/*0000*/ ULONGLONG AuditReserved : 60; // 0xfffffffffffffff0;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_REDIRECTION_TRUST_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY BlockUntrustedRedirections;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_SEHOP_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY Sehop;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY StrictHandleChecks;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY BlockWin32kSystemCalls;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_USER_POINTER_AUTH_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY PointerAuthUserIp;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_USER_SHADOW_STACK_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY UserShadowStack;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY SetContextIpValidation;
	/*0010*/ _RTL_IMAGE_MITIGATION_POLICY BlockNonCetBinaries;
	/*0018*/
};

struct _RTL_IMAGE_POLICY_METADATA {
	/*0000*/ _IMAGE_POLICY_METADATA const * PolicyMetadata;
	/*0008*/ ULONGLONG LBound;
	/*0010*/ ULONGLONG UBound;
	/*0018*/
};

struct _RTL_LFG_RNG_STATE {
	/*0000*/ ULONG SeedArray[0x37];
	/*00dc*/ ULONG Next;
	/*00e0*/ ULONG NextP;
	/*00e4*/
};

enum _RTL_MEMORY_TYPE {
	MemoryTypePaged = 0x0,
	MemoryTypeNonPaged = 0x1,
	MemoryType64KPage = 0x2,
	MemoryTypeLargePage = 0x3,
	MemoryTypeHugePage = 0x4,
	MemoryTypeCustom = 0x5,
	MemoryTypeMax = 0x6
};

struct _RTL_MODULE_BASIC_INFO {
	/*0000*/ void * ImageBase;
	/*0008*/
};

struct _RTL_MODULE_EXTENDED_INFO {
	/*0000*/ _RTL_MODULE_BASIC_INFO BasicInfo;
	/*0008*/ ULONG ImageSize;
	/*000c*/ USHORT FileNameOffset;
	/*000e*/ UCHAR FullPathName[0x100];
	/*0110*/
};

struct _RTL_NLS_STATE {
	/*0000*/ _CPTABLEINFO DefaultAcpTableInfo;
	/*0040*/ _CPTABLEINFO DefaultOemTableInfo;
	/*0080*/ USHORT * ActiveCodePageData;
	/*0088*/ USHORT * OemCodePageData;
	/*0090*/ USHORT * LeadByteInfo;
	/*0098*/ USHORT * OemLeadByteInfo;
	/*00a0*/ USHORT * CaseMappingData;
	/*00a8*/ USHORT * UnicodeUpcaseTable844;
	/*00b0*/ USHORT * UnicodeLowercaseTable844;
	/*00b8*/
};

enum _RTL_PATH_TYPE {
	RtlPathTypeUnknown = 0x0,
	RtlPathTypeUncAbsolute = 0x1,
	RtlPathTypeDriveAbsolute = 0x2,
	RtlPathTypeDriveRelative = 0x3,
	RtlPathTypeRooted = 0x4,
	RtlPathTypeRelative = 0x5,
	RtlPathTypeLocalDevice = 0x6,
	RtlPathTypeRootLocalDevice = 0x7
};

struct _RTL_PERTHREAD_CURDIR {
	/*0000*/ _RTL_DRIVE_LETTER_CURDIR * CurrentDirectories;
	/*0008*/ _UNICODE_STRING * ImageName;
	/*0010*/ void * Environment;
	/*0018*/
};

struct _RTL_PHYSICAL_MEMORY_INFO {
	/*0000*/ RTL_PHYSICAL_MEMORY_POLICY Policy;
	/*0004*/
};

struct _RTL_PROCESS_BACKTRACES {
	/*0000*/ ULONGLONG CommittedMemory;
	/*0008*/ ULONGLONG ReservedMemory;
	/*0010*/ ULONG NumberOfBackTraceLookups;
	/*0014*/ ULONG NumberOfBackTraces;
	/*0018*/ _RTL_PROCESS_BACKTRACE_INFORMATION BackTraces[0x1];
	/*0128*/
};

struct _RTL_PROCESS_BACKTRACES_CONTROL {
	/*0000*/ ULONG ControlCode;
	/*0004*/ ULONG ControlSize;
	/*0008*/ UCHAR ControlData[0x1];
	/*0008*/ _RTL_STACK_TRACE_DATABASE_CREATE DatabaseCreate;
	/*0020*/
};

struct _RTL_PROCESS_BACKTRACE_INFORMATION {
	/*0000*/ CHAR * SymbolicBackTrace;
	/*0008*/ ULONG TraceCount;
	/*000c*/ USHORT Index;
	/*000e*/ USHORT Depth;
	/*0010*/ void * BackTrace[0x20];
	/*0110*/
};

struct _RTL_PROCESS_HEAPS {
	/*0000*/ ULONG NumberOfHeaps;
	/*0008*/ _RTL_HEAP_INFORMATION Heaps[0x1];
	/*0068*/
};

struct _RTL_PROCESS_LOCKS {
	/*0000*/ ULONG NumberOfLocks;
	/*0008*/ _RTL_PROCESS_LOCK_INFORMATION Locks[0x1];
	/*0038*/
};

struct _RTL_PROCESS_LOCK_INFORMATION {
	/*0000*/ void * Address;
	/*0008*/ USHORT Type;
	/*000a*/ USHORT CreatorBackTraceIndex;
	/*0010*/ void * OwningThread;
	/*0018*/ LONG LockCount;
	/*001c*/ ULONG ContentionCount;
	/*0020*/ ULONG EntryCount;
	/*0024*/ LONG RecursionCount;
	/*0028*/ ULONG NumberOfWaitingShared;
	/*002c*/ ULONG NumberOfWaitingExclusive;
	/*0030*/
};

struct _RTL_PROCESS_MODULES {
	/*0000*/ ULONG NumberOfModules;
	/*0008*/ _RTL_PROCESS_MODULE_INFORMATION Modules[0x1];
	/*0130*/
};

struct _RTL_PROCESS_MODULE_INFORMATION {
	/*0000*/ void * Section;
	/*0008*/ void * MappedBase;
	/*0010*/ void * ImageBase;
	/*0018*/ ULONG ImageSize;
	/*001c*/ ULONG Flags;
	/*0020*/ USHORT LoadOrderIndex;
	/*0022*/ USHORT InitOrderIndex;
	/*0024*/ USHORT LoadCount;
	/*0026*/ USHORT OffsetToFileName;
	/*0028*/ UCHAR FullPathName[0x100];
	/*0128*/
};

struct _RTL_PROCESS_MODULE_INFORMATION_EX {
	/*0000*/ USHORT NextOffset;
	/*0008*/ _RTL_PROCESS_MODULE_INFORMATION BaseInfo;
	/*0130*/ ULONG ImageChecksum;
	/*0134*/ ULONG TimeDateStamp;
	/*0138*/ void * DefaultBase;
	/*0140*/
};

struct _RTL_PROCESS_VERIFIER_OPTIONS {
	/*0000*/ ULONG SizeStruct;
	/*0004*/ ULONG Option;
	/*0008*/ UCHAR OptionData[0x1];
	/*000c*/
};

struct _RTL_PROTECTED_ACCESS {
	/*0000*/ ULONG DominateMask;
	/*0004*/ ULONG DeniedProcessAccess;
	/*0008*/ ULONG DeniedThreadAccess;
	/*000c*/
};

struct _RTL_QUERY_DEBUG_INFORMATION_INFO {
	/*0000*/ ULONG UniqueProcessId;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG Buffer;
	/*0010*/
};

struct _RTL_QUERY_DEBUG_VIRTUAL_PROCESS {
	/*0000*/ void * Context;
	/*0008*/ LONG (* ReadMemoryRoutine)( void * , void * , void * , ULONGLONG , ULONGLONG * );
	/*0010*/ LONG (* QueryInformationRoutine)( void * , _PROCESSINFOCLASS , void * , ULONG , ULONG * );
	/*0018*/
};

struct _RTL_QUERY_REGISTRY_TABLE {
	/*0000*/ LONG (* QueryRoutine)( WCHAR * , ULONG , void * , ULONG , void * , void * );
	/*0008*/ ULONG Flags;
	/*0010*/ WCHAR * Name;
	/*0018*/ void * EntryContext;
	/*0020*/ ULONG DefaultType;
	/*0028*/ void * DefaultData;
	/*0030*/ ULONG DefaultLength;
	/*0038*/
};

struct _RTL_RB_TREE {
	/*0000*/ _RTL_BALANCED_NODE * Root;
	/*0008*/ UCHAR Encoded : 01; // 0x01;
	/*0008*/ _RTL_BALANCED_NODE * Min;
	/*0010*/
};

struct _RTL_RELATIVE_NAME_U {
	/*0000*/ _UNICODE_STRING RelativeName;
	/*0010*/ void * ContainingDirectory;
	/*0018*/ _RTLP_CURDIR_REF * CurDirRef;
	/*0020*/
};

struct _RTL_RESOURCE {
	/*0000*/ _RTL_CRITICAL_SECTION CriticalSection;
	/*0028*/ void * SharedSemaphore;
	/*0030*/ ULONG volatile NumberOfWaitingShared;
	/*0038*/ void * ExclusiveSemaphore;
	/*0040*/ ULONG volatile NumberOfWaitingExclusive;
	/*0044*/ LONG volatile NumberOfActive;
	/*0048*/ void * ExclusiveOwnerThread;
	/*0050*/ ULONG Flags;
	/*0058*/ _RTL_CRITICAL_SECTION_DEBUG * DebugInfo;
	/*0060*/
};

enum _RTL_RESOURCE_CATEGORY {
	RtlResTypePhysicalMemoryTier = 0x0,
	RtlResTypeDiskSpaceTier = 0x1,
	RtlResTypeDiskSpeedTier = 0x2,
	RtlResTypeDiskWriteConstraintTier = 0x3,
	RtlResTypeMax = 0x4
};

enum _RTL_RESOURCE_POLICY_FLAGS {
	RTL_RESOURCE_POLICY_FLAGS_NONE = 0x0
};

struct _RTL_RETPOLINE_BINARY_INFO {
	/*0000*/ LONG RetpolineStubsStartRva;
	/*0004*/ ULONG CfgDispatchFunctionPtrRva;
	/*0008*/ ULONG IATRva;
	/*000c*/ ULONG IATSize;
	/*0010*/ LONG * ImportRvas;
	/*0018*/ ULONGLONG * IAT;
	/*0020*/ void * ImageBase;
	/*0028*/ ULONG (* CheckFunction)( void * );
	/*0030*/
};

struct _RTL_RETPOLINE_RELOCATION_INDEX {
	
	/*0000*/ USHORT ImportRelocationSize;
	/*0002*/ USHORT IndirectRelocationSize;
	/*0004*/ USHORT SwitchJumpRelocationSize;
	/*0006*/ USHORT StraddleType;
	/*0008*/ <unnamed-type-StraddleReloc> StraddleReloc;
	/*000c*/
};

struct _RTL_RETPOLINE_ROUTINES {
	/*0000*/ ULONG UnwindDataOffset;
	/*0004*/ ULONG SwitchtableJump[0x10];
	/*0044*/ ULONG CfgIndirectRax;
	/*0048*/ ULONG NonCfgIndirectRax;
	/*004c*/ ULONG ImportR10;
	/*0050*/ ULONG JumpHpat;
	/*0054*/
};

union _RTL_RUN_ONCE {
	/*0000*/ void * Ptr;
	/*0000*/ ULONGLONG Value;
	/*0000*/ ULONGLONG State : 02; // 0x0000000000000003;
	/*0008*/
};

struct _RTL_RVA_LIST {
	/*0000*/ ULONGLONG RvaCount;
	/*0008*/ ULONG StateBitsPerRva;
	/*0010*/ UCHAR * CompressedBuffer;
	/*0018*/ ULONGLONG CompressedBufferSize;
	/*0020*/ _RTL_BITMAP_EX RvaStateBitMap;
	/*0030*/ ULONG * StateBitValueMap;
	/*0038*/ void * ExtensionBuffer;
	/*0040*/
};

struct _RTL_RVA_LIST_ITERATOR {
	/*0000*/ ULONG CurrentRva;
	/*0004*/ ULONG CurrentRvaIndex;
	/*0008*/ ULONG CompressedRvaDataOffset;
	/*000c*/
};

struct _RTL_RXACT_CONTEXT {
	/*0000*/ void * RootRegistryKey;
	/*0008*/ void * RXactKey;
	/*0010*/ UCHAR HandlesValid;
	/*0018*/ _RTL_RXACT_LOG * RXactLog;
	/*0020*/
};

struct _RTL_RXACT_LOG {
	/*0000*/ ULONG OperationCount;
	/*0004*/ ULONG LogSize;
	/*0008*/ ULONG LogSizeInUse;
	/*000c*/ ULONG Alignment;
	/*0010*/
};

enum _RTL_RXACT_OPERATION {
	RtlRXactOperationDelete = 0x1,
	RtlRXactOperationSetValue = 0x2,
	RtlRXactOperationDelAttribute = 0x3,
	RtlRXactOperationSetAttribute = 0x4
};

struct _RTL_SEGMENT_HEAP_MEMORY_SOURCE {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG MemoryTypeMask;
	/*0008*/ ULONG NumaNode;
	/*0010*/ void * PartitionHandle;
	/*0010*/ _RTL_SEGMENT_HEAP_VA_CALLBACKS * Callbacks;
	/*0018*/ ULONGLONG Reserved[0x2];
	/*0028*/
};

struct _RTL_SEGMENT_HEAP_PARAMETERS {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Size;
	/*0004*/ ULONG Flags;
	/*0008*/ _RTL_SEGMENT_HEAP_MEMORY_SOURCE MemorySource;
	/*0030*/ ULONGLONG Reserved[0x4];
	/*0050*/
};

struct _RTL_SEGMENT_HEAP_VA_CALLBACKS {
	/*0000*/ void * CallbackContext;
	/*0008*/ LONG (* AllocateVirtualMemory)( void * , void * , void * * , ULONGLONG * , ULONG , ULONG , MEM_EXTENDED_PARAMETER * , ULONG );
	/*0010*/ LONG (* FreeVirtualMemory)( void * , void * , void * * , ULONGLONG * , ULONG );
	/*0018*/ LONG (* QueryVirtualMemory)( void * , void * , void * , _HEAP_MEMORY_INFO_CLASS , void * , ULONGLONG , ULONGLONG * );
	/*0020*/
};

struct _RTL_SPARSE_BITMAP_CTX {
	/*0000*/ ULONGLONG Lock;
	/*0008*/ _RTL_SPARSE_BITMAP_RANGE * * BitmapRanges;
	/*0010*/ _RTL_BITMAP RangeArrayCommitStatus;
	/*0020*/ void * (* AllocateRoutine)( ULONGLONG );
	/*0028*/ void (* FreeRoutine)( void * );
	/*0030*/ ULONG RangeCount;
	/*0034*/ ULONG RangeIndexLimit;
	/*0038*/ ULONG BitsPerRange;
	/*003c*/ ULONG RangeCountMax;
	/*0040*/ ULONG RangeMetadataOffset;
	/*0044*/ ULONG MetadataSizePerBit;
	/*0048*/ ULONG DefaultBitsSet : 01; // 0x00000001;
	/*0048*/ ULONG SparseRangeArray : 01; // 0x00000002;
	/*0048*/ ULONG NoInternalLocking : 01; // 0x00000004;
	/*0048*/ ULONG SpareFlags : 29; // 0xfffffff8;
	/*0050*/
};

enum _RTL_SPARSE_BITMAP_CTX_OPERATION {
	RtlSparseBitmapOperationClear = 0x0,
	RtlSparseBitmapOperationSet = 0x1,
	RtlSparseBitmapOperationAny = 0x2,
	RtlSparseBitmapOperationMax = 0x3
};

struct _RTL_SPARSE_BITMAP_PARAMETER {
	/*0000*/ ULONGLONG BitCountMax;
	/*0008*/ ULONG MetadataSizePerBit;
	/*000c*/ ULONG BitsPerRange;
	/*0010*/ ULONG RangeCountMax;
	/*0018*/ void * (* AllocateRoutine)( ULONGLONG );
	/*0020*/ void (* FreeRoutine)( void * );
	/*0028*/ ULONG DefaultBitsSet : 01; // 0x00000001;
	/*0028*/ ULONG SparseRangeArray : 01; // 0x00000002;
	/*0028*/ ULONG NoInternalLocking : 01; // 0x00000004;
	/*0028*/ ULONG SpareFlags : 29; // 0xfffffff8;
	/*0030*/
};

struct _RTL_SPARSE_BITMAP_RANGE {
	/*0000*/ ULONGLONG Lock;
	/*0008*/ _RTL_BITMAP RangeBitmap;
	/*0000*/ _SINGLE_LIST_ENTRY Next;
	/*0018*/
};

struct _RTL_SPARSE_BITMAP_RUN {
	/*0000*/ ULONG StartingIndexLow;
	/*0004*/ ULONG StartingIndexHigh;
	/*0008*/ ULONG Length;
	/*0010*/ void * Metadata;
	/*0018*/
};

struct _RTL_SPLAY_LINKS {
	/*0000*/ _RTL_SPLAY_LINKS * Parent;
	/*0008*/ _RTL_SPLAY_LINKS * LeftChild;
	/*0010*/ _RTL_SPLAY_LINKS * RightChild;
	/*0018*/
};

struct _RTL_SRWLOCK {
	/*0000*/ ULONGLONG Locked : 01; // 0x0000000000000001;
	/*0000*/ ULONGLONG Waiting : 01; // 0x0000000000000002;
	/*0000*/ ULONGLONG Waking : 01; // 0x0000000000000004;
	/*0000*/ ULONGLONG MultipleShared : 01; // 0x0000000000000008;
	/*0000*/ ULONGLONG Shared : 60; // 0xfffffffffffffff0;
	/*0000*/ ULONGLONG Value;
	/*0000*/ void * Ptr;
	/*0008*/
};

struct _RTL_STACK_CONTEXT {
	/*0000*/ ULONG NumberOfEntries;
	/*0008*/ _RTL_STACK_CONTEXT_ENTRY Entry[0x1];
	/*0018*/
};

struct _RTL_STACK_CONTEXT_ENTRY {
	/*0000*/ ULONGLONG Address;
	/*0008*/ ULONGLONG Data;
	/*0010*/
};

enum _RTL_STACK_TRACE_DATABASE_CONTROL {
	BackTraceDatabaseCreate = 0x0,
	BackTraceDatabaseDelete = 0x1,
	BackTraceDatabaseFlush = 0x2,
	BackTraceDatabaseMaxControl = 0x3
};

struct _RTL_STACK_TRACE_DATABASE_CREATE {
	/*0000*/ void * CommitBase;
	/*0008*/ ULONGLONG CommitSize;
	/*0010*/ ULONGLONG ReserveSize;
	/*0018*/
};

enum _RTL_SYSTEM_GLOBAL_DATA_ID {
	GlobalDataIdUnknown = 0x0,
	GlobalDataIdRngSeedVersion = 0x1,
	GlobalDataIdInterruptTime = 0x2,
	GlobalDataIdTimeZoneBias = 0x3,
	GlobalDataIdImageNumberLow = 0x4,
	GlobalDataIdImageNumberHigh = 0x5,
	GlobalDataIdTimeZoneId = 0x6,
	GlobalDataIdNtMajorVersion = 0x7,
	GlobalDataIdNtMinorVersion = 0x8,
	GlobalDataIdSystemExpirationDate = 0x9,
	GlobalDataIdKdDebuggerEnabled = 0xa,
	GlobalDataIdCyclesPerYield = 0xb,
	GlobalDataIdSafeBootMode = 0xc,
	GlobalDataIdLastSystemRITEventTickCount = 0xd,
	GlobalDataIdConsoleSharedDataFlags = 0xe,
	GlobalDataIdNtSystemRootDrive = 0xf,
	GlobalDataIdQpcShift = 0x10,
	GlobalDataIdQpcBypassEnabled = 0x11,
	GlobalDataIdQpcData = 0x12,
	GlobalDataIdQpcBias = 0x13
};

union _RTL_TICK_LOCK {
	/*0000*/ ULONGLONG AsULong64;
	/*0000*/ ULONGLONG Busy : 01; // 0x0000000000000001;
	/*0000*/ ULONGLONG Ticks : 63; // 0xfffffffffffffffe;
	/*0008*/
};

struct _RTL_TIME_ZONE_INFORMATION {
	/*0000*/ LONG Bias;
	/*0004*/ WCHAR StandardName[0x20];
	/*0044*/ _TIME_FIELDS StandardStart;
	/*0054*/ LONG StandardBias;
	/*0058*/ WCHAR DaylightName[0x20];
	/*0098*/ _TIME_FIELDS DaylightStart;
	/*00a8*/ LONG DaylightBias;
	/*00ac*/
};

struct _RTL_TRACE_BLOCK {
	/*0000*/ ULONG Magic;
	/*0004*/ ULONG Count;
	/*0008*/ ULONG Size;
	/*0010*/ ULONGLONG UserCount;
	/*0018*/ ULONGLONG UserSize;
	/*0020*/ void * UserContext;
	/*0028*/ _RTL_TRACE_BLOCK * Next;
	/*0030*/ void * * Trace;
	/*0038*/
};

struct _RTL_TRACE_DATABASE;

struct _RTL_TRACE_ENUMERATE {
	/*0000*/ _RTL_TRACE_DATABASE * Database;
	/*0008*/ ULONG Index;
	/*0010*/ _RTL_TRACE_BLOCK * Block;
	/*0018*/
};

struct _RTL_UMS_COMPLETION_LIST {
	/*0000*/ _SINGLE_LIST_ENTRY * ThreadListHead;
	/*0008*/ void * CompletionEvent;
	/*0010*/ ULONG CompletionFlags;
	/*0018*/ _SINGLE_LIST_ENTRY InternalListHead;
	/*0020*/
};

struct _RTL_UMS_CONTEXT {
	/*0000*/ _SINGLE_LIST_ENTRY Link;
	/*0010*/ _CONTEXT Context;
	/*04e0*/ void * Teb;
	/*04e8*/ void * UserContext;
	/*04f0*/ ULONG volatile ScheduledThread : 01; // 0x00000001;
	/*04f0*/ ULONG volatile Suspended : 01; // 0x00000002;
	/*04f0*/ ULONG volatile VolatileContext : 01; // 0x00000004;
	/*04f0*/ ULONG volatile Terminated : 01; // 0x00000008;
	/*04f0*/ ULONG volatile DebugActive : 01; // 0x00000010;
	/*04f0*/ ULONG volatile RunningOnSelfThread : 01; // 0x00000020;
	/*04f0*/ ULONG volatile DenyRunningOnSelfThread : 01; // 0x00000040;
	/*04f0*/ LONG volatile Flags;
	/*04f8*/ ULONGLONG volatile KernelUpdateLock : 02; // 0x0000000000000003;
	/*04f8*/ ULONGLONG volatile PrimaryClientID : 62; // 0xfffffffffffffffc;
	/*04f8*/ ULONGLONG volatile ContextLock;
	/*0500*/ _RTL_UMS_CONTEXT * PrimaryUmsContext;
	/*0508*/ ULONG SwitchCount;
	/*050c*/ ULONG KernelYieldCount;
	/*0510*/ ULONG MixedYieldCount;
	/*0514*/ ULONG YieldCount;
	/*0520*/
};

enum _RTL_UMS_SCHEDULER_REASON {
	UmsSchedulerStartup = 0x0,
	UmsSchedulerThreadBlocked = 0x1,
	UmsSchedulerThreadYield = 0x2
};

struct _RTL_UMS_SCHEDULER_STARTUP_INFO {
	/*0000*/ ULONG UmsVersion;
	/*0008*/ _RTL_UMS_COMPLETION_LIST * CompletionList;
	/*0010*/ void (* SchedulerProc)( _RTL_UMS_SCHEDULER_REASON , ULONGLONG , void * );
	/*0018*/ void * SchedulerParam;
	/*0020*/
};

enum _RTL_UMS_THREAD_INFO_CLASS {
	UmsThreadInvalidInfoClass = 0x0,
	UmsThreadUserContext = 0x1,
	UmsThreadPriority = 0x2,
	UmsThreadAffinity = 0x3,
	UmsThreadTeb = 0x4,
	UmsThreadIsSuspended = 0x5,
	UmsThreadIsTerminated = 0x6,
	UmsThreadMaxInfoClass = 0x7
};

struct _RTL_UNICODE_STRING_BUFFER {
	/*0000*/ _UNICODE_STRING String;
	/*0010*/ _RTL_BUFFER ByteBuffer;
	/*0030*/ UCHAR MinimumStaticBufferForTerminalNul[0x2];
	/*0038*/
};

struct _RTL_UNLOAD_EVENT_TRACE {
	/*0000*/ void * BaseAddress;
	/*0008*/ ULONGLONG SizeOfImage;
	/*0010*/ ULONG Sequence;
	/*0014*/ ULONG TimeDateStamp;
	/*0018*/ ULONG CheckSum;
	/*001c*/ WCHAR ImageName[0x20];
	/*005c*/ ULONG Version[0x2];
	/*0068*/
};

struct _RTL_UNLOAD_EVENT_TRACE32 {
	/*0000*/ ULONG BaseAddress;
	/*0004*/ ULONG SizeOfImage;
	/*0008*/ ULONG Sequence;
	/*000c*/ ULONG TimeDateStamp;
	/*0010*/ ULONG CheckSum;
	/*0014*/ WCHAR ImageName[0x20];
	/*0054*/ ULONG Version[0x2];
	/*005c*/
};

struct _RTL_UNLOAD_EVENT_TRACE64 {
	/*0000*/ ULONGLONG BaseAddress;
	/*0008*/ ULONGLONG SizeOfImage;
	/*0010*/ ULONG Sequence;
	/*0014*/ ULONG TimeDateStamp;
	/*0018*/ ULONG CheckSum;
	/*001c*/ WCHAR ImageName[0x20];
	/*005c*/ ULONG Version[0x2];
	/*0068*/
};

struct _RTL_USER_PROCESS_EXTENDED_PARAMETERS {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT NodeNumber;
	/*0008*/ void * ProcessSecurityDescriptor;
	/*0010*/ void * ThreadSecurityDescriptor;
	/*0018*/ void * ParentProcess;
	/*0020*/ void * DebugPort;
	/*0028*/ void * TokenHandle;
	/*0030*/ void * JobHandle;
	/*0038*/
};

struct _RTL_USER_PROCESS_INFORMATION {
	/*0000*/ ULONG Length;
	/*0008*/ void * Process;
	/*0010*/ void * Thread;
	/*0018*/ _CLIENT_ID ClientId;
	/*0028*/ _SECTION_IMAGE_INFORMATION ImageInformation;
	/*0068*/
};

struct _RTL_USER_PROCESS_INFORMATION64 {
	/*0000*/ ULONG Length;
	/*0008*/ LONGLONG Process;
	/*0010*/ LONGLONG Thread;
	/*0018*/ _CLIENT_ID64 ClientId;
	/*0028*/ _SECTION_IMAGE_INFORMATION64 ImageInformation;
	/*0068*/
};

struct _RTL_USER_PROCESS_PARAMETERS {
	/*0000*/ ULONG MaximumLength;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG DebugFlags;
	/*0010*/ void * ConsoleHandle;
	/*0018*/ ULONG ConsoleFlags;
	/*0020*/ void * StandardInput;
	/*0028*/ void * StandardOutput;
	/*0030*/ void * StandardError;
	/*0038*/ _CURDIR CurrentDirectory;
	/*0050*/ _UNICODE_STRING DllPath;
	/*0060*/ _UNICODE_STRING ImagePathName;
	/*0070*/ _UNICODE_STRING CommandLine;
	/*0080*/ void * Environment;
	/*0088*/ ULONG StartingX;
	/*008c*/ ULONG StartingY;
	/*0090*/ ULONG CountX;
	/*0094*/ ULONG CountY;
	/*0098*/ ULONG CountCharsX;
	/*009c*/ ULONG CountCharsY;
	/*00a0*/ ULONG FillAttribute;
	/*00a4*/ ULONG WindowFlags;
	/*00a8*/ ULONG ShowWindowFlags;
	/*00b0*/ _UNICODE_STRING WindowTitle;
	/*00c0*/ _UNICODE_STRING DesktopInfo;
	/*00d0*/ _UNICODE_STRING ShellInfo;
	/*00e0*/ _UNICODE_STRING RuntimeData;
	/*00f0*/ _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[0x20];
	/*03f0*/ ULONGLONG EnvironmentSize;
	/*03f8*/ ULONGLONG EnvironmentVersion;
	/*0400*/ void * PackageDependencyData;
	/*0408*/ ULONG ProcessGroupId;
	/*040c*/ ULONG LoaderThreads;
	/*0410*/ _UNICODE_STRING RedirectionDllName;
	/*0420*/ _UNICODE_STRING HeapPartitionName;
	/*0430*/ ULONGLONG * DefaultThreadpoolCpuSetMasks;
	/*0438*/ ULONG DefaultThreadpoolCpuSetMaskCount;
	/*043c*/ ULONG DefaultThreadpoolThreadMaximum;
	/*0440*/ ULONG HeapMemoryTypeMask;
	/*0448*/
};

struct _RTL_WORK_ON_BEHALF_TICKET_EX {
	/*0000*/ _ALPC_WORK_ON_BEHALF_TICKET Ticket;
	/*0008*/ ULONG Flags;
	/*0008*/ ULONG CurrentThread : 01; // 0x00000001;
	/*0008*/ ULONG Reserved1 : 31; // 0xfffffffe;
	/*000c*/ ULONG Reserved2;
	/*0010*/
};

struct _Real_type<float> {
	/*0001*/
};

struct _Real_type<long double> {
	/*0001*/
};

struct _Real_widened<double,double> {
	/*0001*/
};

struct _Real_widened<double,float> {
	/*0001*/
};

struct _Real_widened<float,double> {
	/*0001*/
};

struct _Real_widened<float,float> {
	/*0001*/
};

struct _RemotableHandle {

	union __MIDL_IWinTypes_0009 {
		/*0000*/ LONG hInproc;
		/*0000*/ LONG hRemote;
		/*0004*/
	};

	/*0000*/ LONG fContext;
	/*0004*/ __MIDL_IWinTypes_0009 u;
	/*0008*/
};

struct _SCONTEXT_QUEUE {
	/*0000*/ ULONG NumberOfObjects;
	/*0008*/ _NDR_SCONTEXT * * ArrayOfObjects;
	/*0010*/
};

struct _SCOPE_TABLE_AMD64 {
	
	/*0000*/ ULONG Count;
	/*0004*/ <unnamed-type-ScopeRecord> ScopeRecord[0x1];
	/*0014*/
};

struct _SCOPE_TABLE_ARM64 {
	
	/*0000*/ ULONG Count;
	/*0004*/ <unnamed-type-ScopeRecord> ScopeRecord[0x1];
	/*0014*/
};

struct _SCRUB_DATA_INPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG MaximumIos;
	/*000c*/ ULONG ObjectId[0x4];
	/*001c*/ ULONG Reserved[0x29];
	/*00c0*/ UCHAR ResumeContext[0x410];
	/*04d0*/
};

struct _SCRUB_DATA_OUTPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG Status;
	/*0010*/ ULONGLONG ErrorFileOffset;
	/*0018*/ ULONGLONG ErrorLength;
	/*0020*/ ULONGLONG NumberOfBytesRepaired;
	/*0028*/ ULONGLONG NumberOfBytesFailed;
	/*0030*/ ULONGLONG InternalFileReference;
	/*0038*/ USHORT ResumeContextLength;
	/*003a*/ USHORT ParityExtentDataOffset;
	/*003c*/ ULONG Reserved[0x9];
	/*0060*/ ULONGLONG NumberOfMetadataBytesProcessed;
	/*0068*/ ULONGLONG NumberOfDataBytesProcessed;
	/*0070*/ ULONGLONG TotalNumberOfMetadataBytesInUse;
	/*0078*/ ULONGLONG TotalNumberOfDataBytesInUse;
	/*0080*/ ULONGLONG DataBytesSkippedDueToNoAllocation;
	/*0088*/ ULONGLONG DataBytesSkippedDueToInvalidRun;
	/*0090*/ ULONGLONG DataBytesSkippedDueToIntegrityStream;
	/*0098*/ ULONGLONG DataBytesSkippedDueToRegionBeingClean;
	/*00a0*/ ULONGLONG DataBytesSkippedDueToLockConflict;
	/*00a8*/ ULONGLONG DataBytesSkippedDueToNoScrubDataFlag;
	/*00b0*/ ULONGLONG DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag;
	/*00b8*/ ULONGLONG DataBytesScrubbed;
	/*00c0*/ UCHAR ResumeContext[0x410];
	/*04d0*/
};

struct _SCRUB_PARITY_EXTENT {
	/*0000*/ LONGLONG Offset;
	/*0008*/ ULONGLONG Length;
	/*0010*/
};

struct _SCRUB_PARITY_EXTENT_DATA {
	/*0000*/ USHORT Size;
	/*0002*/ USHORT Flags;
	/*0004*/ USHORT NumberOfParityExtents;
	/*0006*/ USHORT MaximumNumberOfParityExtents;
	/*0008*/ _SCRUB_PARITY_EXTENT ParityExtents[0x1];
	/*0018*/
};

struct _SC_ACTION {
	/*0000*/ _SC_ACTION_TYPE Type;
	/*0004*/ ULONG Delay;
	/*0008*/
};

enum _SC_ACTION_TYPE {
	SC_ACTION_NONE = 0x0,
	SC_ACTION_RESTART = 0x1,
	SC_ACTION_REBOOT = 0x2,
	SC_ACTION_RUN_COMMAND = 0x3,
	SC_ACTION_OWN_RESTART = 0x4
};

enum _SC_ENUM_TYPE {
	SC_ENUM_PROCESS_INFO = 0x0
};

enum _SC_EVENT_TYPE {
	SC_EVENT_DATABASE_CHANGE = 0x0,
	SC_EVENT_PROPERTY_CHANGE = 0x1,
	SC_EVENT_STATUS_CHANGE = 0x2
};

struct _SC_NOTIFICATION_REGISTRATION;

enum _SC_STATUS_TYPE {
	SC_STATUS_PROCESS_INFO = 0x0
};

struct _SD_CHANGE_MACHINE_SID_INPUT {
	/*0000*/ USHORT CurrentMachineSIDOffset;
	/*0002*/ USHORT CurrentMachineSIDLength;
	/*0004*/ USHORT NewMachineSIDOffset;
	/*0006*/ USHORT NewMachineSIDLength;
	/*0008*/
};

struct _SD_CHANGE_MACHINE_SID_OUTPUT {
	/*0000*/ ULONGLONG NumSDChangedSuccess;
	/*0008*/ ULONGLONG NumSDChangedFail;
	/*0010*/ ULONGLONG NumSDUnused;
	/*0018*/ ULONGLONG NumSDTotal;
	/*0020*/ ULONGLONG NumMftSDChangedSuccess;
	/*0028*/ ULONGLONG NumMftSDChangedFail;
	/*0030*/ ULONGLONG NumMftSDTotal;
	/*0038*/
};

struct _SD_ENUM_SDS_ENTRY {
	/*0000*/ ULONG Hash;
	/*0004*/ ULONG SecurityId;
	/*0008*/ ULONGLONG Offset;
	/*0010*/ ULONG Length;
	/*0014*/ UCHAR Descriptor[0x1];
	/*0018*/
};

struct _SD_ENUM_SDS_INPUT {
	/*0000*/ ULONGLONG StartingOffset;
	/*0008*/ ULONGLONG MaxSDEntriesToReturn;
	/*0010*/
};

struct _SD_ENUM_SDS_OUTPUT {
	/*0000*/ ULONGLONG NextOffset;
	/*0008*/ ULONGLONG NumSDEntriesReturned;
	/*0010*/ ULONGLONG NumSDBytesReturned;
	/*0018*/ _SD_ENUM_SDS_ENTRY SDEntry[0x1];
	/*0030*/
};

struct _SD_GLOBAL_CHANGE_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG ChangeType;
	/*0008*/ _SD_CHANGE_MACHINE_SID_INPUT SdChange;
	/*0008*/ _SD_QUERY_STATS_INPUT SdQueryStats;
	/*0008*/ _SD_ENUM_SDS_INPUT SdEnumSds;
	/*0018*/
};

struct _SD_GLOBAL_CHANGE_OUTPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG ChangeType;
	/*0008*/ _SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
	/*0008*/ _SD_QUERY_STATS_OUTPUT SdQueryStats;
	/*0008*/ _SD_ENUM_SDS_OUTPUT SdEnumSds;
	/*0048*/
};

struct _SD_QUERY_STATS_INPUT {
	/*0000*/ ULONG Reserved;
	/*0004*/
};

struct _SD_QUERY_STATS_OUTPUT {
	/*0000*/ ULONGLONG SdsStreamSize;
	/*0008*/ ULONGLONG SdsAllocationSize;
	/*0010*/ ULONGLONG SiiStreamSize;
	/*0018*/ ULONGLONG SiiAllocationSize;
	/*0020*/ ULONGLONG SdhStreamSize;
	/*0028*/ ULONGLONG SdhAllocationSize;
	/*0030*/ ULONGLONG NumSDTotal;
	/*0038*/ ULONGLONG NumSDUnused;
	/*0040*/
};

struct _SECTIONBASICINFO {
	/*0000*/ void * BaseAddress;
	/*0008*/ ULONG AllocationAttributes;
	/*0010*/ _LARGE_INTEGER MaximumSize;
	/*0018*/
};

struct _SECTION_IMAGE_INFORMATION {
	/*0000*/ void * TransferAddress;
	/*0008*/ ULONG ZeroBits;
	/*0010*/ ULONGLONG MaximumStackSize;
	/*0018*/ ULONGLONG CommittedStackSize;
	/*0020*/ ULONG SubSystemType;
	/*0024*/ USHORT SubSystemMinorVersion;
	/*0026*/ USHORT SubSystemMajorVersion;
	/*0024*/ ULONG SubSystemVersion;
	/*0028*/ USHORT MajorOperatingSystemVersion;
	/*002a*/ USHORT MinorOperatingSystemVersion;
	/*0028*/ ULONG OperatingSystemVersion;
	/*002c*/ USHORT ImageCharacteristics;
	/*002e*/ USHORT DllCharacteristics;
	/*0030*/ USHORT Machine;
	/*0032*/ UCHAR ImageContainsCode;
	/*0033*/ UCHAR ImageFlags;
	/*0033*/ UCHAR ComPlusNativeReady : 01; // 0x01;
	/*0033*/ UCHAR ComPlusILOnly : 01; // 0x02;
	/*0033*/ UCHAR ImageDynamicallyRelocated : 01; // 0x04;
	/*0033*/ UCHAR ImageMappedFlat : 01; // 0x08;
	/*0033*/ UCHAR BaseBelow4gb : 01; // 0x10;
	/*0033*/ UCHAR ComPlusPrefer32bit : 01; // 0x20;
	/*0033*/ UCHAR Reserved : 02; // 0xc0;
	/*0034*/ ULONG LoaderFlags;
	/*0038*/ ULONG ImageFileSize;
	/*003c*/ ULONG CheckSum;
	/*0040*/
};

struct _SECTION_IMAGE_INFORMATION32 {
	/*0000*/ ULONG TransferAddress;
	/*0004*/ ULONG ZeroBits;
	/*0008*/ ULONG MaximumStackSize;
	/*000c*/ ULONG CommittedStackSize;
	/*0010*/ ULONG SubSystemType;
	/*0014*/ USHORT SubSystemMinorVersion;
	/*0016*/ USHORT SubSystemMajorVersion;
	/*0014*/ ULONG SubSystemVersion;
	/*0018*/ USHORT MajorOperatingSystemVersion;
	/*001a*/ USHORT MinorOperatingSystemVersion;
	/*0018*/ ULONG OperatingSystemVersion;
	/*001c*/ USHORT ImageCharacteristics;
	/*001e*/ USHORT DllCharacteristics;
	/*0020*/ USHORT Machine;
	/*0022*/ UCHAR ImageContainsCode;
	/*0023*/ UCHAR ImageFlags;
	/*0023*/ UCHAR ComPlus : 01; // 0x01;
	/*0023*/ UCHAR ImageDynamicallyRelocated : 01; // 0x02;
	/*0023*/ UCHAR Reserved : 06; // 0xfc;
	/*0024*/ ULONG LoaderFlags;
	/*0028*/ ULONG ImageFileSize;
	/*002c*/ ULONG CheckSum;
	/*0030*/
};

struct _SECTION_IMAGE_INFORMATION64 {
	/*0000*/ ULONGLONG TransferAddress;
	/*0008*/ ULONG ZeroBits;
	/*0010*/ ULONGLONG MaximumStackSize;
	/*0018*/ ULONGLONG CommittedStackSize;
	/*0020*/ ULONG SubSystemType;
	/*0024*/ USHORT SubSystemMinorVersion;
	/*0026*/ USHORT SubSystemMajorVersion;
	/*0024*/ ULONG SubSystemVersion;
	/*0028*/ USHORT MajorOperatingSystemVersion;
	/*002a*/ USHORT MinorOperatingSystemVersion;
	/*0028*/ ULONG OperatingSystemVersion;
	/*002c*/ USHORT ImageCharacteristics;
	/*002e*/ USHORT DllCharacteristics;
	/*0030*/ USHORT Machine;
	/*0032*/ UCHAR ImageContainsCode;
	/*0033*/ UCHAR ImageFlags;
	/*0033*/ UCHAR ComPlus : 01; // 0x01;
	/*0033*/ UCHAR ImageDynamicallyRelocated : 01; // 0x02;
	/*0033*/ UCHAR Reserved : 06; // 0xfc;
	/*0034*/ ULONG LoaderFlags;
	/*0038*/ ULONG ImageFileSize;
	/*003c*/ ULONG CheckSum;
	/*0040*/
};

enum _SECTION_INFORMATION_CLASS {
	SectionBasicInformation = 0x0,
	SectionImageInformation = 0x1,
	SectionRelocationInformation = 0x2,
	SectionOriginalBaseInformation = 0x3,
	SectionInternalImageInformation = 0x4,
	MaxSectionInfoClass = 0x5
};

enum _SECTION_INHERIT {
	ViewShare = 0x1,
	ViewUnmap = 0x2
};

struct _SECTION_INTERNAL_IMAGE_INFORMATION {
	/*0000*/ _SECTION_IMAGE_INFORMATION SectionInformation;
	/*0040*/ ULONG ExtendedFlags;
	/*0040*/ ULONG ImageExportSuppressionEnabled : 01; // 0x00000001;
	/*0040*/ ULONG ImageCetShadowStacksReady : 01; // 0x00000002;
	/*0040*/ ULONG ImageXfgEnabled : 01; // 0x00000004;
	/*0040*/ ULONG ImageCetShadowStacksStrictMode : 01; // 0x00000008;
	/*0040*/ ULONG ImageCetSetContextIpValidationRelaxedMode : 01; // 0x00000010;
	/*0040*/ ULONG ImageCetDynamicApisAllowInProc : 01; // 0x00000020;
	/*0040*/ ULONG ImageCetDowngradeReserved1 : 01; // 0x00000040;
	/*0040*/ ULONG ImageCetDowngradeReserved2 : 01; // 0x00000080;
	/*0040*/ ULONG Reserved : 24; // 0xffffff00;
	/*0048*/
};

enum _SECURE_SETTING_VALUE_TYPE {
	SecureSettingValueTypeBoolean = 0x0,
	SecureSettingValueTypeUlong = 0x1,
	SecureSettingValueTypeBinary = 0x2,
	SecureSettingValueTypeString = 0x3,
	SecureSettingValueTypeUnknown = 0x4
};

struct _SECURE_SPECULATION_CONTROL_INFORMATION {
	
	/*0000*/ <unnamed-type-SecureSpeculationFlags> SecureSpeculationFlags;
	/*0004*/
};

struct _SECURITY_ATTRIBUTES {
	/*0000*/ ULONG nLength;
	/*0008*/ void * lpSecurityDescriptor;
	/*0010*/ INT bInheritHandle;
	/*0018*/
};

struct _SECURITY_CAPABILITIES {
	/*0000*/ void * AppContainerSid;
	/*0008*/ _SID_AND_ATTRIBUTES * Capabilities;
	/*0010*/ ULONG CapabilityCount;
	/*0014*/ ULONG Reserved;
	/*0018*/
};

struct _SECURITY_DESCRIPTOR {
	/*0000*/ UCHAR Revision;
	/*0001*/ UCHAR Sbz1;
	/*0002*/ USHORT Control;
	/*0008*/ void * Owner;
	/*0010*/ void * Group;
	/*0018*/ _ACL * Sacl;
	/*0020*/ _ACL * Dacl;
	/*0028*/
};

struct _SECURITY_DESCRIPTOR_RELATIVE {
	/*0000*/ UCHAR Revision;
	/*0001*/ UCHAR Sbz1;
	/*0002*/ USHORT Control;
	/*0004*/ ULONG Owner;
	/*0008*/ ULONG Group;
	/*000c*/ ULONG Sacl;
	/*0010*/ ULONG Dacl;
	/*0014*/
};

enum _SECURITY_IMPERSONATION_LEVEL {
	SecurityAnonymous = 0x0,
	SecurityIdentification = 0x1,
	SecurityImpersonation = 0x2,
	SecurityDelegation = 0x3
};

struct _SECURITY_OBJECT_AI_PARAMS {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG ConstraintMask;
	/*0008*/
};

struct _SECURITY_QUALITY_OF_SERVICE {
	/*0000*/ ULONG Length;
	/*0004*/ _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	/*0008*/ UCHAR ContextTrackingMode;
	/*0009*/ UCHAR EffectiveOnly;
	/*000c*/
};

struct _SECURITY_SEED_AND_LENGTH {
	/*0000*/ UCHAR Length;
	/*0001*/ UCHAR Seed;
	/*0002*/
};

struct _SEC_WINNT_AUTH_IDENTITY_A {
	/*0000*/ UCHAR * User;
	/*0008*/ ULONG UserLength;
	/*0010*/ UCHAR * Domain;
	/*0018*/ ULONG DomainLength;
	/*0020*/ UCHAR * Password;
	/*0028*/ ULONG PasswordLength;
	/*002c*/ ULONG Flags;
	/*0030*/
};

struct _SEC_WINNT_AUTH_IDENTITY_W {
	/*0000*/ USHORT * User;
	/*0008*/ ULONG UserLength;
	/*0010*/ USHORT * Domain;
	/*0018*/ ULONG DomainLength;
	/*0020*/ USHORT * Password;
	/*0028*/ ULONG PasswordLength;
	/*002c*/ ULONG Flags;
	/*0030*/
};

struct _SEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION {
	/*0000*/ ULONGLONG SegmentReserveSize;
	/*0008*/ ULONGLONG SegmentCommitSize;
	/*0010*/ ULONGLONG SegmentCount;
	/*0018*/ ULONGLONG AllocatedSize;
	/*0020*/ ULONGLONG LargeAllocReserveSize;
	/*0028*/ ULONGLONG LargeAllocCommitSize;
	/*0030*/
};

struct _SEMAPHORE_BASIC_INFORMATION {
	/*0000*/ LONG CurrentCount;
	/*0004*/ LONG MaximumCount;
	/*0008*/
};

enum _SEMAPHORE_INFORMATION_CLASS {
	SemaphoreBasicInformation = 0x0
};

struct _SERVERSILO_BASIC_INFORMATION {
	/*0000*/ ULONG ServiceSessionId;
	/*0004*/ _SERVERSILO_STATE State;
	/*0008*/ LONG ExitStatus;
	/*000c*/ UCHAR IsDownlevelContainer;
	/*0010*/ void * ApiSetSchema;
	/*0018*/ void * HostApiSetSchema;
	/*0020*/
};

struct _SERVERSILO_INIT_INFORMATION {
	/*0000*/ void * DeleteEvent;
	/*0008*/ UCHAR IsDownlevelContainer;
	/*0010*/
};

enum _SERVERSILO_STATE {
	SERVERSILO_INITING = 0x0,
	SERVERSILO_STARTED = 0x1,
	SERVERSILO_SHUTTING_DOWN = 0x2,
	SERVERSILO_TERMINATING = 0x3,
	SERVERSILO_TERMINATED = 0x4
};

struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
	/*0000*/ ULONG dwReason;
	/*0008*/ CHAR * pszComment;
	/*0010*/ _SERVICE_STATUS_PROCESS ServiceStatus;
	/*0038*/
};

struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
	/*0000*/ ULONG dwReason;
	/*0008*/ WCHAR * pszComment;
	/*0010*/ _SERVICE_STATUS_PROCESS ServiceStatus;
	/*0038*/
};

struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
	
	/*0000*/ <unnamed-type-u> u;
	/*0008*/
};

struct _SERVICE_DELAYED_AUTO_START_INFO {
	/*0000*/ INT fDelayedAutostart;
	/*0004*/
};

struct _SERVICE_DESCRIPTIONA {
	/*0000*/ CHAR * lpDescription;
	/*0008*/
};

struct _SERVICE_DESCRIPTIONW {
	/*0000*/ WCHAR * lpDescription;
	/*0008*/
};

struct _SERVICE_FAILURE_ACTIONSA {
	/*0000*/ ULONG dwResetPeriod;
	/*0008*/ CHAR * lpRebootMsg;
	/*0010*/ CHAR * lpCommand;
	/*0018*/ ULONG cActions;
	/*0020*/ _SC_ACTION * lpsaActions;
	/*0028*/
};

struct _SERVICE_FAILURE_ACTIONSW {
	/*0000*/ ULONG dwResetPeriod;
	/*0008*/ WCHAR * lpRebootMsg;
	/*0010*/ WCHAR * lpCommand;
	/*0018*/ ULONG cActions;
	/*0020*/ _SC_ACTION * lpsaActions;
	/*0028*/
};

struct _SERVICE_FAILURE_ACTIONS_FLAG {
	/*0000*/ INT fFailureActionsOnNonCrashFailures;
	/*0004*/
};

struct _SERVICE_LAUNCH_PROTECTED_INFO {
	/*0000*/ ULONG dwLaunchProtected;
	/*0004*/
};

struct _SERVICE_NOTIFY_1 {
	/*0000*/ ULONG dwVersion;
	/*0008*/ void (* pfnNotifyCallback)( void * );
	/*0010*/ void * pContext;
	/*0018*/ ULONG dwNotificationStatus;
	/*001c*/ _SERVICE_STATUS_PROCESS ServiceStatus;
	/*0040*/
};

struct _SERVICE_NOTIFY_2A {
	/*0000*/ ULONG dwVersion;
	/*0008*/ void (* pfnNotifyCallback)( void * );
	/*0010*/ void * pContext;
	/*0018*/ ULONG dwNotificationStatus;
	/*001c*/ _SERVICE_STATUS_PROCESS ServiceStatus;
	/*0040*/ ULONG dwNotificationTriggered;
	/*0048*/ CHAR * pszServiceNames;
	/*0050*/
};

struct _SERVICE_NOTIFY_2W {
	/*0000*/ ULONG dwVersion;
	/*0008*/ void (* pfnNotifyCallback)( void * );
	/*0010*/ void * pContext;
	/*0018*/ ULONG dwNotificationStatus;
	/*001c*/ _SERVICE_STATUS_PROCESS ServiceStatus;
	/*0040*/ ULONG dwNotificationTriggered;
	/*0048*/ WCHAR * pszServiceNames;
	/*0050*/
};

struct _SERVICE_PREFERRED_NODE_INFO {
	/*0000*/ USHORT usPreferredNode;
	/*0002*/ UCHAR fDelete;
	/*0004*/
};

struct _SERVICE_PRESHUTDOWN_INFO {
	/*0000*/ ULONG dwPreshutdownTimeout;
	/*0004*/
};

struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
	/*0000*/ CHAR * pmszRequiredPrivileges;
	/*0008*/
};

struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
	/*0000*/ WCHAR * pmszRequiredPrivileges;
	/*0008*/
};

struct _SERVICE_SID_INFO {
	/*0000*/ ULONG dwServiceSidType;
	/*0004*/
};

struct _SERVICE_START_REASON {
	/*0000*/ ULONG dwReason;
	/*0004*/
};

struct _SERVICE_STATUS {
	/*0000*/ ULONG dwServiceType;
	/*0004*/ ULONG dwCurrentState;
	/*0008*/ ULONG dwControlsAccepted;
	/*000c*/ ULONG dwWin32ExitCode;
	/*0010*/ ULONG dwServiceSpecificExitCode;
	/*0014*/ ULONG dwCheckPoint;
	/*0018*/ ULONG dwWaitHint;
	/*001c*/
};

struct _SERVICE_STATUS_PROCESS {
	/*0000*/ ULONG dwServiceType;
	/*0004*/ ULONG dwCurrentState;
	/*0008*/ ULONG dwControlsAccepted;
	/*000c*/ ULONG dwWin32ExitCode;
	/*0010*/ ULONG dwServiceSpecificExitCode;
	/*0014*/ ULONG dwCheckPoint;
	/*0018*/ ULONG dwWaitHint;
	/*001c*/ ULONG dwProcessId;
	/*0020*/ ULONG dwServiceFlags;
	/*0024*/
};

struct _SERVICE_TABLE_ENTRYA {
	/*0000*/ CHAR * lpServiceName;
	/*0008*/ void (* lpServiceProc)( ULONG , CHAR * * );
	/*0010*/
};

struct _SERVICE_TABLE_ENTRYW {
	/*0000*/ WCHAR * lpServiceName;
	/*0008*/ void (* lpServiceProc)( ULONG , WCHAR * * );
	/*0010*/
};

struct _SERVICE_TIMECHANGE_INFO {
	/*0000*/ _LARGE_INTEGER liNewTime;
	/*0008*/ _LARGE_INTEGER liOldTime;
	/*0010*/
};

struct _SERVICE_TRIGGER {
	/*0000*/ ULONG dwTriggerType;
	/*0004*/ ULONG dwAction;
	/*0008*/ _GUID * pTriggerSubtype;
	/*0010*/ ULONG cDataItems;
	/*0018*/ _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM * pDataItems;
	/*0020*/
};

struct _SERVICE_TRIGGER_INFO {
	/*0000*/ ULONG cTriggers;
	/*0008*/ _SERVICE_TRIGGER * pTriggers;
	/*0010*/ UCHAR * pReserved;
	/*0018*/
};

struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
	/*0000*/ ULONG dwDataType;
	/*0004*/ ULONG cbData;
	/*0008*/ UCHAR * pData;
	/*0010*/
};

struct _SETJMP_FLOAT128 {
	/*0000*/ ULONGLONG Part[0x2];
	/*0010*/
};

struct _SET_CACHED_RUNS_STATE_INPUT_BUFFER {
	/*0000*/ UCHAR Enable;
	/*0001*/
};

struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG AlignmentShift;
	/*0008*/ ULONGLONG FileOffsetToAlign;
	/*0010*/ ULONG FallbackAlignmentShift;
	/*0018*/
};

struct _SET_PURGE_FAILURE_MODE_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _SE_ACCESS_REPLY {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG ResultListCount;
	/*0008*/ ULONG * GrantedAccess;
	/*0010*/ LONG * AccessStatus;
	/*0018*/ _ACCESS_REASONS * AccessReason;
	/*0020*/ _PRIVILEGE_SET * * Privileges;
	/*0028*/
};

struct _SE_ACCESS_REQUEST {
	/*0000*/ ULONG Size;
	/*0008*/ _SE_SECURITY_DESCRIPTOR * SeSecurityDescriptor;
	/*0010*/ ULONG DesiredAccess;
	/*0014*/ ULONG PreviouslyGrantedAccess;
	/*0018*/ void * PrincipalSelfSid;
	/*0020*/ _GENERIC_MAPPING * GenericMapping;
	/*0028*/ ULONG ObjectTypeListCount;
	/*0030*/ _OBJECT_TYPE_LIST * ObjectTypeList;
	/*0038*/
};

struct _SE_APPID_TAGGING_CLAIM_NODE {
	/*0000*/ _UNICODE_STRING AppIdTaggingKey;
	/*0010*/ _UNICODE_STRING AppIdTaggingValue;
	/*0020*/ _SINGLE_LIST_ENTRY ListEntry;
	/*0028*/
};

struct _SE_AUDIT_INFO {
	/*0000*/ ULONG Size;
	/*0004*/ _AUDIT_EVENT_TYPE AuditType;
	/*0008*/ _SE_AUDIT_OPERATION AuditOperation;
	/*000c*/ ULONG AuditFlags;
	/*0010*/ _UNICODE_STRING SubsystemName;
	/*0020*/ _UNICODE_STRING ObjectTypeName;
	/*0030*/ _UNICODE_STRING ObjectName;
	/*0040*/ void * HandleId;
	/*0048*/ _GUID * TransactionId;
	/*0050*/ _LUID * OperationId;
	/*0058*/ UCHAR ObjectCreation;
	/*0059*/ UCHAR GenerateOnClose;
	/*0060*/
};

enum _SE_AUDIT_OPERATION {
	AuditPrivilegeObject = 0x0,
	AuditPrivilegeService = 0x1,
	AuditAccessCheck = 0x2,
	AuditOpenObject = 0x3,
	AuditOpenObjectWithTransaction = 0x4,
	AuditCloseObject = 0x5,
	AuditDeleteObject = 0x6,
	AuditOpenObjectForDelete = 0x7,
	AuditOpenObjectForDeleteWithTransaction = 0x8,
	AuditCloseNonObject = 0x9,
	AuditOpenNonObject = 0xa,
	AuditObjectReference = 0xb,
	AuditHandleCreation = 0xc
};

struct _SE_CODEINTEGRITY_ORIGIN_CLAIM {
	/*0000*/ _SE_SAFE_OPEN_PROMPT_RESULTS PromptResults;
	/*0210*/ _SINGLE_LIST_ENTRY AppIdTaggingClaimsHead;
	/*0218*/
};

enum _SE_IMAGE_SIGNATURE_TYPE {
	SeImageSignatureNone = 0x0,
	SeImageSignatureEmbedded = 0x1,
	SeImageSignatureCache = 0x2,
	SeImageSignatureCatalogCached = 0x3,
	SeImageSignatureCatalogNotCached = 0x4,
	SeImageSignatureCatalogHint = 0x5,
	SeImageSignaturePackageCatalog = 0x6,
	SeImageSignaturePplMitigated = 0x7
};

struct _SE_IMPERSONATION_STATE {
	/*0000*/ void * Token;
	/*0008*/ UCHAR CopyOnOpen;
	/*0009*/ UCHAR EffectiveOnly;
	/*000c*/ _SECURITY_IMPERSONATION_LEVEL Level;
	/*0010*/
};

struct _SE_LEARNING_MODE_USER_OBJECT_DATA {
	/*0000*/ ULONG Cookie;
	/*0008*/ _UNICODE_STRING * ObjectType;
	/*0010*/ _UNICODE_STRING * ObjectName;
	/*0018*/
};

struct _SE_PACKAGE_CAPABILITY_INFO {
	/*0000*/ ULONG Remaining;
	/*0004*/ ULONG PackageGrantedAccess;
	/*0008*/ ULONG CapabilityGrantedAccess;
	/*000c*/ ULONG UserGroupsRemaining;
	/*0010*/ ULONG AllAppPackagesSkippedAccess;
	/*0014*/ UCHAR PackagesPresent;
	/*0015*/ UCHAR PackageMatch;
	/*0016*/ UCHAR CapabilityMatch;
	/*0017*/ UCHAR LogPermissiveFailure;
	/*0018*/ UCHAR AllAppPackagesSkipped;
	/*001c*/
};

enum _SE_SAFE_OPEN_PROMPT_EXPERIENCE_RESULTS {
	SeSafeOpenExperienceNone = 0x0,
	SeSafeOpenExperienceCalled = 0x1,
	SeSafeOpenExperienceAppRepCalled = 0x2,
	SeSafeOpenExperiencePromptDisplayed = 0x4,
	SeSafeOpenExperienceUAC = 0x8,
	SeSafeOpenExperienceUninstaller = 0x10,
	SeSafeOpenExperienceIgnoreUnknownOrBad = 0x20,
	SeSafeOpenExperienceDefenderTrustedInstaller = 0x40,
	SeSafeOpenExperienceMOTWPresent = 0x80,
	SeSafeOpenExperienceElevatedNoPropagation = 0x100
};

struct _SE_SAFE_OPEN_PROMPT_RESULTS {
	/*0000*/ _SE_SAFE_OPEN_PROMPT_EXPERIENCE_RESULTS Results;
	/*0004*/ WCHAR Path[0x104];
	/*020c*/
};

struct _SE_SECURITY_DESCRIPTOR {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ void * SecurityDescriptor;
	/*0010*/
};

struct _SE_SET_FILE_CACHE_INFORMATION {
	/*0000*/ ULONG Size;
	/*0008*/ _UNICODE_STRING CatalogDirectoryPath;
	/*0008*/ _SE_SET_FILE_CACHE_ORIGIN_CLAIM_INFORMATION OriginClaimInfo;
	/*0018*/
};

struct _SE_SET_FILE_CACHE_ORIGIN_CLAIM_INFORMATION {
	/*0000*/ ULONGLONG OriginClaimSize;
	/*0008*/ void * OriginClaim;
	/*0010*/
};

union _SE_SID {
	/*0000*/ _SID Sid;
	/*0000*/ UCHAR Buffer[0x44];
	/*0044*/
};

struct _SE_TOKEN_USER {
	/*0000*/ _TOKEN_USER TokenUser;
	/*0000*/ _SID_AND_ATTRIBUTES User;
	/*0010*/ _SID Sid;
	/*0010*/ UCHAR Buffer[0x44];
	/*0058*/
};

enum _SE_VALIDATE_MAPPING_TYPE {
	SE_VALIDATE_MAPPING_HEADER_ONLY = 0x0,
	SE_VALIDATE_MAPPING_ENTIRE_IMAGE = 0x1,
	SE_VALIDATE_MAPPING_ENTIRE_IMAGE_CLEAN = 0x2
};

struct _SHARED_VIRTUAL_DISK_SUPPORT {
	/*0000*/ _SharedVirtualDiskSupportType SharedVirtualDiskSupport;
	/*0004*/ _SharedVirtualDiskHandleState HandleState;
	/*0008*/
};

struct _SHORT_SIZEDARR {
	/*0000*/ ULONG clSize;
	/*0008*/ USHORT * pData;
	/*0010*/
};

struct _SHRINK_VOLUME_INFORMATION {
	/*0000*/ _SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
	/*0008*/ ULONGLONG Flags;
	/*0010*/ LONGLONG NewNumberOfSectors;
	/*0018*/
};

enum _SHRINK_VOLUME_REQUEST_TYPES {
	ShrinkPrepare = 0x1,
	ShrinkCommit = 0x2,
	ShrinkAbort = 0x3
};

struct _SHUFFLE_FILE_DATA {
	/*0000*/ LONGLONG StartingOffset;
	/*0008*/ LONGLONG Length;
	/*0010*/ ULONG Flags;
	/*0018*/
};

enum _SHUTDOWN_ACTION {
	ShutdownNoReboot = 0x0,
	ShutdownReboot = 0x1,
	ShutdownPowerOff = 0x2,
	ShutdownRebootForRecovery = 0x3
};

struct _SID {
	/*0000*/ UCHAR Revision;
	/*0001*/ UCHAR SubAuthorityCount;
	/*0002*/ _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
	/*0008*/ ULONG SubAuthority[0x1];
	/*000c*/
};

struct _SID_AND_ATTRIBUTES {
	/*0000*/ void * Sid;
	/*0008*/ ULONG Attributes;
	/*0010*/
};

struct _SID_AND_ATTRIBUTES_HASH {
	/*0000*/ ULONG SidCount;
	/*0008*/ _SID_AND_ATTRIBUTES * SidAttr;
	/*0010*/ ULONGLONG Hash[0x20];
	/*0110*/
};

struct _SID_IDENTIFIER_AUTHORITY {
	/*0000*/ UCHAR Value[0x6];
	/*0006*/
};

enum _SID_NAME_USE {
	SidTypeUser = 0x1,
	SidTypeGroup = 0x2,
	SidTypeDomain = 0x3,
	SidTypeAlias = 0x4,
	SidTypeWellKnownGroup = 0x5,
	SidTypeDeletedAccount = 0x6,
	SidTypeInvalid = 0x7,
	SidTypeUnknown = 0x8,
	SidTypeComputer = 0x9,
	SidTypeLabel = 0xa,
	SidTypeLogonSession = 0xb
};

struct _SILOOBJECT_BASIC_INFORMATION {
	/*0000*/ ULONG SiloId;
	/*0004*/ ULONG SiloParentId;
	/*0008*/ ULONG NumberOfProcesses;
	/*000c*/ UCHAR IsInServerSilo;
	/*000d*/ UCHAR Reserved[0x3];
	/*0010*/
};

struct _SILOOBJECT_ROOT_DIRECTORY {
	/*0000*/ ULONG ControlFlags;
	/*0000*/ _UNICODE_STRING Path;
	/*0010*/
};

struct _SILO_USER_SHARED_DATA {
	/*0000*/ ULONG ServiceSessionId;
	/*0004*/ ULONG ActiveConsoleId;
	/*0008*/ LONGLONG ConsoleSessionForegroundProcessId;
	/*0010*/ _NT_PRODUCT_TYPE NtProductType;
	/*0014*/ ULONG SuiteMask;
	/*0018*/ ULONG SharedUserSessionId;
	/*001c*/ UCHAR IsMultiSessionSku;
	/*001d*/ UCHAR IsStateSeparationEnabled;
	/*001e*/ WCHAR NtSystemRoot[0x104];
	/*0226*/ USHORT UserModeGlobalLogger[0x10];
	/*0248*/ ULONG TimeZoneId;
	/*024c*/ LONG volatile TimeZoneBiasStamp;
	/*0250*/ _KSYSTEM_TIME TimeZoneBias;
	/*0260*/ _LARGE_INTEGER TimeZoneBiasEffectiveStart;
	/*0268*/ _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
	/*0270*/
};

struct _SINGLE_LIST_ENTRY {
	/*0000*/ _SINGLE_LIST_ENTRY * Next;
	/*0008*/
};

struct _SINGLE_LIST_ENTRY32 {
	/*0000*/ ULONG Next;
	/*0004*/
};

struct _SI_COPYFILE {
	/*0000*/ ULONG SourceFileNameLength;
	/*0004*/ ULONG DestinationFileNameLength;
	/*0008*/ ULONG Flags;
	/*000c*/ WCHAR FileNameBuffer[0x1];
	/*0010*/
};

struct _SLIST_ENTRY {
	/*0000*/ _SLIST_ENTRY * Next;
	/*0010*/
};

union _SLIST_HEADER {
	
	/*0000*/ ULONGLONG Alignment;
	/*0008*/ ULONGLONG Region;
	/*0000*/ <unnamed-type-HeaderX64> HeaderX64;
	/*0010*/
};

struct _SL_APPX_CACHE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG DataSize;
	/*0010*/ ULONGLONG DataCheckSum;
	/*0018*/ _SL_APPX_CACHE_VALUE_DESCRIPTOR Descriptors[0x1];
	/*0048*/
};

struct _SL_APPX_CACHE_VALUE_DESCRIPTOR {
	/*0000*/ UCHAR HashedName[0x20];
	/*0020*/ ULONGLONG Expiration;
	/*0028*/ ULONG DataSize;
	/*002c*/ UCHAR Data[0x1];
	/*0030*/
};

struct _SL_HWID_DEVICE_INFO {
	/*0000*/ ULONG SizeBytes;
	/*0004*/ UCHAR Type;
	/*0005*/ UCHAR DeviceRemovalPolicy;
	/*0006*/ UCHAR AuthenticationStatus;
	/*0007*/ UCHAR Disposition;
	/*0008*/ ULONG DeviceNodeLevel;
	/*000c*/ _GUID Guid;
	/*001c*/ UCHAR Data[0x1];
	/*0020*/
};

struct _SL_KMEM_CACHE {
	/*0000*/ ULONG TotalSize;
	/*0004*/ ULONG SizeOfData;
	/*0008*/ ULONG SignatureSize;
	/*000c*/ ULONG Flags;
	/*0010*/ ULONG Version;
	/*0014*/ _SL_KMEM_CACHE_VALUE_DESCRIPTOR Descriptors[0x1];
	/*0028*/
};

struct _SL_KMEM_CACHE_VALUE_DESCRIPTOR {
	/*0000*/ USHORT Size;
	/*0002*/ USHORT NameLength;
	/*0004*/ USHORT Type;
	/*0006*/ USHORT DataLength;
	/*0008*/ ULONG Attributes;
	/*000c*/ ULONG Reserved;
	/*0010*/ WCHAR Name[0x1];
	/*0014*/
};

struct _SMALL_RECT {
	/*0000*/ SHORT Left;
	/*0002*/ SHORT Top;
	/*0004*/ SHORT Right;
	/*0006*/ SHORT Bottom;
	/*0008*/
};

struct _SMB_SHARE_FLUSH_AND_PURGE_INPUT {
	/*0000*/ USHORT Version;
	/*0002*/
};

struct _SMB_SHARE_FLUSH_AND_PURGE_OUTPUT {
	/*0000*/ ULONG cEntriesPurged;
	/*0004*/
};

struct _SPARSE_OVERALLOCATE_DATA {
	/*0000*/ ULONG SparseOverAllocateSize;
	/*0004*/
};

struct _STARTUPINFOA {
	/*0000*/ ULONG cb;
	/*0008*/ CHAR * lpReserved;
	/*0010*/ CHAR * lpDesktop;
	/*0018*/ CHAR * lpTitle;
	/*0020*/ ULONG dwX;
	/*0024*/ ULONG dwY;
	/*0028*/ ULONG dwXSize;
	/*002c*/ ULONG dwYSize;
	/*0030*/ ULONG dwXCountChars;
	/*0034*/ ULONG dwYCountChars;
	/*0038*/ ULONG dwFillAttribute;
	/*003c*/ ULONG dwFlags;
	/*0040*/ USHORT wShowWindow;
	/*0042*/ USHORT cbReserved2;
	/*0048*/ UCHAR * lpReserved2;
	/*0050*/ void * hStdInput;
	/*0058*/ void * hStdOutput;
	/*0060*/ void * hStdError;
	/*0068*/
};

struct _STARTUPINFOEXA {
	/*0000*/ _STARTUPINFOA StartupInfo;
	/*0068*/ _PROC_THREAD_ATTRIBUTE_LIST * lpAttributeList;
	/*0070*/
};

struct _STARTUPINFOEXW {
	/*0000*/ _STARTUPINFOW StartupInfo;
	/*0068*/ _PROC_THREAD_ATTRIBUTE_LIST * lpAttributeList;
	/*0070*/
};

struct _STARTUPINFOW {
	/*0000*/ ULONG cb;
	/*0008*/ WCHAR * lpReserved;
	/*0010*/ WCHAR * lpDesktop;
	/*0018*/ WCHAR * lpTitle;
	/*0020*/ ULONG dwX;
	/*0024*/ ULONG dwY;
	/*0028*/ ULONG dwXSize;
	/*002c*/ ULONG dwYSize;
	/*0030*/ ULONG dwXCountChars;
	/*0034*/ ULONG dwYCountChars;
	/*0038*/ ULONG dwFillAttribute;
	/*003c*/ ULONG dwFlags;
	/*0040*/ USHORT wShowWindow;
	/*0042*/ USHORT cbReserved2;
	/*0048*/ UCHAR * lpReserved2;
	/*0050*/ void * hStdInput;
	/*0058*/ void * hStdOutput;
	/*0060*/ void * hStdError;
	/*0068*/
};

enum _STATE_LOCATION_TYPE {
	LocationTypeRegistry = 0x0,
	LocationTypeFileSystem = 0x1,
	LocationTypeMaximum = 0x2
};

struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
	/*0000*/ ULONG EntryLength;
	/*0004*/ ULONG DependencyTypeFlags;
	/*0008*/ ULONG ProviderSpecificFlags;
	/*000c*/ _VIRTUAL_STORAGE_TYPE VirtualStorageType;
	/*0020*/
};

struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
	/*0000*/ ULONG EntryLength;
	/*0004*/ ULONG DependencyTypeFlags;
	/*0008*/ ULONG ProviderSpecificFlags;
	/*000c*/ _VIRTUAL_STORAGE_TYPE VirtualStorageType;
	/*0020*/ ULONG AncestorLevel;
	/*0024*/ ULONG HostVolumeNameOffset;
	/*0028*/ ULONG HostVolumeNameSize;
	/*002c*/ ULONG DependentVolumeNameOffset;
	/*0030*/ ULONG DependentVolumeNameSize;
	/*0034*/ ULONG RelativePathOffset;
	/*0038*/ ULONG RelativePathSize;
	/*003c*/ ULONG DependentDeviceNameOffset;
	/*0040*/ ULONG DependentDeviceNameSize;
	/*0044*/
};

struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
	/*0000*/ ULONG RequestLevel;
	/*0004*/ ULONG RequestFlags;
	/*0008*/
};

struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
	/*0000*/ ULONG ResponseLevel;
	/*0004*/ ULONG NumberEntries;
	/*0008*/ _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[];
	/*0008*/ _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[];
	/*004c*/
};

struct _STORAGE_RESERVE_AREA_DEFINITION {
	/*0000*/ _STORAGE_RESERVE_ID Id;
	/*0004*/ ULONG Flags;
	/*0008*/ LONGLONG SpaceGuarantee;
	/*0010*/
};

struct _STORAGE_RESERVE_AREA_INFO {
	/*0000*/ _STORAGE_RESERVE_ID Id;
	/*0004*/ ULONG Flags;
	/*0008*/ LONGLONG SpaceGuarantee;
	/*0010*/ LONGLONG SpaceUsed;
	/*0018*/
};

enum _STORAGE_RESERVE_ID {
	StorageReserveIdNone = 0x0,
	StorageReserveIdHard = 0x1,
	StorageReserveIdSoft = 0x2,
	StorageReserveIdUpdateScratch = 0x3,
	StorageReserveIdMax = 0x4
};

struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG StreamId;
	/*0008*/
};

struct _STREAMS_QUERY_ID_OUTPUT_BUFFER {
	/*0000*/ ULONG StreamId;
	/*0004*/
};

struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {
	/*0000*/ ULONG OptimalWriteSize;
	/*0004*/ ULONG StreamGranularitySize;
	/*0008*/ ULONG StreamIdMin;
	/*000c*/ ULONG StreamIdMax;
	/*0010*/
};

struct _STREAM_EXTENT_ENTRY {
	
	/*0000*/ ULONG Flags;
	/*0008*/ <unnamed-type-ExtentInformation> ExtentInformation;
	/*0028*/
};

struct _STREAM_INFORMATION_ENTRY {

	union _StreamInformation {
	
		struct _Ea {
			/*0000*/ USHORT Length;
			/*0002*/ USHORT Flags;
			/*0004*/ ULONG EaSize;
			/*0008*/ ULONG EaInformationOffset;
			/*000c*/
		};

	
		struct _Reparse {
			/*0000*/ USHORT Length;
			/*0002*/ USHORT Flags;
			/*0004*/ ULONG ReparseDataSize;
			/*0008*/ ULONG ReparseDataOffset;
			/*000c*/
		};

	
		struct _DataStream {
			/*0000*/ USHORT Length;
			/*0002*/ USHORT Flags;
			/*0004*/ ULONG Reserved;
			/*0008*/ ULONGLONG Vdl;
			/*0010*/
		};

	
		struct _DesiredStorageClass {
			/*0000*/ _FILE_STORAGE_TIER_CLASS Class;
			/*0004*/ ULONG Flags;
			/*0008*/
		};

		/*0000*/ _DesiredStorageClass DesiredStorageClass;
		/*0000*/ _DataStream DataStream;
		/*0000*/ _Reparse Reparse;
		/*0000*/ _Ea Ea;
		/*0010*/
	};

	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ _StreamInformation StreamInformation;
	/*0018*/
};

enum _STREAM_INFO_LEVELS {
	FindStreamInfoStandard = 0x0,
	FindStreamInfoMaxInfoLevel = 0x1
};

struct _STREAM_LAYOUT_ENTRY {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG NextStreamOffset;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG ExtentInformationOffset;
	/*0010*/ _LARGE_INTEGER AllocationSize;
	/*0018*/ _LARGE_INTEGER EndOfFile;
	/*0020*/ ULONG StreamInformationOffset;
	/*0024*/ ULONG AttributeTypeCode;
	/*0028*/ ULONG AttributeFlags;
	/*002c*/ ULONG StreamIdentifierLength;
	/*0030*/ WCHAR StreamIdentifier[0x1];
	/*0038*/
};

struct _STRING {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0008*/ CHAR * Buffer;
	/*0010*/
};

struct _STRING32 {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0004*/ ULONG Buffer;
	/*0008*/
};

struct _STRING64 {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0008*/ ULONGLONG Buffer;
	/*0010*/
};

enum _SUBSYSTEM_INFORMATION_TYPE {
	SubsystemInformationTypeWin32 = 0x0,
	SubsystemInformationTypeWSL = 0x1,
	MaxSubsystemInformationType = 0x2
};

enum _SUITE_TYPE {
	SmallBusiness = 0x0,
	Enterprise = 0x1,
	BackOffice = 0x2,
	CommunicationServer = 0x3,
	TerminalServer = 0x4,
	SmallBusinessRestricted = 0x5,
	EmbeddedNT = 0x6,
	DataCenter = 0x7,
	SingleUserTS = 0x8,
	Personal = 0x9,
	Blade = 0xa,
	EmbeddedRestricted = 0xb,
	SecurityAppliance = 0xc,
	StorageServer = 0xd,
	ComputeServer = 0xe,
	WHServer = 0xf,
	PhoneNT = 0x10,
	MultiUserTS = 0x11,
	MaxSuiteType = 0x12
};

struct _SUPPORTED_OS_INFO {
	/*0000*/ USHORT MajorVersion;
	/*0002*/ USHORT MinorVersion;
	/*0004*/
};

enum _SUSPEND_RESILIENCY_STATE {
	SuspendResiliencyStateUnknown = 0x0,
	SuspendResiliencyStateSuspending = 0x1,
	SuspendResiliencyStateResuming = 0x2,
	SuspendResiliencyStateTerminating = 0x3,
	SuspendResiliencyStateSuspended = 0x4,
	SuspendResiliencyStateRunning = 0x5
};

enum _SUSPEND_RESILIENCY_TYPE {
	SuspendResiliencyTypeLocal = 0x0,
	SuspendResiliencyTypeCrossVM = 0x1
};

enum _SYMBOLIC_LINK_INFO_CLASS {
	SymbolicLinkGlobalInformation = 0x1,
	SymbolicLinkAccessMask = 0x2
};

struct _SYSDBG_BUS_DATA {
	/*0000*/ ULONG Address;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG Request;
	/*0014*/ _BUS_DATA_TYPE BusDataType;
	/*0018*/ ULONG BusNumber;
	/*001c*/ ULONG SlotNumber;
	/*0020*/
};

enum _SYSDBG_COMMAND {
	SysDbgQueryModuleInformation = 0x0,
	SysDbgQueryTraceInformation = 0x1,
	SysDbgSetTracepoint = 0x2,
	SysDbgSetSpecialCall = 0x3,
	SysDbgClearSpecialCalls = 0x4,
	SysDbgQuerySpecialCalls = 0x5,
	SysDbgBreakPoint = 0x6,
	SysDbgQueryVersion = 0x7,
	SysDbgReadVirtual = 0x8,
	SysDbgWriteVirtual = 0x9,
	SysDbgReadPhysical = 0xa,
	SysDbgWritePhysical = 0xb,
	SysDbgReadControlSpace = 0xc,
	SysDbgWriteControlSpace = 0xd,
	SysDbgReadIoSpace = 0xe,
	SysDbgWriteIoSpace = 0xf,
	SysDbgReadMsr = 0x10,
	SysDbgWriteMsr = 0x11,
	SysDbgReadBusData = 0x12,
	SysDbgWriteBusData = 0x13,
	SysDbgCheckLowMemory = 0x14,
	SysDbgEnableKernelDebugger = 0x15,
	SysDbgDisableKernelDebugger = 0x16,
	SysDbgGetAutoKdEnable = 0x17,
	SysDbgSetAutoKdEnable = 0x18,
	SysDbgGetPrintBufferSize = 0x19,
	SysDbgSetPrintBufferSize = 0x1a,
	SysDbgGetKdUmExceptionEnable = 0x1b,
	SysDbgSetKdUmExceptionEnable = 0x1c,
	SysDbgGetTriageDump = 0x1d,
	SysDbgGetKdBlockEnable = 0x1e,
	SysDbgSetKdBlockEnable = 0x1f,
	SysDbgRegisterForUmBreakInfo = 0x20,
	SysDbgGetUmBreakPid = 0x21,
	SysDbgClearUmBreakPid = 0x22,
	SysDbgGetUmAttachPid = 0x23,
	SysDbgClearUmAttachPid = 0x24,
	SysDbgGetLiveKernelDump = 0x25,
	SysDbgKdPullRemoteFile = 0x26
};

struct _SYSDBG_CONTROL_SPACE {
	/*0000*/ ULONGLONG Address;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG Request;
	/*0014*/ ULONG Processor;
	/*0018*/
};

struct _SYSDBG_IO_SPACE {
	/*0000*/ ULONGLONG Address;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG Request;
	/*0014*/ _INTERFACE_TYPE InterfaceType;
	/*0018*/ ULONG BusNumber;
	/*001c*/ ULONG AddressSpace;
	/*0020*/
};

struct _SYSDBG_KD_PULL_REMOTE_FILE {
	/*0000*/ _UNICODE_STRING ImageFileName;
	/*0010*/
};

struct _SYSDBG_LIVEDUMP_CONTROL {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG BugCheckCode;
	/*0008*/ ULONGLONG BugCheckParam1;
	/*0010*/ ULONGLONG BugCheckParam2;
	/*0018*/ ULONGLONG BugCheckParam3;
	/*0020*/ ULONGLONG BugCheckParam4;
	/*0028*/ void * DumpFileHandle;
	/*0030*/ void * CancelEventHandle;
	/*0038*/ _SYSDBG_LIVEDUMP_CONTROL_FLAGS Flags;
	/*003c*/ _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES AddPagesControl;
	/*0040*/ _SYSDBG_LIVEDUMP_SELECTIVE_CONTROL * SelectiveControl;
	/*0048*/
};

union _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES {
	/*0000*/ ULONG HypervisorPages : 01; // 0x00000001;
	/*0000*/ ULONG NonEssentialHypervisorPages : 01; // 0x00000002;
	/*0000*/ ULONG Reserved : 30; // 0xfffffffc;
	/*0000*/ ULONG AsUlong;
	/*0004*/
};

union _SYSDBG_LIVEDUMP_CONTROL_FLAGS {
	/*0000*/ ULONG UseDumpStorageStack : 01; // 0x00000001;
	/*0000*/ ULONG CompressMemoryPagesData : 01; // 0x00000002;
	/*0000*/ ULONG IncludeUserSpaceMemoryPages : 01; // 0x00000004;
	/*0000*/ ULONG AbortIfMemoryPressure : 01; // 0x00000008;
	/*0000*/ ULONG SelectiveDump : 01; // 0x00000010;
	/*0000*/ ULONG Reserved : 27; // 0xffffffe0;
	/*0000*/ ULONG AsUlong;
	/*0004*/
};

struct _SYSDBG_LIVEDUMP_CONTROL_V1 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG BugCheckCode;
	/*0008*/ ULONGLONG BugCheckParam1;
	/*0010*/ ULONGLONG BugCheckParam2;
	/*0018*/ ULONGLONG BugCheckParam3;
	/*0020*/ ULONGLONG BugCheckParam4;
	/*0028*/ void * DumpFileHandle;
	/*0030*/ void * CancelEventHandle;
	/*0038*/ _SYSDBG_LIVEDUMP_CONTROL_FLAGS Flags;
	/*003c*/ _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES AddPagesControl;
	/*0040*/
};

struct _SYSDBG_LIVEDUMP_SELECTIVE_CONTROL {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONGLONG ThreadKernelStacks : 01; // 0x0000000000000001;
	/*0008*/ ULONGLONG ReservedFlags : 63; // 0xfffffffffffffffe;
	/*0008*/ ULONGLONG Flags;
	/*0010*/ ULONGLONG Reserved[0x4];
	/*0030*/
};

struct _SYSDBG_MSR {
	/*0000*/ ULONG Msr;
	/*0008*/ ULONGLONG Data;
	/*0010*/
};

struct _SYSDBG_PHYSICAL {
	/*0000*/ _LARGE_INTEGER Address;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG Request;
	/*0018*/
};

struct _SYSDBG_TRIAGE_DUMP {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG BugCheckCode;
	/*0008*/ ULONGLONG BugCheckParam1;
	/*0010*/ ULONGLONG BugCheckParam2;
	/*0018*/ ULONGLONG BugCheckParam3;
	/*0020*/ ULONGLONG BugCheckParam4;
	/*0028*/ ULONG ProcessHandles;
	/*002c*/ ULONG ThreadHandles;
	/*0030*/ void * * Handles;
	/*0038*/
};

struct _SYSDBG_VIRTUAL {
	/*0000*/ void * Address;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG Request;
	/*0018*/
};

struct _SYSTEMTIME {
	/*0000*/ USHORT wYear;
	/*0002*/ USHORT wMonth;
	/*0004*/ USHORT wDayOfWeek;
	/*0006*/ USHORT wDay;
	/*0008*/ USHORT wHour;
	/*000a*/ USHORT wMinute;
	/*000c*/ USHORT wSecond;
	/*000e*/ USHORT wMilliseconds;
	/*0010*/
};

struct _SYSTEM_ACCESS_FILTER_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_ACPI_AUDIT_INFORMATION {
	/*0000*/ ULONG RsdpCount;
	/*0004*/ ULONG SameRsdt : 01; // 0x00000001;
	/*0004*/ ULONG SlicPresent : 01; // 0x00000002;
	/*0004*/ ULONG SlicDifferent : 01; // 0x00000004;
	/*0008*/
};

enum _SYSTEM_ACTIVITY_MODERATION_APP_TYPE {
	SystemActivityModerationAppTypeClassic = 0x0,
	SystemActivityModerationAppTypePackaged = 0x1,
	MaxSystemActivityModerationAppType = 0x2
};

struct _SYSTEM_ACTIVITY_MODERATION_INFO {
	/*0000*/ _UNICODE_STRING Identifier;
	/*0010*/ _SYSTEM_ACTIVITY_MODERATION_STATE ModerationState;
	/*0014*/ _SYSTEM_ACTIVITY_MODERATION_APP_TYPE AppType;
	/*0018*/
};

enum _SYSTEM_ACTIVITY_MODERATION_STATE {
	SystemActivityModerationStateSystemManaged = 0x0,
	SystemActivityModerationStateUserManagedAllowThrottling = 0x1,
	SystemActivityModerationStateUserManagedDisableThrottling = 0x2,
	MaxSystemActivityModerationState = 0x3
};

struct _SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS {
	/*0000*/ void * UserKeyHandle;
	/*0008*/
};

struct _SYSTEM_ALARM_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_ALARM_CALLBACK_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _SYSTEM_ALARM_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _SYSTEM_AUDIT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_AUDIT_CALLBACK_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _SYSTEM_AUDIT_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _SYSTEM_BASIC_INFORMATION {
	/*0000*/ ULONG Reserved;
	/*0004*/ ULONG TimerResolution;
	/*0008*/ ULONG PageSize;
	/*000c*/ ULONG NumberOfPhysicalPages;
	/*0010*/ ULONG LowestPhysicalPageNumber;
	/*0014*/ ULONG HighestPhysicalPageNumber;
	/*0018*/ ULONG AllocationGranularity;
	/*0020*/ ULONGLONG MinimumUserModeAddress;
	/*0028*/ ULONGLONG MaximumUserModeAddress;
	/*0030*/ ULONGLONG ActiveProcessorsAffinityMask;
	/*0038*/ CHAR NumberOfProcessors;
	/*0040*/
};

struct _SYSTEM_BASIC_PERFORMANCE_INFORMATION {
	/*0000*/ ULONGLONG AvailablePages;
	/*0008*/ ULONGLONG CommittedPages;
	/*0010*/ ULONGLONG CommitLimit;
	/*0018*/ ULONGLONG PeakCommitment;
	/*0020*/
};

struct _SYSTEM_BIGPOOL_ENTRY {
	/*0000*/ void * VirtualAddress;
	/*0000*/ ULONGLONG NonPaged : 01; // 0x0000000000000001;
	/*0008*/ ULONGLONG SizeInBytes;
	/*0010*/ UCHAR Tag[0x4];
	/*0010*/ ULONG TagUlong;
	/*0018*/
};

struct _SYSTEM_BIGPOOL_INFORMATION {
	/*0000*/ ULONG Count;
	/*0008*/ _SYSTEM_BIGPOOL_ENTRY AllocatedInfo[0x1];
	/*0020*/
};

struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION {
	/*0000*/ _GUID BootIdentifier;
	/*0010*/ _FIRMWARE_TYPE FirmwareType;
	/*0018*/ ULONGLONG BootFlags;
	/*0018*/ ULONGLONG DbgMenuOsSelection : 01; // 0x0000000000000001;
	/*0018*/ ULONGLONG DbgHiberBoot : 01; // 0x0000000000000002;
	/*0018*/ ULONGLONG DbgSoftBoot : 01; // 0x0000000000000004;
	/*0018*/ ULONGLONG DbgMeasuredLaunch : 01; // 0x0000000000000008;
	/*0018*/ ULONGLONG DbgMeasuredLaunchCapable : 01; // 0x0000000000000010;
	/*0018*/ ULONGLONG DbgSystemHiveReplace : 01; // 0x0000000000000020;
	/*0018*/ ULONGLONG DbgMeasuredLaunchSmmProtections : 01; // 0x0000000000000040;
	/*0018*/ ULONGLONG DbgMeasuredLaunchSmmLevel : 07; // 0x0000000000003f80;
	/*0020*/
};

struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION_V1 {
	/*0000*/ _GUID BootIdentifier;
	/*0010*/ _FIRMWARE_TYPE FirmwareType;
	/*0014*/
};

struct _SYSTEM_BOOT_GRAPHICS_INFORMATION {
	/*0000*/ _LARGE_INTEGER FrameBuffer;
	/*0008*/ ULONG Width;
	/*000c*/ ULONG Height;
	/*0010*/ ULONG PixelStride;
	/*0014*/ ULONG Flags;
	/*0018*/ _SYSTEM_PIXEL_FORMAT Format;
	/*001c*/ ULONG DisplayRotation;
	/*0020*/
};

struct _SYSTEM_BOOT_LOGO_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG BitmapOffset;
	/*0008*/
};

struct _SYSTEM_BUILD_VERSION_INFORMATION {
	
	/*0000*/ USHORT LayerNumber;
	/*0002*/ USHORT LayerCount;
	/*0004*/ ULONG OsMajorVersion;
	/*0008*/ ULONG OsMinorVersion;
	/*000c*/ ULONG NtBuildNumber;
	/*0010*/ ULONG NtBuildQfe;
	/*0014*/ UCHAR LayerName[0x80];
	/*0094*/ UCHAR NtBuildBranch[0x80];
	/*0114*/ UCHAR NtBuildLab[0x80];
	/*0194*/ UCHAR NtBuildLabEx[0x80];
	/*0214*/ UCHAR NtBuildStamp[0x1a];
	/*022e*/ UCHAR NtBuildArch[0x10];
	/*0240*/ <unnamed-type-Flags> Flags;
	/*0244*/
};

struct _SYSTEM_CALL_COUNT_INFORMATION {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG NumberOfTables;
	/*0008*/
};

struct _SYSTEM_CALL_TIME_INFORMATION {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG TotalCalls;
	/*0008*/ _LARGE_INTEGER TimeOfCalls[0x1];
	/*0010*/
};

struct _SYSTEM_CODEINTEGRITYPOLICY_INFORMATION {
	/*0000*/ ULONG Options;
	/*0004*/ ULONG HVCIOptions;
	/*0008*/ ULONGLONG Version;
	/*0010*/ _GUID PolicyGuid;
	/*0020*/
};

struct _SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION {
	/*0000*/ void * FileHandle;
	/*0008*/ ULONG ImageSize;
	/*0010*/ void * Image;
	/*0018*/
};

struct _SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION {
	/*0000*/ void * ImageFile;
	/*0008*/ ULONG Type;
	/*0010*/
};

struct _SYSTEM_CODEINTEGRITY_INFORMATION {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG CodeIntegrityOptions;
	/*0008*/
};

struct _SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG Locked : 01; // 0x00000001;
	/*0000*/ ULONG UnlockApplied : 01; // 0x00000002;
	/*0000*/ ULONG UnlockIdValid : 01; // 0x00000004;
	/*0000*/ ULONG Reserved : 29; // 0xfffffff8;
	/*0004*/ UCHAR UnlockId[0x20];
	/*0024*/
};

struct _SYSTEM_CONSOLE_INFORMATION {
	/*0000*/ ULONG DriverLoaded : 01; // 0x00000001;
	/*0000*/ ULONG Spare : 31; // 0xfffffffe;
	/*0004*/
};

struct _SYSTEM_CONTEXT_SWITCH_INFORMATION {
	/*0000*/ ULONG ContextSwitches;
	/*0004*/ ULONG FindAny;
	/*0008*/ ULONG FindLast;
	/*000c*/ ULONG FindIdeal;
	/*0010*/ ULONG IdleAny;
	/*0014*/ ULONG IdleCurrent;
	/*0018*/ ULONG IdleLast;
	/*001c*/ ULONG IdleIdeal;
	/*0020*/ ULONG PreemptAny;
	/*0024*/ ULONG PreemptCurrent;
	/*0028*/ ULONG PreemptLast;
	/*002c*/ ULONG SwitchToIdle;
	/*0030*/
};

struct _SYSTEM_CPU_SET_INFORMATION {
	
	/*0000*/ ULONG Size;
	/*0004*/ _CPU_SET_INFORMATION_TYPE Type;
	/*0008*/ <unnamed-type-CpuSet> CpuSet;
	/*0020*/
};

struct _SYSTEM_CPU_SET_TAG_INFORMATION {
	/*0000*/ ULONGLONG Tag;
	/*0008*/ ULONGLONG CpuSets[0x1];
	/*0010*/
};

enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS {
	SystemCrashDumpDisable = 0x0,
	SystemCrashDumpReconfigure = 0x1,
	SystemCrashDumpInitializationComplete = 0x2
};

struct _SYSTEM_CRASH_DUMP_STATE_INFORMATION {
	/*0000*/ _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS CrashDumpConfigurationClass;
	/*0004*/
};

struct _SYSTEM_DEVICE_DATA_INFORMATION {
	/*0000*/ _UNICODE_STRING DeviceId;
	/*0010*/ _UNICODE_STRING DataName;
	/*0020*/ ULONG DataType;
	/*0024*/ ULONG DataBufferLength;
	/*0028*/ void * DataBuffer;
	/*0030*/
};

struct _SYSTEM_DEVICE_INFORMATION {
	/*0000*/ ULONG NumberOfDisks;
	/*0004*/ ULONG NumberOfFloppies;
	/*0008*/ ULONG NumberOfCdRoms;
	/*000c*/ ULONG NumberOfTapes;
	/*0010*/ ULONG NumberOfSerialPorts;
	/*0014*/ ULONG NumberOfParallelPorts;
	/*0018*/
};

struct _SYSTEM_DIF_VOLATILE_INFORMATION {
	/*0000*/ ULONG RuleClasses[0x2];
	/*0008*/ ULONG VerifierOption;
	/*000c*/ ULONG TriageContext;
	/*0010*/
};

struct _SYSTEM_DIF_VOLATILE_INFORMATION_V2 {
	/*0000*/ ULONG RuleClasses[0x2];
	/*0008*/ ULONG VerifierOption;
	/*000c*/ ULONG TriageContext;
	/*0010*/ ULONG PoolTags[0xa];
	/*0038*/
};

struct _SYSTEM_DMA_GUARD_POLICY_INFORMATION {
	/*0000*/ UCHAR DmaGuardPolicyEnabled;
	/*0001*/
};

struct _SYSTEM_DPC_BEHAVIOR_INFORMATION {
	/*0000*/ ULONG Spare;
	/*0004*/ ULONG DpcQueueDepth;
	/*0008*/ ULONG MinimumDpcRate;
	/*000c*/ ULONG AdjustDpcThreshold;
	/*0010*/ ULONG IdealDpcRate;
	/*0014*/
};

struct _SYSTEM_DPC_WATCHDOG_CONFIGURATION_INFORMATION {
	
	/*0000*/ ULONG Version : 08; // 0x000000ff;
	/*0000*/ ULONG AllFlags : 24; // 0xffffff00;
	/*0000*/ <unnamed-type-Flags> Flags;
	/*0004*/ ULONG SingleDpcTimeLimitMs;
	/*0008*/ ULONG CumulativeDpcTimeLimitMs;
	/*000c*/ ULONG SingleDpcSoftTimeLimitMs;
	/*0010*/ ULONG CumulativeDpcSoftTimeLimitMs;
	/*0014*/
};

struct _SYSTEM_DPC_WATCHDOG_CONFIGURATION_INFORMATION_V2 {
	
	/*0000*/ ULONG Version : 08; // 0x000000ff;
	/*0000*/ ULONG AllFlags : 24; // 0xffffff00;
	/*0000*/ <unnamed-type-Flags> Flags;
	/*0004*/ ULONG SingleDpcTimeLimitMs;
	/*0008*/ ULONG CumulativeDpcTimeLimitMs;
	/*000c*/ ULONG SingleDpcSoftTimeLimitMs;
	/*0010*/ ULONG CumulativeDpcSoftTimeLimitMs;
	/*0014*/ ULONG SingleDpcProfileThresholdMs;
	/*0018*/ ULONG CumulativeDpcProfileThresholdMs;
	/*001c*/ ULONG ProfileBufferSizeBytes;
	/*0020*/
};

struct _SYSTEM_ELAM_CERTIFICATE_INFORMATION {
	/*0000*/ void * ElamDriverFile;
	/*0008*/
};

struct _SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION {
	/*0000*/ UCHAR EnclaveLaunchSigner[0x20];
	/*0020*/
};

struct _SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION {
	/*0000*/ UCHAR Enabled;
	/*0001*/
};

struct _SYSTEM_ENTROPY_TIMING_INFORMATION {
	/*0000*/ void (* EntropyRoutine)( void * , ULONG );
	/*0008*/ void (* InitializationRoutine)( void * , ULONG , void * );
	/*0010*/ void * InitializationContext;
	/*0018*/
};

struct _SYSTEM_ERROR_PORT_TIMEOUTS {
	/*0000*/ ULONG StartTimeout;
	/*0004*/ ULONG CommTimeout;
	/*0008*/
};

struct _SYSTEM_EXCEPTION_INFORMATION {
	/*0000*/ ULONG AlignmentFixupCount;
	/*0004*/ ULONG ExceptionDispatchCount;
	/*0008*/ ULONG FloatingEmulationCount;
	/*000c*/ ULONG ByteWordEmulationCount;
	/*0010*/
};

struct _SYSTEM_EXTENDED_THREAD_INFORMATION {
	/*0000*/ _SYSTEM_THREAD_INFORMATION ThreadInfo;
	/*0050*/ void * StackBase;
	/*0058*/ void * StackLimit;
	/*0060*/ void * Win32StartAddress;
	/*0068*/ void * TebBase;
	/*0070*/ ULONGLONG Reserved2;
	/*0078*/ ULONGLONG Reserved3;
	/*0080*/ ULONGLONG Reserved4;
	/*0088*/
};

struct _SYSTEM_FEATURE_CONFIGURATION_INFORMATION {
	/*0000*/ ULONGLONG ChangeStamp;
	/*0008*/ _RTL_FEATURE_CONFIGURATION Configuration;
	/*0018*/
};

struct _SYSTEM_FEATURE_CONFIGURATION_QUERY {
	/*0000*/ _RTL_FEATURE_CONFIGURATION_TYPE ConfigurationType;
	/*0004*/ UINT FeatureId;
	/*0008*/
};

struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION {
	/*0000*/ ULONGLONG OverallChangeStamp;
	/*0008*/ _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY Descriptors[0x3];
	/*0050*/
};

struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY {
	/*0000*/ ULONGLONG ChangeStamp;
	/*0008*/ void * Section;
	/*0010*/ ULONGLONG Size;
	/*0018*/
};

struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_REQUEST {
	/*0000*/ ULONGLONG PreviousChangeStamps[0x3];
	/*0018*/
};

enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE {
	SystemFeatureConfigurationSectionTypeBoot = 0x0,
	SystemFeatureConfigurationSectionTypeRuntime = 0x1,
	SystemFeatureConfigurationSectionTypeUsageTriggers = 0x2,
	SystemFeatureConfigurationSectionTypeCount = 0x3
};

struct _SYSTEM_FEATURE_CONFIGURATION_UPDATE {
	
	/*0000*/ _SYSTEM_FEATURE_CONFIGURATION_UPDATE_TYPE UpdateType;
	/*0008*/ <unnamed-type-Update> Update;
	/*0008*/ <unnamed-type-Overwrite> Overwrite;
	/*0038*/
};

enum _SYSTEM_FEATURE_CONFIGURATION_UPDATE_TYPE {
	SystemFeatureConfigurationUpdateTypeUpdate = 0x0,
	SystemFeatureConfigurationUpdateTypeOverwrite = 0x1,
	SystemFeatureConfigurationUpdateTypeCount = 0x2
};

struct _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE {
	/*0000*/ ULONG UpdateCount;
	/*0004*/ _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY Updates[0x1];
	/*0018*/
};

struct _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY {
	/*0000*/ ULONG Remove;
	/*0004*/ _RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS Details;
	/*0014*/
};

struct _SYSTEM_FILECACHE_INFORMATION {
	/*0000*/ ULONGLONG CurrentSize;
	/*0008*/ ULONGLONG PeakSize;
	/*0010*/ ULONG PageFaultCount;
	/*0018*/ ULONGLONG MinimumWorkingSet;
	/*0020*/ ULONGLONG MaximumWorkingSet;
	/*0028*/ ULONGLONG CurrentSizeIncludingTransitionInPages;
	/*0030*/ ULONGLONG PeakSizeIncludingTransitionInPages;
	/*0038*/ ULONG TransitionRePurposeCount;
	/*003c*/ ULONG Flags;
	/*0040*/
};

struct _SYSTEM_FIRMWARE_PARTITION_INFORMATION {
	/*0000*/ _UNICODE_STRING FirmwarePartition;
	/*0010*/
};

struct _SYSTEM_FIRMWARE_RAMDISK_INFORMATION {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG BlockSize;
	/*0008*/ ULONGLONG BaseAddress;
	/*0010*/ ULONGLONG Size;
	/*0018*/
};

enum _SYSTEM_FIRMWARE_TABLE_ACTION {
	SystemFirmwareTable_Enumerate = 0x0,
	SystemFirmwareTable_Get = 0x1
};

struct _SYSTEM_FIRMWARE_TABLE_HANDLER {
	/*0000*/ ULONG ProviderSignature;
	/*0004*/ UCHAR Register;
	/*0008*/ LONG (* FirmwareTableHandler)( _SYSTEM_FIRMWARE_TABLE_INFORMATION * );
	/*0010*/ void * DriverObject;
	/*0018*/
};

struct _SYSTEM_FIRMWARE_TABLE_INFORMATION {
	/*0000*/ ULONG ProviderSignature;
	/*0004*/ _SYSTEM_FIRMWARE_TABLE_ACTION Action;
	/*0008*/ ULONG TableID;
	/*000c*/ ULONG TableBufferLength;
	/*0010*/ UCHAR TableBuffer[0x1];
	/*0014*/
};

struct _SYSTEM_FLAGS_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _SYSTEM_FLUSH_INFORMATION {
	/*0000*/ ULONG SupportedFlushMethods;
	/*0004*/ ULONG ProcessorCacheFlushSize;
	/*0008*/ ULONGLONG SystemFlushCapabilities;
	/*0010*/ ULONGLONG Reserved[0x2];
	/*0020*/
};

struct _SYSTEM_GDI_DRIVER_INFORMATION {
	/*0000*/ _UNICODE_STRING DriverName;
	/*0010*/ void * ImageAddress;
	/*0018*/ void * SectionPointer;
	/*0020*/ void * EntryPoint;
	/*0028*/ _IMAGE_EXPORT_DIRECTORY * ExportSectionPointer;
	/*0030*/ ULONG ImageLength;
	/*0038*/
};

struct _SYSTEM_HANDLE_INFORMATION {
	/*0000*/ ULONG NumberOfHandles;
	/*0008*/ _SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[0x1];
	/*0020*/
};

struct _SYSTEM_HANDLE_INFORMATION_EX {
	/*0000*/ ULONGLONG NumberOfHandles;
	/*0008*/ ULONGLONG Reserved;
	/*0010*/ _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX Handles[0x1];
	/*0038*/
};

struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO {
	/*0000*/ USHORT UniqueProcessId;
	/*0002*/ USHORT CreatorBackTraceIndex;
	/*0004*/ UCHAR ObjectTypeIndex;
	/*0005*/ UCHAR HandleAttributes;
	/*0006*/ USHORT HandleValue;
	/*0008*/ void * Object;
	/*0010*/ ULONG GrantedAccess;
	/*0018*/
};

struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX {
	/*0000*/ void * Object;
	/*0008*/ ULONGLONG UniqueProcessId;
	/*0010*/ ULONGLONG HandleValue;
	/*0018*/ ULONG GrantedAccess;
	/*001c*/ USHORT CreatorBackTraceIndex;
	/*001e*/ USHORT ObjectTypeIndex;
	/*0020*/ ULONG HandleAttributes;
	/*0024*/ ULONG Reserved;
	/*0028*/
};

struct _SYSTEM_HIBERFILE_INFORMATION {
	/*0000*/ ULONG NumberOfMcbPairs;
	/*0008*/ _LARGE_INTEGER Mcb[0x1];
	/*0010*/
};

struct _SYSTEM_HOT_PATCH_REGISTRY_VALUE {
	/*0000*/ USHORT ImageNameLength;
	/*0002*/ WCHAR ImageName[0x1];
	/*0004*/
};

struct _SYSTEM_HYPERVISOR_BOOT_PAGES_INFORMATION {
	/*0000*/ ULONG RangeCount;
	/*0004*/ ULONG Pad;
	/*0008*/ ULONGLONG RangeArray[0x1];
	/*0010*/
};

struct _SYSTEM_HYPERVISOR_DETAIL_INFORMATION {
	/*0000*/ _HV_DETAILS HvVendorAndMaxFunction;
	/*0010*/ _HV_DETAILS HypervisorInterface;
	/*0020*/ _HV_DETAILS HypervisorVersion;
	/*0030*/ _HV_DETAILS HvFeatures;
	/*0040*/ _HV_DETAILS HwFeatures;
	/*0050*/ _HV_DETAILS EnlightenmentInfo;
	/*0060*/ _HV_DETAILS ImplementationLimits;
	/*0070*/
};

struct _SYSTEM_HYPERVISOR_MINROOT_INFORMATION {
	/*0000*/ ULONG NumProc;
	/*0004*/ ULONG RootProc;
	/*0008*/ ULONG RootProcNumaNodesSpecified;
	/*000c*/ USHORT RootProcNumaNodes[0x40];
	/*008c*/ ULONG RootProcPerCore;
	/*0090*/ ULONG RootProcPerNode;
	/*0094*/ ULONG RootProcNumaNodesLpsSpecified;
	/*0098*/ _HV_MINROOT_NUMA_LPS RootProcNumaNodeLps[0x40];
	/*2298*/
};

struct _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION {
	/*0000*/ ULONG NumberOfLogicalProcessors;
	/*0004*/ ULONG NumberOfCores;
	/*0008*/
};

struct _SYSTEM_HYPERVISOR_QUERY_INFORMATION {
	/*0000*/ UCHAR HypervisorConnected;
	/*0001*/ UCHAR HypervisorDebuggingEnabled;
	/*0002*/ UCHAR HypervisorPresent;
	/*0003*/ UCHAR HypervisorSchedulerType;
	/*0004*/ UCHAR Spare0[0x4];
	/*0008*/ ULONGLONG EnabledEnlightenments;
	/*0010*/
};

struct _SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION {
	/*0000*/ void * HypervisorSharedUserVa;
	/*0008*/
};

struct _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION {
	/*0000*/ ULONG FlagsToEnable;
	/*0004*/ ULONG FlagsToDisable;
	/*0008*/
};

struct _SYSTEM_INFO {
	/*0000*/ ULONG dwOemId;
	/*0000*/ USHORT wProcessorArchitecture;
	/*0002*/ USHORT wReserved;
	/*0004*/ ULONG dwPageSize;
	/*0008*/ void * lpMinimumApplicationAddress;
	/*0010*/ void * lpMaximumApplicationAddress;
	/*0018*/ ULONGLONG dwActiveProcessorMask;
	/*0020*/ ULONG dwNumberOfProcessors;
	/*0024*/ ULONG dwProcessorType;
	/*0028*/ ULONG dwAllocationGranularity;
	/*002c*/ USHORT wProcessorLevel;
	/*002e*/ USHORT wProcessorRevision;
	/*0030*/
};

enum _SYSTEM_INFORMATION_CLASS {
	SystemBasicInformation = 0x0,
	SystemProcessorInformation = 0x1,
	SystemPerformanceInformation = 0x2,
	SystemTimeOfDayInformation = 0x3,
	SystemPathInformation = 0x4,
	SystemProcessInformation = 0x5,
	SystemCallCountInformation = 0x6,
	SystemDeviceInformation = 0x7,
	SystemProcessorPerformanceInformation = 0x8,
	SystemFlagsInformation = 0x9,
	SystemCallTimeInformation = 0xa,
	SystemModuleInformation = 0xb,
	SystemLocksInformation = 0xc,
	SystemStackTraceInformation = 0xd,
	SystemPagedPoolInformation = 0xe,
	SystemNonPagedPoolInformation = 0xf,
	SystemHandleInformation = 0x10,
	SystemObjectInformation = 0x11,
	SystemPageFileInformation = 0x12,
	SystemVdmInstemulInformation = 0x13,
	SystemVdmBopInformation = 0x14,
	SystemFileCacheInformation = 0x15,
	SystemPoolTagInformation = 0x16,
	SystemInterruptInformation = 0x17,
	SystemDpcBehaviorInformation = 0x18,
	SystemFullMemoryInformation = 0x19,
	SystemLoadGdiDriverInformation = 0x1a,
	SystemUnloadGdiDriverInformation = 0x1b,
	SystemTimeAdjustmentInformation = 0x1c,
	SystemSummaryMemoryInformation = 0x1d,
	SystemMirrorMemoryInformation = 0x1e,
	SystemPerformanceTraceInformation = 0x1f,
	SystemObsolete0 = 0x20,
	SystemExceptionInformation = 0x21,
	SystemCrashDumpStateInformation = 0x22,
	SystemKernelDebuggerInformation = 0x23,
	SystemContextSwitchInformation = 0x24,
	SystemRegistryQuotaInformation = 0x25,
	SystemExtendServiceTableInformation = 0x26,
	SystemPrioritySeperation = 0x27,
	SystemVerifierAddDriverInformation = 0x28,
	SystemVerifierRemoveDriverInformation = 0x29,
	SystemProcessorIdleInformation = 0x2a,
	SystemLegacyDriverInformation = 0x2b,
	SystemCurrentTimeZoneInformation = 0x2c,
	SystemLookasideInformation = 0x2d,
	SystemTimeSlipNotification = 0x2e,
	SystemSessionCreate = 0x2f,
	SystemSessionDetach = 0x30,
	SystemSessionInformation = 0x31,
	SystemRangeStartInformation = 0x32,
	SystemVerifierInformation = 0x33,
	SystemVerifierThunkExtend = 0x34,
	SystemSessionProcessInformation = 0x35,
	SystemLoadGdiDriverInSystemSpace = 0x36,
	SystemNumaProcessorMap = 0x37,
	SystemPrefetcherInformation = 0x38,
	SystemExtendedProcessInformation = 0x39,
	SystemRecommendedSharedDataAlignment = 0x3a,
	SystemComPlusPackage = 0x3b,
	SystemNumaAvailableMemory = 0x3c,
	SystemProcessorPowerInformation = 0x3d,
	SystemEmulationBasicInformation = 0x3e,
	SystemEmulationProcessorInformation = 0x3f,
	SystemExtendedHandleInformation = 0x40,
	SystemLostDelayedWriteInformation = 0x41,
	SystemBigPoolInformation = 0x42,
	SystemSessionPoolTagInformation = 0x43,
	SystemSessionMappedViewInformation = 0x44,
	SystemHotpatchInformation = 0x45,
	SystemObjectSecurityMode = 0x46,
	SystemWatchdogTimerHandler = 0x47,
	SystemWatchdogTimerInformation = 0x48,
	SystemLogicalProcessorInformation = 0x49,
	SystemWow64SharedInformationObsolete = 0x4a,
	SystemRegisterFirmwareTableInformationHandler = 0x4b,
	SystemFirmwareTableInformation = 0x4c,
	SystemModuleInformationEx = 0x4d,
	SystemVerifierTriageInformation = 0x4e,
	SystemSuperfetchInformation = 0x4f,
	SystemMemoryListInformation = 0x50,
	SystemFileCacheInformationEx = 0x51,
	SystemThreadPriorityClientIdInformation = 0x52,
	SystemProcessorIdleCycleTimeInformation = 0x53,
	SystemVerifierCancellationInformation = 0x54,
	SystemProcessorPowerInformationEx = 0x55,
	SystemRefTraceInformation = 0x56,
	SystemSpecialPoolInformation = 0x57,
	SystemProcessIdInformation = 0x58,
	SystemErrorPortInformation = 0x59,
	SystemBootEnvironmentInformation = 0x5a,
	SystemHypervisorInformation = 0x5b,
	SystemVerifierInformationEx = 0x5c,
	SystemTimeZoneInformation = 0x5d,
	SystemImageFileExecutionOptionsInformation = 0x5e,
	SystemCoverageInformation = 0x5f,
	SystemPrefetchPatchInformation = 0x60,
	SystemVerifierFaultsInformation = 0x61,
	SystemSystemPartitionInformation = 0x62,
	SystemSystemDiskInformation = 0x63,
	SystemProcessorPerformanceDistribution = 0x64,
	SystemNumaProximityNodeInformation = 0x65,
	SystemDynamicTimeZoneInformation = 0x66,
	SystemCodeIntegrityInformation = 0x67,
	SystemProcessorMicrocodeUpdateInformation = 0x68,
	SystemProcessorBrandString = 0x69,
	SystemVirtualAddressInformation = 0x6a,
	SystemLogicalProcessorAndGroupInformation = 0x6b,
	SystemProcessorCycleTimeInformation = 0x6c,
	SystemStoreInformation = 0x6d,
	SystemRegistryAppendString = 0x6e,
	SystemAitSamplingValue = 0x6f,
	SystemVhdBootInformation = 0x70,
	SystemCpuQuotaInformation = 0x71,
	SystemNativeBasicInformation = 0x72,
	SystemErrorPortTimeouts = 0x73,
	SystemLowPriorityIoInformation = 0x74,
	SystemBootEntropyInformation = 0x75,
	SystemVerifierCountersInformation = 0x76,
	SystemPagedPoolInformationEx = 0x77,
	SystemSystemPtesInformationEx = 0x78,
	SystemNodeDistanceInformation = 0x79,
	SystemAcpiAuditInformation = 0x7a,
	SystemBasicPerformanceInformation = 0x7b,
	SystemQueryPerformanceCounterInformation = 0x7c,
	SystemSessionBigPoolInformation = 0x7d,
	SystemBootGraphicsInformation = 0x7e,
	SystemScrubPhysicalMemoryInformation = 0x7f,
	SystemBadPageInformation = 0x80,
	SystemProcessorProfileControlArea = 0x81,
	SystemCombinePhysicalMemoryInformation = 0x82,
	SystemEntropyInterruptTimingInformation = 0x83,
	SystemConsoleInformation = 0x84,
	SystemPlatformBinaryInformation = 0x85,
	SystemPolicyInformation = 0x86,
	SystemHypervisorProcessorCountInformation = 0x87,
	SystemDeviceDataInformation = 0x88,
	SystemDeviceDataEnumerationInformation = 0x89,
	SystemMemoryTopologyInformation = 0x8a,
	SystemMemoryChannelInformation = 0x8b,
	SystemBootLogoInformation = 0x8c,
	SystemProcessorPerformanceInformationEx = 0x8d,
	SystemCriticalProcessErrorLogInformation = 0x8e,
	SystemSecureBootPolicyInformation = 0x8f,
	SystemPageFileInformationEx = 0x90,
	SystemSecureBootInformation = 0x91,
	SystemEntropyInterruptTimingRawInformation = 0x92,
	SystemPortableWorkspaceEfiLauncherInformation = 0x93,
	SystemFullProcessInformation = 0x94,
	SystemKernelDebuggerInformationEx = 0x95,
	SystemBootMetadataInformation = 0x96,
	SystemSoftRebootInformation = 0x97,
	SystemElamCertificateInformation = 0x98,
	SystemOfflineDumpConfigInformation = 0x99,
	SystemProcessorFeaturesInformation = 0x9a,
	SystemRegistryReconciliationInformation = 0x9b,
	SystemEdidInformation = 0x9c,
	SystemManufacturingInformation = 0x9d,
	SystemEnergyEstimationConfigInformation = 0x9e,
	SystemHypervisorDetailInformation = 0x9f,
	SystemProcessorCycleStatsInformation = 0xa0,
	SystemVmGenerationCountInformation = 0xa1,
	SystemTrustedPlatformModuleInformation = 0xa2,
	SystemKernelDebuggerFlags = 0xa3,
	SystemCodeIntegrityPolicyInformation = 0xa4,
	SystemIsolatedUserModeInformation = 0xa5,
	SystemHardwareSecurityTestInterfaceResultsInformation = 0xa6,
	SystemSingleModuleInformation = 0xa7,
	SystemAllowedCpuSetsInformation = 0xa8,
	SystemVsmProtectionInformation = 0xa9,
	SystemInterruptCpuSetsInformation = 0xaa,
	SystemSecureBootPolicyFullInformation = 0xab,
	SystemCodeIntegrityPolicyFullInformation = 0xac,
	SystemAffinitizedInterruptProcessorInformation = 0xad,
	SystemRootSiloInformation = 0xae,
	SystemCpuSetInformation = 0xaf,
	SystemCpuSetTagInformation = 0xb0,
	SystemWin32WerStartCallout = 0xb1,
	SystemSecureKernelProfileInformation = 0xb2,
	SystemCodeIntegrityPlatformManifestInformation = 0xb3,
	SystemInterruptSteeringInformation = 0xb4,
	SystemSupportedProcessorArchitectures = 0xb5,
	SystemMemoryUsageInformation = 0xb6,
	SystemCodeIntegrityCertificateInformation = 0xb7,
	SystemPhysicalMemoryInformation = 0xb8,
	SystemControlFlowTransition = 0xb9,
	SystemKernelDebuggingAllowed = 0xba,
	SystemActivityModerationExeState = 0xbb,
	SystemActivityModerationUserSettings = 0xbc,
	SystemCodeIntegrityPoliciesFullInformation = 0xbd,
	SystemCodeIntegrityUnlockInformation = 0xbe,
	SystemIntegrityQuotaInformation = 0xbf,
	SystemFlushInformation = 0xc0,
	SystemProcessorIdleMaskInformation = 0xc1,
	SystemSecureDumpEncryptionInformation = 0xc2,
	SystemWriteConstraintInformation = 0xc3,
	SystemKernelVaShadowInformation = 0xc4,
	SystemHypervisorSharedPageInformation = 0xc5,
	SystemFirmwareBootPerformanceInformation = 0xc6,
	SystemCodeIntegrityVerificationInformation = 0xc7,
	SystemFirmwarePartitionInformation = 0xc8,
	SystemSpeculationControlInformation = 0xc9,
	SystemDmaGuardPolicyInformation = 0xca,
	SystemEnclaveLaunchControlInformation = 0xcb,
	SystemWorkloadAllowedCpuSetsInformation = 0xcc,
	SystemCodeIntegrityUnlockModeInformation = 0xcd,
	SystemLeapSecondInformation = 0xce,
	SystemFlags2Information = 0xcf,
	SystemSecurityModelInformation = 0xd0,
	SystemCodeIntegritySyntheticCacheInformation = 0xd1,
	SystemFeatureConfigurationInformation = 0xd2,
	SystemFeatureConfigurationSectionInformation = 0xd3,
	SystemFeatureUsageSubscriptionInformation = 0xd4,
	SystemSecureSpeculationControlInformation = 0xd5,
	SystemSpacesBootInformation = 0xd6,
	SystemFwRamdiskInformation = 0xd7,
	SystemWheaIpmiHardwareInformation = 0xd8,
	SystemDifSetRuleClassInformation = 0xd9,
	SystemDifClearRuleClassInformation = 0xda,
	SystemDifApplyPluginVerificationOnDriver = 0xdb,
	SystemDifRemovePluginVerificationOnDriver = 0xdc,
	SystemShadowStackInformation = 0xdd,
	SystemBuildVersionInformation = 0xde,
	SystemPoolLimitInformation = 0xdf,
	SystemCodeIntegrityAddDynamicStore = 0xe0,
	SystemCodeIntegrityClearDynamicStores = 0xe1,
	SystemDifPoolTrackingInformation = 0xe2,
	SystemPoolZeroingInformation = 0xe3,
	SystemDpcWatchdogInformation = 0xe4,
	SystemDpcWatchdogInformation2 = 0xe5,
	SystemSupportedProcessorArchitectures2 = 0xe6,
	SystemSingleProcessorRelationshipInformation = 0xe7,
	SystemXfgCheckFailureInformation = 0xe8,
	SystemIommuStateInformation = 0xe9,
	SystemHypervisorMinrootInformation = 0xea,
	SystemHypervisorBootPagesInformation = 0xeb,
	SystemPointerAuthInformation = 0xec,
	SystemSecureKernelDebuggerInformation = 0xed,
	SystemOriginalImageFeatureInformation = 0xee,
	MaxSystemInfoClass = 0xef
};

struct _SYSTEM_INTERRUPT_CPU_SET_INFORMATION {
	/*0000*/ ULONG Gsiv;
	/*0004*/ USHORT Group;
	/*0008*/ ULONGLONG CpuSets;
	/*0010*/
};

struct _SYSTEM_INTERRUPT_INFORMATION {
	/*0000*/ ULONG ContextSwitches;
	/*0004*/ ULONG DpcCount;
	/*0008*/ ULONG DpcRate;
	/*000c*/ ULONG TimeIncrement;
	/*0010*/ ULONG DpcBypassCount;
	/*0014*/ ULONG ApcBypassCount;
	/*0018*/
};

struct _SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT {
	/*0000*/ ULONG Gsiv;
	/*0004*/ UCHAR ControllerInterrupt;
	/*0005*/ UCHAR EdgeInterrupt;
	/*0006*/ UCHAR IsPrimaryInterrupt;
	/*0008*/ _GROUP_AFFINITY TargetAffinity;
	/*0018*/
};

struct _SYSTEM_INTERRUPT_STEERING_INFORMATION_OUTPUT {
	/*0000*/ ULONG Enabled : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0000*/ ULONG AsULONG;
	/*0004*/
};

enum _SYSTEM_IOMMU_STATE {
	IommuStateBlock = 0x0,
	IommuStateUnblock = 0x1
};

struct _SYSTEM_IOMMU_STATE_INFORMATION {
	/*0000*/ _SYSTEM_IOMMU_STATE State;
	/*0008*/ void * Pdo;
	/*0010*/
};

struct _SYSTEM_ISOLATED_USER_MODE_INFORMATION {
	/*0000*/ UCHAR SecureKernelRunning : 01; // 0x01;
	/*0000*/ UCHAR HvciEnabled : 01; // 0x02;
	/*0000*/ UCHAR HvciStrictMode : 01; // 0x04;
	/*0000*/ UCHAR DebugEnabled : 01; // 0x08;
	/*0000*/ UCHAR FirmwarePageProtection : 01; // 0x10;
	/*0000*/ UCHAR EncryptionKeyAvailable : 01; // 0x20;
	/*0000*/ UCHAR SpareFlags : 02; // 0xc0;
	/*0001*/ UCHAR TrustletRunning : 01; // 0x01;
	/*0001*/ UCHAR HvciDisableAllowed : 01; // 0x02;
	/*0001*/ UCHAR HardwareEnforcedVbs : 01; // 0x04;
	/*0001*/ UCHAR NoSecrets : 01; // 0x08;
	/*0001*/ UCHAR SpareFlags2 : 04; // 0xf0;
	/*0002*/ UCHAR Spare0[0x6];
	/*0008*/ ULONGLONG Spare1;
	/*0010*/
};

struct _SYSTEM_KERNEL_DEBUGGER_FLAGS {
	/*0000*/ UCHAR KernelDebuggerIgnoreUmExceptions;
	/*0001*/
};

struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION {
	/*0000*/ UCHAR KernelDebuggerEnabled;
	/*0001*/ UCHAR KernelDebuggerNotPresent;
	/*0002*/
};

struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX {
	/*0000*/ UCHAR DebuggerAllowed;
	/*0001*/ UCHAR DebuggerEnabled;
	/*0002*/ UCHAR DebuggerPresent;
	/*0003*/
};

struct _SYSTEM_KERNEL_VA_SHADOW_INFORMATION {
	
	/*0000*/ <unnamed-type-KvaShadowFlags> KvaShadowFlags;
	/*0004*/
};

struct _SYSTEM_LEAP_SECOND_INFORMATION {
	/*0000*/ UCHAR Enabled;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _SYSTEM_LEGACY_DRIVER_INFORMATION {
	/*0000*/ ULONG VetoType;
	/*0008*/ _UNICODE_STRING VetoList;
	/*0018*/
};

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
	
	/*0000*/ ULONGLONG ProcessorMask;
	/*0008*/ _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
	/*0010*/ <unnamed-type-ProcessorCore> ProcessorCore;
	/*0010*/ <unnamed-type-NumaNode> NumaNode;
	/*0010*/ _CACHE_DESCRIPTOR Cache;
	/*0010*/ ULONGLONG Reserved[0x2];
	/*0020*/
};

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
	/*0000*/ _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
	/*0004*/ ULONG Size;
	/*0008*/ _PROCESSOR_RELATIONSHIP Processor;
	/*0008*/ _NUMA_NODE_RELATIONSHIP NumaNode;
	/*0008*/ _CACHE_RELATIONSHIP Cache;
	/*0008*/ _GROUP_RELATIONSHIP Group;
	/*0050*/
};

struct _SYSTEM_LOOKASIDE_INFORMATION {
	/*0000*/ USHORT CurrentDepth;
	/*0002*/ USHORT MaximumDepth;
	/*0004*/ ULONG TotalAllocates;
	/*0008*/ ULONG AllocateMisses;
	/*000c*/ ULONG TotalFrees;
	/*0010*/ ULONG FreeMisses;
	/*0014*/ ULONG Type;
	/*0018*/ ULONG Tag;
	/*001c*/ ULONG Size;
	/*0020*/
};

struct _SYSTEM_LOW_PRIORITY_IO_INFORMATION {
	/*0000*/ ULONG LowPriReadOperations;
	/*0004*/ ULONG LowPriWriteOperations;
	/*0008*/ ULONG KernelBumpedToNormalOperations;
	/*000c*/ ULONG LowPriPagingReadOperations;
	/*0010*/ ULONG KernelPagingReadsBumpedToNormal;
	/*0014*/ ULONG LowPriPagingWriteOperations;
	/*0018*/ ULONG KernelPagingWritesBumpedToNormal;
	/*001c*/ ULONG BoostedIrpCount;
	/*0020*/ ULONG BoostedPagingIrpCount;
	/*0024*/ ULONG BlanketBoostCount;
	/*0028*/
};

struct _SYSTEM_MANDATORY_LABEL_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_MANUFACTURING_INFORMATION {
	/*0000*/ ULONG Options;
	/*0008*/ _UNICODE_STRING ProfileName;
	/*0018*/
};

struct _SYSTEM_MEMORY_CHANNEL_INFORMATION {
	/*0000*/ ULONG ChannelNumber;
	/*0004*/ ULONG ChannelHeatIndex;
	/*0008*/ ULONGLONG TotalPageCount;
	/*0010*/ ULONGLONG ZeroPageCount;
	/*0018*/ ULONGLONG FreePageCount;
	/*0020*/ ULONGLONG StandbyPageCount;
	/*0028*/
};

struct _SYSTEM_MEMORY_INFORMATION {
	/*0000*/ ULONGLONG PagedPoolCommitPageCount;
	/*0008*/ ULONGLONG NonPagedPoolPageCount;
	/*0010*/ ULONGLONG MdlPageCount;
	/*0018*/ ULONGLONG CommitPageCount;
	/*0020*/
};

enum _SYSTEM_MEMORY_LIST_COMMAND {
	MemoryCaptureAccessedBits = 0x0,
	MemoryCaptureAndResetAccessedBits = 0x1,
	MemoryEmptyWorkingSets = 0x2,
	MemoryFlushModifiedList = 0x3,
	MemoryPurgeStandbyList = 0x4,
	MemoryPurgeLowPriorityStandbyList = 0x5,
	MemoryCommandMax = 0x6
};

struct _SYSTEM_MEMORY_LIST_INFORMATION {
	/*0000*/ ULONGLONG ZeroPageCount;
	/*0008*/ ULONGLONG FreePageCount;
	/*0010*/ ULONGLONG ModifiedPageCount;
	/*0018*/ ULONGLONG ModifiedNoWritePageCount;
	/*0020*/ ULONGLONG BadPageCount;
	/*0028*/ ULONGLONG PageCountByPriority[0x8];
	/*0068*/ ULONGLONG RepurposedPagesByPriority[0x8];
	/*00a8*/ ULONGLONG ModifiedPageCountPageFile;
	/*00b0*/
};

struct _SYSTEM_MEMORY_TOPOLOGY_INFORMATION {
	/*0000*/ ULONGLONG NumberOfRuns;
	/*0008*/ ULONG NumberOfNodes;
	/*000c*/ ULONG NumberOfChannels;
	/*0010*/ _PHYSICAL_CHANNEL_RUN Run[0x1];
	/*0030*/
};

struct _SYSTEM_MEMORY_USAGE_INFORMATION {
	/*0000*/ ULONGLONG TotalPhysicalBytes;
	/*0008*/ ULONGLONG AvailableBytes;
	/*0010*/ LONGLONG ResidentAvailableBytes;
	/*0018*/ ULONGLONG CommittedBytes;
	/*0020*/ ULONGLONG SharedCommittedBytes;
	/*0028*/ ULONGLONG CommitLimitBytes;
	/*0030*/ ULONGLONG PeakCommitmentBytes;
	/*0038*/
};

struct _SYSTEM_NET_RATE_CONTROL_CALLBACK_TABLE {
	/*0000*/ LONG (* NetRateControlDispatch)( _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER * );
	/*0008*/
};

struct _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER {
	/*0000*/ ULONGLONG PolicyCookie;
	/*0008*/ _SYSTEM_NET_RATE_CONTROL_TYPE Type;
	/*0010*/
};

struct _SYSTEM_NET_RATE_CONTROL_QUOTA_CONTEXT {
	/*0000*/ _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER Header;
	/*0010*/ ULONGLONG OverQuotaHistory;
	/*0018*/ ULONG IntervalLength;
	/*001c*/ ULONG NumberOfIntervals;
	/*0020*/
};

struct _SYSTEM_NET_RATE_CONTROL_SET_CONTEXT {
	/*0000*/ _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER Header;
	/*0010*/ ULONGLONG MaxBandwidth;
	/*0018*/ _GUID * ContainerId;
	/*0020*/ ULONG Flags;
	/*0020*/ ULONG Set : 01; // 0x00000001;
	/*0020*/ ULONG Update : 01; // 0x00000002;
	/*0020*/ ULONG Clear : 01; // 0x00000004;
	/*0020*/ ULONG DscpTagEnabled : 01; // 0x00000008;
	/*0020*/ ULONG MaxBandwidthEnabled : 01; // 0x00000010;
	/*0020*/ ULONG Reserved : 27; // 0xffffffe0;
	/*0024*/ UCHAR DscpTag;
	/*0028*/
};

enum _SYSTEM_NET_RATE_CONTROL_TYPE {
	SystemNetRateControlSet = 0x0,
	SystemNetRateControlQuota = 0x1
};

struct _SYSTEM_NUMA_INFORMATION {
	/*0000*/ ULONG HighestNodeNumber;
	/*0004*/ ULONG Reserved;
	/*0008*/ _GROUP_AFFINITY ActiveProcessorsGroupAffinity[0x40];
	/*0008*/ ULONGLONG AvailableMemory[0x40];
	/*0008*/ ULONGLONG Pad[0x80];
	/*0408*/
};

struct _SYSTEM_NUMA_PROXIMITY_MAP {
	/*0000*/ ULONG NodeProximityId;
	/*0004*/ USHORT NodeNumber;
	/*0008*/
};

struct _SYSTEM_OBJECTTYPE_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG NumberOfObjects;
	/*0008*/ ULONG NumberOfHandles;
	/*000c*/ ULONG TypeIndex;
	/*0010*/ ULONG InvalidAttributes;
	/*0014*/ _GENERIC_MAPPING GenericMapping;
	/*0024*/ ULONG ValidAccessMask;
	/*0028*/ ULONG PoolType;
	/*002c*/ UCHAR SecurityRequired;
	/*002d*/ UCHAR WaitableObject;
	/*0030*/ _UNICODE_STRING TypeName;
	/*0040*/
};

struct _SYSTEM_OBJECT_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0008*/ void * Object;
	/*0010*/ void * CreatorUniqueProcess;
	/*0018*/ USHORT CreatorBackTraceIndex;
	/*001a*/ USHORT Flags;
	/*001c*/ LONG PointerCount;
	/*0020*/ LONG HandleCount;
	/*0024*/ ULONG PagedPoolCharge;
	/*0028*/ ULONG NonPagedPoolCharge;
	/*0030*/ void * ExclusiveProcessId;
	/*0038*/ void * SecurityDescriptor;
	/*0040*/ _OBJECT_NAME_INFORMATION NameInfo;
	/*0050*/
};

struct _SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_INPUT {
	/*0000*/ ULONG Version;
	/*0008*/ WCHAR * FeatureName;
	/*0010*/ ULONG BornOnVersion;
	/*0018*/
};

struct _SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_OUTPUT {
	/*0000*/ ULONG Version;
	/*0004*/ UCHAR FeatureIsEnabled;
	/*0008*/
};

struct _SYSTEM_PAGEFILE_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG TotalSize;
	/*0008*/ ULONG TotalInUse;
	/*000c*/ ULONG PeakUsage;
	/*0010*/ _UNICODE_STRING PageFileName;
	/*0020*/
};

struct _SYSTEM_PAGEFILE_INFORMATION_EX {
	/*0000*/ _SYSTEM_PAGEFILE_INFORMATION Info;
	/*0020*/ ULONG MinimumSize;
	/*0024*/ ULONG MaximumSize;
	/*0028*/
};

struct _SYSTEM_PERFORMANCE_INFORMATION {
	/*0000*/ _LARGE_INTEGER IdleProcessTime;
	/*0008*/ _LARGE_INTEGER IoReadTransferCount;
	/*0010*/ _LARGE_INTEGER IoWriteTransferCount;
	/*0018*/ _LARGE_INTEGER IoOtherTransferCount;
	/*0020*/ ULONG IoReadOperationCount;
	/*0024*/ ULONG IoWriteOperationCount;
	/*0028*/ ULONG IoOtherOperationCount;
	/*002c*/ ULONG AvailablePages;
	/*0030*/ ULONG CommittedPages;
	/*0034*/ ULONG CommitLimit;
	/*0038*/ ULONG PeakCommitment;
	/*003c*/ ULONG PageFaultCount;
	/*0040*/ ULONG CopyOnWriteCount;
	/*0044*/ ULONG TransitionCount;
	/*0048*/ ULONG CacheTransitionCount;
	/*004c*/ ULONG DemandZeroCount;
	/*0050*/ ULONG PageReadCount;
	/*0054*/ ULONG PageReadIoCount;
	/*0058*/ ULONG CacheReadCount;
	/*005c*/ ULONG CacheIoCount;
	/*0060*/ ULONG DirtyPagesWriteCount;
	/*0064*/ ULONG DirtyWriteIoCount;
	/*0068*/ ULONG MappedPagesWriteCount;
	/*006c*/ ULONG MappedWriteIoCount;
	/*0070*/ ULONG PagedPoolPages;
	/*0074*/ ULONG NonPagedPoolPages;
	/*0078*/ ULONG PagedPoolAllocs;
	/*007c*/ ULONG PagedPoolFrees;
	/*0080*/ ULONG NonPagedPoolAllocs;
	/*0084*/ ULONG NonPagedPoolFrees;
	/*0088*/ ULONG FreeSystemPtes;
	/*008c*/ ULONG ResidentSystemCodePage;
	/*0090*/ ULONG TotalSystemDriverPages;
	/*0094*/ ULONG TotalSystemCodePages;
	/*0098*/ ULONG NonPagedPoolLookasideHits;
	/*009c*/ ULONG PagedPoolLookasideHits;
	/*00a0*/ ULONG AvailablePagedPoolPages;
	/*00a4*/ ULONG ResidentSystemCachePage;
	/*00a8*/ ULONG ResidentPagedPoolPage;
	/*00ac*/ ULONG ResidentSystemDriverPage;
	/*00b0*/ ULONG CcFastReadNoWait;
	/*00b4*/ ULONG CcFastReadWait;
	/*00b8*/ ULONG CcFastReadResourceMiss;
	/*00bc*/ ULONG CcFastReadNotPossible;
	/*00c0*/ ULONG CcFastMdlReadNoWait;
	/*00c4*/ ULONG CcFastMdlReadWait;
	/*00c8*/ ULONG CcFastMdlReadResourceMiss;
	/*00cc*/ ULONG CcFastMdlReadNotPossible;
	/*00d0*/ ULONG CcMapDataNoWait;
	/*00d4*/ ULONG CcMapDataWait;
	/*00d8*/ ULONG CcMapDataNoWaitMiss;
	/*00dc*/ ULONG CcMapDataWaitMiss;
	/*00e0*/ ULONG CcPinMappedDataCount;
	/*00e4*/ ULONG CcPinReadNoWait;
	/*00e8*/ ULONG CcPinReadWait;
	/*00ec*/ ULONG CcPinReadNoWaitMiss;
	/*00f0*/ ULONG CcPinReadWaitMiss;
	/*00f4*/ ULONG CcCopyReadNoWait;
	/*00f8*/ ULONG CcCopyReadWait;
	/*00fc*/ ULONG CcCopyReadNoWaitMiss;
	/*0100*/ ULONG CcCopyReadWaitMiss;
	/*0104*/ ULONG CcMdlReadNoWait;
	/*0108*/ ULONG CcMdlReadWait;
	/*010c*/ ULONG CcMdlReadNoWaitMiss;
	/*0110*/ ULONG CcMdlReadWaitMiss;
	/*0114*/ ULONG CcReadAheadIos;
	/*0118*/ ULONG CcLazyWriteIos;
	/*011c*/ ULONG CcLazyWritePages;
	/*0120*/ ULONG CcDataFlushes;
	/*0124*/ ULONG CcDataPages;
	/*0128*/ ULONG ContextSwitches;
	/*012c*/ ULONG FirstLevelTbFills;
	/*0130*/ ULONG SecondLevelTbFills;
	/*0134*/ ULONG SystemCalls;
	/*0138*/ ULONGLONG CcTotalDirtyPages;
	/*0140*/ ULONGLONG CcDirtyPageThreshold;
	/*0148*/ LONGLONG ResidentAvailablePages;
	/*0150*/ ULONGLONG SharedCommittedPages;
	/*0158*/
};

struct _SYSTEM_PHYSICAL_MEMORY_INFORMATION {
	/*0000*/ ULONGLONG TotalPhysicalBytes;
	/*0008*/ ULONGLONG LowestPhysicalAddress;
	/*0010*/ ULONGLONG HighestPhysicalAddress;
	/*0018*/
};

enum _SYSTEM_PIXEL_FORMAT {
	SystemPixelFormatUnknown = 0x0,
	SystemPixelFormatR8G8B8 = 0x1,
	SystemPixelFormatR8G8B8X8 = 0x2,
	SystemPixelFormatB8G8R8 = 0x3,
	SystemPixelFormatB8G8R8X8 = 0x4
};

struct _SYSTEM_PLATFORM_BINARY_INFORMATION {
	/*0000*/ ULONGLONG PhysicalAddress;
	/*0008*/ void * HandoffBuffer;
	/*0010*/ void * CommandLineBuffer;
	/*0018*/ ULONG HandoffBufferSize;
	/*001c*/ ULONG CommandLineBufferSize;
	/*0020*/
};

struct _SYSTEM_POINTER_AUTH_INFORMATION {
	/*0000*/ USHORT SupportedFlags;
	/*0000*/ USHORT AddressAuthSupported : 01; // 0x0001;
	/*0000*/ USHORT AddressAuthQarma : 01; // 0x0002;
	/*0000*/ USHORT GenericAuthSupported : 01; // 0x0004;
	/*0000*/ USHORT GenericAuthQarma : 01; // 0x0008;
	/*0000*/ USHORT SupportedReserved : 12; // 0xfff0;
	/*0002*/ USHORT EnabledFlags;
	/*0002*/ USHORT UserPerProcessIpAuthEnabled : 01; // 0x0001;
	/*0002*/ USHORT UserGlobalIpAuthEnabled : 01; // 0x0002;
	/*0002*/ USHORT UserEnabledReserved : 06; // 0x00fc;
	/*0002*/ USHORT KernelIpAuthEnabled : 01; // 0x0100;
	/*0002*/ USHORT KernelEnabledReserved : 07; // 0xfe00;
	/*0004*/
};

struct _SYSTEM_POLICY_INFORMATION {
	/*0000*/ void * InputData;
	/*0008*/ void * OutputData;
	/*0010*/ ULONG InputDataSize;
	/*0014*/ ULONG OutputDataSize;
	/*0018*/ ULONG Version;
	/*0020*/
};

struct _SYSTEM_POOLTAG {
	/*0000*/ UCHAR Tag[0x4];
	/*0000*/ ULONG TagUlong;
	/*0004*/ ULONG PagedAllocs;
	/*0008*/ ULONG PagedFrees;
	/*0010*/ ULONGLONG PagedUsed;
	/*0018*/ ULONG NonPagedAllocs;
	/*001c*/ ULONG NonPagedFrees;
	/*0020*/ ULONGLONG NonPagedUsed;
	/*0028*/
};

struct _SYSTEM_POOLTAG_INFORMATION {
	/*0000*/ ULONG Count;
	/*0008*/ _SYSTEM_POOLTAG TagInfo[0x1];
	/*0030*/
};

struct _SYSTEM_POOL_ENTRY {
	/*0000*/ UCHAR Allocated;
	/*0001*/ UCHAR Spare0;
	/*0002*/ USHORT AllocatorBackTraceIndex;
	/*0004*/ ULONG Size;
	/*0008*/ UCHAR Tag[0x4];
	/*0008*/ ULONG TagUlong;
	/*0008*/ void * ProcessChargedQuota;
	/*0010*/
};

struct _SYSTEM_POOL_INFORMATION {
	/*0000*/ ULONGLONG TotalSize;
	/*0008*/ void * FirstEntry;
	/*0010*/ USHORT EntryOverhead;
	/*0012*/ UCHAR PoolTagPresent;
	/*0013*/ UCHAR Spare0;
	/*0014*/ ULONG NumberOfEntries;
	/*0018*/ _SYSTEM_POOL_ENTRY Entries[0x1];
	/*0028*/
};

struct _SYSTEM_POOL_LIMIT_INFO {
	/*0000*/ ULONG PoolTag;
	/*0008*/ _SYSTEM_POOL_LIMIT_MEM_INFO MemLimits[0x2];
	/*0028*/ _WNF_STATE_NAME NotificationHandle;
	/*0030*/
};

struct _SYSTEM_POOL_LIMIT_INFORMATION {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG EntryCount;
	/*0008*/ _SYSTEM_POOL_LIMIT_INFO LimitEntries[0x1];
	/*0038*/
};

struct _SYSTEM_POOL_LIMIT_MEM_INFO {
	/*0000*/ ULONGLONG MemoryLimit;
	/*0008*/ ULONGLONG NotificationLimit;
	/*0010*/
};

enum _SYSTEM_POOL_LIMIT_MEM_TYPE {
	SysPlMemPaged = 0x0,
	SysPlMemNonPaged = 0x1,
	SysPlMemTypeMax = 0x2
};

struct _SYSTEM_POOL_ZEROING_INFORMATION {
	/*0000*/ UCHAR PoolZeroingSupportPresent;
	/*0001*/
};

struct _SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION {
	/*0000*/ UCHAR EfiLauncherEnabled;
	/*0001*/
};

struct _SYSTEM_POWER_INFORMATION {
	/*0000*/ ULONG MaxIdlenessAllowed;
	/*0004*/ ULONG Idleness;
	/*0008*/ ULONG TimeRemaining;
	/*000c*/ UCHAR CoolingMode;
	/*0010*/
};

struct _SYSTEM_POWER_LOGGING_ENTRY {
	/*0000*/ ULONG Reason;
	/*0004*/ ULONG States;
	/*0008*/
};

struct _SYSTEM_POWER_POLICY {
	/*0000*/ ULONG Revision;
	/*0004*/ POWER_ACTION_POLICY PowerButton;
	/*0010*/ POWER_ACTION_POLICY SleepButton;
	/*001c*/ POWER_ACTION_POLICY LidClose;
	/*0028*/ _SYSTEM_POWER_STATE LidOpenWake;
	/*002c*/ ULONG Reserved;
	/*0030*/ POWER_ACTION_POLICY Idle;
	/*003c*/ ULONG IdleTimeout;
	/*0040*/ UCHAR IdleSensitivity;
	/*0041*/ UCHAR DynamicThrottle;
	/*0042*/ UCHAR Spare2[0x2];
	/*0044*/ _SYSTEM_POWER_STATE MinSleep;
	/*0048*/ _SYSTEM_POWER_STATE MaxSleep;
	/*004c*/ _SYSTEM_POWER_STATE ReducedLatencySleep;
	/*0050*/ ULONG WinLogonFlags;
	/*0054*/ ULONG Spare3;
	/*0058*/ ULONG DozeS4Timeout;
	/*005c*/ ULONG BroadcastCapacityResolution;
	/*0060*/ SYSTEM_POWER_LEVEL DischargePolicy[0x4];
	/*00c0*/ ULONG VideoTimeout;
	/*00c4*/ UCHAR VideoDimDisplay;
	/*00c8*/ ULONG VideoReserved[0x3];
	/*00d4*/ ULONG SpindownTimeout;
	/*00d8*/ UCHAR OptimizeForPower;
	/*00d9*/ UCHAR FanThrottleTolerance;
	/*00da*/ UCHAR ForcedThrottle;
	/*00db*/ UCHAR MinThrottle;
	/*00dc*/ POWER_ACTION_POLICY OverThrottled;
	/*00e8*/
};

enum _SYSTEM_POWER_STATE {
	PowerSystemUnspecified = 0x0,
	PowerSystemWorking = 0x1,
	PowerSystemSleeping1 = 0x2,
	PowerSystemSleeping2 = 0x3,
	PowerSystemSleeping3 = 0x4,
	PowerSystemHibernate = 0x5,
	PowerSystemShutdown = 0x6,
	PowerSystemMaximum = 0x7
};

struct _SYSTEM_POWER_STATE_CONTEXT {
	/*0000*/ ULONG Reserved1 : 08; // 0x000000ff;
	/*0000*/ ULONG TargetSystemState : 04; // 0x00000f00;
	/*0000*/ ULONG EffectiveSystemState : 04; // 0x0000f000;
	/*0000*/ ULONG CurrentSystemState : 04; // 0x000f0000;
	/*0000*/ ULONG IgnoreHibernationPath : 01; // 0x00100000;
	/*0000*/ ULONG PseudoTransition : 01; // 0x00200000;
	/*0000*/ ULONG KernelSoftReboot : 01; // 0x00400000;
	/*0000*/ ULONG DirectedDripsTransition : 01; // 0x00800000;
	/*0000*/ ULONG Reserved2 : 08; // 0xff000000;
	/*0000*/ ULONG ContextAsUlong;
	/*0004*/
};

struct _SYSTEM_POWER_STATE_DISABLE_REASON {
	/*0000*/ UCHAR AffectedState[0x8];
	/*0008*/ ULONG PowerReasonCode;
	/*000c*/ ULONG PowerReasonLength;
	/*0010*/
};

struct _SYSTEM_POWER_STATUS {
	/*0000*/ UCHAR ACLineStatus;
	/*0001*/ UCHAR BatteryFlag;
	/*0002*/ UCHAR BatteryLifePercent;
	/*0003*/ UCHAR SystemStatusFlag;
	/*0004*/ ULONG BatteryLifeTime;
	/*0008*/ ULONG BatteryFullLifeTime;
	/*000c*/
};

struct _SYSTEM_PREFETCH_OPTIONS {
	/*0000*/ ULONG LowerPriority : 01; // 0x00000001;
	/*0000*/ ULONG VirtualOffsets : 01; // 0x00000002;
	/*0000*/ ULONG TrickleIOs : 01; // 0x00000004;
	/*0000*/ ULONG SkipInStorePages : 01; // 0x00000008;
	/*0000*/ ULONG PrefetchFilesByVa : 01; // 0x00000010;
	/*0000*/ ULONG SkipMemoryStorePages : 01; // 0x00000020;
	/*0000*/ ULONG Spare : 02; // 0x000000c0;
	/*0000*/ ULONG ScenarioType : 08; // 0x0000ff00;
	/*0004*/
};

struct _SYSTEM_PREFETCH_PATCH_INFORMATION {
	/*0000*/ ULONG PrefetchPatchCount;
	/*0004*/
};

struct _SYSTEM_PREFETCH_STATS {
	/*0000*/ ULONG DemandFilePageCount;
	/*0004*/ ULONG DemandFileIOCount;
	/*0008*/ ULONG TrickleFilePageCount;
	/*000c*/ ULONG TrickleFileIOCount;
	/*0010*/ ULONG DemandPrivatePageCount;
	/*0014*/ ULONG DemandPrivateIOCount;
	/*0018*/ ULONG TricklePrivatePageCount;
	/*001c*/ ULONG TricklePrivateIOCount;
	/*0020*/
};

struct _SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION {
	/*0000*/ ULONGLONG Cycles[0x4][0x2];
	/*0040*/
};

struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
	/*0000*/ ULONGLONG CycleTime;
	/*0008*/
};

struct _SYSTEM_PROCESSOR_FEATURES_INFORMATION {
	/*0000*/ ULONGLONG ProcessorFeatureBits;
	/*0008*/ ULONGLONG Reserved[0x3];
	/*0020*/
};

struct _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION {
	/*0000*/ ULONGLONG CycleTime;
	/*0008*/
};

struct _SYSTEM_PROCESSOR_IDLE_INFORMATION {
	/*0000*/ ULONGLONG IdleTime;
	/*0008*/ ULONGLONG C1Time;
	/*0010*/ ULONGLONG C2Time;
	/*0018*/ ULONGLONG C3Time;
	/*0020*/ ULONG C1Transitions;
	/*0024*/ ULONG C2Transitions;
	/*0028*/ ULONG C3Transitions;
	/*002c*/ ULONG Padding;
	/*0030*/
};

struct _SYSTEM_PROCESSOR_INFORMATION {
	/*0000*/ USHORT ProcessorArchitecture;
	/*0002*/ USHORT ProcessorLevel;
	/*0004*/ USHORT ProcessorRevision;
	/*0006*/ USHORT MaximumProcessors;
	/*0008*/ ULONG ProcessorFeatureBits;
	/*000c*/
};

struct _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION {
	/*0000*/ ULONG Operation;
	/*0004*/
};

struct _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION {
	/*0000*/ ULONG ProcessorCount;
	/*0004*/ ULONG Offsets[0x1];
	/*0008*/
};

struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT {
	/*0000*/ ULONGLONG Hits;
	/*0008*/ UCHAR PercentFrequency;
	/*0010*/
};

struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {
	/*0000*/ _LARGE_INTEGER IdleTime;
	/*0008*/ _LARGE_INTEGER KernelTime;
	/*0010*/ _LARGE_INTEGER UserTime;
	/*0018*/ _LARGE_INTEGER DpcTime;
	/*0020*/ _LARGE_INTEGER InterruptTime;
	/*0028*/ ULONG InterruptCount;
	/*0030*/
};

struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX {
	/*0000*/ _LARGE_INTEGER IdleTime;
	/*0008*/ _LARGE_INTEGER KernelTime;
	/*0010*/ _LARGE_INTEGER UserTime;
	/*0018*/ _LARGE_INTEGER DpcTime;
	/*0020*/ _LARGE_INTEGER InterruptTime;
	/*0028*/ ULONG InterruptCount;
	/*002c*/ ULONG Spare0;
	/*0030*/ _LARGE_INTEGER AvailableTime;
	/*0038*/ _LARGE_INTEGER Spare1;
	/*0040*/ _LARGE_INTEGER Spare2;
	/*0048*/
};

struct _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION {
	/*0000*/ ULONG ProcessorNumber;
	/*0004*/ ULONG StateCount;
	/*0008*/ _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT States[0x1];
	/*0018*/
};

struct _SYSTEM_PROCESSOR_POLICY_INFORMATION {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG PolicyId;
	/*0008*/ _XSAVE_POLICY Policy;
	/*0038*/
};

struct _SYSTEM_PROCESSOR_POWER_INFORMATION {
	/*0000*/ UCHAR CurrentFrequency;
	/*0001*/ UCHAR ThermalLimitFrequency;
	/*0002*/ UCHAR ConstantThrottleFrequency;
	/*0003*/ UCHAR DegradedThrottleFrequency;
	/*0004*/ UCHAR LastBusyFrequency;
	/*0005*/ UCHAR LastC3Frequency;
	/*0006*/ UCHAR LastAdjustedBusyFrequency;
	/*0007*/ UCHAR ProcessorMinThrottle;
	/*0008*/ UCHAR ProcessorMaxThrottle;
	/*000c*/ ULONG NumberOfFrequencies;
	/*0010*/ ULONG PromotionCount;
	/*0014*/ ULONG DemotionCount;
	/*0018*/ ULONG ErrorCount;
	/*001c*/ ULONG RetryCount;
	/*0020*/ ULONGLONG CurrentFrequencyTime;
	/*0028*/ ULONGLONG CurrentProcessorTime;
	/*0030*/ ULONGLONG CurrentProcessorIdleTime;
	/*0038*/ ULONGLONG LastProcessorTime;
	/*0040*/ ULONGLONG LastProcessorIdleTime;
	/*0048*/ ULONGLONG Energy;
	/*0050*/
};

struct _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA {
	/*0000*/ _PROCESSOR_PROFILE_CONTROL_AREA * ProcessorProfileControlArea;
	/*0008*/ UCHAR Allocate;
	/*0010*/
};

enum _SYSTEM_PROCESS_CLASSIFICATION {
	SystemProcessClassificationNormal = 0x0,
	SystemProcessClassificationSystem = 0x1,
	SystemProcessClassificationSecureSystem = 0x2,
	SystemProcessClassificationMemCompression = 0x3,
	SystemProcessClassificationRegistry = 0x4,
	SystemProcessClassificationMaximum = 0x5
};

struct _SYSTEM_PROCESS_ID_INFORMATION {
	/*0000*/ void * ProcessId;
	/*0008*/ _UNICODE_STRING ImageName;
	/*0018*/
};

struct _SYSTEM_PROCESS_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG NumberOfThreads;
	/*0008*/ _LARGE_INTEGER WorkingSetPrivateSize;
	/*0010*/ ULONG HardFaultCount;
	/*0014*/ ULONG NumberOfThreadsHighWatermark;
	/*0018*/ ULONGLONG CycleTime;
	/*0020*/ _LARGE_INTEGER CreateTime;
	/*0028*/ _LARGE_INTEGER UserTime;
	/*0030*/ _LARGE_INTEGER KernelTime;
	/*0038*/ _UNICODE_STRING ImageName;
	/*0048*/ LONG BasePriority;
	/*0050*/ void * UniqueProcessId;
	/*0058*/ void * InheritedFromUniqueProcessId;
	/*0060*/ ULONG HandleCount;
	/*0064*/ ULONG SessionId;
	/*0068*/ ULONGLONG UniqueProcessKey;
	/*0070*/ ULONGLONG PeakVirtualSize;
	/*0078*/ ULONGLONG VirtualSize;
	/*0080*/ ULONG PageFaultCount;
	/*0088*/ ULONGLONG PeakWorkingSetSize;
	/*0090*/ ULONGLONG WorkingSetSize;
	/*0098*/ ULONGLONG QuotaPeakPagedPoolUsage;
	/*00a0*/ ULONGLONG QuotaPagedPoolUsage;
	/*00a8*/ ULONGLONG QuotaPeakNonPagedPoolUsage;
	/*00b0*/ ULONGLONG QuotaNonPagedPoolUsage;
	/*00b8*/ ULONGLONG PagefileUsage;
	/*00c0*/ ULONGLONG PeakPagefileUsage;
	/*00c8*/ ULONGLONG PrivatePageCount;
	/*00d0*/ _LARGE_INTEGER ReadOperationCount;
	/*00d8*/ _LARGE_INTEGER WriteOperationCount;
	/*00e0*/ _LARGE_INTEGER OtherOperationCount;
	/*00e8*/ _LARGE_INTEGER ReadTransferCount;
	/*00f0*/ _LARGE_INTEGER WriteTransferCount;
	/*00f8*/ _LARGE_INTEGER OtherTransferCount;
	/*0100*/
};

struct _SYSTEM_PROCESS_INFORMATION_EXTENSION {
	/*0000*/ _PROCESS_DISK_COUNTERS DiskCounters;
	/*0028*/ ULONGLONG ContextSwitches;
	/*0030*/ ULONG Flags;
	/*0030*/ ULONG HasStrongId : 01; // 0x00000001;
	/*0030*/ ULONG Classification : 04; // 0x0000001e;
	/*0030*/ ULONG BackgroundActivityModerated : 01; // 0x00000020;
	/*0030*/ ULONG Spare : 26; // 0xffffffc0;
	/*0034*/ ULONG UserSidOffset;
	/*0038*/ ULONG PackageFullNameOffset;
	/*0040*/ _PROCESS_ENERGY_VALUES EnergyValues;
	/*0150*/ ULONG AppIdOffset;
	/*0158*/ ULONGLONG SharedCommitCharge;
	/*0160*/ ULONG JobObjectId;
	/*0164*/ ULONG SpareUlong;
	/*0168*/ ULONGLONG ProcessSequenceNumber;
	/*0170*/
};

struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION {
	/*0000*/ ULONG Version;
	/*0004*/ _QUERY_PERFORMANCE_COUNTER_FLAGS Flags;
	/*0008*/ _QUERY_PERFORMANCE_COUNTER_FLAGS ValidFlags;
	/*000c*/
};

struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION {
	/*0000*/ ULONG TimeAdjustment;
	/*0004*/ ULONG TimeIncrement;
	/*0008*/ UCHAR Enable;
	/*000c*/
};

struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE {
	/*0000*/ ULONGLONG TimeAdjustment;
	/*0008*/ ULONGLONG TimeIncrement;
	/*0010*/ UCHAR Enable;
	/*0018*/
};

struct _SYSTEM_REF_TRACE_INFORMATION {
	/*0000*/ UCHAR TraceEnable;
	/*0001*/ UCHAR TracePermanent;
	/*0008*/ _UNICODE_STRING TraceProcessName;
	/*0018*/ _UNICODE_STRING TracePoolTags;
	/*0028*/
};

struct _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS {
	/*0000*/ void * KeyHandle;
	/*0008*/ _UNICODE_STRING * ValueNamePointer;
	/*0010*/ ULONG * RequiredLengthPointer;
	/*0018*/ UCHAR * Buffer;
	/*0020*/ ULONG BufferLength;
	/*0024*/ ULONG Type;
	/*0028*/ UCHAR * AppendBuffer;
	/*0030*/ ULONG AppendBufferLength;
	/*0034*/ UCHAR CreateIfDoesntExist;
	/*0035*/ UCHAR TruncateExistingValue;
	/*0038*/
};

struct _SYSTEM_REGISTRY_QUOTA_INFORMATION {
	/*0000*/ ULONG RegistryQuotaAllowed;
	/*0004*/ ULONG RegistryQuotaUsed;
	/*0008*/ ULONGLONG PagedPoolSize;
	/*0010*/
};

struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_ROOT_SILO_INFORMATION {
	/*0000*/ ULONG NumberOfSilos;
	/*0004*/ ULONG SiloIdList[0x1];
	/*0008*/
};

struct _SYSTEM_SCOPED_POLICY_ID_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_SECUREBOOT_INFORMATION {
	/*0000*/ UCHAR SecureBootEnabled;
	/*0001*/ UCHAR SecureBootCapable;
	/*0002*/
};

struct _SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION {
	/*0000*/ ULONG PlatformManifestSize;
	/*0004*/ UCHAR PlatformManifest[0x1];
	/*0008*/
};

struct _SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION {
	/*0000*/ _SYSTEM_SECUREBOOT_POLICY_INFORMATION PolicyInformation;
	/*0018*/ ULONG PolicySize;
	/*001c*/ UCHAR Policy[0x1];
	/*0020*/
};

struct _SYSTEM_SECUREBOOT_POLICY_INFORMATION {
	/*0000*/ _GUID PolicyPublisher;
	/*0010*/ ULONG PolicyVersion;
	/*0014*/ ULONG PolicyOptions;
	/*0018*/
};

struct _SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION {
	/*0000*/ ULONG ExtentCount;
	/*0004*/ ULONG ValidStructureSize;
	/*0008*/ ULONG NextExtentIndex;
	/*000c*/ ULONG ExtentRestart;
	/*0010*/ ULONG CycleCount;
	/*0014*/ ULONG TimeoutCount;
	/*0018*/ ULONGLONG CycleTime;
	/*0020*/ ULONGLONG CycleTimeMax;
	/*0028*/ ULONGLONG ExtentTime;
	/*0030*/ ULONG ExtentTimeIndex;
	/*0034*/ ULONG ExtentTimeMaxIndex;
	/*0038*/ ULONGLONG ExtentTimeMax;
	/*0040*/ ULONGLONG HyperFlushTimeMax;
	/*0048*/ ULONGLONG TranslateVaTimeMax;
	/*0050*/ ULONGLONG DebugExemptionCount;
	/*0058*/ ULONGLONG TbHitCount;
	/*0060*/ ULONGLONG TbMissCount;
	/*0068*/ ULONGLONG VinaPendingYield;
	/*0070*/ ULONGLONG HashCycles;
	/*0078*/ ULONG HistogramOffset;
	/*007c*/ ULONG HistogramBuckets;
	/*0080*/ ULONG HistogramShift;
	/*0084*/ ULONG Reserved1;
	/*0088*/ ULONGLONG PageNotPresentCount;
	/*0090*/
};

struct _SYSTEM_SECURITY_MODEL_INFORMATION {
	
	/*0000*/ <unnamed-type-SecurityModelFlags> SecurityModelFlags;
	/*0004*/
};

struct _SYSTEM_SESSION_BIGPOOL_INFORMATION {
	/*0000*/ ULONGLONG NextEntryOffset;
	/*0008*/ ULONG SessionId;
	/*000c*/ ULONG Count;
	/*0010*/ _SYSTEM_BIGPOOL_ENTRY AllocatedInfo[0x1];
	/*0028*/
};

struct _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION {
	/*0000*/ ULONGLONG NextEntryOffset;
	/*0008*/ ULONG SessionId;
	/*000c*/ ULONG ViewFailures;
	/*0010*/ ULONGLONG NumberOfBytesAvailable;
	/*0018*/ ULONGLONG NumberOfBytesAvailableContiguous;
	/*0020*/
};

struct _SYSTEM_SESSION_POOLTAG_INFORMATION {
	/*0000*/ ULONGLONG NextEntryOffset;
	/*0008*/ ULONG SessionId;
	/*000c*/ ULONG Count;
	/*0010*/ _SYSTEM_POOLTAG TagInfo[0x1];
	/*0038*/
};

struct _SYSTEM_SESSION_PROCESS_INFORMATION {
	/*0000*/ ULONG SessionId;
	/*0004*/ ULONG SizeOfBuf;
	/*0008*/ void * Buffer;
	/*0010*/
};

struct _SYSTEM_SET_TIME_ADJUST_INFORMATION {
	/*0000*/ ULONG TimeAdjustment;
	/*0004*/ UCHAR Enable;
	/*0008*/
};

struct _SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE {
	/*0000*/ ULONGLONG TimeAdjustment;
	/*0008*/ UCHAR Enable;
	/*0010*/
};

struct _SYSTEM_SHADOW_STACK_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG CetCapable : 01; // 0x00000001;
	/*0000*/ ULONG UserCetAllowed : 01; // 0x00000002;
	/*0000*/ ULONG ReservedForUserCet : 06; // 0x000000fc;
	/*0000*/ ULONG KernelCetEnabled : 01; // 0x00000100;
	/*0000*/ ULONG KernelCetAuditModeEnabled : 01; // 0x00000200;
	/*0000*/ ULONG ReservedForKernelCet : 06; // 0x0000fc00;
	/*0000*/ ULONG Reserved : 16; // 0xffff0000;
	/*0004*/
};

struct _SYSTEM_SINGLE_MODULE_INFORMATION {
	/*0000*/ void * TargetModuleAddress;
	/*0008*/ _RTL_PROCESS_MODULE_INFORMATION_EX ExInfo;
	/*0148*/
};

struct _SYSTEM_SINGLE_PROCESSOR_RELATIONSHIP_INFORMATION_REQUEST {
	/*0000*/ _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
	/*0004*/ _PROCESSOR_NUMBER ProcessorNumber;
	/*0008*/
};

struct _SYSTEM_SPECIAL_POOL_INFORMATION {
	/*0000*/ ULONG PoolTag;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _SYSTEM_SPECULATION_CONTROL_INFORMATION {
	
	
	/*0000*/ <unnamed-type-SpeculationControlFlags> SpeculationControlFlags;
	/*0004*/ <unnamed-type-SpeculationControlFlags2> SpeculationControlFlags2;
	/*0008*/
};

struct _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION {
	/*0000*/ ULONG Machine : 16; // 0x0000ffff;
	/*0000*/ ULONG KernelMode : 01; // 0x00010000;
	/*0000*/ ULONG UserMode : 01; // 0x00020000;
	/*0000*/ ULONG Native : 01; // 0x00040000;
	/*0000*/ ULONG Process : 01; // 0x00080000;
	/*0000*/ ULONG WoW64Container : 01; // 0x00100000;
	/*0000*/ ULONG ReservedZero0 : 11; // 0xffe00000;
	/*0004*/
};

struct _SYSTEM_SYSTEM_DISK_INFORMATION {
	/*0000*/ _UNICODE_STRING SystemDisk;
	/*0010*/
};

struct _SYSTEM_SYSTEM_PARTITION_INFORMATION {
	/*0000*/ _UNICODE_STRING SystemPartition;
	/*0010*/
};

struct _SYSTEM_THREAD_CID_PRIORITY_INFORMATION {
	/*0000*/ _CLIENT_ID ClientId;
	/*0010*/ LONG Priority;
	/*0018*/
};

struct _SYSTEM_THREAD_INFORMATION {
	/*0000*/ _LARGE_INTEGER KernelTime;
	/*0008*/ _LARGE_INTEGER UserTime;
	/*0010*/ _LARGE_INTEGER CreateTime;
	/*0018*/ ULONG WaitTime;
	/*0020*/ void * StartAddress;
	/*0028*/ _CLIENT_ID ClientId;
	/*0038*/ LONG Priority;
	/*003c*/ LONG BasePriority;
	/*0040*/ ULONG ContextSwitches;
	/*0044*/ ULONG ThreadState;
	/*0048*/ ULONG WaitReason;
	/*0050*/
};

struct _SYSTEM_TIMEOFDAY_INFORMATION {
	/*0000*/ _LARGE_INTEGER BootTime;
	/*0008*/ _LARGE_INTEGER CurrentTime;
	/*0010*/ _LARGE_INTEGER TimeZoneBias;
	/*0018*/ ULONG TimeZoneId;
	/*001c*/ ULONG Reserved;
	/*0020*/ ULONGLONG BootTimeBias;
	/*0028*/ ULONGLONG SleepTimeBias;
	/*0030*/
};

struct _SYSTEM_TPM_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _SYSTEM_VA_LIST_INFORMATION {
	/*0000*/ ULONGLONG VirtualSize;
	/*0008*/ ULONGLONG VirtualPeak;
	/*0010*/ ULONGLONG VirtualLimit;
	/*0018*/ ULONGLONG AllocationFailures;
	/*0020*/
};

enum _SYSTEM_VA_TYPE {
	SystemVaTypeAll = 0x0,
	SystemVaTypeNonPagedPool = 0x1,
	SystemVaTypePagedPool = 0x2,
	SystemVaTypeSystemCache = 0x3,
	SystemVaTypeSystemPtes = 0x4,
	SystemVaTypeSessionSpace = 0x5,
	SystemVaTypeMax = 0x6
};

struct _SYSTEM_VDM_INSTEMUL_INFO {
	/*0000*/ ULONG SegmentNotPresent;
	/*0004*/ ULONG VdmOpcode0F;
	/*0008*/ ULONG OpcodeESPrefix;
	/*000c*/ ULONG OpcodeCSPrefix;
	/*0010*/ ULONG OpcodeSSPrefix;
	/*0014*/ ULONG OpcodeDSPrefix;
	/*0018*/ ULONG OpcodeFSPrefix;
	/*001c*/ ULONG OpcodeGSPrefix;
	/*0020*/ ULONG OpcodeOPER32Prefix;
	/*0024*/ ULONG OpcodeADDR32Prefix;
	/*0028*/ ULONG OpcodeINSB;
	/*002c*/ ULONG OpcodeINSW;
	/*0030*/ ULONG OpcodeOUTSB;
	/*0034*/ ULONG OpcodeOUTSW;
	/*0038*/ ULONG OpcodePUSHF;
	/*003c*/ ULONG OpcodePOPF;
	/*0040*/ ULONG OpcodeINTnn;
	/*0044*/ ULONG OpcodeINTO;
	/*0048*/ ULONG OpcodeIRET;
	/*004c*/ ULONG OpcodeINBimm;
	/*0050*/ ULONG OpcodeINWimm;
	/*0054*/ ULONG OpcodeOUTBimm;
	/*0058*/ ULONG OpcodeOUTWimm;
	/*005c*/ ULONG OpcodeINB;
	/*0060*/ ULONG OpcodeINW;
	/*0064*/ ULONG OpcodeOUTB;
	/*0068*/ ULONG OpcodeOUTW;
	/*006c*/ ULONG OpcodeLOCKPrefix;
	/*0070*/ ULONG OpcodeREPNEPrefix;
	/*0074*/ ULONG OpcodeREPPrefix;
	/*0078*/ ULONG OpcodeHLT;
	/*007c*/ ULONG OpcodeCLI;
	/*0080*/ ULONG OpcodeSTI;
	/*0084*/ ULONG BopCount;
	/*0088*/
};

struct _SYSTEM_VERIFIER_CANCELLATION_INFORMATION {
	/*0000*/ ULONG CancelProbability;
	/*0004*/ ULONG CancelThreshold;
	/*0008*/ ULONG CompletionThreshold;
	/*000c*/ ULONG CancellationVerifierDisabled;
	/*0010*/ ULONG AvailableIssues;
	/*0018*/ _SYSTEM_VERIFIER_ISSUE Issues[0x80];
	/*1018*/
};

struct _SYSTEM_VERIFIER_COUNTERS_INFORMATION {
	/*0000*/ _SYSTEM_VERIFIER_INFORMATION Legacy;
	/*0090*/ ULONG RaiseIrqls;
	/*0094*/ ULONG AcquireSpinLocks;
	/*0098*/ ULONG SynchronizeExecutions;
	/*009c*/ ULONG AllocationsWithNoTag;
	/*00a0*/ ULONG AllocationsFailed;
	/*00a4*/ ULONG AllocationsFailedDeliberately;
	/*00a8*/ ULONGLONG LockedBytes;
	/*00b0*/ ULONGLONG PeakLockedBytes;
	/*00b8*/ ULONGLONG MappedLockedBytes;
	/*00c0*/ ULONGLONG PeakMappedLockedBytes;
	/*00c8*/ ULONGLONG MappedIoSpaceBytes;
	/*00d0*/ ULONGLONG PeakMappedIoSpaceBytes;
	/*00d8*/ ULONGLONG PagesForMdlBytes;
	/*00e0*/ ULONGLONG PeakPagesForMdlBytes;
	/*00e8*/ ULONGLONG ContiguousMemoryBytes;
	/*00f0*/ ULONGLONG PeakContiguousMemoryBytes;
	/*00f8*/ ULONG ExecutePoolTypes;
	/*00fc*/ ULONG ExecutePageProtections;
	/*0100*/ ULONG ExecutePageMappings;
	/*0104*/ ULONG ExecuteWriteSections;
	/*0108*/ ULONG SectionAlignmentFailures;
	/*010c*/ ULONG IATInExecutableSection;
	/*0110*/
};

struct _SYSTEM_VERIFIER_FAULTS_INFORMATION {
	/*0000*/ ULONG Probability;
	/*0004*/ ULONG MaxProbability;
	/*0008*/ _UNICODE_STRING PoolTags;
	/*0018*/ _UNICODE_STRING Applications;
	/*0028*/
};

struct _SYSTEM_VERIFIER_INFORMATION {
	
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG Level;
	/*0008*/ ULONG RuleClasses[0x2];
	/*0010*/ ULONG TriageContext;
	/*0014*/ <unnamed-type-u1> u1;
	/*0018*/ _UNICODE_STRING DriverName;
	/*0028*/ ULONG RaiseIrqls;
	/*002c*/ ULONG AcquireSpinLocks;
	/*0030*/ ULONG SynchronizeExecutions;
	/*0034*/ ULONG AllocationsAttempted;
	/*0038*/ ULONG AllocationsSucceeded;
	/*003c*/ ULONG AllocationsSucceededSpecialPool;
	/*0040*/ ULONG AllocationsWithNoTag;
	/*0044*/ ULONG TrimRequests;
	/*0048*/ ULONG Trims;
	/*004c*/ ULONG AllocationsFailed;
	/*0050*/ ULONG AllocationsFailedDeliberately;
	/*0054*/ ULONG Loads;
	/*0058*/ ULONG Unloads;
	/*005c*/ ULONG UnTrackedPool;
	/*0060*/ ULONG CurrentPagedPoolAllocations;
	/*0064*/ ULONG CurrentNonPagedPoolAllocations;
	/*0068*/ ULONG PeakPagedPoolAllocations;
	/*006c*/ ULONG PeakNonPagedPoolAllocations;
	/*0070*/ ULONGLONG PagedPoolUsageInBytes;
	/*0078*/ ULONGLONG NonPagedPoolUsageInBytes;
	/*0080*/ ULONGLONG PeakPagedPoolUsageInBytes;
	/*0088*/ ULONGLONG PeakNonPagedPoolUsageInBytes;
	/*0090*/
};

struct _SYSTEM_VERIFIER_INFORMATION_EX {
	/*0000*/ ULONG VerifyMode;
	/*0004*/ ULONG OptionChanges;
	/*0008*/ _UNICODE_STRING PreviousBucketName;
	/*0018*/ ULONG IrpCancelTimeoutMsec;
	/*001c*/ ULONG VerifierExtensionEnabled;
	/*0020*/ ULONG Reserved[0x1];
	/*0028*/
};

struct _SYSTEM_VERIFIER_ISSUE {
	/*0000*/ ULONGLONG IssueType;
	/*0008*/ void * Address;
	/*0010*/ ULONGLONG Parameters[0x2];
	/*0020*/
};

struct _SYSTEM_VERIFIER_TRIAGE_INFORMATION {
	/*0000*/ ULONG ActionTaken;
	/*0008*/ ULONGLONG CrashData[0x5];
	/*0030*/ ULONG VerifierMode;
	/*0034*/ ULONG VerifierFlags;
	/*0038*/ WCHAR VerifierTargets[0x100];
	/*0238*/
};

struct _SYSTEM_VHD_BOOT_INFORMATION {
	/*0000*/ UCHAR OsDiskIsVhd;
	/*0004*/ ULONG OsVhdFilePathOffset;
	/*0008*/ WCHAR OsVhdParentVolume[0x1];
	/*000c*/
};

struct _SYSTEM_VSM_PROTECTION_INFORMATION {
	/*0000*/ UCHAR DmaProtectionsAvailable;
	/*0001*/ UCHAR DmaProtectionsInUse;
	/*0002*/ UCHAR HardwareMbecAvailable;
	/*0003*/ UCHAR ApicVirtualizationAvailable;
	/*0004*/
};

struct _SYSTEM_WATCHDOG_TIMER_INFORMATION {
	/*0000*/ _WATCHDOG_INFORMATION_CLASS WdInfoClass;
	/*0004*/ ULONG DataValue;
	/*0008*/
};

struct _SYSTEM_WORKINGSET_ENTRY {
	/*0000*/ ULONG UniqueProcessId;
	/*0000*/ ULONG SessionId;
	/*0008*/ ULONGLONG WorkingSetPageCount;
	/*0010*/ ULONGLONG CommitPageCount;
	/*0018*/ ULONGLONG PagedPoolPageCount;
	/*0018*/ ULONGLONG VirtualSizeInPages;
	/*0020*/ ULONGLONG PrivateWorkingSetPageCount;
	/*0028*/
};

struct _SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION {
	/*0000*/ ULONGLONG WorkloadClass;
	/*0008*/ ULONGLONG CpuSets[0x1];
	/*0010*/
};

struct _SYSTEM_WRITE_CONSTRAINT_INFORMATION {
	/*0000*/ ULONG WriteConstraintPolicy;
	/*0004*/ ULONG Reserved;
	/*0008*/
};

struct _SYSTEM_XFG_FAILURE_INFORMATION {
	/*0000*/ void * ReturnAddress;
	/*0008*/ void * TargetAddress;
	/*0010*/ ULONG DispatchMode;
	/*0018*/ ULONGLONG XfgValue;
	/*0020*/
};

enum _SharedVirtualDiskHandleState {
	SharedVirtualDiskHandleStateNone = 0x0,
	SharedVirtualDiskHandleStateFileShared = 0x1,
	SharedVirtualDiskHandleStateHandleShared = 0x3
};

enum _SharedVirtualDiskSupportType {
	SharedVirtualDisksUnsupported = 0x0,
	SharedVirtualDisksSupported = 0x1,
	SharedVirtualDiskSnapshotsSupported = 0x3,
	SharedVirtualDiskCDPSnapshotsSupported = 0x7
};

struct _T2_SET_PARAMETERS_V0 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Reserved;
	/*0008*/ LONGLONG NoWakeTolerance;
	/*0010*/
};

enum _TABLE_SEARCH_RESULT {
	TableEmptyTree = 0x0,
	TableFoundNode = 0x1,
	TableInsertAsLeft = 0x2,
	TableInsertAsRight = 0x3
};

struct _TEB {
	/*0000*/ _NT_TIB NtTib;
	/*0038*/ void * EnvironmentPointer;
	/*0040*/ _CLIENT_ID ClientId;
	/*0050*/ void * ActiveRpcHandle;
	/*0058*/ void * ThreadLocalStoragePointer;
	/*0060*/ _PEB * ProcessEnvironmentBlock;
	/*0068*/ ULONG LastErrorValue;
	/*006c*/ ULONG CountOfOwnedCriticalSections;
	/*0070*/ void * CsrClientThread;
	/*0078*/ void * Win32ThreadInfo;
	/*0080*/ ULONG User32Reserved[0x1a];
	/*00e8*/ ULONG UserReserved[0x5];
	/*0100*/ void * WOW32Reserved;
	/*0108*/ ULONG CurrentLocale;
	/*010c*/ ULONG FpSoftwareStatusRegister;
	/*0110*/ void * ReservedForDebuggerInstrumentation[0x10];
	/*0190*/ void * SystemReserved1[0x1e];
	/*0280*/ CHAR PlaceholderCompatibilityMode;
	/*0281*/ UCHAR PlaceholderHydrationAlwaysExplicit;
	/*0282*/ CHAR PlaceholderReserved[0xa];
	/*028c*/ ULONG ProxiedProcessId;
	/*0290*/ _ACTIVATION_CONTEXT_STACK _ActivationStack;
	/*02b8*/ UCHAR WorkingOnBehalfTicket[0x8];
	/*02c0*/ LONG ExceptionCode;
	/*02c4*/ UCHAR Padding0[0x4];
	/*02c8*/ _ACTIVATION_CONTEXT_STACK * ActivationContextStackPointer;
	/*02d0*/ ULONGLONG InstrumentationCallbackSp;
	/*02d8*/ ULONGLONG InstrumentationCallbackPreviousPc;
	/*02e0*/ ULONGLONG InstrumentationCallbackPreviousSp;
	/*02e8*/ ULONG TxFsContext;
	/*02ec*/ UCHAR InstrumentationCallbackDisabled;
	/*02ed*/ UCHAR UnalignedLoadStoreExceptions;
	/*02ee*/ UCHAR Padding1[0x2];
	/*02f0*/ _GDI_TEB_BATCH GdiTebBatch;
	/*07d8*/ _CLIENT_ID RealClientId;
	/*07e8*/ void * GdiCachedProcessHandle;
	/*07f0*/ ULONG GdiClientPID;
	/*07f4*/ ULONG GdiClientTID;
	/*07f8*/ void * GdiThreadLocalInfo;
	/*0800*/ ULONGLONG Win32ClientInfo[0x3e];
	/*09f0*/ void * glDispatchTable[0xe9];
	/*1138*/ ULONGLONG glReserved1[0x1d];
	/*1220*/ void * glReserved2;
	/*1228*/ void * glSectionInfo;
	/*1230*/ void * glSection;
	/*1238*/ void * glTable;
	/*1240*/ void * glCurrentRC;
	/*1248*/ void * glContext;
	/*1250*/ ULONG LastStatusValue;
	/*1254*/ UCHAR Padding2[0x4];
	/*1258*/ _UNICODE_STRING StaticUnicodeString;
	/*1268*/ WCHAR StaticUnicodeBuffer[0x105];
	/*1472*/ UCHAR Padding3[0x6];
	/*1478*/ void * DeallocationStack;
	/*1480*/ void * TlsSlots[0x40];
	/*1680*/ _LIST_ENTRY TlsLinks;
	/*1690*/ void * Vdm;
	/*1698*/ void * ReservedForNtRpc;
	/*16a0*/ void * DbgSsReserved[0x2];
	/*16b0*/ ULONG HardErrorMode;
	/*16b4*/ UCHAR Padding4[0x4];
	/*16b8*/ void * Instrumentation[0xb];
	/*1710*/ _GUID ActivityId;
	/*1720*/ void * SubProcessTag;
	/*1728*/ void * PerflibData;
	/*1730*/ void * EtwTraceData;
	/*1738*/ void * WinSockData;
	/*1740*/ ULONG GdiBatchCount;
	/*1744*/ _PROCESSOR_NUMBER CurrentIdealProcessor;
	/*1744*/ ULONG IdealProcessorValue;
	/*1744*/ UCHAR ReservedPad0;
	/*1745*/ UCHAR ReservedPad1;
	/*1746*/ UCHAR ReservedPad2;
	/*1747*/ UCHAR IdealProcessor;
	/*1748*/ ULONG GuaranteedStackBytes;
	/*174c*/ UCHAR Padding5[0x4];
	/*1750*/ void * ReservedForPerf;
	/*1758*/ void * ReservedForOle;
	/*1760*/ ULONG WaitingOnLoaderLock;
	/*1764*/ UCHAR Padding6[0x4];
	/*1768*/ void * SavedPriorityState;
	/*1770*/ ULONGLONG ReservedForCodeCoverage;
	/*1778*/ void * ThreadPoolData;
	/*1780*/ void * * TlsExpansionSlots;
	/*1788*/ _CHPEV2_CPUAREA_INFO * ChpeV2CpuAreaInfo;
	/*1790*/ void * Unused;
	/*1798*/ ULONG MuiGeneration;
	/*179c*/ ULONG IsImpersonating;
	/*17a0*/ void * NlsCache;
	/*17a8*/ void * pShimData;
	/*17b0*/ ULONG HeapData;
	/*17b4*/ UCHAR Padding7[0x4];
	/*17b8*/ void * CurrentTransactionHandle;
	/*17c0*/ _TEB_ACTIVE_FRAME * ActiveFrame;
	/*17c8*/ void * FlsData;
	/*17d0*/ void * PreferredLanguages;
	/*17d8*/ void * UserPrefLanguages;
	/*17e0*/ void * MergedPrefLanguages;
	/*17e8*/ ULONG MuiImpersonation;
	/*17ec*/ USHORT volatile CrossTebFlags;
	/*17ec*/ USHORT SpareCrossTebBits : 16; // 0xffff;
	/*17ee*/ USHORT SameTebFlags;
	/*17ee*/ USHORT SafeThunkCall : 01; // 0x0001;
	/*17ee*/ USHORT InDebugPrint : 01; // 0x0002;
	/*17ee*/ USHORT HasFiberData : 01; // 0x0004;
	/*17ee*/ USHORT SkipThreadAttach : 01; // 0x0008;
	/*17ee*/ USHORT WerInShipAssertCode : 01; // 0x0010;
	/*17ee*/ USHORT RanProcessInit : 01; // 0x0020;
	/*17ee*/ USHORT ClonedThread : 01; // 0x0040;
	/*17ee*/ USHORT SuppressDebugMsg : 01; // 0x0080;
	/*17ee*/ USHORT DisableUserStackWalk : 01; // 0x0100;
	/*17ee*/ USHORT RtlExceptionAttached : 01; // 0x0200;
	/*17ee*/ USHORT InitialThread : 01; // 0x0400;
	/*17ee*/ USHORT SessionAware : 01; // 0x0800;
	/*17ee*/ USHORT LoadOwner : 01; // 0x1000;
	/*17ee*/ USHORT LoaderWorker : 01; // 0x2000;
	/*17ee*/ USHORT SkipLoaderInit : 01; // 0x4000;
	/*17ee*/ USHORT SkipFileAPIBrokering : 01; // 0x8000;
	/*17f0*/ void * TxnScopeEnterCallback;
	/*17f8*/ void * TxnScopeExitCallback;
	/*1800*/ void * TxnScopeContext;
	/*1808*/ ULONG LockCount;
	/*180c*/ LONG WowTebOffset;
	/*1810*/ void * ResourceRetValue;
	/*1818*/ void * ReservedForWdf;
	/*1820*/ ULONGLONG ReservedForCrt;
	/*1828*/ _GUID EffectiveContainerId;
	/*1838*/ ULONGLONG LastSleepCounter;
	/*1840*/ ULONG SpinCallCount;
	/*1844*/ UCHAR Padding8[0x4];
	/*1848*/ ULONGLONG ExtendedFeatureDisableMask;
	/*1850*/
};

struct _TEB_ACTIVE_FRAME {
	/*0000*/ ULONG Flags;
	/*0008*/ _TEB_ACTIVE_FRAME * Previous;
	/*0010*/ _TEB_ACTIVE_FRAME_CONTEXT const * Context;
	/*0018*/
};

struct _TEB_ACTIVE_FRAME_CONTEXT {
	/*0000*/ ULONG Flags;
	/*0008*/ CHAR const * FrameName;
	/*0010*/
};

struct _TEB_ACTIVE_FRAME_CONTEXT_EX {
	/*0000*/ _TEB_ACTIVE_FRAME_CONTEXT BasicContext;
	/*0010*/ CHAR const * SourceLocation;
	/*0018*/
};

struct _TEB_ACTIVE_FRAME_EX {
	/*0000*/ _TEB_ACTIVE_FRAME BasicFrame;
	/*0018*/ void * ExtensionIdentifier;
	/*0020*/
};

enum _THDTYPE {
	THDTYPE_BLOCKMESSAGES = 0x0,
	THDTYPE_PROCESSMESSAGES = 0x1
};

enum _THREADINFOCLASS {
	ThreadBasicInformation = 0x0,
	ThreadTimes = 0x1,
	ThreadPriority = 0x2,
	ThreadBasePriority = 0x3,
	ThreadAffinityMask = 0x4,
	ThreadImpersonationToken = 0x5,
	ThreadDescriptorTableEntry = 0x6,
	ThreadEnableAlignmentFaultFixup = 0x7,
	ThreadEventPair_Reusable = 0x8,
	ThreadQuerySetWin32StartAddress = 0x9,
	ThreadZeroTlsCell = 0xa,
	ThreadPerformanceCount = 0xb,
	ThreadAmILastThread = 0xc,
	ThreadIdealProcessor = 0xd,
	ThreadPriorityBoost = 0xe,
	ThreadSetTlsArrayAddress = 0xf,
	ThreadIsIoPending = 0x10,
	ThreadHideFromDebugger = 0x11,
	ThreadBreakOnTermination = 0x12,
	ThreadSwitchLegacyState = 0x13,
	ThreadIsTerminated = 0x14,
	ThreadLastSystemCall = 0x15,
	ThreadIoPriority = 0x16,
	ThreadCycleTime = 0x17,
	ThreadPagePriority = 0x18,
	ThreadActualBasePriority = 0x19,
	ThreadTebInformation = 0x1a,
	ThreadCSwitchMon = 0x1b,
	ThreadCSwitchPmu = 0x1c,
	ThreadWow64Context = 0x1d,
	ThreadGroupInformation = 0x1e,
	ThreadUmsInformation = 0x1f,
	ThreadCounterProfiling = 0x20,
	ThreadIdealProcessorEx = 0x21,
	ThreadCpuAccountingInformation = 0x22,
	ThreadSuspendCount = 0x23,
	ThreadHeterogeneousCpuPolicy = 0x24,
	ThreadContainerId = 0x25,
	ThreadNameInformation = 0x26,
	ThreadSelectedCpuSets = 0x27,
	ThreadSystemThreadInformation = 0x28,
	ThreadActualGroupAffinity = 0x29,
	ThreadDynamicCodePolicyInfo = 0x2a,
	ThreadExplicitCaseSensitivity = 0x2b,
	ThreadWorkOnBehalfTicket = 0x2c,
	ThreadSubsystemInformation = 0x2d,
	ThreadDbgkWerReportActive = 0x2e,
	ThreadAttachContainer = 0x2f,
	ThreadManageWritesToExecutableMemory = 0x30,
	ThreadPowerThrottlingState = 0x31,
	ThreadWorkloadClass = 0x32,
	ThreadCreateStateChange = 0x33,
	ThreadApplyStateChange = 0x34,
	ThreadStrongerBadHandleChecks = 0x35,
	ThreadEffectiveIoPriority = 0x36,
	ThreadEffectivePagePriority = 0x37,
	MaxThreadInfoClass = 0x38
};

struct _THREAD_BASIC_INFORMATION {
	/*0000*/ LONG ExitStatus;
	/*0008*/ _TEB * TebBaseAddress;
	/*0010*/ _CLIENT_ID ClientId;
	/*0020*/ ULONGLONG AffinityMask;
	/*0028*/ LONG Priority;
	/*002c*/ LONG BasePriority;
	/*0030*/
};

struct _THREAD_CYCLE_TIME_INFORMATION {
	/*0000*/ ULONGLONG AccumulatedCycles;
	/*0008*/ ULONGLONG CurrentCycleCount;
	/*0010*/
};

struct _THREAD_ENERGY_VALUES {
	/*0000*/ ULONGLONG Cycles[0x4][0x2];
	/*0040*/ ULONGLONG AttributedCycles[0x4][0x2];
	/*0080*/ ULONGLONG WorkOnBehalfCycles[0x4][0x2];
	/*00c0*/ _TIMELINE_BITMAP CpuTimeline;
	/*00c8*/
};

enum _THREAD_INFORMATION_CLASS {
	ThreadMemoryPriority = 0x0,
	ThreadAbsoluteCpuPriority = 0x1,
	ThreadDynamicCodePolicy = 0x2,
	ThreadPowerThrottling = 0x3,
	ThreadInformationClassMax = 0x4
};

struct _THREAD_LAST_SYSCALL_INFORMATION {
	/*0000*/ void * FirstArgument;
	/*0008*/ USHORT SystemCallNumber;
	/*000a*/ USHORT Pad[0x3];
	/*0010*/ ULONGLONG WaitTime;
	/*0018*/
};

struct _THREAD_NAME_INFORMATION {
	/*0000*/ _UNICODE_STRING ThreadName;
	/*0010*/
};

struct _THREAD_PERFORMANCE_DATA {
	/*0000*/ USHORT Size;
	/*0002*/ USHORT Version;
	/*0004*/ _PROCESSOR_NUMBER ProcessorNumber;
	/*0008*/ ULONG ContextSwitches;
	/*000c*/ ULONG HwCountersCount;
	/*0010*/ ULONGLONG volatile UpdateCount;
	/*0018*/ ULONGLONG WaitReasonBitMap;
	/*0020*/ ULONGLONG HardwareCounters;
	/*0028*/ _COUNTER_READING CycleTime;
	/*0040*/ _COUNTER_READING HwCounters[0x10];
	/*01c0*/
};

struct _THREAD_POWER_THROTTLING_STATE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG ControlMask;
	/*0008*/ ULONG StateMask;
	/*000c*/
};

struct _THREAD_PROFILING_INFORMATION {
	/*0000*/ ULONGLONG HardwareCounters;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG Enable;
	/*0010*/ _THREAD_PERFORMANCE_DATA * PerformanceData;
	/*0018*/
};

enum _THREAD_STATE_CHANGE_TYPE {
	ThreadStateChangeSuspend = 0x0,
	ThreadStateChangeResume = 0x1,
	ThreadStateChangeMax = 0x2
};

struct _THREAD_TEB_INFORMATION {
	/*0000*/ void * TebInformation;
	/*0008*/ ULONG TebOffset;
	/*000c*/ ULONG BytesToRead;
	/*0010*/
};

struct _THREAD_TLS_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0008*/ void * NewTlsData;
	/*0008*/ void * OldTlsData;
	/*0010*/ void * ThreadId;
	/*0018*/
};

struct _THREAD_UMS_INFORMATION {
	/*0000*/ _THREAD_UMS_INFORMATION_COMMAND Command;
	/*0008*/ _RTL_UMS_COMPLETION_LIST * CompletionList;
	/*0010*/ _RTL_UMS_CONTEXT * UmsContext;
	/*0008*/ ULONG Flags;
	/*0008*/ ULONG IsUmsSchedulerThread : 01; // 0x00000001;
	/*0008*/ ULONG IsUmsWorkerThread : 01; // 0x00000002;
	/*0018*/
};

enum _THREAD_UMS_INFORMATION_COMMAND {
	UmsInformationCommandInvalid = 0x0,
	UmsInformationCommandAttach = 0x1,
	UmsInformationCommandDetach = 0x2,
	UmsInformationCommandQuery = 0x3
};

enum _THREAD_WORKLOAD_CLASS {
	ThreadWorkloadClassDefault = 0x0,
	ThreadWorkloadClassGraphics = 0x1,
	MaxThreadWorkloadClass = 0x2
};

union _TIMELINE_BITMAP {
	/*0000*/ ULONGLONG Value;
	/*0000*/ ULONG EndTime;
	/*0004*/ ULONG Bitmap;
	/*0008*/
};

struct _TIMER_BASIC_INFORMATION {
	/*0000*/ _LARGE_INTEGER RemainingTime;
	/*0008*/ UCHAR TimerState;
	/*0010*/
};

enum _TIMER_INFORMATION_CLASS {
	TimerBasicInformation = 0x0
};

struct _TIMER_SET_COALESCABLE_TIMER_INFO {
	/*0000*/ _LARGE_INTEGER DueTime;
	/*0008*/ void (* TimerApcRoutine)( void * , ULONG , LONG );
	/*0010*/ void * TimerContext;
	/*0018*/ _COUNTED_REASON_CONTEXT * WakeContext;
	/*0020*/ ULONG Period;
	/*0024*/ ULONG TolerableDelay;
	/*0028*/ UCHAR * PreviousState;
	/*0030*/
};

enum _TIMER_SET_INFORMATION_CLASS {
	TimerSetCoalescableTimer = 0x0,
	MaxTimerInfoClass = 0x1
};

enum _TIMER_TYPE {
	NotificationTimer = 0x0,
	SynchronizationTimer = 0x1
};

struct _TIME_DYNAMIC_ZONE_INFORMATION {
	/*0000*/ LONG Bias;
	/*0004*/ WCHAR StandardName[0x20];
	/*0044*/ _SYSTEMTIME StandardDate;
	/*0054*/ LONG StandardBias;
	/*0058*/ WCHAR DaylightName[0x20];
	/*0098*/ _SYSTEMTIME DaylightDate;
	/*00a8*/ LONG DaylightBias;
	/*00ac*/ WCHAR TimeZoneKeyName[0x80];
	/*01ac*/ UCHAR DynamicDaylightTimeDisabled;
	/*01b0*/
};

struct _TIME_FIELDS {
	/*0000*/ SHORT Year;
	/*0002*/ SHORT Month;
	/*0004*/ SHORT Day;
	/*0006*/ SHORT Hour;
	/*0008*/ SHORT Minute;
	/*000a*/ SHORT Second;
	/*000c*/ SHORT Milliseconds;
	/*000e*/ SHORT Weekday;
	/*0010*/
};

struct _TIME_ZONE_INFORMATION {
	/*0000*/ LONG Bias;
	/*0004*/ WCHAR StandardName[0x20];
	/*0044*/ _SYSTEMTIME StandardDate;
	/*0054*/ LONG StandardBias;
	/*0058*/ WCHAR DaylightName[0x20];
	/*0098*/ _SYSTEMTIME DaylightDate;
	/*00a8*/ LONG DaylightBias;
	/*00ac*/
};

struct _TOKEN_ACCESS_INFORMATION {
	/*0000*/ _SID_AND_ATTRIBUTES_HASH * SidHash;
	/*0008*/ _SID_AND_ATTRIBUTES_HASH * RestrictedSidHash;
	/*0010*/ _TOKEN_PRIVILEGES * Privileges;
	/*0018*/ _LUID AuthenticationId;
	/*0020*/ _TOKEN_TYPE TokenType;
	/*0024*/ _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	/*0028*/ _TOKEN_MANDATORY_POLICY MandatoryPolicy;
	/*002c*/ ULONG Flags;
	/*0030*/ ULONG AppContainerNumber;
	/*0038*/ void * PackageSid;
	/*0040*/ _SID_AND_ATTRIBUTES_HASH * CapabilitiesHash;
	/*0048*/ void * TrustLevelSid;
	/*0050*/ void * SecurityAttributes;
	/*0058*/
};

struct _TOKEN_APPCONTAINER_INFORMATION {
	/*0000*/ void * TokenAppContainer;
	/*0008*/
};

struct _TOKEN_AUDIT_POLICY {
	/*0000*/ UCHAR PerUserPolicy[0x1e];
	/*001e*/
};

struct _TOKEN_BNO_ISOLATION_INFORMATION {
	/*0000*/ WCHAR * IsolationPrefix;
	/*0008*/ UCHAR IsolationEnabled;
	/*0010*/
};

struct _TOKEN_CONTROL {
	/*0000*/ _LUID TokenId;
	/*0008*/ _LUID AuthenticationId;
	/*0010*/ _LUID ModifiedId;
	/*0018*/ _TOKEN_SOURCE TokenSource;
	/*0028*/
};

struct _TOKEN_DEFAULT_DACL {
	/*0000*/ _ACL * DefaultDacl;
	/*0008*/
};

struct _TOKEN_DEVICE_CLAIMS {
	/*0000*/ void * DeviceClaims;
	/*0008*/
};

struct _TOKEN_ELEVATION {
	/*0000*/ ULONG TokenIsElevated;
	/*0004*/
};

enum _TOKEN_ELEVATION_TYPE {
	TokenElevationTypeDefault = 0x1,
	TokenElevationTypeFull = 0x2,
	TokenElevationTypeLimited = 0x3
};

struct _TOKEN_GROUPS {
	/*0000*/ ULONG GroupCount;
	/*0008*/ _SID_AND_ATTRIBUTES Groups[0x1];
	/*0018*/
};

struct _TOKEN_GROUPS_AND_PRIVILEGES {
	/*0000*/ ULONG SidCount;
	/*0004*/ ULONG SidLength;
	/*0008*/ _SID_AND_ATTRIBUTES * Sids;
	/*0010*/ ULONG RestrictedSidCount;
	/*0014*/ ULONG RestrictedSidLength;
	/*0018*/ _SID_AND_ATTRIBUTES * RestrictedSids;
	/*0020*/ ULONG PrivilegeCount;
	/*0024*/ ULONG PrivilegeLength;
	/*0028*/ _LUID_AND_ATTRIBUTES * Privileges;
	/*0030*/ _LUID AuthenticationId;
	/*0038*/
};

enum _TOKEN_INFORMATION_CLASS {
	TokenUser = 0x1,
	TokenGroups = 0x2,
	TokenPrivileges = 0x3,
	TokenOwner = 0x4,
	TokenPrimaryGroup = 0x5,
	TokenDefaultDacl = 0x6,
	TokenSource = 0x7,
	TokenType = 0x8,
	TokenImpersonationLevel = 0x9,
	TokenStatistics = 0xa,
	TokenRestrictedSids = 0xb,
	TokenSessionId = 0xc,
	TokenGroupsAndPrivileges = 0xd,
	TokenSessionReference = 0xe,
	TokenSandBoxInert = 0xf,
	TokenAuditPolicy = 0x10,
	TokenOrigin = 0x11,
	TokenElevationType = 0x12,
	TokenLinkedToken = 0x13,
	TokenElevation = 0x14,
	TokenHasRestrictions = 0x15,
	TokenAccessInformation = 0x16,
	TokenVirtualizationAllowed = 0x17,
	TokenVirtualizationEnabled = 0x18,
	TokenIntegrityLevel = 0x19,
	TokenUIAccess = 0x1a,
	TokenMandatoryPolicy = 0x1b,
	TokenLogonSid = 0x1c,
	TokenIsAppContainer = 0x1d,
	TokenCapabilities = 0x1e,
	TokenAppContainerSid = 0x1f,
	TokenAppContainerNumber = 0x20,
	TokenUserClaimAttributes = 0x21,
	TokenDeviceClaimAttributes = 0x22,
	TokenRestrictedUserClaimAttributes = 0x23,
	TokenRestrictedDeviceClaimAttributes = 0x24,
	TokenDeviceGroups = 0x25,
	TokenRestrictedDeviceGroups = 0x26,
	TokenSecurityAttributes = 0x27,
	TokenIsRestricted = 0x28,
	TokenProcessTrustLevel = 0x29,
	TokenPrivateNameSpace = 0x2a,
	TokenSingletonAttributes = 0x2b,
	TokenBnoIsolation = 0x2c,
	TokenChildProcessFlags = 0x2d,
	TokenIsLessPrivilegedAppContainer = 0x2e,
	TokenIsSandboxed = 0x2f,
	TokenIsAppSilo = 0x30,
	MaxTokenInfoClass = 0x31
};

struct _TOKEN_LINKED_TOKEN {
	/*0000*/ void * LinkedToken;
	/*0008*/
};

struct _TOKEN_MANDATORY_LABEL {
	/*0000*/ _SID_AND_ATTRIBUTES Label;
	/*0010*/
};

struct _TOKEN_MANDATORY_POLICY {
	/*0000*/ ULONG Policy;
	/*0004*/
};

struct _TOKEN_ORIGIN {
	/*0000*/ _LUID OriginatingLogonSession;
	/*0008*/
};

struct _TOKEN_OWNER {
	/*0000*/ void * Owner;
	/*0008*/
};

struct _TOKEN_PRIMARY_GROUP {
	/*0000*/ void * PrimaryGroup;
	/*0008*/
};

struct _TOKEN_PRIVILEGES {
	/*0000*/ ULONG PrivilegeCount;
	/*0004*/ _LUID_AND_ATTRIBUTES Privileges[0x1];
	/*0010*/
};

struct _TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION {
	/*0000*/ _TOKEN_SECURITY_ATTRIBUTES_INFORMATION * Attributes;
	/*0008*/ _TOKEN_SECURITY_ATTRIBUTE_OPERATION * Operations;
	/*0010*/
};

struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION {
	
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG AttributeCount;
	/*0008*/ <unnamed-type-Attribute> Attribute;
	/*0010*/
};

struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE {
	/*0000*/ ULONGLONG Version;
	/*0008*/ _UNICODE_STRING Name;
	/*0018*/
};

struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
	/*0000*/ void * pValue;
	/*0008*/ ULONG ValueLength;
	/*0010*/
};

enum _TOKEN_SECURITY_ATTRIBUTE_OPERATION {
	TOKEN_SECURITY_ATTRIBUTE_OPERATION_NONE = 0x0,
	TOKEN_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = 0x1,
	TOKEN_SECURITY_ATTRIBUTE_OPERATION_ADD = 0x2,
	TOKEN_SECURITY_ATTRIBUTE_OPERATION_DELETE = 0x3,
	TOKEN_SECURITY_ATTRIBUTE_OPERATION_REPLACE = 0x4
};

struct _TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1 {
	
	/*0000*/ ULONG Name;
	/*0004*/ USHORT ValueType;
	/*0006*/ USHORT Reserved;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG ValueCount;
	/*0010*/ <unnamed-type-Values> Values;
	/*0014*/
};

struct _TOKEN_SECURITY_ATTRIBUTE_V1 {
	
	/*0000*/ _UNICODE_STRING Name;
	/*0010*/ USHORT ValueType;
	/*0012*/ USHORT Reserved;
	/*0014*/ ULONG Flags;
	/*0018*/ ULONG ValueCount;
	/*0020*/ <unnamed-type-Values> Values;
	/*0028*/
};

struct _TOKEN_SID_INFORMATION {
	/*0000*/ void * Sid;
	/*0008*/
};

struct _TOKEN_SOURCE {
	/*0000*/ CHAR SourceName[0x8];
	/*0008*/ _LUID SourceIdentifier;
	/*0010*/
};

struct _TOKEN_STATISTICS {
	/*0000*/ _LUID TokenId;
	/*0008*/ _LUID AuthenticationId;
	/*0010*/ _LARGE_INTEGER ExpirationTime;
	/*0018*/ _TOKEN_TYPE TokenType;
	/*001c*/ _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	/*0020*/ ULONG DynamicCharged;
	/*0024*/ ULONG DynamicAvailable;
	/*0028*/ ULONG GroupCount;
	/*002c*/ ULONG PrivilegeCount;
	/*0030*/ _LUID ModifiedId;
	/*0038*/
};

enum _TOKEN_TYPE {
	TokenPrimary = 0x1,
	TokenImpersonation = 0x2
};

struct _TOKEN_USER {
	/*0000*/ _SID_AND_ATTRIBUTES User;
	/*0010*/
};

struct _TOKEN_USER_CLAIMS {
	/*0000*/ void * UserClaims;
	/*0008*/
};

struct _TPP_THREAD_DATA_CALLBACK;

struct _TP_ALPC;

struct _TP_CALLBACK_ENVIRON_V3 {
	
	/*0000*/ ULONG Version;
	/*0008*/ _TP_POOL * Pool;
	/*0010*/ _TP_CLEANUP_GROUP * CleanupGroup;
	/*0018*/ void (* CleanupGroupCancelCallback)( void * , void * );
	/*0020*/ void * RaceDll;
	/*0028*/ _ACTIVATION_CONTEXT * ActivationContext;
	/*0030*/ void (* FinalizationCallback)( _TP_CALLBACK_INSTANCE * , void * );
	/*0038*/ <unnamed-type-u> u;
	/*003c*/ _TP_CALLBACK_PRIORITY CallbackPriority;
	/*0040*/ ULONG Size;
	/*0048*/
};

struct _TP_CALLBACK_INSTANCE;

enum _TP_CALLBACK_PRIORITY {
	TP_CALLBACK_PRIORITY_HIGH = 0x0,
	TP_CALLBACK_PRIORITY_NORMAL = 0x1,
	TP_CALLBACK_PRIORITY_LOW = 0x2,
	TP_CALLBACK_PRIORITY_INVALID = 0x3,
	TP_CALLBACK_PRIORITY_COUNT = 0x3
};

struct _TP_CLEANUP_GROUP;

enum _TP_DEBUG_CLASS {
	TP_DEBUG_CLASS_POOL = 0x0
};

struct _TP_DEBUG_FREE_INFO {
	/*0000*/ ULONG FreeListSize;
	/*0004*/
};

struct _TP_DIRECT {
	/*0000*/ _TP_TASK Task;
	/*0020*/ ULONGLONG Lock;
	/*0028*/ _LIST_ENTRY IoCompletionInformationList;
	/*0038*/ void (* Callback)( _TP_CALLBACK_INSTANCE * , _TP_DIRECT * , void * , _IO_STATUS_BLOCK * );
	/*0040*/ ULONG NumaNode;
	/*0044*/ UCHAR IdealProcessor;
	/*0048*/
};

struct _TP_IO;

struct _TP_JOB;

enum _TP_LOG_LEVEL {
	TP_LOG_LEVEL_ERROR = 0x0,
	TP_LOG_LEVEL_WARNING = 0x1,
	TP_LOG_LEVEL_INFO = 0x2,
	TP_LOG_LEVEL_TRACE_ENTER = 0x3,
	TP_LOG_LEVEL_TRACE_LEAVE = 0x4
};

struct _TP_POOL;

struct _TP_POOL_STACK_INFORMATION {
	/*0000*/ ULONGLONG StackReserve;
	/*0008*/ ULONGLONG StackCommit;
	/*0010*/
};

struct _TP_TASK {
	/*0000*/ _TP_TASK_CALLBACKS const * Callbacks;
	/*0008*/ ULONG NumaNode;
	/*000c*/ UCHAR IdealProcessor;
	/*0010*/ _LIST_ENTRY ListEntry;
	/*0020*/
};

struct _TP_TASK_CALLBACKS {
	/*0000*/ void (* ExecuteCallback)( _TP_CALLBACK_INSTANCE * , _TP_TASK * );
	/*0008*/ void (* Unposted)( _TP_TASK * , _TP_POOL * );
	/*0010*/
};

struct _TP_TIMER;

enum _TP_TRACE_TYPE {
	TpTraceThreadPriority = 0x1,
	TpTraceThreadAffinity = 0x2,
	MaxTpTraceType = 0x3
};

struct _TP_WAIT;

struct _TP_WORK;

struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
	/*0000*/ _GUID TmIdentity;
	/*0010*/ _LARGE_INTEGER VirtualClock;
	/*0018*/
};

enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
	TransactionManagerBasicInformation = 0x0,
	TransactionManagerLogInformation = 0x1,
	TransactionManagerLogPathInformation = 0x2,
	TransactionManagerRecoveryInformation = 0x4,
	TransactionManagerOnlineProbeInformation = 0x3,
	TransactionManagerOldestTransactionInformation = 0x5
};

struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
	/*0000*/ ULONG LogPathLength;
	/*0004*/ WCHAR LogPath[0x1];
	/*0008*/
};

struct _TRANSACTIONMANAGER_LOG_INFORMATION {
	/*0000*/ _GUID LogIdentity;
	/*0010*/
};

struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
	/*0000*/ _GUID OldestTransactionGuid;
	/*0010*/
};

struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
	/*0000*/ ULONGLONG LastRecoveredLsn;
	/*0008*/
};

struct _TRANSACTION_BASIC_INFORMATION {
	/*0000*/ _GUID TransactionId;
	/*0010*/ ULONG State;
	/*0014*/ ULONG Outcome;
	/*0018*/
};

struct _TRANSACTION_BIND_INFORMATION {
	/*0000*/ void * TmHandle;
	/*0008*/
};

struct _TRANSACTION_ENLISTMENTS_INFORMATION {
	/*0000*/ ULONG NumberOfEnlistments;
	/*0004*/ _TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[0x1];
	/*0024*/
};

struct _TRANSACTION_ENLISTMENT_PAIR {
	/*0000*/ _GUID EnlistmentId;
	/*0010*/ _GUID ResourceManagerId;
	/*0020*/
};

enum _TRANSACTION_INFORMATION_CLASS {
	TransactionBasicInformation = 0x0,
	TransactionPropertiesInformation = 0x1,
	TransactionEnlistmentInformation = 0x2,
	TransactionSuperiorEnlistmentInformation = 0x3,
	TransactionBindInformation = 0x4,
	TransactionDTCPrivateInformation = 0x5
};

struct _TRANSACTION_LIST_ENTRY {
	/*0000*/ _GUID UOW;
	/*0010*/
};

struct _TRANSACTION_LIST_INFORMATION {
	/*0000*/ ULONG NumberOfTransactions;
	/*0004*/ _TRANSACTION_LIST_ENTRY TransactionInformation[0x1];
	/*0014*/
};

struct _TRANSACTION_NOTIFICATION {
	/*0000*/ void * TransactionKey;
	/*0008*/ ULONG TransactionNotification;
	/*0010*/ _LARGE_INTEGER TmVirtualClock;
	/*0018*/ ULONG ArgumentLength;
	/*0020*/
};

struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
	/*0000*/ ULONG MarshalCookie;
	/*0004*/ _GUID UOW;
	/*0014*/
};

struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
	/*0000*/ ULONG PropagationCookie;
	/*0004*/ _GUID UOW;
	/*0014*/ _GUID TmIdentity;
	/*0024*/ ULONG BufferLength;
	/*0028*/
};

struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
	/*0000*/ _GUID EnlistmentId;
	/*0010*/ _GUID UOW;
	/*0020*/
};

struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
	/*0000*/ ULONG SavepointId;
	/*0004*/
};

struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
	/*0000*/ _GUID TmIdentity;
	/*0010*/ ULONG Flags;
	/*0014*/
};

enum _TRANSACTION_OUTCOME {
	TransactionOutcomeUndetermined = 0x1,
	TransactionOutcomeCommitted = 0x2,
	TransactionOutcomeAborted = 0x3
};

struct _TRANSACTION_PROPERTIES_INFORMATION {
	/*0000*/ ULONG IsolationLevel;
	/*0004*/ ULONG IsolationFlags;
	/*0008*/ _LARGE_INTEGER Timeout;
	/*0010*/ ULONG Outcome;
	/*0014*/ ULONG DescriptionLength;
	/*0018*/ WCHAR Description[0x1];
	/*0020*/
};

enum _TRANSACTION_STATE {
	TransactionStateNormal = 0x1,
	TransactionStateIndoubt = 0x2,
	TransactionStateCommittedNotify = 0x3
};

struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
	/*0000*/ _TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
	/*0020*/
};

struct _TRIVERTEX {
	/*0000*/ LONG x;
	/*0004*/ LONG y;
	/*0008*/ USHORT Red;
	/*000a*/ USHORT Green;
	/*000c*/ USHORT Blue;
	/*000e*/ USHORT Alpha;
	/*0010*/
};

struct _TXFS_CREATE_MINIVERSION_INFO {
	/*0000*/ USHORT StructureVersion;
	/*0002*/ USHORT StructureLength;
	/*0004*/ ULONG BaseVersion;
	/*0008*/ USHORT MiniVersion;
	/*000c*/
};

struct _TXFS_GET_METADATA_INFO_OUT {
	
	/*0000*/ <unnamed-type-TxfFileId> TxfFileId;
	/*0010*/ _GUID LockingTransaction;
	/*0020*/ ULONGLONG LastLsn;
	/*0028*/ ULONG TransactionState;
	/*0030*/
};

struct _TXFS_GET_TRANSACTED_VERSION {
	/*0000*/ ULONG ThisBaseVersion;
	/*0004*/ ULONG LatestVersion;
	/*0008*/ USHORT ThisMiniVersion;
	/*000a*/ USHORT FirstMiniVersion;
	/*000c*/ USHORT LatestMiniVersion;
	/*0010*/
};

struct _TXFS_LIST_TRANSACTIONS {
	/*0000*/ ULONGLONG NumberOfTransactions;
	/*0008*/ ULONGLONG BufferSizeRequired;
	/*0010*/
};

struct _TXFS_LIST_TRANSACTIONS_ENTRY {
	/*0000*/ _GUID TransactionId;
	/*0010*/ ULONG TransactionState;
	/*0014*/ ULONG Reserved1;
	/*0018*/ ULONG Reserved2;
	/*0020*/ LONGLONG Reserved3;
	/*0028*/
};

struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {
	/*0000*/ _GUID KtmTransaction;
	/*0010*/ ULONGLONG NumberOfFiles;
	/*0018*/ ULONGLONG BufferSizeRequired;
	/*0020*/ ULONGLONG Offset;
	/*0028*/
};

struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {
	/*0000*/ ULONGLONG Offset;
	/*0008*/ ULONG NameFlags;
	/*0010*/ LONGLONG FileId;
	/*0018*/ ULONG Reserved1;
	/*001c*/ ULONG Reserved2;
	/*0020*/ LONGLONG Reserved3;
	/*0028*/ WCHAR FileName[0x1];
	/*0030*/
};

struct _TXFS_MODIFY_RM {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG LogContainerCountMax;
	/*0008*/ ULONG LogContainerCountMin;
	/*000c*/ ULONG LogContainerCount;
	/*0010*/ ULONG LogGrowthIncrement;
	/*0014*/ ULONG LogAutoShrinkPercentage;
	/*0018*/ ULONGLONG Reserved;
	/*0020*/ USHORT LoggingMode;
	/*0028*/
};

struct _TXFS_QUERY_RM_INFORMATION {
	/*0000*/ ULONG BytesRequired;
	/*0008*/ ULONGLONG TailLsn;
	/*0010*/ ULONGLONG CurrentLsn;
	/*0018*/ ULONGLONG ArchiveTailLsn;
	/*0020*/ ULONGLONG LogContainerSize;
	/*0028*/ _LARGE_INTEGER HighestVirtualClock;
	/*0030*/ ULONG LogContainerCount;
	/*0034*/ ULONG LogContainerCountMax;
	/*0038*/ ULONG LogContainerCountMin;
	/*003c*/ ULONG LogGrowthIncrement;
	/*0040*/ ULONG LogAutoShrinkPercentage;
	/*0044*/ ULONG Flags;
	/*0048*/ USHORT LoggingMode;
	/*004a*/ USHORT Reserved;
	/*004c*/ ULONG RmState;
	/*0050*/ ULONGLONG LogCapacity;
	/*0058*/ ULONGLONG LogFree;
	/*0060*/ ULONGLONG TopsSize;
	/*0068*/ ULONGLONG TopsUsed;
	/*0070*/ ULONGLONG TransactionCount;
	/*0078*/ ULONGLONG OnePCCount;
	/*0080*/ ULONGLONG TwoPCCount;
	/*0088*/ ULONGLONG NumberLogFileFull;
	/*0090*/ ULONGLONG OldestTransactionAge;
	/*0098*/ _GUID RMName;
	/*00a8*/ ULONG TmLogPathOffset;
	/*00b0*/
};

struct _TXFS_READ_BACKUP_INFORMATION_OUT {
	/*0000*/ ULONG BufferLength;
	/*0000*/ UCHAR Buffer[0x1];
	/*0004*/
};

struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastVirtualClock;
	/*0008*/ ULONGLONG LastRedoLsn;
	/*0010*/ ULONGLONG HighestRecoveryLsn;
	/*0018*/ ULONG Flags;
	/*0020*/
};

struct _TXFS_SAVEPOINT_INFORMATION {
	/*0000*/ void * KtmTransaction;
	/*0008*/ ULONG ActionCode;
	/*000c*/ ULONG SavepointId;
	/*0010*/
};

struct _TXFS_START_RM_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0008*/ ULONGLONG LogContainerSize;
	/*0010*/ ULONG LogContainerCountMin;
	/*0014*/ ULONG LogContainerCountMax;
	/*0018*/ ULONG LogGrowthIncrement;
	/*001c*/ ULONG LogAutoShrinkPercentage;
	/*0020*/ ULONG TmLogPathOffset;
	/*0024*/ USHORT TmLogPathLength;
	/*0026*/ USHORT LoggingMode;
	/*0028*/ USHORT LogPathLength;
	/*002a*/ USHORT Reserved;
	/*002c*/ WCHAR LogPath[0x1];
	/*0030*/
};

struct _TXFS_TRANSACTION_ACTIVE_INFO {
	/*0000*/ UCHAR TransactionsActiveAtSnapshot;
	/*0001*/
};

struct _TXFS_WRITE_BACKUP_INFORMATION {
	/*0000*/ UCHAR Buffer[0x1];
	/*0001*/
};

struct _TypeDescriptor {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[];
	/*0010*/
};

union _ULARGE_INTEGER {
	
	/*0000*/ ULONG LowPart;
	/*0004*/ ULONG HighPart;
	/*0000*/ <unnamed-type-u> u;
	/*0000*/ ULONGLONG QuadPart;
	/*0008*/
};

struct _UMS_CREATE_THREAD_ATTRIBUTES {
	/*0000*/ ULONG UmsVersion;
	/*0008*/ _RTL_UMS_CONTEXT * RtlUmsContext;
	/*0008*/ void * UmsContext;
	/*0010*/ _RTL_UMS_COMPLETION_LIST * RtlUmsCompletionList;
	/*0010*/ void * UmsCompletionList;
	/*0018*/
};

struct _UMS_SCHEDULER_STARTUP_INFO {
	/*0000*/ ULONG UmsVersion;
	/*0008*/ void * CompletionList;
	/*0010*/ void (* SchedulerProc)( _RTL_UMS_SCHEDULER_REASON , ULONGLONG , void * );
	/*0018*/ void * SchedulerParam;
	/*0020*/
};

struct _UMS_SYSTEM_THREAD_INFORMATION {
	/*0000*/ ULONG UmsVersion;
	/*0004*/ ULONG IsUmsSchedulerThread : 01; // 0x00000001;
	/*0004*/ ULONG IsUmsWorkerThread : 01; // 0x00000002;
	/*0004*/ ULONG ThreadUmsFlags;
	/*0008*/
};

struct _UNICODE_PREFIX_TABLE {
	/*0000*/ SHORT NodeTypeCode;
	/*0002*/ SHORT NameLength;
	/*0008*/ _UNICODE_PREFIX_TABLE_ENTRY * NextPrefixTree;
	/*0010*/ _UNICODE_PREFIX_TABLE_ENTRY * LastNextEntry;
	/*0018*/
};

struct _UNICODE_PREFIX_TABLE_ENTRY {
	/*0000*/ SHORT NodeTypeCode;
	/*0002*/ SHORT NameLength;
	/*0008*/ _UNICODE_PREFIX_TABLE_ENTRY * NextPrefixTree;
	/*0010*/ _UNICODE_PREFIX_TABLE_ENTRY * CaseMatch;
	/*0018*/ _RTL_SPLAY_LINKS Links;
	/*0030*/ _UNICODE_STRING * Prefix;
	/*0038*/
};

struct _UNICODE_STRING {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0008*/ WCHAR * Buffer;
	/*0010*/
};

struct _UNIQUE_PROCESS_INFORMATION {
	/*0000*/ ULONGLONG DontUse : 09; // 0x00000000000001ff;
	/*0000*/ ULONGLONG UniqueProcessKey : 48; // 0x01fffffffffffe00;
	/*0000*/ ULONGLONG Reserved : 07; // 0xfe00000000000000;
	/*0008*/
};

struct _UNIVERSAL_NAME_INFOA {
	/*0000*/ CHAR * lpUniversalName;
	/*0008*/
};

struct _UNIVERSAL_NAME_INFOW {
	/*0000*/ WCHAR * lpUniversalName;
	/*0008*/
};

struct _UNLOAD_DLL_DEBUG_INFO {
	/*0000*/ void * lpBaseOfDll;
	/*0008*/
};

union _UNWIND_CODE {
	
	/*0000*/ UCHAR CodeOffset;
	/*0001*/ UCHAR UnwindOp : 04; // 0x0f;
	/*0001*/ UCHAR OpInfo : 04; // 0xf0;
	/*0000*/ <unnamed-type-EpilogueCode> EpilogueCode;
	/*0000*/ USHORT FrameOffset;
	/*0002*/
};

struct _UNWIND_HISTORY_TABLE {
	/*0000*/ ULONG Count;
	/*0004*/ UCHAR LocalHint;
	/*0005*/ UCHAR GlobalHint;
	/*0006*/ UCHAR Search;
	/*0007*/ UCHAR Once;
	/*0008*/ ULONGLONG LowAddress;
	/*0010*/ ULONGLONG HighAddress;
	/*0018*/ _UNWIND_HISTORY_TABLE_ENTRY Entry[0xc];
	/*00d8*/
};

struct _UNWIND_HISTORY_TABLE_ENTRY {
	/*0000*/ ULONGLONG ImageBase;
	/*0008*/ _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionEntry;
	/*0010*/
};

struct _UNWIND_INFO {
	/*0000*/ UCHAR Version : 03; // 0x07;
	/*0000*/ UCHAR Flags : 05; // 0xf8;
	/*0001*/ UCHAR SizeOfProlog;
	/*0002*/ UCHAR CountOfCodes;
	/*0003*/ UCHAR FrameRegister : 04; // 0x0f;
	/*0003*/ UCHAR FrameOffset : 04; // 0xf0;
	/*0004*/ _UNWIND_CODE UnwindCode[0x1];
	/*0006*/
};

enum _UNWIND_OP_CODES {
	UWOP_PUSH_NONVOL = 0x0,
	UWOP_ALLOC_LARGE = 0x1,
	UWOP_ALLOC_SMALL = 0x2,
	UWOP_SET_FPREG = 0x3,
	UWOP_SAVE_NONVOL = 0x4,
	UWOP_SAVE_NONVOL_FAR = 0x5,
	UWOP_EPILOG = 0x6,
	UWOP_SPARE_CODE = 0x7,
	UWOP_SAVE_XMM128 = 0x8,
	UWOP_SAVE_XMM128_FAR = 0x9,
	UWOP_PUSH_MACHFRAME = 0xa
};

enum _URLZONEREG {
	URLZONEREG_DEFAULT = 0x0,
	URLZONEREG_HKLM = 0x1,
	URLZONEREG_HKCU = 0x2
};

enum _USER_ACTIVITY_PRESENCE {
	PowerUserPresent = 0x0,
	PowerUserNotPresent = 0x1,
	PowerUserInactive = 0x2,
	PowerUserMaximum = 0x3,
	PowerUserInvalid = 0x3
};

struct _USER_MARSHAL_CB {
	/*0000*/ ULONG Flags;
	/*0008*/ _MIDL_STUB_MESSAGE * pStubMsg;
	/*0010*/ UCHAR const * pReserve;
	/*0018*/ ULONG Signature;
	/*001c*/ _USER_MARSHAL_CB_TYPE CBType;
	/*0020*/ UCHAR const * pFormat;
	/*0028*/ UCHAR const * pTypeFormat;
	/*0030*/
};

enum _USER_MARSHAL_CB_TYPE {
	USER_MARSHAL_CB_BUFFER_SIZE = 0x0,
	USER_MARSHAL_CB_MARSHALL = 0x1,
	USER_MARSHAL_CB_UNMARSHALL = 0x2,
	USER_MARSHAL_CB_FREE = 0x3
};

struct _USER_MARSHAL_ROUTINE_QUADRUPLE {
	/*0000*/ ULONG (* pfnBufferSize)( ULONG * , ULONG , void * );
	/*0008*/ UCHAR * (* pfnMarshall)( ULONG * , UCHAR * , void * );
	/*0010*/ UCHAR * (* pfnUnmarshall)( ULONG * , UCHAR * , void * );
	/*0018*/ void (* pfnFree)( ULONG * , void * );
	/*0020*/
};

struct _UUID_VECTOR {
	/*0000*/ ULONG Count;
	/*0008*/ _GUID * Uuid[0x1];
	/*0010*/
};

struct _VARIABLE_NAME {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ _GUID VendorGuid;
	/*0014*/ WCHAR Name[0x1];
	/*0018*/
};

struct _VARIABLE_NAME_AND_VALUE {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG ValueOffset;
	/*0008*/ ULONG ValueLength;
	/*000c*/ ULONG Attributes;
	/*0010*/ _GUID VendorGuid;
	/*0020*/ WCHAR Name[0x1];
	/*0024*/
};

struct _VCN_RANGE_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER StartingVcn;
	/*0008*/ _LARGE_INTEGER ClusterCount;
	/*0010*/
};

struct _VIDEOPARAMETERS {
	/*0000*/ _GUID Guid;
	/*0010*/ ULONG dwOffset;
	/*0014*/ ULONG dwCommand;
	/*0018*/ ULONG dwFlags;
	/*001c*/ ULONG dwMode;
	/*0020*/ ULONG dwTVStandard;
	/*0024*/ ULONG dwAvailableModes;
	/*0028*/ ULONG dwAvailableTVStandard;
	/*002c*/ ULONG dwFlickerFilter;
	/*0030*/ ULONG dwOverScanX;
	/*0034*/ ULONG dwOverScanY;
	/*0038*/ ULONG dwMaxUnscaledX;
	/*003c*/ ULONG dwMaxUnscaledY;
	/*0040*/ ULONG dwPositionX;
	/*0044*/ ULONG dwPositionY;
	/*0048*/ ULONG dwBrightness;
	/*004c*/ ULONG dwContrast;
	/*0050*/ ULONG dwCPType;
	/*0054*/ ULONG dwCPCommand;
	/*0058*/ ULONG dwCPStandard;
	/*005c*/ ULONG dwCPKey;
	/*0060*/ ULONG bCP_APSTriggerBits;
	/*0064*/ UCHAR bOEMCopyProtection[0x100];
	/*0164*/
};

struct _VIRTUALIZATION_INSTANCE_INFO_INPUT {
	/*0000*/ ULONG NumberOfWorkerThreads;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX {
	/*0000*/ USHORT HeaderSize;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG NotificationInfoSize;
	/*000c*/ USHORT NotificationInfoOffset;
	/*000e*/ USHORT ProviderMajorVersion;
	/*0010*/
};

struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT {
	/*0000*/ _GUID VirtualizationInstanceID;
	/*0010*/
};

enum _VIRTUAL_MEMORY_INFORMATION_CLASS {
	VmPrefetchInformation = 0x0,
	VmPagePriorityInformation = 0x1,
	VmCfgCallTargetInformation = 0x2,
	VmPageDirtyStateInformation = 0x3,
	VmImageHotPatchInformation = 0x4,
	VmPhysicalContiguityInformation = 0x5,
	VmVirtualMachinePrepopulateInformation = 0x6,
	VmRemoveFromWorkingSetInformation = 0x7
};

enum _VIRTUAL_STORAGE_BEHAVIOR_CODE {
	VirtualStorageBehaviorUndefined = 0x0,
	VirtualStorageBehaviorCacheWriteThrough = 0x1,
	VirtualStorageBehaviorCacheWriteBack = 0x2,
	VirtualStorageBehaviorStopIoProcessing = 0x3,
	VirtualStorageBehaviorRestartIoProcessing = 0x4
};

struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT {
	/*0000*/ ULONG Size;
	/*0004*/ _VIRTUAL_STORAGE_BEHAVIOR_CODE BehaviorCode;
	/*0008*/
};

struct _VIRTUAL_STORAGE_TYPE {
	/*0000*/ ULONG DeviceId;
	/*0004*/ _GUID VendorId;
	/*0014*/
};

struct _VM_COUNTERS {
	/*0000*/ ULONGLONG PeakVirtualSize;
	/*0008*/ ULONGLONG VirtualSize;
	/*0010*/ ULONG PageFaultCount;
	/*0018*/ ULONGLONG PeakWorkingSetSize;
	/*0020*/ ULONGLONG WorkingSetSize;
	/*0028*/ ULONGLONG QuotaPeakPagedPoolUsage;
	/*0030*/ ULONGLONG QuotaPagedPoolUsage;
	/*0038*/ ULONGLONG QuotaPeakNonPagedPoolUsage;
	/*0040*/ ULONGLONG QuotaNonPagedPoolUsage;
	/*0048*/ ULONGLONG PagefileUsage;
	/*0050*/ ULONGLONG PeakPagefileUsage;
	/*0058*/
};

struct _VM_COUNTERS_EX {
	/*0000*/ ULONGLONG PeakVirtualSize;
	/*0008*/ ULONGLONG VirtualSize;
	/*0010*/ ULONG PageFaultCount;
	/*0018*/ ULONGLONG PeakWorkingSetSize;
	/*0020*/ ULONGLONG WorkingSetSize;
	/*0028*/ ULONGLONG QuotaPeakPagedPoolUsage;
	/*0030*/ ULONGLONG QuotaPagedPoolUsage;
	/*0038*/ ULONGLONG QuotaPeakNonPagedPoolUsage;
	/*0040*/ ULONGLONG QuotaNonPagedPoolUsage;
	/*0048*/ ULONGLONG PagefileUsage;
	/*0050*/ ULONGLONG PeakPagefileUsage;
	/*0058*/ ULONGLONG PrivateUsage;
	/*0060*/
};

struct _VM_COUNTERS_EX2 {
	/*0000*/ _VM_COUNTERS_EX CountersEx;
	/*0060*/ ULONGLONG PrivateWorkingSetSize;
	/*0068*/ ULONGLONG SharedCommitUsage;
	/*0070*/
};

struct _VOLUME_REFS_INFO_BUFFER {
	/*0000*/ _LARGE_INTEGER CacheSizeInBytes;
	/*0008*/ _LARGE_INTEGER AllocatedCacheInBytes;
	/*0010*/ _LARGE_INTEGER PopulatedCacheInBytes;
	/*0018*/ _LARGE_INTEGER InErrorCacheInBytes;
	/*0020*/ _LARGE_INTEGER MemoryUsedForCacheMetadata;
	/*0028*/ ULONG CacheLineSize;
	/*002c*/ LONG CacheTransactionsOutstanding;
	/*0030*/ LONG CacheLinesFree;
	/*0034*/ LONG CacheLinesInError;
	/*0038*/ _LARGE_INTEGER CacheHitsInBytes;
	/*0040*/ _LARGE_INTEGER CacheMissesInBytes;
	/*0048*/ _LARGE_INTEGER CachePopulationUpdatesInBytes;
	/*0050*/ _LARGE_INTEGER CacheWriteThroughUpdatesInBytes;
	/*0058*/ _LARGE_INTEGER CacheInvalidationsInBytes;
	/*0060*/ _LARGE_INTEGER CacheOverReadsInBytes;
	/*0068*/ _LARGE_INTEGER MetadataWrittenBytes;
	/*0070*/ LONG CacheHitCounter;
	/*0074*/ LONG CacheMissCounter;
	/*0078*/ LONG CacheLineAllocationCounter;
	/*007c*/ LONG CacheInvalidationsCounter;
	/*0080*/ LONG CachePopulationUpdatesCounter;
	/*0084*/ LONG CacheWriteThroughUpdatesCounter;
	/*0088*/ LONG MaxCacheTransactionsOutstanding;
	/*008c*/ LONG DataWritesReallocationCount;
	/*0090*/ LONG DataInPlaceWriteCount;
	/*0094*/ LONG MetadataAllocationsFastTierCount;
	/*0098*/ LONG MetadataAllocationsSlowTierCount;
	/*009c*/ LONG DataAllocationsFastTierCount;
	/*00a0*/ LONG DataAllocationsSlowTierCount;
	/*00a4*/ LONG DestagesSlowTierToFastTier;
	/*00a8*/ LONG DestagesFastTierToSlowTier;
	/*00ac*/ LONG SlowTierDataFillRatio;
	/*00b0*/ LONG FastTierDataFillRatio;
	/*00b4*/ LONG SlowTierMetadataFillRatio;
	/*00b8*/ LONG FastTierMetadataFillRatio;
	/*00bc*/ LONG SlowToFastDestageReadLatency;
	/*00c0*/ LONG SlowToFastDestageReadLatencyBase;
	/*00c4*/ LONG SlowToFastDestageWriteLatency;
	/*00c8*/ LONG SlowToFastDestageWriteLatencyBase;
	/*00cc*/ LONG FastToSlowDestageReadLatency;
	/*00d0*/ LONG FastToSlowDestageReadLatencyBase;
	/*00d4*/ LONG FastToSlowDestageWriteLatency;
	/*00d8*/ LONG FastToSlowDestageWriteLatencyBase;
	/*00dc*/ LONG SlowTierContainerFillRatio;
	/*00e0*/ LONG SlowTierContainerFillRatioBase;
	/*00e4*/ LONG FastTierContainerFillRatio;
	/*00e8*/ LONG FastTierContainerFillRatioBase;
	/*00ec*/ LONG TreeUpdateLatency;
	/*00f0*/ LONG TreeUpdateLatencyBase;
	/*00f4*/ LONG CheckpointLatency;
	/*00f8*/ LONG CheckpointLatencyBase;
	/*00fc*/ LONG TreeUpdateCount;
	/*0100*/ LONG CheckpointCount;
	/*0104*/ LONG LogWriteCount;
	/*0108*/ LONG LogFillRatio;
	/*010c*/ LONG ReadCacheInvalidationsForOverwrite;
	/*0110*/ LONG ReadCacheInvalidationsForReuse;
	/*0114*/ LONG ReadCacheInvalidationsGeneral;
	/*0118*/ LONG ReadCacheChecksOnMount;
	/*011c*/ LONG ReadCacheIssuesOnMount;
	/*0120*/ LONG TrimLatency;
	/*0124*/ LONG TrimLatencyBase;
	/*0128*/ LONG DataCompactionCount;
	/*012c*/ LONG CompactionReadLatency;
	/*0130*/ LONG CompactionReadLatencyBase;
	/*0134*/ LONG CompactionWriteLatency;
	/*0138*/ LONG CompactionWriteLatencyBase;
	/*0140*/ _LARGE_INTEGER DataInPlaceWriteClusterCount;
	/*0148*/ LONG CompactionFailedDueToIneligibleContainer;
	/*014c*/ LONG CompactionFailedDueToMaxFragmentation;
	/*0150*/ LONG CompactedContainerFillRatio;
	/*0154*/ LONG CompactedContainerFillRatioBase;
	/*0158*/ LONG ContainerMoveRetryCount;
	/*015c*/ LONG ContainerMoveFailedDueToIneligibleContainer;
	/*0160*/ LONG CompactionFailureCount;
	/*0164*/ LONG ContainerMoveFailureCount;
	/*0168*/ _LARGE_INTEGER NumberOfDirtyMetadataPages;
	/*0170*/ LONG NumberOfDirtyTableListEntries;
	/*0174*/ LONG NumberOfDeleteQueueEntries;
	/*0178*/
};

enum _VRF_RULE_CLASS_ID {
	DifPluginSpecialPool = 0x0,
	DifPluginIrqlRuleClass = 0x1,
	VrfAllocationFailuresRuleClass = 0x2,
	DifPluginPoolTracking = 0x3,
	DifPluginIoRuleClass = 0x4,
	DifPluginDeadlock = 0x5,
	VrfEnhancedIORuleClass = 0x6,
	DifPluginDmaRuleClass = 0x7,
	DifPluginSecurity = 0x8,
	VrfForcePendingIORequestRuleClass = 0x9,
	VrfIRPTrackingRuleClass = 0xa,
	DifPluginMiscellaneous = 0xb,
	VrfMoreDebuggingRuleClass = 0xc,
	VrfMDLInvariantStackRuleClass = 0xd,
	VrfMDLInvariantDriverRuleClass = 0xe,
	DifPluginPowerDelayFuzzing = 0xf,
	VrfPortMiniportRuleClass = 0x10,
	DifPluginDdiStandard = 0x11,
	DifPluginAutoFail = 0x12,
	DifPluginDdiStateful = 0x13,
	VrfRuleClassBase = 0x14,
	VrfNdisWifiRuleClass = 0x15,
	DifPluginDriverLogging = 0x16,
	DifPluginSyncDelayFuzzing = 0x17,
	VrfVMSwitchingRuleClass = 0x18,
	VrfCodeIntegrityRuleClass = 0x19,
	VrfBelow4GBAllocationRuleClass = 0x1a,
	VrfProcessorBranchTraceRuleClass = 0x1b,
	VrfAdvancedMMRuleClass = 0x1c,
	VrfExtendingXDVTimeLimit = 0x1d,
	VrfSystemBIOSRuleClass = 0x1e,
	VrfHardwareRuleClass = 0x1f,
	DifPluginDriverIsolation = 0x20,
	DifPluginWdfRuleClass = 0x21,
	DifPluginDdiMoreirql = 0x22,
	DifPluginMode = 0x23,
	ReservedForDVRF36 = 0x24,
	DifPluginTest = 0x25,
	DifPluginInfoDisclosureIRPRule = 0x26,
	DifPluginLwSP = 0x27,
	DifPluginAvxCorruption = 0x28,
	DifPluginAccessModeMismatch = 0x29,
	ReservedForDVRF42 = 0x2a,
	ReservedForDVRF43 = 0x2b,
	ReservedForDVRF44 = 0x2c,
	ReservedForDVRF45 = 0x2d,
	ReservedForDVRF46 = 0x2e,
	ReservedForDVRF47 = 0x2f,
	ReservedForDVRF48 = 0x30,
	ReservedForDVRF49 = 0x31,
	ReservedForDVRF50 = 0x32,
	ReservedForDVRF51 = 0x33,
	ReservedForDVRF52 = 0x34,
	ReservedForDVRF53 = 0x35,
	ReservedForDVRF54 = 0x36,
	ReservedForDVRF55 = 0x37,
	ReservedForDVRF56 = 0x38,
	ReservedForDVRF57 = 0x39,
	ReservedForDVRF58 = 0x3a,
	ReservedForDVRF59 = 0x3b,
	ReservedForDVRF60 = 0x3c,
	ReservedForDVRF61 = 0x3d,
	ReservedForDVRF62 = 0x3e,
	ReservedForDVRF63 = 0x3f,
	VrfRuleClassSizeMax = 0x40
};

enum _VRF_TRIAGE_CONTEXT {
	VRF_TRIAGE_CONTEXT_NONE = 0x0,
	VRF_TRIAGE_CONTEXT_DEFAULT = 0x1,
	VRF_TRIAGE_CONTEXT_DEVELOPMENT = 0x1,
	VRF_TRIAGE_CONTEXT_CERTIFICATION = 0x2,
	VRF_TRIAGE_CONTEXT_CERTIFICATION_STRICT = 0x3,
	VRF_TRIAGE_CONTEXT_FLIGHT_TARGETED = 0x4,
	VRF_TRIAGE_CONTEXT_FLIGHT_DIAGNOSTICS = 0x5,
	VRF_TRIAGE_CONTEXT_FLIGHT_MONITORING = 0x6,
	NUM_VRF_TRIAGE_CONTEXTS = 0x7
};

enum _WAIT_TYPE {
	WaitAll = 0x0,
	WaitAny = 0x1,
	WaitNotification = 0x2,
	WaitDequeue = 0x3,
	WaitDpc = 0x4
};

struct _WAKE_TIMER_INFO {
	/*0000*/ ULONGLONG OffsetToNext;
	/*0008*/ _ULARGE_INTEGER DueTime;
	/*0010*/ ULONG Period;
	/*0018*/ _DIAGNOSTIC_BUFFER ReasonContext;
	/*0040*/
};

enum _WATCHDOG_HANDLER_ACTION {
	WdActionSetTimeoutValue = 0x0,
	WdActionQueryTimeoutValue = 0x1,
	WdActionResetTimer = 0x2,
	WdActionStopTimer = 0x3,
	WdActionStartTimer = 0x4,
	WdActionSetTriggerAction = 0x5,
	WdActionQueryTriggerAction = 0x6,
	WdActionQueryState = 0x7,
	WdActionSleep = 0x8,
	WdActionWake = 0x9,
	WdActionMarkHiberPhase = 0xa
};

enum _WATCHDOG_INFORMATION_CLASS {
	WdInfoTimeoutValue = 0x0,
	WdInfoResetTimer = 0x1,
	WdInfoStopTimer = 0x2,
	WdInfoStartTimer = 0x3,
	WdInfoTriggerAction = 0x4,
	WdInfoState = 0x5,
	WdInfoTriggerReset = 0x6,
	WdInfoNop = 0x7,
	WdInfoGeneratedLastReset = 0x8,
	WdInfoInvalid = 0x9
};

struct _WGLSWAP {
	/*0000*/ HDC__ * hdc;
	/*0008*/ UINT uiFlags;
	/*0010*/
};

struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
	/*0000*/ ULONG WimType;
	/*0004*/ ULONG WimIndex;
	/*0008*/ ULONG WimFileNameOffset;
	/*000c*/ ULONG WimFileNameLength;
	/*0010*/
};

struct _WIM_PROVIDER_CONTROL_INTEGRITY {
	/*0000*/ ULONG ControlCode;
	/*0004*/
};

struct _WIM_PROVIDER_EXTERNAL_INFO {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ _LARGE_INTEGER DataSourceId;
	/*0010*/ UCHAR ResourceHash[0x14];
	/*0028*/
};

struct _WIM_PROVIDER_INTEGRITY_STATUS {
	/*0000*/ UCHAR IntegrityComplete;
	/*0001*/ UCHAR IntegrityRunning;
	/*0008*/ ULONGLONG IntegrityAvailable;
	/*0010*/ ULONGLONG IntegrityRequired;
	/*0018*/
};

struct _WIM_PROVIDER_OVERLAY_ENTRY {
	/*0000*/ ULONG NextEntryOffset;
	/*0008*/ _LARGE_INTEGER DataSourceId;
	/*0010*/ _GUID WimGuid;
	/*0020*/ ULONG WimFileNameOffset;
	/*0024*/ ULONG WimType;
	/*0028*/ ULONG WimIndex;
	/*002c*/ ULONG Flags;
	/*0030*/
};

struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
	/*0000*/ _LARGE_INTEGER DataSourceId;
	/*0008*/
};

struct _WIM_PROVIDER_START_INTEGRITY {
	/*0000*/ _LARGE_INTEGER DataSourceId;
	/*0008*/
};

struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
	/*0000*/ _LARGE_INTEGER DataSourceId;
	/*0008*/
};

struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
	/*0000*/ _LARGE_INTEGER DataSourceId;
	/*0008*/ ULONG WimFileNameOffset;
	/*000c*/ ULONG WimFileNameLength;
	/*0010*/
};

struct _WIN32K_SYSCALL_FILTER {
	/*0000*/ ULONG FilterState;
	/*0004*/ ULONG FilterSet;
	/*0008*/
};

struct _WIN32_FILE_ATTRIBUTE_DATA {
	/*0000*/ ULONG dwFileAttributes;
	/*0004*/ _FILETIME ftCreationTime;
	/*000c*/ _FILETIME ftLastAccessTime;
	/*0014*/ _FILETIME ftLastWriteTime;
	/*001c*/ ULONG nFileSizeHigh;
	/*0020*/ ULONG nFileSizeLow;
	/*0024*/
};

struct _WIN32_FIND_DATAA {
	/*0000*/ ULONG dwFileAttributes;
	/*0004*/ _FILETIME ftCreationTime;
	/*000c*/ _FILETIME ftLastAccessTime;
	/*0014*/ _FILETIME ftLastWriteTime;
	/*001c*/ ULONG nFileSizeHigh;
	/*0020*/ ULONG nFileSizeLow;
	/*0024*/ ULONG dwReserved0;
	/*0028*/ ULONG dwReserved1;
	/*002c*/ CHAR cFileName[0x104];
	/*0130*/ CHAR cAlternateFileName[0xe];
	/*0140*/
};

struct _WIN32_FIND_DATAW {
	/*0000*/ ULONG dwFileAttributes;
	/*0004*/ _FILETIME ftCreationTime;
	/*000c*/ _FILETIME ftLastAccessTime;
	/*0014*/ _FILETIME ftLastWriteTime;
	/*001c*/ ULONG nFileSizeHigh;
	/*0020*/ ULONG nFileSizeLow;
	/*0024*/ ULONG dwReserved0;
	/*0028*/ ULONG dwReserved1;
	/*002c*/ WCHAR cFileName[0x104];
	/*0234*/ WCHAR cAlternateFileName[0xe];
	/*0250*/
};

struct _WIN32_FIND_STREAM_DATA {
	/*0000*/ _LARGE_INTEGER StreamSize;
	/*0008*/ WCHAR cStreamName[0x128];
	/*0258*/
};

struct _WIN32_MEMORY_RANGE_ENTRY {
	/*0000*/ void * VirtualAddress;
	/*0008*/ ULONGLONG NumberOfBytes;
	/*0010*/
};

struct _WIN32_STREAM_ID {
	/*0000*/ ULONG dwStreamId;
	/*0004*/ ULONG dwStreamAttributes;
	/*0008*/ _LARGE_INTEGER Size;
	/*0010*/ ULONG dwStreamNameSize;
	/*0014*/ WCHAR cStreamName[0x1];
	/*0018*/
};

struct _WINDOWS_OS_OPTIONS {
	/*0000*/ UCHAR Signature[0x8];
	/*0008*/ ULONG Version;
	/*000c*/ ULONG Length;
	/*0010*/ ULONG OsLoadPathOffset;
	/*0014*/ WCHAR OsLoadOptions[0x1];
	/*0018*/
};

struct _WINDOW_BUFFER_SIZE_RECORD {
	/*0000*/ _COORD dwSize;
	/*0004*/
};

enum _WNF_DATA_SCOPE {
	WnfDataScopeSystem = 0x0,
	WnfDataScopeSession = 0x1,
	WnfDataScopeUser = 0x2,
	WnfDataScopeProcess = 0x3,
	WnfDataScopeMachine = 0x4,
	WnfDataScopePhysicalMachine = 0x5
};

struct _WNF_DELIVERY_DESCRIPTOR {
	/*0000*/ ULONGLONG SubscriptionId;
	/*0008*/ _WNF_STATE_NAME StateName;
	/*0010*/ ULONG ChangeStamp;
	/*0014*/ ULONG StateDataSize;
	/*0018*/ ULONG EventMask;
	/*001c*/ _WNF_TYPE_ID TypeId;
	/*002c*/ ULONG StateDataOffset;
	/*0030*/
};

struct _WNF_STATE_NAME {
	/*0000*/ ULONG Data[0x2];
	/*0008*/
};

enum _WNF_STATE_NAME_INFORMATION {
	WnfInfoStateNameExist = 0x0,
	WnfInfoSubscribersPresent = 0x1,
	WnfInfoIsQuiescent = 0x2
};

enum _WNF_STATE_NAME_LIFETIME {
	WnfWellKnownStateName = 0x0,
	WnfPermanentStateName = 0x1,
	WnfPersistentStateName = 0x2,
	WnfTemporaryStateName = 0x3
};

struct _WNF_TYPE_ID {
	/*0000*/ _GUID TypeId;
	/*0010*/
};

struct _WNF_USER_SUBSCRIPTION;

struct _WOF_EXTERNAL_FILE_ID {
	/*0000*/ _FILE_ID_128 FileId;
	/*0010*/
};

struct _WOF_EXTERNAL_INFO {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Provider;
	/*0008*/
};

struct _WOF_VERSION_INFO {
	/*0000*/ ULONG WofVersion;
	/*0004*/
};

struct _WORD_BLOB {
	/*0000*/ ULONG clSize;
	/*0004*/ USHORT asData[0x1];
	/*0008*/
};

enum _WORKERFACTORYINFOCLASS {
	WorkerFactoryTimeout = 0x0,
	WorkerFactoryRetryTimeout = 0x1,
	WorkerFactoryIdleTimeout = 0x2,
	WorkerFactoryBindingCount = 0x3,
	WorkerFactoryThreadMinimum = 0x4,
	WorkerFactoryThreadMaximum = 0x5,
	WorkerFactoryPaused = 0x6,
	WorkerFactoryBasicInformation = 0x7,
	WorkerFactoryAdjustThreadGoal = 0x8,
	WorkerFactoryCallbackType = 0x9,
	WorkerFactoryStackInformation = 0xa,
	WorkerFactoryThreadBasePriority = 0xb,
	WorkerFactoryTimeoutWaiters = 0xc,
	WorkerFactoryFlags = 0xd,
	WorkerFactoryThreadSoftMaximum = 0xe,
	WorkerFactoryThreadCpuSets = 0xf,
	MaxWorkerFactoryInfoClass = 0x10
};

struct _WORKER_FACTORY_BASIC_INFORMATION {
	/*0000*/ _LARGE_INTEGER Timeout;
	/*0008*/ _LARGE_INTEGER RetryTimeout;
	/*0010*/ _LARGE_INTEGER IdleTimeout;
	/*0018*/ UCHAR Paused;
	/*0019*/ UCHAR TimerSet;
	/*001a*/ UCHAR QueuedToExWorker;
	/*001b*/ UCHAR MayCreate;
	/*001c*/ UCHAR CreateInProgress;
	/*001d*/ UCHAR InsertedIntoQueue;
	/*001e*/ UCHAR Shutdown;
	/*0020*/ ULONG BindingCount;
	/*0024*/ ULONG ThreadMinimum;
	/*0028*/ ULONG ThreadMaximum;
	/*002c*/ ULONG PendingWorkerCount;
	/*0030*/ ULONG WaitingWorkerCount;
	/*0034*/ ULONG TotalWorkerCount;
	/*0038*/ ULONG ReleaseCount;
	/*0040*/ LONGLONG InfiniteWaitGoal;
	/*0048*/ LONG (* StartRoutine)( void * );
	/*0050*/ void * StartParameter;
	/*0058*/ void * ProcessId;
	/*0060*/ ULONGLONG StackReserve;
	/*0068*/ ULONGLONG StackCommit;
	/*0070*/ LONG LastThreadCreationStatus;
	/*0078*/
};

enum _WORKER_FACTORY_CALLBACK_CLASS {
	WorkerFactoryCallbackNormal = 0x0,
	WorkerFactoryCallbackLongRunning = 0x1,
	WorkerFactoryCallbackIndependent = 0x2,
	WorkerFactoryCallbackDetectedUnrecoverableError = 0x3
};

struct _WORKER_FACTORY_DEFERRED_WORK {
	/*0000*/ _PORT_MESSAGE * AlpcSendMessage;
	/*0008*/ void * AlpcSendMessagePort;
	/*0010*/ ULONG AlpcSendMessageFlags;
	/*0014*/ ULONG Flags;
	/*0018*/
};

struct _WOW64_CONTEXT {
	/*0000*/ ULONG ContextFlags;
	/*0004*/ ULONG Dr0;
	/*0008*/ ULONG Dr1;
	/*000c*/ ULONG Dr2;
	/*0010*/ ULONG Dr3;
	/*0014*/ ULONG Dr6;
	/*0018*/ ULONG Dr7;
	/*001c*/ _WOW64_FLOATING_SAVE_AREA FloatSave;
	/*008c*/ ULONG SegGs;
	/*0090*/ ULONG SegFs;
	/*0094*/ ULONG SegEs;
	/*0098*/ ULONG SegDs;
	/*009c*/ ULONG Edi;
	/*00a0*/ ULONG Esi;
	/*00a4*/ ULONG Ebx;
	/*00a8*/ ULONG Edx;
	/*00ac*/ ULONG Ecx;
	/*00b0*/ ULONG Eax;
	/*00b4*/ ULONG Ebp;
	/*00b8*/ ULONG Eip;
	/*00bc*/ ULONG SegCs;
	/*00c0*/ ULONG EFlags;
	/*00c4*/ ULONG Esp;
	/*00c8*/ ULONG SegSs;
	/*00cc*/ UCHAR ExtendedRegisters[0x200];
	/*02cc*/
};

struct _WOW64_CPUAREA_INFO {
	/*0000*/ void * Context;
	/*0000*/ _X86_NT5_CONTEXT * ContextX86;
	/*0000*/ _AMD64_CONTEXT * ContextAmd64;
	/*0000*/ _ARM_CONTEXT * ContextArm;
	/*0000*/ _ARM64_CONTEXT * ContextArm64;
	/*0008*/ void * * PerThreadDataLocation;
	/*0010*/ ULONG * ContextFlagsLocation;
	/*0018*/ ULONG * CpuAreaFlagsLocation;
	/*0020*/ ULONG ArchContextFlag;
	/*0024*/ USHORT Machine;
	/*0026*/ USHORT Pad1;
	/*0028*/ LONG volatile * KernelWriteToExecutableSignaledLocation;
	/*0030*/
};

struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
	/*0000*/ ULONG Selector;
	/*0004*/ _WOW64_LDT_ENTRY Descriptor;
	/*000c*/
};

struct _WOW64_FLOATING_SAVE_AREA {
	/*0000*/ ULONG ControlWord;
	/*0004*/ ULONG StatusWord;
	/*0008*/ ULONG TagWord;
	/*000c*/ ULONG ErrorOffset;
	/*0010*/ ULONG ErrorSelector;
	/*0014*/ ULONG DataOffset;
	/*0018*/ ULONG DataSelector;
	/*001c*/ UCHAR RegisterArea[0x50];
	/*006c*/ ULONG Cr0NpxState;
	/*0070*/
};

enum _WOW64_FUNCTION_CODE64 {
	WOW64_FUNCTION_NOP = 0x0,
	WOW64_FUNCTION_QUERY_PROCESS_DEBUG_INFO = 0x1,
	WOW64_FUNCTION_CPU_TURBO_THUNK_CONTROL = 0x2,
	WOW64_FUNCTION_CPU_CFG_DISPATCH_CONTROL = 0x3,
	WOW64_FUNCTION_CPU_OPTIMIZE_CHPE_IMPORT_THUNKS = 0x4,
	WOW64_FUNCTION_MAXIMUM = 0x5
};

struct _WOW64_LDT_ENTRY {
	
	/*0000*/ USHORT LimitLow;
	/*0002*/ USHORT BaseLow;
	/*0004*/ <unnamed-type-HighWord> HighWord;
	/*0008*/
};

struct _WRITE_USN_REASON_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG UsnReasonToWrite;
	/*0008*/
};

struct _WinrtTypeSerializationInfo_boolean_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x4];
	/*0006*/
};

struct _Wx86TIB {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG InitialPc;
	/*0008*/ void * StackBase;
	/*000c*/ void * StackLimit;
	/*0010*/ void * DeallocationStack;
	/*0014*/ ULONG LogFlags;
	/*0018*/ ULONG InitialSp;
	/*001c*/ UCHAR SimulationCount;
	/*001d*/ UCHAR InCpuSimulation;
	/*001e*/ UCHAR EmulateInitialPc;
	/*001f*/ UCHAR Initialized;
	/*0020*/ _EXCEPTION_REGISTRATION_RECORD * ExceptionList;
	/*0024*/ void * CpuContext;
	/*0028*/ _CONTEXT * InitialExceptionContext;
	/*002c*/ void * pCallersRIID;
	/*0030*/ void * pCallersUnknown;
	/*0034*/ ULONG Flags;
	/*0038*/ void * SelfRegDllName;
	/*003c*/ void * SelfRegDllHandle;
	/*0040*/
};

struct _Wx86ThreadState {
	/*0000*/ ULONG * CallBx86Eip;
	/*0008*/ void * DeallocationCpu;
	/*0010*/ UCHAR UseKnownWx86Dll;
	/*0011*/ CHAR OleStubInvoked;
	/*0018*/
};

struct _X86_CALL_FRAME {
	/*0000*/ ULONG ReturnAddress;
	/*0004*/ ULONG Param1;
	/*0008*/ ULONG Param2;
	/*000c*/ ULONG CompatibilityArea;
	/*0010*/
};

struct _X86_NT5_CONTEXT;

struct _XMIT_ROUTINE_QUINTUPLE {
	/*0000*/ void (* pfnTranslateToXmit)( _MIDL_STUB_MESSAGE * );
	/*0008*/ void (* pfnTranslateFromXmit)( _MIDL_STUB_MESSAGE * );
	/*0010*/ void (* pfnFreeXmit)( _MIDL_STUB_MESSAGE * );
	/*0018*/ void (* pfnFreeInst)( _MIDL_STUB_MESSAGE * );
	/*0020*/
};

struct _XSAVE_AREA {
	/*0000*/ _XSAVE_FORMAT LegacyState;
	/*0200*/ _XSAVE_AREA_HEADER Header;
	/*0240*/
};

struct _XSAVE_AREA_HEADER {
	/*0000*/ ULONGLONG Mask;
	/*0008*/ ULONGLONG CompactionMask;
	/*0010*/ ULONGLONG Reserved2[0x6];
	/*0040*/
};

struct _XSAVE_CET_U_FORMAT {
	/*0000*/ ULONGLONG Ia32CetUMsr;
	/*0008*/ ULONGLONG Ia32Pl3SspMsr;
	/*0010*/
};

struct _XSAVE_FEATURE {
	/*0000*/ ULONG FeatureId;
	/*0008*/ _XSAVE_VENDORS * Vendors;
	/*0008*/ ULONGLONG Unused;
	/*0010*/
};

struct _XSAVE_FORMAT {
	/*0000*/ USHORT ControlWord;
	/*0002*/ USHORT StatusWord;
	/*0004*/ UCHAR TagWord;
	/*0005*/ UCHAR Reserved1;
	/*0006*/ USHORT ErrorOpcode;
	/*0008*/ ULONG ErrorOffset;
	/*000c*/ USHORT ErrorSelector;
	/*000e*/ USHORT Reserved2;
	/*0010*/ ULONG DataOffset;
	/*0014*/ USHORT DataSelector;
	/*0016*/ USHORT Reserved3;
	/*0018*/ ULONG MxCsr;
	/*001c*/ ULONG MxCsr_Mask;
	/*0020*/ _M128A FloatRegisters[0x8];
	/*00a0*/ _M128A XmmRegisters[0x10];
	/*01a0*/ UCHAR Reserved4[0x60];
	/*0200*/
};

struct _XSAVE_POLICY {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG MaxSaveAreaLength;
	/*0010*/ ULONGLONG FeatureBitmask;
	/*0018*/ ULONG NumberOfFeatures;
	/*0020*/ _XSAVE_FEATURE Features[0x1];
	/*0030*/
};

struct _XSAVE_SUPPORTED_CPU {
	/*0000*/ XSAVE_CPU_INFO CpuInfo;
	/*0020*/ XSAVE_CPU_ERRATA * CpuErrata;
	/*0020*/ ULONGLONG Unused;
	/*0028*/
};

struct _XSAVE_VENDOR {
	/*0000*/ ULONG VendorId[0x3];
	/*0010*/ _XSAVE_SUPPORTED_CPU SupportedCpu;
	/*0038*/
};

struct _XSAVE_VENDORS {
	/*0000*/ ULONG NumberOfVendors;
	/*0008*/ _XSAVE_VENDOR Vendor[0x1];
	/*0040*/
};

struct _XSTATE_CONFIGURATION {
	/*0000*/ ULONGLONG EnabledFeatures;
	/*0008*/ ULONGLONG EnabledVolatileFeatures;
	/*0010*/ ULONG Size;
	/*0014*/ ULONG ControlFlags;
	/*0014*/ ULONG OptimizedSave : 01; // 0x00000001;
	/*0014*/ ULONG CompactionEnabled : 01; // 0x00000002;
	/*0014*/ ULONG ExtendedFeatureDisable : 01; // 0x00000004;
	/*0018*/ _XSTATE_FEATURE Features[0x40];
	/*0218*/ ULONGLONG EnabledSupervisorFeatures;
	/*0220*/ ULONGLONG AlignedFeatures;
	/*0228*/ ULONG AllFeatureSize;
	/*022c*/ ULONG AllFeatures[0x40];
	/*0330*/ ULONGLONG EnabledUserVisibleSupervisorFeatures;
	/*0338*/ ULONGLONG ExtendedFeatureDisableFeatures;
	/*0340*/ ULONG AllNonLargeFeatureSize;
	/*0344*/ ULONG Spare;
	/*0348*/
};

struct _XSTATE_CONTEXT {
	/*0000*/ ULONGLONG Mask;
	/*0008*/ ULONG Length;
	/*000c*/ ULONG Reserved1;
	/*0010*/ _XSAVE_AREA * Area;
	/*0018*/ void * Buffer;
	/*0020*/
};

struct _XSTATE_FEATURE {
	/*0000*/ ULONG Offset;
	/*0004*/ ULONG Size;
	/*0008*/
};

struct _ZONEATTRIBUTES {
	/*0000*/ ULONG cbSize;
	/*0004*/ WCHAR szDisplayName[0x104];
	/*020c*/ WCHAR szDescription[0xc8];
	/*039c*/ WCHAR szIconPath[0x104];
	/*05a4*/ ULONG dwTemplateMinLevel;
	/*05a8*/ ULONG dwTemplateRecommended;
	/*05ac*/ ULONG dwTemplateCurrentLevel;
	/*05b0*/ ULONG dwFlags;
	/*05b4*/
};

struct __GENERIC_BINDING_INFO {
	/*0000*/ void * pObj;
	/*0008*/ UINT Size;
	/*0010*/ void * (* pfnBind)( void * );
	/*0018*/ void (* pfnUnbind)( void * , UCHAR * );
	/*0020*/
};

enum __MIDL_IAuthenticateEx_0001 {
	AUTHENTICATEF_PROXY = 0x1,
	AUTHENTICATEF_BASIC = 0x2,
	AUTHENTICATEF_HTTP = 0x4
};

enum __MIDL_IBindStatusCallbackEx_0001 {
	BINDF2_DISABLEBASICOVERHTTP = 0x1,
	BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
	BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
	BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
	BINDF2_SETDOWNLOADMODE = 0x20,
	BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 0x40,
	BINDF2_KEEP_CALLBACK_MODULE_LOADED = 0x80,
	BINDF2_ALLOW_PROXY_CRED_PROMPT = 0x100,
	BINDF2_RESERVED_17 = 0x200,
	BINDF2_RESERVED_16 = 0x400,
	BINDF2_RESERVED_15 = 0x800,
	BINDF2_RESERVED_14 = 0x1000,
	BINDF2_RESERVED_13 = 0x2000,
	BINDF2_RESERVED_12 = 0x4000,
	BINDF2_RESERVED_11 = 0x8000,
	BINDF2_RESERVED_10 = 0x10000,
	BINDF2_RESERVED_F = 0x20000,
	BINDF2_RESERVED_E = 0x40000,
	BINDF2_RESERVED_D = 0x80000,
	BINDF2_RESERVED_C = 0x100000,
	BINDF2_RESERVED_B = 0x200000,
	BINDF2_RESERVED_A = 0x400000,
	BINDF2_RESERVED_9 = 0x800000,
	BINDF2_RESERVED_8 = 0x1000000,
	BINDF2_RESERVED_7 = 0x2000000,
	BINDF2_RESERVED_6 = 0x4000000,
	BINDF2_RESERVED_5 = 0x8000000,
	BINDF2_RESERVED_4 = 0x10000000,
	BINDF2_RESERVED_3 = 0x20000000,
	BINDF2_RESERVED_2 = 0x40000000,
	BINDF2_RESERVED_1 = 0x80000000
};

enum __MIDL_IBindStatusCallback_0001 {
	BINDVERB_GET = 0x0,
	BINDVERB_POST = 0x1,
	BINDVERB_PUT = 0x2,
	BINDVERB_CUSTOM = 0x3,
	BINDVERB_RESERVED1 = 0x4
};

enum __MIDL_IBindStatusCallback_0002 {
	BINDINFOF_URLENCODESTGMEDDATA = 0x1,
	BINDINFOF_URLENCODEDEXTRAINFO = 0x2
};

enum __MIDL_IBindStatusCallback_0003 {
	BINDF_ASYNCHRONOUS = 0x1,
	BINDF_ASYNCSTORAGE = 0x2,
	BINDF_NOPROGRESSIVERENDERING = 0x4,
	BINDF_OFFLINEOPERATION = 0x8,
	BINDF_GETNEWESTVERSION = 0x10,
	BINDF_NOWRITECACHE = 0x20,
	BINDF_NEEDFILE = 0x40,
	BINDF_PULLDATA = 0x80,
	BINDF_IGNORESECURITYPROBLEM = 0x100,
	BINDF_RESYNCHRONIZE = 0x200,
	BINDF_HYPERLINK = 0x400,
	BINDF_NO_UI = 0x800,
	BINDF_SILENTOPERATION = 0x1000,
	BINDF_PRAGMA_NO_CACHE = 0x2000,
	BINDF_GETCLASSOBJECT = 0x4000,
	BINDF_RESERVED_1 = 0x8000,
	BINDF_FREE_THREADED = 0x10000,
	BINDF_DIRECT_READ = 0x20000,
	BINDF_FORMS_SUBMIT = 0x40000,
	BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
	BINDF_FROMURLMON = 0x100000,
	BINDF_FWD_BACK = 0x200000,
	BINDF_PREFERDEFAULTHANDLER = 0x400000,
	BINDF_ENFORCERESTRICTED = 0x800000,
	BINDF_RESERVED_2 = 0x80000000,
	BINDF_RESERVED_3 = 0x1000000,
	BINDF_RESERVED_4 = 0x2000000,
	BINDF_RESERVED_5 = 0x4000000,
	BINDF_RESERVED_6 = 0x8000000,
	BINDF_RESERVED_7 = 0x40000000,
	BINDF_RESERVED_8 = 0x20000000
};

enum __MIDL_IBindStatusCallback_0004 {
	URL_ENCODING_NONE = 0x0,
	URL_ENCODING_ENABLE_UTF8 = 0x10000000,
	URL_ENCODING_DISABLE_UTF8 = 0x20000000
};

enum __MIDL_IBindStatusCallback_0005 {
	BINDINFO_OPTIONS_WININETFLAG = 0x10000,
	BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
	BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
	BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
	BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
	BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
	BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
	BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
	BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
	BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
	BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
	BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
	BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
	BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
	BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = 0x80000000
};

enum __MIDL_IBindStatusCallback_0006 {
	BSCF_FIRSTDATANOTIFICATION = 0x1,
	BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
	BSCF_LASTDATANOTIFICATION = 0x4,
	BSCF_DATAFULLYAVAILABLE = 0x8,
	BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
	BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
	BSCF_64BITLENGTHDOWNLOAD = 0x40
};

enum __MIDL_ICodeInstall_0001 {
	CIP_DISK_FULL = 0x0,
	CIP_ACCESS_DENIED = 0x1,
	CIP_NEWER_VERSION_EXISTS = 0x2,
	CIP_OLDER_VERSION_EXISTS = 0x3,
	CIP_NAME_CONFLICT = 0x4,
	CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x5,
	CIP_EXE_SELF_REGISTERATION_TIMEOUT = 0x6,
	CIP_UNSAFE_TO_ABORT = 0x7,
	CIP_NEED_REBOOT = 0x8,
	CIP_NEED_REBOOT_UI_PERMISSION = 0x9
};

enum __MIDL_IGetBindHandle_0001 {
	BINDHANDLETYPES_APPCACHE = 0x0,
	BINDHANDLETYPES_DEPENDENCY = 0x1,
	BINDHANDLETYPES_COUNT = 0x2
};

enum __MIDL_IInternetSecurityManager_0001 {
	PUAF_DEFAULT = 0x0,
	PUAF_NOUI = 0x1,
	PUAF_ISFILE = 0x2,
	PUAF_WARN_IF_DENIED = 0x4,
	PUAF_FORCEUI_FOREGROUND = 0x8,
	PUAF_CHECK_TIFS = 0x10,
	PUAF_DONTCHECKBOXINDIALOG = 0x20,
	PUAF_TRUSTED = 0x40,
	PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
	PUAF_ENFORCERESTRICTED = 0x100,
	PUAF_NOSAVEDFILECHECK = 0x200,
	PUAF_REQUIRESAVEDFILECHECK = 0x400,
	PUAF_DONT_USE_CACHE = 0x1000,
	PUAF_RESERVED1 = 0x2000,
	PUAF_RESERVED2 = 0x4000,
	PUAF_LMZ_UNLOCKED = 0x10000,
	PUAF_LMZ_LOCKED = 0x20000,
	PUAF_DEFAULTZONEPOL = 0x40000,
	PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
	PUAF_NOUIIFLOCKED = 0x100000,
	PUAF_DRAGPROTOCOLCHECK = 0x200000
};

enum __MIDL_IInternetSecurityManager_0002 {
	PUAFOUT_DEFAULT = 0x0,
	PUAFOUT_ISLOCKZONEPOLICY = 0x1
};

enum __MIDL_IInternetSecurityManager_0003 {
	SZM_CREATE = 0x0,
	SZM_DELETE = 0x1
};

enum __MIDL_IInternetZoneManager_0001 {
	MAX_ZONE_PATH = 0x104,
	MAX_ZONE_DESCRIPTION = 0xc8
};

enum __MIDL_IInternetZoneManager_0002 {
	ZAFLAGS_CUSTOM_EDIT = 0x1,
	ZAFLAGS_ADD_SITES = 0x2,
	ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
	ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
	ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
	ZAFLAGS_NO_UI = 0x20,
	ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
	ZAFLAGS_UNC_AS_INTRANET = 0x80,
	ZAFLAGS_DETECT_INTRANET = 0x100,
	ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
	ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
	ZAFLAGS_NO_CACHE = 0x40000
};

enum __MIDL_IMonikerProp_0001 {
	MIMETYPEPROP = 0x0,
	USE_SRC_URL = 0x1,
	CLASSIDPROP = 0x2,
	TRUSTEDDOWNLOADPROP = 0x3,
	POPUPLEVELPROP = 0x4
};

enum __MIDL_IUri_0001 {
	Uri_PROPERTY_ABSOLUTE_URI = 0x0,
	Uri_PROPERTY_STRING_START = 0x0,
	Uri_PROPERTY_AUTHORITY = 0x1,
	Uri_PROPERTY_DISPLAY_URI = 0x2,
	Uri_PROPERTY_DOMAIN = 0x3,
	Uri_PROPERTY_EXTENSION = 0x4,
	Uri_PROPERTY_FRAGMENT = 0x5,
	Uri_PROPERTY_HOST = 0x6,
	Uri_PROPERTY_PASSWORD = 0x7,
	Uri_PROPERTY_PATH = 0x8,
	Uri_PROPERTY_PATH_AND_QUERY = 0x9,
	Uri_PROPERTY_QUERY = 0xa,
	Uri_PROPERTY_RAW_URI = 0xb,
	Uri_PROPERTY_SCHEME_NAME = 0xc,
	Uri_PROPERTY_USER_INFO = 0xd,
	Uri_PROPERTY_USER_NAME = 0xe,
	Uri_PROPERTY_STRING_LAST = 0xe,
	Uri_PROPERTY_HOST_TYPE = 0xf,
	Uri_PROPERTY_DWORD_START = 0xf,
	Uri_PROPERTY_PORT = 0x10,
	Uri_PROPERTY_SCHEME = 0x11,
	Uri_PROPERTY_ZONE = 0x12,
	Uri_PROPERTY_DWORD_LAST = 0x12
};

enum __MIDL_IUri_0002 {
	Uri_HOST_UNKNOWN = 0x0,
	Uri_HOST_DNS = 0x1,
	Uri_HOST_IPV4 = 0x2,
	Uri_HOST_IPV6 = 0x3,
	Uri_HOST_IDN = 0x4
};

struct __MIDL___MIDL_itf_wtypes_0000_0001_0001 {

	union __MIDL___MIDL_itf_wtypes_0000_0001_0005 {
		
		
		/*0000*/ _GUID clsid;
		/*0000*/ WCHAR * pFileExt;
		/*0000*/ WCHAR * pMimeType;
		/*0000*/ WCHAR * pProgId;
		/*0000*/ WCHAR * pFileName;
		/*0000*/ <unnamed-type-ByName> ByName;
		/*0000*/ <unnamed-type-ByObjectId> ByObjectId;
		/*0020*/
	};

	/*0000*/ ULONG tyspec;
	/*0008*/ __MIDL___MIDL_itf_wtypes_0000_0001_0005 tagged_union;
	/*0028*/
};

struct __PUBLIC_OBJECT_TYPE_INFORMATION {
	/*0000*/ _UNICODE_STRING TypeName;
	/*0010*/ ULONG Reserved[0x16];
	/*0068*/
};

struct __crt_locale_data;

struct __crt_locale_data_public {
	/*0000*/ USHORT const * _locale_pctype;
	/*0008*/ INT _locale_mb_cur_max;
	/*000c*/ UINT _locale_lc_codepage;
	/*0010*/
};

struct __crt_locale_pointers {
	/*0000*/ __crt_locale_data * locinfo;
	/*0008*/ __crt_multibyte_data * mbcinfo;
	/*0010*/
};

struct __crt_multibyte_data;

union __m128 {
	/*0000*/ float m128_f32[0x4];
	/*0000*/ ULONGLONG m128_u64[0x2];
	/*0000*/ CHAR m128_i8[0x10];
	/*0000*/ SHORT m128_i16[0x8];
	/*0000*/ INT m128_i32[0x4];
	/*0000*/ LONGLONG m128_i64[0x2];
	/*0000*/ UCHAR m128_u8[0x10];
	/*0000*/ USHORT m128_u16[0x8];
	/*0000*/ UINT m128_u32[0x4];
	/*0010*/
};

struct __m128d {
	/*0000*/ double m128d_f64[0x2];
	/*0010*/
};

union __m128i {
	/*0000*/ CHAR m128i_i8[0x10];
	/*0000*/ SHORT m128i_i16[0x8];
	/*0000*/ INT m128i_i32[0x4];
	/*0000*/ LONGLONG m128i_i64[0x2];
	/*0000*/ UCHAR m128i_u8[0x10];
	/*0000*/ USHORT m128i_u16[0x8];
	/*0000*/ UINT m128i_u32[0x4];
	/*0000*/ ULONGLONG m128i_u64[0x2];
	/*0010*/
};

union __m256 {
	/*0000*/ float m256_f32[0x8];
	/*0020*/
};

struct __m256d {
	/*0000*/ double m256d_f64[0x4];
	/*0020*/
};

union __m256i {
	/*0000*/ CHAR m256i_i8[0x20];
	/*0000*/ SHORT m256i_i16[0x10];
	/*0000*/ INT m256i_i32[0x8];
	/*0000*/ LONGLONG m256i_i64[0x4];
	/*0000*/ UCHAR m256i_u8[0x20];
	/*0000*/ USHORT m256i_u16[0x10];
	/*0000*/ UINT m256i_u32[0x8];
	/*0000*/ ULONGLONG m256i_u64[0x4];
	/*0020*/
};

union __m512 {
	/*0000*/ float m512_f32[0x10];
	/*0040*/
};

struct __m512d {
	/*0000*/ double m512d_f64[0x8];
	/*0040*/
};

union __m512i {
	/*0000*/ CHAR m512i_i8[0x40];
	/*0000*/ SHORT m512i_i16[0x20];
	/*0000*/ INT m512i_i32[0x10];
	/*0000*/ LONGLONG m512i_i64[0x8];
	/*0000*/ UCHAR m512i_u8[0x40];
	/*0000*/ USHORT m512i_u16[0x20];
	/*0000*/ UINT m512i_u32[0x10];
	/*0000*/ ULONGLONG m512i_u64[0x8];
	/*0040*/
};

union __m64 {
	/*0000*/ ULONGLONG m64_u64;
	/*0000*/ float m64_f32[0x2];
	/*0000*/ CHAR m64_i8[0x8];
	/*0000*/ SHORT m64_i16[0x4];
	/*0000*/ INT m64_i32[0x2];
	/*0000*/ LONGLONG m64_i64;
	/*0000*/ UCHAR m64_u8[0x8];
	/*0000*/ USHORT m64_u16[0x4];
	/*0000*/ UINT m64_u32[0x2];
	/*0008*/
};

struct __midl_frag12_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag17_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag24_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag2_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag33_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag7_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __noop_coroutine_frame_legacy {
	/*0000*/ void * resume;
	/*0008*/ INT flag;
	/*000c*/ INT index;
	/*0010*/
};

struct __noop_coroutine_frame_standard {
	/*0000*/ void * resume;
	/*0008*/ void * destroy;
	/*0010*/ CHAR promise;
	/*0018*/
};

struct __s_GUID {
	/*0000*/ ULONG Data1;
	/*0004*/ USHORT Data2;
	/*0006*/ USHORT Data3;
	/*0008*/ UCHAR Data4[0x8];
	/*0010*/
};

enum __scrt_module_type {
	dll = 0x0,
	exe = 0x1
};

struct __scrt_narrow_argv_policy {
	static INT configure_argv();
	/*0001*/
};

struct __scrt_narrow_environment_policy {
	static INT initialize_environment();
	/*0001*/
};

enum __scrt_native_startup_state {
	uninitialized = 0x0,
	initializing = 0x1,
	initialized = 0x2
};

struct __std_exception_data {
	/*0000*/ CHAR const * _What;
	/*0008*/ BOOLEAN _DoFree;
	/*0010*/
};

struct __std_type_info_data {
	/*0000*/ CHAR const * _UndecoratedName;
	/*0008*/ CHAR const _DecoratedName[0x1];
	void __std_type_info_data( __std_type_info_data && );
	void __std_type_info_data( __std_type_info_data const & );
	void __std_type_info_data();
	__std_type_info_data & operator=( __std_type_info_data && );
	__std_type_info_data & operator=( __std_type_info_data const & );
	/*0010*/
};

struct __type_info_node {
	/*0000*/ _SLIST_HEADER _Header;
	/*0010*/
};

struct __vcrt_assert_va_start_is_not_reference<__crt_locale_pointers * const> {
	/*0001*/
};

struct __vcrt_assert_va_start_is_not_reference<char const *> {
	/*0001*/
};

struct __vcrt_assert_va_start_is_not_reference<unsigned short const * const> {
	/*0001*/
};

struct __vcrt_assert_va_start_is_not_reference<unsigned short const *> {
	/*0001*/
};

struct __vcrt_va_list_is_reference<__crt_locale_pointers * const> {
	
	/*0001*/
};

struct __vcrt_va_list_is_reference<char const *> {
	
	/*0001*/
};

struct __vcrt_va_list_is_reference<unsigned short const * const> {
	
	/*0001*/
};

struct __vcrt_va_list_is_reference<unsigned short const *> {
	
	/*0001*/
};

struct _complex {
	/*0000*/ double x;
	/*0008*/ double y;
	/*0010*/
};

struct _cpinfo {
	/*0000*/ UINT MaxCharSize;
	/*0004*/ UCHAR DefaultChar[0x2];
	/*0006*/ UCHAR LeadByte[0xc];
	/*0014*/
};

struct _cpinfoexA {
	/*0000*/ UINT MaxCharSize;
	/*0004*/ UCHAR DefaultChar[0x2];
	/*0006*/ UCHAR LeadByte[0xc];
	/*0012*/ WCHAR UnicodeDefaultChar;
	/*0014*/ UINT CodePage;
	/*0018*/ CHAR CodePageName[0x104];
	/*011c*/
};

struct _cpinfoexW {
	/*0000*/ UINT MaxCharSize;
	/*0004*/ UCHAR DefaultChar[0x2];
	/*0006*/ UCHAR LeadByte[0xc];
	/*0012*/ WCHAR UnicodeDefaultChar;
	/*0014*/ UINT CodePage;
	/*0018*/ WCHAR CodePageName[0x104];
	/*0220*/
};

enum _crt_argv_mode {
	_crt_argv_no_arguments = 0x0,
	_crt_argv_unexpanded_arguments = 0x1,
	_crt_argv_expanded_arguments = 0x2
};

struct _currencyfmtA {
	/*0000*/ UINT NumDigits;
	/*0004*/ UINT LeadingZero;
	/*0008*/ UINT Grouping;
	/*0010*/ CHAR * lpDecimalSep;
	/*0018*/ CHAR * lpThousandSep;
	/*0020*/ UINT NegativeOrder;
	/*0024*/ UINT PositiveOrder;
	/*0028*/ CHAR * lpCurrencySymbol;
	/*0030*/
};

struct _currencyfmtW {
	/*0000*/ UINT NumDigits;
	/*0004*/ UINT LeadingZero;
	/*0008*/ UINT Grouping;
	/*0010*/ WCHAR * lpDecimalSep;
	/*0018*/ WCHAR * lpThousandSep;
	/*0020*/ UINT NegativeOrder;
	/*0024*/ UINT PositiveOrder;
	/*0028*/ WCHAR * lpCurrencySymbol;
	/*0030*/
};

struct _devicemodeA {
	/*0000*/ UCHAR dmDeviceName[0x20];
	/*0020*/ USHORT dmSpecVersion;
	/*0022*/ USHORT dmDriverVersion;
	/*0024*/ USHORT dmSize;
	/*0026*/ USHORT dmDriverExtra;
	/*0028*/ ULONG dmFields;
	/*002c*/ SHORT dmOrientation;
	/*002e*/ SHORT dmPaperSize;
	/*0030*/ SHORT dmPaperLength;
	/*0032*/ SHORT dmPaperWidth;
	/*0034*/ SHORT dmScale;
	/*0036*/ SHORT dmCopies;
	/*0038*/ SHORT dmDefaultSource;
	/*003a*/ SHORT dmPrintQuality;
	/*002c*/ _POINTL dmPosition;
	/*0034*/ ULONG dmDisplayOrientation;
	/*0038*/ ULONG dmDisplayFixedOutput;
	/*003c*/ SHORT dmColor;
	/*003e*/ SHORT dmDuplex;
	/*0040*/ SHORT dmYResolution;
	/*0042*/ SHORT dmTTOption;
	/*0044*/ SHORT dmCollate;
	/*0046*/ UCHAR dmFormName[0x20];
	/*0066*/ USHORT dmLogPixels;
	/*0068*/ ULONG dmBitsPerPel;
	/*006c*/ ULONG dmPelsWidth;
	/*0070*/ ULONG dmPelsHeight;
	/*0074*/ ULONG dmDisplayFlags;
	/*0074*/ ULONG dmNup;
	/*0078*/ ULONG dmDisplayFrequency;
	/*007c*/ ULONG dmICMMethod;
	/*0080*/ ULONG dmICMIntent;
	/*0084*/ ULONG dmMediaType;
	/*0088*/ ULONG dmDitherType;
	/*008c*/ ULONG dmReserved1;
	/*0090*/ ULONG dmReserved2;
	/*0094*/ ULONG dmPanningWidth;
	/*0098*/ ULONG dmPanningHeight;
	/*009c*/
};

struct _devicemodeW {
	/*0000*/ WCHAR dmDeviceName[0x20];
	/*0040*/ USHORT dmSpecVersion;
	/*0042*/ USHORT dmDriverVersion;
	/*0044*/ USHORT dmSize;
	/*0046*/ USHORT dmDriverExtra;
	/*0048*/ ULONG dmFields;
	/*004c*/ SHORT dmOrientation;
	/*004e*/ SHORT dmPaperSize;
	/*0050*/ SHORT dmPaperLength;
	/*0052*/ SHORT dmPaperWidth;
	/*0054*/ SHORT dmScale;
	/*0056*/ SHORT dmCopies;
	/*0058*/ SHORT dmDefaultSource;
	/*005a*/ SHORT dmPrintQuality;
	/*004c*/ _POINTL dmPosition;
	/*0054*/ ULONG dmDisplayOrientation;
	/*0058*/ ULONG dmDisplayFixedOutput;
	/*005c*/ SHORT dmColor;
	/*005e*/ SHORT dmDuplex;
	/*0060*/ SHORT dmYResolution;
	/*0062*/ SHORT dmTTOption;
	/*0064*/ SHORT dmCollate;
	/*0066*/ WCHAR dmFormName[0x20];
	/*00a6*/ USHORT dmLogPixels;
	/*00a8*/ ULONG dmBitsPerPel;
	/*00ac*/ ULONG dmPelsWidth;
	/*00b0*/ ULONG dmPelsHeight;
	/*00b4*/ ULONG dmDisplayFlags;
	/*00b4*/ ULONG dmNup;
	/*00b8*/ ULONG dmDisplayFrequency;
	/*00bc*/ ULONG dmICMMethod;
	/*00c0*/ ULONG dmICMIntent;
	/*00c4*/ ULONG dmMediaType;
	/*00c8*/ ULONG dmDitherType;
	/*00cc*/ ULONG dmReserved1;
	/*00d0*/ ULONG dmReserved2;
	/*00d4*/ ULONG dmPanningWidth;
	/*00d8*/ ULONG dmPanningHeight;
	/*00dc*/
};

struct _div_t {
	/*0000*/ INT quot;
	/*0004*/ INT rem;
	/*0008*/
};

union _double_val {
	/*0000*/ USHORT _Sh[0x4];
	/*0000*/ double _Val;
	/*0008*/
};

struct _exception {
	/*0000*/ INT type;
	/*0008*/ CHAR * name;
	/*0010*/ double arg1;
	/*0018*/ double arg2;
	/*0020*/ double retval;
	/*0028*/
};

union _float_const {
	/*0000*/ USHORT _Word[0x4];
	/*0000*/ float _Float;
	/*0000*/ double _Double;
	/*0000*/ double _Long_double;
	/*0008*/
};

union _float_val {
	/*0000*/ USHORT _Sh[0x2];
	/*0000*/ float _Val;
	/*0004*/
};

struct _heapinfo {
	/*0000*/ INT * _pentry;
	/*0008*/ ULONGLONG _size;
	/*0010*/ INT _useflag;
	/*0018*/
};

struct _iobuf {
	/*0000*/ void * _Placeholder;
	/*0008*/
};

struct _ldiv_t {
	/*0000*/ LONG quot;
	/*0004*/ LONG rem;
	/*0008*/
};

union _ldouble_val {
	/*0000*/ USHORT _Sh[0x4];
	/*0000*/ double _Val;
	/*0008*/
};

struct _lldiv_t {
	/*0000*/ LONGLONG quot;
	/*0008*/ LONGLONG rem;
	/*0010*/
};

struct _nlsversioninfo {
	/*0000*/ ULONG dwNLSVersionInfoSize;
	/*0004*/ ULONG dwNLSVersion;
	/*0008*/ ULONG dwDefinedVersion;
	/*000c*/ ULONG dwEffectiveId;
	/*0010*/ _GUID guidCustomVersion;
	/*0020*/
};

struct _nlsversioninfoex {
	/*0000*/ ULONG dwNLSVersionInfoSize;
	/*0004*/ ULONG dwNLSVersion;
	/*0008*/ ULONG dwDefinedVersion;
	/*000c*/ ULONG dwEffectiveId;
	/*0010*/ _GUID guidCustomVersion;
	/*0020*/
};

struct _numberfmtA {
	/*0000*/ UINT NumDigits;
	/*0004*/ UINT LeadingZero;
	/*0008*/ UINT Grouping;
	/*0010*/ CHAR * lpDecimalSep;
	/*0018*/ CHAR * lpThousandSep;
	/*0020*/ UINT NegativeOrder;
	/*0028*/
};

struct _numberfmtW {
	/*0000*/ UINT NumDigits;
	/*0004*/ UINT LeadingZero;
	/*0008*/ UINT Grouping;
	/*0010*/ WCHAR * lpDecimalSep;
	/*0018*/ WCHAR * lpThousandSep;
	/*0020*/ UINT NegativeOrder;
	/*0028*/
};

struct _onexit_table_t {
	/*0000*/ void (* * _first)();
	/*0008*/ void (* * _last)();
	/*0010*/ void (* * _end)();
	/*0018*/
};

struct _remoteMETAFILEPICT {
	/*0000*/ LONG mm;
	/*0004*/ LONG xExt;
	/*0008*/ LONG yExt;
	/*0010*/ _userHMETAFILE * hMF;
	/*0018*/
};

struct _s_ThrowInfo {
	/*0000*/ UINT attributes;
	/*0004*/ INT pmfnUnwind;
	/*0008*/ INT pForwardCompat;
	/*000c*/ INT pCatchableTypeArray;
	/*0010*/
};

struct _s__CatchableType {
	/*0000*/ UINT properties;
	/*0004*/ _TypeDescriptor * pType;
	/*000c*/ _PMD thisDisplacement;
	/*0018*/ INT sizeOrOffset;
	/*001c*/ void (* copyFunction)( void * );
	/*0024*/
};

struct _s__CatchableTypeArray {
	/*0000*/ INT nCatchableTypes;
	/*0004*/ _s__CatchableType const * arrayOfCatchableTypes[];
	/*0004*/
};

struct _s__RTTIBaseClassArray {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[];
	/*0004*/
};

struct _s__RTTIBaseClassDescriptor {
	/*0000*/ _TypeDescriptor * pTypeDescriptor;
	/*0008*/ ULONG numContainedBases;
	/*000c*/ _PMD where;
	/*0018*/ ULONG attributes;
	/*001c*/ _s__RTTIClassHierarchyDescriptor const * pClassDescriptor;
	/*0024*/
};

struct _s__RTTIClassHierarchyDescriptor {
	/*0000*/ ULONG signature;
	/*0004*/ ULONG attributes;
	/*0008*/ ULONG numBaseClasses;
	/*000c*/ _s__RTTIBaseClassArray const * pBaseClassArray;
	/*0014*/
};

struct _s__RTTICompleteObjectLocator2 {
	/*0000*/ ULONG signature;
	/*0004*/ ULONG offset;
	/*0008*/ ULONG cdOffset;
	/*000c*/ _TypeDescriptor * pTypeDescriptor;
	/*0014*/ _s__RTTIClassHierarchyDescriptor const * pClassDescriptor;
	/*001c*/ _s__RTTICompleteObjectLocator2 const * pSelf;
	/*0024*/
};

struct _s__ThrowInfo {
	/*0000*/ UINT attributes;
	/*0004*/ void (* pmfnUnwind)( void * );
	/*000c*/ INT (* pForwardCompat)( ... );
	/*0014*/ _s__CatchableTypeArray const * pCatchableTypeArray;
	/*001c*/
};

struct _stat32 {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0014*/ LONG st_size;
	/*0018*/ LONG st_atime;
	/*001c*/ LONG st_mtime;
	/*0020*/ LONG st_ctime;
	/*0024*/
};

struct _stat32i64 {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0018*/ LONGLONG st_size;
	/*0020*/ LONG st_atime;
	/*0024*/ LONG st_mtime;
	/*0028*/ LONG st_ctime;
	/*0030*/
};

struct _stat64 {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0018*/ LONGLONG st_size;
	/*0020*/ LONGLONG st_atime;
	/*0028*/ LONGLONG st_mtime;
	/*0030*/ LONGLONG st_ctime;
	/*0038*/
};

struct _stat64i32 {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0014*/ LONG st_size;
	/*0018*/ LONGLONG st_atime;
	/*0020*/ LONGLONG st_mtime;
	/*0028*/ LONGLONG st_ctime;
	/*0030*/
};

enum _system_handle_t {
	SYSTEM_HANDLE_FILE = 0x0,
	SYSTEM_HANDLE_SEMAPHORE = 0x1,
	SYSTEM_HANDLE_EVENT = 0x2,
	SYSTEM_HANDLE_MUTEX = 0x3,
	SYSTEM_HANDLE_PROCESS = 0x4,
	SYSTEM_HANDLE_TOKEN = 0x5,
	SYSTEM_HANDLE_SECTION = 0x6,
	SYSTEM_HANDLE_REG_KEY = 0x7,
	SYSTEM_HANDLE_THREAD = 0x8,
	SYSTEM_HANDLE_COMPOSITION_OBJECT = 0x9,
	SYSTEM_HANDLE_SOCKET = 0xa,
	SYSTEM_HANDLE_JOB = 0xb,
	SYSTEM_HANDLE_PIPE = 0xc,
	SYSTEM_HANDLE_MAX = 0xc,
	SYSTEM_HANDLE_INVALID = 0xff
};

struct _tagAUTHENTICATEINFO {
	/*0000*/ ULONG dwFlags;
	/*0004*/ ULONG dwReserved;
	/*0008*/
};

struct _tagBINDINFO {
	/*0000*/ ULONG cbSize;
	/*0008*/ WCHAR * szExtraInfo;
	/*0010*/ tagSTGMEDIUM stgmedData;
	/*0028*/ ULONG grfBindInfoF;
	/*002c*/ ULONG dwBindVerb;
	/*0030*/ WCHAR * szCustomVerb;
	/*0038*/ ULONG cbstgmedData;
	/*003c*/ ULONG dwOptions;
	/*0040*/ ULONG dwOptionsFlags;
	/*0044*/ ULONG dwCodePage;
	/*0048*/ _SECURITY_ATTRIBUTES securityAttributes;
	/*0060*/ _GUID iid;
	/*0070*/ IUnknown * pUnk;
	/*0078*/ ULONG dwReserved;
	/*0080*/
};

struct _tagCODEBASEHOLD {
	/*0000*/ ULONG cbSize;
	/*0008*/ WCHAR * szDistUnit;
	/*0010*/ WCHAR * szCodeBase;
	/*0018*/ ULONG dwVersionMS;
	/*001c*/ ULONG dwVersionLS;
	/*0020*/ ULONG dwStyle;
	/*0028*/
};

struct _tagDATAINFO {
	/*0000*/ ULONG ulTotalSize;
	/*0004*/ ULONG ulavrPacketSize;
	/*0008*/ ULONG ulConnectSpeed;
	/*000c*/ ULONG ulProcessorSpeed;
	/*0010*/
};

enum _tagEXPR_TOKEN {
	FC_EXPR_START = 0x0,
	FC_EXPR_ILLEGAL = 0x0,
	FC_EXPR_CONST32 = 0x1,
	FC_EXPR_CONST64 = 0x2,
	FC_EXPR_VAR = 0x3,
	FC_EXPR_OPER = 0x4,
	FC_EXPR_NOOP = 0x5,
	FC_EXPR_END = 0x6
};

struct _tagHIT_LOGGING_INFO {
	/*0000*/ ULONG dwStructSize;
	/*0008*/ CHAR * lpszLoggedUrlName;
	/*0010*/ _SYSTEMTIME StartTime;
	/*0020*/ _SYSTEMTIME EndTime;
	/*0030*/ CHAR * lpszExtendedInfo;
	/*0038*/
};

enum _tagINTERNETFEATURELIST {
	FEATURE_OBJECT_CACHING = 0x0,
	FEATURE_ZONE_ELEVATION = 0x1,
	FEATURE_MIME_HANDLING = 0x2,
	FEATURE_MIME_SNIFFING = 0x3,
	FEATURE_WINDOW_RESTRICTIONS = 0x4,
	FEATURE_WEBOC_POPUPMANAGEMENT = 0x5,
	FEATURE_BEHAVIORS = 0x6,
	FEATURE_DISABLE_MK_PROTOCOL = 0x7,
	FEATURE_LOCALMACHINE_LOCKDOWN = 0x8,
	FEATURE_SECURITYBAND = 0x9,
	FEATURE_RESTRICT_ACTIVEXINSTALL = 0xa,
	FEATURE_VALIDATE_NAVIGATE_URL = 0xb,
	FEATURE_RESTRICT_FILEDOWNLOAD = 0xc,
	FEATURE_ADDON_MANAGEMENT = 0xd,
	FEATURE_PROTOCOL_LOCKDOWN = 0xe,
	FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 0xf,
	FEATURE_SAFE_BINDTOOBJECT = 0x10,
	FEATURE_UNC_SAVEDFILECHECK = 0x11,
	FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 0x12,
	FEATURE_TABBED_BROWSING = 0x13,
	FEATURE_SSLUX = 0x14,
	FEATURE_DISABLE_NAVIGATION_SOUNDS = 0x15,
	FEATURE_DISABLE_LEGACY_COMPRESSION = 0x16,
	FEATURE_FORCE_ADDR_AND_STATUS = 0x17,
	FEATURE_XMLHTTP = 0x18,
	FEATURE_DISABLE_TELNET_PROTOCOL = 0x19,
	FEATURE_FEEDS = 0x1a,
	FEATURE_BLOCK_INPUT_PROMPTS = 0x1b,
	FEATURE_ENTRY_COUNT = 0x1c
};

enum _tagOIBDG_FLAGS {
	OIBDG_APARTMENTTHREADED = 0x100,
	OIBDG_DATAONLY = 0x1000
};

enum _tagPARSEACTION {
	PARSE_CANONICALIZE = 0x1,
	PARSE_FRIENDLY = 0x2,
	PARSE_SECURITY_URL = 0x3,
	PARSE_ROOTDOCUMENT = 0x4,
	PARSE_DOCUMENT = 0x5,
	PARSE_ANCHOR = 0x6,
	PARSE_ENCODE_IS_UNESCAPE = 0x7,
	PARSE_DECODE_IS_ESCAPE = 0x8,
	PARSE_PATH_FROM_URL = 0x9,
	PARSE_URL_FROM_PATH = 0xa,
	PARSE_MIME = 0xb,
	PARSE_SERVER = 0xc,
	PARSE_SCHEMA = 0xd,
	PARSE_SITE = 0xe,
	PARSE_DOMAIN = 0xf,
	PARSE_LOCATION = 0x10,
	PARSE_SECURITY_DOMAIN = 0x11,
	PARSE_ESCAPE = 0x12,
	PARSE_UNESCAPE = 0x13
};

enum _tagPI_FLAGS {
	PI_PARSE_URL = 0x1,
	PI_FILTER_MODE = 0x2,
	PI_FORCE_ASYNC = 0x4,
	PI_USE_WORKERTHREAD = 0x8,
	PI_MIMEVERIFICATION = 0x10,
	PI_CLSIDLOOKUP = 0x20,
	PI_DATAPROGRESS = 0x40,
	PI_SYNCHRONOUS = 0x80,
	PI_APARTMENTTHREADED = 0x100,
	PI_CLASSINSTALL = 0x200,
	PI_PASSONBINDCTX = 0x2000,
	PI_NOMIMEHANDLER = 0x8000,
	PI_LOADAPPDIRECT = 0x4000,
	PD_FORCE_SWITCH = 0x10000,
	PI_PREFERDEFAULTHANDLER = 0x20000
};

struct _tagPROTOCOLDATA {
	/*0000*/ ULONG grfFlags;
	/*0004*/ ULONG dwState;
	/*0008*/ void * pData;
	/*0010*/ ULONG cbData;
	/*0018*/
};

struct _tagPROTOCOLFILTERDATA {
	/*0000*/ ULONG cbSize;
	/*0008*/ IInternetProtocolSink * pProtocolSink;
	/*0010*/ IInternetProtocol * pProtocol;
	/*0018*/ IUnknown * pUnk;
	/*0020*/ ULONG dwFilterFlags;
	/*0028*/
};

struct _tagPROTOCOL_ARGUMENT {
	/*0000*/ WCHAR const * szMethod;
	/*0008*/ WCHAR const * szTargetUrl;
	/*0010*/
};

enum _tagPSUACTION {
	PSU_DEFAULT = 0x1,
	PSU_SECURITY_URL_ONLY = 0x2
};

enum _tagQUERYOPTION {
	QUERY_EXPIRATION_DATE = 0x1,
	QUERY_TIME_OF_LAST_CHANGE = 0x2,
	QUERY_CONTENT_ENCODING = 0x3,
	QUERY_CONTENT_TYPE = 0x4,
	QUERY_REFRESH = 0x5,
	QUERY_RECOMBINE = 0x6,
	QUERY_CAN_NAVIGATE = 0x7,
	QUERY_USES_NETWORK = 0x8,
	QUERY_IS_CACHED = 0x9,
	QUERY_IS_INSTALLEDENTRY = 0xa,
	QUERY_IS_CACHED_OR_MAPPED = 0xb,
	QUERY_USES_CACHE = 0xc,
	QUERY_IS_SECURE = 0xd,
	QUERY_IS_SAFE = 0xe,
	QUERY_USES_HISTORYFOLDER = 0xf,
	QUERY_IS_CACHED_AND_USABLE_OFFLINE = 0x10
};

struct _tagRemBINDINFO {
	/*0000*/ ULONG cbSize;
	/*0008*/ WCHAR * szExtraInfo;
	/*0010*/ ULONG grfBindInfoF;
	/*0014*/ ULONG dwBindVerb;
	/*0018*/ WCHAR * szCustomVerb;
	/*0020*/ ULONG cbstgmedData;
	/*0024*/ ULONG dwOptions;
	/*0028*/ ULONG dwOptionsFlags;
	/*002c*/ ULONG dwCodePage;
	/*0030*/ _REMSECURITY_ATTRIBUTES securityAttributes;
	/*003c*/ _GUID iid;
	/*0050*/ IUnknown * pUnk;
	/*0058*/ ULONG dwReserved;
	/*0060*/
};

struct _tagSOFTDISTINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG dwAdState;
	/*0010*/ WCHAR * szTitle;
	/*0018*/ WCHAR * szAbstract;
	/*0020*/ WCHAR * szHREF;
	/*0028*/ ULONG dwInstalledVersionMS;
	/*002c*/ ULONG dwInstalledVersionLS;
	/*0030*/ ULONG dwUpdateVersionMS;
	/*0034*/ ULONG dwUpdateVersionLS;
	/*0038*/ ULONG dwAdvertisedVersionMS;
	/*003c*/ ULONG dwAdvertisedVersionLS;
	/*0040*/ ULONG dwReserved;
	/*0048*/
};

struct _tagStartParam {
	/*0000*/ _GUID iid;
	/*0010*/ IBindCtx * pIBindCtx;
	/*0018*/ IUnknown * pItf;
	/*0020*/
};

struct _tagpropertykey {
	/*0000*/ _GUID fmtid;
	/*0010*/ ULONG pid;
	/*0014*/
};

struct _userBITMAP {
	/*0000*/ LONG bmType;
	/*0004*/ LONG bmWidth;
	/*0008*/ LONG bmHeight;
	/*000c*/ LONG bmWidthBytes;
	/*0010*/ USHORT bmPlanes;
	/*0012*/ USHORT bmBitsPixel;
	/*0014*/ ULONG cbSize;
	/*0018*/ UCHAR pBuffer[0x1];
	/*001c*/
};

struct _userCLIPFORMAT {

	union __MIDL_IWinTypes_0001 {
		/*0000*/ ULONG dwValue;
		/*0000*/ WCHAR * pwszName;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0001 u;
	/*0010*/
};

struct _userFLAG_STGMEDIUM {
	/*0000*/ LONG ContextFlags;
	/*0004*/ LONG fPassOwnership;
	/*0008*/ _userSTGMEDIUM Stgmed;
	/*0010*/
};

struct _userHBITMAP {

	union __MIDL_IWinTypes_0007 {
		/*0000*/ LONG hInproc;
		/*0000*/ _userBITMAP * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0007 u;
	/*0010*/
};

struct _userHENHMETAFILE {

	union __MIDL_IWinTypes_0006 {
		/*0000*/ LONG hInproc;
		/*0000*/ _BYTE_BLOB * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0006 u;
	/*0010*/
};

struct _userHGLOBAL {

	union __MIDL_IWinTypes_0003 {
		/*0000*/ LONG hInproc;
		/*0000*/ _FLAGGED_BYTE_BLOB * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0003 u;
	/*0010*/
};

struct _userHMETAFILE {

	union __MIDL_IWinTypes_0004 {
		/*0000*/ LONG hInproc;
		/*0000*/ _BYTE_BLOB * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0004 u;
	/*0010*/
};

struct _userHMETAFILEPICT {

	union __MIDL_IWinTypes_0005 {
		/*0000*/ LONG hInproc;
		/*0000*/ _remoteMETAFILEPICT * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0005 u;
	/*0010*/
};

struct _userHPALETTE {

	union __MIDL_IWinTypes_0008 {
		/*0000*/ LONG hInproc;
		/*0000*/ tagLOGPALETTE * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0008 u;
	/*0010*/
};

struct _userSTGMEDIUM {

	struct _STGMEDIUM_UNION {
	
		union __MIDL_IAdviseSink_0003 {
			/*0000*/ _userHMETAFILEPICT * hMetaFilePict;
			/*0000*/ _userHENHMETAFILE * hHEnhMetaFile;
			/*0000*/ _GDI_OBJECT * hGdiHandle;
			/*0000*/ _userHGLOBAL * hGlobal;
			/*0000*/ WCHAR * lpszFileName;
			/*0000*/ _BYTE_BLOB * pstm;
			/*0000*/ _BYTE_BLOB * pstg;
			/*0008*/
		};

		/*0000*/ ULONG tymed;
		/*0008*/ __MIDL_IAdviseSink_0003 u;
		/*0010*/
	};

	/*0000*/ IUnknown * pUnkForRelease;
	/*0008*/
};

struct _wfinddata32_t {
	/*0000*/ UINT attrib;
	/*0004*/ LONG time_create;
	/*0008*/ LONG time_access;
	/*000c*/ LONG time_write;
	/*0010*/ ULONG size;
	/*0014*/ WCHAR name[0x104];
	/*021c*/
};

struct _wfinddata32i64_t {
	/*0000*/ UINT attrib;
	/*0004*/ LONG time_create;
	/*0008*/ LONG time_access;
	/*000c*/ LONG time_write;
	/*0010*/ LONGLONG size;
	/*0018*/ WCHAR name[0x104];
	/*0220*/
};

struct _wfinddata64_t {
	/*0000*/ UINT attrib;
	/*0008*/ LONGLONG time_create;
	/*0010*/ LONGLONG time_access;
	/*0018*/ LONGLONG time_write;
	/*0020*/ LONGLONG size;
	/*0028*/ WCHAR name[0x104];
	/*0230*/
};

struct _wfinddata64i32_t {
	/*0000*/ UINT attrib;
	/*0008*/ LONGLONG time_create;
	/*0010*/ LONGLONG time_access;
	/*0018*/ LONGLONG time_write;
	/*0020*/ ULONG size;
	/*0024*/ WCHAR name[0x104];
	/*0230*/
};

struct _windows2Estorage2Ecompression_MIDL_PROC_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x103];
	/*0106*/
};

struct _windows2Estorage2Ecompression_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x71];
	/*0074*/
};

struct _wireBRECORD {
	/*0000*/ ULONG fFlags;
	/*0004*/ ULONG clSize;
	/*0008*/ IRecordInfo * pRecInfo;
	/*0010*/ UCHAR * pRecord;
	/*0018*/
};

struct _wireSAFEARRAY {
	/*0000*/ USHORT cDims;
	/*0002*/ USHORT fFeatures;
	/*0004*/ ULONG cbElements;
	/*0008*/ ULONG cLocks;
	/*0010*/ _wireSAFEARRAY_UNION uArrayStructs;
	/*0038*/ tagSAFEARRAYBOUND rgsabound[0x1];
	/*0040*/
};

struct _wireSAFEARRAY_UNION {

	union __MIDL_IOleAutomationTypes_0001 {
		/*0000*/ _wireSAFEARR_BSTR BstrStr;
		/*0000*/ _wireSAFEARR_UNKNOWN UnknownStr;
		/*0000*/ _wireSAFEARR_DISPATCH DispatchStr;
		/*0000*/ _wireSAFEARR_VARIANT VariantStr;
		/*0000*/ _wireSAFEARR_BRECORD RecordStr;
		/*0000*/ _wireSAFEARR_HAVEIID HaveIidStr;
		/*0000*/ _BYTE_SIZEDARR ByteStr;
		/*0000*/ _SHORT_SIZEDARR WordStr;
		/*0000*/ _LONG_SIZEDARR LongStr;
		/*0000*/ _HYPER_SIZEDARR HyperStr;
		/*0020*/
	};

	/*0000*/ ULONG sfType;
	/*0008*/ __MIDL_IOleAutomationTypes_0001 u;
	/*0028*/
};

struct _wireSAFEARR_BRECORD {
	/*0000*/ ULONG Size;
	/*0008*/ _wireBRECORD * * aRecord;
	/*0010*/
};

struct _wireSAFEARR_BSTR {
	/*0000*/ ULONG Size;
	/*0008*/ _FLAGGED_WORD_BLOB * * aBstr;
	/*0010*/
};

struct _wireSAFEARR_DISPATCH {
	/*0000*/ ULONG Size;
	/*0008*/ IDispatch * * apDispatch;
	/*0010*/
};

struct _wireSAFEARR_HAVEIID {
	/*0000*/ ULONG Size;
	/*0008*/ IUnknown * * apUnknown;
	/*0010*/ _GUID iid;
	/*0020*/
};

struct _wireSAFEARR_UNKNOWN {
	/*0000*/ ULONG Size;
	/*0008*/ IUnknown * * apUnknown;
	/*0010*/
};

struct _wireSAFEARR_VARIANT {
	/*0000*/ ULONG Size;
	/*0008*/ _wireVARIANT * * aVariant;
	/*0010*/
};

struct _wireVARIANT {
	/*0000*/ ULONG clSize;
	/*0004*/ ULONG rpcReserved;
	/*0008*/ USHORT vt;
	/*000a*/ USHORT wReserved1;
	/*000c*/ USHORT wReserved2;
	/*000e*/ USHORT wReserved3;
	/*0010*/ LONGLONG llVal;
	/*0010*/ LONG lVal;
	/*0010*/ UCHAR bVal;
	/*0010*/ SHORT iVal;
	/*0010*/ float fltVal;
	/*0010*/ double dblVal;
	/*0010*/ SHORT boolVal;
	/*0010*/ LONG scode;
	/*0010*/ tagCY cyVal;
	/*0010*/ double date;
	/*0010*/ _FLAGGED_WORD_BLOB * bstrVal;
	/*0010*/ IUnknown * punkVal;
	/*0010*/ IDispatch * pdispVal;
	/*0010*/ _wireSAFEARRAY * * parray;
	/*0010*/ _wireBRECORD * brecVal;
	/*0010*/ UCHAR * pbVal;
	/*0010*/ SHORT * piVal;
	/*0010*/ LONG * plVal;
	/*0010*/ LONGLONG * pllVal;
	/*0010*/ float * pfltVal;
	/*0010*/ double * pdblVal;
	/*0010*/ SHORT * pboolVal;
	/*0010*/ LONG * pscode;
	/*0010*/ tagCY * pcyVal;
	/*0010*/ double * pdate;
	/*0010*/ _FLAGGED_WORD_BLOB * * pbstrVal;
	/*0010*/ IUnknown * * ppunkVal;
	/*0010*/ IDispatch * * ppdispVal;
	/*0010*/ _wireSAFEARRAY * * * pparray;
	/*0010*/ _wireVARIANT * * pvarVal;
	/*0010*/ CHAR cVal;
	/*0010*/ USHORT uiVal;
	/*0010*/ ULONG ulVal;
	/*0010*/ ULONGLONG ullVal;
	/*0010*/ INT intVal;
	/*0010*/ UINT uintVal;
	/*0010*/ tagDEC decVal;
	/*0010*/ tagDEC * pdecVal;
	/*0010*/ CHAR * pcVal;
	/*0010*/ USHORT * puiVal;
	/*0010*/ ULONG * pulVal;
	/*0010*/ ULONGLONG * pullVal;
	/*0010*/ INT * pintVal;
	/*0010*/ UINT * puintVal;
	/*0020*/
};

struct _xml_error {
	/*0000*/ UINT _nLine;
	/*0008*/ WCHAR * _pchBuf;
	/*0010*/ UINT _cchBuf;
	/*0014*/ UINT _ich;
	/*0018*/ WCHAR * _pszFound;
	/*0020*/ WCHAR * _pszExpected;
	/*0028*/ ULONG _reserved1;
	/*002c*/ ULONG _reserved2;
	/*0030*/
};

struct provider_info {
	/*0000*/ ULONG (* pi_R0_1val)( void * , val_context * , ULONG , void * , ULONG * , ULONG );
	/*0008*/ ULONG (* pi_R0_allvals)( void * , val_context * , ULONG , void * , ULONG * , ULONG );
	/*0010*/ ULONG (* pi_R3_1val)( void * , val_context * , ULONG , void * , ULONG * , ULONG );
	/*0018*/ ULONG (* pi_R3_allvals)( void * , val_context * , ULONG , void * , ULONG * , ULONG );
	/*0020*/ ULONG pi_flags;
	/*0028*/ void * pi_key_context;
	/*0030*/
};

struct pvalueA {
	/*0000*/ CHAR * pv_valuename;
	/*0008*/ INT pv_valuelen;
	/*0010*/ void * pv_value_context;
	/*0018*/ ULONG pv_type;
	/*0020*/
};

struct pvalueW {
	/*0000*/ WCHAR * pv_valuename;
	/*0008*/ INT pv_valuelen;
	/*0010*/ void * pv_value_context;
	/*0018*/ ULONG pv_type;
	/*0020*/
};

struct rmp_seg {
	/*0000*/ ULONGLONG rmp_gpa;
	/*0008*/ CHAR rmp_entry;
	/*0009*/ CHAR rmp_pageSize;
	/*000a*/ CHAR rmp_pageMark;
	/*000b*/ CHAR rmp_reserved;
	/*000c*/ INT rmp_ASID;
	/*0010*/
};

struct stat {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0014*/ LONG st_size;
	/*0018*/ LONGLONG st_atime;
	/*0020*/ LONGLONG st_mtime;
	/*0028*/ LONGLONG st_ctime;
	/*0030*/
};

struct tagABORTPATH {
	/*0000*/ tagEMR emr;
	/*0008*/
};

struct tagACCEL {
	/*0000*/ UCHAR fVirt;
	/*0002*/ USHORT key;
	/*0004*/ USHORT cmd;
	/*0006*/
};

struct tagACCESSTIMEOUT {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG iTimeOutMSec;
	/*000c*/
};

struct tagACTCTXA {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ CHAR const * lpSource;
	/*0010*/ USHORT wProcessorArchitecture;
	/*0012*/ USHORT wLangId;
	/*0018*/ CHAR const * lpAssemblyDirectory;
	/*0020*/ CHAR const * lpResourceName;
	/*0028*/ CHAR const * lpApplicationName;
	/*0030*/ HINSTANCE__ * hModule;
	/*0038*/
};

struct tagACTCTXW {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ WCHAR const * lpSource;
	/*0010*/ USHORT wProcessorArchitecture;
	/*0012*/ USHORT wLangId;
	/*0018*/ WCHAR const * lpAssemblyDirectory;
	/*0020*/ WCHAR const * lpResourceName;
	/*0028*/ WCHAR const * lpApplicationName;
	/*0030*/ HINSTANCE__ * hModule;
	/*0038*/
};

struct tagACTCTX_SECTION_KEYED_DATA {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG ulDataFormatVersion;
	/*0008*/ void * lpData;
	/*0010*/ ULONG ulLength;
	/*0018*/ void * lpSectionGlobalData;
	/*0020*/ ULONG ulSectionGlobalDataLength;
	/*0028*/ void * lpSectionBase;
	/*0030*/ ULONG ulSectionTotalLength;
	/*0038*/ void * hActCtx;
	/*0040*/ ULONG ulAssemblyRosterIndex;
	/*0044*/ ULONG ulFlags;
	/*0048*/ tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
	/*0070*/
};

struct tagACTCTX_SECTION_KEYED_DATA_2600 {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG ulDataFormatVersion;
	/*0008*/ void * lpData;
	/*0010*/ ULONG ulLength;
	/*0018*/ void * lpSectionGlobalData;
	/*0020*/ ULONG ulSectionGlobalDataLength;
	/*0028*/ void * lpSectionBase;
	/*0030*/ ULONG ulSectionTotalLength;
	/*0038*/ void * hActCtx;
	/*0040*/ ULONG ulAssemblyRosterIndex;
	/*0048*/
};

struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
	/*0000*/ void * lpInformation;
	/*0008*/ void * lpSectionBase;
	/*0010*/ ULONG ulSectionLength;
	/*0018*/ void * lpSectionGlobalDataBase;
	/*0020*/ ULONG ulSectionGlobalDataLength;
	/*0028*/
};

enum tagACTIVATIONTYPE {
	ACTIVATIONTYPE_UNCATEGORIZED = 0x0,
	ACTIVATIONTYPE_FROM_MONIKER = 0x1,
	ACTIVATIONTYPE_FROM_DATA = 0x2,
	ACTIVATIONTYPE_FROM_STORAGE = 0x4,
	ACTIVATIONTYPE_FROM_STREAM = 0x8,
	ACTIVATIONTYPE_FROM_FILE = 0x10
};

enum tagADVF {
	ADVF_NODATA = 0x1,
	ADVF_PRIMEFIRST = 0x2,
	ADVF_ONLYONCE = 0x4,
	ADVF_DATAONSTOP = 0x40,
	ADVFCACHE_NOHANDLER = 0x8,
	ADVFCACHE_FORCEBUILTIN = 0x10,
	ADVFCACHE_ONSAVE = 0x20
};

struct tagALTTABINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ INT cItems;
	/*0008*/ INT cColumns;
	/*000c*/ INT cRows;
	/*0010*/ INT iColFocus;
	/*0014*/ INT iRowFocus;
	/*0018*/ INT cxItem;
	/*001c*/ INT cyItem;
	/*0020*/ tagPOINT ptStart;
	/*0028*/
};

struct tagANIMATIONINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iMinAnimate;
	/*0008*/
};

struct tagARRAYDESC {
	/*0000*/ tagTYPEDESC tdescElem;
	/*0010*/ USHORT cDims;
	/*0014*/ tagSAFEARRAYBOUND rgbounds[0x1];
	/*0020*/
};

enum tagAR_STATE {
	AR_ENABLED = 0x0,
	AR_DISABLED = 0x1,
	AR_SUPPRESSED = 0x2,
	AR_REMOTESESSION = 0x4,
	AR_MULTIMON = 0x8,
	AR_NOSENSOR = 0x10,
	AR_NOT_SUPPORTED = 0x20,
	AR_DOCKED = 0x40,
	AR_LAPTOP = 0x80
};

struct tagAUDIODESCRIPTION {
	/*0000*/ UINT cbSize;
	/*0004*/ INT Enabled;
	/*0008*/ ULONG Locale;
	/*000c*/
};

struct tagAXESLISTA {
	/*0000*/ ULONG axlReserved;
	/*0004*/ ULONG axlNumAxes;
	/*0008*/ tagAXISINFOA axlAxisInfo[0x10];
	/*0188*/
};

struct tagAXESLISTW {
	/*0000*/ ULONG axlReserved;
	/*0004*/ ULONG axlNumAxes;
	/*0008*/ tagAXISINFOW axlAxisInfo[0x10];
	/*0288*/
};

struct tagAXISINFOA {
	/*0000*/ LONG axMinValue;
	/*0004*/ LONG axMaxValue;
	/*0008*/ UCHAR axAxisName[0x10];
	/*0018*/
};

struct tagAXISINFOW {
	/*0000*/ LONG axMinValue;
	/*0004*/ LONG axMaxValue;
	/*0008*/ WCHAR axAxisName[0x10];
	/*0028*/
};

enum tagApplicationType {
	ServerApplication = 0x0,
	LibraryApplication = 0x1
};

union tagBINDPTR {
	/*0000*/ tagFUNCDESC * lpfuncdesc;
	/*0000*/ tagVARDESC * lpvardesc;
	/*0000*/ ITypeComp * lptcomp;
	/*0008*/
};

enum tagBINDSPEED {
	BINDSPEED_INDEFINITE = 0x1,
	BINDSPEED_MODERATE = 0x2,
	BINDSPEED_IMMEDIATE = 0x3
};

enum tagBINDSTATUS {
	BINDSTATUS_FINDINGRESOURCE = 0x1,
	BINDSTATUS_CONNECTING = 0x2,
	BINDSTATUS_REDIRECTING = 0x3,
	BINDSTATUS_BEGINDOWNLOADDATA = 0x4,
	BINDSTATUS_DOWNLOADINGDATA = 0x5,
	BINDSTATUS_ENDDOWNLOADDATA = 0x6,
	BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 0x7,
	BINDSTATUS_INSTALLINGCOMPONENTS = 0x8,
	BINDSTATUS_ENDDOWNLOADCOMPONENTS = 0x9,
	BINDSTATUS_USINGCACHEDCOPY = 0xa,
	BINDSTATUS_SENDINGREQUEST = 0xb,
	BINDSTATUS_CLASSIDAVAILABLE = 0xc,
	BINDSTATUS_MIMETYPEAVAILABLE = 0xd,
	BINDSTATUS_CACHEFILENAMEAVAILABLE = 0xe,
	BINDSTATUS_BEGINSYNCOPERATION = 0xf,
	BINDSTATUS_ENDSYNCOPERATION = 0x10,
	BINDSTATUS_BEGINUPLOADDATA = 0x11,
	BINDSTATUS_UPLOADINGDATA = 0x12,
	BINDSTATUS_ENDUPLOADDATA = 0x13,
	BINDSTATUS_PROTOCOLCLASSID = 0x14,
	BINDSTATUS_ENCODING = 0x15,
	BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 0x16,
	BINDSTATUS_CLASSINSTALLLOCATION = 0x17,
	BINDSTATUS_DECODING = 0x18,
	BINDSTATUS_LOADINGMIMEHANDLER = 0x19,
	BINDSTATUS_CONTENTDISPOSITIONATTACH = 0x1a,
	BINDSTATUS_FILTERREPORTMIMETYPE = 0x1b,
	BINDSTATUS_CLSIDCANINSTANTIATE = 0x1c,
	BINDSTATUS_IUNKNOWNAVAILABLE = 0x1d,
	BINDSTATUS_DIRECTBIND = 0x1e,
	BINDSTATUS_RAWMIMETYPE = 0x1f,
	BINDSTATUS_PROXYDETECTING = 0x20,
	BINDSTATUS_ACCEPTRANGES = 0x21,
	BINDSTATUS_COOKIE_SENT = 0x22,
	BINDSTATUS_COMPACT_POLICY_RECEIVED = 0x23,
	BINDSTATUS_COOKIE_SUPPRESSED = 0x24,
	BINDSTATUS_COOKIE_STATE_UNKNOWN = 0x25,
	BINDSTATUS_COOKIE_STATE_ACCEPT = 0x26,
	BINDSTATUS_COOKIE_STATE_REJECT = 0x27,
	BINDSTATUS_COOKIE_STATE_PROMPT = 0x28,
	BINDSTATUS_COOKIE_STATE_LEASH = 0x29,
	BINDSTATUS_COOKIE_STATE_DOWNGRADE = 0x2a,
	BINDSTATUS_POLICY_HREF = 0x2b,
	BINDSTATUS_P3P_HEADER = 0x2c,
	BINDSTATUS_SESSION_COOKIE_RECEIVED = 0x2d,
	BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 0x2e,
	BINDSTATUS_SESSION_COOKIES_ALLOWED = 0x2f,
	BINDSTATUS_CACHECONTROL = 0x30,
	BINDSTATUS_CONTENTDISPOSITIONFILENAME = 0x31,
	BINDSTATUS_MIMETEXTPLAINMISMATCH = 0x32,
	BINDSTATUS_PUBLISHERAVAILABLE = 0x33,
	BINDSTATUS_DISPLAYNAMEAVAILABLE = 0x34,
	BINDSTATUS_SSLUX_NAVBLOCKED = 0x35,
	BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 0x36,
	BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 0x37,
	BINDSTATUS_64BIT_PROGRESS = 0x38,
	BINDSTATUS_LAST = 0x38,
	BINDSTATUS_RESERVED_0 = 0x39,
	BINDSTATUS_RESERVED_1 = 0x3a,
	BINDSTATUS_RESERVED_2 = 0x3b,
	BINDSTATUS_RESERVED_3 = 0x3c,
	BINDSTATUS_RESERVED_4 = 0x3d,
	BINDSTATUS_RESERVED_5 = 0x3e,
	BINDSTATUS_RESERVED_6 = 0x3f,
	BINDSTATUS_RESERVED_7 = 0x40,
	BINDSTATUS_RESERVED_8 = 0x41,
	BINDSTATUS_RESERVED_9 = 0x42,
	BINDSTATUS_RESERVED_A = 0x43,
	BINDSTATUS_RESERVED_B = 0x44,
	BINDSTATUS_RESERVED_C = 0x45,
	BINDSTATUS_RESERVED_D = 0x46,
	BINDSTATUS_RESERVED_E = 0x47,
	BINDSTATUS_RESERVED_F = 0x48,
	BINDSTATUS_RESERVED_10 = 0x49,
	BINDSTATUS_RESERVED_11 = 0x4a,
	BINDSTATUS_RESERVED_12 = 0x4b,
	BINDSTATUS_RESERVED_13 = 0x4c,
	BINDSTATUS_RESERVED_14 = 0x4d,
	BINDSTATUS_LAST_PRIVATE = 0x4d
};

enum tagBINDSTRING {
	BINDSTRING_HEADERS = 0x1,
	BINDSTRING_ACCEPT_MIMES = 0x2,
	BINDSTRING_EXTRA_URL = 0x3,
	BINDSTRING_LANGUAGE = 0x4,
	BINDSTRING_USERNAME = 0x5,
	BINDSTRING_PASSWORD = 0x6,
	BINDSTRING_UA_PIXELS = 0x7,
	BINDSTRING_UA_COLOR = 0x8,
	BINDSTRING_OS = 0x9,
	BINDSTRING_USER_AGENT = 0xa,
	BINDSTRING_ACCEPT_ENCODINGS = 0xb,
	BINDSTRING_POST_COOKIE = 0xc,
	BINDSTRING_POST_DATA_MIME = 0xd,
	BINDSTRING_URL = 0xe,
	BINDSTRING_IID = 0xf,
	BINDSTRING_FLAG_BIND_TO_OBJECT = 0x10,
	BINDSTRING_PTR_BIND_CONTEXT = 0x11,
	BINDSTRING_XDR_ORIGIN = 0x12,
	BINDSTRING_DOWNLOADPATH = 0x13,
	BINDSTRING_ROOTDOC_URL = 0x14,
	BINDSTRING_INITIAL_FILENAME = 0x15,
	BINDSTRING_PROXY_USERNAME = 0x16,
	BINDSTRING_PROXY_PASSWORD = 0x17,
	BINDSTRING_ENTERPRISE_ID = 0x18,
	BINDSTRING_DOC_URL = 0x19,
	BINDSTRING_SAMESITE_COOKIE_LEVEL = 0x1a
};

enum tagBIND_FLAGS {
	BIND_MAYBOTHERUSER = 0x1,
	BIND_JUSTTESTEXISTENCE = 0x2
};

struct tagBIND_OPTS {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG grfFlags;
	/*0008*/ ULONG grfMode;
	/*000c*/ ULONG dwTickCountDeadline;
	/*0010*/
};

struct tagBIND_OPTS2 : tagBIND_OPTS {
	/*0010*/ ULONG dwTrackFlags;
	/*0014*/ ULONG dwClassContext;
	/*0018*/ ULONG locale;
	/*0020*/ _COSERVERINFO * pServerInfo;
	/*0028*/
};

struct tagBIND_OPTS3 : tagBIND_OPTS2 {
	/*0028*/ HWND__ * hwnd;
	/*0030*/
};

struct tagBITMAP {
	/*0000*/ LONG bmType;
	/*0004*/ LONG bmWidth;
	/*0008*/ LONG bmHeight;
	/*000c*/ LONG bmWidthBytes;
	/*0010*/ USHORT bmPlanes;
	/*0012*/ USHORT bmBitsPixel;
	/*0018*/ void * bmBits;
	/*0020*/
};

struct tagBITMAPCOREHEADER {
	/*0000*/ ULONG bcSize;
	/*0004*/ USHORT bcWidth;
	/*0006*/ USHORT bcHeight;
	/*0008*/ USHORT bcPlanes;
	/*000a*/ USHORT bcBitCount;
	/*000c*/
};

struct tagBITMAPCOREINFO {
	/*0000*/ tagBITMAPCOREHEADER bmciHeader;
	/*000c*/ tagRGBTRIPLE bmciColors[0x1];
	/*0010*/
};

struct tagBITMAPFILEHEADER {
	/*0000*/ USHORT bfType;
	/*0002*/ ULONG bfSize;
	/*0006*/ USHORT bfReserved1;
	/*0008*/ USHORT bfReserved2;
	/*000a*/ ULONG bfOffBits;
	/*000e*/
};

struct tagBITMAPINFO {
	/*0000*/ tagBITMAPINFOHEADER bmiHeader;
	/*0028*/ tagRGBQUAD bmiColors[0x1];
	/*002c*/
};

struct tagBITMAPINFOHEADER {
	/*0000*/ ULONG biSize;
	/*0004*/ LONG biWidth;
	/*0008*/ LONG biHeight;
	/*000c*/ USHORT biPlanes;
	/*000e*/ USHORT biBitCount;
	/*0010*/ ULONG biCompression;
	/*0014*/ ULONG biSizeImage;
	/*0018*/ LONG biXPelsPerMeter;
	/*001c*/ LONG biYPelsPerMeter;
	/*0020*/ ULONG biClrUsed;
	/*0024*/ ULONG biClrImportant;
	/*0028*/
};

struct tagBLOB {
	/*0000*/ ULONG cbSize;
	/*0008*/ UCHAR * pBlobData;
	/*0010*/
};

struct tagBSTRBLOB {
	/*0000*/ ULONG cbSize;
	/*0008*/ UCHAR * pData;
	/*0010*/
};

struct tagBinaryParam {
	/*0000*/ void * Buffer;
	/*0008*/ SHORT Size;
	/*0010*/
};

struct tagCABOOL {
	/*0000*/ ULONG cElems;
	/*0008*/ SHORT * pElems;
	/*0010*/
};

struct tagCABSTR {
	/*0000*/ ULONG cElems;
	/*0008*/ WCHAR * * pElems;
	/*0010*/
};

struct tagCABSTRBLOB {
	/*0000*/ ULONG cElems;
	/*0008*/ tagBSTRBLOB * pElems;
	/*0010*/
};

struct tagCAC {
	/*0000*/ ULONG cElems;
	/*0008*/ CHAR * pElems;
	/*0010*/
};

struct tagCACLIPDATA {
	/*0000*/ ULONG cElems;
	/*0008*/ tagCLIPDATA * pElems;
	/*0010*/
};

struct tagCACLSID {
	/*0000*/ ULONG cElems;
	/*0008*/ _GUID * pElems;
	/*0010*/
};

struct tagCACY {
	/*0000*/ ULONG cElems;
	/*0008*/ tagCY * pElems;
	/*0010*/
};

struct tagCADATE {
	/*0000*/ ULONG cElems;
	/*0008*/ double * pElems;
	/*0010*/
};

struct tagCADBL {
	/*0000*/ ULONG cElems;
	/*0008*/ double * pElems;
	/*0010*/
};

struct tagCAFILETIME {
	/*0000*/ ULONG cElems;
	/*0008*/ _FILETIME * pElems;
	/*0010*/
};

struct tagCAFLT {
	/*0000*/ ULONG cElems;
	/*0008*/ float * pElems;
	/*0010*/
};

struct tagCAH {
	/*0000*/ ULONG cElems;
	/*0008*/ _LARGE_INTEGER * pElems;
	/*0010*/
};

struct tagCAI {
	/*0000*/ ULONG cElems;
	/*0008*/ SHORT * pElems;
	/*0010*/
};

struct tagCAL {
	/*0000*/ ULONG cElems;
	/*0008*/ LONG * pElems;
	/*0010*/
};

enum tagCALLCONV {
	CC_FASTCALL = 0x0,
	CC_CDECL = 0x1,
	CC_MSCPASCAL = 0x2,
	CC_PASCAL = 0x2,
	CC_MACPASCAL = 0x3,
	CC_STDCALL = 0x4,
	CC_FPFASTCALL = 0x5,
	CC_SYSCALL = 0x6,
	CC_MPWCDECL = 0x7,
	CC_MPWPASCAL = 0x8,
	CC_MAX = 0x9
};

enum tagCALLTYPE {
	CALLTYPE_TOPLEVEL = 0x1,
	CALLTYPE_NESTED = 0x2,
	CALLTYPE_ASYNC = 0x3,
	CALLTYPE_TOPLEVEL_CALLPENDING = 0x4,
	CALLTYPE_ASYNC_CALLPENDING = 0x5
};

struct tagCALPSTR {
	/*0000*/ ULONG cElems;
	/*0008*/ CHAR * * pElems;
	/*0010*/
};

struct tagCALPWSTR {
	/*0000*/ ULONG cElems;
	/*0008*/ WCHAR * * pElems;
	/*0010*/
};

struct tagCANDIDATEFORM {
	/*0000*/ ULONG dwIndex;
	/*0004*/ ULONG dwStyle;
	/*0008*/ tagPOINT ptCurrentPos;
	/*0010*/ tagRECT rcArea;
	/*0020*/
};

struct tagCANDIDATELIST {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwStyle;
	/*0008*/ ULONG dwCount;
	/*000c*/ ULONG dwSelection;
	/*0010*/ ULONG dwPageStart;
	/*0014*/ ULONG dwPageSize;
	/*0018*/ ULONG dwOffset[0x1];
	/*001c*/
};

struct tagCAPROPVARIANT {
	/*0000*/ ULONG cElems;
	/*0008*/ tagPROPVARIANT * pElems;
	/*0010*/
};

struct tagCASCODE {
	/*0000*/ ULONG cElems;
	/*0008*/ LONG * pElems;
	/*0010*/
};

struct tagCAUB {
	/*0000*/ ULONG cElems;
	/*0008*/ UCHAR * pElems;
	/*0010*/
};

struct tagCAUH {
	/*0000*/ ULONG cElems;
	/*0008*/ _ULARGE_INTEGER * pElems;
	/*0010*/
};

struct tagCAUI {
	/*0000*/ ULONG cElems;
	/*0008*/ USHORT * pElems;
	/*0010*/
};

struct tagCAUL {
	/*0000*/ ULONG cElems;
	/*0008*/ ULONG * pElems;
	/*0010*/
};

struct tagCBTACTIVATESTRUCT {
	/*0000*/ INT fMouse;
	/*0008*/ HWND__ * hWndActive;
	/*0010*/
};

struct tagCBT_CREATEWNDA {
	/*0000*/ tagCREATESTRUCTA * lpcs;
	/*0008*/ HWND__ * hwndInsertAfter;
	/*0010*/
};

struct tagCBT_CREATEWNDW {
	/*0000*/ tagCREATESTRUCTW * lpcs;
	/*0008*/ HWND__ * hwndInsertAfter;
	/*0010*/
};

struct tagCHANGEFILTERSTRUCT {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG ExtStatus;
	/*0008*/
};

enum tagCHANGEKIND {
	CHANGEKIND_ADDMEMBER = 0x0,
	CHANGEKIND_DELETEMEMBER = 0x1,
	CHANGEKIND_SETNAMES = 0x2,
	CHANGEKIND_SETDOCUMENTATION = 0x3,
	CHANGEKIND_GENERAL = 0x4,
	CHANGEKIND_INVALIDATE = 0x5,
	CHANGEKIND_CHANGEFAILED = 0x6,
	CHANGEKIND_MAX = 0x7
};

struct tagCHARSETINFO {
	/*0000*/ UINT ciCharset;
	/*0004*/ UINT ciACP;
	/*0008*/ tagFONTSIGNATURE fs;
	/*0020*/
};

struct tagCIEXYZ {
	/*0000*/ LONG ciexyzX;
	/*0004*/ LONG ciexyzY;
	/*0008*/ LONG ciexyzZ;
	/*000c*/
};

struct tagCInterfaceProxyHeader {
	/*0000*/ void const * pStublessProxyInfo;
	/*0008*/ _GUID const * piid;
	/*0010*/
};

struct tagCInterfaceProxyVtbl {
	/*0000*/ tagCInterfaceProxyHeader header;
	/*0010*/ void * Vtbl[];
	/*0010*/
};

struct tagCInterfaceStubHeader {
	/*0000*/ _GUID const * piid;
	/*0008*/ _MIDL_SERVER_INFO_ const * pServerInfo;
	/*0010*/ ULONG DispatchTableCount;
	/*0018*/ void (* const * pDispatchTable)( IRpcStubBuffer * , IRpcChannelBuffer * , _RPC_MESSAGE * , ULONG * );
	/*0020*/
};

struct tagCInterfaceStubVtbl {
	/*0000*/ tagCInterfaceStubHeader header;
	/*0020*/ IRpcStubBufferVtbl Vtbl;
	/*0070*/
};

struct tagCInterfaceStubVtblTag {
	/*0000*/ tagCInterfaceStubHeader header;
	/*0020*/ void * tag;
	/*0028*/
};

struct tagCLEANLOCALSTORAGE {
	/*0000*/ IUnknown * pInterface;
	/*0008*/ void * pStorage;
	/*0010*/ ULONG flags;
	/*0018*/
};

struct tagCLIENTCREATESTRUCT {
	/*0000*/ void * hWindowMenu;
	/*0008*/ UINT idFirstChild;
	/*0010*/
};

struct tagCLIPDATA {
	/*0000*/ ULONG cbSize;
	/*0004*/ LONG ulClipFmt;
	/*0008*/ UCHAR * pClipData;
	/*0010*/
};

enum tagCLSCTX {
	CLSCTX_INPROC_SERVER = 0x1,
	CLSCTX_INPROC_HANDLER = 0x2,
	CLSCTX_LOCAL_SERVER = 0x4,
	CLSCTX_INPROC_SERVER16 = 0x8,
	CLSCTX_REMOTE_SERVER = 0x10,
	CLSCTX_INPROC_HANDLER16 = 0x20,
	CLSCTX_RESERVED1 = 0x40,
	CLSCTX_RESERVED2 = 0x80,
	CLSCTX_RESERVED3 = 0x100,
	CLSCTX_RESERVED4 = 0x200,
	CLSCTX_NO_CODE_DOWNLOAD = 0x400,
	CLSCTX_RESERVED5 = 0x800,
	CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
	CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
	CLSCTX_NO_FAILURE_LOG = 0x4000,
	CLSCTX_DISABLE_AAA = 0x8000,
	CLSCTX_ENABLE_AAA = 0x10000,
	CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
	CLSCTX_ACTIVATE_X86_SERVER = 0x40000,
	CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
	CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
	CLSCTX_ENABLE_CLOAKING = 0x100000,
	CLSCTX_APPCONTAINER = 0x400000,
	CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
	CLSCTX_RESERVED6 = 0x1000000,
	CLSCTX_ACTIVATE_ARM32_SERVER = 0x2000000,
	CLSCTX_ALLOW_LOWER_TRUST_REGISTRATION = 0x4000000,
	CLSCTX_PS_DLL = 0x80000000
};

enum tagCOINIT {
	COINIT_APARTMENTTHREADED = 0x2,
	COINIT_MULTITHREADED = 0x0,
	COINIT_DISABLE_OLE1DDE = 0x4,
	COINIT_SPEED_OVER_MEMORY = 0x8
};

enum tagCOINITBASE {
	COINITBASE_MULTITHREADED = 0x0
};

struct tagCOLORADJUSTMENT {
	/*0000*/ USHORT caSize;
	/*0002*/ USHORT caFlags;
	/*0004*/ USHORT caIlluminantIndex;
	/*0006*/ USHORT caRedGamma;
	/*0008*/ USHORT caGreenGamma;
	/*000a*/ USHORT caBlueGamma;
	/*000c*/ USHORT caReferenceBlack;
	/*000e*/ USHORT caReferenceWhite;
	/*0010*/ SHORT caContrast;
	/*0012*/ SHORT caBrightness;
	/*0014*/ SHORT caColorfulness;
	/*0016*/ SHORT caRedGreenTint;
	/*0018*/
};

struct tagCOLORCORRECTPALETTE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPalette;
	/*000c*/ ULONG nFirstEntry;
	/*0010*/ ULONG nPalEntries;
	/*0014*/ ULONG nReserved;
	/*0018*/
};

struct tagCOLORMATCHTOTARGET {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG dwAction;
	/*000c*/ ULONG dwFlags;
	/*0010*/ ULONG cbName;
	/*0014*/ ULONG cbData;
	/*0018*/ UCHAR Data[0x1];
	/*001c*/
};

struct tagCOMBOBOXINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcItem;
	/*0014*/ tagRECT rcButton;
	/*0024*/ ULONG stateButton;
	/*0028*/ HWND__ * hwndCombo;
	/*0030*/ HWND__ * hwndItem;
	/*0038*/ HWND__ * hwndList;
	/*0040*/
};

struct tagCOMPAREITEMSTRUCT {
	/*0000*/ UINT CtlType;
	/*0004*/ UINT CtlID;
	/*0008*/ HWND__ * hwndItem;
	/*0010*/ UINT itemID1;
	/*0018*/ ULONGLONG itemData1;
	/*0020*/ UINT itemID2;
	/*0028*/ ULONGLONG itemData2;
	/*0030*/ ULONG dwLocaleId;
	/*0038*/
};

struct tagCOMPOSITIONFORM {
	/*0000*/ ULONG dwStyle;
	/*0004*/ tagPOINT ptCurrentPos;
	/*000c*/ tagRECT rcArea;
	/*001c*/
};

enum tagCOMSD {
	SD_LAUNCHPERMISSIONS = 0x0,
	SD_ACCESSPERMISSIONS = 0x1,
	SD_LAUNCHRESTRICTIONS = 0x2,
	SD_ACCESSRESTRICTIONS = 0x3
};

struct tagCOPYDATASTRUCT {
	/*0000*/ ULONGLONG dwData;
	/*0008*/ ULONG cbData;
	/*0010*/ void * lpData;
	/*0018*/
};

enum tagCOWAIT_FLAGS {
	COWAIT_DEFAULT = 0x0,
	COWAIT_WAITALL = 0x1,
	COWAIT_ALERTABLE = 0x2,
	COWAIT_INPUTAVAILABLE = 0x4,
	COWAIT_DISPATCH_CALLS = 0x8,
	COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10
};

struct tagCREATESTRUCTA {
	/*0000*/ void * lpCreateParams;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ HMENU__ * hMenu;
	/*0018*/ HWND__ * hwndParent;
	/*0020*/ INT cy;
	/*0024*/ INT cx;
	/*0028*/ INT y;
	/*002c*/ INT x;
	/*0030*/ LONG style;
	/*0038*/ CHAR const * lpszName;
	/*0040*/ CHAR const * lpszClass;
	/*0048*/ ULONG dwExStyle;
	/*0050*/
};

struct tagCREATESTRUCTW {
	/*0000*/ void * lpCreateParams;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ HMENU__ * hMenu;
	/*0018*/ HWND__ * hwndParent;
	/*0020*/ INT cy;
	/*0024*/ INT cx;
	/*0028*/ INT y;
	/*002c*/ INT x;
	/*0030*/ LONG style;
	/*0038*/ WCHAR const * lpszName;
	/*0040*/ WCHAR const * lpszClass;
	/*0048*/ ULONG dwExStyle;
	/*0050*/
};

struct tagCSPLATFORM {
	/*0000*/ ULONG dwPlatformId;
	/*0004*/ ULONG dwVersionHi;
	/*0008*/ ULONG dwVersionLo;
	/*000c*/ ULONG dwProcessorArch;
	/*0010*/
};

struct tagCStdPSFactoryBuffer {
	/*0000*/ IPSFactoryBufferVtbl const * lpVtbl;
	/*0008*/ LONG RefCount;
	/*0010*/ tagProxyFileInfo const * * pProxyFileList;
	/*0018*/ LONG Filler1;
	/*0020*/
};

struct tagCURSORINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG flags;
	/*0008*/ HICON__ * hCursor;
	/*0010*/ tagPOINT ptScreenPos;
	/*0018*/
};

struct tagCURSORSHAPE {
	/*0000*/ INT xHotSpot;
	/*0004*/ INT yHotSpot;
	/*0008*/ INT cx;
	/*000c*/ INT cy;
	/*0010*/ INT cbWidth;
	/*0014*/ UCHAR Planes;
	/*0015*/ UCHAR BitsPixel;
	/*0018*/
};

struct tagCUSTDATA {
	/*0000*/ ULONG cCustData;
	/*0008*/ tagCUSTDATAITEM * prgCustData;
	/*0010*/
};

struct tagCUSTDATAITEM {
	/*0000*/ _GUID guid;
	/*0010*/ tagVARIANT varValue;
	/*0028*/
};

struct tagCWPRETSTRUCT {
	/*0000*/ LONGLONG lResult;
	/*0008*/ LONGLONG lParam;
	/*0010*/ ULONGLONG wParam;
	/*0018*/ UINT message;
	/*0020*/ HWND__ * hwnd;
	/*0028*/
};

struct tagCWPSTRUCT {
	/*0000*/ LONGLONG lParam;
	/*0008*/ ULONGLONG wParam;
	/*0010*/ UINT message;
	/*0018*/ HWND__ * hwnd;
	/*0020*/
};

union tagCY {
	/*0000*/ ULONG Lo;
	/*0004*/ LONG Hi;
	/*0000*/ LONGLONG int64;
	/*0008*/
};

enum tagDATADIR {
	DATADIR_GET = 0x1,
	DATADIR_SET = 0x2
};

enum tagDCOM_CALL_STATE {
	DCOM_NONE = 0x0,
	DCOM_CALL_COMPLETE = 0x1,
	DCOM_CALL_CANCELED = 0x2
};

struct tagDEBUGHOOKINFO {
	/*0000*/ ULONG idThread;
	/*0004*/ ULONG idThreadInstaller;
	/*0008*/ LONGLONG lParam;
	/*0010*/ ULONGLONG wParam;
	/*0018*/ INT code;
	/*0020*/
};

struct tagDEC {
	/*0000*/ USHORT wReserved;
	/*0002*/ UCHAR scale;
	/*0003*/ UCHAR sign;
	/*0002*/ USHORT signscale;
	/*0004*/ ULONG Hi32;
	/*0008*/ ULONG Lo32;
	/*000c*/ ULONG Mid32;
	/*0008*/ ULONGLONG Lo64;
	/*0010*/
};

struct tagDELETEITEMSTRUCT {
	/*0000*/ UINT CtlType;
	/*0004*/ UINT CtlID;
	/*0008*/ UINT itemID;
	/*0010*/ HWND__ * hwndItem;
	/*0018*/ ULONGLONG itemData;
	/*0020*/
};

enum tagDESCKIND {
	DESCKIND_NONE = 0x0,
	DESCKIND_FUNCDESC = 0x1,
	DESCKIND_VARDESC = 0x2,
	DESCKIND_TYPECOMP = 0x3,
	DESCKIND_IMPLICITAPPOBJ = 0x4,
	DESCKIND_MAX = 0x5
};

struct tagDESIGNVECTOR {
	/*0000*/ ULONG dvReserved;
	/*0004*/ ULONG dvNumAxes;
	/*0008*/ LONG dvValues[0x10];
	/*0048*/
};

struct tagDIBSECTION {
	/*0000*/ tagBITMAP dsBm;
	/*0020*/ tagBITMAPINFOHEADER dsBmih;
	/*0048*/ ULONG dsBitfields[0x3];
	/*0058*/ void * dshSection;
	/*0060*/ ULONG dsOffset;
	/*0068*/
};

enum tagDISCARDCACHE {
	DISCARDCACHE_SAVEIFDIRTY = 0x0,
	DISCARDCACHE_NOSAVE = 0x1
};

struct tagDISPPARAMS {
	/*0000*/ tagVARIANT * rgvarg;
	/*0008*/ LONG * rgdispidNamedArgs;
	/*0010*/ UINT cArgs;
	/*0014*/ UINT cNamedArgs;
	/*0018*/
};

enum tagDOMNodeType {
	NODE_INVALID = 0x0,
	NODE_ELEMENT = 0x1,
	NODE_ATTRIBUTE = 0x2,
	NODE_TEXT = 0x3,
	NODE_CDATA_SECTION = 0x4,
	NODE_ENTITY_REFERENCE = 0x5,
	NODE_ENTITY = 0x6,
	NODE_PROCESSING_INSTRUCTION = 0x7,
	NODE_COMMENT = 0x8,
	NODE_DOCUMENT = 0x9,
	NODE_DOCUMENT_TYPE = 0xa,
	NODE_DOCUMENT_FRAGMENT = 0xb,
	NODE_NOTATION = 0xc
};

struct tagDRAWITEMSTRUCT {
	/*0000*/ UINT CtlType;
	/*0004*/ UINT CtlID;
	/*0008*/ UINT itemID;
	/*000c*/ UINT itemAction;
	/*0010*/ UINT itemState;
	/*0018*/ HWND__ * hwndItem;
	/*0020*/ HDC__ * hDC;
	/*0028*/ tagRECT rcItem;
	/*0038*/ ULONGLONG itemData;
	/*0040*/
};

struct tagDRAWTEXTPARAMS {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iTabLength;
	/*0008*/ INT iLeftMargin;
	/*000c*/ INT iRightMargin;
	/*0010*/ UINT uiLengthDrawn;
	/*0014*/
};

struct tagDROPSTRUCT {
	/*0000*/ HWND__ * hwndSource;
	/*0008*/ HWND__ * hwndSink;
	/*0010*/ ULONG wFmt;
	/*0018*/ ULONGLONG dwData;
	/*0020*/ tagPOINT ptDrop;
	/*0028*/ ULONG dwControlData;
	/*0030*/
};

enum tagDVASPECT {
	DVASPECT_CONTENT = 0x1,
	DVASPECT_THUMBNAIL = 0x2,
	DVASPECT_ICON = 0x4,
	DVASPECT_DOCPRINT = 0x8
};

struct tagDVTARGETDEVICE {
	/*0000*/ ULONG tdSize;
	/*0004*/ USHORT tdDriverNameOffset;
	/*0006*/ USHORT tdDeviceNameOffset;
	/*0008*/ USHORT tdPortNameOffset;
	/*000a*/ USHORT tdExtDevmodeOffset;
	/*000c*/ UCHAR tdData[0x1];
	/*0010*/
};

struct tagELEMDESC {
	/*0000*/ tagTYPEDESC tdesc;
	/*0010*/ tagIDLDESC idldesc;
	/*0010*/ tagPARAMDESC paramdesc;
	/*0020*/
};

struct tagEMR {
	/*0000*/ ULONG iType;
	/*0004*/ ULONG nSize;
	/*0008*/
};

struct tagEMRALPHABLEND {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG cxDest;
	/*0024*/ LONG cyDest;
	/*0028*/ ULONG dwRop;
	/*002c*/ LONG xSrc;
	/*0030*/ LONG ySrc;
	/*0034*/ tagXFORM xformSrc;
	/*004c*/ ULONG crBkColorSrc;
	/*0050*/ ULONG iUsageSrc;
	/*0054*/ ULONG offBmiSrc;
	/*0058*/ ULONG cbBmiSrc;
	/*005c*/ ULONG offBitsSrc;
	/*0060*/ ULONG cbBitsSrc;
	/*0064*/ LONG cxSrc;
	/*0068*/ LONG cySrc;
	/*006c*/
};

struct tagEMRANGLEARC {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptlCenter;
	/*0010*/ ULONG nRadius;
	/*0014*/ float eStartAngle;
	/*0018*/ float eSweepAngle;
	/*001c*/
};

struct tagEMRARC {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBox;
	/*0018*/ _POINTL ptlStart;
	/*0020*/ _POINTL ptlEnd;
	/*0028*/
};

struct tagEMRBITBLT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG cxDest;
	/*0024*/ LONG cyDest;
	/*0028*/ ULONG dwRop;
	/*002c*/ LONG xSrc;
	/*0030*/ LONG ySrc;
	/*0034*/ tagXFORM xformSrc;
	/*004c*/ ULONG crBkColorSrc;
	/*0050*/ ULONG iUsageSrc;
	/*0054*/ ULONG offBmiSrc;
	/*0058*/ ULONG cbBmiSrc;
	/*005c*/ ULONG offBitsSrc;
	/*0060*/ ULONG cbBitsSrc;
	/*0064*/
};

struct tagEMRCREATEBRUSHINDIRECT {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihBrush;
	/*000c*/ tagLOGBRUSH32 lb;
	/*0018*/
};

struct tagEMRCREATECOLORSPACE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihCS;
	/*000c*/ tagLOGCOLORSPACEA lcs;
	/*0154*/
};

struct tagEMRCREATECOLORSPACEW {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihCS;
	/*000c*/ tagLOGCOLORSPACEW lcs;
	/*0258*/ ULONG dwFlags;
	/*025c*/ ULONG cbData;
	/*0260*/ UCHAR Data[0x1];
	/*0264*/
};

struct tagEMRCREATEDIBPATTERNBRUSHPT {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihBrush;
	/*000c*/ ULONG iUsage;
	/*0010*/ ULONG offBmi;
	/*0014*/ ULONG cbBmi;
	/*0018*/ ULONG offBits;
	/*001c*/ ULONG cbBits;
	/*0020*/
};

struct tagEMRCREATEMONOBRUSH {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihBrush;
	/*000c*/ ULONG iUsage;
	/*0010*/ ULONG offBmi;
	/*0014*/ ULONG cbBmi;
	/*0018*/ ULONG offBits;
	/*001c*/ ULONG cbBits;
	/*0020*/
};

struct tagEMRCREATEPALETTE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPal;
	/*000c*/ tagLOGPALETTE lgpl;
	/*0014*/
};

struct tagEMRCREATEPEN {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPen;
	/*000c*/ tagLOGPEN lopn;
	/*001c*/
};

struct tagEMRELLIPSE {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBox;
	/*0018*/
};

struct tagEMREOF {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG nPalEntries;
	/*000c*/ ULONG offPalEntries;
	/*0010*/ ULONG nSizeLast;
	/*0014*/
};

struct tagEMREXCLUDECLIPRECT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclClip;
	/*0018*/
};

struct tagEMREXTCREATEFONTINDIRECTW {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihFont;
	/*000c*/ tagEXTLOGFONTW elfw;
	/*014c*/
};

struct tagEMREXTCREATEPEN {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPen;
	/*000c*/ ULONG offBmi;
	/*0010*/ ULONG cbBmi;
	/*0014*/ ULONG offBits;
	/*0018*/ ULONG cbBits;
	/*001c*/ tagEXTLOGPEN32 elp;
	/*0038*/
};

struct tagEMREXTESCAPE {
	/*0000*/ tagEMR emr;
	/*0008*/ INT iEscape;
	/*000c*/ INT cbEscData;
	/*0010*/ UCHAR EscData[0x1];
	/*0014*/
};

struct tagEMREXTFLOODFILL {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptlStart;
	/*0010*/ ULONG crColor;
	/*0014*/ ULONG iMode;
	/*0018*/
};

struct tagEMREXTSELECTCLIPRGN {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG cbRgnData;
	/*000c*/ ULONG iMode;
	/*0010*/ UCHAR RgnData[0x1];
	/*0014*/
};

struct tagEMREXTTEXTOUTA {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG iGraphicsMode;
	/*001c*/ float exScale;
	/*0020*/ float eyScale;
	/*0024*/ tagEMRTEXT emrtext;
	/*004c*/
};

struct tagEMRFILLPATH {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/
};

struct tagEMRFILLRGN {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cbRgnData;
	/*001c*/ ULONG ihBrush;
	/*0020*/ UCHAR RgnData[0x1];
	/*0024*/
};

struct tagEMRFORMAT {
	/*0000*/ ULONG dSignature;
	/*0004*/ ULONG nVersion;
	/*0008*/ ULONG cbData;
	/*000c*/ ULONG offData;
	/*0010*/
};

struct tagEMRFRAMERGN {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cbRgnData;
	/*001c*/ ULONG ihBrush;
	/*0020*/ tagSIZE szlStroke;
	/*0028*/ UCHAR RgnData[0x1];
	/*002c*/
};

struct tagEMRGDICOMMENT {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG cbData;
	/*000c*/ UCHAR Data[0x1];
	/*0010*/
};

struct tagEMRGLSBOUNDEDRECORD {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cbData;
	/*001c*/ UCHAR Data[0x1];
	/*0020*/
};

struct tagEMRGLSRECORD {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG cbData;
	/*000c*/ UCHAR Data[0x1];
	/*0010*/
};

struct tagEMRGRADIENTFILL {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG nVer;
	/*001c*/ ULONG nTri;
	/*0020*/ ULONG ulMode;
	/*0024*/ _TRIVERTEX Ver[0x1];
	/*0034*/
};

struct tagEMRINVERTRGN {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cbRgnData;
	/*001c*/ UCHAR RgnData[0x1];
	/*0020*/
};

struct tagEMRLINETO {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptl;
	/*0010*/
};

struct tagEMRMASKBLT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG cxDest;
	/*0024*/ LONG cyDest;
	/*0028*/ ULONG dwRop;
	/*002c*/ LONG xSrc;
	/*0030*/ LONG ySrc;
	/*0034*/ tagXFORM xformSrc;
	/*004c*/ ULONG crBkColorSrc;
	/*0050*/ ULONG iUsageSrc;
	/*0054*/ ULONG offBmiSrc;
	/*0058*/ ULONG cbBmiSrc;
	/*005c*/ ULONG offBitsSrc;
	/*0060*/ ULONG cbBitsSrc;
	/*0064*/ LONG xMask;
	/*0068*/ LONG yMask;
	/*006c*/ ULONG iUsageMask;
	/*0070*/ ULONG offBmiMask;
	/*0074*/ ULONG cbBmiMask;
	/*0078*/ ULONG offBitsMask;
	/*007c*/ ULONG cbBitsMask;
	/*0080*/
};

struct tagEMRMODIFYWORLDTRANSFORM {
	/*0000*/ tagEMR emr;
	/*0008*/ tagXFORM xform;
	/*0020*/ ULONG iMode;
	/*0024*/
};

struct tagEMRNAMEDESCAPE {
	/*0000*/ tagEMR emr;
	/*0008*/ INT iEscape;
	/*000c*/ INT cbDriver;
	/*0010*/ INT cbEscData;
	/*0014*/ UCHAR EscData[0x1];
	/*0018*/
};

struct tagEMROFFSETCLIPRGN {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptlOffset;
	/*0010*/
};

struct tagEMRPIXELFORMAT {
	/*0000*/ tagEMR emr;
	/*0008*/ tagPIXELFORMATDESCRIPTOR pfd;
	/*0030*/
};

struct tagEMRPLGBLT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ _POINTL aptlDest[0x3];
	/*0030*/ LONG xSrc;
	/*0034*/ LONG ySrc;
	/*0038*/ LONG cxSrc;
	/*003c*/ LONG cySrc;
	/*0040*/ tagXFORM xformSrc;
	/*0058*/ ULONG crBkColorSrc;
	/*005c*/ ULONG iUsageSrc;
	/*0060*/ ULONG offBmiSrc;
	/*0064*/ ULONG cbBmiSrc;
	/*0068*/ ULONG offBitsSrc;
	/*006c*/ ULONG cbBitsSrc;
	/*0070*/ LONG xMask;
	/*0074*/ LONG yMask;
	/*0078*/ ULONG iUsageMask;
	/*007c*/ ULONG offBmiMask;
	/*0080*/ ULONG cbBmiMask;
	/*0084*/ ULONG offBitsMask;
	/*0088*/ ULONG cbBitsMask;
	/*008c*/
};

struct tagEMRPOLYDRAW {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cptl;
	/*001c*/ _POINTL aptl[0x1];
	/*0024*/ UCHAR abTypes[0x1];
	/*0028*/
};

struct tagEMRPOLYDRAW16 {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cpts;
	/*001c*/ tagPOINTS apts[0x1];
	/*0020*/ UCHAR abTypes[0x1];
	/*0024*/
};

struct tagEMRPOLYLINE {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cptl;
	/*001c*/ _POINTL aptl[0x1];
	/*0024*/
};

struct tagEMRPOLYLINE16 {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cpts;
	/*001c*/ tagPOINTS apts[0x1];
	/*0020*/
};

struct tagEMRPOLYPOLYLINE {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG nPolys;
	/*001c*/ ULONG cptl;
	/*0020*/ ULONG aPolyCounts[0x1];
	/*0024*/ _POINTL aptl[0x1];
	/*002c*/
};

struct tagEMRPOLYPOLYLINE16 {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG nPolys;
	/*001c*/ ULONG cpts;
	/*0020*/ ULONG aPolyCounts[0x1];
	/*0024*/ tagPOINTS apts[0x1];
	/*0028*/
};

struct tagEMRPOLYTEXTOUTA {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG iGraphicsMode;
	/*001c*/ float exScale;
	/*0020*/ float eyScale;
	/*0024*/ LONG cStrings;
	/*0028*/ tagEMRTEXT aemrtext[0x1];
	/*0050*/
};

struct tagEMRRESIZEPALETTE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPal;
	/*000c*/ ULONG cEntries;
	/*0010*/
};

struct tagEMRRESTOREDC {
	/*0000*/ tagEMR emr;
	/*0008*/ LONG iRelative;
	/*000c*/
};

struct tagEMRROUNDRECT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBox;
	/*0018*/ tagSIZE szlCorner;
	/*0020*/
};

struct tagEMRSCALEVIEWPORTEXTEX {
	/*0000*/ tagEMR emr;
	/*0008*/ LONG xNum;
	/*000c*/ LONG xDenom;
	/*0010*/ LONG yNum;
	/*0014*/ LONG yDenom;
	/*0018*/
};

struct tagEMRSELECTCLIPPATH {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG iMode;
	/*000c*/
};

struct tagEMRSELECTOBJECT {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihObject;
	/*000c*/
};

struct tagEMRSELECTPALETTE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPal;
	/*000c*/
};

struct tagEMRSETARCDIRECTION {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG iArcDirection;
	/*000c*/
};

struct tagEMRSETCOLORADJUSTMENT {
	/*0000*/ tagEMR emr;
	/*0008*/ tagCOLORADJUSTMENT ColorAdjustment;
	/*0020*/
};

struct tagEMRSETCOLORSPACE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihCS;
	/*000c*/
};

struct tagEMRSETDIBITSTODEVICE {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG xSrc;
	/*0024*/ LONG ySrc;
	/*0028*/ LONG cxSrc;
	/*002c*/ LONG cySrc;
	/*0030*/ ULONG offBmiSrc;
	/*0034*/ ULONG cbBmiSrc;
	/*0038*/ ULONG offBitsSrc;
	/*003c*/ ULONG cbBitsSrc;
	/*0040*/ ULONG iUsageSrc;
	/*0044*/ ULONG iStartScan;
	/*0048*/ ULONG cScans;
	/*004c*/
};

struct tagEMRSETICMPROFILE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG dwFlags;
	/*000c*/ ULONG cbName;
	/*0010*/ ULONG cbData;
	/*0014*/ UCHAR Data[0x1];
	/*0018*/
};

struct tagEMRSETMAPPERFLAGS {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG dwFlags;
	/*000c*/
};

struct tagEMRSETMITERLIMIT {
	/*0000*/ tagEMR emr;
	/*0008*/ float eMiterLimit;
	/*000c*/
};

struct tagEMRSETPALETTEENTRIES {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPal;
	/*000c*/ ULONG iStart;
	/*0010*/ ULONG cEntries;
	/*0014*/ tagPALETTEENTRY aPalEntries[0x1];
	/*0018*/
};

struct tagEMRSETPIXELV {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptlPixel;
	/*0010*/ ULONG crColor;
	/*0014*/
};

struct tagEMRSETTEXTCOLOR {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG crColor;
	/*000c*/
};

struct tagEMRSETVIEWPORTEXTEX {
	/*0000*/ tagEMR emr;
	/*0008*/ tagSIZE szlExtent;
	/*0010*/
};

struct tagEMRSETVIEWPORTORGEX {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptlOrigin;
	/*0010*/
};

struct tagEMRSETWORLDTRANSFORM {
	/*0000*/ tagEMR emr;
	/*0008*/ tagXFORM xform;
	/*0020*/
};

struct tagEMRSTRETCHBLT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG cxDest;
	/*0024*/ LONG cyDest;
	/*0028*/ ULONG dwRop;
	/*002c*/ LONG xSrc;
	/*0030*/ LONG ySrc;
	/*0034*/ tagXFORM xformSrc;
	/*004c*/ ULONG crBkColorSrc;
	/*0050*/ ULONG iUsageSrc;
	/*0054*/ ULONG offBmiSrc;
	/*0058*/ ULONG cbBmiSrc;
	/*005c*/ ULONG offBitsSrc;
	/*0060*/ ULONG cbBitsSrc;
	/*0064*/ LONG cxSrc;
	/*0068*/ LONG cySrc;
	/*006c*/
};

struct tagEMRSTRETCHDIBITS {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG xSrc;
	/*0024*/ LONG ySrc;
	/*0028*/ LONG cxSrc;
	/*002c*/ LONG cySrc;
	/*0030*/ ULONG offBmiSrc;
	/*0034*/ ULONG cbBmiSrc;
	/*0038*/ ULONG offBitsSrc;
	/*003c*/ ULONG cbBitsSrc;
	/*0040*/ ULONG iUsageSrc;
	/*0044*/ ULONG dwRop;
	/*0048*/ LONG cxDest;
	/*004c*/ LONG cyDest;
	/*0050*/
};

struct tagEMRTEXT {
	/*0000*/ _POINTL ptlReference;
	/*0008*/ ULONG nChars;
	/*000c*/ ULONG offString;
	/*0010*/ ULONG fOptions;
	/*0014*/ _RECTL rcl;
	/*0024*/ ULONG offDx;
	/*0028*/
};

struct tagEMRTRANSPARENTBLT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG cxDest;
	/*0024*/ LONG cyDest;
	/*0028*/ ULONG dwRop;
	/*002c*/ LONG xSrc;
	/*0030*/ LONG ySrc;
	/*0034*/ tagXFORM xformSrc;
	/*004c*/ ULONG crBkColorSrc;
	/*0050*/ ULONG iUsageSrc;
	/*0054*/ ULONG offBmiSrc;
	/*0058*/ ULONG cbBmiSrc;
	/*005c*/ ULONG offBitsSrc;
	/*0060*/ ULONG cbBitsSrc;
	/*0064*/ LONG cxSrc;
	/*0068*/ LONG cySrc;
	/*006c*/
};

struct tagENHMETAHEADER {
	/*0000*/ ULONG iType;
	/*0004*/ ULONG nSize;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ _RECTL rclFrame;
	/*0028*/ ULONG dSignature;
	/*002c*/ ULONG nVersion;
	/*0030*/ ULONG nBytes;
	/*0034*/ ULONG nRecords;
	/*0038*/ USHORT nHandles;
	/*003a*/ USHORT sReserved;
	/*003c*/ ULONG nDescription;
	/*0040*/ ULONG offDescription;
	/*0044*/ ULONG nPalEntries;
	/*0048*/ tagSIZE szlDevice;
	/*0050*/ tagSIZE szlMillimeters;
	/*0058*/ ULONG cbPixelFormat;
	/*005c*/ ULONG offPixelFormat;
	/*0060*/ ULONG bOpenGL;
	/*0064*/ tagSIZE szlMicrometers;
	/*006c*/
};

struct tagENHMETARECORD {
	/*0000*/ ULONG iType;
	/*0004*/ ULONG nSize;
	/*0008*/ ULONG dParm[0x1];
	/*000c*/
};

struct tagENUMLOGFONTA {
	/*0000*/ tagLOGFONTA elfLogFont;
	/*003c*/ UCHAR elfFullName[0x40];
	/*007c*/ UCHAR elfStyle[0x20];
	/*009c*/
};

struct tagENUMLOGFONTEXA {
	/*0000*/ tagLOGFONTA elfLogFont;
	/*003c*/ UCHAR elfFullName[0x40];
	/*007c*/ UCHAR elfStyle[0x20];
	/*009c*/ UCHAR elfScript[0x20];
	/*00bc*/
};

struct tagENUMLOGFONTEXDVA {
	/*0000*/ tagENUMLOGFONTEXA elfEnumLogfontEx;
	/*00bc*/ tagDESIGNVECTOR elfDesignVector;
	/*0104*/
};

struct tagENUMLOGFONTEXDVW {
	/*0000*/ tagENUMLOGFONTEXW elfEnumLogfontEx;
	/*015c*/ tagDESIGNVECTOR elfDesignVector;
	/*01a4*/
};

struct tagENUMLOGFONTEXW {
	/*0000*/ tagLOGFONTW elfLogFont;
	/*005c*/ WCHAR elfFullName[0x40];
	/*00dc*/ WCHAR elfStyle[0x20];
	/*011c*/ WCHAR elfScript[0x20];
	/*015c*/
};

struct tagENUMLOGFONTW {
	/*0000*/ tagLOGFONTW elfLogFont;
	/*005c*/ WCHAR elfFullName[0x40];
	/*00dc*/ WCHAR elfStyle[0x20];
	/*011c*/
};

struct tagENUMTEXTMETRICA {
	/*0000*/ tagNEWTEXTMETRICEXA etmNewTextMetricEx;
	/*0060*/ tagAXESLISTA etmAxesList;
	/*01e8*/
};

struct tagENUMTEXTMETRICW {
	/*0000*/ tagNEWTEXTMETRICEXW etmNewTextMetricEx;
	/*0064*/ tagAXESLISTW etmAxesList;
	/*02ec*/
};

struct tagENUMUILANG {
	/*0000*/ ULONG NumOfEnumUILang;
	/*0004*/ ULONG SizeOfEnumUIBuffer;
	/*0008*/ USHORT * pEnumUIBuffer;
	/*0010*/
};

enum tagEOLE_AUTHENTICATION_CAPABILITIES {
	EOAC_NONE = 0x0,
	EOAC_MUTUAL_AUTH = 0x1,
	EOAC_STATIC_CLOAKING = 0x20,
	EOAC_DYNAMIC_CLOAKING = 0x40,
	EOAC_ANY_AUTHORITY = 0x80,
	EOAC_MAKE_FULLSIC = 0x100,
	EOAC_DEFAULT = 0x800,
	EOAC_SECURE_REFS = 0x2,
	EOAC_ACCESS_CONTROL = 0x4,
	EOAC_APPID = 0x8,
	EOAC_DYNAMIC = 0x10,
	EOAC_REQUIRE_FULLSIC = 0x200,
	EOAC_AUTO_IMPERSONATE = 0x400,
	EOAC_DISABLE_AAA = 0x1000,
	EOAC_NO_CUSTOM_MARSHAL = 0x2000,
	EOAC_RESERVED1 = 0x4000
};

struct tagEVENTMSG {
	/*0000*/ UINT message;
	/*0004*/ UINT paramL;
	/*0008*/ UINT paramH;
	/*000c*/ ULONG time;
	/*0010*/ HWND__ * hwnd;
	/*0018*/
};

struct tagEXCEPINFO {
	/*0000*/ USHORT wCode;
	/*0002*/ USHORT wReserved;
	/*0008*/ WCHAR * bstrSource;
	/*0010*/ WCHAR * bstrDescription;
	/*0018*/ WCHAR * bstrHelpFile;
	/*0020*/ ULONG dwHelpContext;
	/*0028*/ void * pvReserved;
	/*0030*/ HRESULT (* pfnDeferredFillIn)( tagEXCEPINFO * );
	/*0038*/ LONG scode;
	/*0040*/
};

enum tagEXTCONN {
	EXTCONN_STRONG = 0x1,
	EXTCONN_WEAK = 0x2,
	EXTCONN_CALLABLE = 0x4
};

struct tagEXTLOGFONTA {
	/*0000*/ tagLOGFONTA elfLogFont;
	/*003c*/ UCHAR elfFullName[0x40];
	/*007c*/ UCHAR elfStyle[0x20];
	/*009c*/ ULONG elfVersion;
	/*00a0*/ ULONG elfStyleSize;
	/*00a4*/ ULONG elfMatch;
	/*00a8*/ ULONG elfReserved;
	/*00ac*/ UCHAR elfVendorId[0x4];
	/*00b0*/ ULONG elfCulture;
	/*00b4*/ tagPANOSE elfPanose;
	/*00c0*/
};

struct tagEXTLOGFONTW {
	/*0000*/ tagLOGFONTW elfLogFont;
	/*005c*/ WCHAR elfFullName[0x40];
	/*00dc*/ WCHAR elfStyle[0x20];
	/*011c*/ ULONG elfVersion;
	/*0120*/ ULONG elfStyleSize;
	/*0124*/ ULONG elfMatch;
	/*0128*/ ULONG elfReserved;
	/*012c*/ UCHAR elfVendorId[0x4];
	/*0130*/ ULONG elfCulture;
	/*0134*/ tagPANOSE elfPanose;
	/*0140*/
};

struct tagEXTLOGPEN {
	/*0000*/ ULONG elpPenStyle;
	/*0004*/ ULONG elpWidth;
	/*0008*/ UINT elpBrushStyle;
	/*000c*/ ULONG elpColor;
	/*0010*/ ULONGLONG elpHatch;
	/*0018*/ ULONG elpNumEntries;
	/*001c*/ ULONG elpStyleEntry[0x1];
	/*0020*/
};

struct tagEXTLOGPEN32 {
	/*0000*/ ULONG elpPenStyle;
	/*0004*/ ULONG elpWidth;
	/*0008*/ UINT elpBrushStyle;
	/*000c*/ ULONG elpColor;
	/*0010*/ ULONG elpHatch;
	/*0014*/ ULONG elpNumEntries;
	/*0018*/ ULONG elpStyleEntry[0x1];
	/*001c*/
};

enum tagExtendedErrorParamTypes {
	eeptAnsiString = 0x1,
	eeptUnicodeString = 0x2,
	eeptLongVal = 0x3,
	eeptShortVal = 0x4,
	eeptPointerVal = 0x5,
	eeptNone = 0x6,
	eeptBinary = 0x7
};

enum tagFEEDBACK_TYPE {
	FEEDBACK_TOUCH_CONTACTVISUALIZATION = 0x1,
	FEEDBACK_PEN_BARRELVISUALIZATION = 0x2,
	FEEDBACK_PEN_TAP = 0x3,
	FEEDBACK_PEN_DOUBLETAP = 0x4,
	FEEDBACK_PEN_PRESSANDHOLD = 0x5,
	FEEDBACK_PEN_RIGHTTAP = 0x6,
	FEEDBACK_TOUCH_TAP = 0x7,
	FEEDBACK_TOUCH_DOUBLETAP = 0x8,
	FEEDBACK_TOUCH_PRESSANDHOLD = 0x9,
	FEEDBACK_TOUCH_RIGHTTAP = 0xa,
	FEEDBACK_GESTURE_PRESSANDTAP = 0xb,
	FEEDBACK_MAX = 0xffffffff
};

struct tagFILTERKEYS {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG iWaitMSec;
	/*000c*/ ULONG iDelayMSec;
	/*0010*/ ULONG iRepeatMSec;
	/*0014*/ ULONG iBounceMSec;
	/*0018*/
};

struct tagFONTSIGNATURE {
	/*0000*/ ULONG fsUsb[0x4];
	/*0010*/ ULONG fsCsb[0x2];
	/*0018*/
};

struct tagFORMATETC {
	/*0000*/ USHORT cfFormat;
	/*0008*/ tagDVTARGETDEVICE * ptd;
	/*0010*/ ULONG dwAspect;
	/*0014*/ LONG lindex;
	/*0018*/ ULONG tymed;
	/*0020*/
};

struct tagFUNCDESC {
	/*0000*/ LONG memid;
	/*0008*/ LONG * lprgscode;
	/*0010*/ tagELEMDESC * lprgelemdescParam;
	/*0018*/ tagFUNCKIND funckind;
	/*001c*/ tagINVOKEKIND invkind;
	/*0020*/ tagCALLCONV callconv;
	/*0024*/ SHORT cParams;
	/*0026*/ SHORT cParamsOpt;
	/*0028*/ SHORT oVft;
	/*002a*/ SHORT cScodes;
	/*0030*/ tagELEMDESC elemdescFunc;
	/*0050*/ USHORT wFuncFlags;
	/*0058*/
};

enum tagFUNCFLAGS {
	FUNCFLAG_FRESTRICTED = 0x1,
	FUNCFLAG_FSOURCE = 0x2,
	FUNCFLAG_FBINDABLE = 0x4,
	FUNCFLAG_FREQUESTEDIT = 0x8,
	FUNCFLAG_FDISPLAYBIND = 0x10,
	FUNCFLAG_FDEFAULTBIND = 0x20,
	FUNCFLAG_FHIDDEN = 0x40,
	FUNCFLAG_FUSESGETLASTERROR = 0x80,
	FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
	FUNCFLAG_FUIDEFAULT = 0x200,
	FUNCFLAG_FNONBROWSABLE = 0x400,
	FUNCFLAG_FREPLACEABLE = 0x800,
	FUNCFLAG_FIMMEDIATEBIND = 0x1000
};

enum tagFUNCKIND {
	FUNC_VIRTUAL = 0x0,
	FUNC_PUREVIRTUAL = 0x1,
	FUNC_NONVIRTUAL = 0x2,
	FUNC_STATIC = 0x3,
	FUNC_DISPATCH = 0x4
};

struct tagGCP_RESULTSA {
	/*0000*/ ULONG lStructSize;
	/*0008*/ CHAR * lpOutString;
	/*0010*/ UINT * lpOrder;
	/*0018*/ INT * lpDx;
	/*0020*/ INT * lpCaretPos;
	/*0028*/ CHAR * lpClass;
	/*0030*/ WCHAR * lpGlyphs;
	/*0038*/ UINT nGlyphs;
	/*003c*/ INT nMaxFit;
	/*0040*/
};

struct tagGCP_RESULTSW {
	/*0000*/ ULONG lStructSize;
	/*0008*/ WCHAR * lpOutString;
	/*0010*/ UINT * lpOrder;
	/*0018*/ INT * lpDx;
	/*0020*/ INT * lpCaretPos;
	/*0028*/ CHAR * lpClass;
	/*0030*/ WCHAR * lpGlyphs;
	/*0038*/ UINT nGlyphs;
	/*003c*/ INT nMaxFit;
	/*0040*/
};

struct tagGESTURECONFIG {
	/*0000*/ ULONG dwID;
	/*0004*/ ULONG dwWant;
	/*0008*/ ULONG dwBlock;
	/*000c*/
};

struct tagGESTUREINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG dwID;
	/*0010*/ HWND__ * hwndTarget;
	/*0018*/ tagPOINTS ptsLocation;
	/*001c*/ ULONG dwInstanceID;
	/*0020*/ ULONG dwSequenceID;
	/*0028*/ ULONGLONG ullArguments;
	/*0030*/ UINT cbExtraArgs;
	/*0038*/
};

struct tagGESTURENOTIFYSTRUCT {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HWND__ * hwndTarget;
	/*0010*/ tagPOINTS ptsLocation;
	/*0014*/ ULONG dwInstanceID;
	/*0018*/
};

struct tagGETCLIPBMETADATA {
	/*0000*/ UINT Version;
	/*0004*/ INT IsDelayRendered;
	/*0008*/ INT IsSynthetic;
	/*000c*/
};

enum tagGLOBALOPT_EH_VALUES {
	COMGLB_EXCEPTION_HANDLE = 0x0,
	COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 0x1,
	COMGLB_EXCEPTION_DONOT_HANDLE = 0x1,
	COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 0x2
};

enum tagGLOBALOPT_PROPERTIES {
	COMGLB_EXCEPTION_HANDLING = 0x1,
	COMGLB_APPID = 0x2,
	COMGLB_RPC_THREADPOOL_SETTING = 0x3,
	COMGLB_RO_SETTINGS = 0x4,
	COMGLB_UNMARSHALING_POLICY = 0x5,
	COMGLB_PROPERTIES_RESERVED1 = 0x6,
	COMGLB_PROPERTIES_RESERVED2 = 0x7,
	COMGLB_PROPERTIES_RESERVED3 = 0x8
};

enum tagGLOBALOPT_RO_FLAGS {
	COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
	COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
	COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
	COMGLB_FAST_RUNDOWN = 0x8,
	COMGLB_RESERVED1 = 0x10,
	COMGLB_RESERVED2 = 0x20,
	COMGLB_RESERVED3 = 0x40,
	COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80,
	COMGLB_RESERVED4 = 0x100,
	COMGLB_RESERVED5 = 0x200,
	COMGLB_RESERVED6 = 0x400
};

enum tagGLOBALOPT_RPCTP_VALUES {
	COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0x0,
	COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 0x1
};

enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES {
	COMGLB_UNMARSHALING_POLICY_NORMAL = 0x0,
	COMGLB_UNMARSHALING_POLICY_STRONG = 0x1,
	COMGLB_UNMARSHALING_POLICY_HYBRID = 0x2
};

struct tagGLYPHSET {
	/*0000*/ ULONG cbThis;
	/*0004*/ ULONG flAccel;
	/*0008*/ ULONG cGlyphsSupported;
	/*000c*/ ULONG cRanges;
	/*0010*/ tagWCRANGE ranges[0x1];
	/*0014*/
};

struct tagGUITHREADINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG flags;
	/*0008*/ HWND__ * hwndActive;
	/*0010*/ HWND__ * hwndFocus;
	/*0018*/ HWND__ * hwndCapture;
	/*0020*/ HWND__ * hwndMenuOwner;
	/*0028*/ HWND__ * hwndMoveSize;
	/*0030*/ HWND__ * hwndCaret;
	/*0038*/ tagRECT rcCaret;
	/*0048*/
};

enum tagHANDEDNESS {
	HANDEDNESS_LEFT = 0x0,
	HANDEDNESS_RIGHT = 0x1
};

struct tagHANDLETABLE {
	/*0000*/ void * objectHandle[0x1];
	/*0008*/
};

struct tagHARDWAREHOOKSTRUCT {
	/*0000*/ HWND__ * hwnd;
	/*0008*/ UINT message;
	/*0010*/ ULONGLONG wParam;
	/*0018*/ LONGLONG lParam;
	/*0020*/
};

struct tagHARDWAREINPUT {
	/*0000*/ ULONG uMsg;
	/*0004*/ USHORT wParamL;
	/*0006*/ USHORT wParamH;
	/*0008*/
};

struct tagHELPINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iContextType;
	/*0008*/ INT iCtrlId;
	/*0010*/ void * hItemHandle;
	/*0018*/ ULONGLONG dwContextId;
	/*0020*/ tagPOINT MousePos;
	/*0028*/
};

struct tagHELPWININFOA {
	/*0000*/ INT wStructSize;
	/*0004*/ INT x;
	/*0008*/ INT y;
	/*000c*/ INT dx;
	/*0010*/ INT dy;
	/*0014*/ INT wMax;
	/*0018*/ CHAR rgchMember[0x2];
	/*001c*/
};

struct tagHELPWININFOW {
	/*0000*/ INT wStructSize;
	/*0004*/ INT x;
	/*0008*/ INT y;
	/*000c*/ INT dx;
	/*0010*/ INT dy;
	/*0014*/ INT wMax;
	/*0018*/ WCHAR rgchMember[0x2];
	/*001c*/
};

struct tagHIGHCONTRASTA {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ CHAR * lpszDefaultScheme;
	/*0010*/
};

struct tagHIGHCONTRASTW {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ WCHAR * lpszDefaultScheme;
	/*0010*/
};

struct tagHW_PROFILE_INFOA {
	/*0000*/ ULONG dwDockInfo;
	/*0004*/ CHAR szHwProfileGuid[0x27];
	/*002b*/ CHAR szHwProfileName[0x50];
	/*007c*/
};

struct tagHW_PROFILE_INFOW {
	/*0000*/ ULONG dwDockInfo;
	/*0004*/ WCHAR szHwProfileGuid[0x27];
	/*0052*/ WCHAR szHwProfileName[0x50];
	/*00f4*/
};

struct tagICEXYZTRIPLE {
	/*0000*/ tagCIEXYZ ciexyzRed;
	/*000c*/ tagCIEXYZ ciexyzGreen;
	/*0018*/ tagCIEXYZ ciexyzBlue;
	/*0024*/
};

struct tagICONMETRICSA {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iHorzSpacing;
	/*0008*/ INT iVertSpacing;
	/*000c*/ INT iTitleWrap;
	/*0010*/ tagLOGFONTA lfFont;
	/*004c*/
};

struct tagICONMETRICSW {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iHorzSpacing;
	/*0008*/ INT iVertSpacing;
	/*000c*/ INT iTitleWrap;
	/*0010*/ tagLOGFONTW lfFont;
	/*006c*/
};

struct tagIDLDESC {
	/*0000*/ ULONGLONG dwReserved;
	/*0008*/ USHORT wIDLFlags;
	/*0010*/
};

struct tagIMECHARPOSITION {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwCharPos;
	/*0008*/ tagPOINT pt;
	/*0010*/ UINT cLineHeight;
	/*0014*/ tagRECT rcDocument;
	/*0024*/
};

struct tagIMEMENUITEMINFOA {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fType;
	/*0008*/ UINT fState;
	/*000c*/ UINT wID;
	/*0010*/ HBITMAP__ * hbmpChecked;
	/*0018*/ HBITMAP__ * hbmpUnchecked;
	/*0020*/ ULONG dwItemData;
	/*0024*/ CHAR szString[0x50];
	/*0078*/ HBITMAP__ * hbmpItem;
	/*0080*/
};

struct tagIMEMENUITEMINFOW {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fType;
	/*0008*/ UINT fState;
	/*000c*/ UINT wID;
	/*0010*/ HBITMAP__ * hbmpChecked;
	/*0018*/ HBITMAP__ * hbmpUnchecked;
	/*0020*/ ULONG dwItemData;
	/*0024*/ WCHAR szString[0x50];
	/*00c8*/ HBITMAP__ * hbmpItem;
	/*00d0*/
};

struct tagINPUT {
	/*0000*/ ULONG type;
	/*0008*/ tagMOUSEINPUT mi;
	/*0008*/ tagKEYBDINPUT ki;
	/*0008*/ tagHARDWAREINPUT hi;
	/*0028*/
};

struct tagINPUT_INJECTION_VALUE {
	/*0000*/ USHORT page;
	/*0002*/ USHORT usage;
	/*0004*/ INT value;
	/*0008*/ USHORT index;
	/*000c*/
};

enum tagINPUT_MESSAGE_DEVICE_TYPE {
	IMDT_UNAVAILABLE = 0x0,
	IMDT_KEYBOARD = 0x1,
	IMDT_MOUSE = 0x2,
	IMDT_TOUCH = 0x4,
	IMDT_PEN = 0x8,
	IMDT_TOUCHPAD = 0x10
};

enum tagINPUT_MESSAGE_ORIGIN_ID {
	IMO_UNAVAILABLE = 0x0,
	IMO_HARDWARE = 0x1,
	IMO_INJECTED = 0x2,
	IMO_SYSTEM = 0x4
};

struct tagINPUT_MESSAGE_SOURCE {
	/*0000*/ tagINPUT_MESSAGE_DEVICE_TYPE deviceType;
	/*0004*/ tagINPUT_MESSAGE_ORIGIN_ID originId;
	/*0008*/
};

struct tagINPUT_TRANSFORM {
	/*0000*/ float _11;
	/*0004*/ float _12;
	/*0008*/ float _13;
	/*000c*/ float _14;
	/*0010*/ float _21;
	/*0014*/ float _22;
	/*0018*/ float _23;
	/*001c*/ float _24;
	/*0020*/ float _31;
	/*0024*/ float _32;
	/*0028*/ float _33;
	/*002c*/ float _34;
	/*0030*/ float _41;
	/*0034*/ float _42;
	/*0038*/ float _43;
	/*003c*/ float _44;
	/*0000*/ float m[0x4][0x4];
	/*0040*/
};

struct tagINTERFACEDATA {
	/*0000*/ tagMETHODDATA * pmethdata;
	/*0008*/ UINT cMembers;
	/*0010*/
};

struct tagINTERFACEINFO {
	/*0000*/ IUnknown * pUnk;
	/*0008*/ _GUID iid;
	/*0018*/ USHORT wMethod;
	/*0020*/
};

enum tagINVOKEKIND {
	INVOKE_FUNC = 0x1,
	INVOKE_PROPERTYGET = 0x2,
	INVOKE_PROPERTYPUT = 0x4,
	INVOKE_PROPERTYPUTREF = 0x8
};

struct tagI_RpcProxyCallbackInterface {
	/*0000*/ LONG (* IsValidMachineFn)( USHORT * , USHORT * , ULONG );
	/*0008*/ LONG (* GetClientAddressFn)( void * , CHAR * , ULONG * );
	/*0010*/ LONG (* GetConnectionTimeoutFn)( ULONG * );
	/*0018*/ LONG (* PerformCalloutFn)( void * , _RDR_CALLOUT_STATE * , _RPC_HTTP_REDIRECTOR_STAGE );
	/*0020*/ void (* FreeCalloutStateFn)( _RDR_CALLOUT_STATE * );
	/*0028*/ LONG (* GetClientSessionAndResourceUUIDFn)( void * , INT * , _GUID * , INT * , _GUID * );
	/*0030*/ LONG (* ProxyFilterIfFn)( void * , _GUID * , USHORT , INT * );
	/*0038*/ void (* RpcProxyUpdatePerfCounterFn)( RpcProxyPerfCounters , INT , ULONG );
	/*0040*/ void (* RpcProxyUpdatePerfCounterBackendServerFn)( USHORT * , INT );
	/*0048*/
};

struct tagKBDLLHOOKSTRUCT {
	/*0000*/ ULONG vkCode;
	/*0004*/ ULONG scanCode;
	/*0008*/ ULONG flags;
	/*000c*/ ULONG time;
	/*0010*/ ULONGLONG dwExtraInfo;
	/*0018*/
};

struct tagKERNINGPAIR {
	/*0000*/ USHORT wFirst;
	/*0002*/ USHORT wSecond;
	/*0004*/ INT iKernAmount;
	/*0008*/
};

struct tagKEYBDINPUT {
	/*0000*/ USHORT wVk;
	/*0002*/ USHORT wScan;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG time;
	/*0010*/ ULONGLONG dwExtraInfo;
	/*0018*/
};

struct tagLASTINPUTINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwTime;
	/*0008*/
};

struct tagLAYERPLANEDESCRIPTOR {
	/*0000*/ USHORT nSize;
	/*0002*/ USHORT nVersion;
	/*0004*/ ULONG dwFlags;
	/*0008*/ UCHAR iPixelType;
	/*0009*/ UCHAR cColorBits;
	/*000a*/ UCHAR cRedBits;
	/*000b*/ UCHAR cRedShift;
	/*000c*/ UCHAR cGreenBits;
	/*000d*/ UCHAR cGreenShift;
	/*000e*/ UCHAR cBlueBits;
	/*000f*/ UCHAR cBlueShift;
	/*0010*/ UCHAR cAlphaBits;
	/*0011*/ UCHAR cAlphaShift;
	/*0012*/ UCHAR cAccumBits;
	/*0013*/ UCHAR cAccumRedBits;
	/*0014*/ UCHAR cAccumGreenBits;
	/*0015*/ UCHAR cAccumBlueBits;
	/*0016*/ UCHAR cAccumAlphaBits;
	/*0017*/ UCHAR cDepthBits;
	/*0018*/ UCHAR cStencilBits;
	/*0019*/ UCHAR cAuxBuffers;
	/*001a*/ UCHAR iLayerPlane;
	/*001b*/ UCHAR bReserved;
	/*001c*/ ULONG crTransparent;
	/*0020*/
};

enum tagLIBFLAGS {
	LIBFLAG_FRESTRICTED = 0x1,
	LIBFLAG_FCONTROL = 0x2,
	LIBFLAG_FHIDDEN = 0x4,
	LIBFLAG_FHASDISKIMAGE = 0x8
};

struct tagLOCALESIGNATURE {
	/*0000*/ ULONG lsUsb[0x4];
	/*0010*/ ULONG lsCsbDefault[0x2];
	/*0018*/ ULONG lsCsbSupported[0x2];
	/*0020*/
};

enum tagLOCKTYPE {
	LOCK_WRITE = 0x1,
	LOCK_EXCLUSIVE = 0x2,
	LOCK_ONLYONCE = 0x4
};

struct tagLOGBRUSH {
	/*0000*/ UINT lbStyle;
	/*0004*/ ULONG lbColor;
	/*0008*/ ULONGLONG lbHatch;
	/*0010*/
};

struct tagLOGBRUSH32 {
	/*0000*/ UINT lbStyle;
	/*0004*/ ULONG lbColor;
	/*0008*/ ULONG lbHatch;
	/*000c*/
};

struct tagLOGCOLORSPACEA {
	/*0000*/ ULONG lcsSignature;
	/*0004*/ ULONG lcsVersion;
	/*0008*/ ULONG lcsSize;
	/*000c*/ LONG lcsCSType;
	/*0010*/ LONG lcsIntent;
	/*0014*/ tagICEXYZTRIPLE lcsEndpoints;
	/*0038*/ ULONG lcsGammaRed;
	/*003c*/ ULONG lcsGammaGreen;
	/*0040*/ ULONG lcsGammaBlue;
	/*0044*/ CHAR lcsFilename[0x104];
	/*0148*/
};

struct tagLOGCOLORSPACEW {
	/*0000*/ ULONG lcsSignature;
	/*0004*/ ULONG lcsVersion;
	/*0008*/ ULONG lcsSize;
	/*000c*/ LONG lcsCSType;
	/*0010*/ LONG lcsIntent;
	/*0014*/ tagICEXYZTRIPLE lcsEndpoints;
	/*0038*/ ULONG lcsGammaRed;
	/*003c*/ ULONG lcsGammaGreen;
	/*0040*/ ULONG lcsGammaBlue;
	/*0044*/ WCHAR lcsFilename[0x104];
	/*024c*/
};

struct tagLOGFONTA {
	/*0000*/ LONG lfHeight;
	/*0004*/ LONG lfWidth;
	/*0008*/ LONG lfEscapement;
	/*000c*/ LONG lfOrientation;
	/*0010*/ LONG lfWeight;
	/*0014*/ UCHAR lfItalic;
	/*0015*/ UCHAR lfUnderline;
	/*0016*/ UCHAR lfStrikeOut;
	/*0017*/ UCHAR lfCharSet;
	/*0018*/ UCHAR lfOutPrecision;
	/*0019*/ UCHAR lfClipPrecision;
	/*001a*/ UCHAR lfQuality;
	/*001b*/ UCHAR lfPitchAndFamily;
	/*001c*/ CHAR lfFaceName[0x20];
	/*003c*/
};

struct tagLOGFONTW {
	/*0000*/ LONG lfHeight;
	/*0004*/ LONG lfWidth;
	/*0008*/ LONG lfEscapement;
	/*000c*/ LONG lfOrientation;
	/*0010*/ LONG lfWeight;
	/*0014*/ UCHAR lfItalic;
	/*0015*/ UCHAR lfUnderline;
	/*0016*/ UCHAR lfStrikeOut;
	/*0017*/ UCHAR lfCharSet;
	/*0018*/ UCHAR lfOutPrecision;
	/*0019*/ UCHAR lfClipPrecision;
	/*001a*/ UCHAR lfQuality;
	/*001b*/ UCHAR lfPitchAndFamily;
	/*001c*/ WCHAR lfFaceName[0x20];
	/*005c*/
};

struct tagLOGPALETTE {
	/*0000*/ USHORT palVersion;
	/*0002*/ USHORT palNumEntries;
	/*0004*/ tagPALETTEENTRY palPalEntry[0x1];
	/*0008*/
};

struct tagLOGPEN {
	/*0000*/ UINT lopnStyle;
	/*0004*/ tagPOINT lopnWidth;
	/*000c*/ ULONG lopnColor;
	/*0010*/
};

struct tagMDICREATESTRUCTA {
	/*0000*/ CHAR const * szClass;
	/*0008*/ CHAR const * szTitle;
	/*0010*/ void * hOwner;
	/*0018*/ INT x;
	/*001c*/ INT y;
	/*0020*/ INT cx;
	/*0024*/ INT cy;
	/*0028*/ ULONG style;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagMDICREATESTRUCTW {
	/*0000*/ WCHAR const * szClass;
	/*0008*/ WCHAR const * szTitle;
	/*0010*/ void * hOwner;
	/*0018*/ INT x;
	/*001c*/ INT y;
	/*0020*/ INT cx;
	/*0024*/ INT cy;
	/*0028*/ ULONG style;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagMDINEXTMENU {
	/*0000*/ HMENU__ * hmenuIn;
	/*0008*/ HMENU__ * hmenuNext;
	/*0010*/ HWND__ * hwndNext;
	/*0018*/
};

struct tagMEASUREITEMSTRUCT {
	/*0000*/ UINT CtlType;
	/*0004*/ UINT CtlID;
	/*0008*/ UINT itemID;
	/*000c*/ UINT itemWidth;
	/*0010*/ UINT itemHeight;
	/*0018*/ ULONGLONG itemData;
	/*0020*/
};

enum tagMEMCTX {
	MEMCTX_TASK = 0x1,
	MEMCTX_SHARED = 0x2,
	MEMCTX_MACSYSTEM = 0x3,
	MEMCTX_UNKNOWN = 0xffffffff,
	MEMCTX_SAME = 0xfffffffe
};

struct tagMENUBARINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcBar;
	/*0018*/ HMENU__ * hMenu;
	/*0020*/ HWND__ * hwndMenu;
	/*0028*/ INT fBarFocused : 01; // 0x00000001;
	/*0028*/ INT fFocused : 01; // 0x00000002;
	/*0028*/ INT fUnused : 30; // 0xfffffffc;
	/*0030*/
};

struct tagMENUGETOBJECTINFO {
	/*0000*/ ULONG dwFlags;
	/*0004*/ UINT uPos;
	/*0008*/ HMENU__ * hmenu;
	/*0010*/ void * riid;
	/*0018*/ void * pvObj;
	/*0020*/
};

struct tagMENUINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG fMask;
	/*0008*/ ULONG dwStyle;
	/*000c*/ UINT cyMax;
	/*0010*/ HBRUSH__ * hbrBack;
	/*0018*/ ULONG dwContextHelpID;
	/*0020*/ ULONGLONG dwMenuData;
	/*0028*/
};

struct tagMENUITEMINFOA {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fMask;
	/*0008*/ UINT fType;
	/*000c*/ UINT fState;
	/*0010*/ UINT wID;
	/*0018*/ HMENU__ * hSubMenu;
	/*0020*/ HBITMAP__ * hbmpChecked;
	/*0028*/ HBITMAP__ * hbmpUnchecked;
	/*0030*/ ULONGLONG dwItemData;
	/*0038*/ CHAR * dwTypeData;
	/*0040*/ UINT cch;
	/*0048*/ HBITMAP__ * hbmpItem;
	/*0050*/
};

struct tagMENUITEMINFOW {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fMask;
	/*0008*/ UINT fType;
	/*000c*/ UINT fState;
	/*0010*/ UINT wID;
	/*0018*/ HMENU__ * hSubMenu;
	/*0020*/ HBITMAP__ * hbmpChecked;
	/*0028*/ HBITMAP__ * hbmpUnchecked;
	/*0030*/ ULONGLONG dwItemData;
	/*0038*/ WCHAR * dwTypeData;
	/*0040*/ UINT cch;
	/*0048*/ HBITMAP__ * hbmpItem;
	/*0050*/
};

struct tagMETAFILEPICT {
	/*0000*/ LONG mm;
	/*0004*/ LONG xExt;
	/*0008*/ LONG yExt;
	/*0010*/ HMETAFILE__ * hMF;
	/*0018*/
};

struct tagMETAHEADER {
	/*0000*/ USHORT mtType;
	/*0002*/ USHORT mtHeaderSize;
	/*0004*/ USHORT mtVersion;
	/*0006*/ ULONG mtSize;
	/*000a*/ USHORT mtNoObjects;
	/*000c*/ ULONG mtMaxRecord;
	/*0010*/ USHORT mtNoParameters;
	/*0012*/
};

struct tagMETARECORD {
	/*0000*/ ULONG rdSize;
	/*0004*/ USHORT rdFunction;
	/*0006*/ USHORT rdParm[0x1];
	/*0008*/
};

struct tagMETHODDATA {
	/*0000*/ WCHAR * szName;
	/*0008*/ tagPARAMDATA * ppdata;
	/*0010*/ LONG dispid;
	/*0014*/ UINT iMeth;
	/*0018*/ tagCALLCONV cc;
	/*001c*/ UINT cArgs;
	/*0020*/ USHORT wFlags;
	/*0022*/ USHORT vtReturn;
	/*0028*/
};

struct tagMINIMIZEDMETRICS {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iWidth;
	/*0008*/ INT iHorzGap;
	/*000c*/ INT iVertGap;
	/*0010*/ INT iArrange;
	/*0014*/
};

struct tagMINMAXINFO {
	/*0000*/ tagPOINT ptReserved;
	/*0008*/ tagPOINT ptMaxSize;
	/*0010*/ tagPOINT ptMaxPosition;
	/*0018*/ tagPOINT ptMinTrackSize;
	/*0020*/ tagPOINT ptMaxTrackSize;
	/*0028*/
};

enum tagMKREDUCE {
	MKRREDUCE_ONE = 0x30000,
	MKRREDUCE_TOUSER = 0x20000,
	MKRREDUCE_THROUGHUSER = 0x10000,
	MKRREDUCE_ALL = 0x0
};

enum tagMKSYS {
	MKSYS_NONE = 0x0,
	MKSYS_GENERICCOMPOSITE = 0x1,
	MKSYS_FILEMONIKER = 0x2,
	MKSYS_ANTIMONIKER = 0x3,
	MKSYS_ITEMMONIKER = 0x4,
	MKSYS_POINTERMONIKER = 0x5,
	MKSYS_CLASSMONIKER = 0x7,
	MKSYS_OBJREFMONIKER = 0x8,
	MKSYS_SESSIONMONIKER = 0x9,
	MKSYS_LUAMONIKER = 0xa
};

struct tagMONITORINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcMonitor;
	/*0014*/ tagRECT rcWork;
	/*0024*/ ULONG dwFlags;
	/*0028*/
};

struct tagMONITORINFOEXA : tagMONITORINFO {
	/*0028*/ CHAR szDevice[0x20];
	/*0048*/
};

struct tagMONITORINFOEXW : tagMONITORINFO {
	/*0028*/ WCHAR szDevice[0x20];
	/*0068*/
};

struct tagMOUSEHOOKSTRUCT {
	/*0000*/ tagPOINT pt;
	/*0008*/ HWND__ * hwnd;
	/*0010*/ UINT wHitTestCode;
	/*0018*/ ULONGLONG dwExtraInfo;
	/*0020*/
};

struct tagMOUSEHOOKSTRUCTEX : tagMOUSEHOOKSTRUCT {
	/*0020*/ ULONG mouseData;
	/*0028*/
};

struct tagMOUSEINPUT {
	/*0000*/ LONG dx;
	/*0004*/ LONG dy;
	/*0008*/ ULONG mouseData;
	/*000c*/ ULONG dwFlags;
	/*0010*/ ULONG time;
	/*0018*/ ULONGLONG dwExtraInfo;
	/*0020*/
};

struct tagMOUSEKEYS {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG iMaxSpeed;
	/*000c*/ ULONG iTimeToMaxSpeed;
	/*0010*/ ULONG iCtrlSpeed;
	/*0014*/ ULONG dwReserved1;
	/*0018*/ ULONG dwReserved2;
	/*001c*/
};

struct tagMOUSEMOVEPOINT {
	/*0000*/ INT x;
	/*0004*/ INT y;
	/*0008*/ ULONG time;
	/*0010*/ ULONGLONG dwExtraInfo;
	/*0018*/
};

struct tagMSG {
	/*0000*/ HWND__ * hwnd;
	/*0008*/ UINT message;
	/*0010*/ ULONGLONG wParam;
	/*0018*/ LONGLONG lParam;
	/*0020*/ ULONG time;
	/*0024*/ tagPOINT pt;
	/*0030*/
};

struct tagMSGBOXPARAMSA {
	/*0000*/ UINT cbSize;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ HINSTANCE__ * hInstance;
	/*0018*/ CHAR const * lpszText;
	/*0020*/ CHAR const * lpszCaption;
	/*0028*/ ULONG dwStyle;
	/*0030*/ CHAR const * lpszIcon;
	/*0038*/ ULONGLONG dwContextHelpId;
	/*0040*/ void (* lpfnMsgBoxCallback)( tagHELPINFO * );
	/*0048*/ ULONG dwLanguageId;
	/*0050*/
};

struct tagMSGBOXPARAMSW {
	/*0000*/ UINT cbSize;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ HINSTANCE__ * hInstance;
	/*0018*/ WCHAR const * lpszText;
	/*0020*/ WCHAR const * lpszCaption;
	/*0028*/ ULONG dwStyle;
	/*0030*/ WCHAR const * lpszIcon;
	/*0038*/ ULONGLONG dwContextHelpId;
	/*0040*/ void (* lpfnMsgBoxCallback)( tagHELPINFO * );
	/*0048*/ ULONG dwLanguageId;
	/*0050*/
};

enum tagMSHCTX {
	MSHCTX_LOCAL = 0x0,
	MSHCTX_NOSHAREDMEM = 0x1,
	MSHCTX_DIFFERENTMACHINE = 0x2,
	MSHCTX_INPROC = 0x3,
	MSHCTX_CROSSCTX = 0x4,
	MSHCTX_CONTAINER = 0x5
};

enum tagMSHLFLAGS {
	MSHLFLAGS_NORMAL = 0x0,
	MSHLFLAGS_TABLESTRONG = 0x1,
	MSHLFLAGS_TABLEWEAK = 0x2,
	MSHLFLAGS_NOPING = 0x4,
	MSHLFLAGS_RESERVED1 = 0x8,
	MSHLFLAGS_RESERVED2 = 0x10,
	MSHLFLAGS_RESERVED3 = 0x20,
	MSHLFLAGS_RESERVED4 = 0x40
};

struct tagMSLLHOOKSTRUCT {
	/*0000*/ tagPOINT pt;
	/*0008*/ ULONG mouseData;
	/*000c*/ ULONG flags;
	/*0010*/ ULONG time;
	/*0018*/ ULONGLONG dwExtraInfo;
	/*0020*/
};

struct tagMULTIKEYHELPA {
	/*0000*/ ULONG mkSize;
	/*0004*/ CHAR mkKeylist;
	/*0005*/ CHAR szKeyphrase[0x1];
	/*0008*/
};

struct tagMULTIKEYHELPW {
	/*0000*/ ULONG mkSize;
	/*0004*/ WCHAR mkKeylist;
	/*0006*/ WCHAR szKeyphrase[0x1];
	/*0008*/
};

struct tagMULTI_QI {
	/*0000*/ _GUID const * pIID;
	/*0008*/ IUnknown * pItf;
	/*0010*/ HRESULT hr;
	/*0018*/
};

struct tagNCCALCSIZE_PARAMS {
	/*0000*/ tagRECT rgrc[0x3];
	/*0030*/ tagWINDOWPOS * lppos;
	/*0038*/
};

struct tagNEWTEXTMETRICA {
	/*0000*/ LONG tmHeight;
	/*0004*/ LONG tmAscent;
	/*0008*/ LONG tmDescent;
	/*000c*/ LONG tmInternalLeading;
	/*0010*/ LONG tmExternalLeading;
	/*0014*/ LONG tmAveCharWidth;
	/*0018*/ LONG tmMaxCharWidth;
	/*001c*/ LONG tmWeight;
	/*0020*/ LONG tmOverhang;
	/*0024*/ LONG tmDigitizedAspectX;
	/*0028*/ LONG tmDigitizedAspectY;
	/*002c*/ UCHAR tmFirstChar;
	/*002d*/ UCHAR tmLastChar;
	/*002e*/ UCHAR tmDefaultChar;
	/*002f*/ UCHAR tmBreakChar;
	/*0030*/ UCHAR tmItalic;
	/*0031*/ UCHAR tmUnderlined;
	/*0032*/ UCHAR tmStruckOut;
	/*0033*/ UCHAR tmPitchAndFamily;
	/*0034*/ UCHAR tmCharSet;
	/*0038*/ ULONG ntmFlags;
	/*003c*/ UINT ntmSizeEM;
	/*0040*/ UINT ntmCellHeight;
	/*0044*/ UINT ntmAvgWidth;
	/*0048*/
};

struct tagNEWTEXTMETRICEXA {
	/*0000*/ tagNEWTEXTMETRICA ntmTm;
	/*0048*/ tagFONTSIGNATURE ntmFontSig;
	/*0060*/
};

struct tagNEWTEXTMETRICEXW {
	/*0000*/ tagNEWTEXTMETRICW ntmTm;
	/*004c*/ tagFONTSIGNATURE ntmFontSig;
	/*0064*/
};

struct tagNEWTEXTMETRICW {
	/*0000*/ LONG tmHeight;
	/*0004*/ LONG tmAscent;
	/*0008*/ LONG tmDescent;
	/*000c*/ LONG tmInternalLeading;
	/*0010*/ LONG tmExternalLeading;
	/*0014*/ LONG tmAveCharWidth;
	/*0018*/ LONG tmMaxCharWidth;
	/*001c*/ LONG tmWeight;
	/*0020*/ LONG tmOverhang;
	/*0024*/ LONG tmDigitizedAspectX;
	/*0028*/ LONG tmDigitizedAspectY;
	/*002c*/ WCHAR tmFirstChar;
	/*002e*/ WCHAR tmLastChar;
	/*0030*/ WCHAR tmDefaultChar;
	/*0032*/ WCHAR tmBreakChar;
	/*0034*/ UCHAR tmItalic;
	/*0035*/ UCHAR tmUnderlined;
	/*0036*/ UCHAR tmStruckOut;
	/*0037*/ UCHAR tmPitchAndFamily;
	/*0038*/ UCHAR tmCharSet;
	/*003c*/ ULONG ntmFlags;
	/*0040*/ UINT ntmSizeEM;
	/*0044*/ UINT ntmCellHeight;
	/*0048*/ UINT ntmAvgWidth;
	/*004c*/
};

struct tagNMHDR {
	/*0000*/ HWND__ * hwndFrom;
	/*0008*/ ULONGLONG idFrom;
	/*0010*/ UINT code;
	/*0018*/
};

struct tagNONCLIENTMETRICSA {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iBorderWidth;
	/*0008*/ INT iScrollWidth;
	/*000c*/ INT iScrollHeight;
	/*0010*/ INT iCaptionWidth;
	/*0014*/ INT iCaptionHeight;
	/*0018*/ tagLOGFONTA lfCaptionFont;
	/*0054*/ INT iSmCaptionWidth;
	/*0058*/ INT iSmCaptionHeight;
	/*005c*/ tagLOGFONTA lfSmCaptionFont;
	/*0098*/ INT iMenuWidth;
	/*009c*/ INT iMenuHeight;
	/*00a0*/ tagLOGFONTA lfMenuFont;
	/*00dc*/ tagLOGFONTA lfStatusFont;
	/*0118*/ tagLOGFONTA lfMessageFont;
	/*0154*/ INT iPaddedBorderWidth;
	/*0158*/
};

struct tagNONCLIENTMETRICSW {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iBorderWidth;
	/*0008*/ INT iScrollWidth;
	/*000c*/ INT iScrollHeight;
	/*0010*/ INT iCaptionWidth;
	/*0014*/ INT iCaptionHeight;
	/*0018*/ tagLOGFONTW lfCaptionFont;
	/*0074*/ INT iSmCaptionWidth;
	/*0078*/ INT iSmCaptionHeight;
	/*007c*/ tagLOGFONTW lfSmCaptionFont;
	/*00d8*/ INT iMenuWidth;
	/*00dc*/ INT iMenuHeight;
	/*00e0*/ tagLOGFONTW lfMenuFont;
	/*013c*/ tagLOGFONTW lfStatusFont;
	/*0198*/ tagLOGFONTW lfMessageFont;
	/*01f4*/ INT iPaddedBorderWidth;
	/*01f8*/
};

struct tagOBJECTDESCRIPTOR {
	/*0000*/ ULONG cbSize;
	/*0004*/ _GUID clsid;
	/*0014*/ ULONG dwDrawAspect;
	/*0018*/ tagSIZE sizel;
	/*0020*/ _POINTL pointl;
	/*0028*/ ULONG dwStatus;
	/*002c*/ ULONG dwFullUserTypeName;
	/*0030*/ ULONG dwSrcOfCopy;
	/*0034*/
};

struct tagOIFI {
	/*0000*/ UINT cb;
	/*0004*/ INT fMDIApp;
	/*0008*/ HWND__ * hwndFrame;
	/*0010*/ HACCEL__ * haccel;
	/*0018*/ UINT cAccelEntries;
	/*0020*/
};

enum tagOLECLOSE {
	OLECLOSE_SAVEIFDIRTY = 0x0,
	OLECLOSE_NOSAVE = 0x1,
	OLECLOSE_PROMPTSAVE = 0x2
};

enum tagOLECONTF {
	OLECONTF_EMBEDDINGS = 0x1,
	OLECONTF_LINKS = 0x2,
	OLECONTF_OTHERS = 0x4,
	OLECONTF_ONLYUSER = 0x8,
	OLECONTF_ONLYIFRUNNING = 0x10
};

enum tagOLEGETMONIKER {
	OLEGETMONIKER_ONLYIFTHERE = 0x1,
	OLEGETMONIKER_FORCEASSIGN = 0x2,
	OLEGETMONIKER_UNASSIGN = 0x3,
	OLEGETMONIKER_TEMPFORUSER = 0x4
};

enum tagOLELINKBIND {
	OLELINKBIND_EVENIFCLASSDIFF = 0x1
};

enum tagOLEMISC {
	OLEMISC_RECOMPOSEONRESIZE = 0x1,
	OLEMISC_ONLYICONIC = 0x2,
	OLEMISC_INSERTNOTREPLACE = 0x4,
	OLEMISC_STATIC = 0x8,
	OLEMISC_CANTLINKINSIDE = 0x10,
	OLEMISC_CANLINKBYOLE1 = 0x20,
	OLEMISC_ISLINKOBJECT = 0x40,
	OLEMISC_INSIDEOUT = 0x80,
	OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
	OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
	OLEMISC_INVISIBLEATRUNTIME = 0x400,
	OLEMISC_ALWAYSRUN = 0x800,
	OLEMISC_ACTSLIKEBUTTON = 0x1000,
	OLEMISC_ACTSLIKELABEL = 0x2000,
	OLEMISC_NOUIACTIVATE = 0x4000,
	OLEMISC_ALIGNABLE = 0x8000,
	OLEMISC_SIMPLEFRAME = 0x10000,
	OLEMISC_SETCLIENTSITEFIRST = 0x20000,
	OLEMISC_IMEMODE = 0x40000,
	OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
	OLEMISC_WANTSTOMENUMERGE = 0x100000,
	OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
};

enum tagOLERENDER {
	OLERENDER_NONE = 0x0,
	OLERENDER_DRAW = 0x1,
	OLERENDER_FORMAT = 0x2,
	OLERENDER_ASIS = 0x3
};

enum tagOLEUPDATE {
	OLEUPDATE_ALWAYS = 0x1,
	OLEUPDATE_ONCALL = 0x3
};

struct tagOLEVERB {
	/*0000*/ LONG lVerb;
	/*0008*/ WCHAR * lpszVerbName;
	/*0010*/ ULONG fuFlags;
	/*0014*/ ULONG grfAttribs;
	/*0018*/
};

enum tagOLEVERBATTRIB {
	OLEVERBATTRIB_NEVERDIRTIES = 0x1,
	OLEVERBATTRIB_ONCONTAINERMENU = 0x2
};

enum tagOLEWHICHMK {
	OLEWHICHMK_CONTAINER = 0x1,
	OLEWHICHMK_OBJREL = 0x2,
	OLEWHICHMK_OBJFULL = 0x3
};

struct tagOleMenuGroupWidths {
	/*0000*/ LONG width[0x6];
	/*0018*/
};

struct tagPAINTSTRUCT {
	/*0000*/ HDC__ * hdc;
	/*0008*/ INT fErase;
	/*000c*/ tagRECT rcPaint;
	/*001c*/ INT fRestore;
	/*0020*/ INT fIncUpdate;
	/*0024*/ UCHAR rgbReserved[0x20];
	/*0048*/
};

struct tagPALETTEENTRY {
	/*0000*/ UCHAR peRed;
	/*0001*/ UCHAR peGreen;
	/*0002*/ UCHAR peBlue;
	/*0003*/ UCHAR peFlags;
	/*0004*/
};

struct tagPANOSE {
	/*0000*/ UCHAR bFamilyType;
	/*0001*/ UCHAR bSerifStyle;
	/*0002*/ UCHAR bWeight;
	/*0003*/ UCHAR bProportion;
	/*0004*/ UCHAR bContrast;
	/*0005*/ UCHAR bStrokeVariation;
	/*0006*/ UCHAR bArmStyle;
	/*0007*/ UCHAR bLetterform;
	/*0008*/ UCHAR bMidline;
	/*0009*/ UCHAR bXHeight;
	/*000a*/
};

struct tagPARAMDATA {
	/*0000*/ WCHAR * szName;
	/*0008*/ USHORT vt;
	/*0010*/
};

struct tagPARAMDESC {
	/*0000*/ tagPARAMDESCEX * pparamdescex;
	/*0008*/ USHORT wParamFlags;
	/*0010*/
};

struct tagPARAMDESCEX {
	/*0000*/ ULONG cBytes;
	/*0008*/ tagVARIANT varDefaultValue;
	/*0020*/
};

struct tagPELARRAY {
	/*0000*/ LONG paXCount;
	/*0004*/ LONG paYCount;
	/*0008*/ LONG paXExt;
	/*000c*/ LONG paYExt;
	/*0010*/ UCHAR paRGBs;
	/*0014*/
};

enum tagPENDINGMSG {
	PENDINGMSG_CANCELCALL = 0x0,
	PENDINGMSG_WAITNOPROCESS = 0x1,
	PENDINGMSG_WAITDEFPROCESS = 0x2
};

enum tagPENDINGTYPE {
	PENDINGTYPE_TOPLEVEL = 0x1,
	PENDINGTYPE_NESTED = 0x2
};

struct tagPIXELFORMATDESCRIPTOR {
	/*0000*/ USHORT nSize;
	/*0002*/ USHORT nVersion;
	/*0004*/ ULONG dwFlags;
	/*0008*/ UCHAR iPixelType;
	/*0009*/ UCHAR cColorBits;
	/*000a*/ UCHAR cRedBits;
	/*000b*/ UCHAR cRedShift;
	/*000c*/ UCHAR cGreenBits;
	/*000d*/ UCHAR cGreenShift;
	/*000e*/ UCHAR cBlueBits;
	/*000f*/ UCHAR cBlueShift;
	/*0010*/ UCHAR cAlphaBits;
	/*0011*/ UCHAR cAlphaShift;
	/*0012*/ UCHAR cAccumBits;
	/*0013*/ UCHAR cAccumRedBits;
	/*0014*/ UCHAR cAccumGreenBits;
	/*0015*/ UCHAR cAccumBlueBits;
	/*0016*/ UCHAR cAccumAlphaBits;
	/*0017*/ UCHAR cDepthBits;
	/*0018*/ UCHAR cStencilBits;
	/*0019*/ UCHAR cAuxBuffers;
	/*001a*/ UCHAR iLayerType;
	/*001b*/ UCHAR bReserved;
	/*001c*/ ULONG dwLayerMask;
	/*0020*/ ULONG dwVisibleMask;
	/*0024*/ ULONG dwDamageMask;
	/*0028*/
};

struct tagPOINT {
	/*0000*/ LONG x;
	/*0004*/ LONG y;
	/*0008*/
};

enum tagPOINTER_BUTTON_CHANGE_TYPE {
	POINTER_CHANGE_NONE = 0x0,
	POINTER_CHANGE_FIRSTBUTTON_DOWN = 0x1,
	POINTER_CHANGE_FIRSTBUTTON_UP = 0x2,
	POINTER_CHANGE_SECONDBUTTON_DOWN = 0x3,
	POINTER_CHANGE_SECONDBUTTON_UP = 0x4,
	POINTER_CHANGE_THIRDBUTTON_DOWN = 0x5,
	POINTER_CHANGE_THIRDBUTTON_UP = 0x6,
	POINTER_CHANGE_FOURTHBUTTON_DOWN = 0x7,
	POINTER_CHANGE_FOURTHBUTTON_UP = 0x8,
	POINTER_CHANGE_FIFTHBUTTON_DOWN = 0x9,
	POINTER_CHANGE_FIFTHBUTTON_UP = 0xa
};

struct tagPOINTER_DEVICE_CURSOR_INFO {
	/*0000*/ UINT cursorId;
	/*0004*/ tagPOINTER_DEVICE_CURSOR_TYPE cursor;
	/*0008*/
};

enum tagPOINTER_DEVICE_CURSOR_TYPE {
	POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0x0,
	POINTER_DEVICE_CURSOR_TYPE_TIP = 0x1,
	POINTER_DEVICE_CURSOR_TYPE_ERASER = 0x2,
	POINTER_DEVICE_CURSOR_TYPE_MAX = 0xffffffff
};

struct tagPOINTER_DEVICE_INFO {
	/*0000*/ ULONG displayOrientation;
	/*0008*/ void * device;
	/*0010*/ tagPOINTER_DEVICE_TYPE pointerDeviceType;
	/*0018*/ HMONITOR__ * monitor;
	/*0020*/ ULONG startingCursorId;
	/*0024*/ USHORT maxActiveContacts;
	/*0026*/ WCHAR productString[0x208];
	/*0438*/
};

struct tagPOINTER_DEVICE_PROPERTY {
	/*0000*/ INT logicalMin;
	/*0004*/ INT logicalMax;
	/*0008*/ INT physicalMin;
	/*000c*/ INT physicalMax;
	/*0010*/ UINT unit;
	/*0014*/ UINT unitExponent;
	/*0018*/ USHORT usagePageId;
	/*001a*/ USHORT usageId;
	/*001c*/
};

enum tagPOINTER_DEVICE_TYPE {
	POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x1,
	POINTER_DEVICE_TYPE_EXTERNAL_PEN = 0x2,
	POINTER_DEVICE_TYPE_TOUCH = 0x3,
	POINTER_DEVICE_TYPE_TOUCH_PAD = 0x4,
	POINTER_DEVICE_TYPE_MAX = 0xffffffff
};

struct tagPOINTER_INFO {
	/*0000*/ ULONG pointerType;
	/*0004*/ UINT pointerId;
	/*0008*/ UINT frameId;
	/*000c*/ UINT pointerFlags;
	/*0010*/ void * sourceDevice;
	/*0018*/ HWND__ * hwndTarget;
	/*0020*/ tagPOINT ptPixelLocation;
	/*0028*/ tagPOINT ptHimetricLocation;
	/*0030*/ tagPOINT ptPixelLocationRaw;
	/*0038*/ tagPOINT ptHimetricLocationRaw;
	/*0040*/ ULONG dwTime;
	/*0044*/ UINT historyCount;
	/*0048*/ INT InputData;
	/*004c*/ ULONG dwKeyStates;
	/*0050*/ ULONGLONG PerformanceCount;
	/*0058*/ tagPOINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
	/*0060*/
};

enum tagPOINTER_INPUT_TYPE {
	PT_POINTER = 0x1,
	PT_TOUCH = 0x2,
	PT_PEN = 0x3,
	PT_MOUSE = 0x4,
	PT_TOUCHPAD = 0x5
};

struct tagPOINTER_PEN_INFO {
	/*0000*/ tagPOINTER_INFO pointerInfo;
	/*0060*/ UINT penFlags;
	/*0064*/ UINT penMask;
	/*0068*/ UINT pressure;
	/*006c*/ UINT rotation;
	/*0070*/ INT tiltX;
	/*0074*/ INT tiltY;
	/*0078*/
};

struct tagPOINTER_TOUCH_INFO {
	/*0000*/ tagPOINTER_INFO pointerInfo;
	/*0060*/ UINT touchFlags;
	/*0064*/ UINT touchMask;
	/*0068*/ tagRECT rcContact;
	/*0078*/ tagRECT rcContactRaw;
	/*0088*/ UINT orientation;
	/*008c*/ UINT pressure;
	/*0090*/
};

struct tagPOINTER_TYPE_INFO {
	/*0000*/ ULONG type;
	/*0008*/ tagPOINTER_TOUCH_INFO touchInfo;
	/*0008*/ tagPOINTER_PEN_INFO penInfo;
	/*0098*/
};

struct tagPOINTFX {
	/*0000*/ _FIXED x;
	/*0004*/ _FIXED y;
	/*0008*/
};

struct tagPOINTS {
	/*0000*/ SHORT x;
	/*0002*/ SHORT y;
	/*0004*/
};

struct tagPOLYTEXTA {
	/*0000*/ INT x;
	/*0004*/ INT y;
	/*0008*/ UINT n;
	/*0010*/ CHAR const * lpstr;
	/*0018*/ UINT uiFlags;
	/*001c*/ tagRECT rcl;
	/*0030*/ INT * pdx;
	/*0038*/
};

struct tagPOLYTEXTW {
	/*0000*/ INT x;
	/*0004*/ INT y;
	/*0008*/ UINT n;
	/*0010*/ WCHAR const * lpstr;
	/*0018*/ UINT uiFlags;
	/*001c*/ tagRECT rcl;
	/*0030*/ INT * pdx;
	/*0038*/
};

struct tagPROPSPEC {
	/*0000*/ ULONG ulKind;
	/*0008*/ ULONG propid;
	/*0008*/ WCHAR * lpwstr;
	/*0010*/
};

struct tagPROPVARIANT {
	/*0000*/ USHORT vt;
	/*0002*/ USHORT wReserved1;
	/*0004*/ USHORT wReserved2;
	/*0006*/ USHORT wReserved3;
	/*0008*/ CHAR cVal;
	/*0008*/ UCHAR bVal;
	/*0008*/ SHORT iVal;
	/*0008*/ USHORT uiVal;
	/*0008*/ LONG lVal;
	/*0008*/ ULONG ulVal;
	/*0008*/ INT intVal;
	/*0008*/ UINT uintVal;
	/*0008*/ _LARGE_INTEGER hVal;
	/*0008*/ _ULARGE_INTEGER uhVal;
	/*0008*/ float fltVal;
	/*0008*/ double dblVal;
	/*0008*/ SHORT boolVal;
	/*0008*/ SHORT __OBSOLETE__VARIANT_BOOL;
	/*0008*/ LONG scode;
	/*0008*/ tagCY cyVal;
	/*0008*/ double date;
	/*0008*/ _FILETIME filetime;
	/*0008*/ _GUID * puuid;
	/*0008*/ tagCLIPDATA * pclipdata;
	/*0008*/ WCHAR * bstrVal;
	/*0008*/ tagBSTRBLOB bstrblobVal;
	/*0008*/ tagBLOB blob;
	/*0008*/ CHAR * pszVal;
	/*0008*/ WCHAR * pwszVal;
	/*0008*/ IUnknown * punkVal;
	/*0008*/ IDispatch * pdispVal;
	/*0008*/ IStream * pStream;
	/*0008*/ IStorage * pStorage;
	/*0008*/ tagVersionedStream * pVersionedStream;
	/*0008*/ tagSAFEARRAY * parray;
	/*0008*/ tagCAC cac;
	/*0008*/ tagCAUB caub;
	/*0008*/ tagCAI cai;
	/*0008*/ tagCAUI caui;
	/*0008*/ tagCAL cal;
	/*0008*/ tagCAUL caul;
	/*0008*/ tagCAH cah;
	/*0008*/ tagCAUH cauh;
	/*0008*/ tagCAFLT caflt;
	/*0008*/ tagCADBL cadbl;
	/*0008*/ tagCABOOL cabool;
	/*0008*/ tagCASCODE cascode;
	/*0008*/ tagCACY cacy;
	/*0008*/ tagCADATE cadate;
	/*0008*/ tagCAFILETIME cafiletime;
	/*0008*/ tagCACLSID cauuid;
	/*0008*/ tagCACLIPDATA caclipdata;
	/*0008*/ tagCABSTR cabstr;
	/*0008*/ tagCABSTRBLOB cabstrblob;
	/*0008*/ tagCALPSTR calpstr;
	/*0008*/ tagCALPWSTR calpwstr;
	/*0008*/ tagCAPROPVARIANT capropvar;
	/*0008*/ CHAR * pcVal;
	/*0008*/ UCHAR * pbVal;
	/*0008*/ SHORT * piVal;
	/*0008*/ USHORT * puiVal;
	/*0008*/ LONG * plVal;
	/*0008*/ ULONG * pulVal;
	/*0008*/ INT * pintVal;
	/*0008*/ UINT * puintVal;
	/*0008*/ float * pfltVal;
	/*0008*/ double * pdblVal;
	/*0008*/ SHORT * pboolVal;
	/*0008*/ tagDEC * pdecVal;
	/*0008*/ LONG * pscode;
	/*0008*/ tagCY * pcyVal;
	/*0008*/ double * pdate;
	/*0008*/ WCHAR * * pbstrVal;
	/*0008*/ IUnknown * * ppunkVal;
	/*0008*/ IDispatch * * ppdispVal;
	/*0008*/ tagSAFEARRAY * * pparray;
	/*0008*/ tagPROPVARIANT * pvarVal;
	/*0000*/ tagDEC decVal;
	/*0018*/
};

struct tagProxyFileInfo {
	/*0000*/ tagCInterfaceProxyVtbl * const * pProxyVtblList;
	/*0008*/ tagCInterfaceStubVtbl * const * pStubVtblList;
	/*0010*/ CHAR const * const * pNamesArray;
	/*0018*/ _GUID const * * pDelegatedIIDs;
	/*0020*/ INT (* const pIIDLookupRtn)( _GUID const * , INT * );
	/*0028*/ USHORT TableSize;
	/*002a*/ USHORT TableVersion;
	/*0030*/ _GUID const * * pAsyncIIDLookup;
	/*0038*/ LONGLONG Filler2;
	/*0040*/ LONGLONG Filler3;
	/*0048*/ LONGLONG Filler4;
	/*0050*/
};

struct tagQUERYCONTEXT {
	/*0000*/ ULONG dwContext;
	/*0004*/ tagCSPLATFORM Platform;
	/*0014*/ ULONG Locale;
	/*0018*/ ULONG dwVersionHi;
	/*001c*/ ULONG dwVersionLo;
	/*0020*/
};

struct tagRAWHID {
	/*0000*/ ULONG dwSizeHid;
	/*0004*/ ULONG dwCount;
	/*0008*/ UCHAR bRawData[0x1];
	/*000c*/
};

struct tagRAWINPUT {
	
	/*0000*/ tagRAWINPUTHEADER header;
	/*0018*/ <unnamed-type-data> data;
	/*0030*/
};

struct tagRAWINPUTDEVICE {
	/*0000*/ USHORT usUsagePage;
	/*0002*/ USHORT usUsage;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HWND__ * hwndTarget;
	/*0010*/
};

struct tagRAWINPUTDEVICELIST {
	/*0000*/ void * hDevice;
	/*0008*/ ULONG dwType;
	/*0010*/
};

struct tagRAWINPUTHEADER {
	/*0000*/ ULONG dwType;
	/*0004*/ ULONG dwSize;
	/*0008*/ void * hDevice;
	/*0010*/ ULONGLONG wParam;
	/*0018*/
};

struct tagRAWKEYBOARD {
	/*0000*/ USHORT MakeCode;
	/*0002*/ USHORT Flags;
	/*0004*/ USHORT Reserved;
	/*0006*/ USHORT VKey;
	/*0008*/ UINT Message;
	/*000c*/ ULONG ExtraInformation;
	/*0010*/
};

struct tagRAWMOUSE {
	/*0000*/ USHORT usFlags;
	/*0004*/ ULONG ulButtons;
	/*0004*/ USHORT usButtonFlags;
	/*0006*/ USHORT usButtonData;
	/*0008*/ ULONG ulRawButtons;
	/*000c*/ LONG lLastX;
	/*0010*/ LONG lLastY;
	/*0014*/ ULONG ulExtraInformation;
	/*0018*/
};

struct tagRECONVERTSTRING {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwVersion;
	/*0008*/ ULONG dwStrLen;
	/*000c*/ ULONG dwStrOffset;
	/*0010*/ ULONG dwCompStrLen;
	/*0014*/ ULONG dwCompStrOffset;
	/*0018*/ ULONG dwTargetStrLen;
	/*001c*/ ULONG dwTargetStrOffset;
	/*0020*/
};

struct tagRECT {
	/*0000*/ LONG left;
	/*0004*/ LONG top;
	/*0008*/ LONG right;
	/*000c*/ LONG bottom;
	/*0010*/
};

enum tagREGCLS {
	REGCLS_SINGLEUSE = 0x0,
	REGCLS_MULTIPLEUSE = 0x1,
	REGCLS_MULTI_SEPARATE = 0x2,
	REGCLS_SUSPENDED = 0x4,
	REGCLS_SURROGATE = 0x8,
	REGCLS_AGILE = 0x10
};

struct tagREGISTERWORDA {
	/*0000*/ CHAR * lpReading;
	/*0008*/ CHAR * lpWord;
	/*0010*/
};

struct tagREGISTERWORDW {
	/*0000*/ WCHAR * lpReading;
	/*0008*/ WCHAR * lpWord;
	/*0010*/
};

enum tagREGKIND {
	REGKIND_DEFAULT = 0x0,
	REGKIND_REGISTER = 0x1,
	REGKIND_NONE = 0x2
};

struct tagRGBQUAD {
	/*0000*/ UCHAR rgbBlue;
	/*0001*/ UCHAR rgbGreen;
	/*0002*/ UCHAR rgbRed;
	/*0003*/ UCHAR rgbReserved;
	/*0004*/
};

struct tagRGBTRIPLE {
	/*0000*/ UCHAR rgbtBlue;
	/*0001*/ UCHAR rgbtGreen;
	/*0002*/ UCHAR rgbtRed;
	/*0003*/
};

struct tagRID_DEVICE_INFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwType;
	/*0008*/ tagRID_DEVICE_INFO_MOUSE mouse;
	/*0008*/ tagRID_DEVICE_INFO_KEYBOARD keyboard;
	/*0008*/ tagRID_DEVICE_INFO_HID hid;
	/*0020*/
};

struct tagRID_DEVICE_INFO_HID {
	/*0000*/ ULONG dwVendorId;
	/*0004*/ ULONG dwProductId;
	/*0008*/ ULONG dwVersionNumber;
	/*000c*/ USHORT usUsagePage;
	/*000e*/ USHORT usUsage;
	/*0010*/
};

struct tagRID_DEVICE_INFO_KEYBOARD {
	/*0000*/ ULONG dwType;
	/*0004*/ ULONG dwSubType;
	/*0008*/ ULONG dwKeyboardMode;
	/*000c*/ ULONG dwNumberOfFunctionKeys;
	/*0010*/ ULONG dwNumberOfIndicators;
	/*0014*/ ULONG dwNumberOfKeysTotal;
	/*0018*/
};

struct tagRID_DEVICE_INFO_MOUSE {
	/*0000*/ ULONG dwId;
	/*0004*/ ULONG dwNumberOfButtons;
	/*0008*/ ULONG dwSampleRate;
	/*000c*/ INT fHasHorizontalWheel;
	/*0010*/
};

struct tagRPCOLEMESSAGE {
	/*0000*/ void * reserved1;
	/*0008*/ ULONG dataRepresentation;
	/*0010*/ void * Buffer;
	/*0018*/ ULONG cbBuffer;
	/*001c*/ ULONG iMethod;
	/*0020*/ void * reserved2[0x5];
	/*0048*/ ULONG rpcFlags;
	/*0050*/
};

enum tagRPCOPT_PROPERTIES {
	COMBND_RPCTIMEOUT = 0x1,
	COMBND_SERVER_LOCALITY = 0x2,
	COMBND_RESERVED1 = 0x4,
	COMBND_RESERVED2 = 0x5,
	COMBND_RESERVED3 = 0x8,
	COMBND_RESERVED4 = 0x10
};

enum tagRPCOPT_SERVER_LOCALITY_VALUES {
	SERVER_LOCALITY_PROCESS_LOCAL = 0x0,
	SERVER_LOCALITY_MACHINE_LOCAL = 0x1,
	SERVER_LOCALITY_REMOTE = 0x2
};

struct tagRPC_CALL_ATTRIBUTES_V1_A {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ UCHAR * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ UCHAR * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0038*/
};

struct tagRPC_CALL_ATTRIBUTES_V1_W {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ USHORT * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ USHORT * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0038*/
};

struct tagRPC_CALL_ATTRIBUTES_V2_A {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ UCHAR * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ UCHAR * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0034*/ INT KernelModeCaller;
	/*0038*/ ULONG ProtocolSequence;
	/*003c*/ ULONG IsClientLocal;
	/*0040*/ void * ClientPID;
	/*0048*/ ULONG CallStatus;
	/*004c*/ tagRpcCallType CallType;
	/*0050*/ _RPC_CALL_LOCAL_ADDRESS_V1 * CallLocalAddress;
	/*0058*/ USHORT OpNum;
	/*005c*/ _GUID InterfaceUuid;
	/*0070*/
};

struct tagRPC_CALL_ATTRIBUTES_V2_W {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ USHORT * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ USHORT * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0034*/ INT KernelModeCaller;
	/*0038*/ ULONG ProtocolSequence;
	/*003c*/ tagRpcCallClientLocality IsClientLocal;
	/*0040*/ void * ClientPID;
	/*0048*/ ULONG CallStatus;
	/*004c*/ tagRpcCallType CallType;
	/*0050*/ _RPC_CALL_LOCAL_ADDRESS_V1 * CallLocalAddress;
	/*0058*/ USHORT OpNum;
	/*005c*/ _GUID InterfaceUuid;
	/*0070*/
};

struct tagRPC_CALL_ATTRIBUTES_V3_A {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ UCHAR * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ UCHAR * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0034*/ INT KernelModeCaller;
	/*0038*/ ULONG ProtocolSequence;
	/*003c*/ ULONG IsClientLocal;
	/*0040*/ void * ClientPID;
	/*0048*/ ULONG CallStatus;
	/*004c*/ tagRpcCallType CallType;
	/*0050*/ _RPC_CALL_LOCAL_ADDRESS_V1 * CallLocalAddress;
	/*0058*/ USHORT OpNum;
	/*005c*/ _GUID InterfaceUuid;
	/*006c*/ ULONG ClientIdentifierBufferLength;
	/*0070*/ UCHAR * ClientIdentifier;
	/*0078*/
};

struct tagRPC_CALL_ATTRIBUTES_V3_W {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ USHORT * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ USHORT * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0034*/ INT KernelModeCaller;
	/*0038*/ ULONG ProtocolSequence;
	/*003c*/ tagRpcCallClientLocality IsClientLocal;
	/*0040*/ void * ClientPID;
	/*0048*/ ULONG CallStatus;
	/*004c*/ tagRpcCallType CallType;
	/*0050*/ _RPC_CALL_LOCAL_ADDRESS_V1 * CallLocalAddress;
	/*0058*/ USHORT OpNum;
	/*005c*/ _GUID InterfaceUuid;
	/*006c*/ ULONG ClientIdentifierBufferLength;
	/*0070*/ UCHAR * ClientIdentifier;
	/*0078*/
};

struct tagRPC_EE_INFO_PARAM {
	
	/*0000*/ tagExtendedErrorParamTypes ParameterType;
	/*0008*/ <unnamed-type-u> u;
	/*0018*/
};

struct tagRPC_ERROR_ENUM_HANDLE {
	/*0000*/ ULONG Signature;
	/*0008*/ void * CurrentPos;
	/*0010*/ void * Head;
	/*0018*/
};

struct tagRPC_EXTENDED_ERROR_INFO {
	
	/*0000*/ ULONG Version;
	/*0008*/ WCHAR * ComputerName;
	/*0010*/ ULONG ProcessID;
	/*0014*/ <unnamed-type-u> u;
	/*0024*/ ULONG GeneratingComponent;
	/*0028*/ ULONG Status;
	/*002c*/ USHORT DetectionLocation;
	/*002e*/ USHORT Flags;
	/*0030*/ INT NumberOfParameters;
	/*0038*/ tagRPC_EE_INFO_PARAM Parameters[0x4];
	/*0098*/
};

struct tagRemBRUSH {
	/*0000*/ ULONG cbData;
	/*0004*/ UCHAR data[0x1];
	/*0008*/
};

struct tagRemFORMATETC {
	/*0000*/ ULONG cfFormat;
	/*0004*/ ULONG ptd;
	/*0008*/ ULONG dwAspect;
	/*000c*/ LONG lindex;
	/*0010*/ ULONG tymed;
	/*0014*/
};

struct tagRemHBITMAP {
	/*0000*/ ULONG cbData;
	/*0004*/ UCHAR data[0x1];
	/*0008*/
};

struct tagRemHENHMETAFILE {
	/*0000*/ ULONG cbData;
	/*0004*/ UCHAR data[0x1];
	/*0008*/
};

struct tagRemHGLOBAL {
	/*0000*/ LONG fNullHGlobal;
	/*0004*/ ULONG cbData;
	/*0008*/ UCHAR data[0x1];
	/*000c*/
};

struct tagRemHMETAFILEPICT {
	/*0000*/ LONG mm;
	/*0004*/ LONG xExt;
	/*0008*/ LONG yExt;
	/*000c*/ ULONG cbData;
	/*0010*/ UCHAR data[0x1];
	/*0014*/
};

struct tagRemHPALETTE {
	/*0000*/ ULONG cbData;
	/*0004*/ UCHAR data[0x1];
	/*0008*/
};

struct tagRemSNB {
	/*0000*/ ULONG ulCntStr;
	/*0004*/ ULONG ulCntChar;
	/*0008*/ WCHAR rgString[0x1];
	/*000c*/
};

struct tagRemSTGMEDIUM {
	/*0000*/ ULONG tymed;
	/*0004*/ ULONG dwHandleType;
	/*0008*/ ULONG pData;
	/*000c*/ ULONG pUnkForRelease;
	/*0010*/ ULONG cbData;
	/*0014*/ UCHAR data[0x1];
	/*0018*/
};

enum tagRpcCallClientLocality {
	rcclInvalid = 0x0,
	rcclLocal = 0x1,
	rcclRemote = 0x2,
	rcclClientUnknownLocality = 0x3
};

enum tagRpcCallType {
	rctInvalid = 0x0,
	rctNormal = 0x1,
	rctTraining = 0x2,
	rctGuaranteed = 0x3
};

enum tagRpcLocalAddressFormat {
	rlafInvalid = 0x0,
	rlafIPv4 = 0x1,
	rlafIPv6 = 0x2
};

struct tagSAFEARRAY {
	/*0000*/ USHORT cDims;
	/*0002*/ USHORT fFeatures;
	/*0004*/ ULONG cbElements;
	/*0008*/ ULONG cLocks;
	/*0010*/ void * pvData;
	/*0018*/ tagSAFEARRAYBOUND rgsabound[0x1];
	/*0020*/
};

struct tagSAFEARRAYBOUND {
	/*0000*/ ULONG cElements;
	/*0004*/ LONG lLbound;
	/*0008*/
};

struct tagSCROLLBARINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcScrollBar;
	/*0014*/ INT dxyLineButton;
	/*0018*/ INT xyThumbTop;
	/*001c*/ INT xyThumbBottom;
	/*0020*/ INT reserved;
	/*0024*/ ULONG rgstate[0x6];
	/*003c*/
};

struct tagSCROLLINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fMask;
	/*0008*/ INT nMin;
	/*000c*/ INT nMax;
	/*0010*/ UINT nPage;
	/*0014*/ INT nPos;
	/*0018*/ INT nTrackPos;
	/*001c*/
};

struct tagSERIALIZEDPROPERTYVALUE {
	/*0000*/ ULONG dwType;
	/*0004*/ UCHAR rgb[0x1];
	/*0008*/
};

struct tagSERIALKEYSA {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ CHAR * lpszActivePort;
	/*0010*/ CHAR * lpszPort;
	/*0018*/ UINT iBaudRate;
	/*001c*/ UINT iPortState;
	/*0020*/ UINT iActive;
	/*0028*/
};

struct tagSERIALKEYSW {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ WCHAR * lpszActivePort;
	/*0010*/ WCHAR * lpszPort;
	/*0018*/ UINT iBaudRate;
	/*001c*/ UINT iPortState;
	/*0020*/ UINT iActive;
	/*0028*/
};

enum tagSERVERCALL {
	SERVERCALL_ISHANDLED = 0x0,
	SERVERCALL_REJECTED = 0x1,
	SERVERCALL_RETRYLATER = 0x2
};

enum tagSF_TYPE {
	SF_ERROR = 0xa,
	SF_I1 = 0x10,
	SF_I2 = 0x2,
	SF_I4 = 0x3,
	SF_I8 = 0x14,
	SF_BSTR = 0x8,
	SF_UNKNOWN = 0xd,
	SF_DISPATCH = 0x9,
	SF_VARIANT = 0xc,
	SF_RECORD = 0x24,
	SF_HAVEIID = 0x800d
};

struct tagSIZE {
	/*0000*/ LONG cx;
	/*0004*/ LONG cy;
	/*0008*/
};

struct tagSOLE_AUTHENTICATION_INFO {
	/*0000*/ ULONG dwAuthnSvc;
	/*0004*/ ULONG dwAuthzSvc;
	/*0008*/ void * pAuthInfo;
	/*0010*/
};

struct tagSOLE_AUTHENTICATION_LIST {
	/*0000*/ ULONG cAuthInfo;
	/*0008*/ tagSOLE_AUTHENTICATION_INFO * aAuthInfo;
	/*0010*/
};

struct tagSOLE_AUTHENTICATION_SERVICE {
	/*0000*/ ULONG dwAuthnSvc;
	/*0004*/ ULONG dwAuthzSvc;
	/*0008*/ WCHAR * pPrincipalName;
	/*0010*/ HRESULT hr;
	/*0018*/
};

struct tagSOUNDSENTRYA {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG iFSTextEffect;
	/*000c*/ ULONG iFSTextEffectMSec;
	/*0010*/ ULONG iFSTextEffectColorBits;
	/*0014*/ ULONG iFSGrafEffect;
	/*0018*/ ULONG iFSGrafEffectMSec;
	/*001c*/ ULONG iFSGrafEffectColor;
	/*0020*/ ULONG iWindowsEffect;
	/*0024*/ ULONG iWindowsEffectMSec;
	/*0028*/ CHAR * lpszWindowsEffectDLL;
	/*0030*/ ULONG iWindowsEffectOrdinal;
	/*0038*/
};

struct tagSOUNDSENTRYW {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG iFSTextEffect;
	/*000c*/ ULONG iFSTextEffectMSec;
	/*0010*/ ULONG iFSTextEffectColorBits;
	/*0014*/ ULONG iFSGrafEffect;
	/*0018*/ ULONG iFSGrafEffectMSec;
	/*001c*/ ULONG iFSGrafEffectColor;
	/*0020*/ ULONG iWindowsEffect;
	/*0024*/ ULONG iWindowsEffectMSec;
	/*0028*/ WCHAR * lpszWindowsEffectDLL;
	/*0030*/ ULONG iWindowsEffectOrdinal;
	/*0038*/
};

struct tagSTATDATA {
	/*0000*/ tagFORMATETC formatetc;
	/*0020*/ ULONG advf;
	/*0028*/ IAdviseSink * pAdvSink;
	/*0030*/ ULONG dwConnection;
	/*0038*/
};

enum tagSTATFLAG {
	STATFLAG_DEFAULT = 0x0,
	STATFLAG_NONAME = 0x1,
	STATFLAG_NOOPEN = 0x2
};

struct tagSTATPROPSETSTG {
	/*0000*/ _GUID fmtid;
	/*0010*/ _GUID clsid;
	/*0020*/ ULONG grfFlags;
	/*0024*/ _FILETIME mtime;
	/*002c*/ _FILETIME ctime;
	/*0034*/ _FILETIME atime;
	/*003c*/ ULONG dwOSVersion;
	/*0040*/
};

struct tagSTATPROPSTG {
	/*0000*/ WCHAR * lpwstrName;
	/*0008*/ ULONG propid;
	/*000c*/ USHORT vt;
	/*0010*/
};

struct tagSTATSTG {
	/*0000*/ WCHAR * pwcsName;
	/*0008*/ ULONG type;
	/*0010*/ _ULARGE_INTEGER cbSize;
	/*0018*/ _FILETIME mtime;
	/*0020*/ _FILETIME ctime;
	/*0028*/ _FILETIME atime;
	/*0030*/ ULONG grfMode;
	/*0034*/ ULONG grfLocksSupported;
	/*0038*/ _GUID clsid;
	/*0048*/ ULONG grfStateBits;
	/*004c*/ ULONG reserved;
	/*0050*/
};

enum tagSTDMSHLFLAGS {
	SMEXF_SERVER = 0x1,
	SMEXF_HANDLER = 0x2
};

enum tagSTGC {
	STGC_DEFAULT = 0x0,
	STGC_OVERWRITE = 0x1,
	STGC_ONLYIFCURRENT = 0x2,
	STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 0x4,
	STGC_CONSOLIDATE = 0x8
};

struct tagSTGMEDIUM {
	/*0000*/ ULONG tymed;
	/*0008*/ HBITMAP__ * hBitmap;
	/*0008*/ void * hMetaFilePict;
	/*0008*/ HENHMETAFILE__ * hEnhMetaFile;
	/*0008*/ void * hGlobal;
	/*0008*/ WCHAR * lpszFileName;
	/*0008*/ IStream * pstm;
	/*0008*/ IStorage * pstg;
	/*0010*/ IUnknown * pUnkForRelease;
	/*0018*/
};

enum tagSTGMOVE {
	STGMOVE_MOVE = 0x0,
	STGMOVE_COPY = 0x1,
	STGMOVE_SHALLOWCOPY = 0x2
};

struct tagSTGOPTIONS {
	/*0000*/ USHORT usVersion;
	/*0002*/ USHORT reserved;
	/*0004*/ ULONG ulSectorSize;
	/*0008*/ WCHAR const * pwcsTemplateFile;
	/*0010*/
};

enum tagSTGTY {
	STGTY_STORAGE = 0x1,
	STGTY_STREAM = 0x2,
	STGTY_LOCKBYTES = 0x3,
	STGTY_PROPERTY = 0x4
};

struct tagSTICKYKEYS {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/
};

enum tagSTREAM_SEEK {
	STREAM_SEEK_SET = 0x0,
	STREAM_SEEK_CUR = 0x1,
	STREAM_SEEK_END = 0x2
};

struct tagSTYLEBUFA {
	/*0000*/ ULONG dwStyle;
	/*0004*/ CHAR szDescription[0x20];
	/*0024*/
};

struct tagSTYLEBUFW {
	/*0000*/ ULONG dwStyle;
	/*0004*/ WCHAR szDescription[0x20];
	/*0044*/
};

struct tagSTYLESTRUCT {
	/*0000*/ ULONG styleOld;
	/*0004*/ ULONG styleNew;
	/*0008*/
};

enum tagSYSKIND {
	SYS_WIN16 = 0x0,
	SYS_WIN32 = 0x1,
	SYS_MAC = 0x2,
	SYS_WIN64 = 0x3
};

struct tagServerInformation {
	/*0000*/ ULONG dwServerPid;
	/*0004*/ ULONG dwServerTid;
	/*0008*/ ULONGLONG ui64ServerAddress;
	/*0010*/
};

enum tagShutdownType {
	IdleShutdown = 0x0,
	ForcedShutdown = 0x1
};

struct tagStorageLayout {
	/*0000*/ ULONG LayoutType;
	/*0008*/ WCHAR * pwcsElementName;
	/*0010*/ _LARGE_INTEGER cOffset;
	/*0018*/ _LARGE_INTEGER cBytes;
	/*0020*/
};

struct tagTEXTMETRICA {
	/*0000*/ LONG tmHeight;
	/*0004*/ LONG tmAscent;
	/*0008*/ LONG tmDescent;
	/*000c*/ LONG tmInternalLeading;
	/*0010*/ LONG tmExternalLeading;
	/*0014*/ LONG tmAveCharWidth;
	/*0018*/ LONG tmMaxCharWidth;
	/*001c*/ LONG tmWeight;
	/*0020*/ LONG tmOverhang;
	/*0024*/ LONG tmDigitizedAspectX;
	/*0028*/ LONG tmDigitizedAspectY;
	/*002c*/ UCHAR tmFirstChar;
	/*002d*/ UCHAR tmLastChar;
	/*002e*/ UCHAR tmDefaultChar;
	/*002f*/ UCHAR tmBreakChar;
	/*0030*/ UCHAR tmItalic;
	/*0031*/ UCHAR tmUnderlined;
	/*0032*/ UCHAR tmStruckOut;
	/*0033*/ UCHAR tmPitchAndFamily;
	/*0034*/ UCHAR tmCharSet;
	/*0038*/
};

struct tagTEXTMETRICW {
	/*0000*/ LONG tmHeight;
	/*0004*/ LONG tmAscent;
	/*0008*/ LONG tmDescent;
	/*000c*/ LONG tmInternalLeading;
	/*0010*/ LONG tmExternalLeading;
	/*0014*/ LONG tmAveCharWidth;
	/*0018*/ LONG tmMaxCharWidth;
	/*001c*/ LONG tmWeight;
	/*0020*/ LONG tmOverhang;
	/*0024*/ LONG tmDigitizedAspectX;
	/*0028*/ LONG tmDigitizedAspectY;
	/*002c*/ WCHAR tmFirstChar;
	/*002e*/ WCHAR tmLastChar;
	/*0030*/ WCHAR tmDefaultChar;
	/*0032*/ WCHAR tmBreakChar;
	/*0034*/ UCHAR tmItalic;
	/*0035*/ UCHAR tmUnderlined;
	/*0036*/ UCHAR tmStruckOut;
	/*0037*/ UCHAR tmPitchAndFamily;
	/*0038*/ UCHAR tmCharSet;
	/*003c*/
};

struct tagTITLEBARINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcTitleBar;
	/*0014*/ ULONG rgstate[0x6];
	/*002c*/
};

struct tagTITLEBARINFOEX {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcTitleBar;
	/*0014*/ ULONG rgstate[0x6];
	/*002c*/ tagRECT rgrect[0x6];
	/*008c*/
};

struct tagTLIBATTR {
	/*0000*/ _GUID guid;
	/*0010*/ ULONG lcid;
	/*0014*/ tagSYSKIND syskind;
	/*0018*/ USHORT wMajorVerNum;
	/*001a*/ USHORT wMinorVerNum;
	/*001c*/ USHORT wLibFlags;
	/*0020*/
};

struct tagTOGGLEKEYS {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/
};

struct tagTOUCHINPUT {
	/*0000*/ LONG x;
	/*0004*/ LONG y;
	/*0008*/ void * hSource;
	/*0010*/ ULONG dwID;
	/*0014*/ ULONG dwFlags;
	/*0018*/ ULONG dwMask;
	/*001c*/ ULONG dwTime;
	/*0020*/ ULONGLONG dwExtraInfo;
	/*0028*/ ULONG cxContact;
	/*002c*/ ULONG cyContact;
	/*0030*/
};

struct tagTOUCH_HIT_TESTING_INPUT {
	/*0000*/ UINT pointerId;
	/*0004*/ tagPOINT point;
	/*000c*/ tagRECT boundingBox;
	/*001c*/ tagRECT nonOccludedBoundingBox;
	/*002c*/ UINT orientation;
	/*0030*/
};

struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION {
	/*0000*/ USHORT score;
	/*0004*/ tagPOINT adjustedPoint;
	/*000c*/
};

struct tagTPMPARAMS {
	/*0000*/ UINT cbSize;
	/*0004*/ tagRECT rcExclude;
	/*0014*/
};

struct tagTRACKMOUSEEVENT {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HWND__ * hwndTrack;
	/*0010*/ ULONG dwHoverTime;
	/*0018*/
};

struct tagTTPOLYCURVE {
	/*0000*/ USHORT wType;
	/*0002*/ USHORT cpfx;
	/*0004*/ tagPOINTFX apfx[0x1];
	/*000c*/
};

struct tagTTPOLYGONHEADER {
	/*0000*/ ULONG cb;
	/*0004*/ ULONG dwType;
	/*0008*/ tagPOINTFX pfxStart;
	/*0010*/
};

enum tagTYMED {
	TYMED_HGLOBAL = 0x1,
	TYMED_FILE = 0x2,
	TYMED_ISTREAM = 0x4,
	TYMED_ISTORAGE = 0x8,
	TYMED_GDI = 0x10,
	TYMED_MFPICT = 0x20,
	TYMED_ENHMF = 0x40,
	TYMED_NULL = 0x0
};

struct tagTYPEATTR {
	/*0000*/ _GUID guid;
	/*0010*/ ULONG lcid;
	/*0014*/ ULONG dwReserved;
	/*0018*/ LONG memidConstructor;
	/*001c*/ LONG memidDestructor;
	/*0020*/ WCHAR * lpstrSchema;
	/*0028*/ ULONG cbSizeInstance;
	/*002c*/ tagTYPEKIND typekind;
	/*0030*/ USHORT cFuncs;
	/*0032*/ USHORT cVars;
	/*0034*/ USHORT cImplTypes;
	/*0036*/ USHORT cbSizeVft;
	/*0038*/ USHORT cbAlignment;
	/*003a*/ USHORT wTypeFlags;
	/*003c*/ USHORT wMajorVerNum;
	/*003e*/ USHORT wMinorVerNum;
	/*0040*/ tagTYPEDESC tdescAlias;
	/*0050*/ tagIDLDESC idldescType;
	/*0060*/
};

struct tagTYPEDESC {
	/*0000*/ tagTYPEDESC * lptdesc;
	/*0000*/ tagARRAYDESC * lpadesc;
	/*0000*/ ULONG hreftype;
	/*0008*/ USHORT vt;
	/*0010*/
};

enum tagTYPEFLAGS {
	TYPEFLAG_FAPPOBJECT = 0x1,
	TYPEFLAG_FCANCREATE = 0x2,
	TYPEFLAG_FLICENSED = 0x4,
	TYPEFLAG_FPREDECLID = 0x8,
	TYPEFLAG_FHIDDEN = 0x10,
	TYPEFLAG_FCONTROL = 0x20,
	TYPEFLAG_FDUAL = 0x40,
	TYPEFLAG_FNONEXTENSIBLE = 0x80,
	TYPEFLAG_FOLEAUTOMATION = 0x100,
	TYPEFLAG_FRESTRICTED = 0x200,
	TYPEFLAG_FAGGREGATABLE = 0x400,
	TYPEFLAG_FREPLACEABLE = 0x800,
	TYPEFLAG_FDISPATCHABLE = 0x1000,
	TYPEFLAG_FREVERSEBIND = 0x2000,
	TYPEFLAG_FPROXY = 0x4000
};

enum tagTYPEKIND {
	TKIND_ENUM = 0x0,
	TKIND_RECORD = 0x1,
	TKIND_MODULE = 0x2,
	TKIND_INTERFACE = 0x3,
	TKIND_DISPATCH = 0x4,
	TKIND_COCLASS = 0x5,
	TKIND_ALIAS = 0x6,
	TKIND_UNION = 0x7,
	TKIND_MAX = 0x8
};

enum tagTYSPEC {
	TYSPEC_CLSID = 0x0,
	TYSPEC_FILEEXT = 0x1,
	TYSPEC_MIMETYPE = 0x2,
	TYSPEC_FILENAME = 0x3,
	TYSPEC_PROGID = 0x4,
	TYSPEC_PACKAGENAME = 0x5,
	TYSPEC_OBJECTID = 0x6
};

struct tagTouchPredictionParameters {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT dwLatency;
	/*0008*/ UINT dwSampleTime;
	/*000c*/ UINT bUseHWTimeStamp;
	/*0010*/
};

struct tagUPDATELAYEREDWINDOWINFO {
	/*0000*/ ULONG cbSize;
	/*0008*/ HDC__ * hdcDst;
	/*0010*/ tagPOINT const * pptDst;
	/*0018*/ tagSIZE const * psize;
	/*0020*/ HDC__ * hdcSrc;
	/*0028*/ tagPOINT const * pptSrc;
	/*0030*/ ULONG crKey;
	/*0038*/ _BLENDFUNCTION const * pblend;
	/*0040*/ ULONG dwFlags;
	/*0048*/ tagRECT const * prcDirty;
	/*0050*/
};

enum tagURLTEMPLATE {
	URLTEMPLATE_CUSTOM = 0x0,
	URLTEMPLATE_PREDEFINED_MIN = 0x10000,
	URLTEMPLATE_LOW = 0x10000,
	URLTEMPLATE_MEDLOW = 0x10500,
	URLTEMPLATE_MEDIUM = 0x11000,
	URLTEMPLATE_MEDHIGH = 0x11500,
	URLTEMPLATE_HIGH = 0x12000,
	URLTEMPLATE_PREDEFINED_MAX = 0x20000
};

enum tagURLZONE {
	URLZONE_INVALID = 0xffffffff,
	URLZONE_PREDEFINED_MIN = 0x0,
	URLZONE_LOCAL_MACHINE = 0x0,
	URLZONE_INTRANET = 0x1,
	URLZONE_TRUSTED = 0x2,
	URLZONE_INTERNET = 0x3,
	URLZONE_UNTRUSTED = 0x4,
	URLZONE_PREDEFINED_MAX = 0x3e7,
	URLZONE_USER_MIN = 0x3e8,
	URLZONE_USER_MAX = 0x2710
};

struct tagUSAGE_PROPERTIES {
	/*0000*/ USHORT level;
	/*0002*/ USHORT page;
	/*0004*/ USHORT usage;
	/*0008*/ INT logicalMinimum;
	/*000c*/ INT logicalMaximum;
	/*0010*/ USHORT unit;
	/*0012*/ USHORT exponent;
	/*0014*/ UCHAR count;
	/*0018*/ INT physicalMinimum;
	/*001c*/ INT physicalMaximum;
	/*0020*/
};

enum tagUSERCLASSTYPE {
	USERCLASSTYPE_FULL = 0x1,
	USERCLASSTYPE_SHORT = 0x2,
	USERCLASSTYPE_APPNAME = 0x3
};

struct tagUSEROBJECTFLAGS {
	/*0000*/ INT fInherit;
	/*0004*/ INT fReserved;
	/*0008*/ ULONG dwFlags;
	/*000c*/
};

struct tagVARDESC {
	/*0000*/ LONG memid;
	/*0008*/ WCHAR * lpstrSchema;
	/*0010*/ ULONG oInst;
	/*0010*/ tagVARIANT * lpvarValue;
	/*0018*/ tagELEMDESC elemdescVar;
	/*0038*/ USHORT wVarFlags;
	/*003c*/ tagVARKIND varkind;
	/*0040*/
};

enum tagVARFLAGS {
	VARFLAG_FREADONLY = 0x1,
	VARFLAG_FSOURCE = 0x2,
	VARFLAG_FBINDABLE = 0x4,
	VARFLAG_FREQUESTEDIT = 0x8,
	VARFLAG_FDISPLAYBIND = 0x10,
	VARFLAG_FDEFAULTBIND = 0x20,
	VARFLAG_FHIDDEN = 0x40,
	VARFLAG_FRESTRICTED = 0x80,
	VARFLAG_FDEFAULTCOLLELEM = 0x100,
	VARFLAG_FUIDEFAULT = 0x200,
	VARFLAG_FNONBROWSABLE = 0x400,
	VARFLAG_FREPLACEABLE = 0x800,
	VARFLAG_FIMMEDIATEBIND = 0x1000
};

struct tagVARIANT {
	/*0000*/ USHORT vt;
	/*0002*/ USHORT wReserved1;
	/*0004*/ USHORT wReserved2;
	/*0006*/ USHORT wReserved3;
	/*0008*/ LONGLONG llVal;
	/*0008*/ LONG lVal;
	/*0008*/ UCHAR bVal;
	/*0008*/ SHORT iVal;
	/*0008*/ float fltVal;
	/*0008*/ double dblVal;
	/*0008*/ SHORT boolVal;
	/*0008*/ SHORT __OBSOLETE__VARIANT_BOOL;
	/*0008*/ LONG scode;
	/*0008*/ tagCY cyVal;
	/*0008*/ double date;
	/*0008*/ WCHAR * bstrVal;
	/*0008*/ IUnknown * punkVal;
	/*0008*/ IDispatch * pdispVal;
	/*0008*/ tagSAFEARRAY * parray;
	/*0008*/ UCHAR * pbVal;
	/*0008*/ SHORT * piVal;
	/*0008*/ LONG * plVal;
	/*0008*/ LONGLONG * pllVal;
	/*0008*/ float * pfltVal;
	/*0008*/ double * pdblVal;
	/*0008*/ SHORT * pboolVal;
	/*0008*/ SHORT * __OBSOLETE__VARIANT_PBOOL;
	/*0008*/ LONG * pscode;
	/*0008*/ tagCY * pcyVal;
	/*0008*/ double * pdate;
	/*0008*/ WCHAR * * pbstrVal;
	/*0008*/ IUnknown * * ppunkVal;
	/*0008*/ IDispatch * * ppdispVal;
	/*0008*/ tagSAFEARRAY * * pparray;
	/*0008*/ tagVARIANT * pvarVal;
	/*0008*/ void * byref;
	/*0008*/ CHAR cVal;
	/*0008*/ USHORT uiVal;
	/*0008*/ ULONG ulVal;
	/*0008*/ ULONGLONG ullVal;
	/*0008*/ INT intVal;
	/*0008*/ UINT uintVal;
	/*0008*/ tagDEC * pdecVal;
	/*0008*/ CHAR * pcVal;
	/*0008*/ USHORT * puiVal;
	/*0008*/ ULONG * pulVal;
	/*0008*/ ULONGLONG * pullVal;
	/*0008*/ INT * pintVal;
	/*0008*/ UINT * puintVal;
	/*0008*/ void * pvRecord;
	/*0010*/ IRecordInfo * pRecInfo;
	/*0000*/ tagDEC decVal;
	/*0018*/
};

enum tagVARKIND {
	VAR_PERINSTANCE = 0x0,
	VAR_STATIC = 0x1,
	VAR_CONST = 0x2,
	VAR_DISPATCH = 0x3
};

struct tagVS_FIXEDFILEINFO {
	/*0000*/ ULONG dwSignature;
	/*0004*/ ULONG dwStrucVersion;
	/*0008*/ ULONG dwFileVersionMS;
	/*000c*/ ULONG dwFileVersionLS;
	/*0010*/ ULONG dwProductVersionMS;
	/*0014*/ ULONG dwProductVersionLS;
	/*0018*/ ULONG dwFileFlagsMask;
	/*001c*/ ULONG dwFileFlags;
	/*0020*/ ULONG dwFileOS;
	/*0024*/ ULONG dwFileType;
	/*0028*/ ULONG dwFileSubtype;
	/*002c*/ ULONG dwFileDateMS;
	/*0030*/ ULONG dwFileDateLS;
	/*0034*/
};

struct tagVersionedStream {
	/*0000*/ _GUID guidVersion;
	/*0010*/ IStream * pStream;
	/*0018*/
};

struct tagWCRANGE {
	/*0000*/ WCHAR wcLow;
	/*0002*/ USHORT cGlyphs;
	/*0004*/
};

struct tagWINDOWINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcWindow;
	/*0014*/ tagRECT rcClient;
	/*0024*/ ULONG dwStyle;
	/*0028*/ ULONG dwExStyle;
	/*002c*/ ULONG dwWindowStatus;
	/*0030*/ UINT cxWindowBorders;
	/*0034*/ UINT cyWindowBorders;
	/*0038*/ USHORT atomWindowType;
	/*003a*/ USHORT wCreatorVersion;
	/*003c*/
};

struct tagWINDOWPLACEMENT {
	/*0000*/ UINT length;
	/*0004*/ UINT flags;
	/*0008*/ UINT showCmd;
	/*000c*/ tagPOINT ptMinPosition;
	/*0014*/ tagPOINT ptMaxPosition;
	/*001c*/ tagRECT rcNormalPosition;
	/*002c*/
};

struct tagWINDOWPOS {
	/*0000*/ HWND__ * hwnd;
	/*0008*/ HWND__ * hwndInsertAfter;
	/*0010*/ INT x;
	/*0014*/ INT y;
	/*0018*/ INT cx;
	/*001c*/ INT cy;
	/*0020*/ UINT flags;
	/*0028*/
};

struct tagWNDCLASSA {
	/*0000*/ UINT style;
	/*0008*/ LONGLONG (* lpfnWndProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0010*/ INT cbClsExtra;
	/*0014*/ INT cbWndExtra;
	/*0018*/ HINSTANCE__ * hInstance;
	/*0020*/ HICON__ * hIcon;
	/*0028*/ HICON__ * hCursor;
	/*0030*/ HBRUSH__ * hbrBackground;
	/*0038*/ CHAR const * lpszMenuName;
	/*0040*/ CHAR const * lpszClassName;
	/*0048*/
};

struct tagWNDCLASSEXA {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT style;
	/*0008*/ LONGLONG (* lpfnWndProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0010*/ INT cbClsExtra;
	/*0014*/ INT cbWndExtra;
	/*0018*/ HINSTANCE__ * hInstance;
	/*0020*/ HICON__ * hIcon;
	/*0028*/ HICON__ * hCursor;
	/*0030*/ HBRUSH__ * hbrBackground;
	/*0038*/ CHAR const * lpszMenuName;
	/*0040*/ CHAR const * lpszClassName;
	/*0048*/ HICON__ * hIconSm;
	/*0050*/
};

struct tagWNDCLASSEXW {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT style;
	/*0008*/ LONGLONG (* lpfnWndProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0010*/ INT cbClsExtra;
	/*0014*/ INT cbWndExtra;
	/*0018*/ HINSTANCE__ * hInstance;
	/*0020*/ HICON__ * hIcon;
	/*0028*/ HICON__ * hCursor;
	/*0030*/ HBRUSH__ * hbrBackground;
	/*0038*/ WCHAR const * lpszMenuName;
	/*0040*/ WCHAR const * lpszClassName;
	/*0048*/ HICON__ * hIconSm;
	/*0050*/
};

struct tagWNDCLASSW {
	/*0000*/ UINT style;
	/*0008*/ LONGLONG (* lpfnWndProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0010*/ INT cbClsExtra;
	/*0014*/ INT cbWndExtra;
	/*0018*/ HINSTANCE__ * hInstance;
	/*0020*/ HICON__ * hIcon;
	/*0028*/ HICON__ * hCursor;
	/*0030*/ HBRUSH__ * hbrBackground;
	/*0038*/ WCHAR const * lpszMenuName;
	/*0040*/ WCHAR const * lpszClassName;
	/*0048*/
};

struct tagWTSSESSION_NOTIFICATION {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwSessionId;
	/*0008*/
};

struct tagXFORM {
	/*0000*/ float eM11;
	/*0004*/ float eM12;
	/*0008*/ float eM21;
	/*000c*/ float eM22;
	/*0010*/ float eDx;
	/*0014*/ float eDy;
	/*0018*/
};

enum tagXMLEMEM_TYPE {
	XMLELEMTYPE_ELEMENT = 0x0,
	XMLELEMTYPE_TEXT = 0x1,
	XMLELEMTYPE_COMMENT = 0x2,
	XMLELEMTYPE_DOCUMENT = 0x3,
	XMLELEMTYPE_DTD = 0x4,
	XMLELEMTYPE_PI = 0x5,
	XMLELEMTYPE_OTHER = 0x6
};

struct tm {
	/*0000*/ INT tm_sec;
	/*0004*/ INT tm_min;
	/*0008*/ INT tm_hour;
	/*000c*/ INT tm_mday;
	/*0010*/ INT tm_mon;
	/*0014*/ INT tm_year;
	/*0018*/ INT tm_wday;
	/*001c*/ INT tm_yday;
	/*0020*/ INT tm_isdst;
	/*0024*/
};

class type_info {
public:
	void type_info( type_info const & );
	type_info & operator=( type_info const & );
	ULONGLONG hash_code() const;
	BOOLEAN operator==( type_info const & ) const;
	BOOLEAN before( type_info const & ) const;
	CHAR const * name() const;
	CHAR const * raw_name() const;
	/*0000*/ virtual void ~type_info();
private:
	/*0008*/ __std_type_info_data _Data;
public:
	/*0000*/ virtual void * __vecDelDtor( UINT );
	/*0018*/
};

struct val_context {
	/*0000*/ INT valuelen;
	/*0008*/ void * value_context;
	/*0010*/ void * val_buff_ptr;
	/*0018*/
};

struct value_entA {
	/*0000*/ CHAR * ve_valuename;
	/*0008*/ ULONG ve_valuelen;
	/*0010*/ ULONGLONG ve_valueptr;
	/*0018*/ ULONG ve_type;
	/*0020*/
};

struct value_entW {
	/*0000*/ WCHAR * ve_valuename;
	/*0008*/ ULONG ve_valuelen;
	/*0010*/ ULONGLONG ve_valueptr;
	/*0018*/ ULONG ve_type;
	/*0020*/
};
