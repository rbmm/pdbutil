struct B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >
{
	static B_TREE_HEADER<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY>::NODE * BTreeNewNode(B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,unsigned long,unsigned long);
	static B_TREE_HEADER<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY>::NODE * BTreeRedistribute(B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static B_TREE_HEADER<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY>::NODE * BTreeSplitChild(B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static long BTreeDeleteEx(B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static long BTreeInsertEx(B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *,_SM_PAGE_KEY *);
	static long BTreeSearchKey(B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,_SM_PAGE_KEY,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static unsigned long BTreeFindSeperatorIndexEntry(B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *,unsigned long,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::PATH_ENTRY *);
	static void BTreeIteratorFromSearchResult(B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::ITERATOR *,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static void BTreeMergeNodes(B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *,B_TREE_HEADER<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY>::NODE *);
	static void BTreeNodeFree(B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE_HEADER<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY>::NODE *);
};

struct B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >
{
	static B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE * * BTreeDescendToSibling(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::PATH_ENTRY *,unsigned long,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE * BTreeFindLeafSibling(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE *,unsigned long);
	static B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE * BTreeFindLeafSiblingEx(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *,unsigned long);
	static B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE * BTreeIteratorAttachEx(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::ITERATOR *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *);
	static B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE * BTreeNewNode(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,unsigned long,unsigned long);
	static B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE * BTreeRedistribute(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE * BTreeSplitChild(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY * BTreeFindNextEntry(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static long BTreeDeleteEx(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static long BTreeInsertEx(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *,_SM_PAGE_KEY *);
	static long BTreeSearchKey(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,_SM_PAGE_KEY,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static long BTreeWalkPostOrderInternal(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE *,_SINGLE_LIST_ENTRY *,long (*)(void *,void *,unsigned __int64 *),void *,B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE * *);
	static unsigned long BTreeFindSeperatorIndexEntry(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *,unsigned long,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::PATH_ENTRY *);
	static void BTreeDeleteNode(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE *);
	static void BTreeIteratorCleanup(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::ITERATOR *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *);
	static void BTreeIteratorFromSearchResult(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::ITERATOR *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static void BTreeMergeNodes(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *,B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE *);
	static void BTreeNodeFree(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE_HEADER<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY>::NODE *);
	static void BTreeSearchResultCleanup(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *,unsigned long);
	static void BTreeSearchResultDeref(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> > *,B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static void BTreeSearchResultInit(B_TREE<_SM_PAGE_KEY,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY,4096,NP_CONTEXT,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *,unsigned long);
};

struct B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>
{
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE * * BTreeDescendToSibling(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::PATH_ENTRY *,unsigned long,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE * BTreeFindLeafSibling(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE *,unsigned long);
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE * BTreeFindLeafSiblingEx(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *,unsigned long);
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE * BTreeNewNode(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,unsigned long,unsigned long);
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE * BTreeRedistribute(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE * BTreeSplitChild(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static long BTreeDeleteEx(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static long BTreeInsertEx(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *,unsigned long *);
	static long BTreeSearchKey(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,unsigned long,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static unsigned long BTreeFindSeperatorIndexEntry(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *,unsigned long,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::PATH_ENTRY *);
	static unsigned long BTreeNodeFindKey(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE *,unsigned long);
	static void BTreeDeleteNode(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE *);
	static void BTreeIteratorFromSearchResult(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::ITERATOR *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static void BTreeMergeNodes(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE *);
	static void BTreeNodeFree(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY>::NODE *);
	static void BTreeSearchResultDeref(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static void BTreeSearchResultInit(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_HASH_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_HASH_ENTRY_COMPARATOR>::SEARCH_RESULT *,unsigned long);
};

struct B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>
{
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE * * BTreeDescendToSibling(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::PATH_ENTRY *,unsigned long,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE * BTreeFindLeafSibling(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE *,unsigned long);
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE * BTreeFindLeafSiblingEx(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *,unsigned long);
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE * BTreeNewNode(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,unsigned long,unsigned long);
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE * BTreeRedistribute(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE * BTreeSplitChild(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY * BTreeFindPreviousEntry(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static long BTreeDelete(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,unsigned long,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static long BTreeDeleteEx(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static long BTreeInsert(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static long BTreeInsertEx(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *,unsigned long *);
	static long BTreeSearchKey(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,unsigned long,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static long BTreeSearchResultIterStart(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,unsigned long,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::_BTREE_ITERATOR_DISPOSITION);
	static long BTreeWalkPostOrderInternal(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE *,_SINGLE_LIST_ENTRY *,long (*)(void *,void *,unsigned __int64 *),void *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE * *);
	static unsigned long BTreeChangeKey(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *,unsigned long);
	static unsigned long BTreeFindSeperatorIndexEntry(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *,unsigned long,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::PATH_ENTRY *);
	static unsigned long BTreeNodeFindKey(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE *,unsigned long);
	static void BTreeDeleteNode(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE *);
	static void BTreeIteratorCleanup(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::ITERATOR *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *);
	static void BTreeIteratorFromSearchResult(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::ITERATOR *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static void BTreeMergeNodes(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE *);
	static void BTreeNodeFree(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE_HEADER<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY>::NODE *);
	static void BTreeSearchResultCleanup(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *,unsigned long);
	static void BTreeSearchResultDeref(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR> *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static void BTreeSearchResultInit(B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *,unsigned long);
};

struct MBR_ENTRY
{
	unsigned char Validate(unsigned long,unsigned __int64);
	void ComputeChs(_DISK_GEOMETRY *);
};

struct MBR_HEADER
{
	unsigned long CheckSum();
};

struct MetroHash64
{
	static void Hash(unsigned char const *,unsigned __int64,unsigned char * const,unsigned __int64);
};

struct NP_CONTEXT
{
	static B_TREE_NODE_HDR * NpGetResidentLeaf(NP_CONTEXT::NP_CTX *,_NP_LEAF_PTR *);
	static long NpNodesPageOut(NP_CONTEXT::NP_CTX *);
	static long NpStart(NP_CONTEXT *,NP_CONTEXT::_NP_PARAMETERS *);
	static long NpiPerformPageOut(NP_CONTEXT *,NP_CONTEXT::NP_CTX *);
	static long NpiRebaseCallback(void *,void *,unsigned __int64 *);
	static long NpiTreeWalkCallback(void *,void *,unsigned __int64 *);
	static void * NpLeafRefInternal(NP_CONTEXT::NP_CTX *,void * *,unsigned long);
	static void * NpLeafRemoveInternal(NP_CONTEXT::NP_CTX *,void * *);
	static void * NpNodeAllocate(NP_CONTEXT::NP_CTX *,unsigned long,unsigned long);
	static void * NpiGetReservedBuffer(NP_CONTEXT *,NP_CONTEXT::NP_CTX *);
	static void NpCleanup(NP_CONTEXT *,unsigned long);
	static void NpLeafDerefInternal(NP_CONTEXT::NP_CTX *,void * *);
	static void NpNodeFree(NP_CONTEXT::NP_CTX *,void *,unsigned long);
	static void NpiLeafPageIn(NP_CONTEXT *,NP_CONTEXT::NP_CTX *,_NP_LEAF_PTR *);
};

struct NT_DISK
{
	long Initialize(_DEVICE_OBJECT *);
	virtual long Control(unsigned long,void *,unsigned long,void *,unsigned long);
	virtual long GetPnpProperty(void *,void * *);
	virtual long Read(unsigned __int64,unsigned long,unsigned char *);
	virtual long Write(unsigned __int64,unsigned long,unsigned char *);
};

class SC_DEVICE
{
	long ExtractDeviceStrings();
	long ExtractFaultDomainIds();
protected:
	virtual long GetStoragePropertyPost(_STORAGE_PROPERTY_ID,_STORAGE_DESCRIPTOR_HEADER *);
	virtual long GetStoragePropertyPre(_STORAGE_PROPERTY_ID,unsigned long *);
	virtual void SaveStorageProperty(_STORAGE_PROPERTY_ID,_STORAGE_DESCRIPTOR_HEADER *);
public:
	long GetStorageProperty(_STORAGE_PROPERTY_ID,_STORAGE_DESCRIPTOR_HEADER * *);
	long UpdateStorageProperty(_STORAGE_PROPERTY_ID);
	virtual long Initialize();
	virtual ~SC_DEVICE();
};

class SC_DISK
{
protected:
	virtual long GetStoragePropertyPost(_STORAGE_PROPERTY_ID,_STORAGE_DESCRIPTOR_HEADER *);
	virtual long GetStoragePropertyPre(_STORAGE_PROPERTY_ID,unsigned long *);
	virtual void SaveStorageProperty(_STORAGE_PROPERTY_ID,_STORAGE_DESCRIPTOR_HEADER *);
public:
	SC_DISK();
	long CreatePartitionTable(_CREATE_DISK *);
	long InitializePartitionCache();
	long ReadPartitionTable(SC_DISK_LAYOUT * *);
	long ReadSectors(unsigned long,unsigned __int64,void *);
	long ResetPartitionCache();
	long SetPartition(unsigned long,_SET_PARTITION_INFORMATION_EX *);
	long VerifyPartitionTable(unsigned char);
	long WritePartitionTable(SC_DISK_LAYOUT *);
	long WriteSectors(unsigned long,unsigned __int64,void *);
	unsigned char IsVbr();
	virtual long Initialize();
	virtual ~SC_DISK();
};

struct SC_ENV
{
	static long CreateGuid(_GUID *);
	static void * Allocate(unsigned __int64);
	static void Free(void *);
};

struct SC_ENV_ALLOCATOR
{
	static void operator delete(void *);
};

class SC_GPT
{
	long ReadEntries(GPT_HEADER *,_GPT_ENTRY * *);
	long ReadEntries(GPT_HEADER *,_GPT_ENTRY *);
	long ReadHeader(unsigned long,GPT_HEADER *);
public:
	long CreatePartitionTable(_CREATE_DISK *);
	long ReadPartitionTable(SC_DISK_LAYOUT * *);
	long SetPartition(unsigned long,_SET_PARTITION_INFORMATION_EX *);
	long VerifyPartitionTable(unsigned char);
	long WritePartitionTable(SC_DISK_LAYOUT *,unsigned char);
};

struct SC_MBR
{
	long CreatePartitionTable(_CREATE_DISK *);
	long ReadPartitionTable(SC_DISK_LAYOUT * *);
	long SetPartition(unsigned long,_SET_PARTITION_INFORMATION_EX *);
	long WritePartitionTable(SC_DISK_LAYOUT *);
	void Initialize(SC_DISK *);
};

struct SC_RAW
{
	long CreatePartitionTable();
	long ReadPartitionTable(SC_DISK_LAYOUT * *);
};

struct SMKM_STORE<SM_TRAITS>
{
	static SMKM_STORE<SM_TRAITS>::_SMST_RESIDENT_CHECK_RESULT SmStCheckResident(void *,unsigned long);
	static ST_STORE<SM_TRAITS>::_ST_WORK_ITEM * SmStWorkItemGet(SMKM_STORE<SM_TRAITS> *,unsigned long *);
	static _SM_VIRTUAL_LOCKED_REGION * SmStFindVirtualLockedRegion(SMKM_STORE<SM_TRAITS> *,unsigned long,void *);
	static long SmStAllocatePhysicalRegion(SMKM_STORE<SM_TRAITS> *,unsigned long);
	static long SmStAllocateVirtualRegion(SMKM_STORE<SM_TRAITS> *,unsigned long);
	static long SmStCompareRegionDataCallback(_SMKM_STORE_HELPER *,void *,unsigned long);
	static long SmStDirectReadIssue(SMKM_STORE<SM_TRAITS> *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *,void *);
	static long SmStGetStoreStats(SMKM_STORE<SM_TRAITS> *,_ST_STATS_LEVEL,_ST_STATS *,unsigned long *);
	static long SmStHelperSendCommand(SMKM_STORE<SM_TRAITS> *,_SMKM_STORE_HELPER_COMMAND,_SMKM_STORE_HELPER_PARAMS *,unsigned long);
	static long SmStOutSwapPrepareStore(SMKM_STORE<SM_TRAITS> *);
	static long SmStOutSwapStore(SMKM_STORE<SM_TRAITS> *);
	static long SmStPrioritizeRegionsStore(SMKM_STORE<SM_TRAITS> *,_SMST_PRIORITIZE_REGIONS_CTX *);
	static long SmStReleaseVirtualRegion(SMKM_STORE<SM_TRAITS> *,unsigned long,unsigned long);
	static long SmStStart(SMKM_STORE<SM_TRAITS> *,_SMST_PARAMETERS *);
	static long SmStSwapStore(SMKM_STORE<SM_TRAITS> *,_SM_STORE_SWAP_OPERATION);
	static long SmStTrimWsStore(SMKM_STORE<SM_TRAITS> *,unsigned __int64);
	static long SmStUnhandledExceptionFilter(void *,_EXCEPTION_POINTERS *,SMKM_STORE<SM_TRAITS>::_SMST_STORE_EXCEPTION_SOURCE);
	static long SmStWorkerThreadStartThread(SMKM_STORE<SM_TRAITS> *,void *,void (*)(void *),_ETHREAD * *);
	static unsigned long SmStCheckLockInProgressRegionComplete(SMKM_STORE<SM_TRAITS> *,_SM_VIRTUAL_REGION *,unsigned long);
	static unsigned long SmStDirectRead(SMKM_STORE<SM_TRAITS> *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static unsigned long SmStEtwFillStoreStatsEvent(SMKM_STORE<SM_TRAITS> *,_SMKM_EVENT_DESCRIPTOR *);
	static unsigned long SmStIsRegionBusy(SMKM_STORE<SM_TRAITS> *,unsigned long);
	static void * SmStMapPhysicalRegion(SMKM_STORE<SM_TRAITS> *,unsigned long,unsigned long,unsigned long,unsigned long);
	static void * SmStMapVirtualRegion(SMKM_STORE<SM_TRAITS> *,unsigned long,unsigned long,unsigned long,unsigned long);
	static void SmStAcquireStoreLockExclusive(SMKM_STORE<SM_TRAITS> *);
	static void SmStCleanup(SMKM_STORE<SM_TRAITS> *);
	static void SmStDirectReadCallout(void *);
	static void SmStDirectReadComplete(SMKM_STORE<SM_TRAITS> *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *,long);
	static void SmStEtwFillStoreEvent(SMKM_STORE<SM_TRAITS> *,_SMKM_EVENT_DESCRIPTOR *);
	static void SmStInitialize(SMKM_STORE<SM_TRAITS> *);
	static void SmStReadThread(void *);
	static void SmStReleaseStoreLockExclusive(SMKM_STORE<SM_TRAITS> *);
	static void SmStTrimWsStoreBatch(SMKM_STORE<SM_TRAITS> *,unsigned long *,void * *,unsigned long,unsigned long,unsigned __int64 *);
	static void SmStUnmapVirtualRegion(SMKM_STORE<SM_TRAITS> *,unsigned long,unsigned long,unsigned long,void *,unsigned long);
	static void SmStWorkItemQueue(SMKM_STORE<SM_TRAITS> *,_ST_WORK_ITEM_HDR *,unsigned long);
	static void SmStWorker(void *);
	static void SmStWorkerThread(void *);
};

struct SMKM_STORE_MGR<SM_TRAITS>
{
	static SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_THREAD_PARAMS * SmCompressCtxCreateThreadParams(SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_CONTEXT *,unsigned long);
	static long SmCompressCtxCreateThread(SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_CONTEXT *,SMKM_STORE_MGR<SM_TRAITS> *,unsigned long);
	static long SmCompressCtxStart(SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_CONTEXT *,SMKM_STORE_MGR<SM_TRAITS> *,unsigned long);
	static long SmFeAddInitiate(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long,unsigned long,SMKM_STORE_MGR<SM_TRAITS>::_SM_WORK_ITEM *,SMKM_STORE_MGR<SM_TRAITS>::_SM_IO_CONTEXT *,unsigned long);
	static long SmIoCtxPrepareToQueue(SMKM_STORE_MGR<SM_TRAITS>::_SM_IO_CONTEXT *,SMKM_STORE_MGR<SM_TRAITS> *,unsigned long,SMKM_STORE_MGR<SM_TRAITS>::_SM_WORK_ITEM *,SMKM_STORE_MGR<SM_TRAITS>::_SM_QUEUE_CONTEXT *);
	static long SmIoCtxQueueWork(SMKM_STORE_MGR<SM_TRAITS>::_SM_IO_CONTEXT *,SMKM_STORE_MGR<SM_TRAITS> *,unsigned long,SMKM_STORE_MGR<SM_TRAITS>::_SM_WORK_ITEM *);
	static long SmPageRead(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,_MDL *,void *,_IO_STATUS_BLOCK *);
	static long SmPageWrite(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,_SM_PAGE_ADD_PARAM,_MDL *,void *,_IO_STATUS_BLOCK *,unsigned long);
	static long SmPerformStoreMaintenance(SMKM_STORE_MGR<SM_TRAITS> *,SMKM_STORE<SM_TRAITS> *,_ST_MAINTENANCE_TYPE);
	static long SmReadPickStore(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long *,SMKM_STORE<SM_TRAITS> * *,unsigned long *);
	static long SmStoreContentsRundown(SMKM_STORE_MGR<SM_TRAITS> *,SMKM_STORE<SM_TRAITS> *);
	static long SmStoreMgrCallback(_SMKM_STORE_LIST *,void *,_SMKM_CALLBACK_TYPE);
	static long SmStorePrepare(SMKM_STORE_MGR<SM_TRAITS> *);
	static long SmStoreRequest(SMKM_STORE_MGR<SM_TRAITS> *,unsigned long,SMKM_STORE_MGR<SM_TRAITS>::_SM_WORK_ITEM *,_KEVENT *,_IO_STATUS_BLOCK *);
	static long SmStoreRequestEx(SMKM_STORE_MGR<SM_TRAITS> *,SMKM_STORE<SM_TRAITS> *,SMKM_STORE_MGR<SM_TRAITS>::_SM_WORK_ITEM *,_KEVENT *,_IO_STATUS_BLOCK *);
	static long SmStoreTerminate(SMKM_STORE_MGR<SM_TRAITS> *,SMKM_STORE<SM_TRAITS> *,_ST_ETW_TERMINATION_REASON,long);
	static long SmSwapStore(SMKM_STORE_MGR<SM_TRAITS> *,SMKM_STORE<SM_TRAITS> *,_SM_STORE_SWAP_OPERATION);
	static long SmTrimWsStore(SMKM_STORE_MGR<SM_TRAITS> *,SMKM_STORE<SM_TRAITS> *,unsigned __int64);
	static unsigned long SmFeCheckPresent(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long *,unsigned long *);
	static unsigned long SmFeEvictInitiate(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long *,unsigned long *);
	static unsigned long SmFeEvictUpdatePass(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long *,unsigned long *,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *);
	static unsigned long SmFeReadInitiate(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long *,unsigned __int64 *,unsigned long *);
	static unsigned long SmIoCtxWorkItemComplete(_ST_WORK_ITEM_HDR *,SMKM_STORE_MGR<SM_TRAITS> *,SMKM_STORE<SM_TRAITS> *,long);
	static unsigned long SmpPageEvict(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long,void *);
	static void SmAsyncReadQueueInsert(SMKM_STORE_MGR<SM_TRAITS>::_SM_ASYNC_READ_QUEUE *,SMKM_STORE_MGR<SM_TRAITS>::_SM_ASYNC_DIRECT_READ_CTX *,unsigned long);
	static void SmAsyncReadQueueWorker(void *);
	static void SmCompressContextDeleteThreadParams(SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_THREAD_PARAMS *);
	static void SmCompressContextQueueEntry(SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_CONTEXT *,SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_ENTRY *);
	static void SmCompressContextUpdateMemoryCondition(SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_CONTEXT *,_SMP_MEMORY_CONDITION,unsigned long);
	static void SmCompressCtxBalancerThread(void *);
	static void SmCompressCtxCleanup(SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_CONTEXT *);
	static void SmCompressCtxProcessEntry(SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_CONTEXT *,SMKM_STORE_MGR<SM_TRAITS> *,void *,void *,SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_ENTRY *);
	static void SmCompressCtxProcessReadyQueue(SMKM_STORE_MGR<SM_TRAITS>::_SM_COMPRESS_CONTEXT *,SMKM_STORE_MGR<SM_TRAITS> *,unsigned char,unsigned long);
	static void SmCompressCtxWorkerThread(void *);
	static void SmDrainSList(_SLIST_HEADER *,unsigned long);
	static void SmEvictKeys(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long,SMKM_STORE<SM_TRAITS> *);
	static void SmFeAddComplete(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long,unsigned long,unsigned long);
	static void SmFeDeleteEntry(SMKM_STORE_MGR<SM_TRAITS> *,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::SEARCH_RESULT *,B_TREE<_SM_PAGE_KEY,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY,4096,B_TREE_DUMMY_NODE_POOL,B_TREE_KEY_COMPARATOR<_SM_PAGE_KEY> >::ITERATOR *,SMKM_STORE_MGR<SM_TRAITS>::SMKM_FRONTEND_ENTRY *);
	static void SmFeEmpty(SMKM_STORE_MGR<SM_TRAITS> *);
	static void SmFeEvictComplete(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long,unsigned long);
	static void SmFeSetEvictFailed(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long,unsigned long);
	static void SmFeStoreDelete(SMKM_STORE_MGR<SM_TRAITS> *,unsigned long);
	static void SmFeStoreEvictKeys(SMKM_STORE_MGR<SM_TRAITS> *,_SM_PAGE_KEY *,unsigned long,unsigned long);
	static void SmHighMemPriorityWatchdogTimerCallback(_KTIMER2 *,void *);
	static void SmHighMemPriorityWatchdogWorker(void *);
	static void SmInitialize(SMKM_STORE_MGR<SM_TRAITS> *,_SMKM_STORE_MGR_PARAMS *);
	static void SmProcessAddCompletion(SMKM_STORE_MGR<SM_TRAITS> *,SMKM_STORE_MGR<SM_TRAITS>::_SM_WORK_ITEM *,unsigned long,SMKM_STORE<SM_TRAITS> *,long);
	static void SmReInitialize(SMKM_STORE_MGR<SM_TRAITS> *);
	static void SmUpdateMemoryConditions(SMKM_STORE_MGR<SM_TRAITS> *,_SMP_MEMORY_CONDITION,unsigned long);
	static void SmWorkItemFree(SMKM_STORE_MGR<SM_TRAITS> *,SMKM_STORE<SM_TRAITS> *,_ST_WORK_ITEM_HDR *,long *);
	static void SmWorkItemFreeResource(SMKM_STORE_MGR<SM_TRAITS> *,SMKM_STORE_MGR<SM_TRAITS>::_SM_WORK_ITEM *,SMKM_STORE_MGR<SM_TRAITS>::_SM_IO_CONTEXT *);
};

struct ST_STORE<SM_TRAITS>
{
	struct ST_HASH_ENTRY_COMPARATOR
	{
		static int Compare(void *,unsigned long const &,unsigned long const &);
	};

	struct ST_REGION_ENTRY_COMPARATOR
	{
		static int Compare(void *,unsigned long const &,unsigned long const &);
	};

	static ST_STORE<SM_TRAITS>::_ST_PAGE_RECORD * ST_PAGE_RECORD_GET(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY *);
	static ST_STORE<SM_TRAITS>::_ST_PAGE_RECORD * StDmCombinePageEntry(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_PAGE_ENTRY *);
	static ST_STORE<SM_TRAITS>::_ST_REGION_STATE * StRegionFindCompact(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static ST_STORE<SM_TRAITS>::_ST_REGION_STATE * StRegionFindRepurpose(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static ST_STORE<SM_TRAITS>::_ST_STAGING_REGION * StStagingRegionFind(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static ST_STORE<SM_TRAITS>::_ST_WORK_ITEM * StDeviceIoBuild(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_PAGE_LOCATION *,unsigned long,void *);
	static _ST_COMPACTION_CHECK_RESULT StDmCheckForCompaction(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static char * StMapAndLockRegion(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,unsigned long,unsigned long);
	static int StDmCombineTargetCompare(void *,void const *,void const *);
	static int StpKeyCompare(void const *,void const *);
	static long StAddRemoveRegions(ST_STORE<SM_TRAITS> *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static long StCompactRegions(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,char *,unsigned long,char *,unsigned long,unsigned long);
	static long StCompactionPerformEmergency(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static long StCompactionPerformInMem(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static long StCompactionWorker(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static long StDeviceIoIssue(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,_PF_QUEUE *);
	static long StDmCombineBufferAddEntry(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,_SM_PAGE_COMBINE_BUFFER *,ST_STORE<SM_TRAITS>::_STDM_COMBINE_ENTRY_CACHE *,ST_STORE<SM_TRAITS>::_ST_PAGE_RECORD *);
	static long StDmCombineBufferProcess(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,_SM_PAGE_COMBINE_BUFFER * *);
	static long StDmCombineRegion(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static long StDmCurrentRegionSet(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,unsigned long);
	static long StDmDeviceIoCompletion(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static long StDmDeviceIoTransfer(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *,ST_STORE<SM_TRAITS>::_ST_DEVICE_IO *);
	static long StDmEtaPerformIo(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,unsigned long);
	static long StDmEtaRefresh(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static long StDmEtwPageRundown(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static long StDmEtwRegionRundown(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static long StDmGetStatsBitmap(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,unsigned char *,unsigned __int64 *);
	static long StDmLazyRegionsWorker(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static long StDmPageAdd(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static long StDmPageRecordRemove(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_PAGE_RECORD *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *);
	static long StDmPageRemove(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static long StDmPageRetrieve(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_STDM_READ_CONTEXT *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static long StDmRegionEvict(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_STDM_SEARCH_RESULTS *,unsigned long,unsigned long,unsigned long,unsigned long);
	static long StDmRegionGetKeys(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_STDM_SEARCH_RESULTS *,unsigned long,unsigned long,unsigned long,_SM_PAGE_KEY *,unsigned long *);
	static long StDmRegionRemove(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long *);
	static long StDmReuseCurrentRegion(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_CURRENT_REGION *);
	static long StDmSinglePageCopy(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,void *,char *,char *,ST_STORE<SM_TRAITS>::_ST_PAGE_LOCATION *,ST_STORE<SM_TRAITS>::_STDM_READ_CONTEXT *);
	static long StDmSinglePageRetrieveSync(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,void *,void *,unsigned long);
	static long StDmSinglePageTransfer(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,void *,char *,void *,void *,ST_STORE<SM_TRAITS>::_ST_PAGE_LOCATION *,ST_STORE<SM_TRAITS>::_STDM_READ_CONTEXT *);
	static long StDmStart(ST_STORE<SM_TRAITS> *,ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,_STDM_PARAMETERS *,_RTL_BITMAP *,unsigned long *,unsigned long);
	static long StDmpCurrentRegionWrite(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static long StDmpDummyPageRecordAllocate(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static long StDmpSinglePageAdd(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_IO_PARAMS *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *,unsigned long *);
	static long StDmpSinglePageFindSpace(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,unsigned long,char * *,unsigned long *);
	static long StDmpSinglePageInsert(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_IO_PARAMS *,ST_STORE<SM_TRAITS>::_ST_PAGE_RECORD *);
	static long StDmpSinglePageLookup(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_STDM_READ_CONTEXT *,ST_STORE<SM_TRAITS>::_ST_IO_PARAMS *,ST_STORE<SM_TRAITS>::_ST_PAGE_RECORD * *);
	static long StDmpSinglePageRetrieve(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_STDM_READ_CONTEXT *,ST_STORE<SM_TRAITS>::_ST_IO_PARAMS *,void *,ST_STORE<SM_TRAITS>::_ST_PAGE_LOCATION *);
	static long StGetStats(ST_STORE<SM_TRAITS> *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static long StGetStatsWorker(ST_STORE<SM_TRAITS> *,_ST_STATS_LEVEL,_ST_STATS *,unsigned long *);
	static long StMetaRegionsUpdate(ST_STORE<SM_TRAITS> *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static long StNpEnumBTreeNodes(NP_CONTEXT::NP_CTX *,long (*)(void *,void *,unsigned __int64 *),void *);
	static long StNpLeafPageIn(NP_CONTEXT::NP_CTX *,void *,unsigned __int64);
	static long StStagingRegionIssueIo(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_STAGING_REGION *,unsigned long);
	static long StStart(ST_STORE<SM_TRAITS> *,_ST_CREATE_PARAMS *);
	static long StWorkItemProcess(ST_STORE<SM_TRAITS> *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static unsigned __int64 StNpLeafPageOut(NP_CONTEXT::NP_CTX *,void *);
	static unsigned long StCompactionFindEmptiest(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_REGION_STATE * *,unsigned long,unsigned long);
	static unsigned long StCompactionPickPriority(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_REGION_STATE * *,unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_STATE * *,unsigned long);
	static unsigned long StDeviceIoIsFailed(ST_STORE<SM_TRAITS>::_ST_DEVICE_IO *,long *);
	static unsigned long StDmHandleDecompressionFailure(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,char *,char *,ST_STORE<SM_TRAITS>::_ST_PAGE_LOCATION *,ST_STORE<SM_TRAITS>::_STDM_READ_CONTEXT *);
	static unsigned long StDmIsCurrentRegion(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static unsigned long StDmLazyWorkItemQueue(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static unsigned long StDmPageError(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,char *,char *,ST_STORE<SM_TRAITS>::_ST_PAGE_LOCATION *,ST_STORE<SM_TRAITS>::_STDM_READ_CONTEXT *,long);
	static unsigned long StDmPickRandomRegion(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static unsigned long StRegionReadReference(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static void * StAcquireReadContext(ST_STORE<SM_TRAITS> *);
	static void StCleanup(ST_STORE<SM_TRAITS> *);
	static void StCopyIoStats(_ST_IO_STATS *,_ST_IO_COUNTS *);
	static void StDeviceWorkItemCleanup(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static void StDmCleanup(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static void StDmCombineLazyCleanup(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static void StDmCombinePageRecords(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_PAGE_RECORD *,B_TREE<unsigned long,ST_STORE<SM_TRAITS>::_ST_REGION_ENTRY,4096,NP_CONTEXT,ST_STORE<SM_TRAITS>::ST_REGION_ENTRY_COMPARATOR>::SEARCH_RESULT *,ST_STORE<SM_TRAITS>::_ST_PAGE_RECORD *);
	static void StDmComputeSpaceUsageForPriority(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,unsigned long *,unsigned long *,unsigned long *);
	static void StDmDeviceError(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_DEVICE_FAIL_TYPE,long);
	static void StDmGetSpaceStats(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long *,unsigned long *);
	static void StDmInitialize(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static void StDmInvalidateCurrentRegions(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *);
	static void StDmPageRecordUnprotect(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,ST_STORE<SM_TRAITS>::_ST_PAGE_RECORD *);
	static void StDmUpdateRegionLazyCleanup(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,unsigned long);
	static void StDmUpdateRegionsToCompactBitmap(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,unsigned long,unsigned long);
	static void StDmpUpdateRegionState(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,long,unsigned long);
	static void StDrainReadContextList(ST_STORE<SM_TRAITS> *);
	static void StEmptyStore(ST_STORE<SM_TRAITS> *,unsigned long);
	static void StInitialize(ST_STORE<SM_TRAITS> *);
	static void StLazyWorkMgrQueueWork(ST_STORE<SM_TRAITS>::_ST_LAZY_WORK_MGR *,ST_STORE<SM_TRAITS>::_ST_LAZY_WORK_TYPE,unsigned long,unsigned long);
	static void StLazyWorkMgrResetIdle(ST_STORE<SM_TRAITS>::_ST_LAZY_WORK_MGR *);
	static void StLazyWorkMgrRunExpiredWork(ST_STORE<SM_TRAITS>::_ST_LAZY_WORK_MGR *,unsigned __int64);
	static void StLazyWorkMgrSetSchedule(ST_STORE<SM_TRAITS>::_ST_LAZY_WORK_MGR *,unsigned __int64);
	static void StNpLeafDelete(NP_CONTEXT::NP_CTX *,unsigned __int64);
	static void StQueueCompaction(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,_ST_COMPACTION_CHECK_RESULT);
	static void StRegionReadDereference(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static void StReleaseReadContext(ST_STORE<SM_TRAITS> *,void *);
	static void StReleaseRegion(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long);
	static void StStoreWorkItemCleanup(ST_STORE<SM_TRAITS> *,ST_STORE<SM_TRAITS>::_ST_WORK_ITEM *);
	static void StUnlockAndUnmapRegion(ST_STORE<SM_TRAITS>::_ST_DATA_MGR *,unsigned long,char *);
};

struct StEtaHelper
{
	static long StartHelper(_ST_ETA_CONTEXT *,unsigned long);
};

_EVENT_DESCRIPTOR const * * SmEtwDescriptorPtrs;
_SMKM_GLOBALS SmKmGlobals;
_SM_GLOBALS SmGlobals;
int CompareLangIDs(void const *,void const *);
int CompareLangName(void const *,void const *);
int IsEqualGUID(_GUID const &,_GUID const &);
int IsNeutralLanguageItem(CultureDataType const *);
int wil_details_FeaturePropertyCache_ReportUsageToServiceDirect(wil_details_FeaturePropertyCache *,unsigned int,wil_details_ServiceReportingKind,unsigned int,unsigned __int64);
int wil_details_ModifyFeatureData(wil_details_FeaturePropertyCache *,int (*)(wil_details_FeaturePropertyCache *,void *),void *);
int wil_details_SetPropertyCacheOpportunityCallback(wil_details_FeaturePropertyCache *,void *);
int wil_details_SetPropertyCacheUsageCallback(wil_details_FeaturePropertyCache *,void *);
int wil_details_SetPropertyFlagCallback(wil_details_FeaturePropertyCache *,void *);
long RtlStringCbCopyUnicodeString(unsigned short *,unsigned __int64,_UNICODE_STRING const *);
long ScAnsiToUnicodeString(char *,_UNICODE_STRING *);
long SmFirstTimeInit(unsigned long,unsigned long);
long SmKeyConvert(_MM_STORE_KEY *,_SM_PAGE_KEY *);
long SmKmIssueFileIo(_SMKM_FILE_INFO *,_SMKM_ISSUE_IO_PARAMS *,_LARGE_INTEGER *,void (*)(void *,_IO_STATUS_BLOCK *,unsigned long),void *);
long SmKmProbeAndLockAddress(void *,unsigned __int64,_MDL *,unsigned long);
long SmpDeviceIoCompletion(_DEVICE_OBJECT *,_IRP *,void *);
long SmpStoreMgrCallback(_SMKM_STORE_LIST *,void *,_SMKM_CALLBACK_TYPE);
long StringCchCopyNW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
unsigned long StLockTryAcquireExclusive(VLOCK *,unsigned long *);
void (* g_wil_details_pfnFeatureLoggingHook)(unsigned int,FEATURE_LOGGED_TRAITS const *,FEATURE_ERROR const *,int,wil_ReportingKind const *,wil_VariantReportingKind const *,unsigned char,unsigned __int64);
void (* g_wil_details_recordFeatureUsage)(unsigned int,wil_details_ServiceReportingKind,unsigned int,wil_details_FeaturePropertyCache *,wil_details_RecordUsageResult *);
void * SmAllocWrapper(unsigned __int64,void *);
void SmFatalHeapCorruptionDumpCallback(_KBUGCHECK_CALLBACK_REASON,_KBUGCHECK_REASON_CALLBACK_RECORD *,void *,unsigned long);
void SmFatalPageErrorDumpCallback(_KBUGCHECK_CALLBACK_REASON,_KBUGCHECK_REASON_CALLBACK_RECORD *,void *,unsigned long);
void SmFreeWrapper(void *,void *);
void SmpFlushStorePages(void *);
void SmpIoCompletionApc(void *,_IO_STATUS_BLOCK *,unsigned long);
void TlgAggregateInternalFlushTimerCallbackKernelMode(_EX_TIMER *,void *);
void TlgAggregateInternalFlushWorkItemRoutineKernelMode(void *);
void TlgAggregateInternalProviderCallback(_GUID const *,unsigned long,unsigned char,unsigned __int64,unsigned __int64,_EVENT_FILTER_DESCRIPTOR *,void *);
void TlgAggregateInternalRegisteredProviderEtwCallback(_GUID const *,unsigned long,unsigned char,unsigned __int64,unsigned __int64,_EVENT_FILTER_DESCRIPTOR *,void *);
wil_details_RecordUsageResult wil_details_RecordUsageInPropertyCache(wil_details_FeaturePropertyCache *,wil_details_ServiceReportingKind,unsigned int,unsigned int);
