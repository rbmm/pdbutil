struct AccumulateLegacyStoreInfo
{
	virtual void AddLocation(CspLocationKind,unsigned short const *);
};

struct BestMatchResult
{
	~BestMatchResult();
};

struct BufferOverBlob
{
	BufferOverBlob();
	virtual long Buffer(unsigned char * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Capacity(unsigned int *);
	virtual long get_Length(unsigned int *);
	virtual long put_Length(unsigned int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

class BufferOverStream
{
	long EnsureAccessPrivateBuffer(IAccessPrivateBuffer * *);
public:
	BufferOverStream();
	virtual long Buffer(unsigned char * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long get_Capacity(unsigned int *);
	virtual long get_Length(unsigned int *);
	virtual long get_Stream(IStream * *);
	virtual long put_Length(unsigned int);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

struct CCoSimpleArray<unsigned short *,4294967294,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>
{
	~CCoSimpleArray<unsigned short *,4294967294,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>();
};

struct CSimpleCaseInsensitiveOrdinalStringArray
{
	~CSimpleCaseInsensitiveOrdinalStringArray();
};

struct CSimpleEnumString
{
	CSimpleEnumString();
	long AddString(unsigned short const *);
	virtual long Clone(IEnumString * *);
	virtual long Next(unsigned long,unsigned short * *,unsigned long *);
	virtual long Reset();
	virtual long Skip(unsigned long);
};

struct CSimplePointerArray<unsigned short,CTPolicyCoTaskMem<unsigned short>,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>
{
	~CSimplePointerArray<unsigned short,CTPolicyCoTaskMem<unsigned short>,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>();
};

struct CSimplePointerArrayCoTaskMem<unsigned short,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>
{
	~CSimplePointerArrayCoTaskMem<unsigned short,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>();
};

struct CSimpleStringArrayBase<CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>
{
	~CSimpleStringArrayBase<CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>();
};

class CTCoAllocPolicy
{
	static unsigned __int64 _CoTaskMemSize(void *);
public:
	static long Alloc(void *,unsigned long,unsigned __int64,void * *);
	static long Realloc(void *,unsigned long,void *,unsigned __int64,void * *);
};

struct CTSimpleArray<unsigned short *,4294967294,CTPolicyCoTaskMem<unsigned short *>,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper,CSimpleArrayStandardMergeHelper<unsigned short *> >
{
	long _EnsureCapacity(unsigned __int64,unsigned __int64);
	long _InsertAt<unsigned short * const &>(unsigned short * const &,unsigned __int64);
	void RemoveAll();
	~CTSimpleArray<unsigned short *,4294967294,CTPolicyCoTaskMem<unsigned short *>,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper,CSimpleArrayStandardMergeHelper<unsigned short *> >();
};

struct CTSimpleFixedArray<unsigned short *,CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>
{
	long BinarySearchEx<CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper>(CSimpleArrayCaseInsensitiveOrdinalStringCompareHelper const &,unsigned short * const &,unsigned __int64 *);
};

class CTypeServices
{
	long GetQualifiedTypeNameFromDataStoreId(unsigned short const *,HSTRING__ * *);
	static Windows::Internal::Storage::Cloud::PartitionKind s_GetPartitionKindFromString(unsigned short const *);
	static unsigned short const * s_GetStringFromPartitionKind(Windows::Internal::Storage::Cloud::PartitionKind);
public:
	virtual long CreateDataStoreId(Windows::Internal::Storage::Cloud::PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ * *);
	virtual long FindMatchingTypeNames(FindMatchingTypeOptions,Windows::Foundation::Collections::IVectorView<HSTRING__ *> * *);
	virtual long GetIids(unsigned long *,_GUID * *);
	virtual long GetItemAttributes(unsigned short const *,TypeAttributes *);
	virtual long GetQualifiedTypeNames(std::shared_ptr<std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > const > *);
	virtual long GetRuntimeClassName(HSTRING__ * *);
	virtual long GetSchemaOfTypeName(unsigned short const *,IRefcountedSchema * *);
	virtual long GetTrustLevel(TrustLevel *);
	virtual long ParseDataStoreId(HSTRING__ *,Windows::Internal::Storage::Cloud::PartitionKind *,HSTRING__ * *,HSTRING__ * *,HSTRING__ * *);
	virtual long QueryInterface(_GUID const &,void * *);
	virtual long RegisterSchema(unsigned short const *,unsigned char,unsigned char *,unsigned long);
	virtual long ResolveItem(unsigned short const *,Windows::Storage::Streams::IBuffer *,unsigned __int64,Windows::Storage::Streams::IBuffer *,unsigned __int64,Windows::Storage::Streams::IBuffer *,unsigned __int64,Windows::Storage::Streams::IBuffer * *,unsigned __int64 *);
	virtual long SetSchemaProvider(ICloudStoreSchemaProvider *);
	virtual unsigned long AddRef();
	virtual unsigned long Release();
};

namespace CallerIdentity
{
	long CheckCapabilityFromImpersonationToken(void *,unsigned short const *,bool *);
	long CheckCapabilityFromProcessHandle(void *,unsigned short const *,bool *);
	long GetCallingProcessHandle(unsigned long,RUNTIMEBROKER_CALLERIDENTITY_CHECK,void * *);
	long GetCallingProcessHandle(unsigned long,void * *);
	long GetImpersonationTokenFromProcess(void *,unsigned long,void * *);
	long GetPackageFamilyNameFromProcess(void *,unsigned short * *);
	long IsProcessAppContainer(void *,bool *);
};

class CloudCacheInitializerBase
{
	long AddCapabilityAccessToCloudStoreDirectory(unsigned short const *,unsigned long);
	long AddCapabilityAccessToObject(unsigned short const *,_SE_OBJECT_TYPE,unsigned short const *);
	long EnsureCacheInitialized(unsigned short const *,unsigned short const *,unsigned long);
	long EnsureCapabilityAccessToCurrentUserRegistry(unsigned short const *,unsigned short const *,unsigned short const *);
	long EnsureDefaultAccountRootUpgraded();
	long EnsureRegistryCapabilitySecurityDescriptorSet(unsigned short const *,_SE_OBJECT_TYPE,unsigned short const *,unsigned short const *,bool);
	long ExecuteNecessaryUpgrades(CacheVersion,unsigned short const *,unsigned long);
	static bool ShouldPerformUpgradeInLogonTasks();
	static long IsServiceAccount(unsigned short const *,bool *);
public:
	CloudCacheInitializerBase(bool);
	virtual long OnCreate(unsigned short const *,unsigned short const *,unsigned long);
	virtual long OnDelete(unsigned short const *,unsigned short const *,unsigned long);
	virtual long OnLoad(unsigned short const *,unsigned short const *,unsigned long,int);
	virtual long OnMigrate(unsigned short const *,unsigned short const *,unsigned short const *,unsigned long);
	virtual long OnUnload(unsigned short const *,unsigned short const *,unsigned long,int);
	virtual long OnUpgrade(unsigned short const *,unsigned short const *,unsigned long);
};

class CloudDataFieldToWalkable
{
	walkable::complex BuildComplex(Windows::Internal::Storage::Cloud::Model::CloudDataField *);
	walkable::scalar BuildScalar(Windows::Internal::Storage::Cloud::Model::CloudDataField *);
	walkable::structure BuildStructure(Windows::Internal::Storage::Cloud::Model::CloudDataField *);
public:
	~CloudDataFieldToWalkable();
};

struct CloudDataWatcher
{
	virtual ~CloudDataWatcher();
};

class CloudDataWatcherImpl
{
	versioned<schematized_data> LoadStructure(Windows::Internal::Storage::Cloud::LoadOptions);
	void EnsureUpToDate();
protected:
	virtual void OnStartWatching();
	virtual void OnStopWatching();
};

namespace CloudStoreUtilities
{
	bool IsRoamingProfile();
	bool IsSessionOwner();
	bool IsSystemAccount(void *);
	bool IsSystemAccountSid(void *);
	long FindDelimiter(unsigned short const *,unsigned __int64 *);
	long GetFileStorageRootPath(unsigned short const *,unsigned short const *,unsigned short * *);
	long GetFileSystemRootFolder(unsigned short const *,unsigned short *,unsigned long);
	long GetPackageRootFolder(unsigned short const *,unsigned short const *,unsigned short *,unsigned long);
	long GetRegistryRootKey(unsigned short const *,unsigned short const *,HKEY__ * *);
	long GetRootFromAttribute(EffectiveWebAccountContext const &,ScopeValue,TRIBIT,unsigned short * *);
	long VerifyStoreAccessPermissions();
	std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > Tokenize(unsigned short const *);
	unsigned int GetBufferSizeForTelemetry(Windows::Storage::Streams::IBuffer *);
	unsigned int GetStreamSizeForTelemetry(IStream *);
};

struct ComPtrDeleter<Windows::Storage::Streams::IBufferByteAccess>
{
	~ComPtrDeleter<Windows::Storage::Streams::IBufferByteAccess>();
};

struct CompactBinaryWriterCallback
{
	virtual ~CompactBinaryWriterCallback();
};

class CompactBinaryWriterCallbackImpl<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >
{
	void EmitScalar(tagPROPVARIANT const &);
	void EnsureFieldEnterEmitted(FieldState &);
public:
	CompactBinaryWriterCallbackImpl<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >();
	virtual bond::blob GetResult();
	virtual void EnterField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	virtual void EnterList(bond::RuntimeSchema const &,unsigned __int64);
	virtual void EnterMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64);
	virtual void EnterSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	virtual void EnterStructure(bond::RuntimeSchema const &,bool);
	virtual void LeaveField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	virtual void LeaveList(bond::RuntimeSchema const &,unsigned __int64);
	virtual void LeaveMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64);
	virtual void LeaveSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	virtual void LeaveStructure(bond::RuntimeSchema const &,bool);
	virtual void ScalarFound(tagPROPVARIANT const &);
	virtual ~CompactBinaryWriterCallbackImpl<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >();
};

struct CoreSchemaProvider
{
	CoreSchemaProvider();
};

class CspExportCallback
{
	void WriteCspValue(IConfigManager2URI *,tagVARIANT const &,ConfigDataType);
protected:
	virtual void EnterMigrationBlob(IConfigManager2URI *);
	virtual void EnterMigrationMap(IConfigManager2URI *,bond::RuntimeSchema const &);
	virtual void LeaveMigrationBlob(IConfigManager2URI *);
	virtual void OnMigrateScalar(tagPROPVARIANT const &,IConfigManager2URI *,unsigned short,ConfigDataType);
};

class CspGetLegacyStoreInfoCallback
{
protected:
	virtual void EnterMigrationBlob(IConfigManager2URI *);
	virtual void EnterMigrationMap(IConfigManager2URI *,bond::RuntimeSchema const &);
	virtual void LeaveMigrationBlob(IConfigManager2URI *);
	virtual void OnMigrateScalar(tagPROPVARIANT const &,IConfigManager2URI *,unsigned short,ConfigDataType);
};

struct CspHelper
{
	ParsedCspPath ParseCspPath(IConfigManager2URI *,bool);
	std::unique_ptr<CspTransaction,std::default_delete<CspTransaction> > BeginTransaction();
	wil::com_ptr_t<IConfigManager2,wil::err_exception_policy> const & GetConfigManager();
	wil::com_ptr_t<IConfigManager2URI,wil::err_exception_policy> CreateUri(unsigned short *);
	wil::com_ptr_t<IConfigNode,wil::err_exception_policy> GetConfigNode(IConfigManager2URI *);
	~CspHelper();
};

class CspImportCallback
{
	static std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > GetChildNodeNames(IConfigNode *);
	static unsigned long SafeArrayGetCount(tagSAFEARRAY *);
	void MarkNonOmitted();
protected:
	virtual void EnterMigrationBlob(IConfigManager2URI *);
	virtual void EnterMigrationMap(IConfigManager2URI *,bond::RuntimeSchema const &);
	virtual void LeaveMigrationBlob(IConfigManager2URI *);
	virtual void OnMigrateScalar(tagPROPVARIANT const &,IConfigManager2URI *,unsigned short,ConfigDataType);
};

class CspMigrationCallbackBase
{
	ConfigDataType GetCurrentCspConfigType();
	Frame const & GetMostRecentFrameOfKind(FrameKind);
	unsigned short GetCurrentCspVariantType();
	wil::com_ptr_t<IConfigManager2URI,wil::err_exception_policy> GetCurrentCspUri();
protected:
	void EmitScalar(tagPROPVARIANT const &);
	void EnsureAntecedentsEntered();
	void EnsureFrameEnterEmitted(Frame &);
	void EnsureTransactionStarted();
	void LeaveFrame(Frame const &);
public:
	CspMigrationCallbackBase(StructureWalkCallback *);
	virtual void EnterField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	virtual void EnterList(bond::RuntimeSchema const &,unsigned __int64);
	virtual void EnterMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64);
	virtual void EnterSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	virtual void EnterStructure(bond::RuntimeSchema const &,bool);
	virtual void LeaveField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	virtual void LeaveList(bond::RuntimeSchema const &,unsigned __int64);
	virtual void LeaveMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64);
	virtual void LeaveSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	virtual void LeaveStructure(bond::RuntimeSchema const &,bool);
	virtual void ScalarFound(tagPROPVARIANT const &);
	virtual ~CspMigrationCallbackBase();
};

struct CspTransaction
{
	void Commit();
};

struct DebugLogObject
{
	DebugLogObject(Windows::Storage::Streams::IBuffer *);
	DebugLogObject(schematized_data const &);
};

struct DeduplicatedLegacyPaths
{
	static DeduplicatedLegacyPaths Make(walkable::structure const &);
	~DeduplicatedLegacyPaths();
};

struct DeduplicatedPath
{
	~DeduplicatedPath();
};

class DeduplicatedPathBuilder
{
	std::set<DeduplicatedPath,std::less<DeduplicatedPath>,std::allocator<DeduplicatedPath> > GetDuplicates();
public:
	std::set<DeduplicatedPath,std::less<DeduplicatedPath>,std::allocator<DeduplicatedPath> > const & Get();
	void AddPath(unsigned short const *,AddPathFlags);
	~DeduplicatedPathBuilder();
};

struct DetectUnknownFieldsTransform
{
	~DetectUnknownFieldsTransform();
};

class DevicePartitionMetadataFactory
{
	Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata const & EnsureCurrentDeviceExperiencePartitionMetadata();
	static Windows::Data::Platform::Partitioning::_bond_enumerators::FormFactor::FormFactor GetCurrentDeviceFormFactor();
	static bool SortByModifedTime(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &);
	static std::vector<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata>,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > > GetRankedCandidatePartitions(Windows::Data::Platform::Partitioning::PartitionSet const &,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata const &);
public:
	virtual bond::bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::ProtocolReader<bond::InputBuffer> > CreateDefault();
	virtual std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > GetBestMatch(Windows::Data::Platform::Partitioning::PartitionSet const &);
	virtual wil::com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::IPartitionMetadata,wil::err_exception_policy> CreateInterface(bond::bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::ProtocolReader<bond::InputBuffer> > const &);
};

struct EffectiveUserContext
{
	static EffectiveUserContext CreateForCurrentUser();
	static EffectiveUserContext CreateForUser(Windows::System::IUser *);
	unsigned short const * GetSidString();
	wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<void *,void (*)(void *),&void wil::details::RevertImpersonateToken(void *),wistd::integral_constant<unsigned __int64,2>,void *,-1,void *> > > Impersonate();
	~EffectiveUserContext();
};

class EffectiveWebAccountContext
{
	EffectiveWebAccountContext(Windows::Security::Credentials::IWebAccount *,unsigned short const *);
public:
	EffectiveWebAccountContext(EffectiveWebAccountContext const &);
	Windows::Security::Credentials::IWebAccount * GetWebAccount();
	static EffectiveWebAccountContext CreateForWebAccount(Windows::Security::Credentials::IWebAccount *,unsigned short const *);
	static wil::com_ptr_t<Windows::Internal::Security::Authentication::Web::ITokenBrokerInternalStatics,wil::err_exception_policy> GetTokenBrokerInternalStatics();
	static wil::com_ptr_t<Windows::Security::Credentials::IWebAccount,wil::err_exception_policy> GetDefaultAccount(Windows::Internal::Security::Authentication::Web::ITokenBrokerInternalStatics *);
	unsigned short const * GetAccountStorageName();
	~EffectiveWebAccountContext();
};

struct EnsureCloudStore<Windows::Internal::Storage::Cloud::ICloudStore>
{
	void operator()(Windows::Internal::Storage::Cloud::ICloudStore * *);
};

struct EnumStringOnStlContainer<std::unordered_set<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::hash<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::equal_to<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >
{
	virtual long Clone(IEnumString * *);
	virtual long Next(unsigned long,unsigned short * *,unsigned long *);
	virtual long Reset();
	virtual long Skip(unsigned long);
};

class ExportMigrationCallback
{
protected:
	virtual std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > OnCreateCallback(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
public:
	~ExportMigrationCallback();
};

struct FieldState
{
	~FieldState();
};

class Frame
{
	Frame(FrameKind,bond::RuntimeSchema const &,bond::Metadata const *,bool,bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned short,bool,bool);
public:
	bool HasCspPath();
	static Frame MakeField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	static Frame MakeList(bond::RuntimeSchema const &,unsigned __int64,bool);
	static Frame MakeMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64,bool);
	static Frame MakeSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	static Frame MakeStructure(bond::RuntimeSchema const &,bool);
	void ResetCurrentMapKey(unsigned short const *);
	~Frame();
};

class GetLegacyStoreInfoMigrationCallback
{
protected:
	virtual std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > OnCreateCallback(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
public:
	~GetLegacyStoreInfoMigrationCallback();
};

class GetReferencesCallback
{
	bool IsItemReference(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
	static std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetGenericTypeName(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
	static std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > GetGenericArguments(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > const & EnsureItemReferenceTypeName();
public:
	virtual void EnterField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	virtual void EnterList(bond::RuntimeSchema const &,unsigned __int64);
	virtual void EnterMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64);
	virtual void EnterSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	virtual void EnterStructure(bond::RuntimeSchema const &,bool);
	virtual void LeaveField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	virtual void LeaveList(bond::RuntimeSchema const &,unsigned __int64);
	virtual void LeaveMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64);
	virtual void LeaveSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	virtual void LeaveStructure(bond::RuntimeSchema const &,bool);
	virtual void ScalarFound(tagPROPVARIANT const &);
	~GetReferencesCallback();
};

class ImportMigrationCallback
{
protected:
	virtual std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > OnCreateCallback(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
public:
	~ImportMigrationCallback();
};

struct ImportedTypeWatcher
{
	virtual ~ImportedTypeWatcher();
};

class ImportedTypeWatcherImpl
{
	struct CreateFolderWatcher
	{
		~CreateFolderWatcher();
	};

	struct CreateRegistryWatcher<0>
	{
		~CreateRegistryWatcher<0>();
	};

	struct CreateRegistryWatcher<1>
	{
		~CreateRegistryWatcher<1>();
	};

	schematized_data EnsureUpToDateRecursive(schematized_data &);
	void EnsureUpToDate();
	void EnsureWatching(schematized_data &);
protected:
	virtual void OnStartWatching();
	virtual void OnStopWatching();
};

class LegacySettingMonitor
{
	static std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > GetRegistrySubkeyNames(HKEY__ *,unsigned short const *);
	static wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> CreateCloudStoreMigrationMonitor(_GUID const &);
	void EnsureMigrationMonitors();
public:
	LegacySettingMonitor();
	virtual long SetCallback(ISettingMonitorSink *);
	virtual long Start();
	virtual long Stop();
	virtual void SetFeatureEnabled(bool);
};

struct ListWriter
{
	~ListWriter();
};

struct MapFields
{
	~MapFields();
};

struct MapWriter
{
	MapWriter();
	~MapWriter();
};

namespace Microsoft
{
	namespace WRL
	{
		struct ActivationFactory<Details::Nil,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<FtmBase,Windows::Internal::Storage::Cloud::ICloudStoreFactory>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<FtmBase,Windows::Internal::Storage::Cloud::Model::ICloudDataTypeFactory>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ActivationFactory<Implements<FtmBase,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManagerFactory>,Details::Nil,Details::Nil,0>
		{
			virtual long ActivateInstance(IInspectable * *);
			virtual long GetIids(unsigned long *,_GUID * *);
			virtual long GetRuntimeClassName(HSTRING__ * *);
			virtual long GetTrustLevel(TrustLevel *);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct AgileActivationFactory<Windows::Internal::Storage::Cloud::ICloudStoreFactory,Details::Nil,Details::Nil,0>
		{
			AgileActivationFactory<Windows::Internal::Storage::Cloud::ICloudStoreFactory,Details::Nil,Details::Nil,0>();
		};

		struct AgileActivationFactory<Windows::Internal::Storage::Cloud::Model::ICloudDataTypeFactory,Details::Nil,Details::Nil,0>
		{
			AgileActivationFactory<Windows::Internal::Storage::Cloud::Model::ICloudDataTypeFactory,Details::Nil,Details::Nil,0>();
		};

		struct AgileActivationFactory<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManagerFactory,Details::Nil,Details::Nil,0>
		{
			AgileActivationFactory<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManagerFactory,Details::Nil,Details::Nil,0>();
		};

		struct ClassFactory<Details::Nil,Details::Nil,Details::Nil,0>
		{
			virtual long LockServer(int);
			virtual long QueryInterface(_GUID const &,void * *);
			virtual unsigned long AddRef();
			virtual unsigned long Release();
		};

		struct ComPtr<BufferOverBlob>
		{
			~ComPtr<BufferOverBlob>();
		};

		class ComPtr<CSimpleEnumString>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<CSimpleEnumString>();
		};

		struct ComPtr<CTypeServices>
		{
			~ComPtr<CTypeServices>();
		};

		class ComPtr<Details::EventTargetArray>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<Details::EventTargetArray> & operator=(ComPtr<Details::EventTargetArray> const &);
			ComPtr<Details::EventTargetArray> & operator=(Details::EventTargetArray *);
			void Attach(Details::EventTargetArray *);
			~ComPtr<Details::EventTargetArray>();
		};

		struct ComPtr<EnumStringOnStlContainer<std::unordered_set<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::hash<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::equal_to<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >
		{
			~ComPtr<EnumStringOnStlContainer<std::unordered_set<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::hash<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::equal_to<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >();
		};

		class ComPtr<IAccessPrivateBuffer>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IAccessPrivateBuffer>();
		};

		class ComPtr<IAsyncInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IBufferOnStream>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IBufferOnStream>();
		};

		class ComPtr<ICallingProcessInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<ICloudStoreMetadata>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICloudStoreMetadata>();
		};

		class ComPtr<ICloudStoreSchemaInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICloudStoreSchemaInternal>();
		};

		class ComPtr<ICloudStoreSchemaProvider>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ICloudStoreSchemaProvider>();
		};

		class ComPtr<IDataChangeWatcher>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IDataChangeWatcher>();
		};

		class ComPtr<IEnumString>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IEnumString>();
		};

		class ComPtr<IMarshal>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IRefcountedSchema>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IRefcountedSchema>();
		};

		class ComPtr<IRestrictedErrorInfo>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<IStream>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<IStream> & operator=(IStream *);
			~ComPtr<IStream>();
		};

		class ComPtr<IThreadRefWithEvent>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<IThreadRefWithEvent>();
		};

		class ComPtr<ITypeRegistry>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITypeRegistry>();
		};

		class ComPtr<ITypeServicesInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<ITypeServicesInternal>();
		};

		class ComPtr<IUnknown>
		{
		protected:
			unsigned long InternalRelease();
		public:
			ComPtr<IUnknown> & operator=(IUnknown *);
			ComPtr<IUnknown>();
			~ComPtr<IUnknown>();
		};

		struct ComPtr<IWeakReference>
		{
			~ComPtr<IWeakReference>();
		};

		struct ComPtr<IWeakReferenceSource>
		{
			~ComPtr<IWeakReferenceSource>();
		};

		struct ComPtr<RefcountedSchema>
		{
			~ComPtr<RefcountedSchema>();
		};

		struct ComPtr<SchemaDefinedMigrationMonitor>
		{
			~ComPtr<SchemaDefinedMigrationMonitor>();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<HSTRING__ *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<HSTRING__ *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >();
		};

		class ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Storage::Cloud::Model::CloudDataField *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::Cloud::Model::CloudDataField *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorIterator<Windows::Internal::Storage::Cloud::Model::CloudDataField *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::Cloud::Model::CloudDataField *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,XWinRT::IntVersionTag,0> >();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<HSTRING__ *,Windows::Foundation::Collections::Internal::Vector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,Windows::Foundation::Collections::Internal::VectorOptions<HSTRING__ *,0,1,0> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::SimpleVectorView<Windows::Internal::Storage::Cloud::Model::CloudDataField *,Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::Cloud::Model::CloudDataField *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,XWinRT::IntVersionTag,0> >
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::Cloud::Model::CloudDataField *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > >
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Foundation::Collections::Internal::Vector<Windows::Internal::Storage::Cloud::Model::CloudDataField *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::Internal::DefaultVectorOptions<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<IInspectable *,IInspectable *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<IInspectable *,IInspectable *> >();
		};

		struct ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *> >
		{
			~ComPtr<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *> >();
		};

		class ComPtr<Windows::Internal::ComTaskPool::CThread>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(Windows::Internal::ComTaskPool::CThread *);
			~ComPtr<Windows::Internal::ComTaskPool::CThread>();
		};

		class ComPtr<Windows::Internal::IComPoolTask>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::IComPoolTask>();
		};

		class ComPtr<Windows::Internal::SettingSync::IRoamingDataQueryFactory>
		{
		protected:
			unsigned long InternalRelease();
		};

		class ComPtr<Windows::Internal::SettingSync::ISettingSyncController>
		{
		protected:
			unsigned long InternalRelease();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::CloudStorage>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::CloudStorage>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::CloudStore>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::CloudStore>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::CloudStoreCache>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::CloudStoreCache>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::CloudStoreSaveResult>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::CloudStoreSaveResult>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::CloudStoreSchema>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::CloudStoreSchema>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::FileStorage>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::FileStorage>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::IBulkLocalStorage>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::IBulkLocalStorage>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::ICloudStorage>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::ICloudStorage>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::ICloudStore>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::ICloudStore>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::ICloudStoreCache>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::ICloudStoreCache>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::ICloudStoreData>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::ICloudStoreData>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::ICloudStoreFactory>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::ICloudStoreFactory>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::ICloudStoreSaveResult>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::ICloudStoreSaveResult>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::ICloudStoreSchema>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::ICloudStoreSchema>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::IDefaultLocalStorage>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::IDefaultLocalStorage>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::IRegistryDataWatcherInternal>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::IRegistryDataWatcherInternal>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::Metadata::ITypeServices>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::Metadata::ITypeServices>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::Model::CloudDataField>
		{
		protected:
			unsigned long InternalRelease();
		public:
			void Attach(Windows::Internal::Storage::Cloud::Model::CloudDataField *);
			~ComPtr<Windows::Internal::Storage::Cloud::Model::CloudDataField>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::Model::CloudDataType>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::Model::CloudDataType>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::Model::ICloudDataField>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::Model::ICloudDataField>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::Partitioning::DeviceExperienceMetadata>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::Partitioning::DeviceExperienceMetadata>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionInfo>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionInfo>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManager>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManager>();
		};

		class ComPtr<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionSet>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionSet>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::RegistryDataWatcher>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::RegistryDataWatcher>();
		};

		struct ComPtr<Windows::Internal::Storage::Cloud::RegistryStorage>
		{
			~ComPtr<Windows::Internal::Storage::Cloud::RegistryStorage>();
		};

		struct ComPtr<Windows::Storage::Streams::CBuffer<void (*)(void *),Windows::Storage::Streams::DefaultMarshaler> >
		{
			~ComPtr<Windows::Storage::Streams::CBuffer<void (*)(void *),Windows::Storage::Streams::DefaultMarshaler> >();
		};

		class ComPtr<Windows::Storage::Streams::IBuffer>
		{
		protected:
			unsigned long InternalRelease();
			void InternalAddRef();
		public:
			ComPtr<Windows::Storage::Streams::IBuffer> & operator=(Windows::Storage::Streams::IBuffer *);
			~ComPtr<Windows::Storage::Streams::IBuffer>();
		};

		class ComPtr<Windows::Storage::Streams::IBufferByteAccess>
		{
		protected:
			unsigned long InternalRelease();
		public:
			~ComPtr<Windows::Storage::Streams::IBufferByteAccess>();
		};

		struct DelegateTraits<-1>
		{
			static void EnsureStackSnapshot(long);
		};

		namespace Details
		{
			struct ComPtrRef<ComPtr<IUnknown> >
			{
				operator IUnknown * *();
			};

			struct ComPtrRef<ComPtr<Windows::Storage::Streams::IBuffer> >
			{
				operator Windows::Storage::Streams::IBuffer * *();
			};

			struct EventTargetArray
			{
				EventTargetArray();
				long RuntimeClassInitialize(unsigned __int64);
				void AddTail(IUnknown *,void *);
			};

			class ImplementsHelper<RuntimeClassFlags<19>,0,Windows::Storage::Streams::IBuffer,IWeakReferenceSource,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>
			{
			protected:
				long CanCastToHelper<0>(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<19>,1,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<IOverrideStorageTestHook>,CloakedIid<ICloudStoreTestHook>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<ITypeRegistry>,CloakedIid<ITypeServicesTestHook>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			class ImplementsHelper<RuntimeClassFlags<3>,1,CloakedIid<Windows::Internal::Storage::Cloud::ICloudStoreForSync>,CloakedIid<ICloudStoreMetadata>,CloakedIid<IOverrideTypeServicesTestHook>,CloakedIid<IOverrideStorageTestHook>,CloakedIid<ICloudStoreTestHook>,FtmBase>
			{
			protected:
				long CanCastTo(_GUID const &,void * *,bool *);
			};

			struct MakeAllocator<BufferOverBlob>
			{
				~MakeAllocator<BufferOverBlob>();
			};

			struct MakeAllocator<BufferOverStream>
			{
				~MakeAllocator<BufferOverStream>();
			};

			struct MakeAllocator<EnumStringOnStlContainer<std::unordered_set<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::hash<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::equal_to<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >
			{
				~MakeAllocator<EnumStringOnStlContainer<std::unordered_set<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::hash<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::equal_to<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >();
			};

			struct MakeAllocator<EventTargetArray>
			{
				~MakeAllocator<EventTargetArray>();
			};

			struct MakeAllocator<RefcountedSchema>
			{
				~MakeAllocator<RefcountedSchema>();
			};

			struct MakeAllocator<SchemaDefinedMigrationMonitor>
			{
				~MakeAllocator<SchemaDefinedMigrationMonitor>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::Broker::CloudStoreBroker>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::Broker::CloudStoreBroker>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::CloudStorage>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::CloudStorage>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::CloudStore>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::CloudStore>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::CloudStoreCache>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::CloudStoreCache>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::CloudStoreSchema>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::CloudStoreSchema>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::CloudStoreSettingHandlerFactory>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::CloudStoreSettingHandlerFactory>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::FileStorage>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::FileStorage>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::Model::CloudDataField>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::Model::CloudDataField>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::Model::CloudDataType>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::Model::CloudDataType>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet>();
			};

			struct MakeAllocator<Windows::Internal::Storage::Cloud::RegistryDataWatcher>
			{
				~MakeAllocator<Windows::Internal::Storage::Cloud::RegistryDataWatcher>();
			};

			class ModuleBase
			{
				static void * moduleLock_;
			protected:
				static unsigned long volatile objectCount_;
			public:
				static ModuleBase * module_;
				virtual CreatorMap const * * GetFirstEntryPointer();
				virtual CreatorMap const * * GetLastEntryPointer();
				virtual CreatorMap const * * GetMidEntryPointer();
				virtual _RTL_SRWLOCK * GetLock();
				virtual unsigned long GetObjectCount();
			};

			class RuntimeClassBaseT<13>
			{
			protected:
				static long AsIID<ActivationFactory<Implements<FtmBase,Windows::Internal::Storage::Cloud::Model::ICloudDataTypeFactory>,Nil,Nil,0> >(ActivationFactory<Implements<FtmBase,Windows::Internal::Storage::Cloud::Model::ICloudDataTypeFactory>,Nil,Nil,0> *,_GUID const &,void * *);
				static long AsIID<ActivationFactory<Implements<FtmBase,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManagerFactory>,Nil,Nil,0> >(ActivationFactory<Implements<FtmBase,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManagerFactory>,Nil,Nil,0> *,_GUID const &,void * *);
			};

			class RuntimeClassBaseT<1>
			{
			protected:
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Broker::ICloudStoreBroker,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Broker::ICloudStoreBroker,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreData,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreData,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreSaveResult,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreSaveResult,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Model::ICloudDataField,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Model::ICloudDataField,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Model::ICloudDataType,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Model::ICloudDataType,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::IActivePartitionChangedEventArgs,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::IActivePartitionChangedEventArgs,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionInfo,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionInfo,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionSet,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionSet,FtmBase> *,_GUID const &,void * *);
			};

			class RuntimeClassBaseT<2>
			{
			protected:
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingHandlerFactory,ISettingHandlerFactory3,IInitializeIdentity> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingHandlerFactory,ISettingHandlerFactory3,IInitializeIdentity> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingMonitor,IMigrationSettingMonitorTestHook,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingMonitor,IMigrationSettingMonitorTestHook,FtmBase> *,_GUID const &,void * *);
			};

			class RuntimeClassBaseT<3>
			{
			protected:
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IDataChangeWatcher,CloakedIid<Windows::Internal::Storage::Cloud::IRegistryDataWatcherInternal>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IDataChangeWatcher,CloakedIid<Windows::Internal::Storage::Cloud::IRegistryDataWatcherInternal>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStore,CloakedIid<ISchematizedCloudStore>,CloakedIid<Windows::Internal::Storage::Cloud::ICloudStoreForSync>,CloakedIid<ICloudStoreMetadata>,CloakedIid<IOverrideTypeServicesTestHook>,CloakedIid<IOverrideStorageTestHook>,CloakedIid<ICloudStoreTestHook>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStore,CloakedIid<ISchematizedCloudStore>,CloakedIid<Windows::Internal::Storage::Cloud::ICloudStoreForSync>,CloakedIid<ICloudStoreMetadata>,CloakedIid<IOverrideTypeServicesTestHook>,CloakedIid<IOverrideStorageTestHook>,CloakedIid<ICloudStoreTestHook>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreSchema,CloakedIid<ICloudStoreSchemaInternal>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreSchema,CloakedIid<ICloudStoreSchemaInternal>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Metadata::ITypeServices,CloakedIid<ITypeServicesInternal>,CloakedIid<ITypeRegistry>,CloakedIid<ITypeServicesTestHook>,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Metadata::ITypeServices,CloakedIid<ITypeServicesInternal>,CloakedIid<ITypeRegistry>,CloakedIid<ITypeServicesTestHook>,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManager,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManager,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::IPartitionMetadata,Windows::Internal::Storage::Cloud::Partitioning::IDeviceExperienceMetadata,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::IPartitionMetadata,Windows::Internal::Storage::Cloud::Partitioning::IDeviceExperienceMetadata,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::Streams::IBuffer,Windows::Storage::Streams::IBufferByteAccess,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::Streams::IBuffer,Windows::Storage::Streams::IBufferByteAccess,FtmBase> *,_GUID const &,void * *);
				static long AsIID<RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::Streams::IBuffer,Windows::Storage::Streams::IBufferByteAccess,IBufferOnStream,FtmBase> >(RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::Streams::IBuffer,Windows::Storage::Streams::IBufferByteAccess,IBufferOnStream,FtmBase> *,_GUID const &,void * *);
			};

			struct RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<19>,1,1,0,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<HSTRING__ *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IIterator<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<HSTRING__ *>,Windows::Foundation::Collections::IIterable<HSTRING__ *>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Foundation::Collections::IVectorView<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Broker::ICloudStoreBroker,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Broker::ICloudStoreBroker,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreData,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreData,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreSaveResult,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreSaveResult,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Model::ICloudDataField,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Model::ICloudDataField,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Model::ICloudDataType,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Model::ICloudDataType,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::IActivePartitionChangedEventArgs,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::IActivePartitionChangedEventArgs,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionInfo,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionInfo,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionSet,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<1>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionSet,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ICloudStoreSchemaProvider,FtmBase>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IEnumString,FtmBase>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IEnumString>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ILegacySettingMigrationMonitor,FtmBase>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IProfileNotify,FtmBase>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IRefcountedSchema,FtmBase>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingHandlerFactory,ISettingHandlerFactory3,IInitializeIdentity>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,ISettingMonitor,IMigrationSettingMonitorTestHook,FtmBase>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IUnknown>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,IWeakReference>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Internal::Security::Authentication::Web::GetDefaultSignInAccountResult *>,FtmBase>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<IInspectable *,IInspectable *> >
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *> >
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::IComPoolTask>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::Storage::Cloud::IBulkLocalStorage>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::Storage::Cloud::ICloudStorage>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::Storage::Cloud::ICloudStoreCache>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::Storage::Cloud::ICloudStoreDataDescriptor>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<2>,1,0,0,Windows::Internal::Storage::Cloud::IDefaultLocalStorage>
			{
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IDataChangeWatcher,CloakedIid<Windows::Internal::Storage::Cloud::IRegistryDataWatcherInternal>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,IDataChangeWatcher,CloakedIid<Windows::Internal::Storage::Cloud::IRegistryDataWatcherInternal>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStore,CloakedIid<ISchematizedCloudStore>,CloakedIid<Windows::Internal::Storage::Cloud::ICloudStoreForSync>,CloakedIid<ICloudStoreMetadata>,CloakedIid<IOverrideTypeServicesTestHook>,CloakedIid<IOverrideStorageTestHook>,CloakedIid<ICloudStoreTestHook>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStore,CloakedIid<ISchematizedCloudStore>,CloakedIid<Windows::Internal::Storage::Cloud::ICloudStoreForSync>,CloakedIid<ICloudStoreMetadata>,CloakedIid<IOverrideTypeServicesTestHook>,CloakedIid<IOverrideStorageTestHook>,CloakedIid<ICloudStoreTestHook>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreSchema,CloakedIid<ICloudStoreSchemaInternal>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::ICloudStoreSchema,CloakedIid<ICloudStoreSchemaInternal>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Metadata::ITypeServices,CloakedIid<ITypeServicesInternal>,CloakedIid<ITypeRegistry>,CloakedIid<ITypeServicesTestHook>,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Metadata::ITypeServices,CloakedIid<ITypeServicesInternal>,CloakedIid<ITypeRegistry>,CloakedIid<ITypeServicesTestHook>,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManager,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionManager,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::IPartitionMetadata,Windows::Internal::Storage::Cloud::Partitioning::IDeviceExperienceMetadata,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Internal::Storage::Cloud::Partitioning::IPartitionMetadata,Windows::Internal::Storage::Cloud::Partitioning::IDeviceExperienceMetadata,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::Streams::IBuffer,Windows::Storage::Streams::IBufferByteAccess,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::Streams::IBuffer,Windows::Storage::Streams::IBufferByteAccess,FtmBase>();
			};

			struct RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::Streams::IBuffer,Windows::Storage::Streams::IBufferByteAccess,IBufferOnStream,FtmBase>
			{
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetWeakReference(IWeakReference * *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
				virtual ~RuntimeClassImpl<RuntimeClassFlags<3>,1,1,0,Windows::Storage::Streams::IBuffer,Windows::Storage::Streams::IBufferByteAccess,IBufferOnStream,FtmBase>();
			};

			struct WeakReferenceImpl
			{
				WeakReferenceImpl(IUnknown *);
				virtual long Resolve(_GUID const &,IInspectable * *);
			};

			ComPtr<Windows::Internal::Storage::Cloud::CloudStorage> Make<Windows::Internal::Storage::Cloud::CloudStorage,EffectiveWebAccountContext const &,unsigned short const * &>(EffectiveWebAccountContext const &,unsigned short const * &);
			ComPtr<Windows::Internal::Storage::Cloud::CloudStore> Make<Windows::Internal::Storage::Cloud::CloudStore,EffectiveUserContext const &,EffectiveWebAccountContext const &,unsigned short const * &>(EffectiveUserContext const &,EffectiveWebAccountContext const &,unsigned short const * &);
			ComPtr<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionManager> Make<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionManager,Windows::Internal::Storage::Cloud::ICloudStore * &>(Windows::Internal::Storage::Cloud::ICloudStore * &);
			Details::WeakReferenceImpl * CreateWeakReference(IUnknown *);
			bool TerminateMap(Details::ModuleBase *,unsigned short const *,bool);
			long CreateActivationFactory<SimpleSealedActivationFactory<Windows::Internal::Storage::Cloud::Broker::CloudStoreBroker,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<Windows::Internal::Storage::Cloud::CloudStoreFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<Windows::Internal::Storage::Cloud::Model::CloudDataTypeFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateActivationFactory<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionManagerFactory>(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CloudCacheInitializer,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CloudCacheInitializerDesktop,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<CoreSchemaProvider,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<LegacySettingMonitor,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long CreateClassFactory<SimpleClassFactory<Windows::Internal::Storage::Cloud::CloudStoreSettingHandlerFactory,0> >(unsigned int *,Details::CreatorMap const *,_GUID const &,IUnknown * *);
			long GetActivationFactory<1>(Details::ModuleBase *,unsigned short const *,HSTRING__ *,IActivationFactory * *);
			long GetCacheEntry(Details::ModuleBase *,unsigned int *,_GUID const &,Details::CreatorMap const *,IUnknown * *);
			long GetClassObject<1>(Details::ModuleBase *,unsigned short const *,_GUID const &,_GUID const &,void * *);
			long MakeAndInitialize<BufferOverBlob,Windows::Storage::Streams::IBuffer,bond::blob const &>(Windows::Storage::Streams::IBuffer * *,bond::blob const &);
			long MakeAndInitialize<CSimpleEnumString,CSimpleEnumString,int &>(CSimpleEnumString * *,int &);
			long MakeAndInitialize<EventTargetArray,EventTargetArray,unsigned __int64 &>(Details::EventTargetArray * *,unsigned __int64 &);
			long MakeAndInitialize<Windows::Internal::Storage::Cloud::CloudStoreCache,Windows::Internal::Storage::Cloud::ICloudStoreCache,Windows::Internal::Storage::Cloud::IDefaultLocalStorage * &,Windows::Internal::Storage::Cloud::IBulkLocalStorage * &>(Windows::Internal::Storage::Cloud::ICloudStoreCache * *,Windows::Internal::Storage::Cloud::IDefaultLocalStorage * &,Windows::Internal::Storage::Cloud::IBulkLocalStorage * &);
			long MakeAndInitialize<Windows::Internal::Storage::Cloud::CloudStoreDataDescriptor,Windows::Internal::Storage::Cloud::ICloudStoreDataDescriptor,unsigned short const * &,unsigned short const * &,unsigned short const * &,unsigned short const * &,unsigned __int64 &,IStream * &>(Windows::Internal::Storage::Cloud::ICloudStoreDataDescriptor * *,unsigned short const * &,unsigned short const * &,unsigned short const * &,unsigned short const * &,unsigned __int64 &,IStream * &);
			long MakeAndInitialize<Windows::Internal::Storage::Cloud::CloudStoreSchema,Windows::Internal::Storage::Cloud::ICloudStoreSchema,unsigned short const * &,unsigned short const * &>(Windows::Internal::Storage::Cloud::ICloudStoreSchema * *,unsigned short const * &,unsigned short const * &);
			long MakeAndInitialize<Windows::Internal::Storage::Cloud::FileStorage,Windows::Internal::Storage::Cloud::IBulkLocalStorage,unsigned short const * &>(Windows::Internal::Storage::Cloud::IBulkLocalStorage * *,unsigned short const * &);
		};

		struct EventSource<Windows::Foundation::ITypedEventHandler<IInspectable *,IInspectable *>,InvokeModeOptions<-2> >
		{
			long Remove(EventRegistrationToken);
		};

		struct EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *>,InvokeModeOptions<-2> >
		{
			long InvokeAll<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs *>(Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs *);
			long Remove(EventRegistrationToken);
		};

		class EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet *,Windows::Internal::Storage::Cloud::Partitioning::ActivePartitionChangedEventArgs *>,InvokeModeOptions<-2> >
		{
			long AddInternal(Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet *,Windows::Internal::Storage::Cloud::Partitioning::ActivePartitionChangedEventArgs *> *,void *,EventRegistrationToken *);
		public:
			long Remove(EventRegistrationToken);
			unsigned __int64 GetSize();
			~EventSource<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet *,Windows::Internal::Storage::Cloud::Partitioning::ActivePartitionChangedEventArgs *>,InvokeModeOptions<-2> >();
		};

		class FtmBase
		{
		protected:
			long CanCastTo(_GUID const &,void * *);
		public:
			FtmBase();
			virtual long DisconnectObject(unsigned long);
			virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
			virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
			virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
			virtual long ReleaseMarshalData(IStream *);
			virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
		};

		class Module<1,Details::DefaultModule<1> >
		{
			static bool StaticInitialize();
			static bool isInitialized;
		public:
			static Details::DefaultModule<1> & Create();
			virtual long RegisterCOMObject(unsigned short const *,_GUID *,IClassFactory * *,unsigned long *,unsigned int);
			virtual long RegisterWinRTObject(unsigned short const *,unsigned short const * *,<unnamed-type-RO_REGISTRATION_COOKIE> * *,unsigned int);
			virtual long UnregisterCOMObject(unsigned short const *,unsigned long *,unsigned int);
			virtual long UnregisterWinRTObject(unsigned short const *,<unnamed-type-RO_REGISTRATION_COOKIE> *);
			virtual unsigned long DecrementObjectCount();
			virtual unsigned long IncrementObjectCount();
			virtual ~Module<1,Details::DefaultModule<1> >();
		};

		struct RuntimeClass<RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>
		{
			RuntimeClass<RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>();
			virtual ~RuntimeClass<RuntimeClassFlags<19>,Windows::Storage::Streams::IBuffer,CloakedIid<Windows::Storage::Streams::IBufferByteAccess>,CloakedIid<IMarshal>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Storage::Cloud::Model::ICloudDataField,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Storage::Cloud::Model::ICloudDataField,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Storage::Cloud::Model::ICloudDataType,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<1>,Windows::Internal::Storage::Cloud::Model::ICloudDataType,Windows::Internal::Storage::Cloud::Model::ICloudDataFieldContainer,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IEnumString,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IEnumString,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IEnumString>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IEnumString>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ILegacySettingMigrationMonitor,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,ILegacySettingMigrationMonitor,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IRefcountedSchema,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,IRefcountedSchema,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,ISettingHandlerFactory,ISettingHandlerFactory3,IInitializeIdentity>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,ISettingHandlerFactory,ISettingHandlerFactory3,IInitializeIdentity>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,IUnknown>
		{
			RuntimeClass<RuntimeClassFlags<2>,IUnknown>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *> >
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *> >();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::IComPoolTask>
		{
			RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::IComPoolTask>();
		};

		struct RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::Storage::Cloud::ICloudStorage>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<2>,Windows::Internal::Storage::Cloud::ICloudStorage>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Storage::Cloud::ICloudStore,CloakedIid<ISchematizedCloudStore>,CloakedIid<Windows::Internal::Storage::Cloud::ICloudStoreForSync>,CloakedIid<ICloudStoreMetadata>,CloakedIid<IOverrideTypeServicesTestHook>,CloakedIid<IOverrideStorageTestHook>,CloakedIid<ICloudStoreTestHook>,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,Windows::Internal::Storage::Cloud::ICloudStore,CloakedIid<ISchematizedCloudStore>,CloakedIid<Windows::Internal::Storage::Cloud::ICloudStoreForSync>,CloakedIid<ICloudStoreMetadata>,CloakedIid<IOverrideTypeServicesTestHook>,CloakedIid<IOverrideStorageTestHook>,CloakedIid<ICloudStoreTestHook>,FtmBase>();
		};

		struct RuntimeClass<RuntimeClassFlags<3>,Windows::Storage::Streams::IBuffer,Windows::Storage::Streams::IBufferByteAccess,FtmBase>
		{
			virtual ~RuntimeClass<RuntimeClassFlags<3>,Windows::Storage::Streams::IBuffer,Windows::Storage::Streams::IBufferByteAccess,FtmBase>();
		};

		struct RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >
		{
			virtual ~RuntimeClass<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *>,Windows::Foundation::Collections::IIterable<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >();
		};

		struct RuntimeClass<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionSet,FtmBase>
		{
			virtual ~RuntimeClass<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionSet,FtmBase>();
		};

		struct SimpleActivationFactory<Windows::Internal::Storage::Cloud::Broker::CloudStoreBroker,0>
		{
			virtual long ActivateInstance(IInspectable * *);
		};

		struct SimpleClassFactory<CloudCacheInitializer,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CloudCacheInitializerDesktop,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<CoreSchemaProvider,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<LegacySettingMonitor,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct SimpleClassFactory<Windows::Internal::Storage::Cloud::CloudStoreSettingHandlerFactory,0>
		{
			virtual long CreateInstance(IUnknown *,_GUID const &,void * *);
		};

		struct WeakRef
		{
			~WeakRef();
		};

		namespace Wrappers
		{
			namespace Details
			{
				struct SyncLockExclusive
				{
					~SyncLockExclusive();
				};

			};

			struct HString
			{
				HSTRING__ * * GetAddressOf();
				long Set(unsigned short const *,unsigned int);
				long Set<unsigned short const *>(unsigned short const * const &,Details::Dummy);
				~HString();
			};

			class HStringReference
			{
				static unsigned int AddOne(unsigned int);
				void CreateReference(unsigned short const *,unsigned int,unsigned int);
			public:
				HStringReference<unsigned short *>(unsigned short * const &,Details::Dummy);
				HStringReference<unsigned short const *>(unsigned short const * const &,Details::Dummy);
				~HStringReference();
			};

			struct RoInitializeWrapper
			{
				~RoInitializeWrapper();
			};

		};

	};

};

class MigrationCallbackBase
{
	StructureWalkCallback * GetCurrentCallback();
	std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > CreateCallback(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
	void PushContext(bond::Metadata const &);
public:
	MigrationCallbackBase(StructureWalkCallback *);
	virtual void EnterField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	virtual void EnterList(bond::RuntimeSchema const &,unsigned __int64);
	virtual void EnterMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64);
	virtual void EnterSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	virtual void EnterStructure(bond::RuntimeSchema const &,bool);
	virtual void LeaveField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	virtual void LeaveList(bond::RuntimeSchema const &,unsigned __int64);
	virtual void LeaveMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64);
	virtual void LeaveSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	virtual void LeaveStructure(bond::RuntimeSchema const &,bool);
	virtual void ScalarFound(tagPROPVARIANT const &);
};

struct ParsedCspPath
{
	~ParsedCspPath();
};

class PartitionMetadataHelper
{
	PartitionMetadataFactory & GetPartitionMetadataFactory(Windows::Internal::Storage::Cloud::PartitionKind);
public:
	BestMatchResult GetBestMatch(Windows::Internal::Storage::Cloud::PartitionKind,Windows::Data::Platform::Partitioning::PartitionSet &);
	bond::bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::ProtocolReader<bond::InputBuffer> > CreateDefault(Windows::Internal::Storage::Cloud::PartitionKind);
	wil::com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::IPartitionMetadata,wil::err_exception_policy> CreateInterface(Windows::Internal::Storage::Cloud::PartitionKind,bond::bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::ProtocolReader<bond::InputBuffer> > const &);
};

class ProcessNameCache
{
	ProcessNameCache();
};

class RefcountedSchema
{
	static bond::RuntimeSchema UnmarshalSchema(Windows::Storage::Streams::IBuffer *);
public:
	virtual bond::RuntimeSchema const & get_Schema();
};

struct RuntimeSchemaProvider
{
	virtual long GetAt(unsigned __int64,unsigned char * *,unsigned long *);
	virtual long GetForType(unsigned short const *,unsigned char * *,unsigned long *);
	virtual long GetTypeAt(unsigned __int64,unsigned short * *);
	virtual long get_Count(unsigned __int64 *);
};

class SchemaCache
{
	long EnsureRuntimeSchemaWatcher();
	static wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> CreateRefCountedSchemaFromTypeAndProvider(unsigned short const *,ICloudStoreSchemaProvider *);
	void AddTypesFromProvider(ICloudStoreSchemaProvider *);
	void AddTypesFromSchemaProviderExtensions(HKEY__ *);
	void EnsureTypesLoaded();
	void Reset();
	wil::com_ptr_t<ICloudStoreSchemaProvider,wil::err_exception_policy> GetSchemaProviderForType(unsigned short const *);
	wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> LoadSchemaForType(unsigned short const *,ICloudStoreSchemaProvider *);
public:
	SchemaCache(EffectiveUserContext const &,unsigned short const *);
	std::shared_ptr<std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > const > const & EnsureQualifiedTypeNames();
	wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> const GetSchemaForType(unsigned short const *);
	wil::com_ptr_t<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,wil::err_exception_policy> FindMatchingTypeNames(FindMatchingTypeOptions);
	~SchemaCache();
};

struct SchemaCacheFactory
{
	std::shared_ptr<SchemaCache> LookupSchemaCache(EffectiveUserContext const &,unsigned short const *);
	~SchemaCacheFactory();
};

class SchemaDefinedMigrationMonitor
{
	long StartInternal();
	long StopInternal();
	void EnsureTypeWatchers();
public:
	SchemaDefinedMigrationMonitor();
	virtual long Start();
	virtual long Stop();
};

class SchemaWalkableTransform
{
	Windows::Internal::Storage::Cloud::Model::CloudDataField * TopItem();
	bool IsMapFieldsContainer();
	void PopLevel();
	void PushItem(Windows::Internal::Storage::Cloud::Model::CloudDataField *);
	void PushLevel(Windows::Internal::Storage::Cloud::Model::CloudDataField *);
public:
	SchemaWalkableTransform(Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> *);
	virtual void EnterField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	virtual void EnterList(bond::RuntimeSchema const &,unsigned __int64);
	virtual void EnterMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64);
	virtual void EnterSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	virtual void EnterStructure(bond::RuntimeSchema const &,bool);
	virtual void LeaveField(bond::Metadata const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short);
	virtual void LeaveList(bond::RuntimeSchema const &,unsigned __int64);
	virtual void LeaveMap(bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &,unsigned __int64);
	virtual void LeaveSet(bond::_bond_enumerators::BondDataType::BondDataType,unsigned __int64);
	virtual void LeaveStructure(bond::RuntimeSchema const &,bool);
	virtual void ScalarFound(tagPROPVARIANT const &);
	~SchemaWalkableTransform();
};

class SessionOwnerCache
{
	SessionOwnerCache();
public:
	~SessionOwnerCache();
};

struct SetWriter
{
	SetWriter();
	~SetWriter();
};

struct SharedWatcherImplBase<CloudDataWatcherImpl,versioned<schematized_data> >
{
	virtual ~SharedWatcherImplBase<CloudDataWatcherImpl,versioned<schematized_data> >();
	void StopWatching();
};

struct SharedWatcherImplBase<ImportedTypeWatcherImpl,schematized_data>
{
	virtual ~SharedWatcherImplBase<ImportedTypeWatcherImpl,schematized_data>();
	void StopWatching();
};

struct StructWriter
{
	StructWriter();
	virtual void Begin(bond::RuntimeSchema const *);
	virtual void End();
	virtual void SetUnknownEnd();
	~StructWriter();
};

class ToWalkable
{
	bond::RuntimeSchema GetFieldElementDataTypeId(unsigned short);
	bond::RuntimeSchema GetFieldRuntimeSchemaById(unsigned short);
	bond::_bond_enumerators::BondDataType::BondDataType GetFieldKeyDataTypeId(unsigned short);
	static bond::RuntimeSchema GetElementType<bond::CompactBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	static bond::RuntimeSchema GetElementType<bond::JSONReader<bond::InputBuffer> &>(bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &);
	static bond::RuntimeSchema GetElementType<bond::MafiaBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	static bond::RuntimeSchema GetElementType<bond::SimpleProtocolReader<bond::InputBuffer> &>(bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	static bond::_bond_enumerators::BondDataType::BondDataType GetBondDataTypeFromComplexCollection<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > >(std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > const &);
	static bond::_bond_enumerators::BondDataType::BondDataType GetBondDataTypeFromComplexCollection<std::vector<walkable::complex,std::allocator<walkable::complex> > >(std::vector<walkable::complex,std::allocator<walkable::complex> > const &);
	static bond::_bond_enumerators::BondDataType::BondDataType GetKeyType<bond::CompactBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	static bond::_bond_enumerators::BondDataType::BondDataType GetKeyType<bond::JSONReader<bond::InputBuffer> &>(bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &);
	static bond::_bond_enumerators::BondDataType::BondDataType GetKeyType<bond::MafiaBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	static bond::_bond_enumerators::BondDataType::BondDataType GetKeyType<bond::SimpleProtocolReader<bond::InputBuffer> &>(bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	static std::pair<bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema> GetBondDataTypesFromMap<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >(std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > const &);
	static std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > UnmarshalValueWithWriter<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > >,MapWriter,bond::CompactBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bool);
	static std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > UnmarshalValueWithWriter<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > >,MapWriter,bond::JSONReader<bond::InputBuffer> &>(bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bool);
	static std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > UnmarshalValueWithWriter<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > >,MapWriter,bond::MafiaBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bool);
	static std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > UnmarshalValueWithWriter<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > >,MapWriter,bond::SimpleProtocolReader<bond::InputBuffer> &>(bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bool);
	static std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > UnmarshalValueWithWriter<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> >,SetWriter,bond::CompactBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bool);
	static std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > UnmarshalValueWithWriter<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> >,SetWriter,bond::JSONReader<bond::InputBuffer> &>(bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bool);
	static std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > UnmarshalValueWithWriter<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> >,SetWriter,bond::MafiaBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bool);
	static std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > UnmarshalValueWithWriter<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> >,SetWriter,bond::SimpleProtocolReader<bond::InputBuffer> &>(bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bool);
	static std::vector<walkable::complex,std::allocator<walkable::complex> > UnmarshalValueWithWriter<std::vector<walkable::complex,std::allocator<walkable::complex> >,ListWriter,bond::CompactBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bool);
	static std::vector<walkable::complex,std::allocator<walkable::complex> > UnmarshalValueWithWriter<std::vector<walkable::complex,std::allocator<walkable::complex> >,ListWriter,bond::JSONReader<bond::InputBuffer> &>(bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bool);
	static std::vector<walkable::complex,std::allocator<walkable::complex> > UnmarshalValueWithWriter<std::vector<walkable::complex,std::allocator<walkable::complex> >,ListWriter,bond::MafiaBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bool);
	static std::vector<walkable::complex,std::allocator<walkable::complex> > UnmarshalValueWithWriter<std::vector<walkable::complex,std::allocator<walkable::complex> >,ListWriter,bond::SimpleProtocolReader<bond::InputBuffer> &>(bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bool);
	static walkable::complex UnmarshalValue<bond::CompactBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bool);
	static walkable::complex UnmarshalValue<bond::JSONReader<bond::InputBuffer> &>(bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bool);
	static walkable::complex UnmarshalValue<bond::MafiaBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bool);
	static walkable::complex UnmarshalValue<bond::SimpleProtocolReader<bond::InputBuffer> &>(bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bool);
	static walkable::structure UnmarshalBondedValue<bond::CompactBinaryReader<bond::InputBuffer> &,void>(bond::RuntimeSchema const *,bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> const &);
	static walkable::structure UnmarshalBondedValue<bond::JSONReader<bond::InputBuffer> &,void>(bond::RuntimeSchema const *,bond::bonded<void,bond::JSONReader<bond::InputBuffer> &> const &);
	static walkable::structure UnmarshalBondedValue<bond::MafiaBinaryReader<bond::InputBuffer> &,void>(bond::RuntimeSchema const *,bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> const &);
	static walkable::structure UnmarshalBondedValue<bond::SimpleProtocolReader<bond::InputBuffer> &,void>(bond::RuntimeSchema const *,bond::bonded<void,bond::SimpleProtocolReader<bond::InputBuffer> &> const &);
	static walkable::structure UnmarshalValueWithWriter<walkable::structure,StructWriter,bond::CompactBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bool);
	static walkable::structure UnmarshalValueWithWriter<walkable::structure,StructWriter,bond::JSONReader<bond::InputBuffer> &>(bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bool);
	static walkable::structure UnmarshalValueWithWriter<walkable::structure,StructWriter,bond::MafiaBinaryReader<bond::InputBuffer> &>(bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bool);
	static walkable::structure UnmarshalValueWithWriter<walkable::structure,StructWriter,bond::SimpleProtocolReader<bond::InputBuffer> &>(bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bool);
public:
	bool Base<bond::CompactBinaryReader<bond::InputBuffer> &,void>(bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> const &);
	bool Base<bond::JSONReader<bond::InputBuffer> &,void>(bond::bonded<void,bond::JSONReader<bond::InputBuffer> &> const &);
	bool Base<bond::MafiaBinaryReader<bond::InputBuffer> &,void>(bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> const &);
	bool Base<bond::SimpleProtocolReader<bond::InputBuffer> &,void>(bond::bonded<void,bond::SimpleProtocolReader<bond::InputBuffer> &> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,__int64>(unsigned short,bond::Metadata const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,bool>(unsigned short,bond::Metadata const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,double>(unsigned short,bond::Metadata const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,float>(unsigned short,bond::Metadata const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,int>(unsigned short,bond::Metadata const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,short>(unsigned short,bond::Metadata const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,signed char>(unsigned short,bond::Metadata const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,bond::Metadata const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short,bond::Metadata const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64>(unsigned short,bond::Metadata const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char>(unsigned short,bond::Metadata const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int>(unsigned short,bond::Metadata const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short>(unsigned short,bond::Metadata const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &,void>(unsigned short,bond::Metadata const &,bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> const &);
	bool Field<bond::CompactBinaryReader<bond::InputBuffer> &>(unsigned short,bond::Metadata const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,__int64>(unsigned short,bond::Metadata const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,bool>(unsigned short,bond::Metadata const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,double>(unsigned short,bond::Metadata const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,float>(unsigned short,bond::Metadata const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,int>(unsigned short,bond::Metadata const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,short>(unsigned short,bond::Metadata const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,signed char>(unsigned short,bond::Metadata const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,bond::Metadata const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short,bond::Metadata const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,unsigned __int64>(unsigned short,bond::Metadata const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,unsigned char>(unsigned short,bond::Metadata const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,unsigned int>(unsigned short,bond::Metadata const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,unsigned short>(unsigned short,bond::Metadata const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &,void>(unsigned short,bond::Metadata const &,bond::bonded<void,bond::JSONReader<bond::InputBuffer> &> const &);
	bool Field<bond::JSONReader<bond::InputBuffer> &>(unsigned short,bond::Metadata const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64>(unsigned short,bond::Metadata const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,bool>(unsigned short,bond::Metadata const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,double>(unsigned short,bond::Metadata const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,float>(unsigned short,bond::Metadata const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,int>(unsigned short,bond::Metadata const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,short>(unsigned short,bond::Metadata const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char>(unsigned short,bond::Metadata const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,bond::Metadata const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short,bond::Metadata const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64>(unsigned short,bond::Metadata const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char>(unsigned short,bond::Metadata const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int>(unsigned short,bond::Metadata const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short>(unsigned short,bond::Metadata const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &,void>(unsigned short,bond::Metadata const &,bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> const &);
	bool Field<bond::MafiaBinaryReader<bond::InputBuffer> &>(unsigned short,bond::Metadata const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64>(unsigned short,bond::Metadata const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,bool>(unsigned short,bond::Metadata const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,double>(unsigned short,bond::Metadata const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,float>(unsigned short,bond::Metadata const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,int>(unsigned short,bond::Metadata const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,short>(unsigned short,bond::Metadata const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char>(unsigned short,bond::Metadata const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,bond::Metadata const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short,bond::Metadata const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64>(unsigned short,bond::Metadata const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char>(unsigned short,bond::Metadata const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int>(unsigned short,bond::Metadata const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short>(unsigned short,bond::Metadata const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &,void>(unsigned short,bond::Metadata const &,bond::bonded<void,bond::SimpleProtocolReader<bond::InputBuffer> &> const &);
	bool Field<bond::SimpleProtocolReader<bond::InputBuffer> &>(unsigned short,bond::Metadata const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	bool OmittedField(unsigned short,bond::Metadata const &,bond::_bond_enumerators::BondDataType::BondDataType);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,__int64>(unsigned short,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,bool>(unsigned short,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,double>(unsigned short,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,float>(unsigned short,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,int>(unsigned short,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,short>(unsigned short,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,signed char>(unsigned short,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64>(unsigned short,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char>(unsigned short,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int>(unsigned short,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short>(unsigned short,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &,void>(unsigned short,bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> const &);
	bool UnknownField<bond::CompactBinaryReader<bond::InputBuffer> &>(unsigned short,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,__int64>(unsigned short,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,bool>(unsigned short,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,double>(unsigned short,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,float>(unsigned short,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,int>(unsigned short,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,short>(unsigned short,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,signed char>(unsigned short,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,unsigned __int64>(unsigned short,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,unsigned char>(unsigned short,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,unsigned int>(unsigned short,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,unsigned short>(unsigned short,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &,void>(unsigned short,bond::bonded<void,bond::JSONReader<bond::InputBuffer> &> const &);
	bool UnknownField<bond::JSONReader<bond::InputBuffer> &>(unsigned short,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64>(unsigned short,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,bool>(unsigned short,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,double>(unsigned short,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,float>(unsigned short,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,int>(unsigned short,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,short>(unsigned short,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char>(unsigned short,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64>(unsigned short,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char>(unsigned short,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int>(unsigned short,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short>(unsigned short,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &,void>(unsigned short,bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> const &);
	bool UnknownField<bond::MafiaBinaryReader<bond::InputBuffer> &>(unsigned short,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,__int64>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,bool>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,double>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,float>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,int>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,short>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,signed char>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,unsigned __int64>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,unsigned char>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,unsigned int>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64,unsigned short>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,__int64>(bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,__int64>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,bool>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,double>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,float>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,int>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,short>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,signed char>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,unsigned __int64>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,unsigned char>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,unsigned int>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool,unsigned short>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,bool>(bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,__int64>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,bool>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,double>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,float>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,int>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,short>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,signed char>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,unsigned __int64>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,unsigned char>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,unsigned int>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double,unsigned short>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,double>(bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,__int64>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,bool>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,double>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,float>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,int>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,short>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,signed char>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,unsigned __int64>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,unsigned char>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,unsigned int>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float,unsigned short>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,float>(bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,__int64>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,bool>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,double>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,float>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,int>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,short>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,signed char>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,unsigned __int64>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,unsigned char>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,unsigned int>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int,unsigned short>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,int>(bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,__int64>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,bool>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,double>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,float>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,int>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,short>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,signed char>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,unsigned __int64>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,unsigned char>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,unsigned int>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short,unsigned short>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,short>(bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,__int64>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,bool>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,double>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,float>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,int>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,short>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,signed char>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,unsigned __int64>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,unsigned char>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,unsigned int>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char,unsigned short>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,signed char>(bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,__int64>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,double>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,short>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,signed char>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned __int64>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned char>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,__int64>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bool>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,double>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,float>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,int>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,short>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,signed char>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned __int64>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned char>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned int>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned short>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,__int64>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,bool>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,double>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,float>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,int>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,short>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,signed char>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,unsigned __int64>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,unsigned char>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,unsigned int>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64,unsigned short>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned __int64>(bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,__int64>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,bool>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,double>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,float>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,int>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,short>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,signed char>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,unsigned __int64>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,unsigned char>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,unsigned int>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char,unsigned short>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned char>(bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,__int64>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,bool>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,double>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,float>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,int>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,short>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,signed char>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,unsigned __int64>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,unsigned char>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,unsigned int>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int,unsigned short>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned int>(bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,__int64>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,bool>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,double>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,float>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,int>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,short>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,signed char>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,unsigned __int64>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,unsigned char>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,unsigned int>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short,unsigned short>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::CompactBinaryReader<bond::InputBuffer> &,unsigned short>(bond::value<unsigned short,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,__int64>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,bool>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,double>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,float>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,int>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,short>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,signed char>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,unsigned __int64>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,unsigned char>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,unsigned int>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64,unsigned short>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,__int64>(bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,__int64>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,bool>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,double>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,float>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,int>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,short>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,signed char>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,unsigned __int64>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,unsigned char>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,unsigned int>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool,unsigned short>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,bool>(bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,__int64>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,bool>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,double>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,float>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,int>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,short>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,signed char>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,unsigned __int64>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,unsigned char>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,unsigned int>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double,unsigned short>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,double>(bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,__int64>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,bool>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,double>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,float>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,int>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,short>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,signed char>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,unsigned __int64>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,unsigned char>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,unsigned int>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float,unsigned short>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,float>(bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,__int64>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,bool>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,double>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,float>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,int>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,short>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,signed char>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,unsigned __int64>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,unsigned char>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,unsigned int>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int,unsigned short>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,int>(bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,__int64>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,bool>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,double>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,float>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,int>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,short>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,signed char>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,unsigned __int64>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,unsigned char>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,unsigned int>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short,unsigned short>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,short>(bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,__int64>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,bool>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,double>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,float>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,int>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,short>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,signed char>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,unsigned __int64>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,unsigned char>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,unsigned int>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char,unsigned short>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,signed char>(bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,__int64>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,double>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,short>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,signed char>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned __int64>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned char>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,__int64>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bool>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,double>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,float>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,int>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,short>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,signed char>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned __int64>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned char>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned int>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned short>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,__int64>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,bool>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,double>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,float>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,int>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,short>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,signed char>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,unsigned __int64>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,unsigned char>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,unsigned int>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64,unsigned short>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned __int64>(bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,__int64>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,bool>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,double>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,float>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,int>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,short>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,signed char>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,unsigned __int64>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,unsigned char>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,unsigned int>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char,unsigned short>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned char>(bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,__int64>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,bool>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,double>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,float>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,int>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,short>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,signed char>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,unsigned __int64>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,unsigned char>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,unsigned int>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int,unsigned short>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned int>(bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,__int64>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,bool>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,double>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,float>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,int>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,short>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,signed char>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,unsigned __int64>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,unsigned char>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,unsigned int>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short,unsigned short>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::JSONReader<bond::InputBuffer> &,unsigned short>(bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,__int64>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,bool>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,double>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,float>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,int>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,short>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,signed char>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,unsigned __int64>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,unsigned char>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,unsigned int>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64,unsigned short>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,__int64>(bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,__int64>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,bool>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,double>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,float>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,int>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,short>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,signed char>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,unsigned __int64>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,unsigned char>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,unsigned int>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool,unsigned short>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,bool>(bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,__int64>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,bool>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,double>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,float>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,int>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,short>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,signed char>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,unsigned __int64>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,unsigned char>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,unsigned int>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double,unsigned short>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,double>(bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,__int64>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,bool>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,double>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,float>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,int>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,short>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,signed char>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,unsigned __int64>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,unsigned char>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,unsigned int>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float,unsigned short>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,float>(bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,__int64>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,bool>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,double>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,float>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,int>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,short>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,signed char>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,unsigned __int64>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,unsigned char>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,unsigned int>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int,unsigned short>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,int>(bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,__int64>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,bool>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,double>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,float>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,int>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,short>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,signed char>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,unsigned __int64>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,unsigned char>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,unsigned int>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short,unsigned short>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,short>(bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,__int64>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,bool>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,double>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,float>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,int>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,short>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,signed char>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,unsigned __int64>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,unsigned char>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,unsigned int>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char,unsigned short>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,signed char>(bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,__int64>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,double>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,short>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,signed char>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned __int64>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned char>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,__int64>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bool>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,double>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,float>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,int>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,short>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,signed char>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned __int64>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned char>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned int>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned short>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,__int64>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,bool>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,double>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,float>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,int>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,short>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,signed char>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,unsigned __int64>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,unsigned char>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,unsigned int>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64,unsigned short>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned __int64>(bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,__int64>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,bool>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,double>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,float>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,int>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,short>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,signed char>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,unsigned __int64>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,unsigned char>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,unsigned int>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char,unsigned short>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned char>(bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,__int64>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,bool>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,double>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,float>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,int>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,short>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,signed char>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,unsigned __int64>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,unsigned char>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,unsigned int>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int,unsigned short>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned int>(bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,__int64>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,bool>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,double>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,float>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,int>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,short>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,signed char>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,unsigned __int64>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,unsigned char>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,unsigned int>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short,unsigned short>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::MafiaBinaryReader<bond::InputBuffer> &,unsigned short>(bond::value<unsigned short,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,__int64>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,bool>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,double>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,float>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,int>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,short>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,signed char>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,unsigned __int64>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,unsigned char>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,unsigned int>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64,unsigned short>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,__int64>(bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,__int64>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,bool>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,double>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,float>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,int>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,short>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,signed char>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,unsigned __int64>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,unsigned char>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,unsigned int>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool,unsigned short>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,bool>(bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,__int64>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,bool>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,double>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,float>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,int>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,short>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,signed char>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,unsigned __int64>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,unsigned char>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,unsigned int>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double,unsigned short>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,double>(bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,__int64>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,bool>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,double>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,float>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,int>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,short>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,signed char>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,unsigned __int64>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,unsigned char>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,unsigned int>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float,unsigned short>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,float>(bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,__int64>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,bool>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,double>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,float>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,int>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,short>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,signed char>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,unsigned __int64>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,unsigned char>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,unsigned int>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int,unsigned short>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,int>(bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,__int64>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,bool>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,double>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,float>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,int>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,short>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,signed char>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,unsigned __int64>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,unsigned char>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,unsigned int>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short,unsigned short>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,short>(bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,__int64>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,bool>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,double>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,float>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,int>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,short>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,signed char>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,unsigned __int64>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,unsigned char>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,unsigned int>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char,unsigned short>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,signed char>(bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,__int64>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,double>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,float>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,short>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,signed char>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned __int64>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned char>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short>(bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,__int64>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bool>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,double>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,float>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,int>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,short>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,signed char>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned __int64>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned char>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned int>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,unsigned short>(bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,__int64>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,bool>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,double>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,float>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,int>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,short>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,signed char>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,unsigned __int64>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,unsigned char>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,unsigned int>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64,unsigned short>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned __int64>(bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,__int64>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,bool>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,double>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,float>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,int>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,short>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,signed char>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,unsigned __int64>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,unsigned char>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,unsigned int>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char,unsigned short>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned char>(bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,__int64>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,bool>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,double>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,float>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,int>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,short>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,signed char>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,unsigned __int64>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,unsigned char>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,unsigned int>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int,unsigned short>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned int>(bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,__int64>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,bool>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,double>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,float>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,int>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,short>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,signed char>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,unsigned __int64>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,unsigned char>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,unsigned int>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short,unsigned short>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void Container<bond::SimpleProtocolReader<bond::InputBuffer> &,unsigned short>(bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void UnknownEnd();
};

class TypeWatcher
{
	void OnCloudStoreChanged();
	void OnLegacyStoreChanged();
	void SaveStructure(versioned<schematized_data> &,schematized_data &);
public:
	TypeWatcher(bond::RuntimeSchema const &,unsigned short const *,MigrationDirection,ensure_com_ptr<Windows::Internal::Storage::Cloud::ICloudStore,EnsureCloudStore<Windows::Internal::Storage::Cloud::ICloudStore> >);
	void StartWatching();
	void StopWatching();
	~TypeWatcher();
};

class UniqueWatcherBase<CloudDataWatcherImpl,versioned<schematized_data> >
{
protected:
	virtual ~UniqueWatcherBase<CloudDataWatcherImpl,versioned<schematized_data> >();
public:
	versioned<schematized_data> GetCurrent();
	void Reset();
};

class UniqueWatcherBase<ImportedTypeWatcherImpl,schematized_data>
{
protected:
	virtual ~UniqueWatcherBase<ImportedTypeWatcherImpl,schematized_data>();
public:
	schematized_data GetCurrent();
	void Reset();
};

class UpdateManager<Windows::Data::Platform::Partitioning::ActivePartitions>
{
	std::unique_ptr<versioned<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> >,std::default_delete<versioned<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> > > > LoadInternal(Windows::Internal::Storage::Cloud::LoadOptions);
	unsigned short const * GetTypeName();
	void Sync(unsigned __int64,Windows::Internal::Storage::Cloud::LoadOptions,Windows::Internal::Storage::Cloud::SaveOptions);
public:
	Windows::Data::Platform::Partitioning::ActivePartitions const & LoadData(Windows::Internal::Storage::Cloud::LoadOptions);
	~UpdateManager<Windows::Data::Platform::Partitioning::ActivePartitions>();
};

class UpdateManager<Windows::Data::Platform::Partitioning::SystemPartitionIndex>
{
	std::unique_ptr<versioned<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,std::default_delete<versioned<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > > > LoadInternal(Windows::Internal::Storage::Cloud::LoadOptions);
	unsigned short const * GetTypeName();
	void Sync(unsigned __int64,Windows::Internal::Storage::Cloud::LoadOptions,Windows::Internal::Storage::Cloud::SaveOptions);
public:
	UpdateManager<Windows::Data::Platform::Partitioning::SystemPartitionIndex>(Windows::Internal::Storage::Cloud::ICloudStore *);
	Windows::Data::Platform::Partitioning::SystemPartitionIndex const & LoadData(Windows::Internal::Storage::Cloud::LoadOptions);
	~UpdateManager<Windows::Data::Platform::Partitioning::SystemPartitionIndex>();
};

namespace UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions>
{
	class UpdateWatcherHelper
	{
		void OnDataChanged(Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs *);
	public:
		void Start();
		~UpdateWatcherHelper();
	};

};

namespace UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex>
{
	class UpdateWatcherHelper
	{
		void OnDataChanged(Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs *);
	public:
		void Start();
		~UpdateWatcherHelper();
	};

};

struct WalkableFormatWriter
{
	virtual void Begin(bond::RuntimeSchema const *);
	virtual void End();
	virtual void SetUnknownEnd();
};

namespace Windows
{
	namespace Data
	{
		namespace Accessibility
		{
			namespace Accessibility
			{
				class Schema
				{
					static bond::Metadata const s_caption_metadata;
					static bond::Metadata const s_keyboard_metadata;
					static bond::Metadata const s_mouse_metadata;
					static bond::Metadata const s_narrator_metadata;
					static bond::Metadata const s_options_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace AccessibilityOptions
			{
				class Schema
				{
					static bond::Metadata const s_animationsEnabled_metadata;
					static bond::Metadata const s_announceCallerIdEnabled_metadata;
					static bond::Metadata const s_modeTTY_metadata;
					static bond::Metadata const s_notificationDurationSeconds_metadata;
					static bond::Metadata const s_overlappedContentEnabled_metadata;
					static bond::Metadata const s_telecoilEnabled_metadata;
					static bond::Metadata const s_textSizePercent_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace Caption
			{
				class Schema
				{
					static bond::Metadata const s_backgroundColor_metadata;
					static bond::Metadata const s_backgroundTransparencyFactor_metadata;
					static bond::Metadata const s_color_metadata;
					static bond::Metadata const s_edgeEffects_metadata;
					static bond::Metadata const s_style_metadata;
					static bond::Metadata const s_transparencyFactor_metadata;
					static bond::Metadata const s_windowColor_metadata;
					static bond::Metadata const s_windowTransparencyFactor_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace Experience
			{
				namespace Accessibility
				{
					class Schema
					{
						static bond::Metadata const s_caption_metadata;
						static bond::Metadata const s_magnifier_metadata;
						static bond::Metadata const s_options_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

				};

				namespace AccessibilityOptions
				{
					class Schema
					{
						static bond::Metadata const s_cursorThickness_metadata;
						static bond::Metadata const s_soundSentry_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

				};

				namespace Caption
				{
					class Schema
					{
						static bond::Metadata const s_sizeFactor_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

				};

				namespace Magnifier
				{
					class Schema
					{
						static bond::Metadata const s_autoStartEnabled_metadata;
						static bond::Metadata const s_followInsertPointEnabled_metadata;
						static bond::Metadata const s_followKeyFocusEnabled_metadata;
						static bond::Metadata const s_followMouseCursorEnabled_metadata;
						static bond::Metadata const s_inversionColorEnabled_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

				};

				namespace SoundSentry
				{
					class Schema
					{
						static bond::Metadata const s_featureProperty_metadata;
						static bond::Metadata const s_graphicalEffectColor_metadata;
						static bond::Metadata const s_graphicalEffectInMilliseconds_metadata;
						static bond::Metadata const s_graphicalEffect_metadata;
						static bond::Metadata const s_textEffectColor_metadata;
						static bond::Metadata const s_textEffectInMilliseconds_metadata;
						static bond::Metadata const s_textEffect_metadata;
						static bond::Metadata const s_windowsEffectInMilliseconds_metadata;
						static bond::Metadata const s_windowsEffect_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

				};

				namespace _bond_enumerators
				{
					namespace SoundSentryProperty
					{
						std::map<SoundSentryProperty::SoundSentryProperty,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<SoundSentryProperty::SoundSentryProperty>,std::allocator<std::pair<SoundSentryProperty::SoundSentryProperty const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_SoundSentryProperty;
						std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SoundSentryProperty::SoundSentryProperty,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,SoundSentryProperty::SoundSentryProperty> > > const _name_to_value_SoundSentryProperty;
					};

					namespace SoundSentryVisualSignalEffect
					{
						std::map<SoundSentryVisualSignalEffect::SoundSentryVisualSignalEffect,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<SoundSentryVisualSignalEffect::SoundSentryVisualSignalEffect>,std::allocator<std::pair<SoundSentryVisualSignalEffect::SoundSentryVisualSignalEffect const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_SoundSentryVisualSignalEffect;
						std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SoundSentryVisualSignalEffect::SoundSentryVisualSignalEffect,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,SoundSentryVisualSignalEffect::SoundSentryVisualSignalEffect> > > const _name_to_value_SoundSentryVisualSignalEffect;
					};

				};

			};

			namespace Keyboard
			{
				class Schema
				{
					static bond::Metadata const s_filterIndicatorEnabled_metadata;
					static bond::Metadata const s_filterKeyBeepEnabled_metadata;
					static bond::Metadata const s_filterKeysEnabled_metadata;
					static bond::Metadata const s_filterShortcutEnabled_metadata;
					static bond::Metadata const s_filterSlowKeysDelayInMilliseconds_metadata;
					static bond::Metadata const s_filterSlowKeysEnabled_metadata;
					static bond::Metadata const s_filterSlowKeysFirstRepeatDelayInMilliseconds_metadata;
					static bond::Metadata const s_filterSlowKeysNextRepeatDelayInMilliseconds_metadata;
					static bond::Metadata const s_filterSlowKeysRepeatEnabled_metadata;
					static bond::Metadata const s_onScreenKeyboardEnabled_metadata;
					static bond::Metadata const s_shortcutSoundEnabled_metadata;
					static bond::Metadata const s_stickyIndicatorEnabled_metadata;
					static bond::Metadata const s_stickyKeysEnabled_metadata;
					static bond::Metadata const s_stickyLockModifierEnabled_metadata;
					static bond::Metadata const s_stickyModifierSoundEnabled_metadata;
					static bond::Metadata const s_stickyShortcutEnabled_metadata;
					static bond::Metadata const s_stickyTwoKeyPressEnabled_metadata;
					static bond::Metadata const s_toggleKeysEnabled_metadata;
					static bond::Metadata const s_toggleKeysShortcutEnabled_metadata;
					static bond::Metadata const s_underlineShortcutEnabled_metadata;
					static bond::Metadata const s_warningMessageEnabled_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace Mouse
			{
				class Schema
				{
					static bond::Metadata const s_cursorColor_metadata;
					static bond::Metadata const s_cursorSize_metadata;
					static bond::Metadata const s_keysControlShiftEnabled_metadata;
					static bond::Metadata const s_keysEnabled_metadata;
					static bond::Metadata const s_keysNumLockEnabled_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace Narrator
			{
				class Schema
				{
					static bond::Metadata const s_autoStartEnabled_metadata;
					static bond::Metadata const s_duckAudioEnabled_metadata;
					static bond::Metadata const s_echoCharacterEnabled_metadata;
					static bond::Metadata const s_echoWordEnabled_metadata;
					static bond::Metadata const s_fastKeyEntryEnabled_metadata;
					static bond::Metadata const s_followInsertionEnabled_metadata;
					static bond::Metadata const s_highlightCursorEnabled_metadata;
					static bond::Metadata const s_intonationPauseEnabled_metadata;
					static bond::Metadata const s_playAudioCuesEnabled_metadata;
					static bond::Metadata const s_quickLaunchEnabled_metadata;
					static bond::Metadata const s_readHintsEnabled_metadata;
					static bond::Metadata const s_speechPitch_metadata;
					static bond::Metadata const s_speechSpeed_metadata;
					static bond::Metadata const s_speechVoice_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace _bond_enumerators
			{
				namespace ClosedCaptionColor
				{
					std::map<ClosedCaptionColor::ClosedCaptionColor,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<ClosedCaptionColor::ClosedCaptionColor>,std::allocator<std::pair<ClosedCaptionColor::ClosedCaptionColor const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_ClosedCaptionColor;
					std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,ClosedCaptionColor::ClosedCaptionColor,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,ClosedCaptionColor::ClosedCaptionColor> > > const _name_to_value_ClosedCaptionColor;
				};

				namespace ClosedCaptionEdgeEffect
				{
					std::map<ClosedCaptionEdgeEffect::ClosedCaptionEdgeEffect,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<ClosedCaptionEdgeEffect::ClosedCaptionEdgeEffect>,std::allocator<std::pair<ClosedCaptionEdgeEffect::ClosedCaptionEdgeEffect const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_ClosedCaptionEdgeEffect;
					std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,ClosedCaptionEdgeEffect::ClosedCaptionEdgeEffect,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,ClosedCaptionEdgeEffect::ClosedCaptionEdgeEffect> > > const _name_to_value_ClosedCaptionEdgeEffect;
				};

				namespace ClosedCaptionStyle
				{
					std::map<ClosedCaptionStyle::ClosedCaptionStyle,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<ClosedCaptionStyle::ClosedCaptionStyle>,std::allocator<std::pair<ClosedCaptionStyle::ClosedCaptionStyle const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_ClosedCaptionStyle;
					std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,ClosedCaptionStyle::ClosedCaptionStyle,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,ClosedCaptionStyle::ClosedCaptionStyle> > > const _name_to_value_ClosedCaptionStyle;
				};

				namespace TeleTypeMode
				{
					std::map<TeleTypeMode::TeleTypeMode,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<TeleTypeMode::TeleTypeMode>,std::allocator<std::pair<TeleTypeMode::TeleTypeMode const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_TeleTypeMode;
					std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,TeleTypeMode::TeleTypeMode,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,TeleTypeMode::TeleTypeMode> > > const _name_to_value_TeleTypeMode;
				};

				namespace VoiceGender
				{
					std::map<VoiceGender::VoiceGender,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<VoiceGender::VoiceGender>,std::allocator<std::pair<VoiceGender::VoiceGender const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_VoiceGender;
					std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,VoiceGender::VoiceGender,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,VoiceGender::VoiceGender> > > const _name_to_value_VoiceGender;
				};

			};

		};

		namespace Calling
		{
			namespace CallFavoriteItem
			{
				class Schema
				{
					static bond::Metadata const s_applicationId_metadata;
					static bond::Metadata const s_callbackToken_metadata;
					static bond::Metadata const s_displayName_metadata;
					static bond::Metadata const s_isPublicSwitchTelephoneNetwork_metadata;
					static bond::Metadata const s_isVideoCall_metadata;
					static bond::Metadata const s_lineNumber_metadata;
					static bond::Metadata const s_phoneNumberName_metadata;
					static bond::Metadata const s_phoneNumber_metadata;
					static bond::Metadata const s_propHash_metadata;
					static bond::Metadata const s_remoteIdHash_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace CallFavorites
			{
				class Schema
				{
					static bond::Metadata const s_favorites_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace CallFavoritesLocalCache
			{
				class Schema
				{
					static bond::Metadata const s_previousCloudFavorites_metadata;
					static bond::Metadata const s_previousLocalFavorites_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace CallHistory
			{
				class Schema
				{
					static bond::Metadata const s_headItemId_metadata;
					static bond::Metadata const s_historyItems_metadata;
					static bond::Metadata const s_tailItemId_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace CallHistoryItem
			{
				class Schema
				{
					static bond::Metadata const s_callArrivalTime_metadata;
					static bond::Metadata const s_callEndTime_metadata;
					static bond::Metadata const s_callTimestamp_metadata;
					static bond::Metadata const s_callType_metadata;
					static bond::Metadata const s_callerCategoryDescription_metadata;
					static bond::Metadata const s_callerCategoryName_metadata;
					static bond::Metadata const s_callerIdBlocked_metadata;
					static bond::Metadata const s_callerLocation_metadata;
					static bond::Metadata const s_emergencyCall_metadata;
					static bond::Metadata const s_lineName_metadata;
					static bond::Metadata const s_lineNumber_metadata;
					static bond::Metadata const s_nextItemId_metadata;
					static bond::Metadata const s_phoneNumber_metadata;
					static bond::Metadata const s_previousItemId_metadata;
					static bond::Metadata const s_seen_metadata;
					static bond::Metadata const s_uniqueId_metadata;
					static bond::Metadata const s_videoCall_metadata;
					static bond::Metadata const s_voicemailCall_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace Settings
			{
				class Schema
				{
					static bond::Metadata const s_textReplyCustomMessages_metadata;
					static bond::Metadata const s_textReplySetting_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace _bond_enumerators
			{
				namespace CallType
				{
					std::map<CallType::CallType,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<CallType::CallType>,std::allocator<std::pair<CallType::CallType const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_CallType;
					std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CallType::CallType,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CallType::CallType> > > const _name_to_value_CallType;
				};

			};

		};

		namespace Common
		{
			namespace Color
			{
				class Schema
				{
					static bond::Metadata const s_alpha_metadata;
					static bond::Metadata const s_blue_metadata;
					static bond::Metadata const s_green_metadata;
					static bond::Metadata const s_red_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace Point
			{
				class Schema
				{
					static bond::Metadata const s_x_metadata;
					static bond::Metadata const s_y_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace Rect
			{
				class Schema
				{
					static bond::Metadata const s_bottom_metadata;
					static bond::Metadata const s_left_metadata;
					static bond::Metadata const s_right_metadata;
					static bond::Metadata const s_top_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace Size
			{
				class Schema
				{
					static bond::Metadata const s_cx_metadata;
					static bond::Metadata const s_cy_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

		};

		namespace Messaging
		{
			namespace Settings
			{
				class Schema
				{
					static bond::Metadata const s_allowSendingDeliveryReport2_metadata;
					static bond::Metadata const s_allowSendingDeliveryReport_metadata;
					static bond::Metadata const s_automaticallyDownload2_metadata;
					static bond::Metadata const s_automaticallyDownload_metadata;
					static bond::Metadata const s_cmasExtremeAlertEnabled2_metadata;
					static bond::Metadata const s_cmasExtremeAlertEnabled_metadata;
					static bond::Metadata const s_cmasSevereAlertEnabled2_metadata;
					static bond::Metadata const s_cmasSevereAlertEnabled_metadata;
					static bond::Metadata const s_emergencyAlertEnabled2_metadata;
					static bond::Metadata const s_emergencyAlertEnabled_metadata;
					static bond::Metadata const s_emergencyAlertOption2_metadata;
					static bond::Metadata const s_emergencyAlertOption_metadata;
					static bond::Metadata const s_etwsSoundEnabled2_metadata;
					static bond::Metadata const s_etwsSoundEnabled_metadata;
					static bond::Metadata const s_mmsGroupText2_metadata;
					static bond::Metadata const s_mmsGroupText_metadata;
					static bond::Metadata const s_nl2AlertEnabled2_metadata;
					static bond::Metadata const s_nl2AlertEnabled_metadata;
					static bond::Metadata const s_nlInfoEnabled_metadata;
					static bond::Metadata const s_requestDeliveryReport2_metadata;
					static bond::Metadata const s_requestDeliveryReport_metadata;
					static bond::Metadata const s_smsDeliveryNotify2_metadata;
					static bond::Metadata const s_smsDeliveryNotify_metadata;
				public:
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

		};

		namespace Platform
		{
			namespace Diagnostics
			{
				namespace DiagnosticData
				{
					class Schema
					{
						static bond::Metadata const s_diagnosticMessage_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

				};

			};

			namespace ItemReference<bond::Void>
			{
				struct Schema
				{
					static bond::Metadata GetMetadata();
					static bond::Metadata const metadata;
				};

			};

			namespace Partitioning
			{
				struct ActivePartitions
				{
					class Schema
					{
						static bond::Metadata const s_activePartitions_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

					~ActivePartitions();
				};

				struct DeviceExperiencePartitionMetadata
				{
					class Schema
					{
						static bond::Metadata const s_formFactor_metadata;
						static bond::Metadata const s_minimumOperatingSystemVersion_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

					DeviceExperiencePartitionMetadata();
					DeviceExperiencePartitionMetadata(DeviceExperiencePartitionMetadata const &);
					~DeviceExperiencePartitionMetadata();
				};

				namespace OperatingSystemVersion
				{
					class Schema
					{
						static bond::Metadata const s_majorVersion_metadata;
						static bond::Metadata const s_servicePack_metadata;
						static bond::Metadata const s_subVersion_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

				};

				struct PartitionInfo
				{
					class Schema
					{
						static bond::Metadata const s_metadata_metadata;
						static bond::Metadata const s_sourcePartitionId_metadata;
						static bond::Metadata const s_typeNames_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

					PartitionInfo();
					PartitionInfo(PartitionInfo const &);
					~PartitionInfo();
				};

				struct PartitionMetadata
				{
					class Schema
					{
						static bond::Metadata const s_modifiedTime_metadata;
						static bond::Metadata const s_qualifiedTypeName_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

					PartitionMetadata();
					PartitionMetadata(PartitionMetadata const &);
					~PartitionMetadata();
				};

				struct PartitionSet
				{
					class Schema
					{
						static bond::Metadata const s_partitions_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

					~PartitionSet();
				};

				struct SystemPartitionIndex
				{
					class Schema
					{
						static bond::Metadata const s_partitionSets_metadata;
					public:
						static bond::Metadata GetMetadata();
						static bond::Metadata const metadata;
					};

					~SystemPartitionIndex();
				};

				namespace _bond_enumerators
				{
					namespace FormFactor
					{
						std::map<FormFactor::FormFactor,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<FormFactor::FormFactor>,std::allocator<std::pair<FormFactor::FormFactor const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_FormFactor;
						std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,FormFactor::FormFactor,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,FormFactor::FormFactor> > > const _name_to_value_FormFactor;
					};

				};

			};

		};

	};

	namespace Foundation
	{
		namespace Collections
		{
			namespace Detail
			{
				long _IteratorGetMany<IIterator_impl<HSTRING__ *,1>,HSTRING__ *>(IIterator_impl<HSTRING__ *,1> *,unsigned int,HSTRING__ * *,unsigned int *);
				long _IteratorGetMany<IIterator_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1>,Internal::Storage::Cloud::Model::ICloudDataField *>(IIterator_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1> *,unsigned int,Internal::Storage::Cloud::Model::ICloudDataField * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<HSTRING__ *,1>,HSTRING__ *>(IVectorView_impl<HSTRING__ *,1> *,unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				long _VectorGetMany<IVectorView_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1>,Internal::Storage::Cloud::Model::ICloudDataField *>(IVectorView_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1> *,unsigned int,unsigned int,Internal::Storage::Cloud::Model::ICloudDataField * *,unsigned int *);
				long _VectorGetMany<IVector_impl<HSTRING__ *,1>,HSTRING__ *>(IVector_impl<HSTRING__ *,1> *,unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				long _VectorGetMany<IVector_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1>,Internal::Storage::Cloud::Model::ICloudDataField *>(IVector_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1> *,unsigned int,unsigned int,Internal::Storage::Cloud::Model::ICloudDataField * *,unsigned int *);
				long _VectorReplaceAll<IVector_impl<HSTRING__ *,1>,HSTRING__ *>(IVector_impl<HSTRING__ *,1> *,unsigned int,HSTRING__ * *);
				long _VectorReplaceAll<IVector_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1>,Internal::Storage::Cloud::Model::ICloudDataField *>(IVector_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1> *,unsigned int,Internal::Storage::Cloud::Model::ICloudDataField * *);
				void _Cleanup<Internal::Storage::Cloud::Model::ICloudDataField,unsigned int>(Internal::Storage::Cloud::Model::ICloudDataField * * const,unsigned int);
				void _Cleanup<unsigned int>(HSTRING__ * *,unsigned int);
			};

			struct IIterator_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,HSTRING__ * *,unsigned int *);
			};

			struct IIterator_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1>
			{
				virtual long GetMany(unsigned int,Internal::Storage::Cloud::Model::ICloudDataField * *,unsigned int *);
			};

			struct IVectorView_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
			};

			struct IVectorView_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Storage::Cloud::Model::ICloudDataField * *,unsigned int *);
			};

			struct IVector_impl<HSTRING__ *,1>
			{
				virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,HSTRING__ * *);
			};

			struct IVector_impl<Internal::AggregateType<Internal::Storage::Cloud::Model::CloudDataField *,Internal::Storage::Cloud::Model::ICloudDataField *>,1>
			{
				virtual long GetMany(unsigned int,unsigned int,Internal::Storage::Cloud::Model::ICloudDataField * *,unsigned int *);
				virtual long ReplaceAll(unsigned int,Internal::Storage::Cloud::Model::ICloudDataField * *);
			};

			namespace Internal
			{
				struct AgileVector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,0>
				{
					static long Make(AgileVector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,0> * *);
				};

				struct SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>::permission);
					static long Make(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorIterator<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(HSTRING__ * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorIterator<Storage::Cloud::Model::CloudDataField *,Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> >,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorIterator<Storage::Cloud::Model::CloudDataField *,Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> >,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,XWinRT::IntVersionTag,0>(Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> > *,SimpleVectorIterator<Storage::Cloud::Model::CloudDataField *,Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> >,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,XWinRT::IntVersionTag,0>::permission);
					static long Make(Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> > *,SimpleVectorIterator<Storage::Cloud::Model::CloudDataField *,Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> >,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,XWinRT::IntVersionTag,0> * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,Storage::Cloud::Model::ICloudDataField * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long MoveNext(unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Current(Storage::Cloud::Model::ICloudDataField * *);
					virtual long get_HasCurrent(unsigned char *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>
				{
					SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>(Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> > *,SimpleVectorView<HSTRING__ *,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >,DefaultLifetimeTraits<HSTRING__ *>,XWinRT::IntVersionTag,1>::permission);
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct SimpleVectorView<Storage::Cloud::Model::CloudDataField *,Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> >,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,XWinRT::IntVersionTag,0>
				{
					SimpleVectorView<Storage::Cloud::Model::CloudDataField *,Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> >,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,XWinRT::IntVersionTag,0>(Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> > *,SimpleVectorView<Storage::Cloud::Model::CloudDataField *,Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> >,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,XWinRT::IntVersionTag,0>::permission);
					virtual long First(IIterator<Storage::Cloud::Model::CloudDataField *> * *);
					virtual long GetAt(unsigned int,Storage::Cloud::Model::ICloudDataField * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Storage::Cloud::Model::ICloudDataField * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long IndexOf(Storage::Cloud::Model::ICloudDataField *,unsigned int *,unsigned char *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >
				{
					long IndexOfInternal(HSTRING__ * *,unsigned int,HSTRING__ *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,HSTRING__ *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(HSTRING__ * *,unsigned int);
					void _EraseAll(HSTRING__ * * *,unsigned int *);
				public:
					Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >(DefaultEqualityPredicate<HSTRING__ *> const &,Vector<HSTRING__ *,DefaultEqualityPredicate<HSTRING__ *>,DefaultLifetimeTraits<HSTRING__ *>,VectorOptions<HSTRING__ *,0,1,0> >::permission);
					virtual long Append(HSTRING__ *);
					virtual long Clear();
					virtual long First(IIterator<HSTRING__ *> * *);
					virtual long GetAt(unsigned int,HSTRING__ * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,HSTRING__ * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<HSTRING__ *> * *);
					virtual long IndexOf(HSTRING__ *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,HSTRING__ *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,HSTRING__ * *);
					virtual long SetAt(unsigned int,HSTRING__ *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> >
				{
					long IndexOfInternal(Storage::Cloud::Model::ICloudDataField * *,unsigned int,Storage::Cloud::Model::ICloudDataField *,unsigned int *,unsigned char *);
					long InsertAtInternal(unsigned int,Storage::Cloud::Model::ICloudDataField *,bool);
					long RemoveAtInternal(unsigned int,bool);
					long ResizeStorage(unsigned int);
					static void _Free(Storage::Cloud::Model::ICloudDataField * *,unsigned int);
					void _EraseAll(Storage::Cloud::Model::ICloudDataField * * *,unsigned int *);
				public:
					Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> >(DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *> const &,Vector<Storage::Cloud::Model::CloudDataField *,DefaultEqualityPredicate<Storage::Cloud::Model::CloudDataField *>,DefaultLifetimeTraits<Storage::Cloud::Model::CloudDataField *>,DefaultVectorOptions<Storage::Cloud::Model::CloudDataField *> >::permission);
					virtual long Append(Storage::Cloud::Model::ICloudDataField *);
					virtual long Clear();
					virtual long First(IIterator<Storage::Cloud::Model::CloudDataField *> * *);
					virtual long GetAt(unsigned int,Storage::Cloud::Model::ICloudDataField * *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetMany(unsigned int,unsigned int,Storage::Cloud::Model::ICloudDataField * *,unsigned int *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetView(IVectorView<Storage::Cloud::Model::CloudDataField *> * *);
					virtual long IndexOf(Storage::Cloud::Model::ICloudDataField *,unsigned int *,unsigned char *);
					virtual long InsertAt(unsigned int,Storage::Cloud::Model::ICloudDataField *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RemoveAt(unsigned int);
					virtual long RemoveAtEnd();
					virtual long ReplaceAll(unsigned int,Storage::Cloud::Model::ICloudDataField * *);
					virtual long SetAt(unsigned int,Storage::Cloud::Model::ICloudDataField *);
					virtual long get_Size(unsigned int *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct VectorOptions<HSTRING__ *,0,1,0>
				{
					static long RaiseEvent(...);
				};

				struct VectorOptions<Storage::Cloud::Model::CloudDataField *,0,0,0>
				{
					static long RaiseEvent(...);
				};

			};

		};

	};

	namespace Internal
	{
		class ComTaskPool
		{
			class CThread
			{
				long _CreateThreadRef(long *,IUnknown * *);
				long _WaitForThreadUpdate(unsigned long);
				static HINSTANCE__ * s_ExecuteThreadProc(void *);
				static unsigned long s_ThreadProc(void *);
				static void s_CheckForDeadlockTimerCallback(_TP_CALLBACK_INSTANCE *,void *,_TP_TIMER *);
				static void s_ThreadPoolCallback(_TP_CALLBACK_INSTANCE *,void *);
				void _DispatchMessage(tagMSG *);
				void _ThreadProc();
			public:
				CThread(TaskApartment,TaskOptions);
				bool Eligible(TaskApartment,TaskOptions);
				long StartThread();
				long StartThreadWithFallback();
				long _StartThreadCommon();
				void CheckForDeadlock();
			};

			struct TaskData
			{
				TaskData(TaskApartment,TaskOptions,unsigned long,IComPoolTask *);
			};

			struct TaskList
			{
				void Clear();
			};

			static ComTaskPool::CThread * s_pThreadList;
			static ComTaskPool::TaskList s_taskFloodingList;
			static _RTL_SRWLOCK s_rwLock;
			static bool s_TryRemoveThread(ComTaskPool::CThread *,bool);
			static bool volatile s_fCanReuseThreads;
			static bool volatile s_fWaitForMoreTasks;
			static long s_GetTaskPoolTlsSlot(unsigned long *);
			static long s_QueuePoolTask(TaskApartment,TaskOptions,unsigned long,IComPoolTask *);
			static long s_QueuePoolTaskUnderLock(void *,TaskApartment,TaskOptions,unsigned long,IComPoolTask *,ComTaskPool::TaskList *,ComTaskPool::CThread * *);
			static unsigned long volatile s_cThreadsStarting;
			static unsigned long volatile s_dwThreadIdReuse;
			static unsigned long volatile s_dwUniqueCallingContext;
			static void * s_hEventCache;
			static void s_AttachAndRecoverTask(ComTaskPool::TaskData *);
			static void s_ClearOrGetNextTask(ComTaskPool::CThread *);
		public:
			static long RunTask(TaskApartment,TaskOptions,unsigned long,unsigned long,IComPoolTask *,IUnknown * *);
		};

		namespace Storage
		{
			namespace Cloud
			{
				namespace Broker
				{
					struct CloudStoreBroker
					{
						CloudStoreBroker();
						static TrustLevel InternalGetTrustLevel();
						static unsigned short const * InternalGetRuntimeClassName();
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long GetUserAccountId(Security::Credentials::IWebAccount *,HSTRING__ * *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					Microsoft::WRL::Details::CreatorMap const __object_CloudStoreBroker;
					Microsoft::WRL::Details::FactoryCache __objectFactory__CloudStoreBroker;
				};

				struct CloudStorage
				{
					CloudStorage(EffectiveWebAccountContext const &,unsigned short const *);
					virtual long Download(unsigned short const *);
					virtual long IsNewDataAvailableInCloud(unsigned short const *,unsigned char *);
					virtual long Upload(unsigned short const *,UploadPolicyValue);
				};

				class CloudStore
				{
					long EnsureCloudStorage();
					long EnsureCloudStoreCache();
					long EnsureTypeServices();
					long GarbageCollectItemInCache(unsigned short const *,unsigned short const *,unsigned __int64);
					long GarbageCollectItemsInCache(unsigned short const *,std::unordered_set<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::hash<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::equal_to<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > const &,IEnumString *,unsigned __int64);
					long GetDataStoreId(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,HSTRING__ * *);
					long GetEffectivePartition(PartitionKind,HSTRING__ *,bool,HSTRING__ * *);
					long GetTypeServiceAttributesForId(unsigned short const *,TypeAttributes *);
					long HandleLoadOptionsAndGetDataStoreId(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,LoadOptions,HSTRING__ * *);
					long LoadAndResolveInternal(unsigned short const *,Streams::IBuffer *,unsigned __int64,Streams::IBuffer *,unsigned __int64,Streams::IBuffer * *,unsigned __int64 *,Streams::IBuffer * *,unsigned __int64 *);
					long LoadInternal(unsigned short const *,unsigned char * *,unsigned long *,unsigned __int64 *);
					std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > GetTopLevelTypesInPartition(Data::Platform::Partitioning::SystemPartitionIndex const &,PartitionKind,HSTRING__ *);
					std::vector<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > GetDataStoreIdClosureForPartition(Data::Platform::Partitioning::SystemPartitionIndex const &,PartitionKind,HSTRING__ *,LoadOptions);
					std::vector<std::pair<PartitionKind,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<PartitionKind,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > GetAllPartitions(Data::Platform::Partitioning::SystemPartitionIndex const &);
					unsigned char IsSyncEnabledForType(unsigned short const *);
					void AddToSystemPartitionIndexIfNeeded(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,unsigned __int64);
					void RemoveFromSystemPartitionIndexIfNeeded(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,unsigned __int64);
				public:
					CloudStore(EffectiveUserContext const &,EffectiveWebAccountContext const &,unsigned short const *);
					static TrustLevel InternalGetTrustLevel();
					static unsigned short const * InternalGetRuntimeClassName();
					virtual long CreateWatcher(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,CloudDataChangeKinds,unsigned __int64,ICloudStoreDataWatcher * *);
					virtual long Delete(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,unsigned __int64,ICloudStoreSaveResult * *);
					virtual long Enumerate(IEnumString * *);
					virtual long GetCachedCloudData(unsigned short const *,Streams::IBuffer * *,unsigned __int64 *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetNextVersion(unsigned __int64 *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetSchema(HSTRING__ *,ICloudStoreSchema * *);
					virtual long GetSchemaOfTypeName(HSTRING__ *,IRefcountedSchema * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long GetVersion(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,unsigned __int64 *);
					virtual long IsNewDataAvailableInCloud(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,unsigned char *);
					virtual long Load(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,LoadOptions,ICloudStoreData * *);
					virtual long LoadAndResolve(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,LoadOptions,Streams::IBuffer *,unsigned __int64,Streams::IBuffer *,unsigned __int64,Streams::IBuffer * *,unsigned __int64 *,Streams::IBuffer * *,unsigned __int64 *);
					virtual long LoadDataDescriptor(unsigned short const *,ICloudStoreDataDescriptor * *);
					virtual long LoadStreamForDataDescriptor(ICloudStoreDataDescriptor *,IStream * *);
					virtual long OverrideStorage(IDefaultLocalStorage *,IBulkLocalStorage *,ICloudStorage *);
					virtual long OverrideTypeServices(Metadata::ITypeServices *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long RegisterSchema(HSTRING__ *,unsigned char,Streams::IBuffer *);
					virtual long Save(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,SaveOptions,unsigned __int64,Streams::IBuffer *,unsigned __int64,Streams::IBuffer *,ICloudStoreSaveResult * *);
					virtual long SaveCloudData(unsigned short const *,unsigned __int64,IStream *);
					virtual long SaveMergedCloudData(unsigned short const *,unsigned __int64,IStream *,unsigned __int64,IStream *);
					virtual long SetTestRoot();
					virtual long get_PackageFamilyName(HSTRING__ * *);
					virtual long get_TypeServices(_GUID const &,void * *);
					virtual long get_User(HSTRING__ * *);
					virtual long get_WebAccount(Security::Credentials::IWebAccount * *);
					virtual schematized_data LoadSchematizedData(PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,LoadOptions);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class CloudStoreCache
				{
					long GetCurrentBulkLocation(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short * *);
					long SaveToDefaultLocalStorage(unsigned short const *,unsigned short const *,unsigned short const *,CloudStoreMetadata *,unsigned char *,unsigned long);
				public:
					CloudStoreCache();
					long Cleanup(unsigned short const *);
					long CleanupSyncData(unsigned short const *,CSimpleEnumString *);
					long Load(unsigned short const *,unsigned short const *,unsigned short const *,bool,CloudStoreMetadata *,unsigned char * *,unsigned long *);
					long RuntimeClassInitialize(IDefaultLocalStorage *,IBulkLocalStorage *);
					virtual long CreateWatcher(unsigned short const *,unsigned short const *,unsigned short const *,IDataChangeWatcher * *);
					virtual long Enumerate(unsigned short const *,IEnumString * *);
					virtual long GetVersion(unsigned short const *,unsigned short const *,unsigned short const *,unsigned __int64 *);
					virtual long Load(unsigned short const *,unsigned short const *,unsigned short const *,unsigned char * *,unsigned long *,unsigned __int64 *);
					virtual long LoadDataDescriptor(unsigned short const *,unsigned short const *,unsigned short const *,ICloudStoreDataDescriptor * *);
					virtual long LoadStreamForDataDescriptor(ICloudStoreDataDescriptor *,IStream * *);
					virtual long Remove(unsigned short const *,unsigned short const *,unsigned short const *);
					virtual long Save(unsigned short const *,unsigned short const *,unsigned short const *,unsigned char *,unsigned long,unsigned __int64);
				};

				struct CloudStoreData
				{
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_Data(Streams::IBuffer * *);
					virtual long get_Id(HSTRING__ * *);
					virtual long get_TypeName(HSTRING__ * *);
					virtual long get_Version(unsigned __int64 *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct CloudStoreDataChangedEventArgs
				{
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_ChangeKind(CloudDataChangeKinds *);
					virtual long get_DataItem(ICloudStoreData * *);
					virtual long get_Id(HSTRING__ * *);
					virtual long get_PartitionId(HSTRING__ * *);
					virtual long get_PartitionKind(PartitionKind *);
					virtual long get_TypeName(HSTRING__ * *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct CloudStoreDataDescriptor
				{
					CloudStoreDataDescriptor();
					long RuntimeClassInitialize(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned __int64,IStream *);
					virtual long GetDataStream(IStream * *);
					virtual long GetId(unsigned short * *);
					virtual long GetInstanceId(unsigned short * *);
					virtual long GetRoot(unsigned short * *);
					virtual long GetTag(unsigned short * *);
					virtual long GetVersion(unsigned __int64 *);
				};

				class CloudStoreDataWatcher
				{
					long EnsureWatchingOrNotWatching();
					long OnNotifyChangeTask();
					long ReloadAndCache(bool,ICloudStoreData * *);
					long ReloadCacheAndGenerateChangeArgs(bool,CloudDataChangeKinds,ICloudStoreDataChangedEventArgs * *);
				public:
					long OnDataChanged(IInspectable *,IInspectable *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long add_DataChanged(Foundation::ITypedEventHandler<CloudStoreDataWatcher *,CloudStoreDataChangedEventArgs *> *,EventRegistrationToken *);
					virtual long remove_DataChanged(EventRegistrationToken);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct CloudStoreFactory
				{
					virtual long ActivateInstance(IInspectable * *);
					virtual long CreateInstance(CloudStoreOptions,System::IUser *,Security::Credentials::IWebAccount *,HSTRING__ *,ICloudStore * *);
				};

				struct CloudStoreMetadata
				{
					long DeSerialize(unsigned char *,unsigned int);
				};

				struct CloudStoreSaveResult
				{
					CloudStoreSaveResult(unsigned __int64,Streams::IBuffer *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long get_SavedData(Streams::IBuffer * *);
					virtual long get_Version(unsigned __int64 *);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class CloudStoreSchema
				{
					long GetTypeNameSubKey(unsigned short const *,unsigned short *,unsigned __int64);
				public:
					CloudStoreSchema();
					long RuntimeClassInitialize(unsigned short const *,unsigned short const *);
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long Save(unsigned char *,unsigned long);
					virtual long get_Schema(Streams::IBuffer * *);
					virtual long get_SyncEnabled(unsigned char *);
					virtual long get_TypeName(HSTRING__ * *);
					virtual long put_SyncEnabled(unsigned char);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				struct CloudStoreSettingHandlerFactory
				{
					CloudStoreSettingHandlerFactory();
					virtual long GetAttributes(unsigned short const *,SETTING_COLLECTION_ATTRIBUTES *);
					virtual long GetCollectionIds(IEnumString * *);
					virtual long GetHandler(unsigned short const *,ISettingHandler * *);
					virtual long GetOwnerId(unsigned short const *,unsigned short * *);
					virtual long GetSettingConflictResolver(unsigned short const *,IResolveSettingConflict * *);
					virtual long IsRoamingEnabledForCollection(unsigned short const *,int *);
					virtual long SetAccount(IInspectable *);
				};

				struct CloudStoreTelemetry
				{
					class CreateWatcherActivity
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						~CreateWatcherActivity();
					};

					class DeleteActivity
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void StartActivity(unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned __int64);
						void Stop(unsigned __int64);
						~DeleteActivity();
					};

					class LoadActivity
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void Stop(unsigned int,unsigned __int64);
						~LoadActivity();
					};

					class SaveActivity
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void StartActivity(unsigned int,unsigned short const *,unsigned short const *,unsigned short const *,unsigned int,unsigned __int64,unsigned int,unsigned __int64,unsigned int);
						void Stop(unsigned __int64);
						~SaveActivity();
					};

					class SyncEnumerateActivity
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void StartActivity();
						~SyncEnumerateActivity();
					};

					class SyncLoadCloudDataActivity
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void StartActivity(unsigned short const *);
						void Stop(unsigned __int64,unsigned int);
						~SyncLoadCloudDataActivity();
					};

					class SyncLoadDataDescriptorActivity
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void StartActivity(unsigned short const *);
						void Stop(unsigned __int64);
						~SyncLoadDataDescriptorActivity();
					};

					class SyncLoadStreamForDataDescriptorActivity
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void StartActivity(unsigned short const *,unsigned __int64);
						void Stop(unsigned int);
						~SyncLoadStreamForDataDescriptorActivity();
					};

					class SyncSaveCloudDataActivity
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void StartActivity(unsigned short const *,unsigned __int64,unsigned int);
						~SyncSaveCloudDataActivity();
					};

					class SyncSaveMergedCloudDataActivity
					{
					protected:
						virtual bool WasAlreadyReportedToTelemetry(long);
						virtual void StopActivity();
					public:
						void StartActivity(unsigned short const *,unsigned __int64,unsigned int,unsigned __int64,unsigned int);
						~SyncSaveMergedCloudDataActivity();
					};

					static void FallbackTelemetryCallback(bool,wil::FailureInfo const &);
				};

				class FileStorage
				{
					long GetFileName(unsigned short const *,unsigned short *,unsigned __int64);
				public:
					long RuntimeClassInitialize(unsigned short const *);
					virtual long CheckSupportedSize(unsigned long);
					virtual long CleanupIdsNotInWhiteList(IEnumString *,int);
					virtual long Load(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned char * *,unsigned long *);
					virtual long LoadAsStream(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,IStream * *);
					virtual long Remove(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *);
					virtual long Save(unsigned short const *,unsigned short const *,unsigned short const *,unsigned char *,unsigned long,unsigned short * *);
				};

				namespace Model
				{
					struct CloudDataField
					{
						CloudDataField();
						long RuntimeClassInitialize(unsigned short const *,bond::_bond_enumerators::BondDataType::BondDataType,unsigned short const *,unsigned __int64,bond::Metadata const *);
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long get_Fields(Foundation::Collections::IVectorView<CloudDataField *> * *);
						virtual long get_Id(unsigned __int64 *);
						virtual long get_Name(HSTRING__ * *);
						virtual long get_TypeName(HSTRING__ * *);
						virtual long get_Value(HSTRING__ * *);
						virtual long put_Name(HSTRING__ *);
						virtual long put_Value(HSTRING__ *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
						void GetFields(Foundation::Collections::IVector<CloudDataField *> * *);
						void SetValue(unsigned short const *);
					};

					class CloudDataType
					{
						long EnsureCloudStore(_GUID const &,void * *);
						long EnsureTypeServices(_GUID const &,void * *);
						void SetConflictPolicy(bond::Metadata const &);
						void SetScope(bond::Metadata const &);
						void SetUploadPolicy(bond::Metadata const &);
					public:
						CloudDataType();
						long RuntimeClassInitialize(HSTRING__ *,HSTRING__ *,Streams::IBuffer *,unsigned __int64 *);
						static TrustLevel InternalGetTrustLevel();
						static unsigned short const * InternalGetRuntimeClassName();
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long Save(unsigned char *);
						virtual long Serialize(Streams::IBuffer * *);
						virtual long get_ConflictPolicy(CloudDataConflictPolicy *);
						virtual long get_Fields(Foundation::Collections::IVectorView<CloudDataField *> * *);
						virtual long get_InstanceId(HSTRING__ * *);
						virtual long get_IsMultiInstanced(unsigned char *);
						virtual long get_Scope(CloudDataScope *);
						virtual long get_TypeName(HSTRING__ * *);
						virtual long get_UploadPolicy(CloudDataUploadPolicy *);
						virtual long get_Version(unsigned __int64 *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
						virtual ~CloudDataType();
					};

					struct CloudDataTypeFactory
					{
						virtual long ActivateInstance(IInspectable * *);
						virtual long CreateCloudData(HSTRING__ *,HSTRING__ *,Streams::IBuffer *,unsigned __int64,ICloudDataType * *);
					};

					Microsoft::WRL::Details::CreatorMap const __object_CloudDataType;
					Microsoft::WRL::Details::FactoryCache __objectFactory__CloudDataType;
				};

				namespace Partitioning
				{
					struct ActivePartitionChangedEventArgs
					{
						ActivePartitionChangedEventArgs();
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					struct CloudStorePartitionInfo
					{
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long get_Id(HSTRING__ * *);
						virtual long get_Kind(PartitionKind *);
						virtual long get_Metadata(IPartitionMetadata * *);
						virtual long get_SourceId(HSTRING__ * *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					struct CloudStorePartitionManager
					{
						CloudStorePartitionManager(ICloudStore *);
						static TrustLevel InternalGetTrustLevel();
						static unsigned short const * InternalGetRuntimeClassName();
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetPartitionSet(PartitionKind,ICloudStorePartitionSet * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					struct CloudStorePartitionManagerFactory
					{
						virtual long ActivateInstance(IInspectable * *);
						virtual long CreateInstance(ICloudStore *,ICloudStorePartitionManager * *);
					};

					class CloudStorePartitionSet
					{
						Data::Platform::Partitioning::PartitionSet & EnsurePartitionSet(Data::Platform::Partitioning::SystemPartitionIndex *);
						long CopyItem(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const &,HSTRING__ *,HSTRING__ *);
						static Data::Platform::Partitioning::PartitionInfo & FindItemThrowIfMissing<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Data::Platform::Partitioning::PartitionInfo> > >,Data::Platform::Partitioning::PartitionInfo>(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Data::Platform::Partitioning::PartitionInfo> > > &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
						static Data::Platform::Partitioning::PartitionInfo * FindItemNullIfMissing<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Data::Platform::Partitioning::PartitionInfo> > >,Data::Platform::Partitioning::PartitionInfo>(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Data::Platform::Partitioning::PartitionInfo> > > &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
						static Data::Platform::Partitioning::PartitionInfo const & FindItemThrowIfMissing<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Data::Platform::Partitioning::PartitionInfo> > > const ,Data::Platform::Partitioning::PartitionInfo const >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Data::Platform::Partitioning::PartitionInfo> > > const &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
						static Data::Platform::Partitioning::PartitionSet & FindItemThrowIfMissing<std::map<unsigned char,Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Data::Platform::Partitioning::PartitionSet> > >,Data::Platform::Partitioning::PartitionSet>(std::map<unsigned char,Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Data::Platform::Partitioning::PartitionSet> > > &,unsigned char const &);
						static Data::Platform::Partitioning::PartitionSet * FindItemNullIfMissing<std::map<unsigned char,Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Data::Platform::Partitioning::PartitionSet> > >,Data::Platform::Partitioning::PartitionSet>(std::map<unsigned char,Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Data::Platform::Partitioning::PartitionSet> > > &,unsigned char const &);
						static Data::Platform::Partitioning::PartitionSet const & FindItemThrowIfMissing<std::map<unsigned char,Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Data::Platform::Partitioning::PartitionSet> > > const ,Data::Platform::Partitioning::PartitionSet const >(std::map<unsigned char,Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Data::Platform::Partitioning::PartitionSet> > > const &,unsigned char const &);
						static Data::Platform::Partitioning::PartitionSet const * FindItemNullIfMissing<std::map<unsigned char,Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Data::Platform::Partitioning::PartitionSet> > > const ,Data::Platform::Partitioning::PartitionSet const >(std::map<unsigned char,Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Data::Platform::Partitioning::PartitionSet> > > const &,unsigned char const &);
						std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > LoadActivePartitionId();
						std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > ReconcileActivePartition(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
						void OnActivePartitionChanged();
						void OnSystemPartitionIndexChanged();
						void SetActivePartitionId(unsigned short const *);
					public:
						CloudStorePartitionSet(ICloudStore *,PartitionKind);
						virtual long CreatePartition(HSTRING__ *,HSTRING__ *,ICloudStorePartitionInfo * *);
						virtual long DeletePartition(HSTRING__ *);
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetPartitionInfo(HSTRING__ *,ICloudStorePartitionInfo * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long add_ActiveChanged(Foundation::ITypedEventHandler<CloudStorePartitionSet *,ActivePartitionChangedEventArgs *> *,EventRegistrationToken *);
						virtual long get_Active(HSTRING__ * *);
						virtual long get_PartitionIds(Foundation::Collections::IVectorView<HSTRING__ *> * *);
						virtual long put_Active(HSTRING__ *);
						virtual long remove_ActiveChanged(EventRegistrationToken);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
						virtual ~CloudStorePartitionSet();
					};

					struct DeviceExperienceMetadata
					{
						DeviceExperienceMetadata(unsigned __int64,DeviceFormFactor,unsigned int);
						virtual long GetIids(unsigned long *,_GUID * *);
						virtual long GetRuntimeClassName(HSTRING__ * *);
						virtual long GetTrustLevel(TrustLevel *);
						virtual long QueryInterface(_GUID const &,void * *);
						virtual long get_FormFactor(DeviceFormFactor *);
						virtual long get_Kind(PartitionKind *);
						virtual long get_MinimumOSVersion(unsigned int *);
						virtual long get_ModifiedTime(Foundation::DateTime *);
						virtual unsigned long AddRef();
						virtual unsigned long Release();
					};

					Microsoft::WRL::Details::CreatorMap const __object_CloudStorePartitionManager;
					Microsoft::WRL::Details::FactoryCache __objectFactory__CloudStorePartitionManager;
				};

				class RegistryDataWatcher
				{
					long StartListening();
					void StopListeningIfNoClients();
				public:
					RegistryDataWatcher();
					virtual long GetIids(unsigned long *,_GUID * *);
					virtual long GetRuntimeClassName(HSTRING__ * *);
					virtual long GetTrustLevel(TrustLevel *);
					virtual long NotifyDataChange();
					virtual long QueryInterface(_GUID const &,void * *);
					virtual long add_DataChanged(Foundation::ITypedEventHandler<IInspectable *,IInspectable *> *,EventRegistrationToken *);
					virtual long remove_DataChanged(EventRegistrationToken);
					virtual unsigned long AddRef();
					virtual unsigned long Release();
				};

				class RegistryStorage
				{
					long RemoveKey(unsigned short const *);
					static long GetKeyName(unsigned short const *,unsigned short *,unsigned __int64);
					static long GetKeyName(unsigned short const *,unsigned short const *,unsigned short *,unsigned __int64);
					static long GetKeyName(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short *,unsigned __int64);
				public:
					virtual long CheckSupportedSize(unsigned long);
					virtual long CreateWatcher(unsigned short const *,unsigned short const *,unsigned short const *,IDataChangeWatcher * *);
					virtual long Enumerate(unsigned short const *,IEnumString * *);
					virtual long Load(unsigned short const *,unsigned short const *,unsigned short const *,unsigned char * *,unsigned long *);
					virtual long Remove(unsigned short const *,unsigned short const *);
					virtual long Remove(unsigned short const *,unsigned short const *,unsigned short const *);
					virtual long Save(unsigned short const *,unsigned short const *,unsigned short const *,unsigned char *,unsigned long);
				};

				Microsoft::WRL::Details::CreatorMap const __object_CloudStore;
				Microsoft::WRL::Details::CreatorMap const __object_CloudStoreSettingHandlerFactory_COM;
				Microsoft::WRL::Details::FactoryCache __objectFactory__CloudStore;
				Microsoft::WRL::Details::FactoryCache __objectFactory__CloudStoreSettingHandlerFactory_COM;
				bool IsVersionOlderThanNDays(unsigned __int64,int);
				long CloudStoreCache_CreateInstance(Cloud::IDefaultLocalStorage *,Cloud::IBulkLocalStorage *,Cloud::ICloudStoreCache * *);
				long CloudStoreDataDescriptor_CreateInstance(unsigned short const *,unsigned short const *,unsigned short const *,unsigned short const *,unsigned __int64,IStream *,Cloud::ICloudStoreDataDescriptor * *);
				long CloudStoreSchema_CreateInstance(unsigned short const *,unsigned short const *,Cloud::ICloudStoreSchema * *);
				long FileStorage_CreateInstance(unsigned short const *,Cloud::IBulkLocalStorage * *);
				long GetBulkLocalStorage(Cloud::IBulkLocalStorage * *);
				long GetDefaultLocalStorage(Cloud::IDefaultLocalStorage * *);
				unsigned __int64 GetCurrentTimeAsInt64();
			};

		};

	};

	namespace Storage
	{
		namespace Streams
		{
			struct CBuffer<void (*)(void *),DefaultMarshaler>
			{
				CBuffer<void (*)(void *),DefaultMarshaler>(unsigned int,unsigned int,unsigned char *,void (*)(void *));
				virtual long GetIids(unsigned long *,_GUID * *);
				virtual long GetRuntimeClassName(HSTRING__ * *);
				virtual long GetTrustLevel(TrustLevel *);
				virtual long QueryInterface(_GUID const &,void * *);
				virtual unsigned long AddRef();
				virtual unsigned long Release();
			};

			class CBuffer_Impl<void (*)(void *),DefaultMarshaler>
			{
			protected:
				virtual ~CBuffer_Impl<void (*)(void *),DefaultMarshaler>();
			public:
				virtual long Buffer(unsigned char * *);
				virtual long DisconnectObject(unsigned long);
				virtual long GetMarshalSizeMax(_GUID const &,void *,unsigned long,void *,unsigned long,unsigned long *);
				virtual long GetUnmarshalClass(_GUID const &,void *,unsigned long,void *,unsigned long,_GUID *);
				virtual long MarshalInterface(IStream *,_GUID const &,void *,unsigned long,void *,unsigned long);
				virtual long ReleaseMarshalData(IStream *);
				virtual long UnmarshalInterface(IStream *,_GUID const &,void * *);
				virtual long get_Capacity(unsigned int *);
				virtual long get_Length(unsigned int *);
				virtual long put_Length(unsigned int);
			};

			class DefaultMarshaler
			{
				long _EnsureInit();
			public:
				~DefaultMarshaler();
			};

			long MakeCBuffer<void (*)(void *)>(unsigned int,unsigned int,unsigned char *,void (*)(void *),Streams::IBuffer * *);
		};

	};

};

namespace XWinRT
{
	struct AutoValue<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> >
	{
		AutoValue<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *> ><HSTRING__ *>(HSTRING__ * const &,long *);
	};

	struct AutoValue<Windows::Internal::Storage::Cloud::Model::ICloudDataField *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >
	{
		AutoValue<Windows::Internal::Storage::Cloud::Model::ICloudDataField *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *> ><Windows::Internal::Storage::Cloud::Model::ICloudDataField *>(Windows::Internal::Storage::Cloud::Model::ICloudDataField * const &,long *);
		~AutoValue<Windows::Internal::Storage::Cloud::Model::ICloudDataField *,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >();
	};

	struct ComLock
	{
		ComLock(bool);
	};

	struct InterfaceEquals
	{
		long operator()<Windows::Internal::Storage::Cloud::Model::ICloudDataField>(Windows::Internal::Storage::Cloud::Model::ICloudDataField *,Windows::Internal::Storage::Cloud::Model::ICloudDataField *,bool *);
	};

	struct InterfaceLifetimeTraits
	{
		static long Construct<Windows::Internal::Storage::Cloud::Model::ICloudDataField>(Windows::Internal::Storage::Cloud::Model::ICloudDataField * *,Windows::Internal::Storage::Cloud::Model::ICloudDataField *);
		static void Destroy<Windows::Internal::Storage::Cloud::Model::ICloudDataField>(Windows::Internal::Storage::Cloud::Model::ICloudDataField * *);
	};

	struct SerializingLockPolicy
	{
		static detail::LockHolder<ComLock,detail::AcquireRead> Read(ComLock &,long *);
		static detail::LockHolder<ComLock,detail::AcquireWrite> Write(ComLock &,long *);
	};

	namespace detail
	{
		struct LockHolder<ComLock,AcquireRead>
		{
			~LockHolder<ComLock,AcquireRead>();
		};

		struct LockHolder<ComLock,AcquireWrite>
		{
			~LockHolder<ComLock,AcquireWrite>();
		};

		struct ReentrancyGuard<0>
		{
			ReentrancyGuard<0>(...);
		};

	};

};

class _TlgActivityBase<wil::ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType>,0,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType>,0,5>();
public:
	void zInternalStart();
};

class _TlgActivityBase<wil::ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>
{
protected:
	~_TlgActivityBase<wil::ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType>,70368744177664,5>();
public:
	void zInternalStart();
};

namespace bond
{
	struct CompactBinaryReader<InputBuffer>
	{
		bool ReadVersion();
		void Read<int>(int &);
		void Read<short>(short &);
		void ReadContainerBegin(unsigned int &,_bond_enumerators::BondDataType::BondDataType &);
		void ReadContainerBegin(unsigned int &,std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType> &);
		void ReadFieldBegin(_bond_enumerators::BondDataType::BondDataType &,unsigned short &);
		void ReadStructBegin(bool);
		void Skip(_bond_enumerators::BondDataType::BondDataType);
		~CompactBinaryReader<InputBuffer>();
	};

	struct CompactBinaryReader<OutputMemoryStream<std::allocator<char> > >
	{
		static unsigned short const magic;
	};

	class CompactBinaryWriter<OutputCounter>
	{
	protected:
		void LengthBegin(OutputCounter &);
	public:
		void Write<__int64>(__int64 const &);
		void Write<int>(int const &);
		void Write<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		void Write<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
		void WriteContainerBegin(unsigned int,_bond_enumerators::BondDataType::BondDataType);
		void WriteFieldBegin(_bond_enumerators::BondDataType::BondDataType,unsigned short);
		void WriteStructEnd(bool);
		~CompactBinaryWriter<OutputCounter>();
	};

	struct CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > >
	{
		struct Pass1
		{
			~Pass1();
		};

		void Write<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		void Write<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
		void WriteContainerBegin(unsigned int,_bond_enumerators::BondDataType::BondDataType);
		void WriteContainerBegin(unsigned int,std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType>);
		void WriteFieldBegin(_bond_enumerators::BondDataType::BondDataType,unsigned short);
		void WriteStructEnd(bool);
		void WriteVersion();
		~CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > >();
	};

	struct CoreException
	{
		CoreException(CoreException const &);
		virtual ~CoreException();
	};

	class DynamicParser<CompactBinaryReader<InputBuffer> &>
	{
		bool ReadFields<DetectUnknownFieldsTransform>(RuntimeSchema const &,DetectUnknownFieldsTransform const &);
		bool ReadFields<Marshaler<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<To<FieldDef,RequiredFieldValiadator<FieldDef> > >(RuntimeSchema const &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
		bool ReadFields<To<Metadata,RequiredFieldValiadator<Metadata> > >(RuntimeSchema const &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
		bool ReadFields<To<SchemaDef,RequiredFieldValiadator<SchemaDef> > >(RuntimeSchema const &,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &);
		bool ReadFields<To<StructDef,RequiredFieldValiadator<StructDef> > >(RuntimeSchema const &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
		bool ReadFields<To<TypeDef,RequiredFieldValiadator<TypeDef> > >(RuntimeSchema const &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
		bool ReadFields<To<Variant,RequiredFieldValiadator<Variant> > >(RuntimeSchema const &,To<Variant,RequiredFieldValiadator<Variant> > const &);
		bool ReadFields<To<Void,RequiredFieldValiadator<Void> > >(RuntimeSchema const &,To<Void,RequiredFieldValiadator<Void> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
		bool ReadFields<ToWalkable>(RuntimeSchema const &,ToWalkable const &);
		bool UnknownField<DetectUnknownFieldsTransform>(unsigned short,_bond_enumerators::BondDataType::BondDataType,DetectUnknownFieldsTransform const &);
		bool UnknownField<Marshaler<CompactBinaryWriter<OutputCounter> > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		bool UnknownField<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<CompactBinaryWriter<OutputCounter> > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		bool UnknownField<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<ToWalkable>(unsigned short,_bond_enumerators::BondDataType::BondDataType,ToWalkable const &);
		void ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(boost::mpl::l_iter<boost::mpl::l_end> const &,unsigned short &,_bond_enumerators::BondDataType::BondDataType &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
	public:
		bool Apply<RuntimeSchema,DetectUnknownFieldsTransform>(DetectUnknownFieldsTransform const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Marshaler<CompactBinaryWriter<OutputCounter> > >(Marshaler<CompactBinaryWriter<OutputCounter> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Serializer<CompactBinaryWriter<OutputCounter> > >(Serializer<CompactBinaryWriter<OutputCounter> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<FieldDef,RequiredFieldValiadator<FieldDef> > >(To<FieldDef,RequiredFieldValiadator<FieldDef> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Metadata,RequiredFieldValiadator<Metadata> > >(To<Metadata,RequiredFieldValiadator<Metadata> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<StructDef,RequiredFieldValiadator<StructDef> > >(To<StructDef,RequiredFieldValiadator<StructDef> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<TypeDef,RequiredFieldValiadator<TypeDef> > >(To<TypeDef,RequiredFieldValiadator<TypeDef> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Variant,RequiredFieldValiadator<Variant> > >(To<Variant,RequiredFieldValiadator<Variant> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,ToWalkable>(ToWalkable const &,RuntimeSchema const &);
		bool Apply<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &);
		bool Apply<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &);
	};

	class DynamicParser<JSONReader<InputBuffer> &>
	{
		bool ReadFields<DetectUnknownFieldsTransform>(RuntimeSchema const &,DetectUnknownFieldsTransform const &);
		bool ReadFields<Marshaler<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<To<FieldDef,RequiredFieldValiadator<FieldDef> > >(RuntimeSchema const &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
		bool ReadFields<To<Metadata,RequiredFieldValiadator<Metadata> > >(RuntimeSchema const &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
		bool ReadFields<To<SchemaDef,RequiredFieldValiadator<SchemaDef> > >(RuntimeSchema const &,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &);
		bool ReadFields<To<StructDef,RequiredFieldValiadator<StructDef> > >(RuntimeSchema const &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
		bool ReadFields<To<TypeDef,RequiredFieldValiadator<TypeDef> > >(RuntimeSchema const &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
		bool ReadFields<To<Variant,RequiredFieldValiadator<Variant> > >(RuntimeSchema const &,To<Variant,RequiredFieldValiadator<Variant> > const &);
		bool ReadFields<To<Void,RequiredFieldValiadator<Void> > >(RuntimeSchema const &,To<Void,RequiredFieldValiadator<Void> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
		bool ReadFields<ToWalkable>(RuntimeSchema const &,ToWalkable const &);
		bool UnknownField<DetectUnknownFieldsTransform>(unsigned short,_bond_enumerators::BondDataType::BondDataType,DetectUnknownFieldsTransform const &);
		bool UnknownField<Marshaler<CompactBinaryWriter<OutputCounter> > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		bool UnknownField<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<CompactBinaryWriter<OutputCounter> > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		bool UnknownField<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<ToWalkable>(unsigned short,_bond_enumerators::BondDataType::BondDataType,ToWalkable const &);
		void ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(boost::mpl::l_iter<boost::mpl::l_end> const &,unsigned short &,_bond_enumerators::BondDataType::BondDataType &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
	public:
		bool Apply<FieldDef::Schema,To<FieldDef,RequiredFieldValiadator<FieldDef> > >(To<FieldDef,RequiredFieldValiadator<FieldDef> > const &,FieldDef::Schema const &);
		bool Apply<Metadata::Schema,To<Metadata,RequiredFieldValiadator<Metadata> > >(To<Metadata,RequiredFieldValiadator<Metadata> > const &,Metadata::Schema const &);
		bool Apply<RuntimeSchema,DetectUnknownFieldsTransform>(DetectUnknownFieldsTransform const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Marshaler<CompactBinaryWriter<OutputCounter> > >(Marshaler<CompactBinaryWriter<OutputCounter> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Serializer<CompactBinaryWriter<OutputCounter> > >(Serializer<CompactBinaryWriter<OutputCounter> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<FieldDef,RequiredFieldValiadator<FieldDef> > >(To<FieldDef,RequiredFieldValiadator<FieldDef> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Metadata,RequiredFieldValiadator<Metadata> > >(To<Metadata,RequiredFieldValiadator<Metadata> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<StructDef,RequiredFieldValiadator<StructDef> > >(To<StructDef,RequiredFieldValiadator<StructDef> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<TypeDef,RequiredFieldValiadator<TypeDef> > >(To<TypeDef,RequiredFieldValiadator<TypeDef> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Variant,RequiredFieldValiadator<Variant> > >(To<Variant,RequiredFieldValiadator<Variant> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,ToWalkable>(ToWalkable const &,RuntimeSchema const &);
		bool Apply<SchemaDef::Schema,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > >(To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &,SchemaDef::Schema const &);
		bool Apply<StructDef::Schema,To<StructDef,RequiredFieldValiadator<StructDef> > >(To<StructDef,RequiredFieldValiadator<StructDef> > const &,StructDef::Schema const &);
		bool Apply<TypeDef::Schema,To<TypeDef,RequiredFieldValiadator<TypeDef> > >(To<TypeDef,RequiredFieldValiadator<TypeDef> > const &,TypeDef::Schema const &);
		bool Apply<Variant::Schema,To<Variant,RequiredFieldValiadator<Variant> > >(To<Variant,RequiredFieldValiadator<Variant> > const &,Variant::Schema const &);
		bool Apply<Windows::Data::Platform::Partitioning::ActivePartitions::Schema,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > >(To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &,Windows::Data::Platform::Partitioning::ActivePartitions::Schema const &);
		bool Apply<Windows::Data::Platform::Partitioning::OperatingSystemVersion::Schema,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &,Windows::Data::Platform::Partitioning::OperatingSystemVersion::Schema const &);
		bool Apply<Windows::Data::Platform::Partitioning::PartitionInfo::Schema,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &,Windows::Data::Platform::Partitioning::PartitionInfo::Schema const &);
		bool Apply<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &);
		bool Apply<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &);
		bool Apply<Windows::Data::Platform::Partitioning::PartitionSet::Schema,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &,Windows::Data::Platform::Partitioning::PartitionSet::Schema const &);
		bool Apply<Windows::Data::Platform::Partitioning::SystemPartitionIndex::Schema,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >(To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &,Windows::Data::Platform::Partitioning::SystemPartitionIndex::Schema const &);
	};

	class DynamicParser<MafiaBinaryReader<InputBuffer> &>
	{
		bool ReadFields<DetectUnknownFieldsTransform>(RuntimeSchema const &,DetectUnknownFieldsTransform const &);
		bool ReadFields<Marshaler<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<To<FieldDef,RequiredFieldValiadator<FieldDef> > >(RuntimeSchema const &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
		bool ReadFields<To<Metadata,RequiredFieldValiadator<Metadata> > >(RuntimeSchema const &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
		bool ReadFields<To<SchemaDef,RequiredFieldValiadator<SchemaDef> > >(RuntimeSchema const &,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &);
		bool ReadFields<To<StructDef,RequiredFieldValiadator<StructDef> > >(RuntimeSchema const &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
		bool ReadFields<To<TypeDef,RequiredFieldValiadator<TypeDef> > >(RuntimeSchema const &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
		bool ReadFields<To<Variant,RequiredFieldValiadator<Variant> > >(RuntimeSchema const &,To<Variant,RequiredFieldValiadator<Variant> > const &);
		bool ReadFields<To<Void,RequiredFieldValiadator<Void> > >(RuntimeSchema const &,To<Void,RequiredFieldValiadator<Void> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
		bool ReadFields<ToWalkable>(RuntimeSchema const &,ToWalkable const &);
		bool UnknownField<DetectUnknownFieldsTransform>(unsigned short,_bond_enumerators::BondDataType::BondDataType,DetectUnknownFieldsTransform const &);
		bool UnknownField<Marshaler<CompactBinaryWriter<OutputCounter> > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		bool UnknownField<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<CompactBinaryWriter<OutputCounter> > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		bool UnknownField<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(unsigned short,_bond_enumerators::BondDataType::BondDataType,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool UnknownField<ToWalkable>(unsigned short,_bond_enumerators::BondDataType::BondDataType,ToWalkable const &);
		void ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(boost::mpl::l_iter<boost::mpl::l_end> const &,unsigned short &,_bond_enumerators::BondDataType::BondDataType &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
	public:
		bool Apply<RuntimeSchema,DetectUnknownFieldsTransform>(DetectUnknownFieldsTransform const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,ToWalkable>(ToWalkable const &,RuntimeSchema const &);
	};

	class Exception
	{
	protected:
		Exception(char const *);
	public:
		Exception(Exception const &);
		virtual char const * what();
		virtual ~Exception();
	};

	struct FieldDef
	{
		class Schema
		{
			static Metadata const s_id_metadata;
			static Metadata const s_metadata_metadata;
			static Metadata const s_type_metadata;
		public:
			static Metadata GetMetadata();
			static Metadata const metadata;
		};

		FieldDef();
		FieldDef(FieldDef const &);
		~FieldDef();
	};

	namespace GUID
	{
		class Schema
		{
			static Metadata const s_Data1_metadata;
			static Metadata const s_Data2_metadata;
			static Metadata const s_Data3_metadata;
			static Metadata const s_Data4_metadata;
		public:
			static Metadata GetMetadata();
			static Metadata const metadata;
		};

	};

	class InitSchemaDef
	{
		TypeDef GetTypeDef<TypeDef>();
		TypeDef GetTypeDef<nullable<TypeDef,detail::no_allocator,0> >();
		TypeDef GetTypeDef<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >();
		TypeDef GetTypeDef<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Calling::CallHistoryItem,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Calling::CallHistoryItem> > > >();
		TypeDef GetTypeDef<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >();
		TypeDef GetTypeDef<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >();
		TypeDef GetTypeDef<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >();
		TypeDef GetTypeDef<std::vector<FieldDef,std::allocator<FieldDef> > >();
		TypeDef GetTypeDef<std::vector<StructDef,std::allocator<StructDef> > >();
		TypeDef GetTypeDef<std::vector<Windows::Data::Calling::CallFavoriteItem,std::allocator<Windows::Data::Calling::CallFavoriteItem> > >();
		unsigned short GetStructDef<FieldDef>();
		unsigned short GetStructDef<Metadata>();
		unsigned short GetStructDef<StructDef>();
		unsigned short GetStructDef<TypeDef>();
		unsigned short GetStructDef<Variant>();
		unsigned short GetStructDef<Windows::Data::Accessibility::AccessibilityOptions>();
		unsigned short GetStructDef<Windows::Data::Accessibility::Caption>();
		unsigned short GetStructDef<Windows::Data::Accessibility::Experience::AccessibilityOptions>();
		unsigned short GetStructDef<Windows::Data::Accessibility::Experience::Caption>();
		unsigned short GetStructDef<Windows::Data::Accessibility::Experience::Magnifier>();
		unsigned short GetStructDef<Windows::Data::Accessibility::Experience::SoundSentry>();
		unsigned short GetStructDef<Windows::Data::Accessibility::Keyboard>();
		unsigned short GetStructDef<Windows::Data::Accessibility::Mouse>();
		unsigned short GetStructDef<Windows::Data::Accessibility::Narrator>();
		unsigned short GetStructDef<Windows::Data::Calling::CallFavoriteItem>();
		unsigned short GetStructDef<Windows::Data::Calling::CallHistoryItem>();
		unsigned short GetStructDef<Windows::Data::Common::Color>();
		unsigned short GetStructDef<Windows::Data::Platform::Partitioning::PartitionInfo>();
		unsigned short GetStructDef<Windows::Data::Platform::Partitioning::PartitionMetadata>();
		unsigned short GetStructDef<Windows::Data::Platform::Partitioning::PartitionSet>();
	public:
		InitSchemaDef(SchemaDef &);
		bool Field<Metadata>(unsigned short,Metadata const &,Metadata const &);
		bool Field<TypeDef>(unsigned short,Metadata const &,TypeDef const &);
		bool Field<Variant>(unsigned short,Metadata const &,Variant const &);
		bool Field<Windows::Data::Accessibility::AccessibilityOptions>(unsigned short,Metadata const &,Windows::Data::Accessibility::AccessibilityOptions const &);
		bool Field<Windows::Data::Accessibility::Caption>(unsigned short,Metadata const &,Windows::Data::Accessibility::Caption const &);
		bool Field<Windows::Data::Accessibility::Experience::AccessibilityOptions>(unsigned short,Metadata const &,Windows::Data::Accessibility::Experience::AccessibilityOptions const &);
		bool Field<Windows::Data::Accessibility::Experience::Caption>(unsigned short,Metadata const &,Windows::Data::Accessibility::Experience::Caption const &);
		bool Field<Windows::Data::Accessibility::Experience::Magnifier>(unsigned short,Metadata const &,Windows::Data::Accessibility::Experience::Magnifier const &);
		bool Field<Windows::Data::Accessibility::Experience::SoundSentry>(unsigned short,Metadata const &,Windows::Data::Accessibility::Experience::SoundSentry const &);
		bool Field<Windows::Data::Accessibility::Keyboard>(unsigned short,Metadata const &,Windows::Data::Accessibility::Keyboard const &);
		bool Field<Windows::Data::Accessibility::Mouse>(unsigned short,Metadata const &,Windows::Data::Accessibility::Mouse const &);
		bool Field<Windows::Data::Accessibility::Narrator>(unsigned short,Metadata const &,Windows::Data::Accessibility::Narrator const &);
		bool Field<Windows::Data::Common::Color>(unsigned short,Metadata const &,Windows::Data::Common::Color const &);
		bool Field<__int64>(unsigned short,Metadata const &,__int64 const &);
		bool Field<blob>(unsigned short,Metadata const &,blob const &);
		bool Field<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >(unsigned short,Metadata const &,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > const &);
		bool Field<bool>(unsigned short,Metadata const &,bool const &);
		bool Field<double>(unsigned short,Metadata const &,double const &);
		bool Field<float>(unsigned short,Metadata const &,float const &);
		bool Field<int>(unsigned short,Metadata const &,int const &);
		bool Field<nullable<TypeDef,detail::no_allocator,0> >(unsigned short,Metadata const &,nullable<TypeDef,detail::no_allocator,0> const &);
		bool Field<signed char>(unsigned short,Metadata const &,signed char const &);
		bool Field<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,Metadata const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		bool Field<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short,Metadata const &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
		bool Field<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >(unsigned short,Metadata const &,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &);
		bool Field<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Calling::CallHistoryItem,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Calling::CallHistoryItem> > > >(unsigned short,Metadata const &,std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Calling::CallHistoryItem,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Calling::CallHistoryItem> > > const &);
		bool Field<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >(unsigned short,Metadata const &,std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > const &);
		bool Field<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >(unsigned short,Metadata const &,std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > const &);
		bool Field<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >(unsigned short,Metadata const &,std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > const &);
		bool Field<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >(unsigned short,Metadata const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &);
		bool Field<std::vector<FieldDef,std::allocator<FieldDef> > >(unsigned short,Metadata const &,std::vector<FieldDef,std::allocator<FieldDef> > const &);
		bool Field<std::vector<StructDef,std::allocator<StructDef> > >(unsigned short,Metadata const &,std::vector<StructDef,std::allocator<StructDef> > const &);
		bool Field<std::vector<Windows::Data::Calling::CallFavoriteItem,std::allocator<Windows::Data::Calling::CallFavoriteItem> > >(unsigned short,Metadata const &,std::vector<Windows::Data::Calling::CallFavoriteItem,std::allocator<Windows::Data::Calling::CallFavoriteItem> > const &);
		bool Field<unsigned __int64>(unsigned short,Metadata const &,unsigned __int64 const &);
		bool Field<unsigned char>(unsigned short,Metadata const &,unsigned char const &);
		bool Field<unsigned int>(unsigned short,Metadata const &,unsigned int const &);
		bool Field<unsigned short>(unsigned short,Metadata const &,unsigned short const &);
	};

	class InputBuffer
	{
	protected:
		void EofException(unsigned int);
	public:
		void Read(unsigned char &);
		void Read(void *,unsigned int);
		void Read<__int64>(__int64 &);
		void Read<bool>(bool &);
		void Read<char>(char &);
		void Read<double>(double &);
		void Read<float>(float &);
		void Read<int>(int &);
		void Read<short>(short &);
		void Read<signed char>(signed char &);
		void Read<unsigned __int64>(unsigned __int64 &);
		void Read<unsigned int>(unsigned int &);
		void Read<unsigned short>(unsigned short &);
		void ReadVariableUnsigned<unsigned __int64>(unsigned __int64 &);
		void ReadVariableUnsigned<unsigned int>(unsigned int &);
		void ReadVariableUnsigned<unsigned short>(unsigned short &);
		~InputBuffer();
	};

	class JSONReader<InputBuffer>
	{
		static bool IsPseudoFieldBaseStart(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		static void RaiseError(boost::basic_format<char,std::char_traits<char>,std::allocator<char> > const &);
		void GetField(char const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &);
		void GetString(std::basic_string<char,std::char_traits<char>,std::allocator<char> > &);
		void MatchTokenImpl(json::TokenType,bool,bool);
		void SkipType(_bond_enumerators::BondDataType::BondDataType);
	public:
		JSONReader<InputBuffer>(InputBuffer const &);
		JSONReader<InputBuffer>(JSONReader<InputBuffer> const &);
		bool ReadVersion();
		void Read(bool &);
		void Read<__int64>(__int64 &);
		void Read<double>(double &);
		void Read<float>(float &);
		void Read<int>(int &);
		void Read<short>(short &);
		void Read<signed char>(signed char &);
		void Read<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > &);
		void Read<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > &);
		void Read<unsigned __int64>(unsigned __int64 &);
		void Read<unsigned char>(unsigned char &);
		void Read<unsigned int>(unsigned int &);
		void Read<unsigned short>(unsigned short &);
		void ReadContainerBegin(unsigned int &,_bond_enumerators::BondDataType::BondDataType &);
		void ReadContainerBegin(unsigned int &,std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType> &);
		void ReadContainerEnd();
		void ReadFieldBegin(_bond_enumerators::BondDataType::BondDataType &,unsigned short &);
		void ReadFieldEnd();
		void ReadStructBegin();
		void ReadStructEnd();
		void Skip(_bond_enumerators::BondDataType::BondDataType);
		~JSONReader<InputBuffer>();
	};

	class JSONWriter<OutputMemoryStream<std::allocator<char> > >
	{
		static bool GroupItems(_bond_enumerators::BondDataType::BondDataType);
		static void Encode(std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		void CheckEndOfListItem(bool);
		void Indent();
		void Print(boost::basic_format<char,std::char_traits<char>,std::allocator<char> > const &);
		void PrintLine(boost::basic_format<char,std::char_traits<char>,std::allocator<char> > const &);
		void PrintValue(boost::basic_format<char,std::char_traits<char>,std::allocator<char> > const &);
		void PrintValue(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		void PushState(bool,bool);
		void WriteBaseBegin();
		void WriteFieldBeginImpl(_bond_enumerators::BondDataType::BondDataType,unsigned short,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
	public:
		JSONWriter<OutputMemoryStream<std::allocator<char> > >(OutputMemoryStream<std::allocator<char> > &);
		void Write<__int64>(__int64 const &);
		void Write<double>(double const &);
		void Write<float>(float const &);
		void Write<int>(int const &);
		void Write<short>(short const &);
		void Write<signed char>(signed char const &);
		void Write<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		void Write<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
		void Write<unsigned __int64>(unsigned __int64 const &);
		void Write<unsigned char>(unsigned char const &);
		void Write<unsigned int>(unsigned int const &);
		void Write<unsigned short>(unsigned short const &);
		void WriteContainerBegin(unsigned int,_bond_enumerators::BondDataType::BondDataType);
		void WriteContainerBegin(unsigned int,std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType>);
		void WriteContainerEnd();
		void WriteFieldBegin(_bond_enumerators::BondDataType::BondDataType,unsigned short);
		void WriteFieldEnd();
		void WriteStructBegin(Metadata const &,bool);
		void WriteStructEnd(bool);
		~JSONWriter<OutputMemoryStream<std::allocator<char> > >();
	};

	struct JsonPrettyReader<InputBuffer>
	{
		JsonPrettyReader<InputBuffer> & operator=(JsonPrettyReader<InputBuffer> const &);
		JsonPrettyReader<InputBuffer>(JsonPrettyReader<InputBuffer> const &);
		~JsonPrettyReader<InputBuffer>();
	};

	class MafiaBinaryReader<InputBuffer>
	{
	protected:
		void SkipMafiaType(MafiaBinaryCommon<void>::MafiaDataType);
	public:
		bool ReadVersion();
		void ReadContainerBegin(unsigned int &,std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType> &);
		void ReadFieldBegin(_bond_enumerators::BondDataType::BondDataType &,unsigned short &);
		void Skip(_bond_enumerators::BondDataType::BondDataType);
		~MafiaBinaryReader<InputBuffer>();
	};

	struct MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > >
	{
		void Write<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		void WriteContainerBegin(unsigned int,std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType>);
	};

	struct Marshaler<CompactBinaryWriter<OutputCounter> >
	{
		void Begin(Metadata const &);
	};

	struct Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >
	{
		void Begin(Metadata const &);
	};

	struct Metadata
	{
		class Schema
		{
			static Metadata const s_attributes_metadata;
			static Metadata const s_default_value_metadata;
			static Metadata const s_modifier_metadata;
			static Metadata const s_name_metadata;
			static Metadata const s_qualified_name_metadata;
		public:
			static Metadata GetMetadata();
			static Metadata const metadata;
		};

		Metadata & operator=(Metadata const &);
		Metadata();
		Metadata(Metadata const &);
		~Metadata();
	};

	struct OutputMemoryStream<std::allocator<char> >
	{
		blob GetBuffer();
		void Write(blob const &);
		void Write(void const *,unsigned int);
		void Write<__int64>(__int64 const &);
		void Write<bool>(bool const &);
		void Write<double>(double const &);
		void Write<float>(float const &);
		void Write<int>(int const &);
		void Write<short>(short const &);
		void Write<signed char>(signed char const &);
		void Write<unsigned __int64>(unsigned __int64 const &);
		void Write<unsigned char>(unsigned char const &);
		void Write<unsigned int>(unsigned int const &);
		void Write<unsigned short>(unsigned short const &);
		void WriteVariableUnsigned<unsigned __int64>(unsigned __int64);
		void WriteVariableUnsigned<unsigned int>(unsigned int);
		void WriteVariableUnsigned<unsigned short>(unsigned short);
		~OutputMemoryStream<std::allocator<char> >();
	};

	namespace Polymorphic
	{
		class Schema
		{
			static Metadata const s_bond_meta_metadata;
		public:
			static Metadata GetMetadata();
			static Metadata const metadata;
		};

	};

	struct PremadeSchemas
	{
		PremadeSchemas();
		~PremadeSchemas();
	};

	struct ProtocolReader<InputBuffer>
	{
		ProtocolReader<InputBuffer>(ProtocolReader<InputBuffer> const &);
		ProtocolReader<InputBuffer><JSONReader<InputBuffer> >(JSONReader<InputBuffer> const &);
		ProtocolReader<InputBuffer><MafiaBinaryReader<InputBuffer> >(MafiaBinaryReader<InputBuffer> const &);
		ProtocolReader<InputBuffer><SimpleProtocolReader<InputBuffer> >(SimpleProtocolReader<InputBuffer> const &);
		~ProtocolReader<InputBuffer>();
	};

	struct RuntimeSchema
	{
		RuntimeSchema GetBaseSchema();
		RuntimeSchema(RuntimeSchema const &);
		RuntimeSchema(RuntimeSchema const &,FieldDef const &);
		RuntimeSchema(RuntimeSchema const &,TypeDef const &);
		~RuntimeSchema();
	};

	struct SchemaDef
	{
		class Schema
		{
			static Metadata const s_root_metadata;
			static Metadata const s_structs_metadata;
		public:
			static Metadata GetMetadata();
			static Metadata const metadata;
		};

		SchemaDef();
		~SchemaDef();
	};

	struct SerializableExceptionBase
	{
		class Schema
		{
			static Metadata const s_m_message_metadata;
		public:
			static Metadata GetMetadata();
			static Metadata const metadata;
		};

		SerializableExceptionBase(SerializableExceptionBase const &);
	};

	class Serializer<CompactBinaryWriter<OutputCounter> >
	{
		void Write<CompactBinaryReader<InputBuffer> &,__int64>(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,bool>(value<bool,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,double>(value<double,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,float>(value<float,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,int>(value<int,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,short>(value<short,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,signed char>(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned char>(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned int>(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned short>(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,void>(value<void,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,__int64>(value<__int64,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,bool>(value<bool,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,double>(value<double,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,float>(value<float,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,int>(value<int,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,short>(value<short,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,signed char>(value<signed char,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned char>(value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned int>(value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned short>(value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,void>(value<void,JSONReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,__int64>(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,bool>(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,double>(value<double,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,float>(value<float,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,int>(value<int,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,short>(value<short,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,signed char>(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned char>(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned int>(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned short>(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,void>(value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,__int64>(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,bool>(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,double>(value<double,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,float>(value<float,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,int>(value<int,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,short>(value<short,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,signed char>(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned char>(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned int>(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned short>(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,void>(value<void,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<TypeDef>(TypeDef const &);
		void Write<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &);
		void Write<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > const &);
		void Write<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > const &);
		void Write<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > const &);
		void Write<std::vector<FieldDef,std::allocator<FieldDef> > >(std::vector<FieldDef,std::allocator<FieldDef> > const &);
		void Write<std::vector<StructDef,std::allocator<StructDef> > >(std::vector<StructDef,std::allocator<StructDef> > const &);
		void WriteField<Metadata>(unsigned short,Metadata const &,Metadata const &);
		void WriteField<Variant>(unsigned short,Metadata const &,Variant const &);
		void WriteField<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >(unsigned short,Metadata const &,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > const &);
		void WriteField<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >(unsigned short,Metadata const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &);
	public:
		bool Base<bonded<void,CompactBinaryReader<InputBuffer> &> >(bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool Base<bonded<void,JSONReader<InputBuffer> &> >(bonded<void,JSONReader<InputBuffer> &> const &);
		bool Base<bonded<void,MafiaBinaryReader<InputBuffer> &> >(bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool Base<bonded<void,SimpleProtocolReader<InputBuffer> &> >(bonded<void,SimpleProtocolReader<InputBuffer> &> const &);
		bool Field<bool>(unsigned short,Metadata const &,bool const &);
		bool Field<nullable<TypeDef,detail::no_allocator,0> >(unsigned short,Metadata const &,nullable<TypeDef,detail::no_allocator,0> const &);
		bool Field<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,Metadata const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		bool Field<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short,Metadata const &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
		bool Field<unsigned __int64>(unsigned short,Metadata const &,unsigned __int64 const &);
		bool Field<unsigned char>(unsigned short,Metadata const &,unsigned char const &);
		bool Field<unsigned short>(unsigned short,Metadata const &,unsigned short const &);
		bool UnknownField<bonded<void,CompactBinaryReader<InputBuffer> &> >(unsigned short,bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool UnknownField<bonded<void,JSONReader<InputBuffer> &> >(unsigned short,bonded<void,JSONReader<InputBuffer> &> const &);
		bool UnknownField<bonded<void,MafiaBinaryReader<InputBuffer> &> >(unsigned short,bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool UnknownField<value<__int64,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<__int64,JSONReader<InputBuffer> &,void> >(unsigned short,value<__int64,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<bool,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,JSONReader<InputBuffer> &,void> >(unsigned short,value<bool,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<double,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,JSONReader<InputBuffer> &,void> >(unsigned short,value<double,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<double,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<float,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,JSONReader<InputBuffer> &,void> >(unsigned short,value<float,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<float,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<int,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,JSONReader<InputBuffer> &,void> >(unsigned short,value<int,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<int,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<short,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,JSONReader<InputBuffer> &,void> >(unsigned short,value<short,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<short,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,JSONReader<InputBuffer> &,void> >(unsigned short,value<signed char,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<void,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,JSONReader<InputBuffer> &,void> >(unsigned short,value<void,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Begin(Metadata const &);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<__int64,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<__int64,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<bool,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<bool,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<bool,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<double,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<double,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<double,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<double,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<double,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<float,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<float,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<float,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<float,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<float,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<int,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<int,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<int,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<int,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<int,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<short,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<short,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<short,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<short,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<short,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<signed char,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<signed char,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<unsigned char,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<unsigned int,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<__int64,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<bool,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<double,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<double,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<float,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<float,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<int,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<short,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<signed char,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<__int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<bool,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<double,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<float,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<signed char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(value<unsigned short,JSONReader<InputBuffer> &,void> const &,value<void,JSONReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<bool,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<double,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<float,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<int,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<short,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<__int64,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<bool,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<double,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<float,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<int,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<short,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<signed char,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
		void Container<value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,unsigned int);
	};

	class Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >
	{
		void Write<CompactBinaryReader<InputBuffer> &,__int64>(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,bool>(value<bool,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,double>(value<double,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,float>(value<float,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,int>(value<int,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,short>(value<short,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,signed char>(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned char>(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned int>(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned short>(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,void>(value<void,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,__int64>(value<__int64,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,bool>(value<bool,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,double>(value<double,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,float>(value<float,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,int>(value<int,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,short>(value<short,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,signed char>(value<signed char,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned char>(value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned int>(value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned short>(value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,void>(value<void,JSONReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,__int64>(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,bool>(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,double>(value<double,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,float>(value<float,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,int>(value<int,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,short>(value<short,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,signed char>(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned char>(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned int>(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned short>(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,void>(value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,__int64>(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,bool>(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,double>(value<double,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,float>(value<float,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,int>(value<int,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,short>(value<short,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,signed char>(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned char>(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned int>(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned short>(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,void>(value<void,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<TypeDef>(TypeDef const &);
		void Write<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &);
		void Write<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > const &);
		void Write<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > const &);
		void Write<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > const &);
		void WriteField<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >(unsigned short,Metadata const &,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &);
		void WriteField<std::vector<FieldDef,std::allocator<FieldDef> > >(unsigned short,Metadata const &,std::vector<FieldDef,std::allocator<FieldDef> > const &);
		void WriteField<std::vector<StructDef,std::allocator<StructDef> > >(unsigned short,Metadata const &,std::vector<StructDef,std::allocator<StructDef> > const &);
	public:
		bool Base<bonded<void,CompactBinaryReader<InputBuffer> &> >(bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool Base<bonded<void,JSONReader<InputBuffer> &> >(bonded<void,JSONReader<InputBuffer> &> const &);
		bool Base<bonded<void,MafiaBinaryReader<InputBuffer> &> >(bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool Base<bonded<void,SimpleProtocolReader<InputBuffer> &> >(bonded<void,SimpleProtocolReader<InputBuffer> &> const &);
		bool Field<bonded<void,MafiaBinaryReader<InputBuffer> &> >(unsigned short,Metadata const &,bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool Field<bool>(unsigned short,Metadata const &,bool const &);
		bool Field<nullable<TypeDef,detail::no_allocator,0> >(unsigned short,Metadata const &,nullable<TypeDef,detail::no_allocator,0> const &);
		bool Field<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,Metadata const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		bool Field<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(unsigned short,Metadata const &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
		bool Field<unsigned __int64>(unsigned short,Metadata const &,unsigned __int64 const &);
		bool Field<unsigned char>(unsigned short,Metadata const &,unsigned char const &);
		bool Field<unsigned short>(unsigned short,Metadata const &,unsigned short const &);
		bool Field<value<__int64,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<__int64,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<bool,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<bool,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<double,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<double,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<float,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<float,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<int,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<int,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<short,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<short,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<signed char,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<signed char,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned __int64,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned char,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned int,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned short,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<void,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<bonded<void,CompactBinaryReader<InputBuffer> &> >(unsigned short,bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool UnknownField<bonded<void,JSONReader<InputBuffer> &> >(unsigned short,bonded<void,JSONReader<InputBuffer> &> const &);
		bool UnknownField<bonded<void,MafiaBinaryReader<InputBuffer> &> >(unsigned short,bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool UnknownField<value<__int64,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<__int64,JSONReader<InputBuffer> &,void> >(unsigned short,value<__int64,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<bool,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,JSONReader<InputBuffer> &,void> >(unsigned short,value<bool,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<double,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,JSONReader<InputBuffer> &,void> >(unsigned short,value<double,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<double,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<float,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,JSONReader<InputBuffer> &,void> >(unsigned short,value<float,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<float,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<int,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,JSONReader<InputBuffer> &,void> >(unsigned short,value<int,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<int,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<short,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,JSONReader<InputBuffer> &,void> >(unsigned short,value<short,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<short,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,JSONReader<InputBuffer> &,void> >(unsigned short,value<signed char,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<void,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,JSONReader<InputBuffer> &,void> >(unsigned short,value<void,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Begin(Metadata const &);
		void UnknownEnd();
	};

	class Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >
	{
		void Write<CompactBinaryReader<InputBuffer> &,__int64>(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,bool>(value<bool,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,double>(value<double,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,float>(value<float,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,int>(value<int,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,short>(value<short,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,signed char>(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned char>(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned int>(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned short>(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,void>(value<void,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,__int64>(value<__int64,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,bool>(value<bool,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,double>(value<double,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,float>(value<float,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,int>(value<int,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,short>(value<short,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,signed char>(value<signed char,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned char>(value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned int>(value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned short>(value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,void>(value<void,JSONReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,__int64>(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,bool>(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,double>(value<double,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,float>(value<float,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,int>(value<int,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,short>(value<short,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,signed char>(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned char>(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned int>(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned short>(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,void>(value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,__int64>(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,bool>(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,double>(value<double,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,float>(value<float,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,int>(value<int,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,short>(value<short,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,signed char>(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned char>(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned int>(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned short>(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,void>(value<void,SimpleProtocolReader<InputBuffer> &,void> const &);
	public:
		bool Base<bonded<void,CompactBinaryReader<InputBuffer> &> >(bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool Base<bonded<void,JSONReader<InputBuffer> &> >(bonded<void,JSONReader<InputBuffer> &> const &);
		bool Base<bonded<void,MafiaBinaryReader<InputBuffer> &> >(bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool Base<bonded<void,SimpleProtocolReader<InputBuffer> &> >(bonded<void,SimpleProtocolReader<InputBuffer> &> const &);
		bool Field<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,Metadata const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		bool Field<unsigned __int64>(unsigned short,Metadata const &,unsigned __int64 const &);
		bool Field<value<__int64,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<__int64,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<bool,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<bool,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<double,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<double,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<float,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<float,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<int,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<int,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<short,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<short,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<signed char,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<signed char,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned __int64,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned char,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned int,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned short,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<bonded<void,CompactBinaryReader<InputBuffer> &> >(unsigned short,bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool UnknownField<bonded<void,JSONReader<InputBuffer> &> >(unsigned short,bonded<void,JSONReader<InputBuffer> &> const &);
		bool UnknownField<bonded<void,MafiaBinaryReader<InputBuffer> &> >(unsigned short,bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool UnknownField<value<__int64,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<__int64,JSONReader<InputBuffer> &,void> >(unsigned short,value<__int64,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<bool,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,JSONReader<InputBuffer> &,void> >(unsigned short,value<bool,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<double,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,JSONReader<InputBuffer> &,void> >(unsigned short,value<double,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<double,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<float,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,JSONReader<InputBuffer> &,void> >(unsigned short,value<float,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<float,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<int,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,JSONReader<InputBuffer> &,void> >(unsigned short,value<int,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<int,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<short,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,JSONReader<InputBuffer> &,void> >(unsigned short,value<short,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<short,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,JSONReader<InputBuffer> &,void> >(unsigned short,value<signed char,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<void,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,JSONReader<InputBuffer> &,void> >(unsigned short,value<void,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
	};

	class Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >
	{
		void Write<CompactBinaryReader<InputBuffer> &,__int64>(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,bool>(value<bool,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,double>(value<double,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,float>(value<float,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,int>(value<int,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,short>(value<short,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,signed char>(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned char>(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned int>(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned short>(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,void>(value<void,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,__int64>(value<__int64,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,bool>(value<bool,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,double>(value<double,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,float>(value<float,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,int>(value<int,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,short>(value<short,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,signed char>(value<signed char,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned char>(value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned int>(value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned short>(value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,void>(value<void,JSONReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,__int64>(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,bool>(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,double>(value<double,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,float>(value<float,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,int>(value<int,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,short>(value<short,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,signed char>(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned char>(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned int>(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned short>(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,void>(value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,__int64>(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,bool>(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,double>(value<double,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,float>(value<float,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,int>(value<int,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,short>(value<short,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,signed char>(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned char>(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned int>(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned short>(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,void>(value<void,SimpleProtocolReader<InputBuffer> &,void> const &);
		void WriteField<bonded<void,CompactBinaryReader<InputBuffer> &> >(unsigned short,Metadata const &,bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		void WriteField<bonded<void,JSONReader<InputBuffer> &> >(unsigned short,Metadata const &,bonded<void,JSONReader<InputBuffer> &> const &);
		void WriteField<bonded<void,MafiaBinaryReader<InputBuffer> &> >(unsigned short,Metadata const &,bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		void WriteField<bonded<void,SimpleProtocolReader<InputBuffer> &> >(unsigned short,Metadata const &,bonded<void,SimpleProtocolReader<InputBuffer> &> const &);
		void WriteField<value<void,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<void,CompactBinaryReader<InputBuffer> &,void> const &);
		void WriteField<value<void,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<void,JSONReader<InputBuffer> &,void> const &);
		void WriteField<value<void,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
		void WriteField<value<void,SimpleProtocolReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<void,SimpleProtocolReader<InputBuffer> &,void> const &);
	public:
		bool Base<bonded<void,CompactBinaryReader<InputBuffer> &> >(bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool Base<bonded<void,JSONReader<InputBuffer> &> >(bonded<void,JSONReader<InputBuffer> &> const &);
		bool Base<bonded<void,MafiaBinaryReader<InputBuffer> &> >(bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool Base<bonded<void,SimpleProtocolReader<InputBuffer> &> >(bonded<void,SimpleProtocolReader<InputBuffer> &> const &);
		bool Field<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(unsigned short,Metadata const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		bool Field<unsigned __int64>(unsigned short,Metadata const &,unsigned __int64 const &);
		bool Field<value<__int64,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<__int64,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<bool,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<bool,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<double,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<double,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<float,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<float,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<int,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<int,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<short,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<short,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<signed char,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<signed char,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned __int64,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned char,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned int,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		bool Field<value<unsigned short,JSONReader<InputBuffer> &,void> >(unsigned short,Metadata const &,value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<bonded<void,CompactBinaryReader<InputBuffer> &> >(unsigned short,bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool UnknownField<bonded<void,JSONReader<InputBuffer> &> >(unsigned short,bonded<void,JSONReader<InputBuffer> &> const &);
		bool UnknownField<bonded<void,MafiaBinaryReader<InputBuffer> &> >(unsigned short,bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool UnknownField<value<__int64,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<__int64,JSONReader<InputBuffer> &,void> >(unsigned short,value<__int64,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<__int64,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<bool,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,JSONReader<InputBuffer> &,void> >(unsigned short,value<bool,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<bool,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<double,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,JSONReader<InputBuffer> &,void> >(unsigned short,value<double,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<double,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<double,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<float,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,JSONReader<InputBuffer> &,void> >(unsigned short,value<float,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<float,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<float,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<int,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,JSONReader<InputBuffer> &,void> >(unsigned short,value<int,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<int,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<int,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<short,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,JSONReader<InputBuffer> &,void> >(unsigned short,value<short,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<short,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<short,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,JSONReader<InputBuffer> &,void> >(unsigned short,value<signed char,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<signed char,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,JSONReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,CompactBinaryReader<InputBuffer> &,void> >(unsigned short,value<void,CompactBinaryReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,JSONReader<InputBuffer> &,void> >(unsigned short,value<void,JSONReader<InputBuffer> &,void> const &);
		bool UnknownField<value<void,MafiaBinaryReader<InputBuffer> &,void> >(unsigned short,value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
		void UnknownEnd();
	};

	class Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >
	{
		void Write<CompactBinaryReader<InputBuffer> &,__int64>(value<__int64,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,bool>(value<bool,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,double>(value<double,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,float>(value<float,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,int>(value<int,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,short>(value<short,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,signed char>(value<signed char,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned char>(value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned int>(value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,unsigned short>(value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<CompactBinaryReader<InputBuffer> &,void>(value<void,CompactBinaryReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,__int64>(value<__int64,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,bool>(value<bool,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,double>(value<double,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,float>(value<float,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,int>(value<int,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,short>(value<short,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,signed char>(value<signed char,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned char>(value<unsigned char,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned int>(value<unsigned int,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,unsigned short>(value<unsigned short,JSONReader<InputBuffer> &,void> const &);
		void Write<JSONReader<InputBuffer> &,void>(value<void,JSONReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,__int64>(value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,bool>(value<bool,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,double>(value<double,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,float>(value<float,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,int>(value<int,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,short>(value<short,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,signed char>(value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned char>(value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned int>(value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,unsigned short>(value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<MafiaBinaryReader<InputBuffer> &,void>(value<void,MafiaBinaryReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,__int64>(value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,bool>(value<bool,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,double>(value<double,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,float>(value<float,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,int>(value<int,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,short>(value<short,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,signed char>(value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned __int64>(value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned char>(value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned int>(value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,unsigned short>(value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &);
		void Write<SimpleProtocolReader<InputBuffer> &,void>(value<void,SimpleProtocolReader<InputBuffer> &,void> const &);
	public:
		bool Base<bonded<void,CompactBinaryReader<InputBuffer> &> >(bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool Base<bonded<void,JSONReader<InputBuffer> &> >(bonded<void,JSONReader<InputBuffer> &> const &);
		bool Base<bonded<void,MafiaBinaryReader<InputBuffer> &> >(bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool Base<bonded<void,SimpleProtocolReader<InputBuffer> &> >(bonded<void,SimpleProtocolReader<InputBuffer> &> const &);
		bool UnknownField<bonded<void,JSONReader<InputBuffer> &> >(unsigned short,bonded<void,JSONReader<InputBuffer> &> const &);
	};

	struct SerializingTransform
	{
		~SerializingTransform();
	};

	struct SimpleProtocolReader<InputBuffer>
	{
		SimpleProtocolReader<InputBuffer>(InputBuffer const &,unsigned short);
		bool ReadVersion();
		void Skip(_bond_enumerators::BondDataType::BondDataType);
		void Skip<FieldDef>(bonded<FieldDef,SimpleProtocolReader<InputBuffer> &> const &);
		void Skip<StructDef>(bonded<StructDef,SimpleProtocolReader<InputBuffer> &> const &);
		void Skip<TypeDef>(bonded<TypeDef,SimpleProtocolReader<InputBuffer> &> const &);
		void Skip<Windows::Data::Platform::Partitioning::PartitionInfo>(bonded<Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> &> const &);
		void Skip<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >();
		void Skip<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >();
		void Skip<void>(bonded<void,SimpleProtocolReader<InputBuffer> &> const &);
		~SimpleProtocolReader<InputBuffer>();
	};

	struct SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > >
	{
		void Write<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		void Write<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
		void WriteFieldOmitted(_bond_enumerators::BondDataType::BondDataType,unsigned short,Metadata const &);
	};

	class StaticParser<SimpleProtocolReader<InputBuffer> &>
	{
		bool ReadFields<DetectUnknownFieldsTransform>(RuntimeSchema const &,DetectUnknownFieldsTransform const &);
		bool ReadFields<Marshaler<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		bool ReadFields<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool ReadFields<To<FieldDef,RequiredFieldValiadator<FieldDef> > >(RuntimeSchema const &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
		bool ReadFields<To<Metadata,RequiredFieldValiadator<Metadata> > >(RuntimeSchema const &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
		bool ReadFields<To<SchemaDef,RequiredFieldValiadator<SchemaDef> > >(RuntimeSchema const &,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &);
		bool ReadFields<To<StructDef,RequiredFieldValiadator<StructDef> > >(RuntimeSchema const &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
		bool ReadFields<To<TypeDef,RequiredFieldValiadator<TypeDef> > >(RuntimeSchema const &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
		bool ReadFields<To<Variant,RequiredFieldValiadator<Variant> > >(RuntimeSchema const &,To<Variant,RequiredFieldValiadator<Variant> > const &);
		bool ReadFields<To<Void,RequiredFieldValiadator<Void> > >(RuntimeSchema const &,To<Void,RequiredFieldValiadator<Void> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
		bool ReadFields<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
		bool ReadFields<ToWalkable>(RuntimeSchema const &,ToWalkable const &);
	public:
		bool Apply<RuntimeSchema,DetectUnknownFieldsTransform>(DetectUnknownFieldsTransform const &,RuntimeSchema const &);
		bool Apply<RuntimeSchema,ToWalkable>(ToWalkable const &,RuntimeSchema const &);
	};

	struct StreamException
	{
		StreamException(StreamException const &);
		virtual ~StreamException();
	};

	struct StructDef
	{
		class Schema
		{
			static Metadata const s_base_def_metadata;
			static Metadata const s_fields_metadata;
			static Metadata const s_metadata_metadata;
		public:
			static Metadata GetMetadata();
			static Metadata const metadata;
		};

		StructDef();
		~StructDef();
	};

	struct To<SchemaDef,RequiredFieldValiadator<SchemaDef> >
	{
		bool Field<JSONReader<InputBuffer> &>(unsigned short,Metadata const &,value<void,JSONReader<InputBuffer> &,void> const &);
	};

	struct To<StructDef,RequiredFieldValiadator<StructDef> >
	{
		bool Field<JSONReader<InputBuffer> &>(unsigned short,Metadata const &,value<void,JSONReader<InputBuffer> &,void> const &);
	};

	struct To<TypeDef,RequiredFieldValiadator<TypeDef> >
	{
		bool Field<JSONReader<InputBuffer> &>(unsigned short,Metadata const &,value<void,JSONReader<InputBuffer> &,void> const &);
	};

	struct To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >
	{
		bool Field<JSONReader<InputBuffer> &,unsigned char>(unsigned short,Metadata const &,value<unsigned char,JSONReader<InputBuffer> &,void> const &);
	};

	struct To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> >
	{
		bool Field<JSONReader<InputBuffer> &,void>(unsigned short,Metadata const &,bonded<void,JSONReader<InputBuffer> &> const &);
		bool Field<JSONReader<InputBuffer> &>(unsigned short,Metadata const &,value<void,JSONReader<InputBuffer> &,void> const &);
	};

	struct TypeDef
	{
		class Schema
		{
			static Metadata const s_bonded_type_metadata;
			static Metadata const s_element_metadata;
			static Metadata const s_id_metadata;
			static Metadata const s_key_metadata;
			static Metadata const s_struct_def_metadata;
		public:
			static Metadata GetMetadata();
			static Metadata const metadata;
		};

		TypeDef & operator=(TypeDef const &);
		TypeDef(TypeDef const &);
		~TypeDef();
	};

	struct Variant
	{
		class Schema
		{
			static Metadata const s_double_value_metadata;
			static Metadata const s_int_value_metadata;
			static Metadata const s_nothing_metadata;
			static Metadata const s_string_value_metadata;
			static Metadata const s_uint_value_metadata;
			static Metadata const s_wstring_value_metadata;
		public:
			static Metadata GetMetadata();
			static Metadata const metadata;
		};

		Variant(Variant const &);
	};

	namespace Void
	{
		struct Schema
		{
			static Metadata GetMetadata();
			static Metadata const metadata;
		};

	};

	namespace _bond_enumerators
	{
		namespace BondDataType
		{
			bool ToEnum(BondDataType::BondDataType &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
			std::basic_string<char,std::char_traits<char>,std::allocator<char> > const & ToString(BondDataType::BondDataType);
			std::map<BondDataType::BondDataType,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<BondDataType::BondDataType>,std::allocator<std::pair<BondDataType::BondDataType const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_BondDataType;
			std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,BondDataType::BondDataType,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,BondDataType::BondDataType> > > const _name_to_value_BondDataType;
		};

		namespace Modifier
		{
			std::map<Modifier::Modifier,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<Modifier::Modifier>,std::allocator<std::pair<Modifier::Modifier const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_Modifier;
			std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Modifier::Modifier,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Modifier::Modifier> > > const _name_to_value_Modifier;
		};

		namespace ProtocolType
		{
			std::map<ProtocolType::ProtocolType,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<ProtocolType::ProtocolType>,std::allocator<std::pair<ProtocolType::ProtocolType const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const _value_to_name_ProtocolType;
			std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,ProtocolType::ProtocolType,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,ProtocolType::ProtocolType> > > const _name_to_value_ProtocolType;
		};

	};

	struct blob
	{
		struct deleter<std::shared_ptr<char const > >
		{
			void operator()(void const *);
			~deleter<std::shared_ptr<char const > >();
		};

		blob(blob const &);
		~blob();
	};

	struct bonded<FieldDef,CompactBinaryReader<InputBuffer> &>
	{
		~bonded<FieldDef,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<FieldDef,JSONReader<InputBuffer> &>
	{
		~bonded<FieldDef,JSONReader<InputBuffer> &>();
	};

	class bonded<FieldDef,MafiaBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<FieldDef,RequiredFieldValiadator<FieldDef> > >(To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
	public:
		~bonded<FieldDef,MafiaBinaryReader<InputBuffer> &>();
	};

	struct bonded<FieldDef,SimpleProtocolReader<InputBuffer> &>
	{
		~bonded<FieldDef,SimpleProtocolReader<InputBuffer> &>();
	};

	struct bonded<Metadata,CompactBinaryReader<InputBuffer> &>
	{
		~bonded<Metadata,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<Metadata,JSONReader<InputBuffer> &>
	{
		~bonded<Metadata,JSONReader<InputBuffer> &>();
	};

	class bonded<Metadata,MafiaBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Metadata,RequiredFieldValiadator<Metadata> > >(To<Metadata,RequiredFieldValiadator<Metadata> > const &);
	public:
		~bonded<Metadata,MafiaBinaryReader<InputBuffer> &>();
	};

	struct bonded<Metadata,SimpleProtocolReader<InputBuffer> &>
	{
		~bonded<Metadata,SimpleProtocolReader<InputBuffer> &>();
	};

	struct bonded<SchemaDef,ProtocolReader<InputBuffer> >
	{
		bonded<SchemaDef,ProtocolReader<InputBuffer> ><JSONReader<InputBuffer> >(JSONReader<InputBuffer> const &);
		~bonded<SchemaDef,ProtocolReader<InputBuffer> >();
	};

	struct bonded<StructDef,CompactBinaryReader<InputBuffer> &>
	{
		~bonded<StructDef,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<StructDef,JSONReader<InputBuffer> &>
	{
		~bonded<StructDef,JSONReader<InputBuffer> &>();
	};

	class bonded<StructDef,MafiaBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<StructDef,RequiredFieldValiadator<StructDef> > >(To<StructDef,RequiredFieldValiadator<StructDef> > const &);
	public:
		~bonded<StructDef,MafiaBinaryReader<InputBuffer> &>();
	};

	struct bonded<StructDef,SimpleProtocolReader<InputBuffer> &>
	{
		~bonded<StructDef,SimpleProtocolReader<InputBuffer> &>();
	};

	struct bonded<TypeDef,CompactBinaryReader<InputBuffer> &>
	{
		void Deserialize<TypeDef>(TypeDef &);
		~bonded<TypeDef,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<TypeDef,JSONReader<InputBuffer> &>
	{
		void Deserialize<TypeDef>(TypeDef &);
		~bonded<TypeDef,JSONReader<InputBuffer> &>();
	};

	class bonded<TypeDef,MafiaBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<TypeDef,RequiredFieldValiadator<TypeDef> > >(To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
	public:
		void Deserialize<TypeDef>(TypeDef &);
		~bonded<TypeDef,MafiaBinaryReader<InputBuffer> &>();
	};

	struct bonded<TypeDef,SimpleProtocolReader<InputBuffer> &>
	{
		void Deserialize<TypeDef>(TypeDef &);
		~bonded<TypeDef,SimpleProtocolReader<InputBuffer> &>();
	};

	struct bonded<Variant,CompactBinaryReader<InputBuffer> &>
	{
		~bonded<Variant,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<Variant,JSONReader<InputBuffer> &>
	{
		~bonded<Variant,JSONReader<InputBuffer> &>();
	};

	class bonded<Variant,MafiaBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Variant,RequiredFieldValiadator<Variant> > >(To<Variant,RequiredFieldValiadator<Variant> > const &);
	public:
		~bonded<Variant,MafiaBinaryReader<InputBuffer> &>();
	};

	struct bonded<Variant,SimpleProtocolReader<InputBuffer> &>
	{
		~bonded<Variant,SimpleProtocolReader<InputBuffer> &>();
	};

	struct bonded<Windows::Data::Platform::Partitioning::ActivePartitions,ProtocolReader<InputBuffer> >
	{
		bonded<Windows::Data::Platform::Partitioning::ActivePartitions,ProtocolReader<InputBuffer> ><JSONReader<InputBuffer> >(JSONReader<InputBuffer> const &);
		~bonded<Windows::Data::Platform::Partitioning::ActivePartitions,ProtocolReader<InputBuffer> >();
	};

	struct bonded<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,ProtocolReader<InputBuffer> >
	{
		bonded<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,ProtocolReader<InputBuffer> ><Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >(bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > const &);
		void Deserialize<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata>(Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata &);
		~bonded<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,ProtocolReader<InputBuffer> >();
	};

	class bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,CompactBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
	public:
		~bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,JSONReader<InputBuffer> &>
	{
		~bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,JSONReader<InputBuffer> &>();
	};

	class bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,MafiaBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
	public:
		~bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,MafiaBinaryReader<InputBuffer> &>();
	};

	struct bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,SimpleProtocolReader<InputBuffer> &>
	{
		~bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,SimpleProtocolReader<InputBuffer> &>();
	};

	class bonded<Windows::Data::Platform::Partitioning::PartitionInfo,CompactBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
	public:
		~bonded<Windows::Data::Platform::Partitioning::PartitionInfo,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> &>
	{
		~bonded<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> &>();
	};

	class bonded<Windows::Data::Platform::Partitioning::PartitionInfo,MafiaBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
	public:
		~bonded<Windows::Data::Platform::Partitioning::PartitionInfo,MafiaBinaryReader<InputBuffer> &>();
	};

	struct bonded<Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> &>
	{
		~bonded<Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> &>();
	};

	struct bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryReader<InputBuffer> &>
	{
		~bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONReader<InputBuffer> &>
	{
		~bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONReader<InputBuffer> &>();
	};

	class bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
	public:
		~bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryReader<InputBuffer> &>();
	};

	class bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >
	{
		bool _Apply<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool _Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
	public:
		bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > & operator=(bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > const &);
		bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >();
		bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> ><CompactBinaryReader<InputBuffer> >(CompactBinaryReader<InputBuffer> const &);
		bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> ><JSONReader<InputBuffer> &>(bonded<void,JSONReader<InputBuffer> &> const &);
		bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> ><JSONReader<InputBuffer> >(JSONReader<InputBuffer> const &);
		bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> ><MafiaBinaryReader<InputBuffer> >(MafiaBinaryReader<InputBuffer> const &);
		bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> ><SimpleProtocolReader<InputBuffer> >(SimpleProtocolReader<InputBuffer> const &);
		void Merge<Windows::Data::Platform::Partitioning::PartitionMetadata>(Windows::Data::Platform::Partitioning::PartitionMetadata const &);
		~bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >();
	};

	struct bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolReader<InputBuffer> &>
	{
		~bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolReader<InputBuffer> &>();
	};

	class bonded<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
	public:
		~bonded<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> &>
	{
		~bonded<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> &>();
	};

	class bonded<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> &>
	{
		bool _Apply<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
	public:
		~bonded<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> &>();
	};

	struct bonded<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> &>
	{
		~bonded<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> &>();
	};

	struct bonded<Windows::Data::Platform::Partitioning::SystemPartitionIndex,ProtocolReader<InputBuffer> >
	{
		bonded<Windows::Data::Platform::Partitioning::SystemPartitionIndex,ProtocolReader<InputBuffer> ><JSONReader<InputBuffer> >(JSONReader<InputBuffer> const &);
		~bonded<Windows::Data::Platform::Partitioning::SystemPartitionIndex,ProtocolReader<InputBuffer> >();
	};

	struct bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,CompactBinaryReader<InputBuffer> &>
	{
		void Deserialize<Windows::Data::Platform::Partitioning::PartitionMetadata>(bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > &);
		~bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,JSONReader<InputBuffer> &>
	{
		void Deserialize<Windows::Data::Platform::Partitioning::PartitionMetadata>(bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > &);
		~bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,JSONReader<InputBuffer> &>();
	};

	struct bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,MafiaBinaryReader<InputBuffer> &>
	{
		void Deserialize<Windows::Data::Platform::Partitioning::PartitionMetadata>(bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > &);
		~bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,MafiaBinaryReader<InputBuffer> &>();
	};

	struct bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,SimpleProtocolReader<InputBuffer> &>
	{
		~bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,SimpleProtocolReader<InputBuffer> &>();
	};

	struct bonded<void,CompactBinaryReader<InputBuffer> &>
	{
		bonded<void,CompactBinaryReader<InputBuffer> &>(CompactBinaryReader<InputBuffer> &,RuntimeSchema const &,bool);
		void Deserialize<TypeDef>(TypeDef &);
		void Deserialize<Windows::Data::Platform::Partitioning::PartitionMetadata>(bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > &);
		~bonded<void,CompactBinaryReader<InputBuffer> &>();
	};

	struct bonded<void,JSONReader<InputBuffer> &>
	{
		bonded<void,JSONReader<InputBuffer> &>(JSONReader<InputBuffer> &,RuntimeSchema const &,bool);
		void Deserialize<TypeDef>(TypeDef &);
		~bonded<void,JSONReader<InputBuffer> &>();
	};

	struct bonded<void,MafiaBinaryReader<InputBuffer> &>
	{
		bonded<void,MafiaBinaryReader<InputBuffer> &>(MafiaBinaryReader<InputBuffer> &,RuntimeSchema const &,bool);
		void Deserialize<TypeDef>(TypeDef &);
		~bonded<void,MafiaBinaryReader<InputBuffer> &>();
	};

	struct bonded<void,ProtocolReader<InputBuffer> >
	{
		bonded<void,ProtocolReader<InputBuffer> >(ProtocolReader<InputBuffer>,RuntimeSchema const &,bool);
		~bonded<void,ProtocolReader<InputBuffer> >();
	};

	class bonded<void,SimpleProtocolReader<InputBuffer> &>
	{
		bool _SelectProtocolAndApply<DetectUnknownFieldsTransform>(DetectUnknownFieldsTransform const &);
		bool _SelectProtocolAndApply<Marshaler<CompactBinaryWriter<OutputCounter> > >(Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		bool _SelectProtocolAndApply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool _SelectProtocolAndApply<Serializer<CompactBinaryWriter<OutputCounter> > >(Serializer<CompactBinaryWriter<OutputCounter> > const &);
		bool _SelectProtocolAndApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool _SelectProtocolAndApply<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool _SelectProtocolAndApply<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool _SelectProtocolAndApply<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		bool _SelectProtocolAndApply<To<FieldDef,RequiredFieldValiadator<FieldDef> > >(To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
		bool _SelectProtocolAndApply<To<Metadata,RequiredFieldValiadator<Metadata> > >(To<Metadata,RequiredFieldValiadator<Metadata> > const &);
		bool _SelectProtocolAndApply<To<StructDef,RequiredFieldValiadator<StructDef> > >(To<StructDef,RequiredFieldValiadator<StructDef> > const &);
		bool _SelectProtocolAndApply<To<TypeDef,RequiredFieldValiadator<TypeDef> > >(To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
		bool _SelectProtocolAndApply<To<Variant,RequiredFieldValiadator<Variant> > >(To<Variant,RequiredFieldValiadator<Variant> > const &);
		bool _SelectProtocolAndApply<To<Void,RequiredFieldValiadator<Void> > >(To<Void,RequiredFieldValiadator<Void> > const &);
		bool _SelectProtocolAndApply<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
		bool _SelectProtocolAndApply<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
		bool _SelectProtocolAndApply<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
		bool _SelectProtocolAndApply<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
		bool _SelectProtocolAndApply<ToWalkable>(ToWalkable const &);
		bool _SelectProtocolAndApply<boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > > >(boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > > const &);
	public:
		bonded<void,SimpleProtocolReader<InputBuffer> &>(SimpleProtocolReader<InputBuffer> &,RuntimeSchema const &,bool);
		void Deserialize<TypeDef>(TypeDef &);
		void Deserialize<Windows::Data::Platform::Partitioning::PartitionMetadata>(bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > &);
		~bonded<void,SimpleProtocolReader<InputBuffer> &>();
	};

	namespace detail
	{
		struct InsituMerge<Windows::Data::Platform::Partitioning::PartitionMetadata,InputBuffer>
		{
			void operator()<CompactBinaryReader>(CompactBinaryReader<InputBuffer> &);
			void operator()<JSONReader>(JSONReader<InputBuffer> &);
			void operator()<MafiaBinaryReader>(MafiaBinaryReader<InputBuffer> &);
			void operator()<SimpleProtocolReader>(SimpleProtocolReader<InputBuffer> &);
		};

		class ParserInheritance<CompactBinaryReader<InputBuffer> &,DynamicParser<CompactBinaryReader<InputBuffer> &> >
		{
		protected:
			bool Read<DetectUnknownFieldsTransform>(RuntimeSchema const &,DetectUnknownFieldsTransform const &);
			bool Read<Marshaler<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<To<FieldDef,RequiredFieldValiadator<FieldDef> > >(RuntimeSchema const &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
			bool Read<To<Metadata,RequiredFieldValiadator<Metadata> > >(RuntimeSchema const &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
			bool Read<To<SchemaDef,RequiredFieldValiadator<SchemaDef> > >(RuntimeSchema const &,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &);
			bool Read<To<StructDef,RequiredFieldValiadator<StructDef> > >(RuntimeSchema const &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
			bool Read<To<TypeDef,RequiredFieldValiadator<TypeDef> > >(RuntimeSchema const &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
			bool Read<To<Variant,RequiredFieldValiadator<Variant> > >(RuntimeSchema const &,To<Variant,RequiredFieldValiadator<Variant> > const &);
			bool Read<To<Void,RequiredFieldValiadator<Void> > >(RuntimeSchema const &,To<Void,RequiredFieldValiadator<Void> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
			bool Read<ToWalkable>(RuntimeSchema const &,ToWalkable const &);
			bool Read<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Serializer<CompactBinaryWriter<OutputCounter> > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		};

		class ParserInheritance<FieldDef const &,StaticParser<FieldDef const &> >
		{
		protected:
			bool Read<FieldDef::Schema,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(FieldDef::Schema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		};

		class ParserInheritance<JSONReader<InputBuffer> &,DynamicParser<JSONReader<InputBuffer> &> >
		{
		protected:
			bool Read<DetectUnknownFieldsTransform>(RuntimeSchema const &,DetectUnknownFieldsTransform const &);
			bool Read<Marshaler<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<To<FieldDef,RequiredFieldValiadator<FieldDef> > >(RuntimeSchema const &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
			bool Read<To<Metadata,RequiredFieldValiadator<Metadata> > >(RuntimeSchema const &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
			bool Read<To<SchemaDef,RequiredFieldValiadator<SchemaDef> > >(RuntimeSchema const &,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &);
			bool Read<To<StructDef,RequiredFieldValiadator<StructDef> > >(RuntimeSchema const &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
			bool Read<To<TypeDef,RequiredFieldValiadator<TypeDef> > >(RuntimeSchema const &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
			bool Read<To<Variant,RequiredFieldValiadator<Variant> > >(RuntimeSchema const &,To<Variant,RequiredFieldValiadator<Variant> > const &);
			bool Read<To<Void,RequiredFieldValiadator<Void> > >(RuntimeSchema const &,To<Void,RequiredFieldValiadator<Void> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
			bool Read<ToWalkable>(RuntimeSchema const &,ToWalkable const &);
			bool Read<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
		};

		class ParserInheritance<MafiaBinaryReader<InputBuffer> &,DynamicParser<MafiaBinaryReader<InputBuffer> &> >
		{
		protected:
			bool Read<DetectUnknownFieldsTransform>(RuntimeSchema const &,DetectUnknownFieldsTransform const &);
			bool Read<Marshaler<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<To<FieldDef,RequiredFieldValiadator<FieldDef> > >(RuntimeSchema const &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
			bool Read<To<Metadata,RequiredFieldValiadator<Metadata> > >(RuntimeSchema const &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
			bool Read<To<SchemaDef,RequiredFieldValiadator<SchemaDef> > >(RuntimeSchema const &,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &);
			bool Read<To<StructDef,RequiredFieldValiadator<StructDef> > >(RuntimeSchema const &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
			bool Read<To<TypeDef,RequiredFieldValiadator<TypeDef> > >(RuntimeSchema const &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
			bool Read<To<Variant,RequiredFieldValiadator<Variant> > >(RuntimeSchema const &,To<Variant,RequiredFieldValiadator<Variant> > const &);
			bool Read<To<Void,RequiredFieldValiadator<Void> > >(RuntimeSchema const &,To<Void,RequiredFieldValiadator<Void> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
			bool Read<ToWalkable>(RuntimeSchema const &,ToWalkable const &);
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Serializer<CompactBinaryWriter<OutputCounter> > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
			bool ReadBase<Windows::Data::Platform::Partitioning::PartitionMetadata,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(Windows::Data::Platform::Partitioning::PartitionMetadata const *,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
		};

		class ParserInheritance<Metadata const &,StaticParser<Metadata const &> >
		{
		protected:
			bool Read<Metadata::Schema,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Metadata::Schema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		};

		class ParserInheritance<SchemaDef const &,StaticParser<SchemaDef const &> >
		{
		protected:
			bool Read<SchemaDef::Schema,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(SchemaDef::Schema const &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		};

		class ParserInheritance<SimpleProtocolReader<InputBuffer> &,StaticParser<SimpleProtocolReader<InputBuffer> &> >
		{
		protected:
			bool Read<DetectUnknownFieldsTransform>(RuntimeSchema const &,DetectUnknownFieldsTransform const &);
			bool Read<Marshaler<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<CompactBinaryWriter<OutputCounter> > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(RuntimeSchema const &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<To<FieldDef,RequiredFieldValiadator<FieldDef> > >(RuntimeSchema const &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
			bool Read<To<Metadata,RequiredFieldValiadator<Metadata> > >(RuntimeSchema const &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
			bool Read<To<SchemaDef,RequiredFieldValiadator<SchemaDef> > >(RuntimeSchema const &,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &);
			bool Read<To<StructDef,RequiredFieldValiadator<StructDef> > >(RuntimeSchema const &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
			bool Read<To<TypeDef,RequiredFieldValiadator<TypeDef> > >(RuntimeSchema const &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
			bool Read<To<Variant,RequiredFieldValiadator<Variant> > >(RuntimeSchema const &,To<Variant,RequiredFieldValiadator<Variant> > const &);
			bool Read<To<Void,RequiredFieldValiadator<Void> > >(RuntimeSchema const &,To<Void,RequiredFieldValiadator<Void> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
			bool Read<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >(RuntimeSchema const &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
			bool Read<ToWalkable>(RuntimeSchema const &,ToWalkable const &);
			bool Read<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema const &,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &);
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Serializer<CompactBinaryWriter<OutputCounter> > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		};

		class ParserInheritance<StructDef const &,StaticParser<StructDef const &> >
		{
		protected:
			bool Read<StructDef::Schema,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(StructDef::Schema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		};

		class ParserInheritance<TypeDef const &,StaticParser<TypeDef const &> >
		{
		protected:
			bool Read<TypeDef::Schema,Serializer<CompactBinaryWriter<OutputCounter> > >(TypeDef::Schema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		};

		class ParserInheritance<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata const &,StaticParser<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata const &> >
		{
		protected:
			bool Read<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema,Serializer<CompactBinaryWriter<OutputCounter> > >(Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		};

		class ParserInheritance<Windows::Data::Platform::Partitioning::OperatingSystemVersion const &,StaticParser<Windows::Data::Platform::Partitioning::OperatingSystemVersion const &> >
		{
		protected:
			bool Read<Windows::Data::Platform::Partitioning::OperatingSystemVersion::Schema,Serializer<CompactBinaryWriter<OutputCounter> > >(Windows::Data::Platform::Partitioning::OperatingSystemVersion::Schema const &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
			bool Read<Windows::Data::Platform::Partitioning::OperatingSystemVersion::Schema,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Windows::Data::Platform::Partitioning::OperatingSystemVersion::Schema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		};

		class ParserInheritance<Windows::Data::Platform::Partitioning::PartitionMetadata const &,StaticParser<Windows::Data::Platform::Partitioning::PartitionMetadata const &> >
		{
		protected:
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
			bool Read<Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		};

		struct RuntimeSchemaHelper<Metadata>
		{
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<SchemaDef>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<TypeDef>
		{
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Variant>
		{
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Void>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Windows::Data::Accessibility::Accessibility>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Windows::Data::Accessibility::AccessibilityOptions>
		{
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Windows::Data::Accessibility::Caption>
		{
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Windows::Data::Accessibility::Experience::Accessibility>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Windows::Data::Accessibility::Experience::Magnifier>
		{
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Windows::Data::Accessibility::Experience::SoundSentry>
		{
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Windows::Data::Accessibility::Keyboard>
		{
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Windows::Data::Accessibility::Mouse>
		{
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Windows::Data::Accessibility::Narrator>
		{
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Windows::Data::Calling::CallFavoriteItem>
		{
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Windows::Data::Calling::CallFavorites>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Windows::Data::Calling::CallFavoritesLocalCache>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Windows::Data::Calling::CallHistory>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Windows::Data::Calling::CallHistoryItem>
		{
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Windows::Data::Calling::Settings>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		struct RuntimeSchemaHelper<Windows::Data::Common::Color>
		{
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Windows::Data::Messaging::Settings>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Windows::Data::Platform::Diagnostics::DiagnosticData>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Windows::Data::Platform::Partitioning::ActivePartitions>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		class RuntimeSchemaHelper<Windows::Data::Platform::Partitioning::SystemPartitionIndex>
		{
			static SchemaDef schema;
			static std::once_flag flag;
		public:
			static void AppendStructDef(SchemaDef *);
		};

		class SimpleArray<unsigned int,64>
		{
			void grow(unsigned int);
			void memfree();
		};

		struct TypeListBuilder
		{
			void operator()<Void>(Void const *);
		};

		struct basic_string_stream<1024>
		{
			basic_string_stream<1024> & operator<<(char const *);
			basic_string_stream<1024> & operator<<(unsigned int);
			basic_string_stream<1024>();
			~basic_string_stream<1024>();
		};

		PrimitiveTypes g_primitiveTypes;
		blob ReadBlob<SimpleProtocolReader<InputBuffer> >(SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<DetectUnknownFieldsTransform,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,DetectUnknownFieldsTransform const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<DetectUnknownFieldsTransform,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,DetectUnknownFieldsTransform const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<DetectUnknownFieldsTransform,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,DetectUnknownFieldsTransform const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<DetectUnknownFieldsTransform,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,DetectUnknownFieldsTransform const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Marshaler<CompactBinaryWriter<OutputCounter> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputCounter> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Marshaler<CompactBinaryWriter<OutputCounter> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputCounter> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Marshaler<CompactBinaryWriter<OutputCounter> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputCounter> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Marshaler<CompactBinaryWriter<OutputCounter> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputCounter> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<DetectUnknownFieldsTransform const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<DetectUnknownFieldsTransform const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<DetectUnknownFieldsTransform const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<DetectUnknownFieldsTransform const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<DetectUnknownFieldsTransform const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<DetectUnknownFieldsTransform const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputCounter> > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputCounter> > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputCounter> > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputCounter> > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputCounter> > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputCounter> > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputCounter> > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputCounter> > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputCounter> > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputCounter> > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputCounter> > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputCounter> > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<ToWalkable const >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<ToWalkable const > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<ToWalkable const >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<ToWalkable const > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ParserCommon::UnknownFieldBinder<ToWalkable const >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,detail::ParserCommon::UnknownFieldBinder<ToWalkable const > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<CompactBinaryWriter<OutputCounter> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputCounter> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<CompactBinaryWriter<OutputCounter> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputCounter> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Serializer<CompactBinaryWriter<OutputCounter> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputCounter> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<CompactBinaryWriter<OutputCounter> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputCounter> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<FieldDef,RequiredFieldValiadator<FieldDef> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<FieldDef,RequiredFieldValiadator<FieldDef> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<FieldDef,RequiredFieldValiadator<FieldDef> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<FieldDef,RequiredFieldValiadator<FieldDef> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<Metadata,RequiredFieldValiadator<Metadata> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Metadata,RequiredFieldValiadator<Metadata> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Metadata,RequiredFieldValiadator<Metadata> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Metadata,RequiredFieldValiadator<Metadata> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<Metadata,RequiredFieldValiadator<Metadata> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Metadata,RequiredFieldValiadator<Metadata> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Metadata,RequiredFieldValiadator<Metadata> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Metadata,RequiredFieldValiadator<Metadata> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<SchemaDef,RequiredFieldValiadator<SchemaDef> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<SchemaDef,RequiredFieldValiadator<SchemaDef> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<SchemaDef,RequiredFieldValiadator<SchemaDef> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<SchemaDef,RequiredFieldValiadator<SchemaDef> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<StructDef,RequiredFieldValiadator<StructDef> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<StructDef,RequiredFieldValiadator<StructDef> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<StructDef,RequiredFieldValiadator<StructDef> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<StructDef,RequiredFieldValiadator<StructDef> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<StructDef,RequiredFieldValiadator<StructDef> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<StructDef,RequiredFieldValiadator<StructDef> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<StructDef,RequiredFieldValiadator<StructDef> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<StructDef,RequiredFieldValiadator<StructDef> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<TypeDef,RequiredFieldValiadator<TypeDef> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<TypeDef,RequiredFieldValiadator<TypeDef> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<TypeDef,RequiredFieldValiadator<TypeDef> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<TypeDef,RequiredFieldValiadator<TypeDef> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<Variant,RequiredFieldValiadator<Variant> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Variant,RequiredFieldValiadator<Variant> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Variant,RequiredFieldValiadator<Variant> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Variant,RequiredFieldValiadator<Variant> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<Variant,RequiredFieldValiadator<Variant> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Variant,RequiredFieldValiadator<Variant> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Variant,RequiredFieldValiadator<Variant> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Variant,RequiredFieldValiadator<Variant> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<Void,RequiredFieldValiadator<Void> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Void,RequiredFieldValiadator<Void> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Void,RequiredFieldValiadator<Void> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Void,RequiredFieldValiadator<Void> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<Void,RequiredFieldValiadator<Void> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Void,RequiredFieldValiadator<Void> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Void,RequiredFieldValiadator<Void> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Void,RequiredFieldValiadator<Void> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &,SimpleProtocolReader<InputBuffer> &);
		bool BasicTypeField<ToWalkable,CompactBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,ToWalkable const &,CompactBinaryReader<InputBuffer> &);
		bool BasicTypeField<ToWalkable,JSONReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,ToWalkable const &,JSONReader<InputBuffer> &);
		bool BasicTypeField<ToWalkable,MafiaBinaryReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,ToWalkable const &,MafiaBinaryReader<InputBuffer> &);
		bool BasicTypeField<ToWalkable,SimpleProtocolReader<InputBuffer> >(unsigned short,Metadata const &,_bond_enumerators::BondDataType::BondDataType,ToWalkable const &,SimpleProtocolReader<InputBuffer> &);
		bool DoublePassApply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,SchemaDef>(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,SchemaDef const &);
		bool DoublePassApply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::ActivePartitions>(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::ActivePartitions const &);
		bool DoublePassApply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::SystemPartitionIndex>(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::SystemPartitionIndex const &);
		bool DoublePassApply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<void,CompactBinaryReader<InputBuffer> &> >(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool DoublePassApply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<void,JSONReader<InputBuffer> &> >(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<void,JSONReader<InputBuffer> &> const &);
		bool DoublePassApply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<void,MafiaBinaryReader<InputBuffer> &> >(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool DoublePassApply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<void,ProtocolReader<InputBuffer> > >(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<void,ProtocolReader<InputBuffer> > const &);
		bool DoublePassApply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<void,SimpleProtocolReader<InputBuffer> &> >(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<void,SimpleProtocolReader<InputBuffer> &> const &);
		bool DoublePassApply<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >(Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,FieldDef>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,FieldDef const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Metadata>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,Metadata const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,StructDef>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,StructDef const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,TypeDef>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,TypeDef const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Variant>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,Variant const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::OperatingSystemVersion>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::OperatingSystemVersion const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::PartitionInfo>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::PartitionInfo const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::PartitionMetadata>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::PartitionMetadata const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::PartitionSet>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::PartitionSet const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<void,CompactBinaryReader<InputBuffer> &> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<void,CompactBinaryReader<InputBuffer> &> const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<void,JSONReader<InputBuffer> &> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<void,JSONReader<InputBuffer> &> const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<void,MafiaBinaryReader<InputBuffer> &> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<void,MafiaBinaryReader<InputBuffer> &> const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<void,ProtocolReader<InputBuffer> > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<void,ProtocolReader<InputBuffer> > const &);
		bool DoublePassApply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,bonded<void,SimpleProtocolReader<InputBuffer> &> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,bonded<void,SimpleProtocolReader<InputBuffer> &> const &);
		bool Parse<SchemaDef,To<SchemaDef,RequiredFieldValiadator<SchemaDef> >,InputBuffer,SchemaDef::Schema>(To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &,ProtocolReader<InputBuffer>,SchemaDef::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::ActivePartitions,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,InputBuffer,Windows::Data::Platform::Partitioning::ActivePartitions::Schema>(To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::ActivePartitions::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> >,InputBuffer,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema>(To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::PartitionMetadata,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> >,InputBuffer,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema>(Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputCounter> > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::PartitionMetadata,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,InputBuffer,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema>(Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::PartitionMetadata,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > >,InputBuffer,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema>(Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::PartitionMetadata,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,InputBuffer,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema>(Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::PartitionMetadata,Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,InputBuffer,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema>(Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::PartitionMetadata,Serializer<CompactBinaryWriter<OutputCounter> >,InputBuffer,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema>(Serializer<CompactBinaryWriter<OutputCounter> > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::PartitionMetadata,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,InputBuffer,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::PartitionMetadata,To<Void,RequiredFieldValiadator<Void> >,InputBuffer,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema>(To<Void,RequiredFieldValiadator<Void> > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::PartitionMetadata,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,InputBuffer,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema>(To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema const &,RuntimeSchema const *,bool);
		bool Parse<Windows::Data::Platform::Partitioning::SystemPartitionIndex,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,InputBuffer,Windows::Data::Platform::Partitioning::SystemPartitionIndex::Schema>(To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &,ProtocolReader<InputBuffer>,Windows::Data::Platform::Partitioning::SystemPartitionIndex::Schema const &,RuntimeSchema const *,bool);
		bool Parse<void,DetectUnknownFieldsTransform,InputBuffer,RuntimeSchema>(DetectUnknownFieldsTransform const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,Marshaler<CompactBinaryWriter<OutputCounter> >,InputBuffer,RuntimeSchema>(Marshaler<CompactBinaryWriter<OutputCounter> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,InputBuffer,RuntimeSchema>(Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,Serializer<CompactBinaryWriter<OutputCounter> >,InputBuffer,RuntimeSchema>(Serializer<CompactBinaryWriter<OutputCounter> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,InputBuffer,RuntimeSchema>(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,InputBuffer,RuntimeSchema>(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,InputBuffer,RuntimeSchema>(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,InputBuffer,RuntimeSchema>(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,To<FieldDef,RequiredFieldValiadator<FieldDef> >,InputBuffer,RuntimeSchema>(To<FieldDef,RequiredFieldValiadator<FieldDef> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,To<Metadata,RequiredFieldValiadator<Metadata> >,InputBuffer,RuntimeSchema>(To<Metadata,RequiredFieldValiadator<Metadata> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,To<StructDef,RequiredFieldValiadator<StructDef> >,InputBuffer,RuntimeSchema>(To<StructDef,RequiredFieldValiadator<StructDef> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,To<TypeDef,RequiredFieldValiadator<TypeDef> >,InputBuffer,RuntimeSchema>(To<TypeDef,RequiredFieldValiadator<TypeDef> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,To<Variant,RequiredFieldValiadator<Variant> >,InputBuffer,RuntimeSchema>(To<Variant,RequiredFieldValiadator<Variant> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,To<Void,RequiredFieldValiadator<Void> >,InputBuffer,RuntimeSchema>(To<Void,RequiredFieldValiadator<Void> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >,InputBuffer,RuntimeSchema>(To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> >,InputBuffer,RuntimeSchema>(To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,InputBuffer,RuntimeSchema>(To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> >,InputBuffer,RuntimeSchema>(To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool Parse<void,ToWalkable,InputBuffer,RuntimeSchema>(ToWalkable const &,ProtocolReader<InputBuffer>,RuntimeSchema const &,RuntimeSchema const *,bool);
		bool is_default<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,Metadata const &);
		bool is_default<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,Metadata const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,DetectUnknownFieldsTransform,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,DetectUnknownFieldsTransform const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,DetectUnknownFieldsTransform,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,DetectUnknownFieldsTransform const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,DetectUnknownFieldsTransform,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,DetectUnknownFieldsTransform const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,DetectUnknownFieldsTransform,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,DetectUnknownFieldsTransform const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Marshaler<CompactBinaryWriter<OutputCounter> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Marshaler<CompactBinaryWriter<OutputCounter> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Marshaler<CompactBinaryWriter<OutputCounter> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Marshaler<CompactBinaryWriter<OutputCounter> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,Marshaler<CompactBinaryWriter<OutputCounter> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<CompactBinaryWriter<OutputCounter> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<CompactBinaryWriter<OutputCounter> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<CompactBinaryWriter<OutputCounter> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<CompactBinaryWriter<OutputCounter> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,Serializer<CompactBinaryWriter<OutputCounter> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<FieldDef,RequiredFieldValiadator<FieldDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<FieldDef,RequiredFieldValiadator<FieldDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<FieldDef,RequiredFieldValiadator<FieldDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<FieldDef,RequiredFieldValiadator<FieldDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,To<FieldDef,RequiredFieldValiadator<FieldDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Metadata,RequiredFieldValiadator<Metadata> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Metadata,RequiredFieldValiadator<Metadata> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Metadata,RequiredFieldValiadator<Metadata> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Metadata,RequiredFieldValiadator<Metadata> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,To<Metadata,RequiredFieldValiadator<Metadata> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<StructDef,RequiredFieldValiadator<StructDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<StructDef,RequiredFieldValiadator<StructDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<StructDef,RequiredFieldValiadator<StructDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<StructDef,RequiredFieldValiadator<StructDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,To<StructDef,RequiredFieldValiadator<StructDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<TypeDef,RequiredFieldValiadator<TypeDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<TypeDef,RequiredFieldValiadator<TypeDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<TypeDef,RequiredFieldValiadator<TypeDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<TypeDef,RequiredFieldValiadator<TypeDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,To<TypeDef,RequiredFieldValiadator<TypeDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Variant,RequiredFieldValiadator<Variant> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,To<Variant,RequiredFieldValiadator<Variant> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Variant,RequiredFieldValiadator<Variant> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,To<Variant,RequiredFieldValiadator<Variant> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Variant,RequiredFieldValiadator<Variant> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,To<Variant,RequiredFieldValiadator<Variant> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Variant,RequiredFieldValiadator<Variant> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,To<Variant,RequiredFieldValiadator<Variant> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Void,RequiredFieldValiadator<Void> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,To<Void,RequiredFieldValiadator<Void> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Void,RequiredFieldValiadator<Void> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,To<Void,RequiredFieldValiadator<Void> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Void,RequiredFieldValiadator<Void> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,To<Void,RequiredFieldValiadator<Void> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Void,RequiredFieldValiadator<Void> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,To<Void,RequiredFieldValiadator<Void> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionInfo,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionInfo> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::PartitionSet,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionSet> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,ToWalkable,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,ToWalkable const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,ToWalkable,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,ToWalkable const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,ToWalkable,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,ToWalkable const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,RuntimeSchema const &,InputBuffer &,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,RuntimeSchema const &,InputBuffer &,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,RuntimeSchema const &,InputBuffer &,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<InputBuffer,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,RuntimeSchema const &,InputBuffer &,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<SchemaDef,InputBuffer,To<SchemaDef,RequiredFieldValiadator<SchemaDef> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,InputBuffer &,To<SchemaDef,RequiredFieldValiadator<SchemaDef> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::ActivePartitions,InputBuffer,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::ActivePartitions,InputBuffer,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::ActivePartitions,InputBuffer,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::ActivePartitions,InputBuffer,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::PartitionMetadata,InputBuffer,To<Void,RequiredFieldValiadator<Void> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,InputBuffer &,To<Void,RequiredFieldValiadator<Void> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::PartitionMetadata,InputBuffer,To<Void,RequiredFieldValiadator<Void> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,InputBuffer &,To<Void,RequiredFieldValiadator<Void> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::PartitionMetadata,InputBuffer,To<Void,RequiredFieldValiadator<Void> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,InputBuffer &,To<Void,RequiredFieldValiadator<Void> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::PartitionMetadata,InputBuffer,To<Void,RequiredFieldValiadator<Void> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,InputBuffer &,To<Void,RequiredFieldValiadator<Void> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::PartitionMetadata,InputBuffer,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,InputBuffer &,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::PartitionMetadata,InputBuffer,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,InputBuffer &,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::PartitionMetadata,InputBuffer,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,InputBuffer &,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::PartitionMetadata,InputBuffer,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,InputBuffer &,boost::reference_wrapper<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> > > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::SystemPartitionIndex,InputBuffer,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::SystemPartitionIndex,InputBuffer,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::SystemPartitionIndex,InputBuffer,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
		std::pair<_bond_enumerators::ProtocolType::ProtocolType,bool> NextProtocol<Windows::Data::Platform::Partitioning::SystemPartitionIndex,InputBuffer,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > >(boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<4>,JSONReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<3>,MafiaBinaryReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<2>,SimpleProtocolReader<InputBuffer>,boost::mpl::l_item<boost::mpl::long_<1>,CompactBinaryReader<InputBuffer>,boost::mpl::l_end> > > > > const &,InputBuffer &,To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > const &);
		unsigned int * g_primitiveTypesSizeOf;
		unsigned short schema_depth(RuntimeSchema const &);
		void BasicTypeContainer<DetectUnknownFieldsTransform const ,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<DetectUnknownFieldsTransform const ,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<DetectUnknownFieldsTransform const ,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<DetectUnknownFieldsTransform const ,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<CompactBinaryWriter<OutputCounter> > const ,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<CompactBinaryWriter<OutputCounter> > const ,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<CompactBinaryWriter<OutputCounter> > const ,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<CompactBinaryWriter<OutputCounter> > const ,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<ToWalkable const ,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<ToWalkable const ,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<ToWalkable const ,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void BasicTypeContainer<ToWalkable const ,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByElement<DetectUnknownFieldsTransform const ,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<DetectUnknownFieldsTransform const ,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void MapByElement<DetectUnknownFieldsTransform const ,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<DetectUnknownFieldsTransform const ,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<CompactBinaryWriter<OutputCounter> > const ,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<CompactBinaryWriter<OutputCounter> > const ,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<CompactBinaryWriter<OutputCounter> > const ,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<CompactBinaryWriter<OutputCounter> > const ,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByElement<ToWalkable const ,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<ToWalkable const ,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void MapByElement<ToWalkable const ,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByElement<ToWalkable const ,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<__int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<__int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<__int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<__int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<bool,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<bool,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<bool,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<bool,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<bool,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<double,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<double,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<double,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<double,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<double,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<double,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<float,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<float,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<float,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<float,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<float,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<float,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<signed char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<signed char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<signed char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<signed char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned __int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<void,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<void,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<DetectUnknownFieldsTransform const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,_bond_enumerators::BondDataType::BondDataType,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<__int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<__int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<__int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<__int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<bool,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<bool,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<bool,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<bool,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<double,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<double,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<double,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<double,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<double,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<double,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<float,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<float,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<float,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<float,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<float,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<float,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<signed char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<signed char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<signed char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<signed char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned __int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<void,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<void,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputCounter> > const &,_bond_enumerators::BondDataType::BondDataType,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<__int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<bool,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<double,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<float,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<signed char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &,_bond_enumerators::BondDataType::BondDataType,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<__int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<__int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<__int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<__int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<__int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<bool,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<bool,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<bool,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<bool,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<bool,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<bool,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<bool,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<bool,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<double,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<double,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<double,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<double,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<double,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<double,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<double,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<double,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<float,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<float,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<float,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<float,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<float,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<float,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<float,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<float,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<signed char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<signed char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<signed char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<signed char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<signed char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned __int64,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned char,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned int,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned int,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned short,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned short,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<void,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<void,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MapByKey<ToWalkable const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,_bond_enumerators::BondDataType::BondDataType,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MapByKey<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,_bond_enumerators::BondDataType::BondDataType,value<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MapByKey<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,_bond_enumerators::BondDataType::BondDataType,value<void,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MarshalToBlob<bonded<void,CompactBinaryReader<InputBuffer> &>,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >(bonded<void,CompactBinaryReader<InputBuffer> &> const &,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > &);
		void MarshalToBlob<bonded<void,JSONReader<InputBuffer> &>,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >(bonded<void,JSONReader<InputBuffer> &> const &,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > &);
		void MarshalToBlob<bonded<void,MafiaBinaryReader<InputBuffer> &>,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >(bonded<void,MafiaBinaryReader<InputBuffer> &> const &,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > &);
		void MarshalToBlob<bonded<void,SimpleProtocolReader<InputBuffer> &>,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >(bonded<void,SimpleProtocolReader<InputBuffer> &> const &,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > &);
		void MatchingMapByElement<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,CompactBinaryReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByElement<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,JSONReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void MatchingMapByElement<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,MafiaBinaryReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByElement<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,SimpleProtocolReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MatchingMapByElement<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,CompactBinaryReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByElement<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,JSONReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void MatchingMapByElement<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,MafiaBinaryReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByElement<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,SimpleProtocolReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,_bond_enumerators::BondDataType::BondDataType,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,_bond_enumerators::BondDataType::BondDataType,value<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,_bond_enumerators::BondDataType::BondDataType,value<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,_bond_enumerators::BondDataType::BondDataType,value<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,_bond_enumerators::BondDataType::BondDataType,value<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,_bond_enumerators::BondDataType::BondDataType,value<void,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,_bond_enumerators::BondDataType::BondDataType,value<void,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,_bond_enumerators::BondDataType::BondDataType,value<void,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,_bond_enumerators::BondDataType::BondDataType,value<void,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> const &,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> const &,JSONReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> const &,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MatchingMapByKey<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,_bond_enumerators::BondDataType::BondDataType,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> const &,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void MatchingTypeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,_bond_enumerators::BondDataType::BondDataType,CompactBinaryReader<InputBuffer> &,unsigned int);
		void MatchingTypeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,JSONReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,_bond_enumerators::BondDataType::BondDataType,JSONReader<InputBuffer> &,unsigned int);
		void MatchingTypeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,_bond_enumerators::BondDataType::BondDataType,MafiaBinaryReader<InputBuffer> &,unsigned int);
		void MatchingTypeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,_bond_enumerators::BondDataType::BondDataType,SimpleProtocolReader<InputBuffer> &,unsigned int);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<FieldDef,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<FieldDef,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<Metadata,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<Metadata,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<StructDef,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<StructDef,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<TypeDef,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<TypeDef,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<Variant,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<Variant,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionInfo,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionInfo,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<CompactBinaryReader<InputBuffer>,bonded<void,CompactBinaryReader<InputBuffer> &> >(CompactBinaryReader<InputBuffer> &,bonded<void,CompactBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<FieldDef,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<FieldDef,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<Metadata,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<Metadata,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<StructDef,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<StructDef,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<TypeDef,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<TypeDef,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<Variant,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<Variant,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<JSONReader<InputBuffer>,bonded<void,JSONReader<InputBuffer> &> >(JSONReader<InputBuffer> &,bonded<void,JSONReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<FieldDef,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<FieldDef,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<Metadata,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<Metadata,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<StructDef,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<StructDef,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<TypeDef,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<TypeDef,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<Variant,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<Variant,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionInfo,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionInfo,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<MafiaBinaryReader<InputBuffer>,bonded<void,MafiaBinaryReader<InputBuffer> &> >(MafiaBinaryReader<InputBuffer> &,bonded<void,MafiaBinaryReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<FieldDef,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<FieldDef,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<Metadata,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<Metadata,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<StructDef,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<StructDef,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<TypeDef,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<TypeDef,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<Variant,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<Variant,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::OperatingSystemVersion,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
		void Skip<SimpleProtocolReader<InputBuffer>,bonded<void,SimpleProtocolReader<InputBuffer> &> >(SimpleProtocolReader<InputBuffer> &,bonded<void,SimpleProtocolReader<InputBuffer> &> const &,std::nothrow_t const &);
	};

	struct get_type_id<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	{
		static std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType> const value;
	};

	struct get_type_id<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo> >
	{
		static std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType> const value;
	};

	struct get_type_id<std::pair<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet> >
	{
		static std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType> const value;
	};

	struct get_type_id<std::pair<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >
	{
		static std::pair<_bond_enumerators::BondDataType::BondDataType,_bond_enumerators::BondDataType::BondDataType> const value;
	};

	namespace json
	{
		class Tokenizer<InputBuffer,Empty>
		{
			bool GetNextChar(char &);
			bool HandleChar(char);
			bool PeekChar(char &);
			void ReadEscapeSequence(std::basic_string<char,std::char_traits<char>,std::allocator<char> > &);
			void ReadString();
			void ReadToken();
			void ReadUnicode(std::basic_string<char,std::char_traits<char>,std::allocator<char> > &);
			void SkipComment();
		public:
			Token const & GetNextToken();
			~Tokenizer<InputBuffer,Empty>();
		};

		char const * TokenName(json::TokenType);
		void RaiseError(char const *,...);
	};

	struct nullable<TypeDef,detail::no_allocator,0>
	{
		TypeDef & set();
		nullable<TypeDef,detail::no_allocator,0>(nullable<TypeDef,detail::no_allocator,0> const &);
		~nullable<TypeDef,detail::no_allocator,0>();
	};

	struct one_definition<Protocols<InputBuffer>,boost::mpl::list5<CompactBinaryReader<InputBuffer>,SimpleProtocolReader<InputBuffer>,MafiaBinaryReader<InputBuffer>,JSONReader<InputBuffer>,JsonPrettyReader<InputBuffer> > >
	{
		static detail::counter<Protocols<InputBuffer> > value;
	};

	struct one_definition<may_omit_fields<CompactBinaryWriter<OutputCounter> >,std::integral_constant<bool,1> >
	{
		static detail::counter<may_omit_fields<CompactBinaryWriter<OutputCounter> > > value;
	};

	struct one_definition<may_omit_fields<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,std::integral_constant<bool,1> >
	{
		static detail::counter<may_omit_fields<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > > value;
	};

	struct one_definition<may_omit_fields<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,std::integral_constant<bool,1> >
	{
		static detail::counter<may_omit_fields<JSONWriter<OutputMemoryStream<std::allocator<char> > > > > value;
	};

	struct one_definition<may_omit_fields<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,std::integral_constant<bool,1> >
	{
		static detail::counter<may_omit_fields<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > > value;
	};

	struct one_definition<may_omit_fields<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,std::integral_constant<bool,0> >
	{
		static detail::counter<may_omit_fields<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > > value;
	};

	namespace output_buffer
	{
		struct VariableUnsignedUnchecked<unsigned __int64,1>
		{
			static unsigned int Write(unsigned char *,unsigned __int64);
		};

		struct VariableUnsignedUnchecked<unsigned __int64,4>
		{
			static unsigned int Write(unsigned char *,unsigned __int64);
		};

		struct VariableUnsignedUnchecked<unsigned __int64,7>
		{
			static unsigned int Write(unsigned char *,unsigned __int64);
		};

		struct VariableUnsignedUnchecked<unsigned int,1>
		{
			static unsigned int Write(unsigned char *,unsigned int);
		};

	};

	namespace reflection
	{
		Metadata MetadataInit(char const *,_bond_enumerators::Modifier::Modifier,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &);
		Metadata MetadataInit(char const *,char const *,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &);
		Metadata MetadataInit<boost::mpl::list<Void,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na> >(char const *,char const *,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &);
		Metadata MetadataInit<unsigned short>(unsigned short const &,char const *,_bond_enumerators::Modifier::Modifier,std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const &);
	};

	struct value<FieldDef,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<FieldDef,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<FieldDef,JSONReader<InputBuffer> &,void>
	{
		~value<FieldDef,JSONReader<InputBuffer> &,void>();
	};

	struct value<FieldDef,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<FieldDef,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<FieldDef,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<FieldDef,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<StructDef,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<StructDef,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<StructDef,JSONReader<InputBuffer> &,void>
	{
		~value<StructDef,JSONReader<InputBuffer> &,void>();
	};

	struct value<StructDef,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<StructDef,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<StructDef,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<StructDef,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<TypeDef,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<TypeDef,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<TypeDef,JSONReader<InputBuffer> &,void>
	{
		~value<TypeDef,JSONReader<InputBuffer> &,void>();
	};

	struct value<TypeDef,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<TypeDef,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<TypeDef,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<TypeDef,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<Windows::Data::Platform::Partitioning::PartitionInfo,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<Windows::Data::Platform::Partitioning::PartitionInfo,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> &,void>
	{
		~value<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> &,void>();
	};

	struct value<Windows::Data::Platform::Partitioning::PartitionInfo,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<Windows::Data::Platform::Partitioning::PartitionInfo,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> &,void>
	{
		~value<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> &,void>();
	};

	struct value<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<__int64,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<__int64,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<__int64,JSONReader<InputBuffer> &,void>
	{
		~value<__int64,JSONReader<InputBuffer> &,void>();
	};

	struct value<__int64,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<__int64,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<__int64,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<__int64,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<bool,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<bool,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<bool,JSONReader<InputBuffer> &,void>
	{
		~value<bool,JSONReader<InputBuffer> &,void>();
	};

	struct value<bool,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<bool,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<bool,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<bool,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<double,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<double,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<double,JSONReader<InputBuffer> &,void>
	{
		~value<double,JSONReader<InputBuffer> &,void>();
	};

	struct value<double,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<double,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<double,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<double,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<float,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<float,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<float,JSONReader<InputBuffer> &,void>
	{
		~value<float,JSONReader<InputBuffer> &,void>();
	};

	struct value<float,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<float,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<float,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<float,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<int,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<int,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<int,JSONReader<InputBuffer> &,void>
	{
		~value<int,JSONReader<InputBuffer> &,void>();
	};

	struct value<int,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<int,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<int,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<int,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<nullable<TypeDef,detail::no_allocator,0>,CompactBinaryReader<InputBuffer> &,void>
	{
		void Deserialize<nullable<TypeDef,detail::no_allocator,0> >(nullable<TypeDef,detail::no_allocator,0> &);
		~value<nullable<TypeDef,detail::no_allocator,0>,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<nullable<TypeDef,detail::no_allocator,0>,JSONReader<InputBuffer> &,void>
	{
		void Deserialize<nullable<TypeDef,detail::no_allocator,0> >(nullable<TypeDef,detail::no_allocator,0> &);
		~value<nullable<TypeDef,detail::no_allocator,0>,JSONReader<InputBuffer> &,void>();
	};

	struct value<nullable<TypeDef,detail::no_allocator,0>,MafiaBinaryReader<InputBuffer> &,void>
	{
		void Deserialize<nullable<TypeDef,detail::no_allocator,0> >(nullable<TypeDef,detail::no_allocator,0> &);
		~value<nullable<TypeDef,detail::no_allocator,0>,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<nullable<TypeDef,detail::no_allocator,0>,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<nullable<TypeDef,detail::no_allocator,0>,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<short,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<short,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<short,JSONReader<InputBuffer> &,void>
	{
		~value<short,JSONReader<InputBuffer> &,void>();
	};

	struct value<short,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<short,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<short,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<short,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<signed char,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<signed char,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<signed char,JSONReader<InputBuffer> &,void>
	{
		~value<signed char,JSONReader<InputBuffer> &,void>();
	};

	struct value<signed char,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<signed char,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<signed char,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<signed char,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>
	{
		~value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>();
	};

	struct value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>
	{
		~value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>();
	};

	struct value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,JSONReader<InputBuffer> &,void>
	{
		~value<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,JSONReader<InputBuffer> &,void>();
	};

	struct value<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,JSONReader<InputBuffer> &,void>
	{
		~value<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,JSONReader<InputBuffer> &,void>();
	};

	struct value<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,JSONReader<InputBuffer> &,void>
	{
		~value<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,JSONReader<InputBuffer> &,void>();
	};

	struct value<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,JSONReader<InputBuffer> &,void>
	{
		~value<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,JSONReader<InputBuffer> &,void>();
	};

	struct value<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,JSONReader<InputBuffer> &,void>
	{
		~value<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,JSONReader<InputBuffer> &,void>();
	};

	struct value<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<std::vector<FieldDef,std::allocator<FieldDef> >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::vector<FieldDef,std::allocator<FieldDef> >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::vector<FieldDef,std::allocator<FieldDef> >,JSONReader<InputBuffer> &,void>
	{
		void Deserialize<std::vector<FieldDef,std::allocator<FieldDef> > >(std::vector<FieldDef,std::allocator<FieldDef> > &);
		~value<std::vector<FieldDef,std::allocator<FieldDef> >,JSONReader<InputBuffer> &,void>();
	};

	struct value<std::vector<FieldDef,std::allocator<FieldDef> >,MafiaBinaryReader<InputBuffer> &,void>
	{
		void Deserialize<std::vector<FieldDef,std::allocator<FieldDef> > >(std::vector<FieldDef,std::allocator<FieldDef> > &);
		~value<std::vector<FieldDef,std::allocator<FieldDef> >,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::vector<FieldDef,std::allocator<FieldDef> >,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<std::vector<FieldDef,std::allocator<FieldDef> >,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<std::vector<StructDef,std::allocator<StructDef> >,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<std::vector<StructDef,std::allocator<StructDef> >,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::vector<StructDef,std::allocator<StructDef> >,JSONReader<InputBuffer> &,void>
	{
		void Deserialize<std::vector<StructDef,std::allocator<StructDef> > >(std::vector<StructDef,std::allocator<StructDef> > &);
		~value<std::vector<StructDef,std::allocator<StructDef> >,JSONReader<InputBuffer> &,void>();
	};

	struct value<std::vector<StructDef,std::allocator<StructDef> >,MafiaBinaryReader<InputBuffer> &,void>
	{
		void Deserialize<std::vector<StructDef,std::allocator<StructDef> > >(std::vector<StructDef,std::allocator<StructDef> > &);
		~value<std::vector<StructDef,std::allocator<StructDef> >,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<std::vector<StructDef,std::allocator<StructDef> >,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<std::vector<StructDef,std::allocator<StructDef> >,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<unsigned __int64,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<unsigned __int64,JSONReader<InputBuffer> &,void>
	{
		~value<unsigned __int64,JSONReader<InputBuffer> &,void>();
	};

	struct value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<unsigned __int64,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<unsigned char,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<unsigned char,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<unsigned char,JSONReader<InputBuffer> &,void>
	{
		~value<unsigned char,JSONReader<InputBuffer> &,void>();
	};

	struct value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<unsigned int,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<unsigned int,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<unsigned int,JSONReader<InputBuffer> &,void>
	{
		~value<unsigned int,JSONReader<InputBuffer> &,void>();
	};

	struct value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<unsigned int,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<unsigned short,CompactBinaryReader<InputBuffer> &,void>
	{
		~value<unsigned short,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<unsigned short,JSONReader<InputBuffer> &,void>
	{
		~value<unsigned short,JSONReader<InputBuffer> &,void>();
	};

	struct value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>
	{
		~value<unsigned short,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>
	{
		~value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>();
	};

	struct value<void,CompactBinaryReader<InputBuffer> &,void>
	{
		void Deserialize<nullable<TypeDef,detail::no_allocator,0> >(nullable<TypeDef,detail::no_allocator,0> &);
		void Deserialize<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &);
		void Deserialize<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &);
		void Deserialize<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &);
		void Deserialize<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &);
		void Deserialize<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &);
		void Deserialize<std::vector<FieldDef,std::allocator<FieldDef> > >(std::vector<FieldDef,std::allocator<FieldDef> > &);
		void Deserialize<std::vector<StructDef,std::allocator<StructDef> > >(std::vector<StructDef,std::allocator<StructDef> > &);
		void _Apply<DetectUnknownFieldsTransform>(DetectUnknownFieldsTransform const &);
		void _Apply<Serializer<CompactBinaryWriter<OutputCounter> > >(Serializer<CompactBinaryWriter<OutputCounter> > const &);
		void _Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<ToWalkable>(ToWalkable const &);
		~value<void,CompactBinaryReader<InputBuffer> &,void>();
	};

	struct value<void,JSONReader<InputBuffer> &,void>
	{
		void Deserialize<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &);
		void Deserialize<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &);
		void Deserialize<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &);
		void Deserialize<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &);
		void _Apply<DetectUnknownFieldsTransform>(DetectUnknownFieldsTransform const &);
		void _Apply<Serializer<CompactBinaryWriter<OutputCounter> > >(Serializer<CompactBinaryWriter<OutputCounter> > const &);
		void _Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<ToWalkable>(ToWalkable const &);
		~value<void,JSONReader<InputBuffer> &,void>();
	};

	struct value<void,MafiaBinaryReader<InputBuffer> &,void>
	{
		void Deserialize<nullable<TypeDef,detail::no_allocator,0> >(nullable<TypeDef,detail::no_allocator,0> &);
		void Deserialize<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &);
		void Deserialize<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &);
		void Deserialize<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &);
		void Deserialize<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &);
		void Deserialize<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &);
		void Deserialize<std::vector<FieldDef,std::allocator<FieldDef> > >(std::vector<FieldDef,std::allocator<FieldDef> > &);
		void Deserialize<std::vector<StructDef,std::allocator<StructDef> > >(std::vector<StructDef,std::allocator<StructDef> > &);
		void _Apply<DetectUnknownFieldsTransform>(DetectUnknownFieldsTransform const &);
		void _Apply<Serializer<CompactBinaryWriter<OutputCounter> > >(Serializer<CompactBinaryWriter<OutputCounter> > const &);
		void _Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<ToWalkable>(ToWalkable const &);
		~value<void,MafiaBinaryReader<InputBuffer> &,void>();
	};

	struct value<void,SimpleProtocolReader<InputBuffer> &,void>
	{
		void Deserialize<FieldDef>(FieldDef &);
		void Deserialize<StructDef>(StructDef &);
		void Deserialize<Windows::Data::Platform::Partitioning::PartitionInfo>(Windows::Data::Platform::Partitioning::PartitionInfo &);
		void Deserialize<Windows::Data::Platform::Partitioning::PartitionSet>(Windows::Data::Platform::Partitioning::PartitionSet &);
		void Deserialize<nullable<TypeDef,detail::no_allocator,0> >(nullable<TypeDef,detail::no_allocator,0> &);
		void Deserialize<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &);
		void Deserialize<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &);
		void Deserialize<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &);
		void Deserialize<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &);
		void Deserialize<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &);
		void Deserialize<std::vector<FieldDef,std::allocator<FieldDef> > >(std::vector<FieldDef,std::allocator<FieldDef> > &);
		void Deserialize<std::vector<StructDef,std::allocator<StructDef> > >(std::vector<StructDef,std::allocator<StructDef> > &);
		void _Apply<DetectUnknownFieldsTransform>(DetectUnknownFieldsTransform const &);
		void _Apply<Serializer<CompactBinaryWriter<OutputCounter> > >(Serializer<CompactBinaryWriter<OutputCounter> > const &);
		void _Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > >(Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const &);
		void _Apply<ToWalkable>(ToWalkable const &);
		~value<void,SimpleProtocolReader<InputBuffer> &,void>();
	};

	Windows::Data::Platform::Partitioning::PartitionInfo & mapped_at<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	Windows::Data::Platform::Partitioning::PartitionSet & mapped_at<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,unsigned char const &);
	bond::PremadeSchemas g_premadeSchemas;
	bond::RuntimeSchema GetRuntimeSchema<Windows::Data::Accessibility::Accessibility>();
	bond::RuntimeSchema GetRuntimeSchema<Windows::Data::Accessibility::Experience::Accessibility>();
	bond::RuntimeSchema GetRuntimeSchema<Windows::Data::Calling::CallFavorites>();
	bond::RuntimeSchema GetRuntimeSchema<Windows::Data::Calling::CallFavoritesLocalCache>();
	bond::RuntimeSchema GetRuntimeSchema<Windows::Data::Calling::CallHistory>();
	bond::RuntimeSchema GetRuntimeSchema<Windows::Data::Calling::Settings>();
	bond::RuntimeSchema GetRuntimeSchema<Windows::Data::Messaging::Settings>();
	bond::RuntimeSchema GetRuntimeSchema<Windows::Data::Platform::Diagnostics::DiagnosticData>();
	bond::RuntimeSchema GetRuntimeSchema<Windows::Data::Platform::Partitioning::ActivePartitions>();
	bond::RuntimeSchema GetRuntimeSchema<Windows::Data::Platform::Partitioning::SystemPartitionIndex>();
	bond::RuntimeSchema element_schema(bond::RuntimeSchema const &);
	bond::RuntimeSchema key_schema(bond::RuntimeSchema const &);
	bond::blob GetCurrentBuffer(bond::InputBuffer const &);
	bond::blob merge<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<blob> > >,std::allocator<char> >(std::allocator<char> const &,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<bond::blob> > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<bond::blob> > >);
	bond::blob merge<std::allocator<char> >(std::allocator<char> const &,bond::blob const &,bond::blob const &);
	bool Apply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,SchemaDef>(bond::Marshaler<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::SchemaDef const &);
	bool Apply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::ActivePartitions>(bond::Marshaler<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::ActivePartitions const &);
	bool Apply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::SystemPartitionIndex>(bond::Marshaler<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::SystemPartitionIndex const &);
	bool Apply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,CompactBinaryReader<InputBuffer> &>(bond::Marshaler<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,JSONReader<InputBuffer> &>(bond::Marshaler<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::JSONReader<bond::InputBuffer> &> const &);
	bool Apply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,MafiaBinaryReader<InputBuffer> &>(bond::Marshaler<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,ProtocolReader<InputBuffer> >(bond::Marshaler<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::ProtocolReader<bond::InputBuffer> > const &);
	bool Apply<Marshaler<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,SimpleProtocolReader<InputBuffer> &>(bond::Marshaler<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::SimpleProtocolReader<bond::InputBuffer> &> const &);
	bool Apply<Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >(bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::ProtocolReader<bond::InputBuffer> > const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputCounter> >,Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::ProtocolReader<bond::InputBuffer> > const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputCounter> >,void,CompactBinaryReader<InputBuffer> &>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputCounter> >,void,JSONReader<InputBuffer> &>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::bonded<void,bond::JSONReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputCounter> >,void,MafiaBinaryReader<InputBuffer> &>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputCounter> >,void,SimpleProtocolReader<InputBuffer> &>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::bonded<void,bond::SimpleProtocolReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,FieldDef>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::FieldDef const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Metadata>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::Metadata const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,StructDef>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::StructDef const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,TypeDef>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::TypeDef const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Variant>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::Variant const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::OperatingSystemVersion>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::OperatingSystemVersion const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::PartitionInfo>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::PartitionInfo const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::ProtocolReader<bond::InputBuffer> > const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::PartitionMetadata>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::PartitionMetadata const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,Windows::Data::Platform::Partitioning::PartitionSet>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,Windows::Data::Platform::Partitioning::PartitionSet const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,CompactBinaryReader<InputBuffer> &>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,JSONReader<InputBuffer> &>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::JSONReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,MafiaBinaryReader<InputBuffer> &>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,ProtocolReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::ProtocolReader<bond::InputBuffer> > const &);
	bool Apply<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,SimpleProtocolReader<InputBuffer> &>(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::SimpleProtocolReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,void,CompactBinaryReader<InputBuffer> &>(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,void,JSONReader<InputBuffer> &>(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::JSONReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,void,MafiaBinaryReader<InputBuffer> &>(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,void,SimpleProtocolReader<InputBuffer> &>(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::SimpleProtocolReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,CompactBinaryReader<InputBuffer> &>(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,JSONReader<InputBuffer> &>(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::JSONReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,MafiaBinaryReader<InputBuffer> &>(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,void,SimpleProtocolReader<InputBuffer> &>(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::SimpleProtocolReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,void,CompactBinaryReader<InputBuffer> &>(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,void,JSONReader<InputBuffer> &>(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::JSONReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,void,MafiaBinaryReader<InputBuffer> &>(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> const &);
	bool Apply<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,void,SimpleProtocolReader<InputBuffer> &>(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::bonded<void,bond::SimpleProtocolReader<bond::InputBuffer> &> const &);
	bool Apply<To<Metadata,RequiredFieldValiadator<Metadata> >,void,ProtocolReader<InputBuffer> >(bond::To<bond::Metadata,bond::RequiredFieldValiadator<bond::Metadata> > const &,bond::bonded<void,bond::ProtocolReader<bond::InputBuffer> > const &);
	bool Apply<To<Void,RequiredFieldValiadator<Void> >,Windows::Data::Platform::Partitioning::PartitionMetadata,ProtocolReader<InputBuffer> >(bond::To<bond::Void,bond::RequiredFieldValiadator<bond::Void> > const &,bond::bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::ProtocolReader<bond::InputBuffer> > const &);
	bool Apply<To<Windows::Data::Platform::Partitioning::ActivePartitions,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,Windows::Data::Platform::Partitioning::ActivePartitions,ProtocolReader<InputBuffer> >(bond::To<Windows::Data::Platform::Partitioning::ActivePartitions,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> > const &,bond::bonded<Windows::Data::Platform::Partitioning::ActivePartitions,bond::ProtocolReader<bond::InputBuffer> > const &);
	bool Apply<To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> >,void,ProtocolReader<InputBuffer> >(bond::To<Windows::Data::Platform::Partitioning::OperatingSystemVersion,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::OperatingSystemVersion> > const &,bond::bonded<void,bond::ProtocolReader<bond::InputBuffer> > const &);
	bool Apply<To<Windows::Data::Platform::Partitioning::PartitionMetadata,RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,void,ProtocolReader<InputBuffer> >(bond::To<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> > const &,bond::bonded<void,bond::ProtocolReader<bond::InputBuffer> > const &);
	bool Apply<ToWalkable,void,ProtocolReader<InputBuffer> >(ToWalkable const &,bond::bonded<void,bond::ProtocolReader<bond::InputBuffer> > const &);
	char * string_data<char,std::char_traits<char>,std::allocator<char> >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > &);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > & mapped_at<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > & mapped_at<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,unsigned char const &);
	std::pair<bond::_bond_enumerators::ProtocolType::ProtocolType,bool> SelectProtocolAndApply<InputBuffer,DetectUnknownFieldsTransform>(bond::RuntimeSchema const &,bond::InputBuffer &,DetectUnknownFieldsTransform const &);
	std::pair<bond::_bond_enumerators::ProtocolType::ProtocolType,bool> SelectProtocolAndApply<InputBuffer,ToWalkable>(bond::RuntimeSchema const &,bond::InputBuffer &,ToWalkable const &);
	unsigned short * string_data<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > &);
	void Apply<DetectUnknownFieldsTransform,void,CompactBinaryReader<InputBuffer> &>(DetectUnknownFieldsTransform const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &);
	void Apply<DetectUnknownFieldsTransform,void,JSONReader<InputBuffer> &>(DetectUnknownFieldsTransform const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &);
	void Apply<DetectUnknownFieldsTransform,void,MafiaBinaryReader<InputBuffer> &>(DetectUnknownFieldsTransform const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &);
	void Apply<DetectUnknownFieldsTransform,void,SimpleProtocolReader<InputBuffer> &>(DetectUnknownFieldsTransform const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &);
	void DeserializeContainer<DetectUnknownFieldsTransform const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<DetectUnknownFieldsTransform const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<DetectUnknownFieldsTransform const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<DetectUnknownFieldsTransform const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<ToWalkable const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<ToWalkable const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<ToWalkable const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<ToWalkable const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<nullable<TypeDef,detail::no_allocator,0>,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<nullable<TypeDef,detail::no_allocator,0>,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<nullable<TypeDef,detail::no_allocator,0>,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<nullable<TypeDef,detail::no_allocator,0>,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,bond::value<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::value<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo>,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<std::pair<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet>,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<std::pair<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet>,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<std::vector<FieldDef,std::allocator<FieldDef> >,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::vector<FieldDef,std::allocator<FieldDef> >,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<std::vector<FieldDef,std::allocator<FieldDef> >,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::vector<FieldDef,std::allocator<FieldDef> >,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeContainer<std::vector<StructDef,std::allocator<StructDef> >,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::vector<StructDef,std::allocator<StructDef> >,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeContainer<std::vector<StructDef,std::allocator<StructDef> >,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeContainer<std::vector<StructDef,std::allocator<StructDef> >,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeElements<Serializer<CompactBinaryWriter<OutputCounter> >,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<ToWalkable,value<void,JSONReader<InputBuffer> &,void> >(ToWalkable const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<TypeDef,detail::no_allocator,0,value<TypeDef,CompactBinaryReader<InputBuffer> &,void> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<bond::TypeDef,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<TypeDef,detail::no_allocator,0,value<TypeDef,JSONReader<InputBuffer> &,void> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<bond::TypeDef,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<TypeDef,detail::no_allocator,0,value<TypeDef,MafiaBinaryReader<InputBuffer> &,void> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<bond::TypeDef,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<TypeDef,detail::no_allocator,0,value<TypeDef,SimpleProtocolReader<InputBuffer> &,void> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<bond::TypeDef,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<nullable<TypeDef,detail::no_allocator,0>,value<void,CompactBinaryReader<InputBuffer> &,void> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<nullable<TypeDef,detail::no_allocator,0>,value<void,JSONReader<InputBuffer> &,void> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<nullable<TypeDef,detail::no_allocator,0>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<nullable<TypeDef,detail::no_allocator,0>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(bond::nullable<bond::TypeDef,bond::detail::no_allocator,0> &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> &,void> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<FieldDef,std::allocator<FieldDef> >,value<FieldDef,CompactBinaryReader<InputBuffer> &,void> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<bond::FieldDef,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<FieldDef,std::allocator<FieldDef> >,value<FieldDef,JSONReader<InputBuffer> &,void> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<bond::FieldDef,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<FieldDef,std::allocator<FieldDef> >,value<FieldDef,MafiaBinaryReader<InputBuffer> &,void> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<bond::FieldDef,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<FieldDef,std::allocator<FieldDef> >,value<FieldDef,SimpleProtocolReader<InputBuffer> &,void> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<bond::FieldDef,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<FieldDef,std::allocator<FieldDef> >,value<void,CompactBinaryReader<InputBuffer> &,void> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<FieldDef,std::allocator<FieldDef> >,value<void,JSONReader<InputBuffer> &,void> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<FieldDef,std::allocator<FieldDef> >,value<void,MafiaBinaryReader<InputBuffer> &,void> >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<StructDef,std::allocator<StructDef> >,value<StructDef,JSONReader<InputBuffer> &,void> >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,bond::value<bond::StructDef,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<StructDef,std::allocator<StructDef> >,value<StructDef,MafiaBinaryReader<InputBuffer> &,void> >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,bond::value<bond::StructDef,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<StructDef,std::allocator<StructDef> >,value<StructDef,SimpleProtocolReader<InputBuffer> &,void> >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,bond::value<bond::StructDef,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<StructDef,std::allocator<StructDef> >,value<void,CompactBinaryReader<InputBuffer> &,void> >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<StructDef,std::allocator<StructDef> >,value<void,JSONReader<InputBuffer> &,void> >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeElements<std::vector<StructDef,std::allocator<StructDef> >,value<void,MafiaBinaryReader<InputBuffer> &,void> >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMap<DetectUnknownFieldsTransform const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<DetectUnknownFieldsTransform const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(DetectUnknownFieldsTransform const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<DetectUnknownFieldsTransform const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(DetectUnknownFieldsTransform const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<DetectUnknownFieldsTransform const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(DetectUnknownFieldsTransform const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<CompactBinaryWriter<OutputCounter> > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > > const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMap<ToWalkable const ,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(ToWalkable const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<ToWalkable const ,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(ToWalkable const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<ToWalkable const ,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(ToWalkable const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<ToWalkable const ,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(ToWalkable const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<Windows::Data::Platform::Partitioning::PartitionInfo,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<Windows::Data::Platform::Partitioning::PartitionInfo,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<Windows::Data::Platform::Partitioning::PartitionInfo,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<Windows::Data::Platform::Partitioning::PartitionInfo,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<Windows::Data::Platform::Partitioning::PartitionInfo,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<Windows::Data::Platform::Partitioning::PartitionSet,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<void,CompactBinaryReader<InputBuffer> &,void>,CompactBinaryReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::CompactBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<void,JSONReader<InputBuffer> &,void>,JSONReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::JSONReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<void,MafiaBinaryReader<InputBuffer> &,void>,MafiaBinaryReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::MafiaBinaryReader<bond::InputBuffer> &);
	void DeserializeMap<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<JSONWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<__int64,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<bool,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<double,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<float,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<int,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<short,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<signed char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned __int64,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned int,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<__int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<__int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<bool,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<bool,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<double,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<double,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<float,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<float,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<signed char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<signed char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned __int64,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned __int64,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned char,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned int,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned int,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<unsigned short,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<Serializer<SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >,value<unsigned short,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > > const &,bond::value<unsigned short,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> &,void> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> &,void> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> &,void> >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<Windows::Data::Platform::Partitioning::PartitionInfo,CompactBinaryReader<InputBuffer> &,void> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<Windows::Data::Platform::Partitioning::PartitionInfo,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> &,void> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<Windows::Data::Platform::Partitioning::PartitionInfo,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<Windows::Data::Platform::Partitioning::PartitionInfo,MafiaBinaryReader<InputBuffer> &,void> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<Windows::Data::Platform::Partitioning::PartitionInfo,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> &,void> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<Windows::Data::Platform::Partitioning::PartitionInfo,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned __int64,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned __int64,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<Windows::Data::Platform::Partitioning::PartitionSet,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<void,CompactBinaryReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<Windows::Data::Platform::Partitioning::PartitionSet,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<void,JSONReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<Windows::Data::Platform::Partitioning::PartitionSet,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<void,MafiaBinaryReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<Windows::Data::Platform::Partitioning::PartitionSet,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned int,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned int,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,value<unsigned short,SimpleProtocolReader<InputBuffer> &,void>,value<void,SimpleProtocolReader<InputBuffer> &,void> >(std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > &,bond::value<unsigned short,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<unsigned char,CompactBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> &,void> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::value<unsigned char,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::CompactBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<unsigned char,JSONReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> &,void> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::value<unsigned char,bond::JSONReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::JSONReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<unsigned char,MafiaBinaryReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> &,void> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::value<unsigned char,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::MafiaBinaryReader<bond::InputBuffer> &,void> const &,unsigned int);
	void DeserializeMapElements<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,value<unsigned char,SimpleProtocolReader<InputBuffer> &,void>,value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> &,void> >(std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,bond::value<unsigned char,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::value<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,unsigned int);
	void GenericReadVariableUnsigned<InputBuffer,unsigned __int64>(bond::InputBuffer &,unsigned __int64 &);
	void GenericReadVariableUnsigned<InputBuffer,unsigned int>(bond::InputBuffer &,unsigned int &);
	void GenericReadVariableUnsigned<InputBuffer,unsigned short>(bond::InputBuffer &,unsigned short &);
	void GenericWriteVariableUnsigned<OutputMemoryStream<std::allocator<char> >,unsigned __int64>(bond::OutputMemoryStream<std::allocator<char> > &,unsigned __int64);
	void GenericWriteVariableUnsigned<OutputMemoryStream<std::allocator<char> >,unsigned int>(bond::OutputMemoryStream<std::allocator<char> > &,unsigned int);
	void GenericWriteVariableUnsigned<OutputMemoryStream<std::allocator<char> >,unsigned short>(bond::OutputMemoryStream<std::allocator<char> > &,unsigned short);
	void InvalidEnumValueException(int,char const *);
	void Merge<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryReader<InputBuffer>,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >(Windows::Data::Platform::Partitioning::PartitionMetadata const &,bond::CompactBinaryReader<bond::InputBuffer>,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > &);
	void Merge<Windows::Data::Platform::Partitioning::PartitionMetadata,JSONReader<InputBuffer>,JSONWriter<OutputMemoryStream<std::allocator<char> > > >(Windows::Data::Platform::Partitioning::PartitionMetadata const &,bond::JSONReader<bond::InputBuffer>,bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > &);
	void Merge<Windows::Data::Platform::Partitioning::PartitionMetadata,MafiaBinaryReader<InputBuffer>,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >(Windows::Data::Platform::Partitioning::PartitionMetadata const &,bond::MafiaBinaryReader<bond::InputBuffer>,bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > &);
	void Merge<Windows::Data::Platform::Partitioning::PartitionMetadata,SimpleProtocolReader<InputBuffer>,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >(Windows::Data::Platform::Partitioning::PartitionMetadata const &,bond::SimpleProtocolReader<bond::InputBuffer>,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > &);
	void PassThrough<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryReader<InputBuffer>,CompactBinaryWriter<OutputCounter> >(bond::bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryReader<bond::InputBuffer> &> &,bond::CompactBinaryReader<bond::InputBuffer> &,bond::CompactBinaryWriter<bond::OutputCounter> &);
	void PassThrough<Windows::Data::Platform::Partitioning::PartitionMetadata,CompactBinaryReader<InputBuffer>,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >(bond::bonded<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryReader<bond::InputBuffer> &> &,bond::CompactBinaryReader<bond::InputBuffer> &,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > &);
	void PassThrough<void,CompactBinaryReader<InputBuffer>,CompactBinaryWriter<OutputCounter> >(bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> &,bond::CompactBinaryReader<bond::InputBuffer> &,bond::CompactBinaryWriter<bond::OutputCounter> &);
	void PassThrough<void,CompactBinaryReader<InputBuffer>,CompactBinaryWriter<OutputMemoryStream<std::allocator<char> > > >(bond::bonded<void,bond::CompactBinaryReader<bond::InputBuffer> &> &,bond::CompactBinaryReader<bond::InputBuffer> &,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > &);
	void PassThrough<void,MafiaBinaryReader<InputBuffer>,MafiaBinaryWriter<OutputMemoryStream<std::allocator<char> > > >(bond::bonded<void,bond::MafiaBinaryReader<bond::InputBuffer> &> &,bond::MafiaBinaryReader<bond::InputBuffer> &,bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > &);
	void PassThrough<void,SimpleProtocolReader<InputBuffer>,SimpleProtocolWriter<OutputMemoryStream<std::allocator<char> > > >(bond::bonded<void,bond::SimpleProtocolReader<bond::InputBuffer> &> &,bond::SimpleProtocolReader<bond::InputBuffer> &,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > &);
	void Skip<CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,bond::RuntimeSchema const &,std::nothrow_t const &);
	void Skip<FieldDef,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<FieldDef,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<FieldDef,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<FieldDef,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &);
	void Skip<FieldDef,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,bond::RuntimeSchema const &,std::nothrow_t const &);
	void Skip<MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,bond::RuntimeSchema const &,std::nothrow_t const &);
	void Skip<SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,bond::RuntimeSchema const &);
	void Skip<SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,bond::RuntimeSchema const &,std::nothrow_t const &);
	void Skip<StructDef,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<StructDef,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<StructDef,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<StructDef,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &);
	void Skip<StructDef,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<TypeDef,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &);
	void Skip<TypeDef,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<TypeDef,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &);
	void Skip<TypeDef,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<TypeDef,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &);
	void Skip<TypeDef,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<TypeDef,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &);
	void Skip<TypeDef,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionInfo,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionInfo,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionInfo,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionInfo,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionInfo,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionInfo,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionSet,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionSet,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionSet,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &);
	void Skip<Windows::Data::Platform::Partitioning::PartitionSet,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<__int64,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<__int64,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<__int64,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<__int64,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<bool,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<bool,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<bool,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<bool,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<double,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<double,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<double,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<double,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<float,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<float,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<float,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<float,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<int,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<int,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<int,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<int,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<nullable<TypeDef,detail::no_allocator,0>,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<nullable<TypeDef,detail::no_allocator,0>,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<nullable<TypeDef,detail::no_allocator,0>,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<nullable<TypeDef,detail::no_allocator,0>,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<short,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<short,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<short,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<short,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<signed char,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<signed char,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<signed char,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<signed char,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,std::less<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > >,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > >,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::map<unsigned char,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::vector<FieldDef,std::allocator<FieldDef> >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::vector<FieldDef,std::allocator<FieldDef> >,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::vector<FieldDef,std::allocator<FieldDef> >,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::vector<FieldDef,std::allocator<FieldDef> >,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::vector<StructDef,std::allocator<StructDef> >,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::vector<StructDef,std::allocator<StructDef> >,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::vector<StructDef,std::allocator<StructDef> >,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<std::vector<StructDef,std::allocator<StructDef> >,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned __int64,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned __int64,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned __int64,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned __int64,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned char,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned char,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned char,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned char,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned int,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned int,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned int,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned int,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned short,CompactBinaryReader<InputBuffer> >(bond::CompactBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned short,JSONReader<InputBuffer> >(bond::JSONReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned short,MafiaBinaryReader<InputBuffer> >(bond::MafiaBinaryReader<bond::InputBuffer> &,std::nothrow_t const &);
	void Skip<unsigned short,SimpleProtocolReader<InputBuffer> >(bond::SimpleProtocolReader<bond::InputBuffer> &,std::nothrow_t const &);
	void SkipContainer<value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void SkipMap<value<void,SimpleProtocolReader<InputBuffer> &,void>,SimpleProtocolReader<InputBuffer> >(bond::_bond_enumerators::BondDataType::BondDataType,bond::value<void,bond::SimpleProtocolReader<bond::InputBuffer> &,void> const &,bond::SimpleProtocolReader<bond::InputBuffer> &);
	void UnknownProtocolException();
	void WriteVariableUnsigned<OutputMemoryStream<std::allocator<char> >,unsigned __int64>(bond::OutputMemoryStream<std::allocator<char> > &,unsigned __int64);
	void WriteVariableUnsigned<OutputMemoryStream<std::allocator<char> >,unsigned int>(bond::OutputMemoryStream<std::allocator<char> > &,unsigned int);
	void WriteVariableUnsigned<OutputMemoryStream<std::allocator<char> >,unsigned short>(bond::OutputMemoryStream<std::allocator<char> > &,unsigned short);
	void resize_list<std::vector<FieldDef,std::allocator<FieldDef> > >(std::vector<bond::FieldDef,std::allocator<bond::FieldDef> > &,unsigned int);
	void resize_list<std::vector<StructDef,std::allocator<StructDef> > >(std::vector<bond::StructDef,std::allocator<bond::StructDef> > &,unsigned int);
};

namespace boost
{
	struct aligned_storage<128,8>
	{
		~aligned_storage<128,8>();
	};

	namespace assign
	{
		assign_detail::generic_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > map_list_of<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
	};

	namespace assign_detail
	{
		class converter<generic_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >
		{
			std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > convert<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >(std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const *,default_type_tag);
		};

		struct generic_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
		{
			namespace operator<std
			{
			};

			generic_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > & operator()<char [25],char [15]>(char const (&)[25],char const (&)[15]);
			generic_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > & operator()<char [38],char [16]>(char const (&)[38],char const (&)[16]);
			generic_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > & operator()<char [38],char [6]>(char const (&)[38],char const (&)[6]);
			~generic_list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >();
		};

	};

	struct bad_lexical_cast
	{
		bad_lexical_cast(bad_lexical_cast const &);
		virtual char const * what();
		virtual ~bad_lexical_cast();
	};

	struct base_from_member<shared_ptr<io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > >,0>
	{
		~base_from_member<shared_ptr<io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > >,0>();
	};

	class basic_format<char,std::char_traits<char>,std::allocator<char> >
	{
		void make_or_reuse_data(unsigned __int64);
	public:
		basic_format<char,std::char_traits<char>,std::allocator<char> > & clear();
		basic_format<char,std::char_traits<char>,std::allocator<char> > & parse(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		basic_format<char,std::char_traits<char>,std::allocator<char> >(char const *);
		std::basic_string<char,std::char_traits<char>,std::allocator<char> > str();
		std::locale getloc();
		unsigned __int64 size();
		~basic_format<char,std::char_traits<char>,std::allocator<char> >();
	};

	namespace detail
	{
		struct lexical_cast_do_cast<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
		{
			static int lexical_cast_impl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		};

		struct lexical_cast_do_cast<unsigned __int64,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
		{
			static unsigned __int64 lexical_cast_impl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		};

		struct lexical_cast_do_cast<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
		{
			static unsigned int lexical_cast_impl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		};

		struct lexical_cast_do_cast<unsigned short,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
		{
			static unsigned short lexical_cast_impl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		};

		class lexical_stream_limited_src<char,std::char_traits<char>,0>
		{
			bool shr_signed<__int64>(__int64 &);
			bool shr_signed<short>(short &);
		public:
			bool operator<<<std::allocator<char> >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		};

		struct shared_count
		{
			shared_count<bond::SchemaDef *,sp_ms_deleter<bond::SchemaDef> >(bond::SchemaDef *,sp_inplace_tag<sp_ms_deleter<bond::SchemaDef> >);
			shared_count<char *,sfl::detail::array_deleter<char>,sfl::detail::allocate_helper<std::allocator<char>,char,char> >(char *,sfl::detail::array_deleter<char>,sfl::detail::allocate_helper<std::allocator<char>,char,char>);
			shared_count<char const *,bond::blob::deleter<std::shared_ptr<char const > > >(char const *,bond::blob::deleter<std::shared_ptr<char const > >);
			shared_count<io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > *,io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char> >::No_Op>(io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > *,io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char> >::No_Op);
		};

		struct sp_counted_base
		{
			virtual void destroy();
			virtual ~sp_counted_base();
			void release();
			void weak_release();
		};

		struct sp_counted_impl_pd<bond::SchemaDef *,sp_ms_deleter<bond::SchemaDef> >
		{
			virtual void * get_deleter(type_info const &);
			virtual void * get_untyped_deleter();
			virtual void dispose();
		};

		struct sp_counted_impl_pd<char const *,bond::blob::deleter<std::shared_ptr<char const > > >
		{
			virtual void * get_deleter(type_info const &);
			virtual void * get_untyped_deleter();
			virtual void dispose();
		};

		struct sp_counted_impl_pd<io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > *,io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char> >::No_Op>
		{
			virtual void * get_deleter(type_info const &);
			virtual void * get_untyped_deleter();
			virtual void dispose();
		};

		struct sp_counted_impl_pda<char *,sfl::detail::array_deleter<char>,sfl::detail::allocate_helper<std::allocator<char>,char,char> >
		{
			virtual void * get_deleter(type_info const &);
			virtual void * get_untyped_deleter();
			virtual void destroy();
			virtual void dispose();
		};

		namespace variant
		{
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::ActivePartitions,Windows::Data::Platform::Partitioning::ActivePartitions::Schema,bond::To<Windows::Data::Platform::Partitioning::ActivePartitions,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::ActivePartitions,Windows::Data::Platform::Partitioning::ActivePartitions::Schema,bond::To<Windows::Data::Platform::Partitioning::ActivePartitions,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema,bond::To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata::Schema,bond::To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputCounter> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputCounter> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::To<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::To<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::PartitionMetadata> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::To<bond::Void,bond::RequiredFieldValiadator<bond::Void> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::To<bond::Void,bond::RequiredFieldValiadator<bond::Void> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::SystemPartitionIndex,Windows::Data::Platform::Partitioning::SystemPartitionIndex::Schema,bond::To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::SystemPartitionIndex,Windows::Data::Platform::Partitioning::SystemPartitionIndex::Schema,bond::To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<bond::SchemaDef,bond::SchemaDef::Schema,bond::To<bond::SchemaDef,bond::RequiredFieldValiadator<bond::SchemaDef> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<bond::SchemaDef,bond::SchemaDef::Schema,bond::To<bond::SchemaDef,bond::RequiredFieldValiadator<bond::SchemaDef> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputCounter> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputCounter> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Serializer<bond::CompactBinaryWriter<bond::OutputCounter> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Serializer<bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Serializer<bond::MafiaBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::Serializer<bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::To<Windows::Data::Platform::Partitioning::ActivePartitions,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::To<Windows::Data::Platform::Partitioning::ActivePartitions,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::ActivePartitions> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::To<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::To<Windows::Data::Platform::Partitioning::SystemPartitionIndex,bond::RequiredFieldValiadator<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::To<bond::SchemaDef,bond::RequiredFieldValiadator<bond::SchemaDef> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::To<bond::SchemaDef,bond::RequiredFieldValiadator<bond::SchemaDef> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::To<bond::Void,bond::RequiredFieldValiadator<bond::Void> >,void> >,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::invoke_visitor<bond::detail::Parser<void,bond::RuntimeSchema,bond::To<bond::Void,bond::RequiredFieldValiadator<bond::Void> >,void> > &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
			bool visitation_impl_invoke<invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,bond::CompactBinaryReader<bond::InputBuffer>,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,bond::CompactBinaryReader<bond::InputBuffer> *,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,int);
			bool visitation_impl_invoke<invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,bond::JSONReader<bond::InputBuffer>,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,bond::JSONReader<bond::InputBuffer> *,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,int);
			bool visitation_impl_invoke<invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,bond::SimpleProtocolReader<bond::InputBuffer>,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,bond::SimpleProtocolReader<bond::InputBuffer> *,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,int);
			bool visitation_impl_invoke<invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,bond::JSONReader<bond::InputBuffer>,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,bond::JSONReader<bond::InputBuffer> *,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,int);
			bool visitation_impl_invoke<invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,bond::ValueReader,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::JSONWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,bond::ValueReader *,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,int);
			bool visitation_impl_invoke<invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,bond::CompactBinaryReader<bond::InputBuffer>,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,bond::CompactBinaryReader<bond::InputBuffer> *,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,int);
			bool visitation_impl_invoke<invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,bond::MafiaBinaryReader<bond::InputBuffer>,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,bond::MafiaBinaryReader<bond::InputBuffer> *,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,int);
			bool visitation_impl_invoke<invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> >,void *,bond::SimpleProtocolReader<bond::InputBuffer>,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &,void *,bond::SimpleProtocolReader<bond::InputBuffer> *,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,int);
			void visitation_impl<mpl::int_<0>,visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> >,assign_storage,void *,variant<over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_,void_>::has_fallback_type_>(int,int,variant::assign_storage &,void *,mpl::bool_<0>,variant<variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_,variant::void_>::has_fallback_type_,mpl::int_<0> *,variant::visitation_impl_step<mpl::l_iter<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::l_item<mpl::long_<5>,bond::CompactBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<4>,bond::SimpleProtocolReader<bond::InputBuffer>,mpl::l_item<mpl::long_<3>,bond::MafiaBinaryReader<bond::InputBuffer>,mpl::l_item<mpl::long_<2>,bond::JSONReader<bond::InputBuffer>,mpl::l_item<mpl::long_<1>,bond::JsonPrettyReader<bond::InputBuffer>,mpl::l_end> > > > > > >,mpl::l_iter<mpl::l_end> > *);
		};

		bool lcast_ret_unsigned<std::char_traits<char>,unsigned __int64,char>(unsigned __int64 &,char const * const,char const *);
		bool lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>(unsigned int &,char const * const,char const *);
		bool lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>(unsigned short &,char const * const,char const *);
		void sp_deleter_construct<bond::SchemaDef,bond::SchemaDef>(shared_ptr<bond::SchemaDef> *,bond::SchemaDef *);
		void sp_deleter_construct<char const ,char const >(shared_ptr<char const > *,char const *);
		void sp_deleter_construct<char,char>(shared_ptr<char> *,char *);
		void sp_deleter_construct<io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> >,io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > >(shared_ptr<io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > > *,io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > *);
		void sp_enable_shared_from_this(...);
	};

	struct exception
	{
		exception(exception const &);
	};

	namespace exception_detail
	{
		struct clone_base
		{
			clone_base(clone_base const &);
			virtual ~clone_base();
		};

		class clone_impl<error_info_injector<bad_lexical_cast> >
		{
			clone_impl<error_info_injector<bad_lexical_cast> >(clone_impl<error_info_injector<bad_lexical_cast> > const &,clone_impl<error_info_injector<bad_lexical_cast> >::clone_tag);
			virtual clone_base const * clone();
			virtual void rethrow();
		public:
			clone_impl<error_info_injector<bad_lexical_cast> >(clone_impl<error_info_injector<bad_lexical_cast> > const &);
			clone_impl<error_info_injector<bad_lexical_cast> >(error_info_injector<bad_lexical_cast> const &);
			virtual ~clone_impl<error_info_injector<bad_lexical_cast> >();
		};

		class clone_impl<error_info_injector<io::bad_format_string> >
		{
			clone_impl<error_info_injector<io::bad_format_string> >(clone_impl<error_info_injector<io::bad_format_string> > const &,clone_impl<error_info_injector<io::bad_format_string> >::clone_tag);
			virtual clone_base const * clone();
			virtual void rethrow();
		public:
			clone_impl<error_info_injector<io::bad_format_string> >(clone_impl<error_info_injector<io::bad_format_string> > const &);
			clone_impl<error_info_injector<io::bad_format_string> >(error_info_injector<io::bad_format_string> const &);
		};

		class clone_impl<error_info_injector<io::too_few_args> >
		{
			clone_impl<error_info_injector<io::too_few_args> >(clone_impl<error_info_injector<io::too_few_args> > const &,clone_impl<error_info_injector<io::too_few_args> >::clone_tag);
			virtual clone_base const * clone();
			virtual void rethrow();
		public:
			clone_impl<error_info_injector<io::too_few_args> >(clone_impl<error_info_injector<io::too_few_args> > const &);
			clone_impl<error_info_injector<io::too_few_args> >(error_info_injector<io::too_few_args> const &);
		};

		class clone_impl<error_info_injector<io::too_many_args> >
		{
			clone_impl<error_info_injector<io::too_many_args> >(clone_impl<error_info_injector<io::too_many_args> > const &,clone_impl<error_info_injector<io::too_many_args> >::clone_tag);
			virtual clone_base const * clone();
			virtual void rethrow();
		public:
			clone_impl<error_info_injector<io::too_many_args> >(clone_impl<error_info_injector<io::too_many_args> > const &);
			clone_impl<error_info_injector<io::too_many_args> >(error_info_injector<io::too_many_args> const &);
		};

		struct error_info_injector<bad_lexical_cast>
		{
			error_info_injector<bad_lexical_cast>(error_info_injector<bad_lexical_cast> const &);
			virtual ~error_info_injector<bad_lexical_cast>();
		};

		struct error_info_injector<io::bad_format_string>
		{
			error_info_injector<io::bad_format_string>(error_info_injector<io::bad_format_string> const &);
			virtual ~error_info_injector<io::bad_format_string>();
		};

		struct error_info_injector<io::too_few_args>
		{
			error_info_injector<io::too_few_args>(error_info_injector<io::too_few_args> const &);
			virtual ~error_info_injector<io::too_few_args>();
		};

		struct error_info_injector<io::too_many_args>
		{
			error_info_injector<io::too_many_args>(error_info_injector<io::too_many_args> const &);
			virtual ~error_info_injector<io::too_many_args>();
		};

		class refcount_ptr<error_info_container>
		{
			void add_ref();
			void release();
		public:
			~refcount_ptr<error_info_container>();
		};

		void copy_boost_exception(exception *,exception const *);
	};

	namespace io
	{
		struct bad_format_string
		{
			bad_format_string(bad_format_string const &);
			virtual char const * what();
			virtual ~bad_format_string();
		};

		class basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> >
		{
		protected:
			virtual int overflow(int);
			virtual int pbackfail(int);
			virtual int underflow();
			virtual std::fpos<_Mbstatet> seekoff(__int64,int,int);
			virtual std::fpos<_Mbstatet> seekpos(std::fpos<_Mbstatet>,int);
			void dealloc();
		public:
			unsigned __int64 pcount();
			virtual ~basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> >();
			void clear_buffer();
		};

		struct basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char> >
		{
			basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char> >(basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > *);
		};

		namespace detail
		{
			struct format_item<char,std::char_traits<char>,std::allocator<char> >
			{
				format_item<char,std::char_traits<char>,std::allocator<char> > & operator=(format_item<char,std::char_traits<char>,std::allocator<char> > const &);
				format_item<char,std::char_traits<char>,std::allocator<char> >(format_item<char,std::char_traits<char>,std::allocator<char> > const &);
				~format_item<char,std::char_traits<char>,std::allocator<char> >();
			};

			struct stream_format_state<char,std::char_traits<char> >
			{
				void apply_on(std::basic_ios<char,std::char_traits<char> > &,std::locale *);
			};

			bool parse_printf_directive<char,std::char_traits<char>,std::allocator<char>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::ctype<char> >(std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > &,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > const &,detail::format_item<char,std::char_traits<char>,std::allocator<char> > *,std::ctype<char> const &,unsigned __int64,unsigned char);
			int upper_bound_from_fstring<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::ctype<char> >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,char,std::ctype<char> const &,unsigned char);
			std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > skip_asterisk<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::ctype<char> >(std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::ctype<char> const &);
			std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > str2int<__int64,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::ctype<char> >(std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > const &,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > const &,__int64 &,std::ctype<char> const &);
			std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > str2int<int,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::ctype<char> >(std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > const &,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > const &,int &,std::ctype<char> const &);
			std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > wrap_scan_notdigit<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::ctype<char> >(std::ctype<char> const &,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >);
			void append_string<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,unsigned __int64,unsigned __int64);
			void distribute<char,std::char_traits<char>,std::allocator<char>,__int64 const &>(basic_format<char,std::char_traits<char>,std::allocator<char> > &,__int64 const &);
			void distribute<char,std::char_traits<char>,std::allocator<char>,char const (&)[9]>(basic_format<char,std::char_traits<char>,std::allocator<char> > &,char const (&)[9]);
			void distribute<char,std::char_traits<char>,std::allocator<char>,char const * const &>(basic_format<char,std::char_traits<char>,std::allocator<char> > &,char const * const &);
			void distribute<char,std::char_traits<char>,std::allocator<char>,group1<group2<std::_Smanip<__int64>,double const &> > const &>(basic_format<char,std::char_traits<char>,std::allocator<char> > &,detail::group1<detail::group2<std::_Smanip<__int64>,double const &> > const &);
			void distribute<char,std::char_traits<char>,std::allocator<char>,int const &>(basic_format<char,std::char_traits<char>,std::allocator<char> > &,int const &);
			void distribute<char,std::char_traits<char>,std::allocator<char>,short const &>(basic_format<char,std::char_traits<char>,std::allocator<char> > &,short const &);
			void distribute<char,std::char_traits<char>,std::allocator<char>,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>(basic_format<char,std::char_traits<char>,std::allocator<char> > &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
			void distribute<char,std::char_traits<char>,std::allocator<char>,unsigned __int64 const &>(basic_format<char,std::char_traits<char>,std::allocator<char> > &,unsigned __int64 const &);
			void distribute<char,std::char_traits<char>,std::allocator<char>,unsigned int const &>(basic_format<char,std::char_traits<char>,std::allocator<char> > &,unsigned int const &);
			void distribute<char,std::char_traits<char>,std::allocator<char>,unsigned short const &>(basic_format<char,std::char_traits<char>,std::allocator<char> > &,unsigned short const &);
			void maybe_throw_exception(unsigned char,unsigned __int64,unsigned __int64);
			void mk_str<char,std::char_traits<char>,std::allocator<char> >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,char const *,unsigned __int64,__int64,char,int,char,bool);
			void put<char,std::char_traits<char>,std::allocator<char>,__int64 const &>(__int64 const &,detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > &,std::locale *);
			void put<char,std::char_traits<char>,std::allocator<char>,char const (&)[9]>(char const (&)[9],detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > &,std::locale *);
			void put<char,std::char_traits<char>,std::allocator<char>,char const * const &>(char const * const &,detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > &,std::locale *);
			void put<char,std::char_traits<char>,std::allocator<char>,group1<group2<std::_Smanip<__int64>,double const &> > const &>(detail::group1<detail::group2<std::_Smanip<__int64>,double const &> > const &,detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > &,std::locale *);
			void put<char,std::char_traits<char>,std::allocator<char>,int const &>(int const &,detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > &,std::locale *);
			void put<char,std::char_traits<char>,std::allocator<char>,short const &>(short const &,detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > &,std::locale *);
			void put<char,std::char_traits<char>,std::allocator<char>,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > &,std::locale *);
			void put<char,std::char_traits<char>,std::allocator<char>,unsigned __int64 const &>(unsigned __int64 const &,detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > &,std::locale *);
			void put<char,std::char_traits<char>,std::allocator<char>,unsigned int const &>(unsigned int const &,detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > &,std::locale *);
			void put<char,std::char_traits<char>,std::allocator<char>,unsigned short const &>(unsigned short const &,detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,basic_altstringbuf<char,std::char_traits<char>,std::allocator<char> > &,std::locale *);
		};

		struct format_error
		{
			format_error(format_error const &);
			virtual char const * what();
		};

		struct too_few_args
		{
			too_few_args(too_few_args const &);
			virtual char const * what();
			virtual ~too_few_args();
		};

		struct too_many_args
		{
			too_many_args(too_many_args const &);
			virtual char const * what();
			virtual ~too_many_args();
		};

	};

	struct optional<std::locale>
	{
		~optional<std::locale>();
	};

	struct shared_ptr<bond::SchemaDef>
	{
		~shared_ptr<bond::SchemaDef>();
	};

	struct shared_ptr<char const >
	{
		shared_ptr<char const > & operator=(shared_ptr<char const > const &);
	};

	struct shared_ptr<char>
	{
		~shared_ptr<char>();
	};

	class variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>
	{
		class assigner
		{
			void assign_impl<bond::CompactBinaryReader<bond::InputBuffer>,mpl::bool_<1>,variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>::has_fallback_type_>(bond::CompactBinaryReader<bond::InputBuffer> const &,mpl::bool_<1>,mpl::bool_<1>,variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>::has_fallback_type_);
			void assign_impl<bond::JSONReader<bond::InputBuffer> >(bond::JSONReader<bond::InputBuffer> const &,mpl::bool_<0>,mpl::bool_<0>,mpl::bool_<1>);
			void assign_impl<bond::JsonPrettyReader<bond::InputBuffer> >(bond::JsonPrettyReader<bond::InputBuffer> const &,mpl::bool_<0>,mpl::bool_<0>,mpl::bool_<1>);
			void assign_impl<bond::MafiaBinaryReader<bond::InputBuffer>,mpl::bool_<1>,variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>::has_fallback_type_>(bond::MafiaBinaryReader<bond::InputBuffer> const &,mpl::bool_<1>,mpl::bool_<1>,variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>::has_fallback_type_);
			void assign_impl<bond::SimpleProtocolReader<bond::InputBuffer>,mpl::bool_<1>,variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>::has_fallback_type_>(bond::SimpleProtocolReader<bond::InputBuffer> const &,mpl::bool_<1>,mpl::bool_<1>,variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>::has_fallback_type_);
			void assign_impl<bond::ValueReader,mpl::bool_<1>,variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>::has_fallback_type_>(bond::ValueReader const &,mpl::bool_<1>,mpl::bool_<1>,variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>::has_fallback_type_);
		};

		bool internal_apply_visitor<detail::variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > >(detail::variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::CompactBinaryWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &);
		bool internal_apply_visitor<detail::variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > >(detail::variant::invoke_visitor<bond::detail::Parser<Windows::Data::Platform::Partitioning::PartitionMetadata,Windows::Data::Platform::Partitioning::PartitionMetadata::Schema,bond::Merger<Windows::Data::Platform::Partitioning::PartitionMetadata,bond::SimpleProtocolWriter<bond::OutputMemoryStream<std::allocator<char> > > >,void> > &);
		void internal_apply_visitor<variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>::assigner>(variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>::assigner &);
	public:
		variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_>(variant<detail::variant::over_sequence<mpl::l_item<mpl::long_<6>,bond::ValueReader,mpl::list5<bond::CompactBinaryReader<bond::InputBuffer>,bond::SimpleProtocolReader<bond::InputBuffer>,bond::MafiaBinaryReader<bond::InputBuffer>,bond::JSONReader<bond::InputBuffer>,bond::JsonPrettyReader<bond::InputBuffer> > > >,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_,detail::variant::void_> const &);
	};

	sfl::detail::array_deleter<char> * get_deleter<sfl::detail::array_deleter<char>,char>(boost::shared_ptr<char> const &);
	void throw_exception<bad_lexical_cast>(boost::bad_lexical_cast const &);
	void throw_exception<io::bad_format_string>(boost::io::bad_format_string const &);
	void throw_exception<io::too_few_args>(boost::io::too_few_args const &);
	void throw_exception<io::too_many_args>(boost::io::too_many_args const &);
};

struct deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions>
{
	Windows::Data::Platform::Partitioning::ActivePartitions const & deserialized();
	deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions>(schematized_data const &);
	schematized_data const & serialized();
	~deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions>();
};

struct deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex>
{
	Windows::Data::Platform::Partitioning::SystemPartitionIndex const & deserialized();
	deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex>(schematized_data const &);
	schematized_data const & serialized();
	~deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex>();
};

struct deserializable_data<bond::SchemaDef>
{
	bond::SchemaDef const & deserialized();
	deserializable_data<bond::SchemaDef>(schematized_data const &);
	~deserializable_data<bond::SchemaDef>();
};

struct ensure_com_ptr<Windows::Internal::Storage::Cloud::ICloudStore,EnsureCloudStore<Windows::Internal::Storage::Cloud::ICloudStore> >
{
	wil::com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,wil::err_exception_policy> const & get();
	~ensure_com_ptr<Windows::Internal::Storage::Cloud::ICloudStore,EnsureCloudStore<Windows::Internal::Storage::Cloud::ICloudStore> >();
};

struct resolved<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >
{
	~resolved<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >();
};

struct resolved<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > >
{
	~resolved<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > >();
};

struct resolved<std::vector<walkable::complex,std::allocator<walkable::complex> > >
{
	~resolved<std::vector<walkable::complex,std::allocator<walkable::complex> > >();
};

struct resolved<walkable::complex>
{
	~resolved<walkable::complex>();
};

struct resolved<walkable::field>
{
	~resolved<walkable::field>();
};

struct resolved<walkable::scalar>
{
	~resolved<walkable::scalar>();
};

struct resolved<walkable::structure>
{
	~resolved<walkable::structure>();
};

class schematized_data
{
	static void propagate_default_state(schematized_data::state *,schematized_data::state const &,bool);
	void ensure_default();
public:
	Windows::Storage::Streams::IBuffer * as_buffer();
	bond::blob const & as_blob();
	bool has_blob();
	int compare(schematized_data const &);
	schematized_data & operator=(schematized_data const &);
	schematized_data(bond::RuntimeSchema const &);
	schematized_data(bond::RuntimeSchema const &,Windows::Storage::Streams::IBuffer *);
	schematized_data(bond::RuntimeSchema const &,bond::blob const &);
	schematized_data(schematized_data const &);
	walkable::structure const & as_walkable();
	~schematized_data();
};

namespace sfl
{
	namespace detail
	{
		struct array_deleter<char>
		{
			~array_deleter<char>();
		};

	};

	class nonassignable
	{
	protected:
		~nonassignable();
	};

	boost::shared_ptr<char> allocate_array<char,std::allocator<char> >(std::allocator<char> const &,unsigned __int64);
};

namespace std
{
	struct _Compressed_pair<_Wrap_alloc<allocator<FieldState> >,_Deque_val<_Deque_simple_types<FieldState> >,1>
	{
		~_Compressed_pair<_Wrap_alloc<allocator<FieldState> >,_Deque_val<_Deque_simple_types<FieldState> >,1>();
	};

	struct _Compressed_pair<_Wrap_alloc<allocator<Frame> >,_Deque_val<_Deque_simple_types<Frame> >,1>
	{
		~_Compressed_pair<_Wrap_alloc<allocator<Frame> >,_Deque_val<_Deque_simple_types<Frame> >,1>();
	};

	struct _Compressed_pair<_Wrap_alloc<allocator<MapFields> >,_Deque_val<_Deque_simple_types<MapFields> >,1>
	{
		~_Compressed_pair<_Wrap_alloc<allocator<MapFields> >,_Deque_val<_Deque_simple_types<MapFields> >,1>();
	};

	struct _Compressed_pair<_Wrap_alloc<allocator<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > > >,_Deque_val<_Deque_simple_types<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > > >,1>
	{
		~_Compressed_pair<_Wrap_alloc<allocator<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > > >,_Deque_val<_Deque_simple_types<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > > >,1>();
	};

	struct _Compressed_pair<_Wrap_alloc<allocator<basic_string<char,char_traits<char>,allocator<char> > > >,_Deque_val<_Deque_simple_types<basic_string<char,char_traits<char>,allocator<char> > > >,1>
	{
		~_Compressed_pair<_Wrap_alloc<allocator<basic_string<char,char_traits<char>,allocator<char> > > >,_Deque_val<_Deque_simple_types<basic_string<char,char_traits<char>,allocator<char> > > >,1>();
	};

	struct _Compressed_pair<_Wrap_alloc<allocator<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State> >,_Deque_val<_Deque_simple_types<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State> >,1>
	{
		~_Compressed_pair<_Wrap_alloc<allocator<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State> >,_Deque_val<_Deque_simple_types<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State> >,1>();
	};

	struct _Compressed_pair<_Wrap_alloc<allocator<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > >,_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > >,1>
	{
		~_Compressed_pair<_Wrap_alloc<allocator<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > >,_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > >,1>();
	};

	struct _Deque_alloc<_Deque_base_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >
	{
		~_Deque_alloc<_Deque_base_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >();
	};

	struct _Deque_const_iterator<_Deque_val<_Deque_simple_types<Frame> > >
	{
		Frame const & operator*();
		_Deque_const_iterator<_Deque_val<_Deque_simple_types<Frame> > >(_Deque_const_iterator<_Deque_val<_Deque_simple_types<Frame> > > const &);
	};

	struct _Deque_const_iterator<_Deque_val<_Deque_simple_types<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State> > >
	{
		_Deque_const_iterator<_Deque_val<_Deque_simple_types<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State> > >(_Deque_const_iterator<_Deque_val<_Deque_simple_types<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State> > > const &);
		bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State const & operator*();
	};

	struct _Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >
	{
		pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > const & operator*();
	};

	struct _Fac_tidy_reg_t
	{
		~_Fac_tidy_reg_t();
	};

	struct _Facetptr<ctype<char> >
	{
		static locale::facet const * const _Psave;
	};

	struct _Facetptr<numpunct<char> >
	{
		static locale::facet const * const _Psave;
	};

	class _Func_class<void,deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> const &>
	{
	protected:
		void _Tidy();
	public:
		~_Func_class<void,deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> const &>();
	};

	class _Func_class<void,deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> const &>
	{
	protected:
		void _Tidy();
	public:
		~_Func_class<void,deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> const &>();
	};

	class _Hash<_Umap_traits<basic_string<char,char_traits<char>,allocator<char> >,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> >,_Uhash_compare<basic_string<char,char_traits<char>,allocator<char> >,hash<basic_string<char,char_traits<char>,allocator<char> > >,equal_to<basic_string<char,char_traits<char>,allocator<char> > > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > >,bool> _Insert<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > >(pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > >);
		void _Init(unsigned __int64);
	public:
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > lower_bound(basic_string<char,char_traits<char>,allocator<char> > const &);
	};

	class _Hash<_Umap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,bool> _Insert<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > >(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >);
		void _Init(unsigned __int64);
	public:
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > lower_bound(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		~_Hash<_Umap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >();
	};

	class _Hash<_Umap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<TypeWatcher>,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > >,0> >
	{
	protected:
		pair<_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > >,bool> _Insert<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > >(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > >);
		void _Init(unsigned __int64);
	public:
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > >);
	};

	class _Hash<_Umap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy>,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > >,0> >
	{
	protected:
		pair<_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > >,bool> _Insert<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > >(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > >);
		void _Init(unsigned __int64);
	public:
		_Hash<_Umap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy>,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > >,0> >(_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const &,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > const &);
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > lower_bound(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
	};

	class _Hash<_Umap_traits<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,weak_ptr<SchemaCache>,_Uhash_compare<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,SchemaCacheFactory::StringPairHasher,equal_to<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,allocator<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > >,0> >
	{
	protected:
		_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > _End(unsigned __int64);
		pair<_List_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > >,bool> _Insert<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > >(pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > >);
		void _Init(unsigned __int64);
	public:
		_List_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > >,_List_const_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > >);
		_List_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > lower_bound(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const &);
		pair<_List_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > >,_List_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > > equal_range(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const &);
	};

	class _Hash<_Umap_traits<walkable::scalar,walkable::complex,_Uhash_compare<walkable::scalar,walkable::scalar::hasher,equal_to<walkable::scalar> >,allocator<pair<walkable::scalar const ,walkable::complex> >,0> >
	{
	protected:
		pair<_List_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > >,bool> _Insert<pair<walkable::scalar const ,walkable::complex> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > >(pair<walkable::scalar const ,walkable::complex> &,_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > >);
		void _Copy(_Hash<_Umap_traits<walkable::scalar,walkable::complex,_Uhash_compare<walkable::scalar,walkable::scalar::hasher,equal_to<walkable::scalar> >,allocator<pair<walkable::scalar const ,walkable::complex> >,0> > const &);
		void _Init(unsigned __int64);
	public:
		_Hash<_Umap_traits<walkable::scalar,walkable::complex,_Uhash_compare<walkable::scalar,walkable::scalar::hasher,equal_to<walkable::scalar> >,allocator<pair<walkable::scalar const ,walkable::complex> >,0> >(_Uhash_compare<walkable::scalar,walkable::scalar::hasher,equal_to<walkable::scalar> > const &,allocator<pair<walkable::scalar const ,walkable::complex> > const &);
		_Hash<_Umap_traits<walkable::scalar,walkable::complex,_Uhash_compare<walkable::scalar,walkable::scalar::hasher,equal_to<walkable::scalar> >,allocator<pair<walkable::scalar const ,walkable::complex> >,0> ><_Wrap_alloc<allocator<_List_node<pair<walkable::scalar const ,walkable::complex>,void *> > > >(_Hash<_Umap_traits<walkable::scalar,walkable::complex,_Uhash_compare<walkable::scalar,walkable::scalar::hasher,equal_to<walkable::scalar> >,allocator<pair<walkable::scalar const ,walkable::complex> >,0> > const &,_Wrap_alloc<allocator<_List_node<pair<walkable::scalar const ,walkable::complex>,void *> > > const &);
		_List_const_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > lower_bound(walkable::scalar const &);
		_List_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > >);
		_List_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > lower_bound(walkable::scalar const &);
		void clear();
		void insert<_List_const_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > >(_List_const_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > >,_List_const_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > >);
		~_Hash<_Umap_traits<walkable::scalar,walkable::complex,_Uhash_compare<walkable::scalar,walkable::scalar::hasher,equal_to<walkable::scalar> >,allocator<pair<walkable::scalar const ,walkable::complex> >,0> >();
	};

	class _Hash<_Uset_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,0> >
	{
	protected:
		_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> _End(unsigned __int64);
		pair<_List_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,bool> _Insert<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &,_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> >(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > &,_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0>);
		pair<_List_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,bool> _Insert<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> >(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0>);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Insert_bucket(_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0>,_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0>,unsigned __int64);
		void _Reinsert();
	public:
		_Hash<_Uset_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,0> >(_Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const &,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const &);
		_List_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >);
		_List_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > lower_bound(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		void clear();
		void rehash(unsigned __int64);
	};

	class _Hash<_Uset_traits<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,_Uhash_compare<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,TypenameAndInstanceIdHasher,equal_to<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >
	{
	protected:
		_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> _End(unsigned __int64);
		pair<_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,bool> _Insert<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> >(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0>);
		pair<_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,bool> _Insert<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> >(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0>);
		void _Check_size();
		void _Init(unsigned __int64);
		void _Insert_bucket(_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0>,_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0>,unsigned __int64);
		void _Reinsert();
	public:
		_Hash<_Uset_traits<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,_Uhash_compare<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,TypenameAndInstanceIdHasher,equal_to<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >(_Uhash_compare<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,TypenameAndInstanceIdHasher,equal_to<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > const &,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const &);
		_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >);
		void rehash(unsigned __int64);
	};

	class _Hash<_Uset_traits<walkable::complex,_Uhash_compare<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex> >,allocator<walkable::complex>,0> >
	{
	protected:
		_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> _End(unsigned __int64);
		pair<_List_const_iterator<_List_val<_List_simple_types<walkable::complex> > >,bool> _Insert<walkable::complex &,_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> >(walkable::complex &,_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0>);
		pair<_List_const_iterator<_List_val<_List_simple_types<walkable::complex> > >,bool> _Insert<walkable::complex const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> >(walkable::complex const &,_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0>);
		void _Check_size();
		void _Copy(_Hash<_Uset_traits<walkable::complex,_Uhash_compare<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex> >,allocator<walkable::complex>,0> > const &);
		void _Init(unsigned __int64);
		void _Insert_bucket(_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0>,_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0>,unsigned __int64);
		void _Reinsert();
	public:
		_Hash<_Uset_traits<walkable::complex,_Uhash_compare<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex> >,allocator<walkable::complex>,0> >(_Uhash_compare<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex> > const &,allocator<walkable::complex> const &);
		_List_const_iterator<_List_val<_List_simple_types<walkable::complex> > > erase(_List_const_iterator<_List_val<_List_simple_types<walkable::complex> > >);
		_List_const_iterator<_List_val<_List_simple_types<walkable::complex> > > lower_bound(walkable::complex const &);
		pair<_List_const_iterator<_List_val<_List_simple_types<walkable::complex> > >,bool> emplace<walkable::complex &>(walkable::complex &);
		pair<_List_const_iterator<_List_val<_List_simple_types<walkable::complex> > >,bool> emplace<walkable::complex const &>(walkable::complex const &);
		void clear();
		~_Hash<_Uset_traits<walkable::complex,_Uhash_compare<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex> >,allocator<walkable::complex>,0> >();
	};

	struct _List_alloc<_List_base_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		_List_node<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,void *> * _Buynode0(_List_node<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,void *> *,_List_node<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,void *> *);
	};

	struct _List_alloc<_List_base_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > >
	{
		_List_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > >,void *> * _Buynode0(_List_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > >,void *> *,_List_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > >,void *> *);
	};

	struct _List_alloc<_List_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >
	{
		_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> * _Buynode0(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *,_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
	};

	struct _List_alloc<_List_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > >
	{
		_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> >,void *> * _Buynode0(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> >,void *> *,_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> >,void *> *);
	};

	struct _List_alloc<_List_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > >
	{
		_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> >,void *> * _Buynode0(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> >,void *> *,_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> >,void *> *);
	};

	struct _List_alloc<_List_base_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >
	{
		_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> * _Buynode0(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *,_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
	};

	struct _List_alloc<_List_base_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> >,allocator<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > >
	{
		_List_node<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> >,void *> * _Buynode0(_List_node<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> >,void *> *,_List_node<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> >,void *> *);
	};

	struct _List_alloc<_List_base_types<pair<walkable::scalar const ,walkable::complex>,allocator<pair<walkable::scalar const ,walkable::complex> > > >
	{
		_List_node<pair<walkable::scalar const ,walkable::complex>,void *> * _Buynode0(_List_node<pair<walkable::scalar const ,walkable::complex>,void *> *,_List_node<pair<walkable::scalar const ,walkable::complex>,void *> *);
	};

	struct _List_alloc<_List_base_types<walkable::complex,allocator<walkable::complex> > >
	{
		_List_node<walkable::complex,void *> * _Buynode0(_List_node<walkable::complex,void *> *,_List_node<walkable::complex,void *> *);
	};

	struct _List_buy<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >
	{
		void _Freenode(_List_node<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,void *> *);
	};

	struct _List_buy<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > >
	{
		void _Freenode(_List_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > >,void *> *);
	};

	struct _List_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		void _Freenode(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
	};

	struct _List_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > >
	{
		void _Freenode(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> >,void *> *);
	};

	struct _List_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > >
	{
		void _Freenode(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> >,void *> *);
	};

	struct _List_buy<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> * _Buynode<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const &>(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *,_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const &);
		void _Freenode(_List_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
	};

	struct _List_buy<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> >,allocator<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > >
	{
		void _Freenode(_List_node<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> >,void *> *);
	};

	struct _List_buy<pair<walkable::scalar const ,walkable::complex>,allocator<pair<walkable::scalar const ,walkable::complex> > >
	{
		_List_node<pair<walkable::scalar const ,walkable::complex>,void *> * _Buynode<pair<walkable::scalar const ,walkable::complex> const &>(_List_node<pair<walkable::scalar const ,walkable::complex>,void *> *,_List_node<pair<walkable::scalar const ,walkable::complex>,void *> *,pair<walkable::scalar const ,walkable::complex> const &);
		_List_node<pair<walkable::scalar const ,walkable::complex>,void *> * _Buynode<walkable::scalar const &,walkable::complex const &>(_List_node<pair<walkable::scalar const ,walkable::complex>,void *> *,_List_node<pair<walkable::scalar const ,walkable::complex>,void *> *,walkable::scalar const &,walkable::complex const &);
		void _Freenode(_List_node<pair<walkable::scalar const ,walkable::complex>,void *> *);
	};

	struct _List_buy<walkable::complex,allocator<walkable::complex> >
	{
		_List_node<walkable::complex,void *> * _Buynode<walkable::complex &>(_List_node<walkable::complex,void *> *,_List_node<walkable::complex,void *> *,walkable::complex &);
		_List_node<walkable::complex,void *> * _Buynode<walkable::complex const &>(_List_node<walkable::complex,void *> *,_List_node<walkable::complex,void *> *,walkable::complex const &);
		void _Freenode(_List_node<walkable::complex,void *> *);
	};

	struct _Ptr_base<CloudDataWatcherImpl>
	{
		void _Reset0(CloudDataWatcherImpl *,_Ref_count_base *);
	};

	struct _Ptr_base<EffectiveWebAccountContext::State>
	{
		void _Reset0(EffectiveWebAccountContext::State *,_Ref_count_base *);
	};

	struct _Ptr_base<ImportedTypeWatcherImpl>
	{
		void _Reset0(ImportedTypeWatcherImpl *,_Ref_count_base *);
	};

	struct _Ptr_base<SchemaCache>
	{
		void _Reset0(SchemaCache *,_Ref_count_base *);
		void _Resetw<SchemaCache>(SchemaCache *,_Ref_count_base *);
	};

	struct _Ptr_base<TypeWatcher>
	{
		void _Reset0(TypeWatcher *,_Ref_count_base *);
	};

	struct _Ptr_base<UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions>::UpdateWatcherHelper>
	{
		void _Reset0(UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions>::UpdateWatcherHelper *,_Ref_count_base *);
	};

	struct _Ptr_base<UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::UpdateWatcherHelper>
	{
		void _Reset0(UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::UpdateWatcherHelper *,_Ref_count_base *);
	};

	struct _Ptr_base<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions>::state>
	{
		void _Reset0(deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions>::state *,_Ref_count_base *);
	};

	struct _Ptr_base<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::state>
	{
		void _Reset0(deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::state *,_Ref_count_base *);
	};

	struct _Ptr_base<ensure_com_ptr<Windows::Internal::Storage::Cloud::ICloudStore,EnsureCloudStore<Windows::Internal::Storage::Cloud::ICloudStore> >::state<Windows::Internal::Storage::Cloud::ICloudStore> >
	{
		void _Reset0(ensure_com_ptr<Windows::Internal::Storage::Cloud::ICloudStore,EnsureCloudStore<Windows::Internal::Storage::Cloud::ICloudStore> >::state<Windows::Internal::Storage::Cloud::ICloudStore> *,_Ref_count_base *);
	};

	struct _Ptr_base<schematized_data::state>
	{
		void _Reset0(schematized_data::state *,_Ref_count_base *);
	};

	struct _Ptr_base<unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,equal_to<walkable::scalar>,allocator<pair<walkable::scalar const ,walkable::complex> > > >
	{
		void _Reset0(unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,equal_to<walkable::scalar>,allocator<pair<walkable::scalar const ,walkable::complex> > > *,_Ref_count_base *);
	};

	struct _Ptr_base<unordered_set<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex>,allocator<walkable::complex> > >
	{
		void _Reset0(unordered_set<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex>,allocator<walkable::complex> > *,_Ref_count_base *);
	};

	struct _Ptr_base<vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const >
	{
		void _Reset0(vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const *,_Ref_count_base *);
	};

	struct _Ptr_base<vector<walkable::complex,allocator<walkable::complex> > >
	{
		void _Reset0(vector<walkable::complex,allocator<walkable::complex> > *,_Ref_count_base *);
	};

	struct _Ptr_base<vector<walkable::scalar,allocator<walkable::scalar> > >
	{
		void _Reset0(vector<walkable::scalar,allocator<walkable::scalar> > *,_Ref_count_base *);
	};

	struct _Ptr_base<walkable::complex>
	{
		void _Reset0(walkable::complex *,_Ref_count_base *);
	};

	struct _Ptr_base<wil::PropVariant>
	{
		void _Reset0(wil::PropVariant *,_Ref_count_base *);
	};

	class _Ref_count<walkable::structure>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	struct _Ref_count_base
	{
		bool _Incref_nz();
		virtual void * _Get_deleter(type_info const &);
		virtual ~_Ref_count_base();
		void _Decref();
		void _Decwref();
	};

	class _Ref_count_del<char const ,ComPtrDeleter<Windows::Storage::Streams::IBufferByteAccess> >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	public:
		virtual void * _Get_deleter(type_info const &);
	};

	class _Ref_count_obj<CloudDataWatcherImpl>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<EffectiveUserContext::State>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<EffectiveWebAccountContext::State>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<ImportedTypeWatcherImpl>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<SchemaCache>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<TypeWatcher>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions>::UpdateWatcherHelper>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::UpdateWatcherHelper>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<bond::Metadata>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions>::state>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::state>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<deserializable_data<bond::SchemaDef>::state>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<ensure_com_ptr<Windows::Internal::Storage::Cloud::ICloudStore,EnsureCloudStore<Windows::Internal::Storage::Cloud::ICloudStore> >::state<Windows::Internal::Storage::Cloud::ICloudStore> >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<map<unsigned short,walkable::field,less<unsigned short>,allocator<pair<unsigned short const ,walkable::field> > > >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<schematized_data::state>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,equal_to<walkable::scalar>,allocator<pair<walkable::scalar const ,walkable::complex> > > >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<unordered_set<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex>,allocator<walkable::complex> > >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<vector<unsigned short,allocator<unsigned short> > >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<vector<walkable::complex,allocator<walkable::complex> > >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<vector<walkable::scalar,allocator<walkable::scalar> > >
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<walkable::complex>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<walkable::scalar>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<walkable::structure>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	class _Ref_count_obj<wil::PropVariant>
	{
		virtual void _Delete_this();
		virtual void _Destroy();
	};

	struct _String_alloc<_String_base_types<char,allocator<char> > >
	{
		~_String_alloc<_String_base_types<char,allocator<char> > >();
	};

	struct _String_alloc<_String_base_types<unsigned short,allocator<unsigned short> > >
	{
		~_String_alloc<_String_base_types<unsigned short,allocator<unsigned short> > >();
	};

	class _Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > > _Insert_at<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *>(bool,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *,pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > > _Insert_hint<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > >,pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Copy_nodes<_Copy_tag>(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *,_Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >::_Copy_tag);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > >,bool> _Insert_nohint<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *>(bool,pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &,_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		void _Copy<_Copy_tag>(_Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> > const &,_Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >::_Copy_tag);
		void _Destroy_if_not_nil(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		void _Erase(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		void _Lrotate(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		void _Rrotate(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
		void _Tidy();
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > > >);
		void clear();
		~_Tree<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >();
	};

	class _Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > > _Insert_at<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *>(bool,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > > _Insert_hint<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *);
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> * _Copy_nodes<_Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> >,0> >::_Copy_tag>(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *,_Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> >,0> >::_Copy_tag);
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> * _Lbound<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > > > _Eqrange<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >,bool> _Insert_nohint<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *>(bool,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> &,_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *);
		void _Copy<_Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> >,0> >::_Copy_tag>(_Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> >,0> > const &,_Tree<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> >,0> >::_Copy_tag);
		void _Destroy_if_not_nil(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *);
		void _Erase(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *);
		void _Lrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *);
		void _Rrotate(_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> *);
		void _Tidy();
	public:
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > > find(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > > find(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		unsigned __int64 erase(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		void clear();
	};

	class _Tree<_Tmap_traits<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,less<unsigned char>,allocator<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > > _Insert_at<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> &,_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *>(bool,_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *,pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> &,_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > > _Insert_hint<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> &,_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >,pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> &,_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *);
		_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> * _Copy_nodes<_Tree<_Tmap_traits<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,less<unsigned char>,allocator<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> >,0> >::_Copy_tag>(_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *,_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *,_Tree<_Tmap_traits<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,less<unsigned char>,allocator<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> >,0> >::_Copy_tag);
		_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> * _Lbound<unsigned char>(unsigned char const &);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >,bool> _Insert_nohint<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> &,_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *>(bool,pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> &,_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *);
		void _Copy<_Tree<_Tmap_traits<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,less<unsigned char>,allocator<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> >,0> >::_Copy_tag>(_Tree<_Tmap_traits<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,less<unsigned char>,allocator<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> >,0> > const &,_Tree<_Tmap_traits<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,less<unsigned char>,allocator<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> >,0> >::_Copy_tag);
		void _Destroy_if_not_nil(_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *);
		void _Erase(_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> *);
		void _Tidy();
	public:
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > > find(unsigned char const &);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> > > >);
		void clear();
	};

	class _Tree<_Tmap_traits<unsigned char,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,less<unsigned char>,allocator<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > _Insert_at<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *>(bool,_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *,pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > _Insert_hint<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *>(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> * _Copy_nodes<_Copy_tag>(_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *,_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *,_Tree<_Tmap_traits<unsigned char,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,less<unsigned char>,allocator<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >::_Copy_tag);
		_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> * _Lbound<unsigned char>(unsigned char const &);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,bool> _Insert_nohint<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *>(bool,pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &,_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Copy<_Copy_tag>(_Tree<_Tmap_traits<unsigned char,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,less<unsigned char>,allocator<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> > const &,_Tree<_Tmap_traits<unsigned char,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,less<unsigned char>,allocator<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >::_Copy_tag);
		void _Destroy_if_not_nil(_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Erase(_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> *);
		void _Tidy();
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >);
		void clear();
	};

	class _Tree<_Tmap_traits<unsigned short,walkable::field,less<unsigned short>,allocator<pair<unsigned short const ,walkable::field> >,0> >
	{
	protected:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned short const ,walkable::field> > > > _Insert_at<pair<unsigned short const ,walkable::field> &,_Tree_node<pair<unsigned short const ,walkable::field>,void *> *>(bool,_Tree_node<pair<unsigned short const ,walkable::field>,void *> *,pair<unsigned short const ,walkable::field> &,_Tree_node<pair<unsigned short const ,walkable::field>,void *> *);
		pair<_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned short const ,walkable::field> > > >,bool> _Insert_nohint<pair<unsigned short const ,walkable::field> &,_Tree_node<pair<unsigned short const ,walkable::field>,void *> *>(bool,pair<unsigned short const ,walkable::field> &,_Tree_node<pair<unsigned short const ,walkable::field>,void *> *);
		void _Destroy_if_not_nil(_Tree_node<pair<unsigned short const ,walkable::field>,void *> *);
		void _Erase(_Tree_node<pair<unsigned short const ,walkable::field>,void *> *);
		void _Lrotate(_Tree_node<pair<unsigned short const ,walkable::field>,void *> *);
		void _Rrotate(_Tree_node<pair<unsigned short const ,walkable::field>,void *> *);
	public:
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned short const ,walkable::field> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned short const ,walkable::field> > > >);
		_Tree_iterator<_Tree_val<_Tree_simple_types<pair<unsigned short const ,walkable::field> > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned short const ,walkable::field> > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<unsigned short const ,walkable::field> > > >);
	};

	class _Tree<_Tset_traits<DeduplicatedPath,less<DeduplicatedPath>,allocator<DeduplicatedPath>,0> >
	{
	protected:
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > > _Insert_at<DeduplicatedPath &,_Tree_node<DeduplicatedPath,void *> *>(bool,_Tree_node<DeduplicatedPath,void *> *,DeduplicatedPath &,_Tree_node<DeduplicatedPath,void *> *);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > > > _Eqrange<DeduplicatedPath>(DeduplicatedPath const &);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > >,bool> _Insert_nohint<DeduplicatedPath &,_Tree_node<DeduplicatedPath,void *> *>(bool,DeduplicatedPath &,_Tree_node<DeduplicatedPath,void *> *);
		void _Destroy_if_not_nil(_Tree_node<DeduplicatedPath,void *> *);
		void _Erase(_Tree_node<DeduplicatedPath,void *> *);
		void _Lrotate(_Tree_node<DeduplicatedPath,void *> *);
		void _Rrotate(_Tree_node<DeduplicatedPath,void *> *);
	public:
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > >);
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > >);
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > > find(DeduplicatedPath const &);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> > >,bool> emplace<DeduplicatedPath const &>(DeduplicatedPath const &);
	};

	class _Tree<_Tset_traits<basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<basic_string<char,char_traits<char>,allocator<char> > >,0> >
	{
	protected:
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > > _Insert_at<basic_string<char,char_traits<char>,allocator<char> > &,_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *>(bool,_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *,basic_string<char,char_traits<char>,allocator<char> > &,_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *);
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > > _Insert_at<basic_string<char,char_traits<char>,allocator<char> > const &,_Nil>(bool,_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *,basic_string<char,char_traits<char>,allocator<char> > const &,_Nil);
		_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> * _Copy_nodes<_Copy_tag>(_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *,_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *,_Tree<_Tset_traits<basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<basic_string<char,char_traits<char>,allocator<char> > >,0> >::_Copy_tag);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > > > _Eqrange<basic_string<char,char_traits<char>,allocator<char> > >(basic_string<char,char_traits<char>,allocator<char> > const &);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > >,bool> _Insert_nohint<basic_string<char,char_traits<char>,allocator<char> > &,_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *>(bool,basic_string<char,char_traits<char>,allocator<char> > &,_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *);
		pair<_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > >,bool> _Insert_nohint<basic_string<char,char_traits<char>,allocator<char> > const &,_Nil>(bool,basic_string<char,char_traits<char>,allocator<char> > const &,_Nil);
		void _Copy<_Copy_tag>(_Tree<_Tset_traits<basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<basic_string<char,char_traits<char>,allocator<char> > >,0> > const &,_Tree<_Tset_traits<basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<basic_string<char,char_traits<char>,allocator<char> > >,0> >::_Copy_tag);
		void _Destroy_if_not_nil(_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *);
		void _Erase(_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *);
		void _Lrotate(_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *);
		void _Rrotate(_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> *);
		void _Tidy();
	public:
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > >);
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > > erase(_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > >,_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char,char_traits<char>,allocator<char> > > > >);
		unsigned __int64 erase(basic_string<char,char_traits<char>,allocator<char> > const &);
		void clear();
	};

	struct _Tree_comp_alloc<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >
	{
		_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Buyheadnode();
		_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Buynode0();
		_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Buynode<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &>(pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > &);
		_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Buynode<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > &>(pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > &);
		~_Tree_comp_alloc<_Tmap_traits<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > >,0> >();
	};

	struct _Tree_comp_alloc<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> >,0> >
	{
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> * _Buyheadnode();
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> * _Buynode0();
		_Tree_node<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>,void *> * _Buynode<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> &>(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> &);
		~_Tree_comp_alloc<_Tmap_traits<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo,less<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> >,0> >();
	};

	struct _Tree_comp_alloc<_Tmap_traits<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,less<unsigned char>,allocator<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> >,0> >
	{
		_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> * _Buyheadnode();
		_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> * _Buynode0();
		_Tree_node<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>,void *> * _Buynode<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> &>(pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> &);
		~_Tree_comp_alloc<_Tmap_traits<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet,less<unsigned char>,allocator<pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet> >,0> >();
	};

	struct _Tree_comp_alloc<_Tmap_traits<unsigned char,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,less<unsigned char>,allocator<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >
	{
		_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> * _Buyheadnode();
		_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> * _Buynode0();
		_Tree_node<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,void *> * _Buynode<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &>(pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > &);
		~_Tree_comp_alloc<_Tmap_traits<unsigned char,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,less<unsigned char>,allocator<pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,0> >();
	};

	struct _Tree_comp_alloc<_Tmap_traits<unsigned short,walkable::field,less<unsigned short>,allocator<pair<unsigned short const ,walkable::field> >,0> >
	{
		_Tree_node<pair<unsigned short const ,walkable::field>,void *> * _Buyheadnode();
		_Tree_node<pair<unsigned short const ,walkable::field>,void *> * _Buynode0();
		_Tree_node<pair<unsigned short const ,walkable::field>,void *> * _Buynode<unsigned short const &,walkable::field const &>(unsigned short const &,walkable::field const &);
	};

	struct _Tree_comp_alloc<_Tset_traits<DeduplicatedPath,less<DeduplicatedPath>,allocator<DeduplicatedPath>,0> >
	{
		_Tree_node<DeduplicatedPath,void *> * _Buyheadnode();
		_Tree_node<DeduplicatedPath,void *> * _Buynode0();
		_Tree_node<DeduplicatedPath,void *> * _Buynode<DeduplicatedPath &>(DeduplicatedPath &);
		_Tree_node<DeduplicatedPath,void *> * _Buynode<DeduplicatedPath const &>(DeduplicatedPath const &);
	};

	struct _Tree_comp_alloc<_Tset_traits<basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<basic_string<char,char_traits<char>,allocator<char> > >,0> >
	{
		_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> * _Buyheadnode();
		_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> * _Buynode0();
		_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> * _Buynode<basic_string<char,char_traits<char>,allocator<char> > &>(basic_string<char,char_traits<char>,allocator<char> > &);
		_Tree_node<basic_string<char,char_traits<char>,allocator<char> >,void *> * _Buynode<basic_string<char,char_traits<char>,allocator<char> > const &>(basic_string<char,char_traits<char>,allocator<char> > const &);
		~_Tree_comp_alloc<_Tset_traits<basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<basic_string<char,char_traits<char>,allocator<char> > >,0> >();
	};

	struct _Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > >
	{
		_Tree_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> > > > & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> >,_Iterator_base0> & operator++();
	};

	struct _Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >,_Iterator_base0>
	{
		_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >,_Iterator_base0> & operator++();
	};

	struct _Tree_val<_Tree_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >
	{
		static _Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> * _Min(_Tree_node<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >,void *> *);
	};

	struct _Uhash_compare<basic_string<char,char_traits<char>,allocator<char> >,hash<basic_string<char,char_traits<char>,allocator<char> > >,equal_to<basic_string<char,char_traits<char>,allocator<char> > > >
	{
		bool operator()(basic_string<char,char_traits<char>,allocator<char> > const &,basic_string<char,char_traits<char>,allocator<char> > const &);
	};

	struct _Uhash_compare<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >
	{
		bool operator()(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
	};

	struct _Vb_reference<_Wrap_alloc<allocator<unsigned int> > >
	{
		_Vb_reference<_Wrap_alloc<allocator<unsigned int> > > & operator=(bool);
	};

	struct _Wrap_alloc<allocator<bond::StructDef> >
	{
		void deallocate(bond::StructDef *,unsigned __int64);
	};

	struct _Wrap_alloc<sfl::StlAllocator<bond::detail::stream_allocator<1040>,char> >
	{
		void deallocate(char *,unsigned __int64);
	};

	struct bad_alloc
	{
		bad_alloc();
		bad_alloc(bad_alloc const &);
		virtual ~bad_alloc();
	};

	struct bad_array_new_length
	{
		bad_array_new_length();
		bad_array_new_length(bad_array_new_length const &);
		virtual ~bad_array_new_length();
	};

	struct bad_cast
	{
		bad_cast(bad_cast const &);
		virtual ~bad_cast();
	};

	struct bad_weak_ptr
	{
		bad_weak_ptr(bad_weak_ptr const &);
		virtual char const * what();
		virtual ~bad_weak_ptr();
	};

	namespace basic_ostream<char,char_traits<char> >
	{
		struct _Sentry_base
		{
			~_Sentry_base();
		};

		struct sentry
		{
			sentry(basic_ostream<char,char_traits<char> > &);
			~sentry();
		};

	};

	class basic_streambuf<char,char_traits<char> >
	{
	protected:
		virtual __int64 showmanyc();
		virtual __int64 xsgetn(char *,__int64);
		virtual __int64 xsputn(char const *,__int64);
		virtual basic_streambuf<char,char_traits<char> > * setbuf(char *,__int64);
		virtual int sync();
		virtual int uflow();
		virtual void imbue(locale const &);
	public:
		virtual void _Lock();
		virtual void _Unlock();
	};

	struct basic_string<char,char_traits<char>,allocator<char> >
	{
		basic_string<char,char_traits<char>,allocator<char> > & append(char const * const,unsigned __int64);
		basic_string<char,char_traits<char>,allocator<char> > & append(unsigned __int64,char);
		basic_string<char,char_traits<char>,allocator<char> > & assign(char const * const,unsigned __int64);
		basic_string<char,char_traits<char>,allocator<char> > & operator=(basic_string<char,char_traits<char>,allocator<char> > const &);
		basic_string<char,char_traits<char>,allocator<char> > & replace(unsigned __int64,unsigned __int64,char const * const,unsigned __int64);
		basic_string<char,char_traits<char>,allocator<char> >(basic_string<char,char_traits<char>,allocator<char> > const &);
		basic_string<char,char_traits<char>,allocator<char> >(char const * const);
		basic_string<char,char_traits<char>,allocator<char> ><_String_iterator<_String_val<_Simple_types<unsigned short> > >,void>(_String_iterator<_String_val<_Simple_types<unsigned short> > >,_String_iterator<_String_val<_Simple_types<unsigned short> > >,allocator<char> const &);
		int compare(basic_string<char,char_traits<char>,allocator<char> > const &);
		int compare(char const * const);
		static void _Xlen();
		unsigned __int64 _Calculate_growth(unsigned __int64);
		unsigned __int64 find_first_of(char const * const,unsigned __int64);
		void _Construct<unsigned short *>(unsigned short *,unsigned short * const,input_iterator_tag);
		void _Construct_lv_contents(basic_string<char,char_traits<char>,allocator<char> > const &);
		void _Tidy_deallocate();
		void push_back(char);
		void reserve(unsigned __int64);
		~basic_string<char,char_traits<char>,allocator<char> >();
	};

	struct basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >
	{
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & append(unsigned __int64,unsigned short);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & append(unsigned short const * const,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > & assign(unsigned short const * const,unsigned __int64);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(unsigned short const * const);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> ><_String_const_iterator<_String_val<_Simple_types<char> > >,void>(_String_const_iterator<_String_val<_Simple_types<char> > >,_String_const_iterator<_String_val<_Simple_types<char> > >,allocator<unsigned short> const &);
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Construct<char const *>(char const *,char const * const,input_iterator_tag);
		void _Tidy_deallocate();
		void reserve(unsigned __int64);
		~basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >();
	};

	class codecvt_utf8<unsigned short,1114111,0>
	{
	protected:
		virtual bool do_always_noconv();
		virtual int do_encoding();
		virtual int do_in(_Mbstatet &,char const *,char const *,char const * &,unsigned short *,unsigned short *,unsigned short * &);
		virtual int do_length(_Mbstatet &,char const *,char const *,unsigned __int64);
		virtual int do_max_length();
		virtual int do_out(_Mbstatet &,unsigned short const *,unsigned short const *,unsigned short const * &,char *,char *,char * &);
		virtual int do_unshift(_Mbstatet &,char *,char *,char * &);
	};

	class deque<FieldState,allocator<FieldState> >
	{
	protected:
		void _Growmap(unsigned __int64);
	public:
		void pop_back();
	};

	class deque<Frame,allocator<Frame> >
	{
	protected:
		void _Growmap(unsigned __int64);
	public:
		Frame & back();
		void pop_back();
	};

	class deque<MapFields,allocator<MapFields> >
	{
	protected:
		void _Growmap(unsigned __int64);
	public:
		void pop_back();
		void push_back(MapFields const &);
	};

	class deque<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >,allocator<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > > >
	{
	protected:
		void _Growmap(unsigned __int64);
	public:
		void pop_back();
		void push_back(Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > const &);
	};

	class deque<basic_string<char,char_traits<char>,allocator<char> >,allocator<basic_string<char,char_traits<char>,allocator<char> > > >
	{
	protected:
		void _Growmap(unsigned __int64);
	public:
		void pop_back();
		void push_back(basic_string<char,char_traits<char>,allocator<char> > const &);
	};

	class deque<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State,allocator<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State> >
	{
	protected:
		void _Growmap(unsigned __int64);
	public:
		void push_back(bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State const &);
	};

	class deque<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > >
	{
	protected:
		void _Growmap(unsigned __int64);
		void _Tidy();
	public:
		void _Construct<_Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > > >(_Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >,_Deque_const_iterator<_Deque_val<_Deque_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > > > >);
		void push_back(pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > > const &);
	};

	class enable_shared_from_this<CloudDataWatcherImpl>
	{
	protected:
		~enable_shared_from_this<CloudDataWatcherImpl>();
	};

	class enable_shared_from_this<ImportedTypeWatcherImpl>
	{
	protected:
		~enable_shared_from_this<ImportedTypeWatcherImpl>();
	public:
		shared_ptr<ImportedTypeWatcherImpl> shared_from_this();
	};

	class enable_shared_from_this<SchemaCache>
	{
	protected:
		~enable_shared_from_this<SchemaCache>();
	};

	class enable_shared_from_this<TypeWatcher>
	{
	protected:
		~enable_shared_from_this<TypeWatcher>();
	public:
		shared_ptr<TypeWatcher> shared_from_this();
	};

	class enable_shared_from_this<UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions>::UpdateWatcherHelper>
	{
	protected:
		~enable_shared_from_this<UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions>::UpdateWatcherHelper>();
	};

	class enable_shared_from_this<UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::UpdateWatcherHelper>
	{
	protected:
		~enable_shared_from_this<UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::UpdateWatcherHelper>();
	};

	struct exception
	{
		exception(exception const &);
		virtual char const * what();
		virtual ~exception();
	};

	struct exception_ptr
	{
		~exception_ptr();
	};

	struct function<void ()>
	{
		~function<void ()>();
	};

	struct function<void (deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> const &)>
	{
		~function<void (deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> const &)>();
	};

	struct function<void (deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> const &)>
	{
		~function<void (deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> const &)>();
	};

	struct insert_iterator<vector<DeduplicatedPath,allocator<DeduplicatedPath> > >
	{
		insert_iterator<vector<DeduplicatedPath,allocator<DeduplicatedPath> > > & operator=(DeduplicatedPath const &);
	};

	struct list<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >
	{
		_List_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >);
		void _Incsize(unsigned __int64);
		void clear();
		~list<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >();
	};

	struct list<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > >);
		~list<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > >();
	};

	struct list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >);
		~list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >();
	};

	struct list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > >);
		~list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > >();
	};

	struct list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > >);
		void clear();
		~list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > >();
	};

	struct list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >);
		void _Incsize(unsigned __int64);
		void clear();
		~list<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >();
	};

	struct list<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> >,allocator<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > >);
		void clear();
		~list<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> >,allocator<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > >();
	};

	struct list<pair<walkable::scalar const ,walkable::complex>,allocator<pair<walkable::scalar const ,walkable::complex> > >
	{
		_List_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > erase(_List_const_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > >);
		void _Incsize(unsigned __int64);
		void clear();
		~list<pair<walkable::scalar const ,walkable::complex>,allocator<pair<walkable::scalar const ,walkable::complex> > >();
	};

	struct list<walkable::complex,allocator<walkable::complex> >
	{
		_List_iterator<_List_val<_List_simple_types<walkable::complex> > > erase(_List_const_iterator<_List_val<_List_simple_types<walkable::complex> > >);
		void _Incsize(unsigned __int64);
		void clear();
		~list<walkable::complex,allocator<walkable::complex> >();
	};

	struct locale
	{
		struct facet
		{
			virtual _Facet_base * _Decref();
			virtual void _Incref();
		};

		basic_string<char,char_traits<char>,allocator<char> > name();
		bool operator==(locale const &);
		locale & operator=(locale const &);
		locale::facet const * _Getfacet(unsigned __int64);
		~locale();
	};

	struct map<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >
	{
		map<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >();
		~map<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > > > >();
	};

	struct map<unsigned short,walkable::field,less<unsigned short>,allocator<pair<unsigned short const ,walkable::field> > >
	{
		~map<unsigned short,walkable::field,less<unsigned short>,allocator<pair<unsigned short const ,walkable::field> > >();
	};

	class numpunct<char>
	{
		void _Tidy();
	protected:
		virtual basic_string<char,char_traits<char>,allocator<char> > do_falsename();
		virtual basic_string<char,char_traits<char>,allocator<char> > do_grouping();
		virtual basic_string<char,char_traits<char>,allocator<char> > do_truename();
		virtual char do_decimal_point();
		virtual char do_thousands_sep();
		virtual ~numpunct<char>();
		void _Init(_Locinfo const &,bool);
	public:
		basic_string<char,char_traits<char>,allocator<char> > grouping();
		static unsigned __int64 _Getcat(locale::facet const * *,locale const *);
	};

	struct pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >
	{
		~pair<basic_string<char,char_traits<char>,allocator<char> > const ,basic_string<char,char_traits<char>,allocator<char> > >();
	};

	struct pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >
	{
		pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > ><char const (&)[23],char const (&)[10],void,0>(char const (&)[23],char const (&)[10]);
		pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > ><char const (&)[28],char const (&)[6],void,0>(char const (&)[28],char const (&)[6]);
		pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > ><char const (&)[31],char const (&)[4],void,0>(char const (&)[31],char const (&)[4]);
		pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > ><char const (&)[36],char const (&)[13],void,0>(char const (&)[36],char const (&)[13]);
		~pair<basic_string<char,char_traits<char>,allocator<char> >,basic_string<char,char_traits<char>,allocator<char> > >();
	};

	struct pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>
	{
		~pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo>();
	};

	struct pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata>
	{
		void swap(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> &);
		~pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata>();
	};

	struct pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo>
	{
		pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo><basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo,void,0>(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,Windows::Data::Platform::Partitioning::PartitionInfo> const &);
		~pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::PartitionInfo>();
	};

	struct pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >
	{
		pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const &);
		~pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >();
	};

	struct pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> >
	{
		~pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> >();
	};

	struct pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>
	{
		~pair<unsigned char const ,Windows::Data::Platform::Partitioning::PartitionSet>();
	};

	struct pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >
	{
		~pair<unsigned char const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >();
	};

	struct pair<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet>
	{
		~pair<unsigned char,Windows::Data::Platform::Partitioning::PartitionSet>();
	};

	struct pair<unsigned short,walkable::field>
	{
		~pair<unsigned short,walkable::field>();
	};

	struct pair<walkable::scalar,walkable::complex>
	{
		~pair<walkable::scalar,walkable::complex>();
	};

	struct range_error
	{
		range_error(char const *);
		range_error(range_error const &);
		virtual ~range_error();
	};

	struct runtime_error
	{
		runtime_error(runtime_error const &);
	};

	struct set<DeduplicatedPath,less<DeduplicatedPath>,allocator<DeduplicatedPath> >
	{
		~set<DeduplicatedPath,less<DeduplicatedPath>,allocator<DeduplicatedPath> >();
	};

	struct set<basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<basic_string<char,char_traits<char>,allocator<char> > > >
	{
		~set<basic_string<char,char_traits<char>,allocator<char> >,less<basic_string<char,char_traits<char>,allocator<char> > >,allocator<basic_string<char,char_traits<char>,allocator<char> > > >();
	};

	struct shared_ptr<CloudDataWatcherImpl>
	{
		~shared_ptr<CloudDataWatcherImpl>();
	};

	struct shared_ptr<EffectiveUserContext::State>
	{
		~shared_ptr<EffectiveUserContext::State>();
	};

	struct shared_ptr<ImportedTypeWatcherImpl>
	{
		shared_ptr<ImportedTypeWatcherImpl>(shared_ptr<ImportedTypeWatcherImpl> const &);
		~shared_ptr<ImportedTypeWatcherImpl>();
	};

	struct shared_ptr<SchemaCache>
	{
		~shared_ptr<SchemaCache>();
	};

	struct shared_ptr<SharedWatcherImplBase<CloudDataWatcherImpl,versioned<schematized_data> > >
	{
		void reset();
		~shared_ptr<SharedWatcherImplBase<CloudDataWatcherImpl,versioned<schematized_data> > >();
	};

	struct shared_ptr<SharedWatcherImplBase<ImportedTypeWatcherImpl,schematized_data> >
	{
		void reset();
		~shared_ptr<SharedWatcherImplBase<ImportedTypeWatcherImpl,schematized_data> >();
	};

	struct shared_ptr<TypeWatcher>
	{
		shared_ptr<TypeWatcher>(shared_ptr<TypeWatcher> const &);
		~shared_ptr<TypeWatcher>();
	};

	struct shared_ptr<UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions>::UpdateWatcherHelper>
	{
		~shared_ptr<UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions>::UpdateWatcherHelper>();
	};

	struct shared_ptr<UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::UpdateWatcherHelper>
	{
		~shared_ptr<UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::UpdateWatcherHelper>();
	};

	struct shared_ptr<bond::Metadata>
	{
		shared_ptr<bond::Metadata>(shared_ptr<bond::Metadata> const &);
		~shared_ptr<bond::Metadata>();
	};

	class shared_ptr<char const >
	{
		void _Resetp<char const ,ComPtrDeleter<Windows::Storage::Streams::IBufferByteAccess> >(char const *,ComPtrDeleter<Windows::Storage::Streams::IBufferByteAccess>);
	public:
		~shared_ptr<char const >();
	};

	struct shared_ptr<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions>::state>
	{
		~shared_ptr<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions>::state>();
	};

	struct shared_ptr<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::state>
	{
		~shared_ptr<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex>::state>();
	};

	struct shared_ptr<deserializable_data<bond::SchemaDef>::state>
	{
		~shared_ptr<deserializable_data<bond::SchemaDef>::state>();
	};

	struct shared_ptr<map<unsigned short,walkable::field,less<unsigned short>,allocator<pair<unsigned short const ,walkable::field> > > >
	{
		~shared_ptr<map<unsigned short,walkable::field,less<unsigned short>,allocator<pair<unsigned short const ,walkable::field> > > >();
	};

	struct shared_ptr<schematized_data::state>
	{
		shared_ptr<schematized_data::state>(shared_ptr<schematized_data::state> const &);
		~shared_ptr<schematized_data::state>();
	};

	struct shared_ptr<unordered_set<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex>,allocator<walkable::complex> > >
	{
		~shared_ptr<unordered_set<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex>,allocator<walkable::complex> > >();
	};

	struct shared_ptr<vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const >
	{
		~shared_ptr<vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const >();
	};

	struct shared_ptr<vector<unsigned short,allocator<unsigned short> > >
	{
		~shared_ptr<vector<unsigned short,allocator<unsigned short> > >();
	};

	struct shared_ptr<vector<walkable::complex,allocator<walkable::complex> > >
	{
		~shared_ptr<vector<walkable::complex,allocator<walkable::complex> > >();
	};

	struct shared_ptr<vector<walkable::scalar,allocator<walkable::scalar> > >
	{
		~shared_ptr<vector<walkable::scalar,allocator<walkable::scalar> > >();
	};

	struct shared_ptr<walkable::complex>
	{
		shared_ptr<walkable::complex>(shared_ptr<walkable::complex> const &);
	};

	struct shared_ptr<walkable::scalar>
	{
		~shared_ptr<walkable::scalar>();
	};

	class shared_ptr<walkable::structure>
	{
		void _Resetp<walkable::structure>(walkable::structure *);
	public:
		~shared_ptr<walkable::structure>();
	};

	struct stack<MapFields,deque<MapFields,allocator<MapFields> > >
	{
		stack<MapFields,deque<MapFields,allocator<MapFields> > >();
		~stack<MapFields,deque<MapFields,allocator<MapFields> > >();
	};

	struct stack<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >,deque<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >,allocator<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > > > >
	{
		~stack<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >,deque<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> >,allocator<Microsoft::WRL::ComPtr<Windows::Foundation::Collections::IVector<Windows::Internal::Storage::Cloud::Model::CloudDataField *> > > > >();
	};

	struct stack<basic_string<char,char_traits<char>,allocator<char> >,deque<basic_string<char,char_traits<char>,allocator<char> >,allocator<basic_string<char,char_traits<char>,allocator<char> > > > >
	{
		~stack<basic_string<char,char_traits<char>,allocator<char> >,deque<basic_string<char,char_traits<char>,allocator<char> >,allocator<basic_string<char,char_traits<char>,allocator<char> > > > >();
	};

	struct stack<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State,deque<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State,allocator<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State> > >
	{
		~stack<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State,deque<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State,allocator<bond::JSONWriter<bond::OutputMemoryStream<allocator<char> > >::State> > >();
	};

	struct unique_ptr<CompactBinaryWriterCallback,default_delete<CompactBinaryWriterCallback> >
	{
		~unique_ptr<CompactBinaryWriterCallback,default_delete<CompactBinaryWriterCallback> >();
	};

	struct unique_ptr<EffectiveWebAccountContext const ,default_delete<EffectiveWebAccountContext const > >
	{
		~unique_ptr<EffectiveWebAccountContext const ,default_delete<EffectiveWebAccountContext const > >();
	};

	struct unique_ptr<PartitionMetadataFactory,default_delete<PartitionMetadataFactory> >
	{
		~unique_ptr<PartitionMetadataFactory,default_delete<PartitionMetadataFactory> >();
	};

	struct unique_ptr<StructWriter,default_delete<StructWriter> >
	{
		~unique_ptr<StructWriter,default_delete<StructWriter> >();
	};

	struct unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> >
	{
		~unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> >();
	};

	struct unique_ptr<UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions>,default_delete<UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions> > >
	{
		~unique_ptr<UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions>,default_delete<UpdateWatcher<Windows::Data::Platform::Partitioning::ActivePartitions> > >();
	};

	struct unique_ptr<UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex>,default_delete<UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >
	{
		~unique_ptr<UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex>,default_delete<UpdateWatcher<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > >();
	};

	struct unique_ptr<Windows::Data::Platform::Partitioning::ActivePartitions,default_delete<Windows::Data::Platform::Partitioning::ActivePartitions> >
	{
		~unique_ptr<Windows::Data::Platform::Partitioning::ActivePartitions,default_delete<Windows::Data::Platform::Partitioning::ActivePartitions> >();
	};

	struct unique_ptr<Windows::Data::Platform::Partitioning::SystemPartitionIndex,default_delete<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >
	{
		~unique_ptr<Windows::Data::Platform::Partitioning::SystemPartitionIndex,default_delete<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >();
	};

	struct unique_ptr<bond::SchemaDef,default_delete<bond::SchemaDef> >
	{
		~unique_ptr<bond::SchemaDef,default_delete<bond::SchemaDef> >();
	};

	struct unique_ptr<unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<TypeWatcher>,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > >,default_delete<unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<TypeWatcher>,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > >
	{
		~unique_ptr<unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<TypeWatcher>,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > >,default_delete<unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,shared_ptr<TypeWatcher>,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > >();
	};

	struct unique_ptr<unordered_set<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const ,default_delete<unordered_set<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const > >
	{
		~unique_ptr<unordered_set<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const ,default_delete<unordered_set<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > const > >();
	};

	struct unique_ptr<unsigned char [0],default_delete<unsigned char [0]> >
	{
		~unique_ptr<unsigned char [0],default_delete<unsigned char [0]> >();
	};

	struct unique_ptr<unsigned short [0],default_delete<unsigned short [0]> >
	{
		~unique_ptr<unsigned short [0],default_delete<unsigned short [0]> >();
	};

	struct unique_ptr<vector<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy>,allocator<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> > >,default_delete<vector<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy>,allocator<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> > > > >
	{
		~unique_ptr<vector<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy>,allocator<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> > >,default_delete<vector<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy>,allocator<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> > > > >();
	};

	struct unique_ptr<versioned<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> >,default_delete<versioned<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> > > >
	{
		~unique_ptr<versioned<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> >,default_delete<versioned<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> > > >();
	};

	struct unique_ptr<versioned<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,default_delete<versioned<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > > >
	{
		~unique_ptr<versioned<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,default_delete<versioned<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > > >();
	};

	struct unique_ptr<versioned<schematized_data>,default_delete<versioned<schematized_data> > >
	{
		~unique_ptr<versioned<schematized_data>,default_delete<versioned<schematized_data> > >();
	};

	struct unique_ptr<walkable::structure,default_delete<walkable::structure> >
	{
		~unique_ptr<walkable::structure,default_delete<walkable::structure> >();
	};

	struct unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		~unordered_map<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >();
	};

	struct unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,equal_to<walkable::scalar>,allocator<pair<walkable::scalar const ,walkable::complex> > >
	{
		unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,equal_to<walkable::scalar>,allocator<pair<walkable::scalar const ,walkable::complex> > >();
		~unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,equal_to<walkable::scalar>,allocator<pair<walkable::scalar const ,walkable::complex> > >();
	};

	struct unordered_set<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >
	{
		unordered_set<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >();
		~unordered_set<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,hash<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,equal_to<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >();
	};

	struct unordered_set<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,TypenameAndInstanceIdHasher,equal_to<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		unordered_set<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,TypenameAndInstanceIdHasher,equal_to<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >();
		~unordered_set<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,TypenameAndInstanceIdHasher,equal_to<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >();
	};

	struct unordered_set<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex>,allocator<walkable::complex> >
	{
		unordered_set<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex>,allocator<walkable::complex> >();
		~unordered_set<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex>,allocator<walkable::complex> >();
	};

	class vector<DeduplicatedPath,allocator<DeduplicatedPath> >
	{
		void _Change_array(DeduplicatedPath * const,unsigned __int64,unsigned __int64);
		void _Destroy(DeduplicatedPath *,DeduplicatedPath *);
	public:
		_Vector_iterator<_Vector_val<_Simple_types<DeduplicatedPath> > > emplace<DeduplicatedPath const &>(_Vector_const_iterator<_Vector_val<_Simple_types<DeduplicatedPath> > >,DeduplicatedPath const &);
		~vector<DeduplicatedPath,allocator<DeduplicatedPath> >();
	};

	class vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> > > >
	{
		bool _Buy(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void assign(unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> const &);
		~vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> > > >();
	};

	class vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> > > >
	{
		bool _Buy(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void assign(unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> const &);
		~vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> > > >();
	};

	class vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> > > >
	{
		bool _Buy(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void assign(unsigned __int64,_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> const &);
		~vector<_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0>,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > > > >
	{
		bool _Buy(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > const &);
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > > > >
	{
		bool _Buy(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > const &);
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > > > >
	{
		bool _Buy(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > const &);
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > > > >
	{
		bool _Buy(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > const &);
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > > > >
	{
		bool _Buy(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > const &);
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > > > >();
	};

	class vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > > > >
	{
		bool _Buy(unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void assign(unsigned __int64,_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > const &);
		~vector<_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > >,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > > > >();
	};

	class vector<basic_string<char,char_traits<char>,allocator<char> >,allocator<basic_string<char,char_traits<char>,allocator<char> > > >
	{
		void _Change_array(basic_string<char,char_traits<char>,allocator<char> > * const,unsigned __int64,unsigned __int64);
	public:
		~vector<basic_string<char,char_traits<char>,allocator<char> >,allocator<basic_string<char,char_traits<char>,allocator<char> > > >();
	};

	class vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >
	{
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Change_array(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void emplace_back<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &>(basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const &);
		void emplace_back<unsigned short (&)[260]>(unsigned short (&)[260]);
		void emplace_back<unsigned short const * &,unsigned __int64 &>(unsigned short const * &,unsigned __int64 &);
		void emplace_back<unsigned short const * &>(unsigned short const * &);
		void reserve(unsigned __int64);
		~vector<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >();
	};

	class vector<bond::FieldDef,allocator<bond::FieldDef> >
	{
		void _Destroy(bond::FieldDef *,bond::FieldDef *);
		void _Tidy();
	public:
		vector<bond::FieldDef,allocator<bond::FieldDef> >(vector<bond::FieldDef,allocator<bond::FieldDef> > const &);
		void emplace_back<bond::FieldDef const &>(bond::FieldDef const &);
	};

	class vector<bond::StructDef,allocator<bond::StructDef> >
	{
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Change_array(bond::StructDef * const,unsigned __int64,unsigned __int64);
		void _Destroy(bond::StructDef *,bond::StructDef *);
		void _Tidy();
	public:
		vector<bond::StructDef,allocator<bond::StructDef> >(vector<bond::StructDef,allocator<bond::StructDef> > const &);
		~vector<bond::StructDef,allocator<bond::StructDef> >();
	};

	class vector<bond::blob,allocator<bond::blob> >
	{
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Change_array(bond::blob * const,unsigned __int64,unsigned __int64);
	public:
		void emplace_back<bond::blob const &>(bond::blob const &);
	};

	struct vector<bool,allocator<bool> >
	{
		_Vb_iterator<_Wrap_alloc<allocator<unsigned int> > > _Make_iter(_Vb_const_iterator<_Wrap_alloc<allocator<unsigned int> > >);
		_Vb_iterator<_Wrap_alloc<allocator<unsigned int> > > end();
		_Vb_iterator<_Wrap_alloc<allocator<unsigned int> > > erase(_Vb_const_iterator<_Wrap_alloc<allocator<unsigned int> > >,_Vb_const_iterator<_Wrap_alloc<allocator<unsigned int> > >);
		void _Trim(unsigned __int64);
		void resize(unsigned __int64,bool);
		~vector<bool,allocator<bool> >();
	};

	class vector<boost::io::detail::format_item<char,char_traits<char>,allocator<char> >,allocator<boost::io::detail::format_item<char,char_traits<char>,allocator<char> > > >
	{
		bool _Buy(unsigned __int64);
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Change_array(boost::io::detail::format_item<char,char_traits<char>,allocator<char> > * const,unsigned __int64,unsigned __int64);
		void _Destroy(boost::io::detail::format_item<char,char_traits<char>,allocator<char> > *,boost::io::detail::format_item<char,char_traits<char>,allocator<char> > *);
	public:
		void assign(unsigned __int64,boost::io::detail::format_item<char,char_traits<char>,allocator<char> > const &);
		~vector<boost::io::detail::format_item<char,char_traits<char>,allocator<char> >,allocator<boost::io::detail::format_item<char,char_traits<char>,allocator<char> > > >();
	};

	class vector<char,sfl::StlAllocator<bond::detail::stream_allocator<1040>,char> >
	{
		void _Change_array(char * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		~vector<char,sfl::StlAllocator<bond::detail::stream_allocator<1040>,char> >();
	};

	class vector<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata>,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >
	{
		void _Change_array(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> * const,unsigned __int64,unsigned __int64);
	public:
		~vector<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata>,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >();
	};

	class vector<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >
	{
		void _Change_array(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void emplace_back<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const &>(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const &);
		~vector<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >();
	};

	class vector<reference_wrapper<pair<walkable::scalar const ,walkable::complex> >,allocator<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > > >
	{
		void _Change_array(reference_wrapper<pair<walkable::scalar const ,walkable::complex> > * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void emplace_back<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > const &>(reference_wrapper<pair<walkable::scalar const ,walkable::complex> > const &);
		~vector<reference_wrapper<pair<walkable::scalar const ,walkable::complex> >,allocator<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > > >();
	};

	class vector<reference_wrapper<unsigned short>,allocator<reference_wrapper<unsigned short> > >
	{
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void emplace_back<reference_wrapper<unsigned short> const &>(reference_wrapper<unsigned short> const &);
		~vector<reference_wrapper<unsigned short>,allocator<reference_wrapper<unsigned short> > >();
	};

	class vector<reference_wrapper<walkable::complex>,allocator<reference_wrapper<walkable::complex> > >
	{
		void _Change_array(reference_wrapper<walkable::complex> * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void emplace_back<reference_wrapper<walkable::complex> const &>(reference_wrapper<walkable::complex> const &);
		~vector<reference_wrapper<walkable::complex>,allocator<reference_wrapper<walkable::complex> > >();
	};

	class vector<reference_wrapper<walkable::scalar>,allocator<reference_wrapper<walkable::scalar> > >
	{
		void _Change_array(reference_wrapper<walkable::scalar> * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void emplace_back<reference_wrapper<walkable::scalar> const &>(reference_wrapper<walkable::scalar> const &);
		~vector<reference_wrapper<walkable::scalar>,allocator<reference_wrapper<walkable::scalar> > >();
	};

	class vector<unsigned char,allocator<unsigned char> >
	{
		void _Change_array(unsigned char * const,unsigned __int64,unsigned __int64);
	public:
		void emplace_back<unsigned char const &>(unsigned char const &);
	};

	class vector<unsigned int,allocator<bool> >
	{
		void _Tidy();
	public:
		vector<unsigned int,allocator<bool> >(unsigned __int64,unsigned int const &,allocator<bool> const &);
	};

	class vector<unsigned short,allocator<unsigned short> >
	{
		void _Change_array(unsigned short * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
	public:
		void emplace_back<unsigned short const &>(unsigned short const &);
	};

	class vector<walkable::complex,allocator<walkable::complex> >
	{
		unsigned __int64 _Calculate_growth(unsigned __int64);
		void _Change_array(walkable::complex * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		vector<walkable::complex,allocator<walkable::complex> >(vector<walkable::complex,allocator<walkable::complex> > const &);
		void emplace_back<walkable::complex &>(walkable::complex &);
		void emplace_back<walkable::complex const &>(walkable::complex const &);
		walkable::complex & at(unsigned __int64);
		~vector<walkable::complex,allocator<walkable::complex> >();
	};

	class vector<walkable::scalar,allocator<walkable::scalar> >
	{
		void _Change_array(walkable::scalar * const,unsigned __int64,unsigned __int64);
		void _Reallocate_exactly(unsigned __int64);
		void _Tidy();
	public:
		void emplace_back<walkable::scalar const &>(walkable::scalar const &);
		walkable::scalar const & at(unsigned __int64);
	};

	class vector<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy>,allocator<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> > >
	{
		void _Change_array(wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> * const,unsigned __int64,unsigned __int64);
	};

	struct weak_ptr<SchemaCache>
	{
		weak_ptr<SchemaCache>(weak_ptr<SchemaCache> const &);
		weak_ptr<SchemaCache><SchemaCache,void>(shared_ptr<SchemaCache> const &);
	};

	class wstring_convert<codecvt_utf8<unsigned short,1114111,0>,unsigned short,allocator<unsigned short>,allocator<char> >
	{
		void _Init(codecvt_utf8<unsigned short,1114111,0> const *);
	public:
		basic_string<char,char_traits<char>,allocator<char> > to_bytes(unsigned short const *,unsigned short const *);
		basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > from_bytes(char const *,char const *);
		virtual ~wstring_convert<codecvt_utf8<unsigned short,1114111,0>,unsigned short,allocator<unsigned short>,allocator<char> >();
		wstring_convert<codecvt_utf8<unsigned short,1114111,0>,unsigned short,allocator<unsigned short>,allocator<char> >();
	};

	DeduplicatedPath * _Uninitialized_move_al_unchecked<DeduplicatedPath *,DeduplicatedPath *,allocator<DeduplicatedPath> >(DeduplicatedPath *,DeduplicatedPath *,DeduplicatedPath *,std::_Wrap_alloc<std::allocator<DeduplicatedPath> > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	__int64 stoll(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,unsigned __int64 *,int);
	bond::FieldDef * _Uninit_alloc_fill_n1<bond::FieldDef *,unsigned __int64,allocator<bond::FieldDef> >(bond::FieldDef *,unsigned __int64,bond::FieldDef const &,std::_Wrap_alloc<std::allocator<bond::FieldDef> > &,std::integral_constant<bool,0>);
	bond::FieldDef * _Uninitialized_copy_al_unchecked<bond::FieldDef *,bond::FieldDef *,allocator<bond::FieldDef> >(bond::FieldDef *,bond::FieldDef *,bond::FieldDef *,std::_Wrap_alloc<std::allocator<bond::FieldDef> > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	bond::StructDef * _Uninit_alloc_fill_n1<bond::StructDef *,unsigned __int64,allocator<bond::StructDef> >(bond::StructDef *,unsigned __int64,bond::StructDef const &,std::_Wrap_alloc<std::allocator<bond::StructDef> > &,std::integral_constant<bool,0>);
	bond::StructDef * _Uninitialized_copy_al_unchecked<bond::StructDef *,bond::StructDef *,allocator<bond::StructDef> >(bond::StructDef *,bond::StructDef *,bond::StructDef *,std::_Wrap_alloc<std::allocator<bond::StructDef> > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	bond::StructDef * _Uninitialized_value_construct_n1<bond::StructDef *,unsigned __int64,allocator<bond::StructDef> >(bond::StructDef *,unsigned __int64,std::_Wrap_alloc<std::allocator<bond::StructDef> > &,std::integral_constant<bool,0>);
	bond::blob * _Uninitialized_copy_al_unchecked<bond::blob *,bond::blob *,allocator<bond::blob> >(bond::blob *,bond::blob *,bond::blob *,std::_Wrap_alloc<std::allocator<bond::blob> > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	bool _Hash_equal<_Uset_traits<walkable::complex,_Uhash_compare<walkable::complex,walkable::complex::hasher,equal_to<walkable::complex> >,allocator<walkable::complex>,0> >(std::_Hash<std::_Uset_traits<walkable::complex,std::_Uhash_compare<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex> >,std::allocator<walkable::complex>,0> > const &,std::_Hash<std::_Uset_traits<walkable::complex,std::_Uhash_compare<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex> >,std::allocator<walkable::complex>,0> > const &);
	bool operator==<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const &);
	boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > * _Uninit_alloc_fill_n1<boost::io::detail::format_item<char,char_traits<char>,allocator<char> > *,unsigned __int64,allocator<boost::io::detail::format_item<char,char_traits<char>,allocator<char> > > >(boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > *,unsigned __int64,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > const &,std::_Wrap_alloc<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > > > &,std::integral_constant<bool,0>);
	boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > * _Uninitialized_copy_al_unchecked<boost::io::detail::format_item<char,char_traits<char>,allocator<char> > *,boost::io::detail::format_item<char,char_traits<char>,allocator<char> > *,allocator<boost::io::detail::format_item<char,char_traits<char>,allocator<char> > > >(boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > *,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > *,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > *,std::_Wrap_alloc<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	char * _Maklocstr<char>(char const *,char *,_Cvtvec const &);
	char * _Uninitialized_move_al_unchecked<char *,char *,sfl::StlAllocator<bond::detail::stream_allocator<1040>,char> >(char *,char *,char *,std::_Wrap_alloc<sfl::StlAllocator<bond::detail::stream_allocator<1040>,char> > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	double stod(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,unsigned __int64 *);
	float stof(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,unsigned __int64 *);
	int _Traits_compare<char_traits<char> >(char const * const,unsigned __int64,char const * const,unsigned __int64);
	int _Traits_compare<char_traits<unsigned short> >(unsigned short const * const,unsigned __int64,unsigned short const * const,unsigned __int64);
	int stoi(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,unsigned __int64 *,int);
	nothrow_t const std::nothrow;
	std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::_Iterator_base0> * _Uninit_alloc_fill_n1<_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> *,unsigned __int64,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> > > >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::_Iterator_base0> *,unsigned __int64,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::_Iterator_base0> const &,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::_Iterator_base0> > > > &,std::integral_constant<bool,0>);
	std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::_Iterator_base0> * _Uninitialized_move_al_unchecked<_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> *,_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> *,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,_Iterator_base0> > > >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::_Iterator_base0> *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::_Iterator_base0> > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,std::_Iterator_base0> * _Uninit_alloc_fill_n1<_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> *,unsigned __int64,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> > > >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,std::_Iterator_base0> *,unsigned __int64,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,std::_Iterator_base0> const &,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,std::_Iterator_base0> > > > &,std::integral_constant<bool,0>);
	std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,std::_Iterator_base0> * _Uninitialized_move_al_unchecked<_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> *,_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> *,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >,_Iterator_base0> > > >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,std::_Iterator_base0> *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > >,std::_Iterator_base0> > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<walkable::complex> >,std::_Iterator_base0> * _Uninit_alloc_fill_n1<_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> *,unsigned __int64,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> > > >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<walkable::complex> >,std::_Iterator_base0> *,unsigned __int64,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<walkable::complex> >,std::_Iterator_base0> const &,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<walkable::complex> >,std::_Iterator_base0> > > > &,std::integral_constant<bool,0>);
	std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<walkable::complex> >,std::_Iterator_base0> * _Uninitialized_move_al_unchecked<_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> *,_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> *,_Wrap_alloc<allocator<_List_unchecked_const_iterator<_List_val<_List_simple_types<walkable::complex> >,_Iterator_base0> > > >(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<walkable::complex> >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<walkable::complex> >,std::_Iterator_base0> *,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<walkable::complex> >,std::_Iterator_base0> *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<walkable::complex> >,std::_Iterator_base0> > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > > > > > * _Uninit_alloc_fill_n1<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > *,unsigned __int64,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > > > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > > > > > const &,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > > > > > > > > &,std::integral_constant<bool,0>);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > > > > > * _Uninitialized_move_al_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<char,char_traits<char>,allocator<char> > const ,unique_ptr<StructureWalkCallback,default_delete<StructureWalkCallback> > > > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > > > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > > > > > > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > > * _Uninit_alloc_fill_n1<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > *,unsigned __int64,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > > const &,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > > > > > &,std::integral_constant<bool,0>);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > > * _Uninitialized_move_al_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > > > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::shared_ptr<TypeWatcher> > > > > * _Uninit_alloc_fill_n1<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > *,unsigned __int64,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::shared_ptr<TypeWatcher> > > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::shared_ptr<TypeWatcher> > > > > const &,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::shared_ptr<TypeWatcher> > > > > > > > &,std::integral_constant<bool,0>);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::shared_ptr<TypeWatcher> > > > > * _Uninitialized_move_al_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,shared_ptr<TypeWatcher> > > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::shared_ptr<TypeWatcher> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::shared_ptr<TypeWatcher> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::shared_ptr<TypeWatcher> > > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,std::shared_ptr<TypeWatcher> > > > > > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > * _Uninit_alloc_fill_n1<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > *,unsigned __int64,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > const &,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > > > > &,std::integral_constant<bool,0>);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > * _Uninitialized_move_al_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const ,wil::com_ptr_t<IRefcountedSchema,wil::err_exception_policy> > > > > > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const ,std::weak_ptr<SchemaCache> > > > > * _Uninit_alloc_fill_n1<_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > *,unsigned __int64,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const ,std::weak_ptr<SchemaCache> > > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const ,std::weak_ptr<SchemaCache> > > > > const &,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const ,std::weak_ptr<SchemaCache> > > > > > > > &,std::integral_constant<bool,0>);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const ,std::weak_ptr<SchemaCache> > > > > * _Uninitialized_move_al_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > const ,weak_ptr<SchemaCache> > > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const ,std::weak_ptr<SchemaCache> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const ,std::weak_ptr<SchemaCache> > > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const ,std::weak_ptr<SchemaCache> > > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const ,std::weak_ptr<SchemaCache> > > > > > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<walkable::scalar const ,walkable::complex> > > > * _Uninit_alloc_fill_n1<_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > *,unsigned __int64,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<walkable::scalar const ,walkable::complex> > > > *,unsigned __int64,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<walkable::scalar const ,walkable::complex> > > > const &,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<walkable::scalar const ,walkable::complex> > > > > > > &,std::integral_constant<bool,0>);
	std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<walkable::scalar const ,walkable::complex> > > > * _Uninitialized_move_al_unchecked<_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > *,_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > *,_Wrap_alloc<allocator<_List_unchecked_iterator<_List_val<_List_simple_types<pair<walkable::scalar const ,walkable::complex> > > > > > >(std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<walkable::scalar const ,walkable::complex> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<walkable::scalar const ,walkable::complex> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<walkable::scalar const ,walkable::complex> > > > *,std::_Wrap_alloc<std::_Wrap_alloc<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<walkable::scalar const ,walkable::complex> > > > > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > > _Copy_unchecked1<_Vb_iterator<_Wrap_alloc<allocator<unsigned int> > >,_Vb_iterator<_Wrap_alloc<allocator<unsigned int> > > >(std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,std::_General_ptr_iterator_tag);
	std::back_insert_iterator<std::vector<std::reference_wrapper<walkable::scalar>,std::allocator<std::reference_wrapper<walkable::scalar> > > > _Set_union_no_deprecate1<reference_wrapper<walkable::scalar> *,reference_wrapper<walkable::scalar> *,back_insert_iterator<vector<reference_wrapper<walkable::scalar>,allocator<reference_wrapper<walkable::scalar> > > >,ReferenceWrapperComparator<walkable::scalar> >(std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,std::back_insert_iterator<std::vector<std::reference_wrapper<walkable::scalar>,std::allocator<std::reference_wrapper<walkable::scalar> > > >,ReferenceWrapperComparator<walkable::scalar> &);
	std::basic_ostream<char,std::char_traits<char> > & _Insert_string<char,char_traits<char>,unsigned __int64>(std::basic_ostream<char,std::char_traits<char> > &,char const * const,unsigned __int64);
	std::basic_ostream<char,std::char_traits<char> > & operator<<<char_traits<char> >(std::basic_ostream<char,std::char_traits<char> > &,char const *);
	std::basic_ostream<char,std::char_traits<char> > & operator<<<char_traits<char> >(std::basic_ostream<char,std::char_traits<char> > &,char);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _Uninitialized_move_al_unchecked<basic_string<char,char_traits<char>,allocator<char> > *,basic_string<char,char_traits<char>,allocator<char> > *,allocator<basic_string<char,char_traits<char>,allocator<char> > > >(std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::basic_string<char,std::char_traits<char>,std::allocator<char> > operator+<char,char_traits<char>,allocator<char> >(char const * const,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > * _Uninitialized_move_al_unchecked<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *,allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::_Wrap_alloc<std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > operator+<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
	std::ctype<char> const & use_facet<ctype<char> >(std::locale const &);
	std::insert_iterator<std::vector<DeduplicatedPath,std::allocator<DeduplicatedPath> > > _Set_difference_no_deprecate1<_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> >,_Iterator_base0>,_Tree_unchecked_const_iterator<_Tree_val<_Tree_simple_types<DeduplicatedPath> >,_Iterator_base0>,insert_iterator<vector<DeduplicatedPath,allocator<DeduplicatedPath> > >,less<void> >(std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<DeduplicatedPath> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<DeduplicatedPath> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<DeduplicatedPath> >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<DeduplicatedPath> >,std::_Iterator_base0>,std::insert_iterator<std::vector<DeduplicatedPath,std::allocator<DeduplicatedPath> > >,std::less<void> &);
	std::numpunct<char> const & use_facet<numpunct<char> >(std::locale const &);
	std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> * _Uninitialized_copy_al_unchecked<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > >(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > * _Uninitialized_move_al_unchecked<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > *,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > *,allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > > >(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::pair<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *> _Partition_by_median_guess_unchecked<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*)(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &)>(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*&)(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &));
	std::pair<std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *> _Partition_by_median_guess_unchecked<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> >(std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> &);
	std::pair<std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *> _Partition_by_median_guess_unchecked<reference_wrapper<unsigned short> *,ReferenceWrapperComparator<unsigned short> >(std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *,ReferenceWrapperComparator<unsigned short> &);
	std::pair<std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *> _Partition_by_median_guess_unchecked<reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> >(std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> &);
	std::pair<std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *> _Partition_by_median_guess_unchecked<reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> >(std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> &);
	std::pair<unsigned short *,unsigned short *> _Partition_by_median_guess_unchecked<unsigned short *,less<void> >(unsigned short *,unsigned short *,std::less<void> &);
	std::pair<walkable::scalar *,walkable::scalar *> _Partition_by_median_guess_unchecked<walkable::scalar *,less<void> >(walkable::scalar *,walkable::scalar *,std::less<void> &);
	std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > * _Uninitialized_move_al_unchecked<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > *,reference_wrapper<pair<walkable::scalar const ,walkable::complex> > *,allocator<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > > >(std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::_Wrap_alloc<std::allocator<std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::reference_wrapper<unsigned short> * _Uninitialized_move_al_unchecked<reference_wrapper<unsigned short> *,reference_wrapper<unsigned short> *,allocator<reference_wrapper<unsigned short> > >(std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *,std::_Wrap_alloc<std::allocator<std::reference_wrapper<unsigned short> > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::reference_wrapper<walkable::complex> * _Uninitialized_move_al_unchecked<reference_wrapper<walkable::complex> *,reference_wrapper<walkable::complex> *,allocator<reference_wrapper<walkable::complex> > >(std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,std::_Wrap_alloc<std::allocator<std::reference_wrapper<walkable::complex> > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::reference_wrapper<walkable::scalar> * _Uninitialized_move_al_unchecked<reference_wrapper<walkable::scalar> *,reference_wrapper<walkable::scalar> *,allocator<reference_wrapper<walkable::scalar> > >(std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,std::_Wrap_alloc<std::allocator<std::reference_wrapper<walkable::scalar> > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	std::shared_ptr<SchemaCache> make_shared<SchemaCache,EffectiveUserContext const &,unsigned short const * &>(EffectiveUserContext const &,unsigned short const * &);
	std::shared_ptr<wil::PropVariant> make_shared<wil::PropVariant,float const &>(float const &);
	std::unique_ptr<Windows::Data::Platform::Partitioning::ActivePartitions,std::default_delete<Windows::Data::Platform::Partitioning::ActivePartitions> > make_unique<Windows::Data::Platform::Partitioning::ActivePartitions,Windows::Data::Platform::Partitioning::ActivePartitions const &,void>(Windows::Data::Platform::Partitioning::ActivePartitions const &);
	std::unique_ptr<Windows::Data::Platform::Partitioning::SystemPartitionIndex,std::default_delete<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > make_unique<Windows::Data::Platform::Partitioning::SystemPartitionIndex,Windows::Data::Platform::Partitioning::SystemPartitionIndex const &,void>(Windows::Data::Platform::Partitioning::SystemPartitionIndex const &);
	std::unique_ptr<schematized_data,std::default_delete<schematized_data> > make_unique<schematized_data,schematized_data const &,void>(schematized_data const &);
	std::unique_ptr<unsigned char [0],std::default_delete<unsigned char [0]> > make_unique<unsigned char [0],void>(unsigned __int64);
	std::unique_ptr<unsigned short [0],std::default_delete<unsigned short [0]> > make_unique<unsigned short [0],void>(unsigned __int64);
	std::unique_ptr<versioned<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> >,std::default_delete<versioned<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> > > > make_unique<versioned<deserializable_data<Windows::Data::Platform::Partitioning::ActivePartitions> >,Windows::Data::Platform::Partitioning::ActivePartitions &,unsigned __int64 &,void>(Windows::Data::Platform::Partitioning::ActivePartitions &,unsigned __int64 &);
	std::unique_ptr<versioned<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,std::default_delete<versioned<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> > > > make_unique<versioned<deserializable_data<Windows::Data::Platform::Partitioning::SystemPartitionIndex> >,Windows::Data::Platform::Partitioning::SystemPartitionIndex &,unsigned __int64 &,void>(Windows::Data::Platform::Partitioning::SystemPartitionIndex &,unsigned __int64 &);
	std::unique_ptr<versioned<schematized_data>,std::default_delete<versioned<schematized_data> > > make_unique<versioned<schematized_data>,schematized_data &,unsigned __int64 &,void>(schematized_data &,unsigned __int64 &);
	std::unique_ptr<versioned<schematized_data>,std::default_delete<versioned<schematized_data> > > make_unique<versioned<schematized_data>,versioned<schematized_data> const &,void>(versioned<schematized_data> const &);
	unsigned __int64 _Hash_bytes(unsigned char const *,unsigned __int64);
	unsigned __int64 stoull(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,unsigned __int64 *,int);
	unsigned int * _Uninit_alloc_fill_n1<unsigned int *,unsigned __int64,allocator<unsigned int> >(unsigned int *,unsigned __int64,unsigned int const &,std::_Wrap_alloc<std::allocator<unsigned int> > &,std::integral_constant<bool,0>);
	void * _Allocate(unsigned __int64,unsigned __int64,bool);
	void _Deallocate(void *,unsigned __int64,unsigned __int64);
	void _Destroy_range<allocator<DeduplicatedPath>,DeduplicatedPath *>(DeduplicatedPath *,DeduplicatedPath *,std::_Wrap_alloc<std::allocator<DeduplicatedPath> > &);
	void _Destroy_range<allocator<basic_string<char,char_traits<char>,allocator<char> > >,basic_string<char,char_traits<char>,allocator<char> > *>(std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &);
	void _Destroy_range<allocator<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > *>(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > *,std::_Wrap_alloc<std::allocator<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > &);
	void _Destroy_range<allocator<bond::FieldDef>,bond::FieldDef *>(bond::FieldDef *,bond::FieldDef *,std::_Wrap_alloc<std::allocator<bond::FieldDef> > &);
	void _Destroy_range<allocator<bond::StructDef>,bond::StructDef *>(bond::StructDef *,bond::StructDef *,std::_Wrap_alloc<std::allocator<bond::StructDef> > &);
	void _Destroy_range<allocator<bond::blob>,bond::blob *>(bond::blob *,bond::blob *,std::_Wrap_alloc<std::allocator<bond::blob> > &);
	void _Destroy_range<allocator<boost::io::detail::format_item<char,char_traits<char>,allocator<char> > >,boost::io::detail::format_item<char,char_traits<char>,allocator<char> > *>(boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > *,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > *,std::_Wrap_alloc<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char> > > > &);
	void _Destroy_range<allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> >,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *>(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> > > &);
	void _Destroy_range<allocator<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > >,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> > > *>(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &);
	void _Destroy_range<allocator<walkable::complex>,walkable::complex *>(walkable::complex *,walkable::complex *,std::_Wrap_alloc<std::allocator<walkable::complex> > &);
	void _Destroy_range<allocator<walkable::scalar>,walkable::scalar *>(walkable::scalar *,walkable::scalar *,std::_Wrap_alloc<std::allocator<walkable::scalar> > &);
	void _Destroy_range<allocator<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> >,wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> *>(wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> *,wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> *,std::_Wrap_alloc<std::allocator<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> > > &);
	void _Facet_Register(std::_Facet_base *);
	void _Guess_median_unchecked<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*)(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &)>(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*&)(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &));
	void _Guess_median_unchecked<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> >(std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> &);
	void _Guess_median_unchecked<reference_wrapper<unsigned short> *,ReferenceWrapperComparator<unsigned short> >(std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *,ReferenceWrapperComparator<unsigned short> &);
	void _Guess_median_unchecked<reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> >(std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> &);
	void _Guess_median_unchecked<reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> >(std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> &);
	void _Guess_median_unchecked<walkable::scalar *,less<void> >(walkable::scalar *,walkable::scalar *,walkable::scalar *,std::less<void> &);
	void _Insertion_sort_unchecked<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*)(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &)>(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*&)(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &));
	void _Insertion_sort_unchecked<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> >(std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> &);
	void _Insertion_sort_unchecked<reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> >(std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> &);
	void _Insertion_sort_unchecked<reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> >(std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> &);
	void _Insertion_sort_unchecked<unsigned short *,less<void> >(unsigned short *,unsigned short *,std::less<void> &);
	void _Insertion_sort_unchecked<walkable::scalar *,less<void> >(walkable::scalar *,walkable::scalar *,std::less<void> &);
	void _Make_heap_unchecked<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*)(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &)>(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*&)(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &));
	void _Make_heap_unchecked<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> >(std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> &);
	void _Make_heap_unchecked<reference_wrapper<unsigned short> *,ReferenceWrapperComparator<unsigned short> >(std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *,ReferenceWrapperComparator<unsigned short> &);
	void _Make_heap_unchecked<reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> >(std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> &);
	void _Make_heap_unchecked<reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> >(std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> &);
	void _Make_heap_unchecked<unsigned short *,less<void> >(unsigned short *,unsigned short *,std::less<void> &);
	void _Make_heap_unchecked<walkable::scalar *,less<void> >(walkable::scalar *,walkable::scalar *,std::less<void> &);
	void _Med3_unchecked<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*)(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &)>(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*&)(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &));
	void _Med3_unchecked<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> >(std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> &);
	void _Med3_unchecked<reference_wrapper<unsigned short> *,ReferenceWrapperComparator<unsigned short> >(std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *,ReferenceWrapperComparator<unsigned short> &);
	void _Med3_unchecked<reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> >(std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> &);
	void _Med3_unchecked<reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> >(std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> &);
	void _Med3_unchecked<unsigned short *,less<void> >(unsigned short *,unsigned short *,unsigned short *,std::less<void> &);
	void _Med3_unchecked<walkable::scalar *,less<void> >(walkable::scalar *,walkable::scalar *,walkable::scalar *,std::less<void> &);
	void _Pop_heap_unchecked<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*)(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &)>(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*&)(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &));
	void _Sort_heap_unchecked<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*)(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &)>(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,bool (*&)(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &));
	void _Sort_heap_unchecked<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> >(std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> &);
	void _Sort_heap_unchecked<reference_wrapper<unsigned short> *,ReferenceWrapperComparator<unsigned short> >(std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *,ReferenceWrapperComparator<unsigned short> &);
	void _Sort_heap_unchecked<reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> >(std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,ReferenceWrapperComparator<walkable::complex> &);
	void _Sort_heap_unchecked<reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> >(std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,ReferenceWrapperComparator<walkable::scalar> &);
	void _Sort_heap_unchecked<unsigned short *,less<void> >(unsigned short *,unsigned short *,std::less<void> &);
	void _Sort_heap_unchecked<walkable::scalar *,less<void> >(walkable::scalar *,walkable::scalar *,std::less<void> &);
	void _Sort_unchecked1<pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,__int64,bool (*)(pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,pair<basic_string<unsigned short,char_traits<unsigned short>,allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &)>(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> *,__int64,bool (*&)(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,Windows::Data::Platform::Partitioning::DeviceExperiencePartitionMetadata> const &));
	void _Sort_unchecked1<reference_wrapper<pair<walkable::scalar const ,walkable::complex> > *,__int64,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> >(std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > *,__int64,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex> &);
	void _Sort_unchecked1<reference_wrapper<unsigned short> *,__int64,ReferenceWrapperComparator<unsigned short> >(std::reference_wrapper<unsigned short> *,std::reference_wrapper<unsigned short> *,__int64,ReferenceWrapperComparator<unsigned short> &);
	void _Sort_unchecked1<reference_wrapper<walkable::complex> *,__int64,ReferenceWrapperComparator<walkable::complex> >(std::reference_wrapper<walkable::complex> *,std::reference_wrapper<walkable::complex> *,__int64,ReferenceWrapperComparator<walkable::complex> &);
	void _Sort_unchecked1<reference_wrapper<walkable::scalar> *,__int64,ReferenceWrapperComparator<walkable::scalar> >(std::reference_wrapper<walkable::scalar> *,std::reference_wrapper<walkable::scalar> *,__int64,ReferenceWrapperComparator<walkable::scalar> &);
	void _Sort_unchecked1<unsigned short *,__int64,less<void> >(unsigned short *,unsigned short *,__int64,std::less<void> &);
	void _Sort_unchecked1<walkable::scalar *,__int64,less<void> >(walkable::scalar *,walkable::scalar *,__int64,std::less<void> &);
	walkable::complex * _Uninitialized_copy_al_unchecked<walkable::complex *,walkable::complex *,allocator<walkable::complex> >(walkable::complex *,walkable::complex *,walkable::complex *,std::_Wrap_alloc<std::allocator<walkable::complex> > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	walkable::scalar * _Uninitialized_move_al_unchecked<walkable::scalar *,walkable::scalar *,allocator<walkable::scalar> >(walkable::scalar *,walkable::scalar *,walkable::scalar *,std::_Wrap_alloc<std::allocator<walkable::scalar> > &,std::_General_ptr_iterator_tag,std::_Any_tag);
	wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> * _Uninitialized_move_al_unchecked<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> *,wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> *,allocator<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> > >(wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> *,wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> *,wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> *,std::_Wrap_alloc<std::allocator<wil::com_ptr_t<ILegacySettingMigrationMonitor,wil::err_exception_policy> > > &,std::_General_ptr_iterator_tag,std::_Any_tag);
};

struct versioned<schematized_data>
{
	versioned<schematized_data>(versioned<schematized_data> const &);
	~versioned<schematized_data>();
};

struct versioned<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >
{
	~versioned<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >();
};

struct versioned<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > >
{
	~versioned<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > >();
};

struct versioned<std::vector<walkable::complex,std::allocator<walkable::complex> > >
{
	~versioned<std::vector<walkable::complex,std::allocator<walkable::complex> > >();
};

struct versioned<walkable::complex>
{
	~versioned<walkable::complex>();
};

struct versioned<walkable::field>
{
	~versioned<walkable::field>();
};

struct versioned<walkable::structure>
{
	~versioned<walkable::structure>();
};

namespace walkable
{
	class complex
	{
		std::vector<scalar,std::allocator<scalar> > const & get_sorted_map_keys();
	public:
		bond::RuntimeSchema const & get_element_schema();
		bond::_bond_enumerators::BondDataType::BondDataType get_bond_type();
		bond::_bond_enumerators::BondDataType::BondDataType get_key_bond_type();
		complex(complex const &);
		int compare(complex const &);
		scalar const & get_scalar();
		std::unordered_map<scalar,complex,scalar::hasher,std::equal_to<scalar>,std::allocator<std::pair<scalar const ,complex> > > const & get_map();
		std::unordered_set<complex,complex::hasher,std::equal_to<complex>,std::allocator<complex> > const & get_set();
		std::vector<complex,std::allocator<complex> > const & get_list();
		structure const & get_structure();
		~complex();
	};

	struct field
	{
		bond::Metadata const & get_metadata();
		field(field const &);
		~field();
	};

	struct scalar
	{
		__int64 get_int64();
		bond::_bond_enumerators::BondDataType::BondDataType get_bond_type();
		bool get_bool();
		char const * get_string();
		double get_double();
		float get_float();
		int compare(scalar const &);
		int get_int32();
		short get_int16();
		signed char get_int8();
		static scalar make(__int64);
		static scalar make(double);
		static scalar make(int);
		static scalar make(short);
		static scalar make(signed char);
		static scalar make(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &);
		static scalar make(std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > const &);
		static scalar make(unsigned __int64);
		static scalar make<bool>(bool const &);
		static scalar make<float>(float const &);
		static scalar make<unsigned char>(unsigned char const &);
		static scalar make<unsigned int>(unsigned int const &);
		static scalar make<unsigned short>(unsigned short const &);
		static scalar make_default(bond::Metadata const &,bond::_bond_enumerators::BondDataType::BondDataType);
		unsigned __int64 get_uint64();
		unsigned char get_uint8();
		unsigned int get_uint32();
		unsigned short const * get_wstring();
		unsigned short get_uint16();
		~scalar();
	};

	struct structure
	{
		int compare(structure const &);
		structure const & get_base();
		structure(structure const &);
		~structure();
	};

	void WalkStructure(walkable::structure const &,StructureWalkCallback &);
	walkable::structure CreateDefaultInstance(bond::RuntimeSchema const &);
	walkable::structure ResolveStructure(walkable::structure const &,unsigned __int64,walkable::structure const &,unsigned __int64,walkable::structure const &,unsigned __int64,unsigned __int64 *);
	walkable::structure UnmarshalToWalkable(bond::RuntimeSchema const &,bond::blob const &);
};

namespace wil
{
	class ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,0,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

		void ReportStopActivity(long);
	protected:
		void Destroy();
	public:
		ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,0,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,0,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			long SetUnhandledException();
			~ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>
	{
		struct ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType>
		{
			bool SetStopResult(long,long *);
			~ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType>();
		};

	protected:
		void Destroy();
	public:
		ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>(char const *,bool);
		_GUID const * zInternalRelatedId();
		virtual bool NotifyFailure(FailureInfo const &);
		void Stop(long);
		void zInternalStart();
		void zInternalStop();
		~ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>();
	};

	class Feature<__WilFeatureTraits_Feature_CloudStoreSync>
	{
		static void ReportUsageToService(bool,ReportingKind,unsigned __int64);
		static wil_details_CachedFeatureEnabledState GetCachedFeatureEnabledState(bool);
	};

	class Feature<__WilFeatureTraits_Feature_WindowsAnywhere>
	{
		static void ReportUsageToService(bool,ReportingKind,unsigned __int64);
		static wil_details_CachedFeatureEnabledState GetCachedFeatureEnabledState(bool);
	};

	struct PropVariant
	{
		~PropVariant();
	};

	struct ResultException
	{
		ResultException(ResultException const &);
		virtual char const * what();
		virtual ~ResultException();
	};

	struct StoredFailureInfo
	{
		void SetFailureInfo(FailureInfo const &);
	};

	class TraceLoggingProvider
	{
		virtual bool NotifyFailure(FailureInfo const &);
	protected:
		virtual void Initialize();
		virtual void OnErrorReported(bool,FailureInfo const &);
		virtual ~TraceLoggingProvider();
		void ReportTelemetryFailure(FailureInfo const &);
		void ReportTraceLoggingFailure(FailureInfo const &);
	};

	struct Variant
	{
		~Variant();
	};

	struct com_ptr_t<IAgileObject,err_returncode_policy>
	{
		~com_ptr_t<IAgileObject,err_returncode_policy>();
	};

	struct com_ptr_t<ICloudStoreMetadata,err_exception_policy>
	{
		~com_ptr_t<ICloudStoreMetadata,err_exception_policy>();
	};

	struct com_ptr_t<ICloudStoreSchemaProvider,err_exception_policy>
	{
		~com_ptr_t<ICloudStoreSchemaProvider,err_exception_policy>();
	};

	struct com_ptr_t<IConfigManager2,err_exception_policy>
	{
		void reset();
		~com_ptr_t<IConfigManager2,err_exception_policy>();
	};

	struct com_ptr_t<IConfigManager2URI,err_exception_policy>
	{
		~com_ptr_t<IConfigManager2URI,err_exception_policy>();
	};

	struct com_ptr_t<IConfigNode,err_exception_policy>
	{
		~com_ptr_t<IConfigNode,err_exception_policy>();
	};

	struct com_ptr_t<IEnumConfigNodes,err_exception_policy>
	{
		~com_ptr_t<IEnumConfigNodes,err_exception_policy>();
	};

	struct com_ptr_t<IEnumString,err_exception_policy>
	{
		~com_ptr_t<IEnumString,err_exception_policy>();
	};

	struct com_ptr_t<IInspectable,err_exception_policy>
	{
		~com_ptr_t<IInspectable,err_exception_policy>();
	};

	struct com_ptr_t<ILegacySettingMigrationMonitor,err_exception_policy>
	{
		void attach(ILegacySettingMigrationMonitor *);
		~com_ptr_t<ILegacySettingMigrationMonitor,err_exception_policy>();
	};

	struct com_ptr_t<IRefcountedSchema,err_exception_policy>
	{
		~com_ptr_t<IRefcountedSchema,err_exception_policy>();
	};

	struct com_ptr_t<ISchematizedCloudStore,err_exception_policy>
	{
		~com_ptr_t<ISchematizedCloudStore,err_exception_policy>();
	};

	struct com_ptr_t<ITypeRegistry,err_exception_policy>
	{
		~com_ptr_t<ITypeRegistry,err_exception_policy>();
	};

	struct com_ptr_t<ITypeServicesInternal,err_exception_policy>
	{
		~com_ptr_t<ITypeServicesInternal,err_exception_policy>();
	};

	struct com_ptr_t<IWeakReference,err_exception_policy>
	{
		~com_ptr_t<IWeakReference,err_exception_policy>();
	};

	struct com_ptr_t<IWeakReferenceSource,err_returncode_policy>
	{
		~com_ptr_t<IWeakReferenceSource,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::IAsyncOperation<Windows::Internal::Security::Authentication::Web::GetDefaultSignInAccountResult *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::IAsyncOperation<Windows::Internal::Security::Authentication::Web::GetDefaultSignInAccountResult *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *>,err_exception_policy>
	{
		~com_ptr_t<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *>,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *>,err_returncode_policy>
	{
		com_ptr_t<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *>,err_returncode_policy>(Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *> *);
		~com_ptr_t<Windows::Foundation::ITypedEventHandler<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *,Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs *>,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Security::Authentication::Web::IGetDefaultSignInAccountResult,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Security::Authentication::Web::IGetDefaultSignInAccountResult,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Security::Authentication::Web::ITokenBrokerInternalStatics,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Security::Authentication::Web::ITokenBrokerInternalStatics,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::Broker::ICloudStoreBroker,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::Broker::ICloudStoreBroker,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::CloudStoreData,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::CloudStoreData,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::CloudStoreDataChangedEventArgs,err_returncode_policy>
	{
		long copy_to(_GUID const &,void * *);
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,err_returncode_policy>
	{
		com_ptr_t<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,err_returncode_policy>(Windows::Internal::Storage::Cloud::CloudStoreDataWatcher *);
		~com_ptr_t<Windows::Internal::Storage::Cloud::CloudStoreDataWatcher,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy>
	{
		com_ptr_t<ISchematizedCloudStore,err_exception_policy> query<ISchematizedCloudStore>();
		com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy>(Windows::Internal::Storage::Cloud::ICloudStore *);
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreData,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreData,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreData,err_returncode_policy>
	{
		long copy_to<Windows::Internal::Storage::Cloud::ICloudStoreData>(Windows::Internal::Storage::Cloud::ICloudStoreData * *);
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreData,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs,err_returncode_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,err_exception_policy>(Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher *);
		void attach(Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher *);
		void reset();
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreSaveResult,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreSaveResult,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::Metadata::ITypeServices,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::Metadata::ITypeServices,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet,err_exception_policy>
	{
		com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet,err_exception_policy>(Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet *);
		~com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::CloudStorePartitionSet,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::IActivePartitionChangedEventArgs,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::IActivePartitionChangedEventArgs,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionInfo,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::ICloudStorePartitionInfo,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::IPartitionMetadata,err_exception_policy>
	{
		~com_ptr_t<Windows::Internal::Storage::Cloud::Partitioning::IPartitionMetadata,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Security::Credentials::IWebAccount,err_exception_policy>
	{
		~com_ptr_t<Windows::Security::Credentials::IWebAccount,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Security::Credentials::IWebAccount2,err_exception_policy>
	{
		~com_ptr_t<Windows::Security::Credentials::IWebAccount2,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Security::Credentials::IWebAccountProvider,err_exception_policy>
	{
		~com_ptr_t<Windows::Security::Credentials::IWebAccountProvider,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy>
	{
		~com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy>();
	};

	struct com_ptr_t<Windows::Storage::Streams::IBuffer,err_returncode_policy>
	{
		~com_ptr_t<Windows::Storage::Streams::IBuffer,err_returncode_policy>();
	};

	struct com_ptr_t<Windows::System::Internal::ISignInStateManager,err_exception_policy>
	{
		~com_ptr_t<Windows::System::Internal::ISignInStateManager,err_exception_policy>();
	};

	namespace details
	{
		struct DestroyThreadPoolTimer<0>
		{
			static void Destroy(_TP_TIMER *);
		};

		struct DestroyThreadPoolWait<0>
		{
			static void Destroy(_TP_WAIT *);
		};

		class EnabledStateManager
		{
			void EnsureSubscribedToStateChangesUnderLock();
			void RecordCachedUsageUnderLock();
		public:
			void EnsureSubscribedToUsageFlush(void (*)(void *));
			void OnStateChange();
			void OnTimer();
			void QueueBackgroundUsageReporting(unsigned int,wil_details_FeaturePropertyCache &);
			void SubscribeFeaturePropertyCacheToEnabledStateChanges(wil_details_FeaturePropertyCache *,wil_FeatureChangeTime);
		};

		class FeatureStateManager
		{
			bool EnsureStateData();
			void EnsureSubscribedToProcessWideUsageFlushUnderLock();
		public:
			FeatureStateManager();
			void RecordFeatureError(unsigned int,FEATURE_ERROR const &);
			void RecordFeatureUsage(unsigned int,wil_details_ServiceReportingKind,unsigned __int64);
			void SubscribeToEnabledStateChanges(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
			void SubscribeToUsageFlush(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *));
			~FeatureStateManager();
		};

		class ThreadFailureCallbackHolder
		{
			static long volatile s_telemetryId;
		public:
			static bool GetThreadContext(FailureInfo *,ThreadFailureCallbackHolder *,char *,unsigned __int64);
			static void GetContextAndNotifyFailure(FailureInfo *,char *,unsigned __int64);
			void StartWatching();
			void StopWatching();
		};

		namespace in1diag3
		{
			long Log_CaughtException(void *,unsigned int,char const *);
			long Log_Hr(void *,unsigned int,char const *,long);
			long Return_CaughtException(void *,unsigned int,char const *);
			long Return_GetLastError(void *,unsigned int,char const *);
			long Return_NtStatus(void *,unsigned int,char const *,long);
			long Return_Win32(void *,unsigned int,char const *,unsigned long);
			void FailFast_Hr(void *,unsigned int,char const *,long);
			void FailFast_Unexpected(void *,unsigned int,char const *);
			void Return_Hr(void *,unsigned int,char const *,long);
			void Return_Hr_NoOriginate(void *,unsigned int,char const *,long);
			void Throw_Hr(void *,unsigned int,char const *,long);
			void Throw_Win32(void *,unsigned int,char const *,unsigned long);
			void _FailFastImmediate_Unexpected();
			void _FailFast_GetLastError(void *,unsigned int,char const *);
			void _FailFast_Hr(void *,unsigned int,char const *,long);
			void _FailFast_Unexpected(void *,unsigned int,char const *);
			void _Log_GetLastError(void *,unsigned int,char const *);
			void _Log_Hr(void *,unsigned int,char const *,long);
			void _Log_Win32(void *,unsigned int,char const *,unsigned long);
			void _Throw_GetLastError(void *,unsigned int,char const *);
			void _Throw_Hr(void *,unsigned int,char const *,long);
			void _Throw_NullAlloc(void *,unsigned int,char const *);
			void _Throw_Win32(void *,unsigned int,char const *,unsigned long);
		};

		struct out_param_t<Microsoft::WRL::ComPtr<Windows::Storage::Streams::IBuffer> >
		{
			~out_param_t<Microsoft::WRL::ComPtr<Windows::Storage::Streams::IBuffer> >();
		};

		struct out_param_t<com_ptr_t<IEnumString,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<IEnumString,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<IRefcountedSchema,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<IRefcountedSchema,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Foundation::Collections::IVectorView<HSTRING__ *>,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0>,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Foundation::Collections::Internal::AgileVector<HSTRING__ *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<HSTRING__ *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<HSTRING__ *>,0>,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Foundation::IAsyncOperation<Windows::Internal::Security::Authentication::Web::GetDefaultSignInAccountResult *>,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Foundation::IAsyncOperation<Windows::Internal::Security::Authentication::Web::GetDefaultSignInAccountResult *>,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStore,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreData,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreData,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreData,err_returncode_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreData,err_returncode_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs,err_returncode_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs,err_returncode_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreDataWatcher,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreSaveResult,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Internal::Storage::Cloud::ICloudStoreSaveResult,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Security::Credentials::IWebAccount,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Security::Credentials::IWebAccount,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Security::Credentials::IWebAccountProvider,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Security::Credentials::IWebAccountProvider,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Storage::Streams::IBuffer,err_exception_policy> >();
		};

		struct out_param_t<com_ptr_t<Windows::Storage::Streams::IBuffer,err_returncode_policy> >
		{
			~out_param_t<com_ptr_t<Windows::Storage::Streams::IBuffer,err_returncode_policy> >();
		};

		struct registry_watcher_state
		{
			void ReleaseFromCallback(RegistryChangeKind);
		};

		class shared_buffer
		{
			void assign(long *,unsigned __int64);
		public:
			bool create(void const *,unsigned __int64);
			void reset();
		};

		struct shared_object<ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,0,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,35184372088832,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct shared_object<ActivityBase<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,1,70368744177664,5,_TlgReflectorTag_Param0IsProviderType>::ActivityData<Windows::Internal::Storage::Cloud::CloudStoreTelemetry,_TlgReflectorTag_Param0IsProviderType> >
		{
			void reset();
		};

		struct static_lazy<Windows::Internal::Storage::Cloud::CloudStoreTelemetry>
		{
			struct Completer
			{
				~Completer();
			};

			Windows::Internal::Storage::Cloud::CloudStoreTelemetry * get(void (*)());
			void cleanup();
		};

		FEATURE_ENABLED_STATE WilApiImpl_GetFeatureEnabledState(unsigned int,FEATURE_CHANGE_TIME);
		FEATURE_ENABLED_STATE WilApi_GetFeatureEnabledState(unsigned int,FEATURE_CHANGE_TIME);
		bool (* g_pfnGetModuleInformation)(void *,unsigned int *,char *,unsigned __int64);
		bool GetModuleInformation(void *,unsigned int *,char *,unsigned __int64);
		bool IsFeatureConfigured(wil_FeatureState *,unsigned int,bool,wil_FeatureStore);
		bool g_processShutdownInProgress;
		bool g_resultMessageCallbackSet;
		char const * (* g_pfnGetModuleName)();
		char const * GetCurrentModuleName();
		details_abi::ProcessLocalStorage<details_abi::ProcessLocalData> g_processLocalData;
		details_abi::ThreadLocalStorage<details::ThreadFailureCallbackHolder *> * g_pThreadFailureCallbacks;
		details_abi::ThreadLocalStorage<details::ThreadFailureCallbackHolder *> g_threadFailureCallbacks;
		int RecordException(long);
		int RecordFailFast(long);
		int RecordLog(long);
		int RecordReturn(long);
		long GetLastErrorFailHr();
		long NtStatusToHr(long);
		long RecognizeCaughtExceptionFromCallback(unsigned short *,unsigned __int64);
		long ReportFailure_CaughtException(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,SupportedExceptions);
		long ReportFailure_CaughtExceptionCommon(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,unsigned short *,unsigned __int64,SupportedExceptions);
		long ReportFailure_GetLastErrorHr(void *,unsigned int,char const *,char const *,char const *,void *,FailureType);
		long ReportFailure_NtStatus(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long);
		long ReportFailure_Win32(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,unsigned long);
		long ResultFromCaughtExceptionInternal(unsigned short *,unsigned __int64,bool *);
		long StringCchPrintfA(char *,unsigned __int64,char const *,...);
		long WaitForCompletion<Windows::Foundation::IAsyncOperation<Windows::Internal::Security::Authentication::Web::GetDefaultSignInAccountResult *> *>(Windows::Foundation::IAsyncOperation<Windows::Internal::Security::Authentication::Web::GetDefaultSignInAccountResult *> *,tagCOWAIT_FLAGS,unsigned long,bool *);
		shutdown_aware_object<details::EnabledStateManager> g_enabledStateManager;
		shutdown_aware_object<details::FeatureStateManager> g_featureStateManager;
		unsigned __int64 ResultStringSize(char const *);
		unsigned __int64 ResultStringSize(unsigned short const *);
		unsigned char (* g_pfnRtlDllShutdownInProgress)();
		unsigned char * WriteResultString<char const *>(unsigned char *,unsigned char *,char const *,char const * *);
		unsigned char * WriteResultString<unsigned short const *>(unsigned char *,unsigned char *,unsigned short const *,unsigned short const * *);
		unsigned char RtlDllShutdownInProgress();
		unsigned long (* g_pfnRtlNtStatusToDosErrorNoTeb)(long);
		unsigned long GetLastErrorFail(void *,unsigned int,char const *,char const *,char const *,void *);
		unsigned long ReportFailure_GetLastError(void *,unsigned int,char const *,char const *,char const *,void *,FailureType);
		unsigned long RtlNtStatusToDosErrorNoTeb(long);
		unsigned short * LogStringPrintf(unsigned short *,unsigned short const *,unsigned short const *,...);
		void (* g_pfnDebugBreak)();
		void (* g_pfnGetContextAndNotifyFailure)(FailureInfo *,char *,unsigned __int64);
		void (* g_pfnLoggingCallback)(FailureInfo const &);
		void (* g_pfnOriginateCallback)(FailureType,long);
		void (* g_pfnRethrow)();
		void (* g_pfnTelemetryCallback)(bool,FailureInfo const &);
		void (* g_pfnThrowResultException)(FailureInfo const &);
		void CloseHandle(void *);
		void DebugBreak();
		void FreeProcessHeap(void *);
		void GetContextAndNotifyFailure(FailureInfo *,char *,unsigned __int64);
		void LogFailure(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,unsigned short const *,bool,unsigned short *,unsigned __int64,char *,unsigned __int64,FailureInfo *);
		void MaybeGetExceptionString(ResultException const &,unsigned short *,unsigned __int64);
		void MaybeGetExceptionString(std::exception const &,unsigned short *,unsigned __int64);
		void RecordFeatureUsageCallback(unsigned int,wil_details_FeaturePropertyCache *,wil_details_RecordUsageResult *);
		void ReleaseMutex(void *);
		void ReportFailure(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long,unsigned short const *,details::ReportFailureOptions);
		void ReportFailure_Hr(void *,unsigned int,char const *,char const *,char const *,void *,FailureType,long);
		void Rethrow();
		void RevertImpersonateToken(void *);
		void SetEvent(void *);
		void ThrowResultExceptionInternal(FailureInfo const &);
		void WilApiImpl_RecordFeatureError(unsigned int,FEATURE_ERROR const *);
		void WilApiImpl_RecordFeatureUsage(unsigned int,unsigned int,unsigned int,char const *);
		void WilApiImpl_SubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
		void WilApiImpl_UnsubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
		void WilApi_RecordFeatureUsage(unsigned int,unsigned int,unsigned int,char const *);
		void WilApi_SubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
		void WilApi_UnsubscribeFeatureStateChangeNotification(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
	};

	namespace details_abi
	{
		class FeatureStateData
		{
			void RetrieveUsageUnderLock(UsageIndexes &);
		public:
			bool RecordFeatureError(unsigned int,FEATURE_ERROR const &);
			bool RecordFeatureUsage(unsigned int,wil_details_ServiceReportingKind,unsigned __int64);
			void ProcessShutdown();
			void RecordUsage();
		};

		struct ProcessLocalStorage<ProcessLocalData>
		{
			ProcessLocalData * GetShared();
			~ProcessLocalStorage<ProcessLocalData>();
		};

		struct ProcessLocalStorageData<FeatureStateData>
		{
			static long Acquire(char const *,ProcessLocalStorageData<FeatureStateData> * *);
			~ProcessLocalStorageData<FeatureStateData>();
		};

		struct ProcessLocalStorageData<ProcessLocalData>
		{
			static long Acquire(char const *,ProcessLocalStorageData<ProcessLocalData> * *);
			void Release();
			~ProcessLocalStorageData<ProcessLocalData>();
		};

		class RawUsageIndex
		{
			bool RecordUsageInternal(void *,unsigned __int64,void *,unsigned __int64,unsigned int);
			unsigned char * FindInsertionPointOrIncrement(UsageIndexProperty &,unsigned char *,void *,unsigned __int64,unsigned int);
			unsigned char * LowerBound(unsigned char *,unsigned __int64,void *,unsigned __int64);
		public:
			RawUsageIndex(unsigned short,unsigned short,CountSize,unsigned short,CountSize);
			bool Iterate(wistd::function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>);
			bool RecordUsage(void *,unsigned __int64,void *,unsigned __int64,unsigned int);
			void SetBuffer(void *,unsigned __int64,unsigned __int64);
			void Swap(RawUsageIndex &);
			~RawUsageIndex();
		};

		class SemaphoreValue
		{
			long CreateFromValueInternal(unsigned short const *,bool,unsigned __int64);
			static long GetValueFromSemaphore(void *,long *);
			static long TryGetValueInternal(unsigned short const *,bool,unsigned __int64 *,bool *);
		public:
			static long TryGetPointer(unsigned short const *,void * *);
			void Destroy();
			~SemaphoreValue();
		};

		struct SerializedFailure
		{
			static bool Serialize(FEATURE_ERROR const &,unsigned __int64 *,void *,unsigned __int64);
		};

		struct SubscriptionList
		{
			SubscriptionList();
			void OnSignaled(srwlock &);
			void SubscribeUnderLock(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
			void Unsubscribe(srwlock &,FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
			~SubscriptionList();
		};

		struct ThreadLocalData
		{
			void SetLastError(FailureInfo const &);
		};

		struct ThreadLocalFailureInfo
		{
			void Set(FailureInfo const &,unsigned int);
		};

		struct ThreadLocalStorage<ThreadLocalData>
		{
			ThreadLocalData * GetLocal(bool);
		};

		struct ThreadLocalStorage<details::ThreadFailureCallbackHolder *>
		{
			details::ThreadFailureCallbackHolder * * GetLocal(bool);
			~ThreadLocalStorage<details::ThreadFailureCallbackHolder *>();
		};

		struct UsageIndexProperty
		{
			bool AddToCount(unsigned int);
			bool Read(unsigned char * &,unsigned char *);
			bool Write(unsigned char * &,unsigned char *);
			int Compare(void *,unsigned __int64);
			unsigned __int64 GetSize();
			void UpdateCount(unsigned int);
		};

		struct UsageIndexes
		{
			UsageIndexes();
			void Record();
			~UsageIndexes();
		};

		struct heap_buffer
		{
			bool ensure(unsigned __int64);
			bool push_back(void const *,unsigned __int64);
			bool reserve(unsigned __int64);
		};

		details_abi::ProcessLocalStorage<details_abi::ProcessLocalData> * g_pProcessLocalData;
		details_abi::ThreadLocalData * GetThreadLocalDataCache(bool);
		void RecordWnfUsageIndex(__WIL__WNF_STATE_NAME const *,unsigned __int64,details_abi::RawUsageIndex const &);
	};

	struct shutdown_aware_object<details::EnabledStateManager>
	{
		shutdown_aware_object<details::EnabledStateManager>();
		~shutdown_aware_object<details::EnabledStateManager>();
	};

	struct shutdown_aware_object<details::FeatureStateManager>
	{
		shutdown_aware_object<details::FeatureStateManager>();
		~shutdown_aware_object<details::FeatureStateManager>();
	};

	bool (* g_pfnIsDebuggerPresent)();
	bool ProcessShutdownInProgress();
	bool TryGetParentPathRange(unsigned short const *,unsigned __int64 *);
	bool g_fBreakOnFailure;
	bool g_fIsDebuggerPresent;
	long (* g_pfnResultFromCaughtException)();
	long CreateDirectoryDeepNoThrow(unsigned short const *);
	long GetFailureLogString(unsigned short *,unsigned __int64,wil::FailureInfo const &);
	long GetTokenInformationNoThrow<_TOKEN_USER>(wistd::unique_ptr<_TOKEN_USER,wistd::default_delete<_TOKEN_USER> > &,void *);
	long OpenCurrentAccessTokenNoThrow(void * *,unsigned long,wil::OpenThreadTokenAs);
	long impersonate_token_nothrow(void *,wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<void *,void (*)(void *),&void wil::details::RevertImpersonateToken(void *),wistd::integral_constant<unsigned __int64,2>,void *,-1,void *> > > &);
	unsigned short const * FindLastPathSegment(unsigned short const *);
	void SetLastError(wil::FailureInfo const &);
	void SetResultLoggingCallback(void (*)(wil::FailureInfo const &));
	void SetResultTelemetryFallback(void (*)(bool,wil::FailureInfo const &));
	wil::com_ptr_t<Windows::Internal::Security::Authentication::Web::ITokenBrokerInternalStatics,wil::err_exception_policy> GetActivationFactory<Windows::Internal::Security::Authentication::Web::ITokenBrokerInternalStatics>(unsigned short const *);
	wil::com_ptr_t<Windows::Internal::Storage::Cloud::Broker::ICloudStoreBroker,wil::err_exception_policy> ActivateInstance<Windows::Internal::Storage::Cloud::Broker::ICloudStoreBroker>(unsigned short const *);
	wil::unique_any_t<wil::details::unique_storage<wil::details::handle_null_resource_policy<int (*)(void *),&int CloseHandle(void *)> > > OpenCurrentAccessToken(unsigned long,wil::OpenThreadTokenAs);
	wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<void *,void (*)(void *),&void wil::details::RevertImpersonateToken(void *),wistd::integral_constant<unsigned __int64,2>,void *,-1,void *> > > impersonate_token(void *);
	wistd::unique_ptr<_TOKEN_USER,wistd::default_delete<_TOKEN_USER> > GetTokenInformation<_TOKEN_USER>(void *);
	wistd::unique_ptr<unsigned char [0],wil::function_deleter<void (*)(void *),&void CoTaskMemFree(void *)> > make_unique_cotaskmem<unsigned char [0]>(unsigned __int64);
};

namespace wistd
{
	class _Func_class<bool,void *,unsigned __int64,void *,unsigned __int64,unsigned int,_Nil,_Nil>
	{
	protected:
		void _Tidy();
	};

	class _Func_class<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>
	{
	protected:
		void _Tidy();
	public:
		~_Func_class<void,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil,_Nil>();
	};

	struct function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>
	{
		~function<bool (void *,unsigned __int64,void *,unsigned __int64,unsigned int)>();
	};

	struct function<void ()>
	{
		~function<void ()>();
	};

	struct unique_ptr<_TOKEN_USER,default_delete<_TOKEN_USER> >
	{
		~unique_ptr<_TOKEN_USER,default_delete<_TOKEN_USER> >();
	};

	struct unique_ptr<char,default_delete<char> >
	{
		~unique_ptr<char,default_delete<char> >();
	};

	struct unique_ptr<wil::details::registry_watcher_state,default_delete<wil::details::registry_watcher_state> >
	{
		~unique_ptr<wil::details::registry_watcher_state,default_delete<wil::details::registry_watcher_state> >();
	};

};

?CloudStoreSchemaProvider_CreateInstance@@YAJ$$QEAV?$unique_any_t@V?$unique_storage@U?$resource_policy@PEAUHKEY__@@P6AJPEAU1@@Z$1?RegCloseKey@@YAJ0@ZU?$integral_constant@_K$0A@@wistd@@PEAU1@$0A@$$T@details@wil@@@details@wil@@@wil@@PEAPEAUICloudStoreSchemaProvider@@@Z;
?ConvertBufferBytesToBuffer@@YAJ$$QEAV?$unique_ptr@$$BY0A@EU?$function_deleter@P6AXPEAX@Z$1?CoTaskMemFree@@YAX0@Z@wil@@@wistd@@_KPEAPEAUIBuffer@Streams@Storage@Windows@@@Z;
?NarrowStringToWideStringAlloc@@YA?AV?$unique_any_t@V?$unique_storage@U?$resource_policy@PEAGP6AXPEAX@Z$1?CoTaskMemFree@@YAX0@ZU?$integral_constant@_K$0A@@wistd@@PEAG$0A@$$T@details@wil@@@details@wil@@@wil@@PEBD@Z;
CloudStoreGlobalDebugFlags g_debugFlags;
ConfigDataType GetConfigDataTypeFromString(char const *);
ConflictPolicyValue GetConflictPolicy(bond::Metadata const &,GetAttributeOptions);
FEATURE_ENABLED_STATE (* g_wil_details_apiGetFeatureEnabledState)(unsigned int,FEATURE_CHANGE_TIME);
FEATURE_ENABLED_STATE (* g_wil_details_internalGetFeatureEnabledState)(unsigned int,FEATURE_CHANGE_TIME);
HINSTANCE__ * g_wil_details_ntdllModuleHandle;
HINSTANCE__ * wil_details_GetNtDllModuleHandle();
MapEntry<ConflictPolicyValue> const * const c_conflictPolicyMap;
MapEntry<MigrationDirection> const * const c_migrationDirectionMap;
MapEntry<ScopeValue> const * const c_scopeMap;
MapEntry<UploadPolicyValue> const * const c_uploadPolicyMap;
MapEntry<unsigned char> const * const c_booleanMap;
Microsoft::WRL::Details::CreatorMap const __object_CloudCacheInitializerDesktop_COM;
Microsoft::WRL::Details::CreatorMap const __object_CloudCacheInitializer_COM;
Microsoft::WRL::Details::CreatorMap const __object_CoreSchemaProvider_COM;
Microsoft::WRL::Details::CreatorMap const __object_LegacySettingMonitor_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CloudCacheInitializerDesktop_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CloudCacheInitializer_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__CoreSchemaProvider_COM;
Microsoft::WRL::Details::FactoryCache __objectFactory__LegacySettingMonitor_COM;
ScopeValue GetScope(bond::Metadata const &,GetAttributeOptions);
TypeSchemaMapping const * const c_bondTypes;
UploadPolicyValue GetUploadPolicy(bond::Metadata const &,GetAttributeOptions);
VariantTypeInfo const & GetVariantTypeInfoFromVarType(unsigned short);
__WIL_RTL_SRWLOCK g_wil_details_testFeatureStateLock;
__type_info_node __type_info_root_node;
bond::blob MarshalStruct<Windows::Data::Platform::Partitioning::ActivePartitions>(Windows::Data::Platform::Partitioning::ActivePartitions const &);
bond::blob MarshalStruct<Windows::Data::Platform::Partitioning::SystemPartitionIndex>(Windows::Data::Platform::Partitioning::SystemPartitionIndex const &);
bool HasUnknownFields(bond::RuntimeSchema const &,bond::blob const &);
bool IsASTAOrMainSTA();
bool IsValidBlob(unsigned char const *,unsigned __int64);
bool IsValidBuffer(Windows::Storage::Streams::IBuffer *);
bool StringStartsWithOrdinal(unsigned short const *,unsigned short const *);
bool _TlgGuidIsZero(_GUID const &);
int InlineIsEqualGUID(_GUID const &,_GUID const &);
int g_wil_details_preventOnDemandStagingConfigReads;
int wil_HasFeatureTestState(unsigned int,wil_FeatureEnabledState *);
int wil_QueryFeatureState(wil_FeatureState *,unsigned int,int,wil_FeatureStore,int *);
int wil_details_FeaturePropertyCache_ReportUsageToServiceDirect(wil_details_FeaturePropertyCache *,unsigned int,wil_details_ServiceReportingKind,unsigned int,unsigned __int64);
int wil_details_HasTestState(unsigned int,wil_details_FeatureTestStateKind,wil_details_FeatureTestState *);
int wil_details_ModifyFeatureData(wil_details_FeaturePropertyCache *,int (*)(wil_details_FeaturePropertyCache *,void *),void *);
int wil_details_SetEnabledAndHasNotificationStateCallback(wil_details_FeaturePropertyCache *,void *);
int wil_details_SetHasNotificationStateCallback(wil_details_FeaturePropertyCache *,void *);
int wil_details_SetPropertyCacheOpportunityCallback(wil_details_FeaturePropertyCache *,void *);
int wil_details_SetPropertyCacheUsageCallback(wil_details_FeaturePropertyCache *,void *);
int wil_details_SetPropertyFlagCallback(wil_details_FeaturePropertyCache *,void *);
int wil_details_StagingConfigFeature_HasUniqueState(wil_details_StagingConfigFeature const *);
int wil_details_StagingConfig_AreAnyFeaturesConfigured(wil_details_StagingConfig *);
int wil_details_StagingConfig_QueryFeatureState(wil_details_StagingConfig *,wil_FeatureState *,unsigned int,int);
long (* g_wil_details_pfnNtQueryWnfStateData)(__WIL__WNF_STATE_NAME const *,__WIL__WNF_TYPE_ID const *,void const *,unsigned long *,void *,unsigned long *);
long (* g_wil_details_pfnNtUpdateWnfStateData)(__WIL__WNF_STATE_NAME const *,void const *,unsigned long,__WIL__WNF_TYPE_ID const *,void const *,unsigned long,unsigned long);
long (* g_wil_details_pfnRtlSubscribeWnfStateChangeNotification)(__WIL__WNF_USER_SUBSCRIPTION * *,__WIL__WNF_STATE_NAME,unsigned long,long (*)(__WIL__WNF_STATE_NAME,unsigned long,__WIL__WNF_TYPE_ID *,void *,void const *,unsigned long),void *,__WIL__WNF_TYPE_ID *,unsigned long,unsigned long);
long (* g_wil_details_pfnRtlUnsubscribeWnfNotificationWaitForCompletion)(__WIL__WNF_USER_SUBSCRIPTION *);
long ActivePartitionChangedEventArgs_CreateInstance(_GUID const &,void * *);
long CSimpleEnumString_CreateInstance(int,CSimpleEnumString * *);
long CloudStorage_CreateInstance(EffectiveWebAccountContext const &,unsigned short const *,_GUID const &,void * *);
long CloudStoreDataChangedEventArgs_CreateInstance(Windows::Internal::Storage::Cloud::PartitionKind,HSTRING__ *,HSTRING__ *,HSTRING__ *,Windows::Internal::Storage::Cloud::CloudDataChangeKinds,Windows::Internal::Storage::Cloud::ICloudStoreData *,Windows::Internal::Storage::Cloud::ICloudStoreDataChangedEventArgs * *);
long CloudStorePartitionInfo_CreateInstance(Windows::Internal::Storage::Cloud::PartitionKind,unsigned short const *,unsigned short const *,Windows::Internal::Storage::Cloud::Partitioning::IPartitionMetadata *,_GUID const &,void * *);
long CloudStorePartitionManager_CreateInstance(Windows::Internal::Storage::Cloud::ICloudStore *,_GUID const &,void * *);
long CloudStorePartitionSet_CreateInstance(Windows::Internal::Storage::Cloud::ICloudStore *,Windows::Internal::Storage::Cloud::PartitionKind,_GUID const &,void * *);
long CloudStore_CreateInstance(EffectiveUserContext const &,EffectiveWebAccountContext const &,unsigned short const *,_GUID const &,void * *);
long CloudStore_CreateInstance(Windows::Internal::Storage::Cloud::CloudStoreOptions,Windows::System::IUser *,Windows::Security::Credentials::IWebAccount *,unsigned short const *,_GUID const &,void * *);
long ConvertIBufferToBondBlob(Windows::Storage::Streams::IBuffer *,bond::blob *);
long ConvertIBufferToIStream(Windows::Storage::Streams::IBuffer *,IStream * *);
long ConvertIStreamToIBuffer(IStream *,Windows::Storage::Streams::IBuffer * *);
long Get32BitStreamSize(IStream *,unsigned int *);
long GetBufferBytesNoCopyIfPossible(Windows::Storage::Streams::IBuffer *,unsigned char * *,unsigned int *);
long GetStreamBytesNoCopyIfPossible(IStream *,IUnknown * *,unsigned char * *,unsigned int *);
long NarrowStringToBstr(char const *,unsigned short * *);
long NarrowStringToWideStringCoTaskMemAlloc(char const *,unsigned short * *);
long ResultFromKnownLastError();
long StringCchCatW(unsigned short *,unsigned __int64,unsigned short const *);
long StringCchCopyA(char *,unsigned __int64,char const *);
long StringCchCopyNExW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64,unsigned short * *,unsigned __int64 *,unsigned long);
long StringCchCopyNW(unsigned short *,unsigned __int64,unsigned short const *,unsigned __int64);
long StringCchCopyW(unsigned short *,unsigned __int64,unsigned short const *);
long StringCchPrintfW(unsigned short *,unsigned __int64,unsigned short const *,...);
long TypeServices_CreateInstance(EffectiveUserContext const &,unsigned short const *,_GUID const &,void * *);
long WideStringToLowerOrdinal(unsigned short const *,unsigned short *,unsigned __int64,unsigned __int64 *);
long WideStringToLowerOrdinalCoTaskMemAlloc(unsigned short const *,unsigned short * *);
long WideStringToNarrowStringCoTaskMemAlloc(unsigned short const *,char * *);
long _AllocArray<unsigned short,CTCoAllocPolicy>(void *,unsigned long,unsigned __int64,unsigned short * *);
long _AllocStringWorker<CTCoAllocPolicy>(void *,unsigned long,unsigned short const *,unsigned __int64,unsigned __int64,unsigned short * *);
long wil_details_NtQueryWnfStateData(__WIL__WNF_STATE_NAME const *,__WIL__WNF_TYPE_ID const *,void const *,unsigned long *,void *,unsigned long *);
long wil_details_NtUpdateWnfStateData(__WIL__WNF_STATE_NAME const *,void const *,unsigned long,__WIL__WNF_TYPE_ID const *,void const *,unsigned long,unsigned long);
long wil_details_RtlSubscribeWnfStateChangeNotification(__WIL__WNF_USER_SUBSCRIPTION * *,__WIL__WNF_STATE_NAME,unsigned long,long (*)(__WIL__WNF_STATE_NAME,unsigned long,__WIL__WNF_TYPE_ID *,void *,void const *,unsigned long),void *,__WIL__WNF_TYPE_ID *,unsigned long,unsigned long);
long wil_details_StagingConfig_FireNotification(wil_details_StagingConfig *,unsigned int,unsigned short);
long wil_details_StagingConfig_Load(wil_details_StagingConfig *,wil_FeatureStore,unsigned __int64,void *,int);
resolved<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > > LastWriterWins<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >(versioned<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > > const &,versioned<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > > const &);
resolved<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > > ResolveMap(ConflictPolicyValue,versioned<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > > const &,versioned<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > > const &,versioned<std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > > const &);
resolved<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > > LastWriterWins<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > >(versioned<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > > const &,versioned<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > > const &);
resolved<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > > ResolveSet(ConflictPolicyValue,versioned<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > > const &,versioned<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > > const &,versioned<std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > > const &);
resolved<std::vector<walkable::complex,std::allocator<walkable::complex> > > ResolveList(ConflictPolicyValue,versioned<std::vector<walkable::complex,std::allocator<walkable::complex> > > const &,versioned<std::vector<walkable::complex,std::allocator<walkable::complex> > > const &,versioned<std::vector<walkable::complex,std::allocator<walkable::complex> > > const &);
resolved<walkable::complex> ResolveComplex(ConflictPolicyValue,versioned<walkable::complex> const &,versioned<walkable::complex> const &,versioned<walkable::complex> const &);
resolved<walkable::field> LastWriterWins<walkable::field>(versioned<walkable::field> const &,versioned<walkable::field> const &);
resolved<walkable::scalar> LastWriterWins<walkable::scalar>(versioned<walkable::scalar> const &,versioned<walkable::scalar> const &);
resolved<walkable::scalar> ResolveScalar(ConflictPolicyValue,versioned<walkable::scalar> const &,versioned<walkable::scalar> const &,versioned<walkable::scalar> const &);
resolved<walkable::scalar> ThreeWayMerge(versioned<walkable::scalar> const &,versioned<walkable::scalar> const &,versioned<walkable::scalar> const &);
resolved<walkable::structure> ResolveStructure(ConflictPolicyValue,versioned<walkable::structure> const &,versioned<walkable::structure> const &,versioned<walkable::structure> const &);
schematized_data ImportStructure(walkable::structure const &);
std::basic_string<char,std::char_traits<char>,std::allocator<char> > const & GetCloudAttributeValueString(bond::Metadata const &,CloudDataStructAttribute,GetAttributeOptions);
std::stack<MapFields,std::deque<MapFields,std::allocator<MapFields> > > mapFieldsStack;
std::unique_ptr<CompactBinaryWriterCallback,std::default_delete<CompactBinaryWriterCallback> > MakeCompactBinaryWriterCallback();
std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > MakeCspExportCallback();
std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > MakeCspGetLegacyStoreInfoCallback(LegacyStoreInfo &);
std::unique_ptr<StructureWalkCallback,std::default_delete<StructureWalkCallback> > MakeCspImportCallback(StructureWalkCallback &);
std::unordered_set<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,TypenameAndInstanceIdHasher,std::equal_to<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > GetDirectlyReferencedItems(std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const &,ISchematizedCloudStore *,Windows::Internal::Storage::Cloud::PartitionKind,HSTRING__ *,Windows::Internal::Storage::Cloud::LoadOptions);
std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > VectorToSet(std::vector<walkable::complex,std::allocator<walkable::complex> > const &);
std::vector<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > GetReferencedItemClosureForTopLevelItems(ISchematizedCloudStore *,Windows::Internal::Storage::Cloud::PartitionKind,HSTRING__ *,std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,Windows::Internal::Storage::Cloud::LoadOptions);
std::vector<std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> >,std::allocator<std::reference_wrapper<std::pair<walkable::scalar const ,walkable::complex> > > > CreateOrderedReferenceVector<std::pair<walkable::scalar const ,walkable::complex>,ReferenceWrapperPairComparator<walkable::scalar,walkable::complex>,std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >(std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > const &);
std::vector<std::reference_wrapper<unsigned short>,std::allocator<std::reference_wrapper<unsigned short> > > GetOrderedKeyReferenceVector<unsigned short,ReferenceWrapperComparator<unsigned short>,std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > >(std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > const &);
std::vector<std::reference_wrapper<unsigned short>,std::allocator<std::reference_wrapper<unsigned short> > > GetSortedKeyUnion<unsigned short,ReferenceWrapperComparator<unsigned short>,std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > >(std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > const &,std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > const &,std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > const &);
std::vector<std::reference_wrapper<walkable::complex>,std::allocator<std::reference_wrapper<walkable::complex> > > CreateOrderedReferenceVector<walkable::complex,ReferenceWrapperComparator<walkable::complex>,std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > >(std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > const &);
std::vector<std::reference_wrapper<walkable::scalar>,std::allocator<std::reference_wrapper<walkable::scalar> > > GetOrderedKeyReferenceVector<walkable::scalar,ReferenceWrapperComparator<walkable::scalar>,std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >(std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > const &);
std::vector<std::reference_wrapper<walkable::scalar>,std::allocator<std::reference_wrapper<walkable::scalar> > > GetSortedKeyUnion<walkable::scalar,ReferenceWrapperComparator<walkable::scalar>,std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >(std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > const &,std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > const &,std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > const &);
std::vector<walkable::complex,std::allocator<walkable::complex> > CopyVectorFromReferenceVector<walkable::complex>(std::vector<std::reference_wrapper<walkable::complex>,std::allocator<std::reference_wrapper<walkable::complex> > > const &);
unsigned __int64 GetHash<walkable::field>(std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > const &,std::unique_ptr<walkable::structure,std::default_delete<walkable::structure> > const &);
unsigned char GetMultipleInstances(bond::Metadata const &,GetAttributeOptions);
unsigned char MapValueInTypedList<unsigned char>(char const *,MapEntry<unsigned char> const *,unsigned __int64);
unsigned long _RegSetKeyValue(HKEY__ *,unsigned short const *,unsigned short const *,unsigned long,void const *,unsigned long);
unsigned short GetVariantVarTypeFromString(char const *);
unsigned short const * const InterfaceName_Windows_Internal_Storage_Cloud_Partitioning_IDeviceExperienceMetadata;
unsigned short const * const InterfaceName_Windows_Storage_Streams_IBuffer;
unsigned short const * const RuntimeClass_Windows_Internal_Security_Authentication_Web_TokenBrokerInternal;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_Broker_CloudStoreBroker;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_CloudStore;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_CloudStoreData;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_CloudStoreDataWatcher;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_CloudStoreSaveResult;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_CloudStoreSchema;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_Metadata_TypeServices;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_Model_CloudDataField;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_Model_CloudDataType;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_Partitioning_ActivePartitionChangedEventArgs;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_Partitioning_CloudStorePartitionManager;
unsigned short const * const RuntimeClass_Windows_Internal_Storage_Cloud_Partitioning_CloudStorePartitionSet;
unsigned short const * const RuntimeClass_Windows_System_Internal_UserManager;
versioned<schematized_data> ResolveSchematizedData(versioned<schematized_data> const &,versioned<schematized_data> const &,versioned<schematized_data> const &);
void (* g_wil_details_apiRecordFeatureUsage)(unsigned int,unsigned int,unsigned int,char const *);
void (* g_wil_details_apiSubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
void (* g_wil_details_apiUnsubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
void (* g_wil_details_internalRecordFeatureError)(unsigned int,FEATURE_ERROR const *);
void (* g_wil_details_internalRecordFeatureUsage)(unsigned int,unsigned int,unsigned int,char const *);
void (* g_wil_details_internalSubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ * *,void (*)(void *),void *);
void (* g_wil_details_internalUnsubscribeFeatureStateChangeNotification)(FEATURE_STATE_CHANGE_SUBSCRIPTION__ *);
void (* g_wil_details_pfnFeatureLoggingHook)(unsigned int,FEATURE_LOGGED_TRAITS const *,FEATURE_ERROR const *,int,wil_ReportingKind const *,wil_VariantReportingKind const *,unsigned char,unsigned __int64);
void (* g_wil_details_recordFeatureUsage)(unsigned int,wil_details_FeaturePropertyCache *,wil_details_RecordUsageResult *);
void * operator new(unsigned __int64);
void * operator new(unsigned __int64,std::nothrow_t const &);
void * operator new[](unsigned __int64);
void * operator new[](unsigned __int64,std::nothrow_t const &);
void EmplaceUnique<unsigned short,walkable::field,std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > >(std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > &,unsigned short const &,walkable::field const &);
void EmplaceUnique<walkable::scalar,walkable::complex,std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >(std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > &,walkable::scalar const &,walkable::complex const &);
void ExportStructure(schematized_data);
void GetLegacyStoreInfo(walkable::structure const &,LegacyStoreInfo &);
void GetReferencedItemClosureResursive(std::unordered_set<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >,TypenameAndInstanceIdHasher,std::equal_to<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > >,std::allocator<std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > > > &,std::pair<std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >,std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > > const &,ISchematizedCloudStore *,Windows::Internal::Storage::Cloud::PartitionKind,HSTRING__ *,Windows::Internal::Storage::Cloud::LoadOptions);
void UnmarshalStruct<Windows::Data::Platform::Partitioning::ActivePartitions>(bond::blob const &,Windows::Data::Platform::Partitioning::ActivePartitions &);
void UnmarshalStruct<Windows::Data::Platform::Partitioning::SystemPartitionIndex>(bond::blob const &,Windows::Data::Platform::Partitioning::SystemPartitionIndex &);
void WalkComplex(StructureWalkCallback &,walkable::complex const &);
void WalkField(StructureWalkCallback &,unsigned short,walkable::field const &);
void WalkList(StructureWalkCallback &,std::vector<walkable::complex,std::allocator<walkable::complex> > const &,bond::RuntimeSchema const &);
void WalkMap(StructureWalkCallback &,std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > const &,bond::_bond_enumerators::BondDataType::BondDataType,bond::RuntimeSchema const &);
void WalkScalar(StructureWalkCallback &,walkable::scalar const &);
void WalkSet(StructureWalkCallback &,std::unordered_set<walkable::complex,walkable::complex::hasher,std::equal_to<walkable::complex>,std::allocator<walkable::complex> > const &,bond::RuntimeSchema const &);
void WalkStructureRecursive(StructureWalkCallback &,walkable::structure const &,bool);
void _TlgWriteActivityAutoStop<0,5>(_TlgProvider_t const *,_GUID const *);
void _TlgWriteActivityAutoStop<35184372088832,5>(_TlgProvider_t const *,_GUID const *);
void _TlgWriteActivityAutoStop<70368744177664,5>(_TlgProvider_t const *,_GUID const *);
void __ArrayUnwind(void *,unsigned __int64,unsigned __int64,void (*)(void *));
void __scrt_initialize_type_info();
void __scrt_throw_std_bad_alloc();
void __scrt_throw_std_bad_array_new_length();
void __scrt_uninitialize_type_info();
void operator delete(void *);
void operator delete(void *,std::nothrow_t const &);
void operator delete(void *,unsigned __int64);
void operator delete(void *,void *);
void operator delete[](void *);
void operator delete[](void *,unsigned __int64);
void sort_keys_into<unsigned short,std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > >(std::shared_ptr<std::vector<unsigned short,std::allocator<unsigned short> > > const &,std::map<unsigned short,walkable::field,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,walkable::field> > > const &);
void sort_keys_into<walkable::scalar,std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > >(std::shared_ptr<std::vector<walkable::scalar,std::allocator<walkable::scalar> > > const &,std::unordered_map<walkable::scalar,walkable::complex,walkable::scalar::hasher,std::equal_to<walkable::scalar>,std::allocator<std::pair<walkable::scalar const ,walkable::complex> > > const &);
void wil_details_FeaturePropertyCache_ReportUsageToService(wil_details_FeaturePropertyCache *,unsigned int,FEATURE_LOGGED_TRAITS const *,int,wil_ReportingKind,unsigned __int64);
walkable::field CreateDefaultField(bond::RuntimeSchema const &,bond::FieldDef const &);
walkable::structure UnmarshalToWalkable(bond::RuntimeSchema const &,Windows::Internal::Storage::Cloud::Model::CloudDataField *);
wil::PropVariant CspToBond(tagVARIANT const &,unsigned short);
wil::Variant BondToCsp(tagPROPVARIANT const &,unsigned short);
wil_StagingConfig * g_wil_details_stagingConfigForMachine;
wil_StagingConfig * g_wil_details_stagingConfigForUser;
wil_details_FeatureTestState * g_wil_details_testStates;
wil_details_RecordUsageResult wil_details_RecordUsageInPropertyCache(wil_details_FeaturePropertyCache *,wil_details_ServiceReportingKind,unsigned int,unsigned int);
wistd::unique_ptr<char [0],wil::function_deleter<void (*)(void *),&void CoTaskMemFree(void *)> > WideStringToNarrowStringAlloc(unsigned short const *);
